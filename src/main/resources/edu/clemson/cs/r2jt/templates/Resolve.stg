ConceptAST(concept, uses, parameters, block) ::= <<
concept <concept.name><if(parameters)>(<parameters; separator=", ">)<endif>
    <uses>
    <block>
end <concept.name>
>>

FacilityAST(facility, uses, requires, block) ::= <<
facility <facility.name>
    <uses>
    <if(requires)>requires <requires><endif>
    <block>
end <facility.name>
>>

ImportBlockAST(block, explicits) ::= <%
<if(explicits)>uses <explicits; separator={, }><endif>%>

ModuleBlockAST(block, elements) ::= <<
<elements; separator="\n">
>>

OperationSigAST(operation, parameters, requires, ensures) ::= <<
operation <operation.name>(<parameters; separator=", ">)
    <if(requires)>requires <requires><endif>
    <if(ensures)>ensures <ensures><endif>
>>

OperationImplAST(operation, parameters, requires, ensures, variables) ::= <<
operation <operation.name>(<parameters; separator=", ">)
    <if(requires)>requires <requires><endif>
    <if(ensures)>ensures <ensures><endif>
        procedure
            <variables; separator="\n">
end <operation.name>
>>

TypeInitAST(init, requires, ensures) ::= <<
initialization <if(requires)>requires <requires><endif>
    <if(ensures)>ensures <ensures><endif>
>>

TypeFinalAST(final, requires, ensures) ::= <<
finalization <if(requires)>requires <requires><endif>
    <if(ensures)>ensures <ensures><endif>
>>

ModuleParameterAST(parameter) ::= "<parameter.payload>"

ParameterAST(parameter, type) ::= <<
<parameter.mode; format="lower"> <parameter.name>: <type>
>>

TypeParameterAST(parameter) ::= "type <parameter.name>"

TypeModelAST(type, model, constraint, init, final) ::= <<
type family <type.name>
        is modeled by <model>
    exemplar <type.exemplar>
    <constraint>
    <init>
    <final>
>>

NamedTypeAST(type) ::= "<if(type.qualifier)><type.qualifier>.<endif><type.name>"

MathTypeAST(expr) ::= "<expr>"

MathSymbolAST(expr, arguments) ::= <%<if(expr.incoming)>#<endif>
<expr.name><if(arguments)>(<arguments; separator=", ">)<endif>%>

FacilityDeclAST(facility, pair, enhancements) ::= <<
facility <facility.name>
    is <pair>
    <enhancements>
>>

PairedEnhancementAST(enhancement, pair) ::= <<
enhanced by <pair>
>>

SpecBodyPairAST(pair, spec, body) ::= <<
<spec>
    realized by <body>
>>

ModuleParameterizationAST(parameterization, arguments) ::= <<
<parameterization.name><if(arguments)>(<arguments; separator=", ">)<endif>
>>

ModuleArgAST(moduleArg, argument) ::= "<argument>"

ProgNameRefAST(nameRef) ::= <%
<if(nameRef.qualifier)><nameRef.qualifier>::<endif><nameRef.name>%>

ProgCallRefAST(callRef, arguments) ::= <%
<if(callRef.qualifier)><callRef.qualifier>::<endif><callRef.name>
(<arguments; separator=", ">)%>

ProgStringRefAST(stringRef) ::= "<stringRef.literal>"

ProgIntegerRefAST(integerRef) ::= "<integerRef.literal>"

ProgCharacterRefAST(characterRef) ::= "<characterRef.literal>"