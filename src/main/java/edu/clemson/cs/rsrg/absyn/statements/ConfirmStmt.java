/**
 * ConfirmStmt.java
 * ---------------------------------
 * Copyright (c) 2016
 * RESOLVE Software Research Group
 * School of Computing
 * Clemson University
 * All rights reserved.
 * ---------------------------------
 * This file is subject to the terms and conditions defined in
 * file 'LICENSE.txt', which is part of this source code package.
 */
package edu.clemson.cs.rsrg.absyn.statements;

import edu.clemson.cs.rsrg.absyn.expressions.Exp;
import edu.clemson.cs.rsrg.parsing.data.Location;

/**
 * <p>This is the class for all the confirm statement objects
 * that the compiler builds using the ANTLR4 AST nodes or
 * generated during the VC Generation step.</p>
 *
 * @version 2.0
 */
public class ConfirmStmt extends Statement {

    // ===========================================================
    // Member Fields
    // ===========================================================

    /** <p>The confirm assertion expression</p> */
    private final Exp myAssertion;

    /** <p>This flag indicates if this confirm can be simplified or not</p> */
    private final boolean mySimplify;

    // ===========================================================
    // Constructors
    // ===========================================================

    /**
     * <p>This constructs a confirm statement.</p>
     *
     * @param l A {@link Location} representation object.
     * @param assertion A {@link Exp} representing the confirm statement's
     *                  assertion expression.
     * @param simplify A flag to indicate whether or not this is a
     *                 confirm statement that can be simplified. In general,
     *                 the only confirm statements that can be simplified are
     *                 the special ones generated by the VC generator.
     */
    public ConfirmStmt(Location l, Exp assertion, boolean simplify) {
        super(l);
        myAssertion = assertion;
        mySimplify = simplify;
    }

    // ===========================================================
    // Public Methods
    // ===========================================================

    /**
     * {@inheritDoc}
     */
    @Override
    public final String asString(int indentSize, int innerIndentInc) {
        StringBuffer sb = new StringBuffer();
        printSpace(indentSize, sb);
        sb.append("Confirm ");
        sb.append(myAssertion.asString(0, innerIndentInc));
        sb.append(";");

        return sb.toString();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public final boolean equals(Object o) {
        if (this == o)
            return true;
        if (o == null || getClass() != o.getClass())
            return false;

        ConfirmStmt that = (ConfirmStmt) o;

        if (mySimplify != that.mySimplify)
            return false;
        return myAssertion.equals(that.myAssertion);

    }

    /**
     * <p>This method returns the confirming assertion expression.</p>
     *
     * @return The {@link Exp} representation object.
     */
    public final Exp getAssertion() {
        return myAssertion;
    }

    /**
     * <p>This method returns whether this confirm statement can be simplified.</p>
     *
     * @return {@code true} if it is a confirm statement we can simplify, {@code false} otherwise.
     */
    public final boolean getSimplify() {
        return mySimplify;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public final int hashCode() {
        int result = myAssertion.hashCode();
        result = 31 * result + (mySimplify ? 1 : 0);
        return result;
    }

    // ===========================================================
    // Protected Methods
    // ===========================================================

    /**
     * {@inheritDoc}
     */
    @Override
    protected final Statement copy() {
        return new ConfirmStmt(cloneLocation(), myAssertion.clone(), mySimplify);
    }

}