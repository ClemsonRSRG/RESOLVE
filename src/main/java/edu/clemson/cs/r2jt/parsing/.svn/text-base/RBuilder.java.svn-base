// $ANTLR 3.3 Nov 30, 2010 12:50:56 RBuilder.g 2012-03-21 14:01:37

    package edu.clemson.cs.r2jt.parsing;
    
    import org.antlr.*;
    import edu.clemson.cs.r2jt.absyn.*;
    import edu.clemson.cs.r2jt.data.*;
    import edu.clemson.cs.r2jt.errors.ErrorHandler;
    import edu.clemson.cs.r2jt.collections.Iterator;
    import edu.clemson.cs.r2jt.type.Type;
    import edu.clemson.cs.r2jt.type.IsInType;
    import edu.clemson.cs.r2jt.type.BooleanType;
    //import edu.clemson.cs.r2jt.collections.List;


import org.antlr.runtime.*;
import org.antlr.runtime.tree.*;import java.util.Stack;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;

public class RBuilder extends TreeParser {
    public static final String[] tokenNames = new String[] {
        "<invalid>", "<EOR>", "<DOWN>", "<UP>", "ABS", "AD", "ABSURDUM", "ALL", "ALTERS", "ALTERNATIVE", "AND", "ARRAY", "ASSUME", "AUX_CODE", "AUX_VAR", "AUX_VARS", "AUXILIARY", "AXIOM", "BOOLEAN", "BASECASE", "BY", "CARTPROD", "CATEGORICAL", "CASE", "CHANGING", "CLEARS", "COMMON", "CONCLUSION", "COMMUTATIVITY", "COMPLEMENT", "CONCEPT", "MODULE_CONCEPT", "CONFIRM", "CONJUNCT", "CONSTRAINT", "CONTRADICTION", "CONVENTION", "COROLLARY", "CORR", "DECREASING", "DEDUCTION", "DEFINES", "DEFINITION", "DISTRIBUTION", "DIV", "DO", "DURATION", "ELAPSED_TIME", "ELSE", "ELIMINATION", "END", "ENHANCED", "ENHANCEMENT", "MODULE_ENHANCEMENT", "ENSURES", "EQUALITY", "EVALUATES", "EXCLUDED", "EXEMPLAR", "EXISTENTIAL", "EXISTS", "EXIT", "FACILITY", "FAC_FINAL", "FAC_INIT", "FAMILY", "FINALIZATION", "FROM", "FOR", "FORGET", "GENERALIZATION", "IF", "IFF", "IMPLICIT", "IMPLIES", "INDUCTIVE", "INDUCTIVECASE", "INITIALIZATION", "INSTANTIATION", "INTERSECT", "INTRODUCES", "IS", "IN", "NOT_IN", "NOT_PROP_SUBSET", "NOT_SUBSET", "NOT_SUBSTR", "PROP_SUBSET", "SUBSET", "SUBSTR", "ITERATE", "LAMBDA", "LEMMA", "LOCAL", "MAINP_DISP", "MAINTAINING", "MATH", "MIDDLE", "MOD", "MODELED", "MODUS", "NOT", "CAT", "OF", "OPERATION", "OR", "OTHERWISE", "PERF_FINAL", "PERF_INIT", "PONENS", "PRESERVES", "PROCEDURE", "MODULE_PROFILE", "PROOF", "PROOFS_FOR", "PROPERTY", "QED", "QUANTIFIER", "REALIZATION", "MODULE_REALIZATION", "REALIZED", "REASSIGNS", "RECORD", "RECURSIVE", "REDUCTIO", "RELATED", "REM", "REMEMBER", "REPEAT", "REPLACES", "REPRESENTED", "REQUIRES", "RESPECTS", "RESTORES", "RULE", "SELF", "SHORT_FOR", "STATIC", "SUBTYPE", "SUCH", "SUPPOSITION", "THAT", "THEN", "THEOREM", "THEORY", "THERE", "TIMES", "TYPE", "TYPE_FAMILY", "UNION", "UNIQUE", "UNIT", "UNIVERSAL", "UPDATES", "USES", "VAR", "VARIABLES", "WHEN", "WHERE", "WHILE", "WITHOUT", "WITH_PROFILE", "LETTER", "ALPHABETIC", "IDENTIFIER", "WS", "SL_COMMENT", "ML_COMMENT", "DIGIT", "DIGITS", "DOT", "REAL", "NUMERIC_LITERAL", "ESC", "CHARACTER_LITERAL", "COMMA", "LPAREN", "RPAREN", "LBRACE", "RBRACE", "DBL_LBRACE", "DBL_RBRACE", "LSQBRACK", "RSQBRACK", "HASH", "CARAT", "PLUS", "MINUS", "AMPERSAND", "MULTIPLY", "DIVIDE", "EXP", "RANGE", "NOT_EQL", "GT_EQL", "LT_EQL", "EQL", "LT", "GT", "LL", "GG", "FUNCARROW", "COLON", "SEMICOLON", "SWAP_OP", "ASSIGN_OP", "BAR", "DBL_BAR", "DQUOTE", "TILDE", "STRING_LITERAL", "USABLE", "FREE_OPERATOR", "REQUIRED_SYMBOLIC", "AND_RULE", "AFFECTS", "ALTERNATIVE_ELIMINATION", "ANGLE", "AUX_OPERATION", "ARRAYFUNCTION", "BETWEEN_EXPR", "CATEGORICAL_DEFINITION", "CHOICES", "COMMON_CONCLUSION", "CONFIRM_TYPE", "CONJUNCT_ELIMINATION", "DECLARATIONS", "DBL_ANGLE", "ENHANCED_BY", "EXCLUDED_MIDDLE", "EXISTENTIAL_GENERALIZATION", "EXISTENTIAL_INSTANTIATION", "EXISTS_UNIQUE", "EXPR", "FORALL", "FUNCTION", "IDENT", "IMPLICIT_DEF", "INDEXED_DEFINITION", "INDUCTIVE_DEF", "ITERATE_EXIT", "ITERATION", "LOCAL_MATH_TYPE", "MATH_TYPE", "MODUS_PONENS", "NESTED", "OR_RULE", "PARAMS", "QUANTIFIER_DISTRIBUTION", "RECURSIVE_OPERATION_PROCEDURE", "RECURSIVE_PROCEDURE", "REDUCTIO_AD_ABSURDUM", "RELATED_BY", "PROGDOT", "SET_EXPR", "STATEMENT", "STATEMENT_SEQUENCE", "TUPLE", "TYPEX", "UNARY_FREE_OP", "UNARY_MINUS", "UNIVERSAL_GENERALIZATION", "UNIVERSAL_INSTANTIATION", "VARDOT", "PROOFBODY", "MATHITEMREF", "PROOFEXPR", "SUPDEDUC", "SIMPLIFICATION", "RULE1", "RULE2", "RULE3", "HYPDESIG", "PROOFEXPRLIST", "REFCALL", "QUALNUM", "LOCALVAREXP", "XOR", "ANDTHEN", "ORELSE", "BIG_UNION", "BIG_INTERSECT", "BIG_SUM", "BIG_PRODUCT", "BIG_CONCAT", "ELSIF", "DEFAULT", "PROP_SUBSTR", "NOT_PROP_SUBSTR", "GOAL"
    };
    public static final int EOF=-1;
    public static final int ABS=4;
    public static final int AD=5;
    public static final int ABSURDUM=6;
    public static final int ALL=7;
    public static final int ALTERS=8;
    public static final int ALTERNATIVE=9;
    public static final int AND=10;
    public static final int ARRAY=11;
    public static final int ASSUME=12;
    public static final int AUX_CODE=13;
    public static final int AUX_VAR=14;
    public static final int AUX_VARS=15;
    public static final int AUXILIARY=16;
    public static final int AXIOM=17;
    public static final int BOOLEAN=18;
    public static final int BASECASE=19;
    public static final int BY=20;
    public static final int CARTPROD=21;
    public static final int CATEGORICAL=22;
    public static final int CASE=23;
    public static final int CHANGING=24;
    public static final int CLEARS=25;
    public static final int COMMON=26;
    public static final int CONCLUSION=27;
    public static final int COMMUTATIVITY=28;
    public static final int COMPLEMENT=29;
    public static final int CONCEPT=30;
    public static final int MODULE_CONCEPT=31;
    public static final int CONFIRM=32;
    public static final int CONJUNCT=33;
    public static final int CONSTRAINT=34;
    public static final int CONTRADICTION=35;
    public static final int CONVENTION=36;
    public static final int COROLLARY=37;
    public static final int CORR=38;
    public static final int DECREASING=39;
    public static final int DEDUCTION=40;
    public static final int DEFINES=41;
    public static final int DEFINITION=42;
    public static final int DISTRIBUTION=43;
    public static final int DIV=44;
    public static final int DO=45;
    public static final int DURATION=46;
    public static final int ELAPSED_TIME=47;
    public static final int ELSE=48;
    public static final int ELIMINATION=49;
    public static final int END=50;
    public static final int ENHANCED=51;
    public static final int ENHANCEMENT=52;
    public static final int MODULE_ENHANCEMENT=53;
    public static final int ENSURES=54;
    public static final int EQUALITY=55;
    public static final int EVALUATES=56;
    public static final int EXCLUDED=57;
    public static final int EXEMPLAR=58;
    public static final int EXISTENTIAL=59;
    public static final int EXISTS=60;
    public static final int EXIT=61;
    public static final int FACILITY=62;
    public static final int FAC_FINAL=63;
    public static final int FAC_INIT=64;
    public static final int FAMILY=65;
    public static final int FINALIZATION=66;
    public static final int FROM=67;
    public static final int FOR=68;
    public static final int FORGET=69;
    public static final int GENERALIZATION=70;
    public static final int IF=71;
    public static final int IFF=72;
    public static final int IMPLICIT=73;
    public static final int IMPLIES=74;
    public static final int INDUCTIVE=75;
    public static final int INDUCTIVECASE=76;
    public static final int INITIALIZATION=77;
    public static final int INSTANTIATION=78;
    public static final int INTERSECT=79;
    public static final int INTRODUCES=80;
    public static final int IS=81;
    public static final int IN=82;
    public static final int NOT_IN=83;
    public static final int NOT_PROP_SUBSET=84;
    public static final int NOT_SUBSET=85;
    public static final int NOT_SUBSTR=86;
    public static final int PROP_SUBSET=87;
    public static final int SUBSET=88;
    public static final int SUBSTR=89;
    public static final int ITERATE=90;
    public static final int LAMBDA=91;
    public static final int LEMMA=92;
    public static final int LOCAL=93;
    public static final int MAINP_DISP=94;
    public static final int MAINTAINING=95;
    public static final int MATH=96;
    public static final int MIDDLE=97;
    public static final int MOD=98;
    public static final int MODELED=99;
    public static final int MODUS=100;
    public static final int NOT=101;
    public static final int CAT=102;
    public static final int OF=103;
    public static final int OPERATION=104;
    public static final int OR=105;
    public static final int OTHERWISE=106;
    public static final int PERF_FINAL=107;
    public static final int PERF_INIT=108;
    public static final int PONENS=109;
    public static final int PRESERVES=110;
    public static final int PROCEDURE=111;
    public static final int MODULE_PROFILE=112;
    public static final int PROOF=113;
    public static final int PROOFS_FOR=114;
    public static final int PROPERTY=115;
    public static final int QED=116;
    public static final int QUANTIFIER=117;
    public static final int REALIZATION=118;
    public static final int MODULE_REALIZATION=119;
    public static final int REALIZED=120;
    public static final int REASSIGNS=121;
    public static final int RECORD=122;
    public static final int RECURSIVE=123;
    public static final int REDUCTIO=124;
    public static final int RELATED=125;
    public static final int REM=126;
    public static final int REMEMBER=127;
    public static final int REPEAT=128;
    public static final int REPLACES=129;
    public static final int REPRESENTED=130;
    public static final int REQUIRES=131;
    public static final int RESPECTS=132;
    public static final int RESTORES=133;
    public static final int RULE=134;
    public static final int SELF=135;
    public static final int SHORT_FOR=136;
    public static final int STATIC=137;
    public static final int SUBTYPE=138;
    public static final int SUCH=139;
    public static final int SUPPOSITION=140;
    public static final int THAT=141;
    public static final int THEN=142;
    public static final int THEOREM=143;
    public static final int THEORY=144;
    public static final int THERE=145;
    public static final int TIMES=146;
    public static final int TYPE=147;
    public static final int TYPE_FAMILY=148;
    public static final int UNION=149;
    public static final int UNIQUE=150;
    public static final int UNIT=151;
    public static final int UNIVERSAL=152;
    public static final int UPDATES=153;
    public static final int USES=154;
    public static final int VAR=155;
    public static final int VARIABLES=156;
    public static final int WHEN=157;
    public static final int WHERE=158;
    public static final int WHILE=159;
    public static final int WITHOUT=160;
    public static final int WITH_PROFILE=161;
    public static final int LETTER=162;
    public static final int ALPHABETIC=163;
    public static final int IDENTIFIER=164;
    public static final int WS=165;
    public static final int SL_COMMENT=166;
    public static final int ML_COMMENT=167;
    public static final int DIGIT=168;
    public static final int DIGITS=169;
    public static final int DOT=170;
    public static final int REAL=171;
    public static final int NUMERIC_LITERAL=172;
    public static final int ESC=173;
    public static final int CHARACTER_LITERAL=174;
    public static final int COMMA=175;
    public static final int LPAREN=176;
    public static final int RPAREN=177;
    public static final int LBRACE=178;
    public static final int RBRACE=179;
    public static final int DBL_LBRACE=180;
    public static final int DBL_RBRACE=181;
    public static final int LSQBRACK=182;
    public static final int RSQBRACK=183;
    public static final int HASH=184;
    public static final int CARAT=185;
    public static final int PLUS=186;
    public static final int MINUS=187;
    public static final int AMPERSAND=188;
    public static final int MULTIPLY=189;
    public static final int DIVIDE=190;
    public static final int EXP=191;
    public static final int RANGE=192;
    public static final int NOT_EQL=193;
    public static final int GT_EQL=194;
    public static final int LT_EQL=195;
    public static final int EQL=196;
    public static final int LT=197;
    public static final int GT=198;
    public static final int LL=199;
    public static final int GG=200;
    public static final int FUNCARROW=201;
    public static final int COLON=202;
    public static final int SEMICOLON=203;
    public static final int SWAP_OP=204;
    public static final int ASSIGN_OP=205;
    public static final int BAR=206;
    public static final int DBL_BAR=207;
    public static final int DQUOTE=208;
    public static final int TILDE=209;
    public static final int STRING_LITERAL=210;
    public static final int USABLE=211;
    public static final int FREE_OPERATOR=212;
    public static final int REQUIRED_SYMBOLIC=213;
    public static final int AND_RULE=214;
    public static final int AFFECTS=215;
    public static final int ALTERNATIVE_ELIMINATION=216;
    public static final int ANGLE=217;
    public static final int AUX_OPERATION=218;
    public static final int ARRAYFUNCTION=219;
    public static final int BETWEEN_EXPR=220;
    public static final int CATEGORICAL_DEFINITION=221;
    public static final int CHOICES=222;
    public static final int COMMON_CONCLUSION=223;
    public static final int CONFIRM_TYPE=224;
    public static final int CONJUNCT_ELIMINATION=225;
    public static final int DECLARATIONS=226;
    public static final int DBL_ANGLE=227;
    public static final int ENHANCED_BY=228;
    public static final int EXCLUDED_MIDDLE=229;
    public static final int EXISTENTIAL_GENERALIZATION=230;
    public static final int EXISTENTIAL_INSTANTIATION=231;
    public static final int EXISTS_UNIQUE=232;
    public static final int EXPR=233;
    public static final int FORALL=234;
    public static final int FUNCTION=235;
    public static final int IDENT=236;
    public static final int IMPLICIT_DEF=237;
    public static final int INDEXED_DEFINITION=238;
    public static final int INDUCTIVE_DEF=239;
    public static final int ITERATE_EXIT=240;
    public static final int ITERATION=241;
    public static final int LOCAL_MATH_TYPE=242;
    public static final int MATH_TYPE=243;
    public static final int MODUS_PONENS=244;
    public static final int NESTED=245;
    public static final int OR_RULE=246;
    public static final int PARAMS=247;
    public static final int QUANTIFIER_DISTRIBUTION=248;
    public static final int RECURSIVE_OPERATION_PROCEDURE=249;
    public static final int RECURSIVE_PROCEDURE=250;
    public static final int REDUCTIO_AD_ABSURDUM=251;
    public static final int RELATED_BY=252;
    public static final int PROGDOT=253;
    public static final int SET_EXPR=254;
    public static final int STATEMENT=255;
    public static final int STATEMENT_SEQUENCE=256;
    public static final int TUPLE=257;
    public static final int TYPEX=258;
    public static final int UNARY_FREE_OP=259;
    public static final int UNARY_MINUS=260;
    public static final int UNIVERSAL_GENERALIZATION=261;
    public static final int UNIVERSAL_INSTANTIATION=262;
    public static final int VARDOT=263;
    public static final int PROOFBODY=264;
    public static final int MATHITEMREF=265;
    public static final int PROOFEXPR=266;
    public static final int SUPDEDUC=267;
    public static final int SIMPLIFICATION=268;
    public static final int RULE1=269;
    public static final int RULE2=270;
    public static final int RULE3=271;
    public static final int HYPDESIG=272;
    public static final int PROOFEXPRLIST=273;
    public static final int REFCALL=274;
    public static final int QUALNUM=275;
    public static final int LOCALVAREXP=276;
    public static final int XOR=277;
    public static final int ANDTHEN=278;
    public static final int ORELSE=279;
    public static final int BIG_UNION=280;
    public static final int BIG_INTERSECT=281;
    public static final int BIG_SUM=282;
    public static final int BIG_PRODUCT=283;
    public static final int BIG_CONCAT=284;
    public static final int ELSIF=285;
    public static final int DEFAULT=286;
    public static final int PROP_SUBSTR=287;
    public static final int NOT_PROP_SUBSTR=288;
    public static final int GOAL=289;

    // delegates
    // delegators


        public RBuilder(TreeNodeStream input) {
            this(input, new RecognizerSharedState());
        }
        public RBuilder(TreeNodeStream input, RecognizerSharedState state) {
            super(input, state);
             
        }
        
    protected TreeAdaptor adaptor = new CommonTreeAdaptor();

    public void setTreeAdaptor(TreeAdaptor adaptor) {
        this.adaptor = adaptor;
    }
    public TreeAdaptor getTreeAdaptor() {
        return adaptor;
    }

    public String[] getTokenNames() { return RBuilder.tokenNames; }
    public String getGrammarFileName() { return "RBuilder.g"; }


        /**
         * Variables to tell us what type of module we are
         * parsing.  Used for semantic predicates of rules or productions
         * which are only applicable to particular modules.
         */
        boolean proofModule = false;
        boolean theoryModule = false;
        boolean conceptModule = false;
        boolean performanceModule = false;
        boolean headerModule = false;
        boolean bodyModule = false;
        boolean enhancementModule = false;
        boolean facilityModule = false;
        boolean enhancementBody = false;

        /* enhancementBody is a subclass of bodyModule.  It is only true
         * in the body of an enhancement module.  It is NOT true in a
         * "bundled implementation" module (a body that implements both a
         * concept and one or more enhancements at once). (BM)
         */

        /**
         * Reset the type of module we are parsing.
         */
        public void resetModuleType() {
            this.theoryModule = false;
            this.conceptModule = false;
            this.performanceModule = false;
            this.headerModule = false;
            this.bodyModule = false;
            this.enhancementModule = false;
            this.facilityModule = false;
            this.enhancementBody = false;
        }

        /** The error handler for this parser. */
        private ErrorHandler err;
        //private ErrorHandler err = ErrorHandler.getInstance();

        /** Delegate the error handling to the error handler. */
        public void reportError(RecognitionException ex) {
            System.out.println(getErrorMessage(ex, null));
            err.syntaxError(ex);
        }

        /** Delegate the warning handling to the error handler. */
        public void reportWarning(String s) {
            err.warning(s);
        }

    //      private PosSymbol getQualifier(edu.clemson.cs.r2jt.collections.List<PosSymbol> psyms) {
    //          PosSymbol qual = null;
    //          switch (psyms.size()) {
    //          case 1: qual = null; break;
    //          case 2: qual = psyms.get(0); break;
    //          default: assert false : "qual is invalid";
    //          }
    //          return qual;
    //      }

    //      private PosSymbol getName(edu.clemson.cs.r2jt.collections.List<PosSymbol> psyms) {
    //          PosSymbol name = null;
    //          switch (psyms.size()) {
    //          case 1: name = psyms.get(0); break;
    //          case 2: name = psyms.get(1); break;
    //          default: assert false : "psyms is invalid";
    //          }
    //          return name;
    //      }

        private Pos getPos(ColsAST ast) {
            return new Pos(ast.getLine(), ast.getCharPositionInLine());
        }

        private Location getLocation(ColsAST ast) {
            return new Location(err.getFile(), getPos(ast));
        }

        private Location getLocation(Pos pos) {
            return new Location(err.getFile(), pos);
        }

        private Symbol getSymbol(ColsAST ast) {
            return Symbol.symbol(ast.getText());
        }

        private Pos getASTPos(ColsAST ast) {
            return new Pos(ast.getLine(), ast.getCharPositionInLine());
        }
        
        private Symbol getASTSymbol(ColsAST ast) {
            return Symbol.symbol(ast.getText());
        }

        private PosSymbol getOutfixPosSymbol(ColsAST ast) {
            Pos pos = new Pos(ast.getLine(), ast.getCharPositionInLine());
            Location loc = new Location(err.getFile(), pos);
            String str = ast.getText();
            Symbol name = null;
            if (str.equals("<")) {
                name = Symbol.symbol("<_>");
            } else if (str.equals("<<")) {
                name = Symbol.symbol("<<_>>");
            } else if (str.equals("|")) {
                name = Symbol.symbol("|_|");
            } else if (str.equals("||")) {
                name = Symbol.symbol("||_||");
            } else if (str.equals("[")) {
              name = Symbol.symbol("[_]");
            }
            else if (str.equals("[[")) {
              name = Symbol.symbol("[[_]]");
            } else {
                assert false : "invalid symbol: " + str;
            }
            return new PosSymbol(loc, name);
        }

        private PosSymbol getPosSymbol(ColsAST ast) {
            Pos pos = new Pos(ast.getLine(), ast.getCharPositionInLine());
            Location loc = new Location(err.getFile(), pos);
            Symbol sym = Symbol.symbol(ast.getText());
            return new PosSymbol(loc, sym);
        }

        private edu.clemson.cs.r2jt.collections.List<ParameterVarDec> getParamVarDecList(Mode mode,
                edu.clemson.cs.r2jt.collections.List<VarDec> vars)
        {
            edu.clemson.cs.r2jt.collections.List<ParameterVarDec> pVars
                = new edu.clemson.cs.r2jt.collections.List<ParameterVarDec>("ParameterVarDec");
            Iterator<VarDec> i = vars.iterator();
            while (i.hasNext()) {
                VarDec var = i.next();
                ParameterVarDec pVar = new ParameterVarDec(mode,
                    var.getName(), var.getTy());
                pVars.add(pVar);
            }
            return pVars;
        }

        private InitItem getInitItem(Location loc, InitItem init) {
            return new InitItem(
                loc,
                init.getStateVars(),
                init.getRequires(),
                init.getEnsures(),
                init.getFacilities(),
                init.getVariables(),
                init.getAuxVariables(),
                init.getStatements()
            );
        }

        private FinalItem getFinalItem(Location loc, InitItem init) {
            return new FinalItem(
                loc,
                init.getStateVars(),
                init.getRequires(),
                init.getEnsures(),
                init.getFacilities(),
                init.getVariables(),
                init.getAuxVariables(),
                init.getStatements()
            );
        }

        private PerformanceInitItem getPerformanceInitItem(Location loc, PerformanceInitItem init) {
            return new PerformanceInitItem(
                loc,
                init.getStateVars(),
                init.getRequires(),
                init.getEnsures(),
                init.getDuration(),
                init.getMainp_disp(),
                init.getFacilities(),
                init.getVariables(),
                init.getAuxVariables(),
                init.getStatements()
            );
        }

        private PerformanceFinalItem getPerformanceFinalItem (Location loc, PerformanceFinalItem Final) {
            return new PerformanceFinalItem (
                loc,
                Final.getStateVars(),
                Final.getRequires(),
                Final.getEnsures(),
                Final.getDuration(),
                Final.getMainp_disp(),
                Final.getFacilities(),
                Final.getVariables(),
                Final.getAuxVariables(),
                Final.getStatements()
            );
        }
        
        private edu.clemson.cs.r2jt.collections.List<VarDec> getVarDecList(edu.clemson.cs.r2jt.collections.List<PosSymbol> psyms, Ty ty) {
            edu.clemson.cs.r2jt.collections.List<VarDec> vars = new edu.clemson.cs.r2jt.collections.List<VarDec>("VarDec");
            Iterator<PosSymbol> i = psyms.iterator();
            while (i.hasNext()) {
                PosSymbol ps = i.next();
                VarDec var = new VarDec(ps, ty);
                vars.add(var);
            }
            return vars;
        }
        
      private edu.clemson.cs.r2jt.collections.List<AuxVarDec> getAuxVarDecList(edu.clemson.cs.r2jt.collections.List<PosSymbol> psyms, Ty ty) {
            edu.clemson.cs.r2jt.collections.List<AuxVarDec> vars = new edu.clemson.cs.r2jt.collections.List<AuxVarDec>("AuxVarDec");
            Iterator<PosSymbol> i = psyms.iterator();
            while (i.hasNext()) {
                PosSymbol ps = i.next();
                AuxVarDec var = new AuxVarDec(ps, ty);
                vars.add(var);
            }
            return vars;
        }

        private edu.clemson.cs.r2jt.collections.List<MathVarDec> getMathVarDecList(edu.clemson.cs.r2jt.collections.List<PosSymbol> psyms, Ty ty) {
            edu.clemson.cs.r2jt.collections.List<MathVarDec> vars = new edu.clemson.cs.r2jt.collections.List<MathVarDec>("MathVarDec");
            Iterator<PosSymbol> i = psyms.iterator();
            while (i.hasNext()) {
                PosSymbol ps = i.next();
                MathVarDec var = new MathVarDec(ps, ty);
                vars.add(var);
            }
            return vars;
        }

        private int getIterativeOp (PosSymbol ps) {
            Symbol sym = ps.getSymbol();
            int op = 0;
            if (sym == Symbol.symbol("Sum")) {
                op = IterativeExp.SUM;
            } else if (sym == Symbol.symbol("Product")) {
                op = IterativeExp.PRODUCT;
            } else if (sym == Symbol.symbol("Concatenation")) {
                op = IterativeExp.CONCATENATION;
            } else if (sym == Symbol.symbol("Intersection")) {
                op = IterativeExp.INTERSECTION;
            } else if (sym == Symbol.symbol("Union")) {
                op = IterativeExp.UNION;
            } else {
                assert false : "Invalid symbol: " + sym;
            }
            return op;
        }

        private ProgramExp getProgramLiteral(Exp mlit) {
            if (mlit instanceof IntegerExp) {
                return new ProgramIntegerExp(
                    ((IntegerExp)mlit).getLocation(),
                    ((IntegerExp)mlit).getValue());
            } else if (mlit instanceof DoubleExp) {
                return new ProgramDoubleExp(
                    ((IntegerExp)mlit).getLocation(),
                    ((IntegerExp)mlit).getValue());
            } else if (mlit instanceof CharExp) {
                return new ProgramCharExp(
                    ((CharExp)mlit).getLocation(),
                    ((CharExp)mlit).getValue());
            } else if (mlit instanceof StringExp) {
                return new ProgramStringExp(
                    ((StringExp)mlit).getLocation(),
                    ((StringExp)mlit).getValue());
            } else {
                assert false : "Invalid expression type";
                return null;
            }
        }
        
        public String getErrorMessage(RecognitionException e,
            String[] tokenNames)
        {
            System.out.println("Builder Exception:");
            List stack = (List)getRuleInvocationStack(e, this.getClass().getName());
            String msg = null;
            if ( e instanceof NoViableAltException ) {
              NoViableAltException nvae = (NoViableAltException)e;
              msg = " no viable alt; token="+e.token+
              " (decision="+nvae.decisionNumber+
              " state "+nvae.stateNumber+")"+
              " decision=<<"+nvae.grammarDecisionDescription+">>";
            }
            else {
              msg = super.getErrorMessage(e, RBuilder.tokenNames);
            }
            return stack+" "+msg+"\n"+e.token;
            //return msg;
        }
        public String getTokenErrorDisplay(Token t) {
            return t.toString();
        }



    public static class module_return extends TreeRuleReturnScope {
        public ModuleDec dec = null;
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "module"
    // RBuilder.g:331:1: module[ErrorHandler err] returns [ModuleDec dec = null] : (dec1= proof_module | dec2= theory_module | dec3= conceptual_module | dec4= realization_body_module | dec5= enhancement_module | dec6= facility_module | dec7= performance_module ) ;
    public final RBuilder.module_return module(ErrorHandler err) throws RecognitionException {
        RBuilder.module_return retval = new RBuilder.module_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        ColsAST _first_0 = null;
        ColsAST _last = null;

        RBuilder.proof_module_return dec1 = null;

        RBuilder.theory_module_return dec2 = null;

        RBuilder.conceptual_module_return dec3 = null;

        RBuilder.realization_body_module_return dec4 = null;

        RBuilder.enhancement_module_return dec5 = null;

        RBuilder.facility_module_return dec6 = null;

        RBuilder.performance_module_return dec7 = null;




        this.err = err;

        try {
            // RBuilder.g:335:5: ( (dec1= proof_module | dec2= theory_module | dec3= conceptual_module | dec4= realization_body_module | dec5= enhancement_module | dec6= facility_module | dec7= performance_module ) )
            // RBuilder.g:335:9: (dec1= proof_module | dec2= theory_module | dec3= conceptual_module | dec4= realization_body_module | dec5= enhancement_module | dec6= facility_module | dec7= performance_module )
            {
            root_0 = (ColsAST)adaptor.nil();

            // RBuilder.g:335:9: (dec1= proof_module | dec2= theory_module | dec3= conceptual_module | dec4= realization_body_module | dec5= enhancement_module | dec6= facility_module | dec7= performance_module )
            int alt1=7;
            switch ( input.LA(1) ) {
            case PROOFS_FOR:
                {
                alt1=1;
                }
                break;
            case THEORY:
                {
                alt1=2;
                }
                break;
            case MODULE_CONCEPT:
                {
                alt1=3;
                }
                break;
            case MODULE_REALIZATION:
                {
                alt1=4;
                }
                break;
            case MODULE_ENHANCEMENT:
                {
                alt1=5;
                }
                break;
            case FACILITY:
                {
                alt1=6;
                }
                break;
            case MODULE_PROFILE:
                {
                alt1=7;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 1, 0, input);

                throw nvae;
            }

            switch (alt1) {
                case 1 :
                    // RBuilder.g:335:13: dec1= proof_module
                    {
                    if ( state.backtracking==0 ) {
                       proofModule = true; 
                    }
                    _last = (ColsAST)input.LT(1);
                    pushFollow(FOLLOW_proof_module_in_module137);
                    dec1=proof_module();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, dec1.getTree());
                    if ( state.backtracking==0 ) {
                       retval.dec = (dec1!=null?dec1.pmd:null); 
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // RBuilder.g:337:13: dec2= theory_module
                    {
                    if ( state.backtracking==0 ) {
                       theoryModule = true; 
                    }
                    _last = (ColsAST)input.LT(1);
                    pushFollow(FOLLOW_theory_module_in_module174);
                    dec2=theory_module();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, dec2.getTree());
                    if ( state.backtracking==0 ) {
                       retval.dec = (dec2!=null?dec2.dec:null); 
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 3 :
                    // RBuilder.g:339:13: dec3= conceptual_module
                    {
                    if ( state.backtracking==0 ) {
                       conceptModule = true; 
                    }
                    _last = (ColsAST)input.LT(1);
                    pushFollow(FOLLOW_conceptual_module_in_module211);
                    dec3=conceptual_module();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, dec3.getTree());
                    if ( state.backtracking==0 ) {
                       retval.dec = (dec3!=null?dec3.dec:null); 
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 4 :
                    // RBuilder.g:341:13: dec4= realization_body_module
                    {
                    if ( state.backtracking==0 ) {
                       bodyModule = true; 
                    }
                    _last = (ColsAST)input.LT(1);
                    pushFollow(FOLLOW_realization_body_module_in_module251);
                    dec4=realization_body_module();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, dec4.getTree());
                    if ( state.backtracking==0 ) {
                       retval.dec = (dec4!=null?dec4.dec:null); 
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 5 :
                    // RBuilder.g:343:13: dec5= enhancement_module
                    {
                    if ( state.backtracking==0 ) {
                       enhancementModule = true; 
                    }
                    _last = (ColsAST)input.LT(1);
                    pushFollow(FOLLOW_enhancement_module_in_module284);
                    dec5=enhancement_module();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, dec5.getTree());
                    if ( state.backtracking==0 ) {
                       retval.dec = (dec5!=null?dec5.dec:null); 
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 6 :
                    // RBuilder.g:345:13: dec6= facility_module
                    {
                    if ( state.backtracking==0 ) {
                       facilityModule = true; 
                    }
                    _last = (ColsAST)input.LT(1);
                    pushFollow(FOLLOW_facility_module_in_module320);
                    dec6=facility_module();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, dec6.getTree());
                    if ( state.backtracking==0 ) {
                       retval.dec = (dec6!=null?dec6.dec:null); 
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 7 :
                    // RBuilder.g:347:13: dec7= performance_module
                    {
                    if ( state.backtracking==0 ) {
                       performanceModule = true; 
                    }
                    _last = (ColsAST)input.LT(1);
                    pushFollow(FOLLOW_performance_module_in_module356);
                    dec7=performance_module();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, dec7.getTree());
                    if ( state.backtracking==0 ) {
                       retval.dec = (dec7!=null?dec7.dec:null); 
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "module"

    public static class theory_module_return extends TreeRuleReturnScope {
        public MathModuleDec dec = null;
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "theory_module"
    // RBuilder.g:356:1: theory_module returns [MathModuleDec dec = null] : ^( THEORY ps= ident (pars2= module_formal_param_section )? (uses2= uses_list )? (dec2= math_item_sequence )? ) ;
    public final RBuilder.theory_module_return theory_module() throws RecognitionException {
        RBuilder.theory_module_return retval = new RBuilder.theory_module_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        ColsAST _first_0 = null;
        ColsAST _last = null;

        ColsAST THEORY1=null;
        RBuilder.ident_return ps = null;

        RBuilder.module_formal_param_section_return pars2 = null;

        RBuilder.uses_list_return uses2 = null;

        RBuilder.math_item_sequence_return dec2 = null;


        ColsAST THEORY1_tree=null;


            edu.clemson.cs.r2jt.collections.List<ModuleParameterDec> pars = new edu.clemson.cs.r2jt.collections.List<ModuleParameterDec>("ModuleParameterDec");
            edu.clemson.cs.r2jt.collections.List<UsesItem> uses = new edu.clemson.cs.r2jt.collections.List<UsesItem>("UsesItem");
            edu.clemson.cs.r2jt.collections.List<Dec> decs = new edu.clemson.cs.r2jt.collections.List<Dec>("Dec");

        try {
            // RBuilder.g:362:5: ( ^( THEORY ps= ident (pars2= module_formal_param_section )? (uses2= uses_list )? (dec2= math_item_sequence )? ) )
            // RBuilder.g:362:9: ^( THEORY ps= ident (pars2= module_formal_param_section )? (uses2= uses_list )? (dec2= math_item_sequence )? )
            {
            root_0 = (ColsAST)adaptor.nil();

            _last = (ColsAST)input.LT(1);
            {
            ColsAST _save_last_1 = _last;
            ColsAST _first_1 = null;
            ColsAST root_1 = (ColsAST)adaptor.nil();_last = (ColsAST)input.LT(1);
            THEORY1=(ColsAST)match(input,THEORY,FOLLOW_THEORY_in_theory_module415); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            THEORY1_tree = (ColsAST)adaptor.dupNode(THEORY1);

            root_1 = (ColsAST)adaptor.becomeRoot(THEORY1_tree, root_1);
            }


            match(input, Token.DOWN, null); if (state.failed) return retval;
            _last = (ColsAST)input.LT(1);
            pushFollow(FOLLOW_ident_in_theory_module419);
            ps=ident();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, ps.getTree());
            // RBuilder.g:363:13: (pars2= module_formal_param_section )?
            int alt2=2;
            int LA2_0 = input.LA(1);

            if ( (LA2_0==PARAMS) ) {
                alt2=1;
            }
            switch (alt2) {
                case 1 :
                    // RBuilder.g:363:14: pars2= module_formal_param_section
                    {
                    _last = (ColsAST)input.LT(1);
                    pushFollow(FOLLOW_module_formal_param_section_in_theory_module436);
                    pars2=module_formal_param_section();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, pars2.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }

            // RBuilder.g:364:13: (uses2= uses_list )?
            int alt3=2;
            int LA3_0 = input.LA(1);

            if ( (LA3_0==USES) ) {
                alt3=1;
            }
            switch (alt3) {
                case 1 :
                    // RBuilder.g:364:14: uses2= uses_list
                    {
                    _last = (ColsAST)input.LT(1);
                    pushFollow(FOLLOW_uses_list_in_theory_module455);
                    uses2=uses_list();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, uses2.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }

            // RBuilder.g:365:13: (dec2= math_item_sequence )?
            int alt4=2;
            int LA4_0 = input.LA(1);

            if ( (LA4_0==AXIOM||LA4_0==COMMUTATIVITY||LA4_0==COROLLARY||LA4_0==DEFINITION||LA4_0==LEMMA||LA4_0==PROPERTY||LA4_0==THEOREM||LA4_0==TYPE||LA4_0==CATEGORICAL_DEFINITION||LA4_0==IMPLICIT_DEF||LA4_0==INDUCTIVE_DEF) ) {
                alt4=1;
            }
            switch (alt4) {
                case 1 :
                    // RBuilder.g:365:14: dec2= math_item_sequence
                    {
                    _last = (ColsAST)input.LT(1);
                    pushFollow(FOLLOW_math_item_sequence_in_theory_module474);
                    dec2=math_item_sequence();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, dec2.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }


            match(input, Token.UP, null); if (state.failed) return retval;adaptor.addChild(root_0, root_1);_last = _save_last_1;
            }

            if ( state.backtracking==0 ) {
                 if ((dec2!=null?dec2.dec:null) != null) {
                              decs = (dec2!=null?dec2.dec:null).getDecs();
                          }
                          retval.dec = new MathModuleDec((ps!=null?ps.ps:null),
                                                    (pars2!=null?pars2.pars:null)!=null?(pars2!=null?pars2.pars:null):pars,
                                                    (uses2!=null?uses2.uses:null)!=null?(uses2!=null?uses2.uses:null):uses,
                                                    decs);
                      
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "theory_module"

    public static class math_item_sequence_return extends TreeRuleReturnScope {
        public MathModuleDec dec = null;
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "math_item_sequence"
    // RBuilder.g:381:1: math_item_sequence returns [MathModuleDec dec = null] : (dec4= definition_declaration | dec5= categorical_definition_declaration | dec6= math_assertion_declaration | dec8= type_theorem_declaration )+ ;
    public final RBuilder.math_item_sequence_return math_item_sequence() throws RecognitionException {
        RBuilder.math_item_sequence_return retval = new RBuilder.math_item_sequence_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        ColsAST _first_0 = null;
        ColsAST _last = null;

        RBuilder.definition_declaration_return dec4 = null;

        RBuilder.categorical_definition_declaration_return dec5 = null;

        RBuilder.math_assertion_declaration_return dec6 = null;

        RBuilder.type_theorem_declaration_return dec8 = null;



           
            PosSymbol ps = null; //dummy
            edu.clemson.cs.r2jt.collections.List<ModuleParameterDec> pars = null; //dummy
            edu.clemson.cs.r2jt.collections.List<UsesItem> uses = null; //dummy
            edu.clemson.cs.r2jt.collections.List<Dec> decs = new edu.clemson.cs.r2jt.collections.List<Dec>("Dec");

        try {
            // RBuilder.g:388:5: ( (dec4= definition_declaration | dec5= categorical_definition_declaration | dec6= math_assertion_declaration | dec8= type_theorem_declaration )+ )
            // RBuilder.g:388:9: (dec4= definition_declaration | dec5= categorical_definition_declaration | dec6= math_assertion_declaration | dec8= type_theorem_declaration )+
            {
            root_0 = (ColsAST)adaptor.nil();

            // RBuilder.g:388:9: (dec4= definition_declaration | dec5= categorical_definition_declaration | dec6= math_assertion_declaration | dec8= type_theorem_declaration )+
            int cnt5=0;
            loop5:
            do {
                int alt5=5;
                alt5 = dfa5.predict(input);
                switch (alt5) {
            	case 1 :
            	    // RBuilder.g:388:13: dec4= definition_declaration
            	    {
            	    _last = (ColsAST)input.LT(1);
            	    pushFollow(FOLLOW_definition_declaration_in_math_item_sequence539);
            	    dec4=definition_declaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) 
            	    adaptor.addChild(root_0, dec4.getTree());
            	    if ( state.backtracking==0 ) {
            	       decs.add((dec4!=null?dec4.dec:null)); 
            	    }

            	    if ( state.backtracking==0 ) {
            	    }
            	    }
            	    break;
            	case 2 :
            	    // RBuilder.g:389:13: dec5= categorical_definition_declaration
            	    {
            	    _last = (ColsAST)input.LT(1);
            	    pushFollow(FOLLOW_categorical_definition_declaration_in_math_item_sequence557);
            	    dec5=categorical_definition_declaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) 
            	    adaptor.addChild(root_0, dec5.getTree());
            	    if ( state.backtracking==0 ) {
            	       decs.add((dec5!=null?dec5.dec:null)); 
            	    }

            	    if ( state.backtracking==0 ) {
            	    }
            	    }
            	    break;
            	case 3 :
            	    // RBuilder.g:390:13: dec6= math_assertion_declaration
            	    {
            	    _last = (ColsAST)input.LT(1);
            	    pushFollow(FOLLOW_math_assertion_declaration_in_math_item_sequence575);
            	    dec6=math_assertion_declaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) 
            	    adaptor.addChild(root_0, dec6.getTree());
            	    if ( state.backtracking==0 ) {
            	       decs.add((dec6!=null?dec6.dec:null)); 
            	    }

            	    if ( state.backtracking==0 ) {
            	    }
            	    }
            	    break;
            	case 4 :
            	    // RBuilder.g:391:13: dec8= type_theorem_declaration
            	    {
            	    _last = (ColsAST)input.LT(1);
            	    pushFollow(FOLLOW_type_theorem_declaration_in_math_item_sequence593);
            	    dec8=type_theorem_declaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) 
            	    adaptor.addChild(root_0, dec8.getTree());
            	    if ( state.backtracking==0 ) {
            	       decs.add((dec8!=null?dec8.dec:null)); 
            	    }

            	    if ( state.backtracking==0 ) {
            	    }
            	    }
            	    break;

            	default :
            	    if ( cnt5 >= 1 ) break loop5;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(5, input);
                        throw eee;
                }
                cnt5++;
            } while (true);

            if ( state.backtracking==0 ) {
               retval.dec = new MathModuleDec(ps, pars, uses, decs); 
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "math_item_sequence"

    public static class conceptual_module_return extends TreeRuleReturnScope {
        public ConceptModuleDec dec = null;
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "conceptual_module"
    // RBuilder.g:400:1: conceptual_module returns [ConceptModuleDec dec = null] : ^( MODULE_CONCEPT ps= ident (pars2= module_formal_param_section )? (uses2= uses_list )? (req= requires_clause )? (dec2= concept_item_sequence )? ) ;
    public final RBuilder.conceptual_module_return conceptual_module() throws RecognitionException {
        RBuilder.conceptual_module_return retval = new RBuilder.conceptual_module_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        ColsAST _first_0 = null;
        ColsAST _last = null;

        ColsAST MODULE_CONCEPT2=null;
        RBuilder.ident_return ps = null;

        RBuilder.module_formal_param_section_return pars2 = null;

        RBuilder.uses_list_return uses2 = null;

        RBuilder.requires_clause_return req = null;

        RBuilder.concept_item_sequence_return dec2 = null;


        ColsAST MODULE_CONCEPT2_tree=null;


            edu.clemson.cs.r2jt.collections.List<Exp> cons = new edu.clemson.cs.r2jt.collections.List<Exp>("Exp");
            InitItem init = null;
            FinalItem fin = null;
            edu.clemson.cs.r2jt.collections.List<Dec> decs = new edu.clemson.cs.r2jt.collections.List<Dec>("Dec");
            edu.clemson.cs.r2jt.collections.List<ModuleParameterDec> pars = new edu.clemson.cs.r2jt.collections.List<ModuleParameterDec>("ModuleParameterDec");
            edu.clemson.cs.r2jt.collections.List<UsesItem> uses = new edu.clemson.cs.r2jt.collections.List<UsesItem>("UsesItem");

        try {
            // RBuilder.g:409:5: ( ^( MODULE_CONCEPT ps= ident (pars2= module_formal_param_section )? (uses2= uses_list )? (req= requires_clause )? (dec2= concept_item_sequence )? ) )
            // RBuilder.g:409:9: ^( MODULE_CONCEPT ps= ident (pars2= module_formal_param_section )? (uses2= uses_list )? (req= requires_clause )? (dec2= concept_item_sequence )? )
            {
            root_0 = (ColsAST)adaptor.nil();

            _last = (ColsAST)input.LT(1);
            {
            ColsAST _save_last_1 = _last;
            ColsAST _first_1 = null;
            ColsAST root_1 = (ColsAST)adaptor.nil();_last = (ColsAST)input.LT(1);
            MODULE_CONCEPT2=(ColsAST)match(input,MODULE_CONCEPT,FOLLOW_MODULE_CONCEPT_in_conceptual_module650); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            MODULE_CONCEPT2_tree = (ColsAST)adaptor.dupNode(MODULE_CONCEPT2);

            root_1 = (ColsAST)adaptor.becomeRoot(MODULE_CONCEPT2_tree, root_1);
            }


            match(input, Token.DOWN, null); if (state.failed) return retval;
            _last = (ColsAST)input.LT(1);
            pushFollow(FOLLOW_ident_in_conceptual_module654);
            ps=ident();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, ps.getTree());
            // RBuilder.g:410:13: (pars2= module_formal_param_section )?
            int alt6=2;
            int LA6_0 = input.LA(1);

            if ( (LA6_0==PARAMS) ) {
                alt6=1;
            }
            switch (alt6) {
                case 1 :
                    // RBuilder.g:410:14: pars2= module_formal_param_section
                    {
                    _last = (ColsAST)input.LT(1);
                    pushFollow(FOLLOW_module_formal_param_section_in_conceptual_module671);
                    pars2=module_formal_param_section();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, pars2.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }

            // RBuilder.g:411:13: (uses2= uses_list )?
            int alt7=2;
            int LA7_0 = input.LA(1);

            if ( (LA7_0==USES) ) {
                alt7=1;
            }
            switch (alt7) {
                case 1 :
                    // RBuilder.g:411:14: uses2= uses_list
                    {
                    _last = (ColsAST)input.LT(1);
                    pushFollow(FOLLOW_uses_list_in_conceptual_module690);
                    uses2=uses_list();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, uses2.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }

            // RBuilder.g:412:13: (req= requires_clause )?
            int alt8=2;
            int LA8_0 = input.LA(1);

            if ( (LA8_0==REQUIRES) ) {
                alt8=1;
            }
            switch (alt8) {
                case 1 :
                    // RBuilder.g:412:14: req= requires_clause
                    {
                    _last = (ColsAST)input.LT(1);
                    pushFollow(FOLLOW_requires_clause_in_conceptual_module709);
                    req=requires_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, req.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }

            // RBuilder.g:413:13: (dec2= concept_item_sequence )?
            int alt9=2;
            int LA9_0 = input.LA(1);

            if ( (LA9_0==CONSTRAINT||(LA9_0>=DEFINES && LA9_0<=DEFINITION)||(LA9_0>=FAC_FINAL && LA9_0<=FAC_INIT)||LA9_0==OPERATION||LA9_0==TYPE_FAMILY||LA9_0==VAR||LA9_0==CONFIRM_TYPE||LA9_0==IMPLICIT_DEF||LA9_0==INDUCTIVE_DEF) ) {
                alt9=1;
            }
            switch (alt9) {
                case 1 :
                    // RBuilder.g:413:14: dec2= concept_item_sequence
                    {
                    _last = (ColsAST)input.LT(1);
                    pushFollow(FOLLOW_concept_item_sequence_in_conceptual_module728);
                    dec2=concept_item_sequence();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, dec2.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }


            match(input, Token.UP, null); if (state.failed) return retval;adaptor.addChild(root_0, root_1);_last = _save_last_1;
            }

            if ( state.backtracking==0 ) {
                 if ((dec2!=null?dec2.dec:null) != null) {
                              cons = (dec2!=null?dec2.dec:null).getConstraints();
                              init = (dec2!=null?dec2.dec:null).getFacilityInit();
                              fin = (dec2!=null?dec2.dec:null).getFacilityFinal();
                              decs = (dec2!=null?dec2.dec:null).getDecs();
                          }
                          retval.dec = new ConceptModuleDec((ps!=null?ps.ps:null),
                                                      (pars2!=null?pars2.pars:null)!=null?(pars2!=null?pars2.pars:null):pars,
                                                      (uses2!=null?uses2.uses:null)!=null?(uses2!=null?uses2.uses:null):uses,
                                                      (req!=null?req.exp:null), cons,
                                                      init, fin, decs);
                      
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "conceptual_module"

    public static class concept_item_sequence_return extends TreeRuleReturnScope {
        public ConceptModuleDec dec = null;
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "concept_item_sequence"
    // RBuilder.g:433:1: concept_item_sequence returns [ConceptModuleDec dec = null] : (dec2= confirm_math_type_declaration | decs2= concept_state_variable_declaration | exp2= constraint_clause | init= module_concept_init_declaration | fin= module_concept_final_declaration | dec3= type_declaration | dec4= operation_declaration | dec5= definition_declaration | dec6= defines_declaration )+ ;
    public final RBuilder.concept_item_sequence_return concept_item_sequence() throws RecognitionException {
        RBuilder.concept_item_sequence_return retval = new RBuilder.concept_item_sequence_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        ColsAST _first_0 = null;
        ColsAST _last = null;

        RBuilder.confirm_math_type_declaration_return dec2 = null;

        RBuilder.concept_state_variable_declaration_return decs2 = null;

        RBuilder.constraint_clause_return exp2 = null;

        RBuilder.module_concept_init_declaration_return init = null;

        RBuilder.module_concept_final_declaration_return fin = null;

        RBuilder.type_declaration_return dec3 = null;

        RBuilder.operation_declaration_return dec4 = null;

        RBuilder.definition_declaration_return dec5 = null;

        RBuilder.defines_declaration_return dec6 = null;




            PosSymbol ps = null; //dummy
            edu.clemson.cs.r2jt.collections.List<ModuleParameterDec> pars = null; //dummy
            edu.clemson.cs.r2jt.collections.List<UsesItem> uses = null; //dummy
            Exp req = null; //dummy
            edu.clemson.cs.r2jt.collections.List<Exp> cons = new edu.clemson.cs.r2jt.collections.List<Exp>("Exp");
            edu.clemson.cs.r2jt.collections.List<Dec> decs = new edu.clemson.cs.r2jt.collections.List<Dec>("Dec");

        try {
            // RBuilder.g:442:5: ( (dec2= confirm_math_type_declaration | decs2= concept_state_variable_declaration | exp2= constraint_clause | init= module_concept_init_declaration | fin= module_concept_final_declaration | dec3= type_declaration | dec4= operation_declaration | dec5= definition_declaration | dec6= defines_declaration )+ )
            // RBuilder.g:442:9: (dec2= confirm_math_type_declaration | decs2= concept_state_variable_declaration | exp2= constraint_clause | init= module_concept_init_declaration | fin= module_concept_final_declaration | dec3= type_declaration | dec4= operation_declaration | dec5= definition_declaration | dec6= defines_declaration )+
            {
            root_0 = (ColsAST)adaptor.nil();

            // RBuilder.g:442:9: (dec2= confirm_math_type_declaration | decs2= concept_state_variable_declaration | exp2= constraint_clause | init= module_concept_init_declaration | fin= module_concept_final_declaration | dec3= type_declaration | dec4= operation_declaration | dec5= definition_declaration | dec6= defines_declaration )+
            int cnt10=0;
            loop10:
            do {
                int alt10=10;
                alt10 = dfa10.predict(input);
                switch (alt10) {
            	case 1 :
            	    // RBuilder.g:442:13: dec2= confirm_math_type_declaration
            	    {
            	    _last = (ColsAST)input.LT(1);
            	    pushFollow(FOLLOW_confirm_math_type_declaration_in_concept_item_sequence793);
            	    dec2=confirm_math_type_declaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) 
            	    adaptor.addChild(root_0, dec2.getTree());
            	    if ( state.backtracking==0 ) {
            	       decs.add((dec2!=null?dec2.mvd1:null)); 
            	    }

            	    if ( state.backtracking==0 ) {
            	    }
            	    }
            	    break;
            	case 2 :
            	    // RBuilder.g:443:13: decs2= concept_state_variable_declaration
            	    {
            	    _last = (ColsAST)input.LT(1);
            	    pushFollow(FOLLOW_concept_state_variable_declaration_in_concept_item_sequence811);
            	    decs2=concept_state_variable_declaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) 
            	    adaptor.addChild(root_0, decs2.getTree());
            	    if ( state.backtracking==0 ) {
            	       decs.addAll((decs2!=null?decs2.decs:null)); 
            	    }

            	    if ( state.backtracking==0 ) {
            	    }
            	    }
            	    break;
            	case 3 :
            	    // RBuilder.g:444:13: exp2= constraint_clause
            	    {
            	    _last = (ColsAST)input.LT(1);
            	    pushFollow(FOLLOW_constraint_clause_in_concept_item_sequence829);
            	    exp2=constraint_clause();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) 
            	    adaptor.addChild(root_0, exp2.getTree());
            	    if ( state.backtracking==0 ) {
            	       cons.add((exp2!=null?exp2.exp:null)); 
            	    }

            	    if ( state.backtracking==0 ) {
            	    }
            	    }
            	    break;
            	case 4 :
            	    // RBuilder.g:445:13: init= module_concept_init_declaration
            	    {
            	    _last = (ColsAST)input.LT(1);
            	    pushFollow(FOLLOW_module_concept_init_declaration_in_concept_item_sequence847);
            	    init=module_concept_init_declaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) 
            	    adaptor.addChild(root_0, init.getTree());

            	    if ( state.backtracking==0 ) {
            	    }
            	    }
            	    break;
            	case 5 :
            	    // RBuilder.g:446:13: fin= module_concept_final_declaration
            	    {
            	    _last = (ColsAST)input.LT(1);
            	    pushFollow(FOLLOW_module_concept_final_declaration_in_concept_item_sequence863);
            	    fin=module_concept_final_declaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) 
            	    adaptor.addChild(root_0, fin.getTree());

            	    if ( state.backtracking==0 ) {
            	    }
            	    }
            	    break;
            	case 6 :
            	    // RBuilder.g:447:13: dec3= type_declaration
            	    {
            	    _last = (ColsAST)input.LT(1);
            	    pushFollow(FOLLOW_type_declaration_in_concept_item_sequence879);
            	    dec3=type_declaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) 
            	    adaptor.addChild(root_0, dec3.getTree());
            	    if ( state.backtracking==0 ) {
            	       decs.add((dec3!=null?dec3.dec:null)); 
            	    }

            	    if ( state.backtracking==0 ) {
            	    }
            	    }
            	    break;
            	case 7 :
            	    // RBuilder.g:448:13: dec4= operation_declaration
            	    {
            	    _last = (ColsAST)input.LT(1);
            	    pushFollow(FOLLOW_operation_declaration_in_concept_item_sequence897);
            	    dec4=operation_declaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) 
            	    adaptor.addChild(root_0, dec4.getTree());
            	    if ( state.backtracking==0 ) {
            	       decs.add((dec4!=null?dec4.dec:null)); 
            	    }

            	    if ( state.backtracking==0 ) {
            	    }
            	    }
            	    break;
            	case 8 :
            	    // RBuilder.g:449:13: dec5= definition_declaration
            	    {
            	    _last = (ColsAST)input.LT(1);
            	    pushFollow(FOLLOW_definition_declaration_in_concept_item_sequence915);
            	    dec5=definition_declaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) 
            	    adaptor.addChild(root_0, dec5.getTree());
            	    if ( state.backtracking==0 ) {
            	       decs.add((dec5!=null?dec5.dec:null)); 
            	    }

            	    if ( state.backtracking==0 ) {
            	    }
            	    }
            	    break;
            	case 9 :
            	    // RBuilder.g:450:13: dec6= defines_declaration
            	    {
            	    _last = (ColsAST)input.LT(1);
            	    pushFollow(FOLLOW_defines_declaration_in_concept_item_sequence933);
            	    dec6=defines_declaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) 
            	    adaptor.addChild(root_0, dec6.getTree());
            	    if ( state.backtracking==0 ) {
            	       decs.add((dec6!=null?dec6.dec:null)); 
            	    }

            	    if ( state.backtracking==0 ) {
            	    }
            	    }
            	    break;

            	default :
            	    if ( cnt10 >= 1 ) break loop10;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(10, input);
                        throw eee;
                }
                cnt10++;
            } while (true);

            if ( state.backtracking==0 ) {
                 retval.dec = new ConceptModuleDec(ps, pars, uses, req, cons,
                              (init!=null?init.item:null), (fin!=null?fin.item:null), decs);
                      
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "concept_item_sequence"

    public static class performance_module_return extends TreeRuleReturnScope {
        public PerformanceModuleDec dec = null;
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "performance_module"
    // RBuilder.g:461:1: performance_module returns [PerformanceModuleDec dec = null] : ^( MODULE_PROFILE pn1= ident (pars2= module_formal_param_section )? pn2= ident ps1= ident (ps2= ident ps3= ident )? (uses2= uses_list )? (req= requires_clause )? (dec2= performance_item_sequence )? ) ;
    public final RBuilder.performance_module_return performance_module() throws RecognitionException {
        RBuilder.performance_module_return retval = new RBuilder.performance_module_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        ColsAST _first_0 = null;
        ColsAST _last = null;

        ColsAST MODULE_PROFILE3=null;
        RBuilder.ident_return pn1 = null;

        RBuilder.module_formal_param_section_return pars2 = null;

        RBuilder.ident_return pn2 = null;

        RBuilder.ident_return ps1 = null;

        RBuilder.ident_return ps2 = null;

        RBuilder.ident_return ps3 = null;

        RBuilder.uses_list_return uses2 = null;

        RBuilder.requires_clause_return req = null;

        RBuilder.performance_item_sequence_return dec2 = null;


        ColsAST MODULE_PROFILE3_tree=null;


            edu.clemson.cs.r2jt.collections.List<Exp> cons = new edu.clemson.cs.r2jt.collections.List<Exp>("Exp");
            InitItem init = null;
            FinalItem fin = null;
            PerformanceInitItem perfInit = null;
            PerformanceFinalItem perfFinal = null;
            edu.clemson.cs.r2jt.collections.List<Dec> decs = new edu.clemson.cs.r2jt.collections.List<Dec>("Dec");
            edu.clemson.cs.r2jt.collections.List<ModuleParameterDec> pars = new edu.clemson.cs.r2jt.collections.List<ModuleParameterDec>("ModuleParameterDec");
            edu.clemson.cs.r2jt.collections.List<UsesItem> uses = new edu.clemson.cs.r2jt.collections.List<UsesItem>("UsesItem");

        try {
            // RBuilder.g:472:5: ( ^( MODULE_PROFILE pn1= ident (pars2= module_formal_param_section )? pn2= ident ps1= ident (ps2= ident ps3= ident )? (uses2= uses_list )? (req= requires_clause )? (dec2= performance_item_sequence )? ) )
            // RBuilder.g:472:9: ^( MODULE_PROFILE pn1= ident (pars2= module_formal_param_section )? pn2= ident ps1= ident (ps2= ident ps3= ident )? (uses2= uses_list )? (req= requires_clause )? (dec2= performance_item_sequence )? )
            {
            root_0 = (ColsAST)adaptor.nil();

            _last = (ColsAST)input.LT(1);
            {
            ColsAST _save_last_1 = _last;
            ColsAST _first_1 = null;
            ColsAST root_1 = (ColsAST)adaptor.nil();_last = (ColsAST)input.LT(1);
            MODULE_PROFILE3=(ColsAST)match(input,MODULE_PROFILE,FOLLOW_MODULE_PROFILE_in_performance_module990); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            MODULE_PROFILE3_tree = (ColsAST)adaptor.dupNode(MODULE_PROFILE3);

            root_1 = (ColsAST)adaptor.becomeRoot(MODULE_PROFILE3_tree, root_1);
            }


            match(input, Token.DOWN, null); if (state.failed) return retval;
            _last = (ColsAST)input.LT(1);
            pushFollow(FOLLOW_ident_in_performance_module994);
            pn1=ident();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, pn1.getTree());
            // RBuilder.g:473:13: (pars2= module_formal_param_section )?
            int alt11=2;
            int LA11_0 = input.LA(1);

            if ( (LA11_0==PARAMS) ) {
                alt11=1;
            }
            switch (alt11) {
                case 1 :
                    // RBuilder.g:473:14: pars2= module_formal_param_section
                    {
                    _last = (ColsAST)input.LT(1);
                    pushFollow(FOLLOW_module_formal_param_section_in_performance_module1011);
                    pars2=module_formal_param_section();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, pars2.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }

            _last = (ColsAST)input.LT(1);
            pushFollow(FOLLOW_ident_in_performance_module1030);
            pn2=ident();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, pn2.getTree());
            _last = (ColsAST)input.LT(1);
            pushFollow(FOLLOW_ident_in_performance_module1047);
            ps1=ident();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, ps1.getTree());
            // RBuilder.g:476:14: (ps2= ident ps3= ident )?
            int alt12=2;
            int LA12_0 = input.LA(1);

            if ( (LA12_0==IDENTIFIER) ) {
                alt12=1;
            }
            switch (alt12) {
                case 1 :
                    // RBuilder.g:476:15: ps2= ident ps3= ident
                    {
                    _last = (ColsAST)input.LT(1);
                    pushFollow(FOLLOW_ident_in_performance_module1065);
                    ps2=ident();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, ps2.getTree());
                    _last = (ColsAST)input.LT(1);
                    pushFollow(FOLLOW_ident_in_performance_module1069);
                    ps3=ident();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, ps3.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }

            // RBuilder.g:477:13: (uses2= uses_list )?
            int alt13=2;
            int LA13_0 = input.LA(1);

            if ( (LA13_0==USES) ) {
                alt13=1;
            }
            switch (alt13) {
                case 1 :
                    // RBuilder.g:477:14: uses2= uses_list
                    {
                    _last = (ColsAST)input.LT(1);
                    pushFollow(FOLLOW_uses_list_in_performance_module1088);
                    uses2=uses_list();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, uses2.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }

            // RBuilder.g:478:13: (req= requires_clause )?
            int alt14=2;
            int LA14_0 = input.LA(1);

            if ( (LA14_0==REQUIRES) ) {
                alt14=1;
            }
            switch (alt14) {
                case 1 :
                    // RBuilder.g:478:14: req= requires_clause
                    {
                    _last = (ColsAST)input.LT(1);
                    pushFollow(FOLLOW_requires_clause_in_performance_module1107);
                    req=requires_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, req.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }

            // RBuilder.g:479:13: (dec2= performance_item_sequence )?
            int alt15=2;
            int LA15_0 = input.LA(1);

            if ( (LA15_0==CONSTRAINT||(LA15_0>=DEFINES && LA15_0<=DEFINITION)||(LA15_0>=FAC_FINAL && LA15_0<=FAC_INIT)||LA15_0==OPERATION||(LA15_0>=PERF_FINAL && LA15_0<=PERF_INIT)||LA15_0==TYPE_FAMILY||LA15_0==VAR||LA15_0==CONFIRM_TYPE||LA15_0==IMPLICIT_DEF||LA15_0==INDUCTIVE_DEF) ) {
                alt15=1;
            }
            switch (alt15) {
                case 1 :
                    // RBuilder.g:479:14: dec2= performance_item_sequence
                    {
                    _last = (ColsAST)input.LT(1);
                    pushFollow(FOLLOW_performance_item_sequence_in_performance_module1126);
                    dec2=performance_item_sequence();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, dec2.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }


            match(input, Token.UP, null); if (state.failed) return retval;adaptor.addChild(root_0, root_1);_last = _save_last_1;
            }

            if ( state.backtracking==0 ) {
                 if ((dec2!=null?dec2.dec:null) != null) {
                              cons = (dec2!=null?dec2.dec:null).getConstraints();
                              perfInit = (dec2!=null?dec2.dec:null).getPerfInit();
                              perfFinal = (dec2!=null?dec2.dec:null).getPerfFinal();                
                              init = (dec2!=null?dec2.dec:null).getFacilityInit();
                              fin = (dec2!=null?dec2.dec:null).getFacilityFinal();
                              decs = (dec2!=null?dec2.dec:null).getDecs();
                          }
                          retval.dec = new PerformanceModuleDec((pn1!=null?pn1.ps:null),
                                                      (pars2!=null?pars2.pars:null)!=null?(pars2!=null?pars2.pars:null):pars,
                                                      (pn2!=null?pn2.ps:null),
                                                      (ps1!=null?ps1.ps:null),
                                                      (uses2!=null?uses2.uses:null)!=null?(uses2!=null?uses2.uses:null):uses,
                                                      (req!=null?req.exp:null), cons,
                                                      perfInit, perfFinal, 
                                                      init, fin, decs);
                      
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "performance_module"

    public static class performance_item_sequence_return extends TreeRuleReturnScope {
        public PerformanceModuleDec  dec = null;
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "performance_item_sequence"
    // RBuilder.g:504:1: performance_item_sequence returns [PerformanceModuleDec dec = null] : (dec2= confirm_math_type_declaration | decs2= concept_state_variable_declaration | exp2= constraint_clause | perfInit= performance_module_init_declaration | perfFinal= performance_module_final_declaration | init= module_concept_init_declaration | fin= module_concept_final_declaration | dec3= performance_type_declaration | dec4= performance_operation_declaration | dec5= definition_declaration | dec6= defines_declaration )+ ;
    public final RBuilder.performance_item_sequence_return performance_item_sequence() throws RecognitionException {
        RBuilder.performance_item_sequence_return retval = new RBuilder.performance_item_sequence_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        ColsAST _first_0 = null;
        ColsAST _last = null;

        RBuilder.confirm_math_type_declaration_return dec2 = null;

        RBuilder.concept_state_variable_declaration_return decs2 = null;

        RBuilder.constraint_clause_return exp2 = null;

        RBuilder.performance_module_init_declaration_return perfInit = null;

        RBuilder.performance_module_final_declaration_return perfFinal = null;

        RBuilder.module_concept_init_declaration_return init = null;

        RBuilder.module_concept_final_declaration_return fin = null;

        RBuilder.performance_type_declaration_return dec3 = null;

        RBuilder.performance_operation_declaration_return dec4 = null;

        RBuilder.definition_declaration_return dec5 = null;

        RBuilder.defines_declaration_return dec6 = null;




            PosSymbol ps = null; //dummy
            PosSymbol pn1 = null; //dummy
            PosSymbol pn2 = null; //dummy
            PosSymbol ps3 = null; //dummy
            PosSymbol ps4 = null; //dummy

            edu.clemson.cs.r2jt.collections.List<ModuleParameterDec> pars = null; //dummy
            edu.clemson.cs.r2jt.collections.List<UsesItem> uses = null; //dummy
            Exp req = null; //dummy
            edu.clemson.cs.r2jt.collections.List<Exp> cons = new edu.clemson.cs.r2jt.collections.List<Exp>("Exp");
            edu.clemson.cs.r2jt.collections.List<Dec> decs = new edu.clemson.cs.r2jt.collections.List<Dec>("Dec");

        try {
            // RBuilder.g:518:5: ( (dec2= confirm_math_type_declaration | decs2= concept_state_variable_declaration | exp2= constraint_clause | perfInit= performance_module_init_declaration | perfFinal= performance_module_final_declaration | init= module_concept_init_declaration | fin= module_concept_final_declaration | dec3= performance_type_declaration | dec4= performance_operation_declaration | dec5= definition_declaration | dec6= defines_declaration )+ )
            // RBuilder.g:518:9: (dec2= confirm_math_type_declaration | decs2= concept_state_variable_declaration | exp2= constraint_clause | perfInit= performance_module_init_declaration | perfFinal= performance_module_final_declaration | init= module_concept_init_declaration | fin= module_concept_final_declaration | dec3= performance_type_declaration | dec4= performance_operation_declaration | dec5= definition_declaration | dec6= defines_declaration )+
            {
            root_0 = (ColsAST)adaptor.nil();

            // RBuilder.g:518:9: (dec2= confirm_math_type_declaration | decs2= concept_state_variable_declaration | exp2= constraint_clause | perfInit= performance_module_init_declaration | perfFinal= performance_module_final_declaration | init= module_concept_init_declaration | fin= module_concept_final_declaration | dec3= performance_type_declaration | dec4= performance_operation_declaration | dec5= definition_declaration | dec6= defines_declaration )+
            int cnt16=0;
            loop16:
            do {
                int alt16=12;
                alt16 = dfa16.predict(input);
                switch (alt16) {
            	case 1 :
            	    // RBuilder.g:518:13: dec2= confirm_math_type_declaration
            	    {
            	    _last = (ColsAST)input.LT(1);
            	    pushFollow(FOLLOW_confirm_math_type_declaration_in_performance_item_sequence1189);
            	    dec2=confirm_math_type_declaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) 
            	    adaptor.addChild(root_0, dec2.getTree());
            	    if ( state.backtracking==0 ) {
            	       decs.add((dec2!=null?dec2.mvd1:null)); 
            	    }

            	    if ( state.backtracking==0 ) {
            	    }
            	    }
            	    break;
            	case 2 :
            	    // RBuilder.g:519:13: decs2= concept_state_variable_declaration
            	    {
            	    _last = (ColsAST)input.LT(1);
            	    pushFollow(FOLLOW_concept_state_variable_declaration_in_performance_item_sequence1207);
            	    decs2=concept_state_variable_declaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) 
            	    adaptor.addChild(root_0, decs2.getTree());
            	    if ( state.backtracking==0 ) {
            	       decs.addAll((decs2!=null?decs2.decs:null)); 
            	    }

            	    if ( state.backtracking==0 ) {
            	    }
            	    }
            	    break;
            	case 3 :
            	    // RBuilder.g:520:13: exp2= constraint_clause
            	    {
            	    _last = (ColsAST)input.LT(1);
            	    pushFollow(FOLLOW_constraint_clause_in_performance_item_sequence1225);
            	    exp2=constraint_clause();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) 
            	    adaptor.addChild(root_0, exp2.getTree());
            	    if ( state.backtracking==0 ) {
            	       cons.add((exp2!=null?exp2.exp:null)); 
            	    }

            	    if ( state.backtracking==0 ) {
            	    }
            	    }
            	    break;
            	case 4 :
            	    // RBuilder.g:521:13: perfInit= performance_module_init_declaration
            	    {
            	    _last = (ColsAST)input.LT(1);
            	    pushFollow(FOLLOW_performance_module_init_declaration_in_performance_item_sequence1243);
            	    perfInit=performance_module_init_declaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) 
            	    adaptor.addChild(root_0, perfInit.getTree());

            	    if ( state.backtracking==0 ) {
            	    }
            	    }
            	    break;
            	case 5 :
            	    // RBuilder.g:522:13: perfFinal= performance_module_final_declaration
            	    {
            	    _last = (ColsAST)input.LT(1);
            	    pushFollow(FOLLOW_performance_module_final_declaration_in_performance_item_sequence1259);
            	    perfFinal=performance_module_final_declaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) 
            	    adaptor.addChild(root_0, perfFinal.getTree());

            	    if ( state.backtracking==0 ) {
            	    }
            	    }
            	    break;
            	case 6 :
            	    // RBuilder.g:523:13: init= module_concept_init_declaration
            	    {
            	    _last = (ColsAST)input.LT(1);
            	    pushFollow(FOLLOW_module_concept_init_declaration_in_performance_item_sequence1275);
            	    init=module_concept_init_declaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) 
            	    adaptor.addChild(root_0, init.getTree());

            	    if ( state.backtracking==0 ) {
            	    }
            	    }
            	    break;
            	case 7 :
            	    // RBuilder.g:524:13: fin= module_concept_final_declaration
            	    {
            	    _last = (ColsAST)input.LT(1);
            	    pushFollow(FOLLOW_module_concept_final_declaration_in_performance_item_sequence1291);
            	    fin=module_concept_final_declaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) 
            	    adaptor.addChild(root_0, fin.getTree());

            	    if ( state.backtracking==0 ) {
            	    }
            	    }
            	    break;
            	case 8 :
            	    // RBuilder.g:525:13: dec3= performance_type_declaration
            	    {
            	    _last = (ColsAST)input.LT(1);
            	    pushFollow(FOLLOW_performance_type_declaration_in_performance_item_sequence1307);
            	    dec3=performance_type_declaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) 
            	    adaptor.addChild(root_0, dec3.getTree());
            	    if ( state.backtracking==0 ) {
            	       decs.add((dec3!=null?dec3.dec:null)); 
            	    }

            	    if ( state.backtracking==0 ) {
            	    }
            	    }
            	    break;
            	case 9 :
            	    // RBuilder.g:526:13: dec4= performance_operation_declaration
            	    {
            	    _last = (ColsAST)input.LT(1);
            	    pushFollow(FOLLOW_performance_operation_declaration_in_performance_item_sequence1325);
            	    dec4=performance_operation_declaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) 
            	    adaptor.addChild(root_0, dec4.getTree());
            	    if ( state.backtracking==0 ) {
            	       decs.add((dec4!=null?dec4.dec:null)); 
            	    }

            	    if ( state.backtracking==0 ) {
            	    }
            	    }
            	    break;
            	case 10 :
            	    // RBuilder.g:527:13: dec5= definition_declaration
            	    {
            	    _last = (ColsAST)input.LT(1);
            	    pushFollow(FOLLOW_definition_declaration_in_performance_item_sequence1343);
            	    dec5=definition_declaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) 
            	    adaptor.addChild(root_0, dec5.getTree());
            	    if ( state.backtracking==0 ) {
            	       decs.add((dec5!=null?dec5.dec:null)); 
            	    }

            	    if ( state.backtracking==0 ) {
            	    }
            	    }
            	    break;
            	case 11 :
            	    // RBuilder.g:528:13: dec6= defines_declaration
            	    {
            	    _last = (ColsAST)input.LT(1);
            	    pushFollow(FOLLOW_defines_declaration_in_performance_item_sequence1361);
            	    dec6=defines_declaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) 
            	    adaptor.addChild(root_0, dec6.getTree());
            	    if ( state.backtracking==0 ) {
            	       decs.add((dec6!=null?dec6.dec:null)); 
            	    }

            	    if ( state.backtracking==0 ) {
            	    }
            	    }
            	    break;

            	default :
            	    if ( cnt16 >= 1 ) break loop16;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(16, input);
                        throw eee;
                }
                cnt16++;
            } while (true);

            if ( state.backtracking==0 ) {
                 retval.dec = new PerformanceModuleDec(pn1, pars, pn2, ps, uses, req, cons,
                                                          (perfInit!=null?perfInit.item:null), (perfFinal!=null?perfFinal.item:null), (init!=null?init.item:null), (fin!=null?fin.item:null), decs); 
                      
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "performance_item_sequence"

    public static class enhancement_module_return extends TreeRuleReturnScope {
        public EnhancementModuleDec dec = null;
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "enhancement_module"
    // RBuilder.g:539:1: enhancement_module returns [EnhancementModuleDec dec = null] : ^( MODULE_ENHANCEMENT ps= ident (pars2= module_formal_param_section )? cName= ident (uses2= uses_list )? (req= requires_clause )? (dec2= enhancement_item_sequence )? ) ;
    public final RBuilder.enhancement_module_return enhancement_module() throws RecognitionException {
        RBuilder.enhancement_module_return retval = new RBuilder.enhancement_module_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        ColsAST _first_0 = null;
        ColsAST _last = null;

        ColsAST MODULE_ENHANCEMENT4=null;
        RBuilder.ident_return ps = null;

        RBuilder.module_formal_param_section_return pars2 = null;

        RBuilder.ident_return cName = null;

        RBuilder.uses_list_return uses2 = null;

        RBuilder.requires_clause_return req = null;

        RBuilder.enhancement_item_sequence_return dec2 = null;


        ColsAST MODULE_ENHANCEMENT4_tree=null;

           
            edu.clemson.cs.r2jt.collections.List<Dec> decs = new edu.clemson.cs.r2jt.collections.List<Dec>("Dec");
            edu.clemson.cs.r2jt.collections.List<ModuleParameterDec> pars = new edu.clemson.cs.r2jt.collections.List<ModuleParameterDec>("ModuleParameterDec");
            edu.clemson.cs.r2jt.collections.List<UsesItem> uses = new edu.clemson.cs.r2jt.collections.List<UsesItem>("UsesItem");

        try {
            // RBuilder.g:545:5: ( ^( MODULE_ENHANCEMENT ps= ident (pars2= module_formal_param_section )? cName= ident (uses2= uses_list )? (req= requires_clause )? (dec2= enhancement_item_sequence )? ) )
            // RBuilder.g:545:9: ^( MODULE_ENHANCEMENT ps= ident (pars2= module_formal_param_section )? cName= ident (uses2= uses_list )? (req= requires_clause )? (dec2= enhancement_item_sequence )? )
            {
            root_0 = (ColsAST)adaptor.nil();

            _last = (ColsAST)input.LT(1);
            {
            ColsAST _save_last_1 = _last;
            ColsAST _first_1 = null;
            ColsAST root_1 = (ColsAST)adaptor.nil();_last = (ColsAST)input.LT(1);
            MODULE_ENHANCEMENT4=(ColsAST)match(input,MODULE_ENHANCEMENT,FOLLOW_MODULE_ENHANCEMENT_in_enhancement_module1426); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            MODULE_ENHANCEMENT4_tree = (ColsAST)adaptor.dupNode(MODULE_ENHANCEMENT4);

            root_1 = (ColsAST)adaptor.becomeRoot(MODULE_ENHANCEMENT4_tree, root_1);
            }


            match(input, Token.DOWN, null); if (state.failed) return retval;
            _last = (ColsAST)input.LT(1);
            pushFollow(FOLLOW_ident_in_enhancement_module1430);
            ps=ident();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, ps.getTree());
            // RBuilder.g:546:13: (pars2= module_formal_param_section )?
            int alt17=2;
            int LA17_0 = input.LA(1);

            if ( (LA17_0==PARAMS) ) {
                alt17=1;
            }
            switch (alt17) {
                case 1 :
                    // RBuilder.g:546:14: pars2= module_formal_param_section
                    {
                    _last = (ColsAST)input.LT(1);
                    pushFollow(FOLLOW_module_formal_param_section_in_enhancement_module1447);
                    pars2=module_formal_param_section();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, pars2.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }

            _last = (ColsAST)input.LT(1);
            pushFollow(FOLLOW_ident_in_enhancement_module1465);
            cName=ident();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, cName.getTree());
            // RBuilder.g:548:13: (uses2= uses_list )?
            int alt18=2;
            int LA18_0 = input.LA(1);

            if ( (LA18_0==USES) ) {
                alt18=1;
            }
            switch (alt18) {
                case 1 :
                    // RBuilder.g:548:14: uses2= uses_list
                    {
                    _last = (ColsAST)input.LT(1);
                    pushFollow(FOLLOW_uses_list_in_enhancement_module1482);
                    uses2=uses_list();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, uses2.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }

            // RBuilder.g:549:13: (req= requires_clause )?
            int alt19=2;
            int LA19_0 = input.LA(1);

            if ( (LA19_0==REQUIRES) ) {
                alt19=1;
            }
            switch (alt19) {
                case 1 :
                    // RBuilder.g:549:14: req= requires_clause
                    {
                    _last = (ColsAST)input.LT(1);
                    pushFollow(FOLLOW_requires_clause_in_enhancement_module1501);
                    req=requires_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, req.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }

            // RBuilder.g:550:13: (dec2= enhancement_item_sequence )?
            int alt20=2;
            int LA20_0 = input.LA(1);

            if ( ((LA20_0>=DEFINES && LA20_0<=DEFINITION)||LA20_0==OPERATION||LA20_0==TYPE_FAMILY||LA20_0==VAR||LA20_0==IMPLICIT_DEF||LA20_0==INDUCTIVE_DEF) ) {
                alt20=1;
            }
            switch (alt20) {
                case 1 :
                    // RBuilder.g:550:14: dec2= enhancement_item_sequence
                    {
                    _last = (ColsAST)input.LT(1);
                    pushFollow(FOLLOW_enhancement_item_sequence_in_enhancement_module1520);
                    dec2=enhancement_item_sequence();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, dec2.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }


            match(input, Token.UP, null); if (state.failed) return retval;adaptor.addChild(root_0, root_1);_last = _save_last_1;
            }

            if ( state.backtracking==0 ) {
                 if ((dec2!=null?dec2.dec:null) != null) {
                              decs = (dec2!=null?dec2.dec:null).getDecs();
                          }
                          retval.dec = new EnhancementModuleDec((ps!=null?ps.ps:null),
                                                      (pars2!=null?pars2.pars:null)!=null?(pars2!=null?pars2.pars:null):pars,
                                                      (cName!=null?cName.ps:null),
                                                      (uses2!=null?uses2.uses:null)!=null?(uses2!=null?uses2.uses:null):uses,
                                                      (req!=null?req.exp:null), decs);
                      
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "enhancement_module"

    public static class enhancement_item_sequence_return extends TreeRuleReturnScope {
        public EnhancementModuleDec dec = null;
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "enhancement_item_sequence"
    // RBuilder.g:567:1: enhancement_item_sequence returns [EnhancementModuleDec dec = null] : (decs2= concept_state_variable_declaration | dec1= type_declaration | dec2= operation_declaration | dec3= definition_declaration | dec4= defines_declaration )+ ;
    public final RBuilder.enhancement_item_sequence_return enhancement_item_sequence() throws RecognitionException {
        RBuilder.enhancement_item_sequence_return retval = new RBuilder.enhancement_item_sequence_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        ColsAST _first_0 = null;
        ColsAST _last = null;

        RBuilder.concept_state_variable_declaration_return decs2 = null;

        RBuilder.type_declaration_return dec1 = null;

        RBuilder.operation_declaration_return dec2 = null;

        RBuilder.definition_declaration_return dec3 = null;

        RBuilder.defines_declaration_return dec4 = null;



           PosSymbol ps = null; //dummy
            edu.clemson.cs.r2jt.collections.List<ModuleParameterDec> pars = null; //dummy
            PosSymbol cSym = null; //dummy
            edu.clemson.cs.r2jt.collections.List<UsesItem> uses = null; //dummy
            Exp req = null; //dummy
            edu.clemson.cs.r2jt.collections.List<Dec> decs = new edu.clemson.cs.r2jt.collections.List<Dec>("Dec");

        try {
            // RBuilder.g:575:5: ( (decs2= concept_state_variable_declaration | dec1= type_declaration | dec2= operation_declaration | dec3= definition_declaration | dec4= defines_declaration )+ )
            // RBuilder.g:575:9: (decs2= concept_state_variable_declaration | dec1= type_declaration | dec2= operation_declaration | dec3= definition_declaration | dec4= defines_declaration )+
            {
            root_0 = (ColsAST)adaptor.nil();

            // RBuilder.g:575:9: (decs2= concept_state_variable_declaration | dec1= type_declaration | dec2= operation_declaration | dec3= definition_declaration | dec4= defines_declaration )+
            int cnt21=0;
            loop21:
            do {
                int alt21=6;
                switch ( input.LA(1) ) {
                case VAR:
                    {
                    alt21=1;
                    }
                    break;
                case TYPE_FAMILY:
                    {
                    alt21=2;
                    }
                    break;
                case OPERATION:
                    {
                    alt21=3;
                    }
                    break;
                case DEFINITION:
                case IMPLICIT_DEF:
                case INDUCTIVE_DEF:
                    {
                    alt21=4;
                    }
                    break;
                case DEFINES:
                    {
                    alt21=5;
                    }
                    break;

                }

                switch (alt21) {
            	case 1 :
            	    // RBuilder.g:575:13: decs2= concept_state_variable_declaration
            	    {
            	    _last = (ColsAST)input.LT(1);
            	    pushFollow(FOLLOW_concept_state_variable_declaration_in_enhancement_item_sequence1585);
            	    decs2=concept_state_variable_declaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) 
            	    adaptor.addChild(root_0, decs2.getTree());
            	    if ( state.backtracking==0 ) {
            	       decs.addAll((decs2!=null?decs2.decs:null)); 
            	    }

            	    if ( state.backtracking==0 ) {
            	    }
            	    }
            	    break;
            	case 2 :
            	    // RBuilder.g:576:13: dec1= type_declaration
            	    {
            	    _last = (ColsAST)input.LT(1);
            	    pushFollow(FOLLOW_type_declaration_in_enhancement_item_sequence1603);
            	    dec1=type_declaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) 
            	    adaptor.addChild(root_0, dec1.getTree());
            	    if ( state.backtracking==0 ) {
            	       decs.add((dec1!=null?dec1.dec:null)); 
            	    }

            	    if ( state.backtracking==0 ) {
            	    }
            	    }
            	    break;
            	case 3 :
            	    // RBuilder.g:577:13: dec2= operation_declaration
            	    {
            	    _last = (ColsAST)input.LT(1);
            	    pushFollow(FOLLOW_operation_declaration_in_enhancement_item_sequence1621);
            	    dec2=operation_declaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) 
            	    adaptor.addChild(root_0, dec2.getTree());
            	    if ( state.backtracking==0 ) {
            	       decs.add((dec2!=null?dec2.dec:null)); 
            	    }

            	    if ( state.backtracking==0 ) {
            	    }
            	    }
            	    break;
            	case 4 :
            	    // RBuilder.g:578:13: dec3= definition_declaration
            	    {
            	    _last = (ColsAST)input.LT(1);
            	    pushFollow(FOLLOW_definition_declaration_in_enhancement_item_sequence1639);
            	    dec3=definition_declaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) 
            	    adaptor.addChild(root_0, dec3.getTree());
            	    if ( state.backtracking==0 ) {
            	       decs.add((dec3!=null?dec3.dec:null)); 
            	    }

            	    if ( state.backtracking==0 ) {
            	    }
            	    }
            	    break;
            	case 5 :
            	    // RBuilder.g:579:13: dec4= defines_declaration
            	    {
            	    _last = (ColsAST)input.LT(1);
            	    pushFollow(FOLLOW_defines_declaration_in_enhancement_item_sequence1657);
            	    dec4=defines_declaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) 
            	    adaptor.addChild(root_0, dec4.getTree());
            	    if ( state.backtracking==0 ) {
            	       decs.add((dec4!=null?dec4.dec:null)); 
            	    }

            	    if ( state.backtracking==0 ) {
            	    }
            	    }
            	    break;

            	default :
            	    if ( cnt21 >= 1 ) break loop21;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(21, input);
                        throw eee;
                }
                cnt21++;
            } while (true);

            if ( state.backtracking==0 ) {
               retval.dec = new EnhancementModuleDec(ps, pars, cSym, uses, req, decs); 
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "enhancement_item_sequence"

    public static class realization_body_module_return extends TreeRuleReturnScope {
        public ModuleDec dec = null;
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "realization_body_module"
    // RBuilder.g:588:1: realization_body_module returns [ModuleDec dec = null] : ^( MODULE_REALIZATION ps= ident ( WITH_PROFILE prof= ident )? (pars2= module_formal_param_section )? (dec2= body_concept_section | dec3= body_enhancement_section ) (uses2= uses_list )? (req= requires_clause )? (dec4= body_item_sequence )? ) ;
    public final RBuilder.realization_body_module_return realization_body_module() throws RecognitionException {
        RBuilder.realization_body_module_return retval = new RBuilder.realization_body_module_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        ColsAST _first_0 = null;
        ColsAST _last = null;

        ColsAST MODULE_REALIZATION5=null;
        ColsAST WITH_PROFILE6=null;
        RBuilder.ident_return ps = null;

        RBuilder.ident_return prof = null;

        RBuilder.module_formal_param_section_return pars2 = null;

        RBuilder.body_concept_section_return dec2 = null;

        RBuilder.body_enhancement_section_return dec3 = null;

        RBuilder.uses_list_return uses2 = null;

        RBuilder.requires_clause_return req = null;

        RBuilder.body_item_sequence_return dec4 = null;


        ColsAST MODULE_REALIZATION5_tree=null;
        ColsAST WITH_PROFILE6_tree=null;


            PosSymbol cName = null;
            edu.clemson.cs.r2jt.collections.List<PosSymbol> eNames = new edu.clemson.cs.r2jt.collections.List<PosSymbol>("PosSymbol");
            PosSymbol eName = null;
            edu.clemson.cs.r2jt.collections.List<EnhancementBodyItem> eItems
                = new edu.clemson.cs.r2jt.collections.List<EnhancementBodyItem>("EnhancementBodyItem");
            edu.clemson.cs.r2jt.collections.List<Exp> convs = new edu.clemson.cs.r2jt.collections.List<Exp>("Exp");
            edu.clemson.cs.r2jt.collections.List<Exp> corrs = new edu.clemson.cs.r2jt.collections.List<Exp>("Exp");
            InitItem init = null;
            FinalItem fin = null;
            edu.clemson.cs.r2jt.collections.List<Dec> decs = new edu.clemson.cs.r2jt.collections.List<Dec>("Dec");
            edu.clemson.cs.r2jt.collections.List<ModuleParameterDec> pars = new edu.clemson.cs.r2jt.collections.List<ModuleParameterDec>("ModuleParameterDec");
            edu.clemson.cs.r2jt.collections.List<UsesItem> uses = new edu.clemson.cs.r2jt.collections.List<UsesItem>("UsesItem");

        try {
            // RBuilder.g:603:5: ( ^( MODULE_REALIZATION ps= ident ( WITH_PROFILE prof= ident )? (pars2= module_formal_param_section )? (dec2= body_concept_section | dec3= body_enhancement_section ) (uses2= uses_list )? (req= requires_clause )? (dec4= body_item_sequence )? ) )
            // RBuilder.g:603:9: ^( MODULE_REALIZATION ps= ident ( WITH_PROFILE prof= ident )? (pars2= module_formal_param_section )? (dec2= body_concept_section | dec3= body_enhancement_section ) (uses2= uses_list )? (req= requires_clause )? (dec4= body_item_sequence )? )
            {
            root_0 = (ColsAST)adaptor.nil();

            _last = (ColsAST)input.LT(1);
            {
            ColsAST _save_last_1 = _last;
            ColsAST _first_1 = null;
            ColsAST root_1 = (ColsAST)adaptor.nil();_last = (ColsAST)input.LT(1);
            MODULE_REALIZATION5=(ColsAST)match(input,MODULE_REALIZATION,FOLLOW_MODULE_REALIZATION_in_realization_body_module1714); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            MODULE_REALIZATION5_tree = (ColsAST)adaptor.dupNode(MODULE_REALIZATION5);

            root_1 = (ColsAST)adaptor.becomeRoot(MODULE_REALIZATION5_tree, root_1);
            }


            match(input, Token.DOWN, null); if (state.failed) return retval;
            _last = (ColsAST)input.LT(1);
            pushFollow(FOLLOW_ident_in_realization_body_module1718);
            ps=ident();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, ps.getTree());
            // RBuilder.g:604:13: ( WITH_PROFILE prof= ident )?
            int alt22=2;
            int LA22_0 = input.LA(1);

            if ( (LA22_0==WITH_PROFILE) ) {
                alt22=1;
            }
            switch (alt22) {
                case 1 :
                    // RBuilder.g:604:14: WITH_PROFILE prof= ident
                    {
                    _last = (ColsAST)input.LT(1);
                    WITH_PROFILE6=(ColsAST)match(input,WITH_PROFILE,FOLLOW_WITH_PROFILE_in_realization_body_module1733); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    WITH_PROFILE6_tree = (ColsAST)adaptor.dupNode(WITH_PROFILE6);

                    adaptor.addChild(root_1, WITH_PROFILE6_tree);
                    }
                    _last = (ColsAST)input.LT(1);
                    pushFollow(FOLLOW_ident_in_realization_body_module1737);
                    prof=ident();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, prof.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }

            // RBuilder.g:604:40: (pars2= module_formal_param_section )?
            int alt23=2;
            int LA23_0 = input.LA(1);

            if ( (LA23_0==PARAMS) ) {
                alt23=1;
            }
            switch (alt23) {
                case 1 :
                    // RBuilder.g:604:41: pars2= module_formal_param_section
                    {
                    _last = (ColsAST)input.LT(1);
                    pushFollow(FOLLOW_module_formal_param_section_in_realization_body_module1744);
                    pars2=module_formal_param_section();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, pars2.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }

            // RBuilder.g:605:13: (dec2= body_concept_section | dec3= body_enhancement_section )
            int alt24=2;
            int LA24_0 = input.LA(1);

            if ( (LA24_0==CONCEPT) ) {
                alt24=1;
            }
            else if ( (LA24_0==ENHANCEMENT) ) {
                alt24=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 24, 0, input);

                throw nvae;
            }
            switch (alt24) {
                case 1 :
                    // RBuilder.g:605:17: dec2= body_concept_section
                    {
                    _last = (ColsAST)input.LT(1);
                    pushFollow(FOLLOW_body_concept_section_in_realization_body_module1766);
                    dec2=body_concept_section();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, dec2.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // RBuilder.g:606:17: dec3= body_enhancement_section
                    {
                    _last = (ColsAST)input.LT(1);
                    pushFollow(FOLLOW_body_enhancement_section_in_realization_body_module1786);
                    dec3=body_enhancement_section();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, dec3.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }

            // RBuilder.g:608:13: (uses2= uses_list )?
            int alt25=2;
            int LA25_0 = input.LA(1);

            if ( (LA25_0==USES) ) {
                alt25=1;
            }
            switch (alt25) {
                case 1 :
                    // RBuilder.g:608:14: uses2= uses_list
                    {
                    _last = (ColsAST)input.LT(1);
                    pushFollow(FOLLOW_uses_list_in_realization_body_module1817);
                    uses2=uses_list();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, uses2.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }

            // RBuilder.g:609:13: (req= requires_clause )?
            int alt26=2;
            int LA26_0 = input.LA(1);

            if ( (LA26_0==REQUIRES) ) {
                alt26=1;
            }
            switch (alt26) {
                case 1 :
                    // RBuilder.g:609:14: req= requires_clause
                    {
                    _last = (ColsAST)input.LT(1);
                    pushFollow(FOLLOW_requires_clause_in_realization_body_module1836);
                    req=requires_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, req.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }

            // RBuilder.g:610:13: (dec4= body_item_sequence )?
            int alt27=2;
            int LA27_0 = input.LA(1);

            if ( (LA27_0==CONVENTION||LA27_0==CORR||LA27_0==DEFINITION||(LA27_0>=FACILITY && LA27_0<=FAC_INIT)||LA27_0==OPERATION||LA27_0==PROCEDURE||LA27_0==TYPE||LA27_0==VAR||LA27_0==AUX_OPERATION||LA27_0==IMPLICIT_DEF||LA27_0==INDUCTIVE_DEF||(LA27_0>=RECURSIVE_OPERATION_PROCEDURE && LA27_0<=RECURSIVE_PROCEDURE)) ) {
                alt27=1;
            }
            switch (alt27) {
                case 1 :
                    // RBuilder.g:610:14: dec4= body_item_sequence
                    {
                    _last = (ColsAST)input.LT(1);
                    pushFollow(FOLLOW_body_item_sequence_in_realization_body_module1855);
                    dec4=body_item_sequence();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, dec4.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }


            match(input, Token.UP, null); if (state.failed) return retval;adaptor.addChild(root_0, root_1);_last = _save_last_1;
            }

            if ( state.backtracking==0 ) {
                 if ((dec4!=null?dec4.dec:null) != null) {
                              convs = (dec4!=null?dec4.dec:null).getConventions();
                              corrs = (dec4!=null?dec4.dec:null).getCorrs();
                              init = (dec4!=null?dec4.dec:null).getFacilityInit();
                              fin = (dec4!=null?dec4.dec:null).getFacilityFinal();
                              decs = (dec4!=null?dec4.dec:null).getDecs();
                          }
                          if ((dec2!=null?dec2.dec:null) != null) {
                              cName = (dec2!=null?dec2.dec:null).getConceptName();
                              eNames = (dec2!=null?dec2.dec:null).getEnhancementNames();
                              retval.dec = new ConceptBodyModuleDec((ps!=null?ps.ps:null), (prof!=null?prof.ps:null),
                                  (pars2!=null?pars2.pars:null)!=null?(pars2!=null?pars2.pars:null):pars, cName, eNames,
                                  (uses2!=null?uses2.uses:null)!=null?(uses2!=null?uses2.uses:null):uses, (req!=null?req.exp:null), convs,
                                  corrs, init, fin, decs);
                          } else if ((dec3!=null?dec3.dec:null) != null) {
                              eName = (dec3!=null?dec3.dec:null).getEnhancementName();
                              cName = (dec3!=null?dec3.dec:null).getConceptName();
                              eItems = (dec3!=null?dec3.dec:null).getEnhancementBodies();
                              retval.dec = new EnhancementBodyModuleDec((ps!=null?ps.ps:null), (prof!=null?prof.ps:null), (pars2!=null?pars2.pars:null)!=null?(pars2!=null?pars2.pars:null):pars, eName,
                                  cName, eItems,(uses2!=null?uses2.uses:null)!=null?(uses2!=null?uses2.uses:null):uses, (req!=null?req.exp:null), convs, corrs,
                                  init, fin, decs);
                          } else {
                              assert false;
                          }
                      
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "realization_body_module"

    public static class body_concept_section_return extends TreeRuleReturnScope {
        public ConceptBodyModuleDec dec = null;
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "body_concept_section"
    // RBuilder.g:639:1: body_concept_section returns [ConceptBodyModuleDec dec = null] : ^( CONCEPT cName= ident (ps2= ident )* ) ;
    public final RBuilder.body_concept_section_return body_concept_section() throws RecognitionException {
        RBuilder.body_concept_section_return retval = new RBuilder.body_concept_section_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        ColsAST _first_0 = null;
        ColsAST _last = null;

        ColsAST CONCEPT7=null;
        RBuilder.ident_return cName = null;

        RBuilder.ident_return ps2 = null;


        ColsAST CONCEPT7_tree=null;

           PosSymbol ps = null; //dummy
            edu.clemson.cs.r2jt.collections.List<ModuleParameterDec> pars = null; //dummy
            edu.clemson.cs.r2jt.collections.List<PosSymbol> eNames = new edu.clemson.cs.r2jt.collections.List<PosSymbol>("PosSymbol");
            edu.clemson.cs.r2jt.collections.List<UsesItem> uses = new edu.clemson.cs.r2jt.collections.List<UsesItem>("UsesItem");
            Exp req = null; //dummy
            edu.clemson.cs.r2jt.collections.List<Exp> convs = null; //dummy
            edu.clemson.cs.r2jt.collections.List<Exp> corrs = null; //dummy
            InitItem init = null; //dummy
            FinalItem fin = null; //dummy
            edu.clemson.cs.r2jt.collections.List<Dec> decs = null; //dummy

        try {
            // RBuilder.g:651:5: ( ^( CONCEPT cName= ident (ps2= ident )* ) )
            // RBuilder.g:651:9: ^( CONCEPT cName= ident (ps2= ident )* )
            {
            root_0 = (ColsAST)adaptor.nil();

            _last = (ColsAST)input.LT(1);
            {
            ColsAST _save_last_1 = _last;
            ColsAST _first_1 = null;
            ColsAST root_1 = (ColsAST)adaptor.nil();_last = (ColsAST)input.LT(1);
            CONCEPT7=(ColsAST)match(input,CONCEPT,FOLLOW_CONCEPT_in_body_concept_section1905); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            CONCEPT7_tree = (ColsAST)adaptor.dupNode(CONCEPT7);

            root_1 = (ColsAST)adaptor.becomeRoot(CONCEPT7_tree, root_1);
            }


            match(input, Token.DOWN, null); if (state.failed) return retval;
            _last = (ColsAST)input.LT(1);
            pushFollow(FOLLOW_ident_in_body_concept_section1909);
            cName=ident();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, cName.getTree());
            // RBuilder.g:651:31: (ps2= ident )*
            loop28:
            do {
                int alt28=2;
                int LA28_0 = input.LA(1);

                if ( (LA28_0==IDENTIFIER) ) {
                    alt28=1;
                }


                switch (alt28) {
            	case 1 :
            	    // RBuilder.g:651:32: ps2= ident
            	    {
            	    _last = (ColsAST)input.LT(1);
            	    pushFollow(FOLLOW_ident_in_body_concept_section1914);
            	    ps2=ident();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) 
            	    adaptor.addChild(root_1, ps2.getTree());
            	    if ( state.backtracking==0 ) {
            	       eNames.add((ps2!=null?ps2.ps:null)); 
            	    }

            	    if ( state.backtracking==0 ) {
            	    }
            	    }
            	    break;

            	default :
            	    break loop28;
                }
            } while (true);


            match(input, Token.UP, null); if (state.failed) return retval;adaptor.addChild(root_0, root_1);_last = _save_last_1;
            }

            if ( state.backtracking==0 ) {
                 retval.dec = new ConceptBodyModuleDec(ps, null, pars, (cName!=null?cName.ps:null), eNames,
                              uses, req, convs, corrs, init, fin, decs);
                      
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "body_concept_section"

    public static class body_enhancement_section_return extends TreeRuleReturnScope {
        public EnhancementBodyModuleDec dec = null;
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "body_enhancement_section"
    // RBuilder.g:658:1: body_enhancement_section returns [EnhancementBodyModuleDec dec = null] : ^( ENHANCEMENT eName= ident cName= ident (item2= added_enhancement_section )* ) ;
    public final RBuilder.body_enhancement_section_return body_enhancement_section() throws RecognitionException {
        RBuilder.body_enhancement_section_return retval = new RBuilder.body_enhancement_section_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        ColsAST _first_0 = null;
        ColsAST _last = null;

        ColsAST ENHANCEMENT8=null;
        RBuilder.ident_return eName = null;

        RBuilder.ident_return cName = null;

        RBuilder.added_enhancement_section_return item2 = null;


        ColsAST ENHANCEMENT8_tree=null;

           PosSymbol ps = null; //dummy
            edu.clemson.cs.r2jt.collections.List<ModuleParameterDec> pars = null; //dummy
            edu.clemson.cs.r2jt.collections.List<EnhancementBodyItem> eItems
                = new edu.clemson.cs.r2jt.collections.List<EnhancementBodyItem>("EnhancementBodyItem");
            edu.clemson.cs.r2jt.collections.List<UsesItem> uses = new edu.clemson.cs.r2jt.collections.List<UsesItem>("UsesItem");
            Exp req = null; //dummy
            edu.clemson.cs.r2jt.collections.List<Exp> convs = null; //dummy
            edu.clemson.cs.r2jt.collections.List<Exp> corrs = null; //dummy
            InitItem init = null; //dummy
            FinalItem fin = null; //dummy
            edu.clemson.cs.r2jt.collections.List<Dec> decs = null; //dummy

        try {
            // RBuilder.g:671:5: ( ^( ENHANCEMENT eName= ident cName= ident (item2= added_enhancement_section )* ) )
            // RBuilder.g:671:9: ^( ENHANCEMENT eName= ident cName= ident (item2= added_enhancement_section )* )
            {
            root_0 = (ColsAST)adaptor.nil();

            _last = (ColsAST)input.LT(1);
            {
            ColsAST _save_last_1 = _last;
            ColsAST _first_1 = null;
            ColsAST root_1 = (ColsAST)adaptor.nil();_last = (ColsAST)input.LT(1);
            ENHANCEMENT8=(ColsAST)match(input,ENHANCEMENT,FOLLOW_ENHANCEMENT_in_body_enhancement_section1968); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ENHANCEMENT8_tree = (ColsAST)adaptor.dupNode(ENHANCEMENT8);

            root_1 = (ColsAST)adaptor.becomeRoot(ENHANCEMENT8_tree, root_1);
            }


            match(input, Token.DOWN, null); if (state.failed) return retval;
            _last = (ColsAST)input.LT(1);
            pushFollow(FOLLOW_ident_in_body_enhancement_section1972);
            eName=ident();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, eName.getTree());
            _last = (ColsAST)input.LT(1);
            pushFollow(FOLLOW_ident_in_body_enhancement_section1976);
            cName=ident();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, cName.getTree());
            // RBuilder.g:672:13: (item2= added_enhancement_section )*
            loop29:
            do {
                int alt29=2;
                int LA29_0 = input.LA(1);

                if ( (LA29_0==ENHANCED) ) {
                    alt29=1;
                }


                switch (alt29) {
            	case 1 :
            	    // RBuilder.g:672:14: item2= added_enhancement_section
            	    {
            	    _last = (ColsAST)input.LT(1);
            	    pushFollow(FOLLOW_added_enhancement_section_in_body_enhancement_section1993);
            	    item2=added_enhancement_section();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) 
            	    adaptor.addChild(root_1, item2.getTree());
            	    if ( state.backtracking==0 ) {
            	       eItems.add((item2!=null?item2.item:null)); 
            	    }

            	    if ( state.backtracking==0 ) {
            	    }
            	    }
            	    break;

            	default :
            	    break loop29;
                }
            } while (true);


            match(input, Token.UP, null); if (state.failed) return retval;adaptor.addChild(root_0, root_1);_last = _save_last_1;
            }

            if ( state.backtracking==0 ) {
                 retval.dec = new EnhancementBodyModuleDec(ps, null, pars, (eName!=null?eName.ps:null), (cName!=null?cName.ps:null),
                              eItems, uses, req, convs, corrs, init, fin, decs);
                      
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "body_enhancement_section"

    public static class added_enhancement_section_return extends TreeRuleReturnScope {
        public EnhancementBodyItem item = null;
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "added_enhancement_section"
    // RBuilder.g:679:1: added_enhancement_section returns [EnhancementBodyItem item = null] : ^( ENHANCED ps= ident (args2= module_argument_section )? REALIZED bName= ident ( WITH_PROFILE prof= ident )? (bArgs2= module_argument_section )? ) ;
    public final RBuilder.added_enhancement_section_return added_enhancement_section() throws RecognitionException {
        RBuilder.added_enhancement_section_return retval = new RBuilder.added_enhancement_section_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        ColsAST _first_0 = null;
        ColsAST _last = null;

        ColsAST ENHANCED9=null;
        ColsAST REALIZED10=null;
        ColsAST WITH_PROFILE11=null;
        RBuilder.ident_return ps = null;

        RBuilder.module_argument_section_return args2 = null;

        RBuilder.ident_return bName = null;

        RBuilder.ident_return prof = null;

        RBuilder.module_argument_section_return bArgs2 = null;


        ColsAST ENHANCED9_tree=null;
        ColsAST REALIZED10_tree=null;
        ColsAST WITH_PROFILE11_tree=null;


          edu.clemson.cs.r2jt.collections.List<ModuleArgumentItem> args = new edu.clemson.cs.r2jt.collections.List<ModuleArgumentItem>("ModuleArgumentItem");

        try {
            // RBuilder.g:683:5: ( ^( ENHANCED ps= ident (args2= module_argument_section )? REALIZED bName= ident ( WITH_PROFILE prof= ident )? (bArgs2= module_argument_section )? ) )
            // RBuilder.g:683:9: ^( ENHANCED ps= ident (args2= module_argument_section )? REALIZED bName= ident ( WITH_PROFILE prof= ident )? (bArgs2= module_argument_section )? )
            {
            root_0 = (ColsAST)adaptor.nil();

            _last = (ColsAST)input.LT(1);
            {
            ColsAST _save_last_1 = _last;
            ColsAST _first_1 = null;
            ColsAST root_1 = (ColsAST)adaptor.nil();_last = (ColsAST)input.LT(1);
            ENHANCED9=(ColsAST)match(input,ENHANCED,FOLLOW_ENHANCED_in_added_enhancement_section2047); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ENHANCED9_tree = (ColsAST)adaptor.dupNode(ENHANCED9);

            root_1 = (ColsAST)adaptor.becomeRoot(ENHANCED9_tree, root_1);
            }


            match(input, Token.DOWN, null); if (state.failed) return retval;
            _last = (ColsAST)input.LT(1);
            pushFollow(FOLLOW_ident_in_added_enhancement_section2051);
            ps=ident();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, ps.getTree());
            // RBuilder.g:683:31: (args2= module_argument_section )?
            int alt30=2;
            int LA30_0 = input.LA(1);

            if ( (LA30_0==PARAMS) ) {
                alt30=1;
            }
            switch (alt30) {
                case 1 :
                    // RBuilder.g:683:32: args2= module_argument_section
                    {
                    _last = (ColsAST)input.LT(1);
                    pushFollow(FOLLOW_module_argument_section_in_added_enhancement_section2056);
                    args2=module_argument_section();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, args2.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }

            _last = (ColsAST)input.LT(1);
            REALIZED10=(ColsAST)match(input,REALIZED,FOLLOW_REALIZED_in_added_enhancement_section2072); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REALIZED10_tree = (ColsAST)adaptor.dupNode(REALIZED10);

            adaptor.addChild(root_1, REALIZED10_tree);
            }
            _last = (ColsAST)input.LT(1);
            pushFollow(FOLLOW_ident_in_added_enhancement_section2076);
            bName=ident();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, bName.getTree());
            // RBuilder.g:684:34: ( WITH_PROFILE prof= ident )?
            int alt31=2;
            int LA31_0 = input.LA(1);

            if ( (LA31_0==WITH_PROFILE) ) {
                alt31=1;
            }
            switch (alt31) {
                case 1 :
                    // RBuilder.g:684:35: WITH_PROFILE prof= ident
                    {
                    _last = (ColsAST)input.LT(1);
                    WITH_PROFILE11=(ColsAST)match(input,WITH_PROFILE,FOLLOW_WITH_PROFILE_in_added_enhancement_section2079); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    WITH_PROFILE11_tree = (ColsAST)adaptor.dupNode(WITH_PROFILE11);

                    adaptor.addChild(root_1, WITH_PROFILE11_tree);
                    }
                    _last = (ColsAST)input.LT(1);
                    pushFollow(FOLLOW_ident_in_added_enhancement_section2083);
                    prof=ident();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, prof.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }

            // RBuilder.g:684:61: (bArgs2= module_argument_section )?
            int alt32=2;
            int LA32_0 = input.LA(1);

            if ( (LA32_0==PARAMS) ) {
                alt32=1;
            }
            switch (alt32) {
                case 1 :
                    // RBuilder.g:684:62: bArgs2= module_argument_section
                    {
                    _last = (ColsAST)input.LT(1);
                    pushFollow(FOLLOW_module_argument_section_in_added_enhancement_section2090);
                    bArgs2=module_argument_section();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, bArgs2.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }


            match(input, Token.UP, null); if (state.failed) return retval;adaptor.addChild(root_0, root_1);_last = _save_last_1;
            }

            if ( state.backtracking==0 ) {
               retval.item = new EnhancementBodyItem((ps!=null?ps.ps:null),
                                                        (args2!=null?args2.args:null)!=null?(args2!=null?args2.args:null):args,
                                                        (bName!=null?bName.ps:null), (prof!=null?prof.ps:null),
                                                        (bArgs2!=null?bArgs2.args:null)!=null?(bArgs2!=null?bArgs2.args:null):args); 
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "added_enhancement_section"

    public static class body_item_sequence_return extends TreeRuleReturnScope {
        public ConceptBodyModuleDec dec = null;
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "body_item_sequence"
    // RBuilder.g:696:1: body_item_sequence returns [ConceptBodyModuleDec dec = null] : (decs2= state_variable_declaration | exp1= convention_clause | exp2= correspondence_clause | init= module_body_init_declaration | fin= module_body_final_declaration | dec1= type_representation_declaration | dec3= operation_recursive_procedure_declaration | dec2= operation_procedure_declaration | dec4= aux_operation_declaration | dec5= procedure_declaration | dec6= recursive_procedure_declaration | dec7= definition_declaration | dec8= facility_declaration )+ ;
    public final RBuilder.body_item_sequence_return body_item_sequence() throws RecognitionException {
        RBuilder.body_item_sequence_return retval = new RBuilder.body_item_sequence_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        ColsAST _first_0 = null;
        ColsAST _last = null;

        RBuilder.state_variable_declaration_return decs2 = null;

        RBuilder.convention_clause_return exp1 = null;

        RBuilder.correspondence_clause_return exp2 = null;

        RBuilder.module_body_init_declaration_return init = null;

        RBuilder.module_body_final_declaration_return fin = null;

        RBuilder.type_representation_declaration_return dec1 = null;

        RBuilder.operation_recursive_procedure_declaration_return dec3 = null;

        RBuilder.operation_procedure_declaration_return dec2 = null;

        RBuilder.aux_operation_declaration_return dec4 = null;

        RBuilder.procedure_declaration_return dec5 = null;

        RBuilder.recursive_procedure_declaration_return dec6 = null;

        RBuilder.definition_declaration_return dec7 = null;

        RBuilder.facility_declaration_return dec8 = null;




            PosSymbol ps = null; //dummy
            edu.clemson.cs.r2jt.collections.List<ModuleParameterDec> pars = null; //dummy
            PosSymbol cSym = null; //dummy
            edu.clemson.cs.r2jt.collections.List<PosSymbol> eNames = null; //dummy
            edu.clemson.cs.r2jt.collections.List<UsesItem> uses = null; //dummy
            Exp req = null; //dummy
            edu.clemson.cs.r2jt.collections.List<Exp> convs = new edu.clemson.cs.r2jt.collections.List<Exp>("Exp");
            edu.clemson.cs.r2jt.collections.List<Exp> corrs = new edu.clemson.cs.r2jt.collections.List<Exp>("Exp");
            edu.clemson.cs.r2jt.collections.List<Dec> decs = new edu.clemson.cs.r2jt.collections.List<Dec>("Dec");

        try {
            // RBuilder.g:708:5: ( (decs2= state_variable_declaration | exp1= convention_clause | exp2= correspondence_clause | init= module_body_init_declaration | fin= module_body_final_declaration | dec1= type_representation_declaration | dec3= operation_recursive_procedure_declaration | dec2= operation_procedure_declaration | dec4= aux_operation_declaration | dec5= procedure_declaration | dec6= recursive_procedure_declaration | dec7= definition_declaration | dec8= facility_declaration )+ )
            // RBuilder.g:708:9: (decs2= state_variable_declaration | exp1= convention_clause | exp2= correspondence_clause | init= module_body_init_declaration | fin= module_body_final_declaration | dec1= type_representation_declaration | dec3= operation_recursive_procedure_declaration | dec2= operation_procedure_declaration | dec4= aux_operation_declaration | dec5= procedure_declaration | dec6= recursive_procedure_declaration | dec7= definition_declaration | dec8= facility_declaration )+
            {
            root_0 = (ColsAST)adaptor.nil();

            // RBuilder.g:708:9: (decs2= state_variable_declaration | exp1= convention_clause | exp2= correspondence_clause | init= module_body_init_declaration | fin= module_body_final_declaration | dec1= type_representation_declaration | dec3= operation_recursive_procedure_declaration | dec2= operation_procedure_declaration | dec4= aux_operation_declaration | dec5= procedure_declaration | dec6= recursive_procedure_declaration | dec7= definition_declaration | dec8= facility_declaration )+
            int cnt33=0;
            loop33:
            do {
                int alt33=14;
                alt33 = dfa33.predict(input);
                switch (alt33) {
            	case 1 :
            	    // RBuilder.g:708:13: decs2= state_variable_declaration
            	    {
            	    _last = (ColsAST)input.LT(1);
            	    pushFollow(FOLLOW_state_variable_declaration_in_body_item_sequence2155);
            	    decs2=state_variable_declaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) 
            	    adaptor.addChild(root_0, decs2.getTree());
            	    if ( state.backtracking==0 ) {
            	       decs.addAll((decs2!=null?decs2.decs:null)); 
            	    }

            	    if ( state.backtracking==0 ) {
            	    }
            	    }
            	    break;
            	case 2 :
            	    // RBuilder.g:709:13: exp1= convention_clause
            	    {
            	    _last = (ColsAST)input.LT(1);
            	    pushFollow(FOLLOW_convention_clause_in_body_item_sequence2173);
            	    exp1=convention_clause();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) 
            	    adaptor.addChild(root_0, exp1.getTree());
            	    if ( state.backtracking==0 ) {
            	       convs.add((exp1!=null?exp1.exp:null)); 
            	    }

            	    if ( state.backtracking==0 ) {
            	    }
            	    }
            	    break;
            	case 3 :
            	    // RBuilder.g:710:13: exp2= correspondence_clause
            	    {
            	    _last = (ColsAST)input.LT(1);
            	    pushFollow(FOLLOW_correspondence_clause_in_body_item_sequence2191);
            	    exp2=correspondence_clause();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) 
            	    adaptor.addChild(root_0, exp2.getTree());
            	    if ( state.backtracking==0 ) {
            	       corrs.add((exp2!=null?exp2.exp:null)); 
            	    }

            	    if ( state.backtracking==0 ) {
            	    }
            	    }
            	    break;
            	case 4 :
            	    // RBuilder.g:711:13: init= module_body_init_declaration
            	    {
            	    _last = (ColsAST)input.LT(1);
            	    pushFollow(FOLLOW_module_body_init_declaration_in_body_item_sequence2209);
            	    init=module_body_init_declaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) 
            	    adaptor.addChild(root_0, init.getTree());

            	    if ( state.backtracking==0 ) {
            	    }
            	    }
            	    break;
            	case 5 :
            	    // RBuilder.g:712:13: fin= module_body_final_declaration
            	    {
            	    _last = (ColsAST)input.LT(1);
            	    pushFollow(FOLLOW_module_body_final_declaration_in_body_item_sequence2225);
            	    fin=module_body_final_declaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) 
            	    adaptor.addChild(root_0, fin.getTree());

            	    if ( state.backtracking==0 ) {
            	    }
            	    }
            	    break;
            	case 6 :
            	    // RBuilder.g:713:13: dec1= type_representation_declaration
            	    {
            	    _last = (ColsAST)input.LT(1);
            	    pushFollow(FOLLOW_type_representation_declaration_in_body_item_sequence2241);
            	    dec1=type_representation_declaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) 
            	    adaptor.addChild(root_0, dec1.getTree());
            	    if ( state.backtracking==0 ) {
            	       decs.add((dec1!=null?dec1.dec:null)); 
            	    }

            	    if ( state.backtracking==0 ) {
            	    }
            	    }
            	    break;
            	case 7 :
            	    // RBuilder.g:714:13: dec3= operation_recursive_procedure_declaration
            	    {
            	    _last = (ColsAST)input.LT(1);
            	    pushFollow(FOLLOW_operation_recursive_procedure_declaration_in_body_item_sequence2259);
            	    dec3=operation_recursive_procedure_declaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) 
            	    adaptor.addChild(root_0, dec3.getTree());
            	    if ( state.backtracking==0 ) {
            	       decs.add((dec3!=null?dec3.dec:null)); 
            	    }

            	    if ( state.backtracking==0 ) {
            	    }
            	    }
            	    break;
            	case 8 :
            	    // RBuilder.g:715:13: dec2= operation_procedure_declaration
            	    {
            	    _last = (ColsAST)input.LT(1);
            	    pushFollow(FOLLOW_operation_procedure_declaration_in_body_item_sequence2277);
            	    dec2=operation_procedure_declaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) 
            	    adaptor.addChild(root_0, dec2.getTree());
            	    if ( state.backtracking==0 ) {
            	       decs.add((dec2!=null?dec2.dec:null)); 
            	    }

            	    if ( state.backtracking==0 ) {
            	    }
            	    }
            	    break;
            	case 9 :
            	    // RBuilder.g:716:13: dec4= aux_operation_declaration
            	    {
            	    _last = (ColsAST)input.LT(1);
            	    pushFollow(FOLLOW_aux_operation_declaration_in_body_item_sequence2295);
            	    dec4=aux_operation_declaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) 
            	    adaptor.addChild(root_0, dec4.getTree());
            	    if ( state.backtracking==0 ) {
            	       decs.add((dec4!=null?dec4.dec:null)); 
            	    }

            	    if ( state.backtracking==0 ) {
            	    }
            	    }
            	    break;
            	case 10 :
            	    // RBuilder.g:717:13: dec5= procedure_declaration
            	    {
            	    _last = (ColsAST)input.LT(1);
            	    pushFollow(FOLLOW_procedure_declaration_in_body_item_sequence2313);
            	    dec5=procedure_declaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) 
            	    adaptor.addChild(root_0, dec5.getTree());
            	    if ( state.backtracking==0 ) {
            	       decs.add((dec5!=null?dec5.dec:null)); 
            	    }

            	    if ( state.backtracking==0 ) {
            	    }
            	    }
            	    break;
            	case 11 :
            	    // RBuilder.g:718:13: dec6= recursive_procedure_declaration
            	    {
            	    _last = (ColsAST)input.LT(1);
            	    pushFollow(FOLLOW_recursive_procedure_declaration_in_body_item_sequence2331);
            	    dec6=recursive_procedure_declaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) 
            	    adaptor.addChild(root_0, dec6.getTree());
            	    if ( state.backtracking==0 ) {
            	       decs.add((dec6!=null?dec6.dec:null)); 
            	    }

            	    if ( state.backtracking==0 ) {
            	    }
            	    }
            	    break;
            	case 12 :
            	    // RBuilder.g:719:13: dec7= definition_declaration
            	    {
            	    _last = (ColsAST)input.LT(1);
            	    pushFollow(FOLLOW_definition_declaration_in_body_item_sequence2349);
            	    dec7=definition_declaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) 
            	    adaptor.addChild(root_0, dec7.getTree());
            	    if ( state.backtracking==0 ) {
            	       decs.add((dec7!=null?dec7.dec:null)); 
            	    }

            	    if ( state.backtracking==0 ) {
            	    }
            	    }
            	    break;
            	case 13 :
            	    // RBuilder.g:720:13: dec8= facility_declaration
            	    {
            	    _last = (ColsAST)input.LT(1);
            	    pushFollow(FOLLOW_facility_declaration_in_body_item_sequence2367);
            	    dec8=facility_declaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) 
            	    adaptor.addChild(root_0, dec8.getTree());
            	    if ( state.backtracking==0 ) {
            	       decs.add((dec8!=null?dec8.dec:null)); 
            	    }

            	    if ( state.backtracking==0 ) {
            	    }
            	    }
            	    break;

            	default :
            	    if ( cnt33 >= 1 ) break loop33;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(33, input);
                        throw eee;
                }
                cnt33++;
            } while (true);

            if ( state.backtracking==0 ) {
                 retval.dec = new ConceptBodyModuleDec(ps, null, pars, cSym,
                              eNames, uses, req, convs, corrs, (init!=null?init.item:null), (fin!=null?fin.item:null), decs);
                      
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "body_item_sequence"

    public static class facility_module_return extends TreeRuleReturnScope {
        public ModuleDec dec = null;
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "facility_module"
    // RBuilder.g:731:1: facility_module returns [ModuleDec dec = null] : ^( FACILITY ps= ident (dec2= short_facility_section (uses= uses_list )? | (uses= uses_list )? (dec3= facility_item_sequence )? ) ) ;
    public final RBuilder.facility_module_return facility_module() throws RecognitionException {
        RBuilder.facility_module_return retval = new RBuilder.facility_module_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        ColsAST _first_0 = null;
        ColsAST _last = null;

        ColsAST FACILITY12=null;
        RBuilder.ident_return ps = null;

        RBuilder.short_facility_section_return dec2 = null;

        RBuilder.uses_list_return uses = null;

        RBuilder.facility_item_sequence_return dec3 = null;


        ColsAST FACILITY12_tree=null;


            InitItem init = null;
            FinalItem fin = null;
            edu.clemson.cs.r2jt.collections.List<Dec> decs = null;
            FacilityDec fDec = null;

        try {
            // RBuilder.g:738:5: ( ^( FACILITY ps= ident (dec2= short_facility_section (uses= uses_list )? | (uses= uses_list )? (dec3= facility_item_sequence )? ) ) )
            // RBuilder.g:738:9: ^( FACILITY ps= ident (dec2= short_facility_section (uses= uses_list )? | (uses= uses_list )? (dec3= facility_item_sequence )? ) )
            {
            root_0 = (ColsAST)adaptor.nil();

            _last = (ColsAST)input.LT(1);
            {
            ColsAST _save_last_1 = _last;
            ColsAST _first_1 = null;
            ColsAST root_1 = (ColsAST)adaptor.nil();_last = (ColsAST)input.LT(1);
            FACILITY12=(ColsAST)match(input,FACILITY,FOLLOW_FACILITY_in_facility_module2424); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            FACILITY12_tree = (ColsAST)adaptor.dupNode(FACILITY12);

            root_1 = (ColsAST)adaptor.becomeRoot(FACILITY12_tree, root_1);
            }


            match(input, Token.DOWN, null); if (state.failed) return retval;
            _last = (ColsAST)input.LT(1);
            pushFollow(FOLLOW_ident_in_facility_module2428);
            ps=ident();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, ps.getTree());
            // RBuilder.g:739:13: (dec2= short_facility_section (uses= uses_list )? | (uses= uses_list )? (dec3= facility_item_sequence )? )
            int alt37=2;
            int LA37_0 = input.LA(1);

            if ( (LA37_0==IDENTIFIER) ) {
                alt37=1;
            }
            else if ( (LA37_0==UP||LA37_0==DEFINITION||(LA37_0>=FACILITY && LA37_0<=FAC_INIT)||LA37_0==OPERATION||LA37_0==TYPE||(LA37_0>=USES && LA37_0<=VAR)||LA37_0==IMPLICIT_DEF||LA37_0==INDUCTIVE_DEF||LA37_0==RECURSIVE_OPERATION_PROCEDURE) ) {
                alt37=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 37, 0, input);

                throw nvae;
            }
            switch (alt37) {
                case 1 :
                    // RBuilder.g:739:17: dec2= short_facility_section (uses= uses_list )?
                    {
                    _last = (ColsAST)input.LT(1);
                    pushFollow(FOLLOW_short_facility_section_in_facility_module2448);
                    dec2=short_facility_section();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, dec2.getTree());
                    // RBuilder.g:739:45: (uses= uses_list )?
                    int alt34=2;
                    int LA34_0 = input.LA(1);

                    if ( (LA34_0==USES) ) {
                        alt34=1;
                    }
                    switch (alt34) {
                        case 1 :
                            // RBuilder.g:739:46: uses= uses_list
                            {
                            _last = (ColsAST)input.LT(1);
                            pushFollow(FOLLOW_uses_list_in_facility_module2453);
                            uses=uses_list();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) 
                            adaptor.addChild(root_1, uses.getTree());

                            if ( state.backtracking==0 ) {
                            }
                            }
                            break;

                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // RBuilder.g:740:17: (uses= uses_list )? (dec3= facility_item_sequence )?
                    {
                    // RBuilder.g:740:17: (uses= uses_list )?
                    int alt35=2;
                    int LA35_0 = input.LA(1);

                    if ( (LA35_0==USES) ) {
                        alt35=1;
                    }
                    switch (alt35) {
                        case 1 :
                            // RBuilder.g:740:18: uses= uses_list
                            {
                            _last = (ColsAST)input.LT(1);
                            pushFollow(FOLLOW_uses_list_in_facility_module2476);
                            uses=uses_list();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) 
                            adaptor.addChild(root_1, uses.getTree());

                            if ( state.backtracking==0 ) {
                            }
                            }
                            break;

                    }

                    // RBuilder.g:740:35: (dec3= facility_item_sequence )?
                    int alt36=2;
                    int LA36_0 = input.LA(1);

                    if ( (LA36_0==DEFINITION||(LA36_0>=FACILITY && LA36_0<=FAC_INIT)||LA36_0==OPERATION||LA36_0==TYPE||LA36_0==VAR||LA36_0==IMPLICIT_DEF||LA36_0==INDUCTIVE_DEF||LA36_0==RECURSIVE_OPERATION_PROCEDURE) ) {
                        alt36=1;
                    }
                    switch (alt36) {
                        case 1 :
                            // RBuilder.g:740:36: dec3= facility_item_sequence
                            {
                            _last = (ColsAST)input.LT(1);
                            pushFollow(FOLLOW_facility_item_sequence_in_facility_module2483);
                            dec3=facility_item_sequence();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) 
                            adaptor.addChild(root_1, dec3.getTree());

                            if ( state.backtracking==0 ) {
                            }
                            }
                            break;

                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }


            match(input, Token.UP, null); if (state.failed) return retval;adaptor.addChild(root_0, root_1);_last = _save_last_1;
            }

            if ( state.backtracking==0 ) {
                 if ((dec2!=null?dec2.dec:null) != null) {
                              fDec = new FacilityDec((ps!=null?ps.ps:null),
                                  (dec2!=null?dec2.dec:null).getConceptName(),
                                  (dec2!=null?dec2.dec:null).getConceptParams(),
                                  (dec2!=null?dec2.dec:null).getEnhancements(),
                                  (dec2!=null?dec2.dec:null).getBodyName(),
                                  null,
                                  (dec2!=null?dec2.dec:null).getBodyParams(),
                                  (dec2!=null?dec2.dec:null).getEnhancementBodies());
                              retval.dec = new ShortFacilityModuleDec((ps!=null?ps.ps:null), fDec, (uses!=null?uses.uses:null));
                          } else if ((dec3!=null?dec3.dec:null) != null) {
                              init = (dec3!=null?dec3.dec:null).getFacilityInit();
                              fin = (dec3!=null?dec3.dec:null).getFacilityFinal();
                              decs = (dec3!=null?dec3.dec:null).getDecs();
                              retval.dec = new FacilityModuleDec((ps!=null?ps.ps:null),
                                  (uses!=null?uses.uses:null), init, fin, decs);
                          } else {
                              assert false;
                          }
                      
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "facility_module"

    public static class short_facility_section_return extends TreeRuleReturnScope {
        public FacilityDec dec = null;
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "short_facility_section"
    // RBuilder.g:765:1: short_facility_section returns [FacilityDec dec = null] : cName= ident (cPars= module_argument_section )? (eItem= facility_enhancement )* bName= ident (bPars= module_argument_section )? (ebItem= facility_body_enhancement )* ;
    public final RBuilder.short_facility_section_return short_facility_section() throws RecognitionException {
        RBuilder.short_facility_section_return retval = new RBuilder.short_facility_section_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        ColsAST _first_0 = null;
        ColsAST _last = null;

        RBuilder.ident_return cName = null;

        RBuilder.module_argument_section_return cPars = null;

        RBuilder.facility_enhancement_return eItem = null;

        RBuilder.ident_return bName = null;

        RBuilder.module_argument_section_return bPars = null;

        RBuilder.facility_body_enhancement_return ebItem = null;



           PosSymbol ps = null; //dummy
            edu.clemson.cs.r2jt.collections.List<EnhancementItem> eItems
                = new edu.clemson.cs.r2jt.collections.List<EnhancementItem>("EnhancementItem");
            edu.clemson.cs.r2jt.collections.List<EnhancementBodyItem> ebItems
                = new edu.clemson.cs.r2jt.collections.List<EnhancementBodyItem>("EnhancementBodyItem");
            edu.clemson.cs.r2jt.collections.List<UsesItem> uses = new edu.clemson.cs.r2jt.collections.List<UsesItem>("UsesItem");
            edu.clemson.cs.r2jt.collections.List<ModuleArgumentItem> args = new edu.clemson.cs.r2jt.collections.List<ModuleArgumentItem>("ModuleArgumentItem");

        try {
            // RBuilder.g:774:5: (cName= ident (cPars= module_argument_section )? (eItem= facility_enhancement )* bName= ident (bPars= module_argument_section )? (ebItem= facility_body_enhancement )* )
            // RBuilder.g:774:9: cName= ident (cPars= module_argument_section )? (eItem= facility_enhancement )* bName= ident (bPars= module_argument_section )? (ebItem= facility_body_enhancement )*
            {
            root_0 = (ColsAST)adaptor.nil();

            _last = (ColsAST)input.LT(1);
            pushFollow(FOLLOW_ident_in_short_facility_section2549);
            cName=ident();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, cName.getTree());
            // RBuilder.g:774:21: (cPars= module_argument_section )?
            int alt38=2;
            int LA38_0 = input.LA(1);

            if ( (LA38_0==PARAMS) ) {
                alt38=1;
            }
            switch (alt38) {
                case 1 :
                    // RBuilder.g:774:22: cPars= module_argument_section
                    {
                    _last = (ColsAST)input.LT(1);
                    pushFollow(FOLLOW_module_argument_section_in_short_facility_section2554);
                    cPars=module_argument_section();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, cPars.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }

            // RBuilder.g:775:9: (eItem= facility_enhancement )*
            loop39:
            do {
                int alt39=2;
                int LA39_0 = input.LA(1);

                if ( (LA39_0==ENHANCED) ) {
                    alt39=1;
                }


                switch (alt39) {
            	case 1 :
            	    // RBuilder.g:775:10: eItem= facility_enhancement
            	    {
            	    _last = (ColsAST)input.LT(1);
            	    pushFollow(FOLLOW_facility_enhancement_in_short_facility_section2569);
            	    eItem=facility_enhancement();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) 
            	    adaptor.addChild(root_0, eItem.getTree());
            	    if ( state.backtracking==0 ) {
            	       eItems.add((eItem!=null?eItem.item:null)); 
            	    }

            	    if ( state.backtracking==0 ) {
            	    }
            	    }
            	    break;

            	default :
            	    break loop39;
                }
            } while (true);

            _last = (ColsAST)input.LT(1);
            pushFollow(FOLLOW_ident_in_short_facility_section2585);
            bName=ident();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, bName.getTree());
            // RBuilder.g:776:21: (bPars= module_argument_section )?
            int alt40=2;
            int LA40_0 = input.LA(1);

            if ( (LA40_0==PARAMS) ) {
                alt40=1;
            }
            switch (alt40) {
                case 1 :
                    // RBuilder.g:776:22: bPars= module_argument_section
                    {
                    _last = (ColsAST)input.LT(1);
                    pushFollow(FOLLOW_module_argument_section_in_short_facility_section2590);
                    bPars=module_argument_section();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, bPars.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }

            // RBuilder.g:777:9: (ebItem= facility_body_enhancement )*
            loop41:
            do {
                int alt41=2;
                int LA41_0 = input.LA(1);

                if ( (LA41_0==ENHANCED) ) {
                    alt41=1;
                }


                switch (alt41) {
            	case 1 :
            	    // RBuilder.g:777:10: ebItem= facility_body_enhancement
            	    {
            	    _last = (ColsAST)input.LT(1);
            	    pushFollow(FOLLOW_facility_body_enhancement_in_short_facility_section2605);
            	    ebItem=facility_body_enhancement();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) 
            	    adaptor.addChild(root_0, ebItem.getTree());
            	    if ( state.backtracking==0 ) {
            	       ebItems.add((ebItem!=null?ebItem.item:null)); 
            	    }

            	    if ( state.backtracking==0 ) {
            	    }
            	    }
            	    break;

            	default :
            	    break loop41;
                }
            } while (true);

            if ( state.backtracking==0 ) {
                 retval.dec = new FacilityDec(ps, (cName!=null?cName.ps:null),
                                                  (cPars!=null?cPars.args:null)!=null?(cPars!=null?cPars.args:null):args, eItems,
                                                  (bName!=null?bName.ps:null), null,
                                                  (bPars!=null?bPars.args:null)!=null?(bPars!=null?bPars.args:null):args, ebItems);
                      
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "short_facility_section"

    public static class facility_item_sequence_return extends TreeRuleReturnScope {
        public FacilityModuleDec dec = null;
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "facility_item_sequence"
    // RBuilder.g:789:1: facility_item_sequence returns [FacilityModuleDec dec = null] : (decs2= state_variable_declaration | init= module_facility_init_declaration | fin= module_facility_final_declaration | dec1= facility_type_declaration | dec2= operation_recursive_procedure_declaration | dec3= operation_procedure_declaration | dec4= definition_declaration | dec5= facility_declaration )+ ;
    public final RBuilder.facility_item_sequence_return facility_item_sequence() throws RecognitionException {
        RBuilder.facility_item_sequence_return retval = new RBuilder.facility_item_sequence_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        ColsAST _first_0 = null;
        ColsAST _last = null;

        RBuilder.state_variable_declaration_return decs2 = null;

        RBuilder.module_facility_init_declaration_return init = null;

        RBuilder.module_facility_final_declaration_return fin = null;

        RBuilder.facility_type_declaration_return dec1 = null;

        RBuilder.operation_recursive_procedure_declaration_return dec2 = null;

        RBuilder.operation_procedure_declaration_return dec3 = null;

        RBuilder.definition_declaration_return dec4 = null;

        RBuilder.facility_declaration_return dec5 = null;



           PosSymbol ps = null; //dummy
            edu.clemson.cs.r2jt.collections.List<UsesItem> uses = null; //dummy
            edu.clemson.cs.r2jt.collections.List<Dec> decs = new edu.clemson.cs.r2jt.collections.List<Dec>("Dec");

        try {
            // RBuilder.g:794:5: ( (decs2= state_variable_declaration | init= module_facility_init_declaration | fin= module_facility_final_declaration | dec1= facility_type_declaration | dec2= operation_recursive_procedure_declaration | dec3= operation_procedure_declaration | dec4= definition_declaration | dec5= facility_declaration )+ )
            // RBuilder.g:794:9: (decs2= state_variable_declaration | init= module_facility_init_declaration | fin= module_facility_final_declaration | dec1= facility_type_declaration | dec2= operation_recursive_procedure_declaration | dec3= operation_procedure_declaration | dec4= definition_declaration | dec5= facility_declaration )+
            {
            root_0 = (ColsAST)adaptor.nil();

            // RBuilder.g:794:9: (decs2= state_variable_declaration | init= module_facility_init_declaration | fin= module_facility_final_declaration | dec1= facility_type_declaration | dec2= operation_recursive_procedure_declaration | dec3= operation_procedure_declaration | dec4= definition_declaration | dec5= facility_declaration )+
            int cnt42=0;
            loop42:
            do {
                int alt42=9;
                alt42 = dfa42.predict(input);
                switch (alt42) {
            	case 1 :
            	    // RBuilder.g:794:13: decs2= state_variable_declaration
            	    {
            	    _last = (ColsAST)input.LT(1);
            	    pushFollow(FOLLOW_state_variable_declaration_in_facility_item_sequence2662);
            	    decs2=state_variable_declaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) 
            	    adaptor.addChild(root_0, decs2.getTree());
            	    if ( state.backtracking==0 ) {
            	       decs.addAll((decs2!=null?decs2.decs:null)); 
            	    }

            	    if ( state.backtracking==0 ) {
            	    }
            	    }
            	    break;
            	case 2 :
            	    // RBuilder.g:795:13: init= module_facility_init_declaration
            	    {
            	    _last = (ColsAST)input.LT(1);
            	    pushFollow(FOLLOW_module_facility_init_declaration_in_facility_item_sequence2680);
            	    init=module_facility_init_declaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) 
            	    adaptor.addChild(root_0, init.getTree());

            	    if ( state.backtracking==0 ) {
            	    }
            	    }
            	    break;
            	case 3 :
            	    // RBuilder.g:796:13: fin= module_facility_final_declaration
            	    {
            	    _last = (ColsAST)input.LT(1);
            	    pushFollow(FOLLOW_module_facility_final_declaration_in_facility_item_sequence2696);
            	    fin=module_facility_final_declaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) 
            	    adaptor.addChild(root_0, fin.getTree());

            	    if ( state.backtracking==0 ) {
            	    }
            	    }
            	    break;
            	case 4 :
            	    // RBuilder.g:797:13: dec1= facility_type_declaration
            	    {
            	    _last = (ColsAST)input.LT(1);
            	    pushFollow(FOLLOW_facility_type_declaration_in_facility_item_sequence2712);
            	    dec1=facility_type_declaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) 
            	    adaptor.addChild(root_0, dec1.getTree());
            	    if ( state.backtracking==0 ) {
            	       decs.add((dec1!=null?dec1.dec:null)); 
            	    }

            	    if ( state.backtracking==0 ) {
            	    }
            	    }
            	    break;
            	case 5 :
            	    // RBuilder.g:798:13: dec2= operation_recursive_procedure_declaration
            	    {
            	    _last = (ColsAST)input.LT(1);
            	    pushFollow(FOLLOW_operation_recursive_procedure_declaration_in_facility_item_sequence2730);
            	    dec2=operation_recursive_procedure_declaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) 
            	    adaptor.addChild(root_0, dec2.getTree());
            	    if ( state.backtracking==0 ) {
            	       decs.add((dec2!=null?dec2.dec:null)); 
            	    }

            	    if ( state.backtracking==0 ) {
            	    }
            	    }
            	    break;
            	case 6 :
            	    // RBuilder.g:799:13: dec3= operation_procedure_declaration
            	    {
            	    _last = (ColsAST)input.LT(1);
            	    pushFollow(FOLLOW_operation_procedure_declaration_in_facility_item_sequence2748);
            	    dec3=operation_procedure_declaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) 
            	    adaptor.addChild(root_0, dec3.getTree());
            	    if ( state.backtracking==0 ) {
            	       decs.add((dec3!=null?dec3.dec:null)); 
            	    }

            	    if ( state.backtracking==0 ) {
            	    }
            	    }
            	    break;
            	case 7 :
            	    // RBuilder.g:800:13: dec4= definition_declaration
            	    {
            	    _last = (ColsAST)input.LT(1);
            	    pushFollow(FOLLOW_definition_declaration_in_facility_item_sequence2766);
            	    dec4=definition_declaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) 
            	    adaptor.addChild(root_0, dec4.getTree());
            	    if ( state.backtracking==0 ) {
            	       decs.add((dec4!=null?dec4.dec:null)); 
            	    }

            	    if ( state.backtracking==0 ) {
            	    }
            	    }
            	    break;
            	case 8 :
            	    // RBuilder.g:801:13: dec5= facility_declaration
            	    {
            	    _last = (ColsAST)input.LT(1);
            	    pushFollow(FOLLOW_facility_declaration_in_facility_item_sequence2784);
            	    dec5=facility_declaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) 
            	    adaptor.addChild(root_0, dec5.getTree());
            	    if ( state.backtracking==0 ) {
            	       decs.add((dec5!=null?dec5.dec:null)); 
            	    }

            	    if ( state.backtracking==0 ) {
            	    }
            	    }
            	    break;

            	default :
            	    if ( cnt42 >= 1 ) break loop42;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(42, input);
                        throw eee;
                }
                cnt42++;
            } while (true);

            if ( state.backtracking==0 ) {
               retval.dec = new FacilityModuleDec(ps, uses, (init!=null?init.item:null), (fin!=null?fin.item:null), decs); 
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "facility_item_sequence"

    public static class module_formal_param_section_return extends TreeRuleReturnScope {
        public edu.clemson.cs.r2jt.collections.List<ModuleParameterDec> pars
                = new edu.clemson.cs.r2jt.collections.List<ModuleParameterDec>("ModuleParameterDec");
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "module_formal_param_section"
    // RBuilder.g:814:1: module_formal_param_section returns [edu.clemson.cs.r2jt.collections.List<ModuleParameterDec> pars\n = new edu.clemson.cs.r2jt.collections.List<ModuleParameterDec>(\"ModuleParameterDec\")] : ^( PARAMS (pars2= module_parameter )+ ) ;
    public final RBuilder.module_formal_param_section_return module_formal_param_section() throws RecognitionException {
        RBuilder.module_formal_param_section_return retval = new RBuilder.module_formal_param_section_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        ColsAST _first_0 = null;
        ColsAST _last = null;

        ColsAST PARAMS13=null;
        RBuilder.module_parameter_return pars2 = null;


        ColsAST PARAMS13_tree=null;



        try {
            // RBuilder.g:818:5: ( ^( PARAMS (pars2= module_parameter )+ ) )
            // RBuilder.g:818:9: ^( PARAMS (pars2= module_parameter )+ )
            {
            root_0 = (ColsAST)adaptor.nil();

            _last = (ColsAST)input.LT(1);
            {
            ColsAST _save_last_1 = _last;
            ColsAST _first_1 = null;
            ColsAST root_1 = (ColsAST)adaptor.nil();_last = (ColsAST)input.LT(1);
            PARAMS13=(ColsAST)match(input,PARAMS,FOLLOW_PARAMS_in_module_formal_param_section2843); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            PARAMS13_tree = (ColsAST)adaptor.dupNode(PARAMS13);

            root_1 = (ColsAST)adaptor.becomeRoot(PARAMS13_tree, root_1);
            }


            match(input, Token.DOWN, null); if (state.failed) return retval;
            // RBuilder.g:818:18: (pars2= module_parameter )+
            int cnt43=0;
            loop43:
            do {
                int alt43=2;
                int LA43_0 = input.LA(1);

                if ( (LA43_0==DEFINITION||LA43_0==EVALUATES||LA43_0==OPERATION||LA43_0==REALIZATION||LA43_0==TYPE) ) {
                    alt43=1;
                }


                switch (alt43) {
            	case 1 :
            	    // RBuilder.g:818:19: pars2= module_parameter
            	    {
            	    _last = (ColsAST)input.LT(1);
            	    pushFollow(FOLLOW_module_parameter_in_module_formal_param_section2848);
            	    pars2=module_parameter();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) 
            	    adaptor.addChild(root_1, pars2.getTree());
            	    if ( state.backtracking==0 ) {
            	       retval.pars.addAll((pars2!=null?pars2.pars:null)); 
            	    }

            	    if ( state.backtracking==0 ) {
            	    }
            	    }
            	    break;

            	default :
            	    if ( cnt43 >= 1 ) break loop43;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(43, input);
                        throw eee;
                }
                cnt43++;
            } while (true);


            match(input, Token.UP, null); if (state.failed) return retval;adaptor.addChild(root_0, root_1);_last = _save_last_1;
            }


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "module_formal_param_section"

    public static class module_parameter_return extends TreeRuleReturnScope {
        public edu.clemson.cs.r2jt.collections.List<ModuleParameterDec> pars
                = new edu.clemson.cs.r2jt.collections.List<ModuleParameterDec>("ModuleParameterDec");
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "module_parameter"
    // RBuilder.g:821:1: module_parameter returns [edu.clemson.cs.r2jt.collections.List<ModuleParameterDec> pars\n = new edu.clemson.cs.r2jt.collections.List<ModuleParameterDec>(\"ModuleParameterDec\")] : (par1= definition_parameter | pars2= constant_parameter | par2= concept_type_parameter | par3= operation_parameter | par4= concept_realization_parameter );
    public final RBuilder.module_parameter_return module_parameter() throws RecognitionException {
        RBuilder.module_parameter_return retval = new RBuilder.module_parameter_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        ColsAST _first_0 = null;
        ColsAST _last = null;

        RBuilder.definition_parameter_return par1 = null;

        RBuilder.constant_parameter_return pars2 = null;

        RBuilder.concept_type_parameter_return par2 = null;

        RBuilder.operation_parameter_return par3 = null;

        RBuilder.concept_realization_parameter_return par4 = null;





        try {
            // RBuilder.g:825:5: (par1= definition_parameter | pars2= constant_parameter | par2= concept_type_parameter | par3= operation_parameter | par4= concept_realization_parameter )
            int alt44=5;
            switch ( input.LA(1) ) {
            case DEFINITION:
                {
                alt44=1;
                }
                break;
            case EVALUATES:
                {
                alt44=2;
                }
                break;
            case TYPE:
                {
                alt44=3;
                }
                break;
            case OPERATION:
                {
                alt44=4;
                }
                break;
            case REALIZATION:
                {
                alt44=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 44, 0, input);

                throw nvae;
            }

            switch (alt44) {
                case 1 :
                    // RBuilder.g:825:9: par1= definition_parameter
                    {
                    root_0 = (ColsAST)adaptor.nil();

                    _last = (ColsAST)input.LT(1);
                    pushFollow(FOLLOW_definition_parameter_in_module_parameter2882);
                    par1=definition_parameter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, par1.getTree());
                    if ( state.backtracking==0 ) {
                       retval.pars.add(new ModuleParameterDec((par1!=null?par1.dec:null))); 
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // RBuilder.g:826:9: pars2= constant_parameter
                    {
                    root_0 = (ColsAST)adaptor.nil();

                    _last = (ColsAST)input.LT(1);
                    pushFollow(FOLLOW_constant_parameter_in_module_parameter2896);
                    pars2=constant_parameter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, pars2.getTree());
                    if ( state.backtracking==0 ) {
                       retval.pars.addAll((pars2!=null?pars2.pars:null)); 
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 3 :
                    // RBuilder.g:827:9: par2= concept_type_parameter
                    {
                    root_0 = (ColsAST)adaptor.nil();

                    _last = (ColsAST)input.LT(1);
                    pushFollow(FOLLOW_concept_type_parameter_in_module_parameter2910);
                    par2=concept_type_parameter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, par2.getTree());
                    if ( state.backtracking==0 ) {
                       retval.pars.add(new ModuleParameterDec((par2!=null?par2.dec:null))); 
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 4 :
                    // RBuilder.g:828:9: par3= operation_parameter
                    {
                    root_0 = (ColsAST)adaptor.nil();

                    _last = (ColsAST)input.LT(1);
                    pushFollow(FOLLOW_operation_parameter_in_module_parameter2924);
                    par3=operation_parameter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, par3.getTree());
                    if ( state.backtracking==0 ) {
                       retval.pars.add(new ModuleParameterDec((par3!=null?par3.dec1:null))); 
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 5 :
                    // RBuilder.g:829:9: par4= concept_realization_parameter
                    {
                    root_0 = (ColsAST)adaptor.nil();

                    _last = (ColsAST)input.LT(1);
                    pushFollow(FOLLOW_concept_realization_parameter_in_module_parameter2938);
                    par4=concept_realization_parameter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, par4.getTree());
                    if ( state.backtracking==0 ) {
                       retval.pars.add(new ModuleParameterDec((par4!=null?par4.dec:null))); 
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }
            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "module_parameter"

    public static class definition_parameter_return extends TreeRuleReturnScope {
        public DefinitionDec dec = null;
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "definition_parameter"
    // RBuilder.g:832:1: definition_parameter returns [DefinitionDec dec = null] : ^( DEFINITION dec2= definition_signature ) ;
    public final RBuilder.definition_parameter_return definition_parameter() throws RecognitionException {
        RBuilder.definition_parameter_return retval = new RBuilder.definition_parameter_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        ColsAST _first_0 = null;
        ColsAST _last = null;

        ColsAST DEFINITION14=null;
        RBuilder.definition_signature_return dec2 = null;


        ColsAST DEFINITION14_tree=null;

           boolean impl = false;
            PosSymbol ps = null;
            edu.clemson.cs.r2jt.collections.List<MathVarDec> pars = new edu.clemson.cs.r2jt.collections.List<MathVarDec>("VarDec");
            Ty ty = null;
            Exp base = null; //dummy
            Exp hyp = null; //dummy
            Exp def = null; //dummy

        try {
            // RBuilder.g:841:5: ( ^( DEFINITION dec2= definition_signature ) )
            // RBuilder.g:841:9: ^( DEFINITION dec2= definition_signature )
            {
            root_0 = (ColsAST)adaptor.nil();

            _last = (ColsAST)input.LT(1);
            {
            ColsAST _save_last_1 = _last;
            ColsAST _first_1 = null;
            ColsAST root_1 = (ColsAST)adaptor.nil();_last = (ColsAST)input.LT(1);
            DEFINITION14=(ColsAST)match(input,DEFINITION,FOLLOW_DEFINITION_in_definition_parameter2968); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            DEFINITION14_tree = (ColsAST)adaptor.dupNode(DEFINITION14);

            root_1 = (ColsAST)adaptor.becomeRoot(DEFINITION14_tree, root_1);
            }


            match(input, Token.DOWN, null); if (state.failed) return retval;
            _last = (ColsAST)input.LT(1);
            pushFollow(FOLLOW_definition_signature_in_definition_parameter2972);
            dec2=definition_signature();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, dec2.getTree());

            match(input, Token.UP, null); if (state.failed) return retval;adaptor.addChild(root_0, root_1);_last = _save_last_1;
            }

            if ( state.backtracking==0 ) {
                 ps = (dec2!=null?dec2.dec:null).getName();
                          pars = (dec2!=null?dec2.dec:null).getParameters();
                          ty = (dec2!=null?dec2.dec:null).getReturnTy();
                          retval.dec = new DefinitionDec(impl, ps,
                              pars, ty, base, hyp, def);
                      
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "definition_parameter"

    public static class constant_parameter_return extends TreeRuleReturnScope {
        public edu.clemson.cs.r2jt.collections.List<ModuleParameterDec> pars
                = new edu.clemson.cs.r2jt.collections.List<ModuleParameterDec>("ModuleParameterDec");
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "constant_parameter"
    // RBuilder.g:850:1: constant_parameter returns [edu.clemson.cs.r2jt.collections.List<ModuleParameterDec> pars\n = new edu.clemson.cs.r2jt.collections.List<ModuleParameterDec>(\"ModuleParameterDec\")] : ^( EVALUATES vars= variable_declaration_group ) ;
    public final RBuilder.constant_parameter_return constant_parameter() throws RecognitionException {
        RBuilder.constant_parameter_return retval = new RBuilder.constant_parameter_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        ColsAST _first_0 = null;
        ColsAST _last = null;

        ColsAST EVALUATES15=null;
        RBuilder.variable_declaration_group_return vars = null;


        ColsAST EVALUATES15_tree=null;



        try {
            // RBuilder.g:854:5: ( ^( EVALUATES vars= variable_declaration_group ) )
            // RBuilder.g:854:9: ^( EVALUATES vars= variable_declaration_group )
            {
            root_0 = (ColsAST)adaptor.nil();

            _last = (ColsAST)input.LT(1);
            {
            ColsAST _save_last_1 = _last;
            ColsAST _first_1 = null;
            ColsAST root_1 = (ColsAST)adaptor.nil();_last = (ColsAST)input.LT(1);
            EVALUATES15=(ColsAST)match(input,EVALUATES,FOLLOW_EVALUATES_in_constant_parameter3011); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            EVALUATES15_tree = (ColsAST)adaptor.dupNode(EVALUATES15);

            root_1 = (ColsAST)adaptor.becomeRoot(EVALUATES15_tree, root_1);
            }


            match(input, Token.DOWN, null); if (state.failed) return retval;
            _last = (ColsAST)input.LT(1);
            pushFollow(FOLLOW_variable_declaration_group_in_constant_parameter3015);
            vars=variable_declaration_group();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, vars.getTree());

            match(input, Token.UP, null); if (state.failed) return retval;adaptor.addChild(root_0, root_1);_last = _save_last_1;
            }

            if ( state.backtracking==0 ) {
                 Iterator<VarDec> i = (vars!=null?vars.decs:null).iterator();
                          while (i.hasNext()) {
                              VarDec var = i.next();
                              ConstantParamDec con = new ConstantParamDec(
                                  var.getName(),
                                  var.getTy());
                              retval.pars.add(new ModuleParameterDec(con));
                          }
                      
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "constant_parameter"

    public static class concept_type_parameter_return extends TreeRuleReturnScope {
        public ConceptTypeParamDec dec = null;
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "concept_type_parameter"
    // RBuilder.g:866:1: concept_type_parameter returns [ConceptTypeParamDec dec = null] : ^( TYPE ps= ident ) ;
    public final RBuilder.concept_type_parameter_return concept_type_parameter() throws RecognitionException {
        RBuilder.concept_type_parameter_return retval = new RBuilder.concept_type_parameter_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        ColsAST _first_0 = null;
        ColsAST _last = null;

        ColsAST TYPE16=null;
        RBuilder.ident_return ps = null;


        ColsAST TYPE16_tree=null;



        try {
            // RBuilder.g:869:5: ( ^( TYPE ps= ident ) )
            // RBuilder.g:869:9: ^( TYPE ps= ident )
            {
            root_0 = (ColsAST)adaptor.nil();

            _last = (ColsAST)input.LT(1);
            {
            ColsAST _save_last_1 = _last;
            ColsAST _first_1 = null;
            ColsAST root_1 = (ColsAST)adaptor.nil();_last = (ColsAST)input.LT(1);
            TYPE16=(ColsAST)match(input,TYPE,FOLLOW_TYPE_in_concept_type_parameter3054); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TYPE16_tree = (ColsAST)adaptor.dupNode(TYPE16);

            root_1 = (ColsAST)adaptor.becomeRoot(TYPE16_tree, root_1);
            }


            match(input, Token.DOWN, null); if (state.failed) return retval;
            _last = (ColsAST)input.LT(1);
            pushFollow(FOLLOW_ident_in_concept_type_parameter3058);
            ps=ident();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, ps.getTree());

            match(input, Token.UP, null); if (state.failed) return retval;adaptor.addChild(root_0, root_1);_last = _save_last_1;
            }

            if ( state.backtracking==0 ) {
               retval.dec = new ConceptTypeParamDec((ps!=null?ps.ps:null)); 
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "concept_type_parameter"

    public static class operation_parameter_return extends TreeRuleReturnScope {
        public OperationDec dec1 = null;
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "operation_parameter"
    // RBuilder.g:873:1: operation_parameter returns [OperationDec dec1 = null] : dec= operation_declaration ;
    public final RBuilder.operation_parameter_return operation_parameter() throws RecognitionException {
        RBuilder.operation_parameter_return retval = new RBuilder.operation_parameter_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        ColsAST _first_0 = null;
        ColsAST _last = null;

        RBuilder.operation_declaration_return dec = null;



        try {
            // RBuilder.g:874:5: (dec= operation_declaration )
            // RBuilder.g:874:9: dec= operation_declaration
            {
            root_0 = (ColsAST)adaptor.nil();

            _last = (ColsAST)input.LT(1);
            pushFollow(FOLLOW_operation_declaration_in_operation_parameter3094);
            dec=operation_declaration();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, dec.getTree());
            if ( state.backtracking==0 ) {
               retval.dec1 = (dec!=null?dec.dec:null); 
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "operation_parameter"

    public static class concept_realization_parameter_return extends TreeRuleReturnScope {
        public RealizationParamDec dec = null;
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "concept_realization_parameter"
    // RBuilder.g:878:1: concept_realization_parameter returns [RealizationParamDec dec = null] : ^( REALIZATION ps= ident cName= ident ) ;
    public final RBuilder.concept_realization_parameter_return concept_realization_parameter() throws RecognitionException {
        RBuilder.concept_realization_parameter_return retval = new RBuilder.concept_realization_parameter_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        ColsAST _first_0 = null;
        ColsAST _last = null;

        ColsAST REALIZATION17=null;
        RBuilder.ident_return ps = null;

        RBuilder.ident_return cName = null;


        ColsAST REALIZATION17_tree=null;



        try {
            // RBuilder.g:881:5: ( ^( REALIZATION ps= ident cName= ident ) )
            // RBuilder.g:881:9: ^( REALIZATION ps= ident cName= ident )
            {
            root_0 = (ColsAST)adaptor.nil();

            _last = (ColsAST)input.LT(1);
            {
            ColsAST _save_last_1 = _last;
            ColsAST _first_1 = null;
            ColsAST root_1 = (ColsAST)adaptor.nil();_last = (ColsAST)input.LT(1);
            REALIZATION17=(ColsAST)match(input,REALIZATION,FOLLOW_REALIZATION_in_concept_realization_parameter3132); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REALIZATION17_tree = (ColsAST)adaptor.dupNode(REALIZATION17);

            root_1 = (ColsAST)adaptor.becomeRoot(REALIZATION17_tree, root_1);
            }


            match(input, Token.DOWN, null); if (state.failed) return retval;
            _last = (ColsAST)input.LT(1);
            pushFollow(FOLLOW_ident_in_concept_realization_parameter3136);
            ps=ident();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, ps.getTree());
            _last = (ColsAST)input.LT(1);
            pushFollow(FOLLOW_ident_in_concept_realization_parameter3140);
            cName=ident();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, cName.getTree());

            match(input, Token.UP, null); if (state.failed) return retval;adaptor.addChild(root_0, root_1);_last = _save_last_1;
            }

            if ( state.backtracking==0 ) {
                 retval.dec = new RealizationParamDec((ps!=null?ps.ps:null), (cName!=null?cName.ps:null));
                      
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "concept_realization_parameter"

    public static class uses_list_return extends TreeRuleReturnScope {
        public edu.clemson.cs.r2jt.collections.List<UsesItem> uses = new edu.clemson.cs.r2jt.collections.List<UsesItem>("UsesItem");
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "uses_list"
    // RBuilder.g:890:1: uses_list returns [edu.clemson.cs.r2jt.collections.List<UsesItem> uses = new edu.clemson.cs.r2jt.collections.List<UsesItem>(\"UsesItem\")] : (uses2= uses_clause )+ ;
    public final RBuilder.uses_list_return uses_list() throws RecognitionException {
        RBuilder.uses_list_return retval = new RBuilder.uses_list_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        ColsAST _first_0 = null;
        ColsAST _last = null;

        RBuilder.uses_clause_return uses2 = null;





        try {
            // RBuilder.g:893:5: ( (uses2= uses_clause )+ )
            // RBuilder.g:893:9: (uses2= uses_clause )+
            {
            root_0 = (ColsAST)adaptor.nil();

            // RBuilder.g:893:9: (uses2= uses_clause )+
            int cnt45=0;
            loop45:
            do {
                int alt45=2;
                int LA45_0 = input.LA(1);

                if ( (LA45_0==USES) ) {
                    alt45=1;
                }


                switch (alt45) {
            	case 1 :
            	    // RBuilder.g:893:10: uses2= uses_clause
            	    {
            	    _last = (ColsAST)input.LT(1);
            	    pushFollow(FOLLOW_uses_clause_in_uses_list3185);
            	    uses2=uses_clause();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) 
            	    adaptor.addChild(root_0, uses2.getTree());
            	    if ( state.backtracking==0 ) {
            	       retval.uses.addAll((uses2!=null?uses2.uses:null)); 
            	    }

            	    if ( state.backtracking==0 ) {
            	    }
            	    }
            	    break;

            	default :
            	    if ( cnt45 >= 1 ) break loop45;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(45, input);
                        throw eee;
                }
                cnt45++;
            } while (true);


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "uses_list"

    public static class uses_clause_return extends TreeRuleReturnScope {
        public edu.clemson.cs.r2jt.collections.List<UsesItem> uses = new edu.clemson.cs.r2jt.collections.List<UsesItem>("UsesItem");
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "uses_clause"
    // RBuilder.g:896:1: uses_clause returns [edu.clemson.cs.r2jt.collections.List<UsesItem> uses = new edu.clemson.cs.r2jt.collections.List<UsesItem>(\"UsesItem\")] : ^( USES (ps= ident )+ ) ;
    public final RBuilder.uses_clause_return uses_clause() throws RecognitionException {
        RBuilder.uses_clause_return retval = new RBuilder.uses_clause_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        ColsAST _first_0 = null;
        ColsAST _last = null;

        ColsAST USES18=null;
        RBuilder.ident_return ps = null;


        ColsAST USES18_tree=null;



        try {
            // RBuilder.g:899:5: ( ^( USES (ps= ident )+ ) )
            // RBuilder.g:899:9: ^( USES (ps= ident )+ )
            {
            root_0 = (ColsAST)adaptor.nil();

            _last = (ColsAST)input.LT(1);
            {
            ColsAST _save_last_1 = _last;
            ColsAST _first_1 = null;
            ColsAST root_1 = (ColsAST)adaptor.nil();_last = (ColsAST)input.LT(1);
            USES18=(ColsAST)match(input,USES,FOLLOW_USES_in_uses_clause3217); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            USES18_tree = (ColsAST)adaptor.dupNode(USES18);

            root_1 = (ColsAST)adaptor.becomeRoot(USES18_tree, root_1);
            }


            match(input, Token.DOWN, null); if (state.failed) return retval;
            // RBuilder.g:899:16: (ps= ident )+
            int cnt46=0;
            loop46:
            do {
                int alt46=2;
                int LA46_0 = input.LA(1);

                if ( (LA46_0==IDENTIFIER) ) {
                    alt46=1;
                }


                switch (alt46) {
            	case 1 :
            	    // RBuilder.g:899:17: ps= ident
            	    {
            	    _last = (ColsAST)input.LT(1);
            	    pushFollow(FOLLOW_ident_in_uses_clause3222);
            	    ps=ident();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) 
            	    adaptor.addChild(root_1, ps.getTree());
            	    if ( state.backtracking==0 ) {
            	       retval.uses.add(new UsesItem((ps!=null?ps.ps:null))); 
            	    }

            	    if ( state.backtracking==0 ) {
            	    }
            	    }
            	    break;

            	default :
            	    if ( cnt46 >= 1 ) break loop46;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(46, input);
                        throw eee;
                }
                cnt46++;
            } while (true);


            match(input, Token.UP, null); if (state.failed) return retval;adaptor.addChild(root_0, root_1);_last = _save_last_1;
            }


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "uses_clause"

    public static class qualified_type_return extends TreeRuleReturnScope {
        public PosSymbol ps = null;
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "qualified_type"
    // RBuilder.g:910:1: qualified_type returns [PosSymbol ps = null] : ident DOT id= ident ;
    public final RBuilder.qualified_type_return qualified_type() throws RecognitionException {
        RBuilder.qualified_type_return retval = new RBuilder.qualified_type_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        ColsAST _first_0 = null;
        ColsAST _last = null;

        ColsAST DOT20=null;
        RBuilder.ident_return id = null;

        RBuilder.ident_return ident19 = null;


        ColsAST DOT20_tree=null;

        try {
            // RBuilder.g:911:5: ( ident DOT id= ident )
            // RBuilder.g:911:9: ident DOT id= ident
            {
            root_0 = (ColsAST)adaptor.nil();

            _last = (ColsAST)input.LT(1);
            pushFollow(FOLLOW_ident_in_qualified_type3264);
            ident19=ident();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, ident19.getTree());
            _last = (ColsAST)input.LT(1);
            DOT20=(ColsAST)match(input,DOT,FOLLOW_DOT_in_qualified_type3266); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            DOT20_tree = (ColsAST)adaptor.dupNode(DOT20);

            root_0 = (ColsAST)adaptor.becomeRoot(DOT20_tree, root_0);
            }
            _last = (ColsAST)input.LT(1);
            pushFollow(FOLLOW_ident_in_qualified_type3271);
            id=ident();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, id.getTree());
            if ( state.backtracking==0 ) {
              retval.ps = (id!=null?id.ps:null);
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "qualified_type"

    public static class confirm_math_type_declaration_return extends TreeRuleReturnScope {
        public MathVarDec mvd1 = null;
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "confirm_math_type_declaration"
    // RBuilder.g:914:1: confirm_math_type_declaration returns [MathVarDec mvd1 = null] : ^( CONFIRM_TYPE mvd= math_variable_declaration ) ;
    public final RBuilder.confirm_math_type_declaration_return confirm_math_type_declaration() throws RecognitionException {
        RBuilder.confirm_math_type_declaration_return retval = new RBuilder.confirm_math_type_declaration_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        ColsAST _first_0 = null;
        ColsAST _last = null;

        ColsAST CONFIRM_TYPE21=null;
        RBuilder.math_variable_declaration_return mvd = null;


        ColsAST CONFIRM_TYPE21_tree=null;

        try {
            // RBuilder.g:915:5: ( ^( CONFIRM_TYPE mvd= math_variable_declaration ) )
            // RBuilder.g:915:9: ^( CONFIRM_TYPE mvd= math_variable_declaration )
            {
            root_0 = (ColsAST)adaptor.nil();

            _last = (ColsAST)input.LT(1);
            {
            ColsAST _save_last_1 = _last;
            ColsAST _first_1 = null;
            ColsAST root_1 = (ColsAST)adaptor.nil();_last = (ColsAST)input.LT(1);
            CONFIRM_TYPE21=(ColsAST)match(input,CONFIRM_TYPE,FOLLOW_CONFIRM_TYPE_in_confirm_math_type_declaration3302); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            CONFIRM_TYPE21_tree = (ColsAST)adaptor.dupNode(CONFIRM_TYPE21);

            root_1 = (ColsAST)adaptor.becomeRoot(CONFIRM_TYPE21_tree, root_1);
            }


            match(input, Token.DOWN, null); if (state.failed) return retval;
            _last = (ColsAST)input.LT(1);
            pushFollow(FOLLOW_math_variable_declaration_in_confirm_math_type_declaration3306);
            mvd=math_variable_declaration();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, mvd.getTree());

            match(input, Token.UP, null); if (state.failed) return retval;adaptor.addChild(root_0, root_1);_last = _save_last_1;
            }

            if ( state.backtracking==0 ) {
               (mvd!=null?mvd.var:null).setConfirm(true); 
                        retval.mvd1 = (mvd!=null?mvd.var:null); 
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "confirm_math_type_declaration"

    public static class math_assertion_declaration_return extends TreeRuleReturnScope {
        public MathAssertionDec dec = null;
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "math_assertion_declaration"
    // RBuilder.g:925:1: math_assertion_declaration returns [MathAssertionDec dec = null] : ( ^( AXIOM (ps= math_theorem_ident )? exp= math_expression ) | ^( THEOREM (ps= math_theorem_ident )? exp= math_expression ) | ^( PROPERTY (ps= math_theorem_ident )? exp= math_expression ) | ^( LEMMA (ps= math_theorem_ident )? exp= math_expression ) | ^( COROLLARY (ps= math_theorem_ident )? exp= math_expression ) | COMMUTATIVITY (ps= math_theorem_ident )? exp= math_expression ) ;
    public final RBuilder.math_assertion_declaration_return math_assertion_declaration() throws RecognitionException {
        RBuilder.math_assertion_declaration_return retval = new RBuilder.math_assertion_declaration_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        ColsAST _first_0 = null;
        ColsAST _last = null;

        ColsAST AXIOM22=null;
        ColsAST THEOREM23=null;
        ColsAST PROPERTY24=null;
        ColsAST LEMMA25=null;
        ColsAST COROLLARY26=null;
        ColsAST COMMUTATIVITY27=null;
        RBuilder.math_theorem_ident_return ps = null;

        RBuilder.math_expression_return exp = null;


        ColsAST AXIOM22_tree=null;
        ColsAST THEOREM23_tree=null;
        ColsAST PROPERTY24_tree=null;
        ColsAST LEMMA25_tree=null;
        ColsAST COROLLARY26_tree=null;
        ColsAST COMMUTATIVITY27_tree=null;


            int kind = 0;
            MathAssertionDec.TheoremSubtype subtype = 
                MathAssertionDec.TheoremSubtype.NONE;

        try {
            // RBuilder.g:931:5: ( ( ^( AXIOM (ps= math_theorem_ident )? exp= math_expression ) | ^( THEOREM (ps= math_theorem_ident )? exp= math_expression ) | ^( PROPERTY (ps= math_theorem_ident )? exp= math_expression ) | ^( LEMMA (ps= math_theorem_ident )? exp= math_expression ) | ^( COROLLARY (ps= math_theorem_ident )? exp= math_expression ) | COMMUTATIVITY (ps= math_theorem_ident )? exp= math_expression ) )
            // RBuilder.g:931:9: ( ^( AXIOM (ps= math_theorem_ident )? exp= math_expression ) | ^( THEOREM (ps= math_theorem_ident )? exp= math_expression ) | ^( PROPERTY (ps= math_theorem_ident )? exp= math_expression ) | ^( LEMMA (ps= math_theorem_ident )? exp= math_expression ) | ^( COROLLARY (ps= math_theorem_ident )? exp= math_expression ) | COMMUTATIVITY (ps= math_theorem_ident )? exp= math_expression )
            {
            root_0 = (ColsAST)adaptor.nil();

            // RBuilder.g:931:9: ( ^( AXIOM (ps= math_theorem_ident )? exp= math_expression ) | ^( THEOREM (ps= math_theorem_ident )? exp= math_expression ) | ^( PROPERTY (ps= math_theorem_ident )? exp= math_expression ) | ^( LEMMA (ps= math_theorem_ident )? exp= math_expression ) | ^( COROLLARY (ps= math_theorem_ident )? exp= math_expression ) | COMMUTATIVITY (ps= math_theorem_ident )? exp= math_expression )
            int alt53=6;
            switch ( input.LA(1) ) {
            case AXIOM:
                {
                alt53=1;
                }
                break;
            case THEOREM:
                {
                alt53=2;
                }
                break;
            case PROPERTY:
                {
                alt53=3;
                }
                break;
            case LEMMA:
                {
                alt53=4;
                }
                break;
            case COROLLARY:
                {
                alt53=5;
                }
                break;
            case COMMUTATIVITY:
                {
                alt53=6;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 53, 0, input);

                throw nvae;
            }

            switch (alt53) {
                case 1 :
                    // RBuilder.g:931:13: ^( AXIOM (ps= math_theorem_ident )? exp= math_expression )
                    {
                    _last = (ColsAST)input.LT(1);
                    {
                    ColsAST _save_last_1 = _last;
                    ColsAST _first_1 = null;
                    ColsAST root_1 = (ColsAST)adaptor.nil();_last = (ColsAST)input.LT(1);
                    AXIOM22=(ColsAST)match(input,AXIOM,FOLLOW_AXIOM_in_math_assertion_declaration3362); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    AXIOM22_tree = (ColsAST)adaptor.dupNode(AXIOM22);

                    root_1 = (ColsAST)adaptor.becomeRoot(AXIOM22_tree, root_1);
                    }


                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    // RBuilder.g:931:21: (ps= math_theorem_ident )?
                    int alt47=2;
                    int LA47_0 = input.LA(1);

                    if ( (LA47_0==IDENTIFIER||LA47_0==NUMERIC_LITERAL) ) {
                        alt47=1;
                    }
                    switch (alt47) {
                        case 1 :
                            // RBuilder.g:931:22: ps= math_theorem_ident
                            {
                            _last = (ColsAST)input.LT(1);
                            pushFollow(FOLLOW_math_theorem_ident_in_math_assertion_declaration3367);
                            ps=math_theorem_ident();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) 
                            adaptor.addChild(root_1, ps.getTree());

                            if ( state.backtracking==0 ) {
                            }
                            }
                            break;

                    }

                    _last = (ColsAST)input.LT(1);
                    pushFollow(FOLLOW_math_expression_in_math_assertion_declaration3373);
                    exp=math_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, exp.getTree());

                    match(input, Token.UP, null); if (state.failed) return retval;adaptor.addChild(root_0, root_1);_last = _save_last_1;
                    }

                    if ( state.backtracking==0 ) {
                       kind = MathAssertionDec.AXIOM; 
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // RBuilder.g:933:13: ^( THEOREM (ps= math_theorem_ident )? exp= math_expression )
                    {
                    _last = (ColsAST)input.LT(1);
                    {
                    ColsAST _save_last_1 = _last;
                    ColsAST _first_1 = null;
                    ColsAST root_1 = (ColsAST)adaptor.nil();_last = (ColsAST)input.LT(1);
                    THEOREM23=(ColsAST)match(input,THEOREM,FOLLOW_THEOREM_in_math_assertion_declaration3403); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    THEOREM23_tree = (ColsAST)adaptor.dupNode(THEOREM23);

                    root_1 = (ColsAST)adaptor.becomeRoot(THEOREM23_tree, root_1);
                    }


                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    // RBuilder.g:933:23: (ps= math_theorem_ident )?
                    int alt48=2;
                    int LA48_0 = input.LA(1);

                    if ( (LA48_0==IDENTIFIER||LA48_0==NUMERIC_LITERAL) ) {
                        alt48=1;
                    }
                    switch (alt48) {
                        case 1 :
                            // RBuilder.g:933:24: ps= math_theorem_ident
                            {
                            _last = (ColsAST)input.LT(1);
                            pushFollow(FOLLOW_math_theorem_ident_in_math_assertion_declaration3408);
                            ps=math_theorem_ident();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) 
                            adaptor.addChild(root_1, ps.getTree());

                            if ( state.backtracking==0 ) {
                            }
                            }
                            break;

                    }

                    _last = (ColsAST)input.LT(1);
                    pushFollow(FOLLOW_math_expression_in_math_assertion_declaration3414);
                    exp=math_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, exp.getTree());

                    match(input, Token.UP, null); if (state.failed) return retval;adaptor.addChild(root_0, root_1);_last = _save_last_1;
                    }

                    if ( state.backtracking==0 ) {
                       kind = MathAssertionDec.THEOREM; 
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 3 :
                    // RBuilder.g:935:13: ^( PROPERTY (ps= math_theorem_ident )? exp= math_expression )
                    {
                    _last = (ColsAST)input.LT(1);
                    {
                    ColsAST _save_last_1 = _last;
                    ColsAST _first_1 = null;
                    ColsAST root_1 = (ColsAST)adaptor.nil();_last = (ColsAST)input.LT(1);
                    PROPERTY24=(ColsAST)match(input,PROPERTY,FOLLOW_PROPERTY_in_math_assertion_declaration3444); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PROPERTY24_tree = (ColsAST)adaptor.dupNode(PROPERTY24);

                    root_1 = (ColsAST)adaptor.becomeRoot(PROPERTY24_tree, root_1);
                    }


                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    // RBuilder.g:935:24: (ps= math_theorem_ident )?
                    int alt49=2;
                    int LA49_0 = input.LA(1);

                    if ( (LA49_0==IDENTIFIER||LA49_0==NUMERIC_LITERAL) ) {
                        alt49=1;
                    }
                    switch (alt49) {
                        case 1 :
                            // RBuilder.g:935:25: ps= math_theorem_ident
                            {
                            _last = (ColsAST)input.LT(1);
                            pushFollow(FOLLOW_math_theorem_ident_in_math_assertion_declaration3449);
                            ps=math_theorem_ident();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) 
                            adaptor.addChild(root_1, ps.getTree());

                            if ( state.backtracking==0 ) {
                            }
                            }
                            break;

                    }

                    _last = (ColsAST)input.LT(1);
                    pushFollow(FOLLOW_math_expression_in_math_assertion_declaration3455);
                    exp=math_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, exp.getTree());

                    match(input, Token.UP, null); if (state.failed) return retval;adaptor.addChild(root_0, root_1);_last = _save_last_1;
                    }

                    if ( state.backtracking==0 ) {
                       kind = MathAssertionDec.PROPERTY; 
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 4 :
                    // RBuilder.g:937:13: ^( LEMMA (ps= math_theorem_ident )? exp= math_expression )
                    {
                    _last = (ColsAST)input.LT(1);
                    {
                    ColsAST _save_last_1 = _last;
                    ColsAST _first_1 = null;
                    ColsAST root_1 = (ColsAST)adaptor.nil();_last = (ColsAST)input.LT(1);
                    LEMMA25=(ColsAST)match(input,LEMMA,FOLLOW_LEMMA_in_math_assertion_declaration3485); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LEMMA25_tree = (ColsAST)adaptor.dupNode(LEMMA25);

                    root_1 = (ColsAST)adaptor.becomeRoot(LEMMA25_tree, root_1);
                    }


                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    // RBuilder.g:937:21: (ps= math_theorem_ident )?
                    int alt50=2;
                    int LA50_0 = input.LA(1);

                    if ( (LA50_0==IDENTIFIER||LA50_0==NUMERIC_LITERAL) ) {
                        alt50=1;
                    }
                    switch (alt50) {
                        case 1 :
                            // RBuilder.g:937:22: ps= math_theorem_ident
                            {
                            _last = (ColsAST)input.LT(1);
                            pushFollow(FOLLOW_math_theorem_ident_in_math_assertion_declaration3490);
                            ps=math_theorem_ident();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) 
                            adaptor.addChild(root_1, ps.getTree());

                            if ( state.backtracking==0 ) {
                            }
                            }
                            break;

                    }

                    _last = (ColsAST)input.LT(1);
                    pushFollow(FOLLOW_math_expression_in_math_assertion_declaration3496);
                    exp=math_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, exp.getTree());

                    match(input, Token.UP, null); if (state.failed) return retval;adaptor.addChild(root_0, root_1);_last = _save_last_1;
                    }

                    if ( state.backtracking==0 ) {
                       kind = MathAssertionDec.LEMMA; 
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 5 :
                    // RBuilder.g:939:13: ^( COROLLARY (ps= math_theorem_ident )? exp= math_expression )
                    {
                    _last = (ColsAST)input.LT(1);
                    {
                    ColsAST _save_last_1 = _last;
                    ColsAST _first_1 = null;
                    ColsAST root_1 = (ColsAST)adaptor.nil();_last = (ColsAST)input.LT(1);
                    COROLLARY26=(ColsAST)match(input,COROLLARY,FOLLOW_COROLLARY_in_math_assertion_declaration3526); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COROLLARY26_tree = (ColsAST)adaptor.dupNode(COROLLARY26);

                    root_1 = (ColsAST)adaptor.becomeRoot(COROLLARY26_tree, root_1);
                    }


                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    // RBuilder.g:939:25: (ps= math_theorem_ident )?
                    int alt51=2;
                    int LA51_0 = input.LA(1);

                    if ( (LA51_0==IDENTIFIER||LA51_0==NUMERIC_LITERAL) ) {
                        alt51=1;
                    }
                    switch (alt51) {
                        case 1 :
                            // RBuilder.g:939:26: ps= math_theorem_ident
                            {
                            _last = (ColsAST)input.LT(1);
                            pushFollow(FOLLOW_math_theorem_ident_in_math_assertion_declaration3531);
                            ps=math_theorem_ident();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) 
                            adaptor.addChild(root_1, ps.getTree());

                            if ( state.backtracking==0 ) {
                            }
                            }
                            break;

                    }

                    _last = (ColsAST)input.LT(1);
                    pushFollow(FOLLOW_math_expression_in_math_assertion_declaration3537);
                    exp=math_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, exp.getTree());

                    match(input, Token.UP, null); if (state.failed) return retval;adaptor.addChild(root_0, root_1);_last = _save_last_1;
                    }

                    if ( state.backtracking==0 ) {
                       kind = MathAssertionDec.COROLLARY; 
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 6 :
                    // RBuilder.g:941:13: COMMUTATIVITY (ps= math_theorem_ident )? exp= math_expression
                    {
                    _last = (ColsAST)input.LT(1);
                    COMMUTATIVITY27=(ColsAST)match(input,COMMUTATIVITY,FOLLOW_COMMUTATIVITY_in_math_assertion_declaration3566); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COMMUTATIVITY27_tree = (ColsAST)adaptor.dupNode(COMMUTATIVITY27);

                    adaptor.addChild(root_0, COMMUTATIVITY27_tree);
                    }
                    // RBuilder.g:941:27: (ps= math_theorem_ident )?
                    int alt52=2;
                    int LA52_0 = input.LA(1);

                    if ( (LA52_0==IDENTIFIER||LA52_0==NUMERIC_LITERAL) ) {
                        alt52=1;
                    }
                    switch (alt52) {
                        case 1 :
                            // RBuilder.g:941:28: ps= math_theorem_ident
                            {
                            _last = (ColsAST)input.LT(1);
                            pushFollow(FOLLOW_math_theorem_ident_in_math_assertion_declaration3571);
                            ps=math_theorem_ident();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) 
                            adaptor.addChild(root_0, ps.getTree());

                            if ( state.backtracking==0 ) {
                            }
                            }
                            break;

                    }

                    _last = (ColsAST)input.LT(1);
                    pushFollow(FOLLOW_math_expression_in_math_assertion_declaration3577);
                    exp=math_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, exp.getTree());
                    if ( state.backtracking==0 ) {
                       kind = MathAssertionDec.THEOREM;
                                    subtype = MathAssertionDec.TheoremSubtype.COMMUTATIVITY; 
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }

            if ( state.backtracking==0 ) {
               if (kind == MathAssertionDec.THEOREM) {
                            retval.dec = new MathAssertionDec((ps!=null?ps.ps:null), (exp!=null?exp.exp:null), subtype);
                        }
                        else {
                            retval.dec = new MathAssertionDec((ps!=null?ps.ps:null), kind, (exp!=null?exp.exp:null));
                        }
                      
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "math_assertion_declaration"

    public static class constraint_clause_return extends TreeRuleReturnScope {
        public Exp exp = null;
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "constraint_clause"
    // RBuilder.g:954:1: constraint_clause returns [Exp exp = null] : ^( CONSTRAINT exp1= math_expression ) ;
    public final RBuilder.constraint_clause_return constraint_clause() throws RecognitionException {
        RBuilder.constraint_clause_return retval = new RBuilder.constraint_clause_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        ColsAST _first_0 = null;
        ColsAST _last = null;

        ColsAST CONSTRAINT28=null;
        RBuilder.math_expression_return exp1 = null;


        ColsAST CONSTRAINT28_tree=null;

        try {
            // RBuilder.g:955:5: ( ^( CONSTRAINT exp1= math_expression ) )
            // RBuilder.g:955:9: ^( CONSTRAINT exp1= math_expression )
            {
            root_0 = (ColsAST)adaptor.nil();

            _last = (ColsAST)input.LT(1);
            {
            ColsAST _save_last_1 = _last;
            ColsAST _first_1 = null;
            ColsAST root_1 = (ColsAST)adaptor.nil();_last = (ColsAST)input.LT(1);
            CONSTRAINT28=(ColsAST)match(input,CONSTRAINT,FOLLOW_CONSTRAINT_in_constraint_clause3635); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            CONSTRAINT28_tree = (ColsAST)adaptor.dupNode(CONSTRAINT28);

            root_1 = (ColsAST)adaptor.becomeRoot(CONSTRAINT28_tree, root_1);
            }


            match(input, Token.DOWN, null); if (state.failed) return retval;
            _last = (ColsAST)input.LT(1);
            pushFollow(FOLLOW_math_expression_in_constraint_clause3639);
            exp1=math_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, exp1.getTree());

            match(input, Token.UP, null); if (state.failed) return retval;adaptor.addChild(root_0, root_1);_last = _save_last_1;
            }

            if ( state.backtracking==0 ) {
               retval.exp = (exp1!=null?exp1.exp:null); 
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "constraint_clause"

    public static class correspondence_clause_return extends TreeRuleReturnScope {
        public Exp exp = null;
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "correspondence_clause"
    // RBuilder.g:959:1: correspondence_clause returns [Exp exp = null] : ^( CORR exp1= math_expression ) ;
    public final RBuilder.correspondence_clause_return correspondence_clause() throws RecognitionException {
        RBuilder.correspondence_clause_return retval = new RBuilder.correspondence_clause_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        ColsAST _first_0 = null;
        ColsAST _last = null;

        ColsAST CORR29=null;
        RBuilder.math_expression_return exp1 = null;


        ColsAST CORR29_tree=null;

        try {
            // RBuilder.g:960:5: ( ^( CORR exp1= math_expression ) )
            // RBuilder.g:960:9: ^( CORR exp1= math_expression )
            {
            root_0 = (ColsAST)adaptor.nil();

            _last = (ColsAST)input.LT(1);
            {
            ColsAST _save_last_1 = _last;
            ColsAST _first_1 = null;
            ColsAST root_1 = (ColsAST)adaptor.nil();_last = (ColsAST)input.LT(1);
            CORR29=(ColsAST)match(input,CORR,FOLLOW_CORR_in_correspondence_clause3674); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            CORR29_tree = (ColsAST)adaptor.dupNode(CORR29);

            root_1 = (ColsAST)adaptor.becomeRoot(CORR29_tree, root_1);
            }


            match(input, Token.DOWN, null); if (state.failed) return retval;
            _last = (ColsAST)input.LT(1);
            pushFollow(FOLLOW_math_expression_in_correspondence_clause3678);
            exp1=math_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, exp1.getTree());

            match(input, Token.UP, null); if (state.failed) return retval;adaptor.addChild(root_0, root_1);_last = _save_last_1;
            }

            if ( state.backtracking==0 ) {
               retval.exp = (exp1!=null?exp1.exp:null); 
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "correspondence_clause"

    public static class convention_clause_return extends TreeRuleReturnScope {
        public Exp exp = null;
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "convention_clause"
    // RBuilder.g:964:1: convention_clause returns [Exp exp = null] : ^( CONVENTION exp1= math_expression ) ;
    public final RBuilder.convention_clause_return convention_clause() throws RecognitionException {
        RBuilder.convention_clause_return retval = new RBuilder.convention_clause_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        ColsAST _first_0 = null;
        ColsAST _last = null;

        ColsAST CONVENTION30=null;
        RBuilder.math_expression_return exp1 = null;


        ColsAST CONVENTION30_tree=null;

        try {
            // RBuilder.g:965:5: ( ^( CONVENTION exp1= math_expression ) )
            // RBuilder.g:965:9: ^( CONVENTION exp1= math_expression )
            {
            root_0 = (ColsAST)adaptor.nil();

            _last = (ColsAST)input.LT(1);
            {
            ColsAST _save_last_1 = _last;
            ColsAST _first_1 = null;
            ColsAST root_1 = (ColsAST)adaptor.nil();_last = (ColsAST)input.LT(1);
            CONVENTION30=(ColsAST)match(input,CONVENTION,FOLLOW_CONVENTION_in_convention_clause3713); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            CONVENTION30_tree = (ColsAST)adaptor.dupNode(CONVENTION30);

            root_1 = (ColsAST)adaptor.becomeRoot(CONVENTION30_tree, root_1);
            }


            match(input, Token.DOWN, null); if (state.failed) return retval;
            _last = (ColsAST)input.LT(1);
            pushFollow(FOLLOW_math_expression_in_convention_clause3717);
            exp1=math_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, exp1.getTree());

            match(input, Token.UP, null); if (state.failed) return retval;adaptor.addChild(root_0, root_1);_last = _save_last_1;
            }

            if ( state.backtracking==0 ) {
               retval.exp = (exp1!=null?exp1.exp:null); 
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "convention_clause"

    public static class type_theorem_declaration_return extends TreeRuleReturnScope {
        public TypeTheoremDec dec = new TypeTheoremDec();
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "type_theorem_declaration"
    // RBuilder.g:969:1: type_theorem_declaration returns [TypeTheoremDec dec = new TypeTheoremDec()] : ^( TYPE (ps= math_theorem_ident )? COLON ( FOR quant_vars= math_variable_declaration_group )+ assertion= implies_expression asserted_ty= math_type_expression ) ;
    public final RBuilder.type_theorem_declaration_return type_theorem_declaration() throws RecognitionException {
        RBuilder.type_theorem_declaration_return retval = new RBuilder.type_theorem_declaration_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        ColsAST _first_0 = null;
        ColsAST _last = null;

        ColsAST TYPE31=null;
        ColsAST COLON32=null;
        ColsAST FOR33=null;
        RBuilder.math_theorem_ident_return ps = null;

        RBuilder.math_variable_declaration_group_return quant_vars = null;

        RBuilder.implies_expression_return assertion = null;

        RBuilder.math_type_expression_return asserted_ty = null;


        ColsAST TYPE31_tree=null;
        ColsAST COLON32_tree=null;
        ColsAST FOR33_tree=null;

        try {
            // RBuilder.g:970:5: ( ^( TYPE (ps= math_theorem_ident )? COLON ( FOR quant_vars= math_variable_declaration_group )+ assertion= implies_expression asserted_ty= math_type_expression ) )
            // RBuilder.g:970:9: ^( TYPE (ps= math_theorem_ident )? COLON ( FOR quant_vars= math_variable_declaration_group )+ assertion= implies_expression asserted_ty= math_type_expression )
            {
            root_0 = (ColsAST)adaptor.nil();

            _last = (ColsAST)input.LT(1);
            {
            ColsAST _save_last_1 = _last;
            ColsAST _first_1 = null;
            ColsAST root_1 = (ColsAST)adaptor.nil();_last = (ColsAST)input.LT(1);
            TYPE31=(ColsAST)match(input,TYPE,FOLLOW_TYPE_in_type_theorem_declaration3756); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TYPE31_tree = (ColsAST)adaptor.dupNode(TYPE31);

            root_1 = (ColsAST)adaptor.becomeRoot(TYPE31_tree, root_1);
            }


            match(input, Token.DOWN, null); if (state.failed) return retval;
            // RBuilder.g:970:16: (ps= math_theorem_ident )?
            int alt54=2;
            int LA54_0 = input.LA(1);

            if ( (LA54_0==IDENTIFIER||LA54_0==NUMERIC_LITERAL) ) {
                alt54=1;
            }
            switch (alt54) {
                case 1 :
                    // RBuilder.g:970:17: ps= math_theorem_ident
                    {
                    _last = (ColsAST)input.LT(1);
                    pushFollow(FOLLOW_math_theorem_ident_in_type_theorem_declaration3761);
                    ps=math_theorem_ident();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, ps.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }

            _last = (ColsAST)input.LT(1);
            COLON32=(ColsAST)match(input,COLON,FOLLOW_COLON_in_type_theorem_declaration3765); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            COLON32_tree = (ColsAST)adaptor.dupNode(COLON32);

            adaptor.addChild(root_1, COLON32_tree);
            }
            // RBuilder.g:971:10: ( FOR quant_vars= math_variable_declaration_group )+
            int cnt55=0;
            loop55:
            do {
                int alt55=2;
                int LA55_0 = input.LA(1);

                if ( (LA55_0==FOR) ) {
                    alt55=1;
                }


                switch (alt55) {
            	case 1 :
            	    // RBuilder.g:971:11: FOR quant_vars= math_variable_declaration_group
            	    {
            	    _last = (ColsAST)input.LT(1);
            	    FOR33=(ColsAST)match(input,FOR,FOLLOW_FOR_in_type_theorem_declaration3777); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    FOR33_tree = (ColsAST)adaptor.dupNode(FOR33);

            	    adaptor.addChild(root_1, FOR33_tree);
            	    }
            	    _last = (ColsAST)input.LT(1);
            	    pushFollow(FOLLOW_math_variable_declaration_group_in_type_theorem_declaration3781);
            	    quant_vars=math_variable_declaration_group();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) 
            	    adaptor.addChild(root_1, quant_vars.getTree());
            	    if ( state.backtracking==0 ) {
            	       retval.dec.addVarDecGroup((quant_vars!=null?quant_vars.vars:null)); 
            	    }

            	    if ( state.backtracking==0 ) {
            	    }
            	    }
            	    break;

            	default :
            	    if ( cnt55 >= 1 ) break loop55;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(55, input);
                        throw eee;
                }
                cnt55++;
            } while (true);

            _last = (ColsAST)input.LT(1);
            pushFollow(FOLLOW_implies_expression_in_type_theorem_declaration3798);
            assertion=implies_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, assertion.getTree());
            _last = (ColsAST)input.LT(1);
            pushFollow(FOLLOW_math_type_expression_in_type_theorem_declaration3811);
            asserted_ty=math_type_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, asserted_ty.getTree());

            match(input, Token.UP, null); if (state.failed) return retval;adaptor.addChild(root_0, root_1);_last = _save_last_1;
            }

            if ( state.backtracking==0 ) {

                        retval.dec.setName((ps!=null?ps.ps:null));
                        retval.dec.setAssertion((assertion!=null?assertion.exp:null));
                        retval.dec.setAssertedType((asserted_ty!=null?asserted_ty.ty:null));
                      
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "type_theorem_declaration"

    public static class concept_state_variable_declaration_return extends TreeRuleReturnScope {
        public edu.clemson.cs.r2jt.collections.List<Dec> decs
                = new edu.clemson.cs.r2jt.collections.List<Dec>("MathVarDec");
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "concept_state_variable_declaration"
    // RBuilder.g:986:1: concept_state_variable_declaration returns [edu.clemson.cs.r2jt.collections.List<Dec> decs\n = new edu.clemson.cs.r2jt.collections.List<Dec>(\"MathVarDec\")] : ^( VAR decs2= math_variable_declaration_group ) ;
    public final RBuilder.concept_state_variable_declaration_return concept_state_variable_declaration() throws RecognitionException {
        RBuilder.concept_state_variable_declaration_return retval = new RBuilder.concept_state_variable_declaration_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        ColsAST _first_0 = null;
        ColsAST _last = null;

        ColsAST VAR34=null;
        RBuilder.math_variable_declaration_group_return decs2 = null;


        ColsAST VAR34_tree=null;

        try {
            // RBuilder.g:988:5: ( ^( VAR decs2= math_variable_declaration_group ) )
            // RBuilder.g:988:9: ^( VAR decs2= math_variable_declaration_group )
            {
            root_0 = (ColsAST)adaptor.nil();

            _last = (ColsAST)input.LT(1);
            {
            ColsAST _save_last_1 = _last;
            ColsAST _first_1 = null;
            ColsAST root_1 = (ColsAST)adaptor.nil();_last = (ColsAST)input.LT(1);
            VAR34=(ColsAST)match(input,VAR,FOLLOW_VAR_in_concept_state_variable_declaration3860); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            VAR34_tree = (ColsAST)adaptor.dupNode(VAR34);

            root_1 = (ColsAST)adaptor.becomeRoot(VAR34_tree, root_1);
            }


            match(input, Token.DOWN, null); if (state.failed) return retval;
            _last = (ColsAST)input.LT(1);
            pushFollow(FOLLOW_math_variable_declaration_group_in_concept_state_variable_declaration3864);
            decs2=math_variable_declaration_group();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, decs2.getTree());

            match(input, Token.UP, null); if (state.failed) return retval;adaptor.addChild(root_0, root_1);_last = _save_last_1;
            }

            if ( state.backtracking==0 ) {
                 Iterator<MathVarDec> i = (decs2!=null?decs2.vars:null).iterator();
                          while (i.hasNext()) {
                              MathVarDec dec = i.next();
                              retval.decs.add(dec);
                          }
                      
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "concept_state_variable_declaration"

    public static class state_variable_declaration_return extends TreeRuleReturnScope {
        public edu.clemson.cs.r2jt.collections.List<Dec> decs
                = new edu.clemson.cs.r2jt.collections.List<Dec>("Dec");
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "state_variable_declaration"
    // RBuilder.g:998:1: state_variable_declaration returns [edu.clemson.cs.r2jt.collections.List<Dec> decs\n = new edu.clemson.cs.r2jt.collections.List<Dec>(\"Dec\")] : ^( VAR decs2= variable_declaration_group ) ;
    public final RBuilder.state_variable_declaration_return state_variable_declaration() throws RecognitionException {
        RBuilder.state_variable_declaration_return retval = new RBuilder.state_variable_declaration_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        ColsAST _first_0 = null;
        ColsAST _last = null;

        ColsAST VAR35=null;
        RBuilder.variable_declaration_group_return decs2 = null;


        ColsAST VAR35_tree=null;

        try {
            // RBuilder.g:1000:5: ( ^( VAR decs2= variable_declaration_group ) )
            // RBuilder.g:1000:9: ^( VAR decs2= variable_declaration_group )
            {
            root_0 = (ColsAST)adaptor.nil();

            _last = (ColsAST)input.LT(1);
            {
            ColsAST _save_last_1 = _last;
            ColsAST _first_1 = null;
            ColsAST root_1 = (ColsAST)adaptor.nil();_last = (ColsAST)input.LT(1);
            VAR35=(ColsAST)match(input,VAR,FOLLOW_VAR_in_state_variable_declaration3908); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            VAR35_tree = (ColsAST)adaptor.dupNode(VAR35);

            root_1 = (ColsAST)adaptor.becomeRoot(VAR35_tree, root_1);
            }


            match(input, Token.DOWN, null); if (state.failed) return retval;
            _last = (ColsAST)input.LT(1);
            pushFollow(FOLLOW_variable_declaration_group_in_state_variable_declaration3912);
            decs2=variable_declaration_group();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, decs2.getTree());

            match(input, Token.UP, null); if (state.failed) return retval;adaptor.addChild(root_0, root_1);_last = _save_last_1;
            }

            if ( state.backtracking==0 ) {
                 Iterator<VarDec> i = (decs2!=null?decs2.decs:null).iterator();
                          while (i.hasNext()) {
                              VarDec dec = i.next();
                              retval.decs.add(dec);
                          }
                      
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "state_variable_declaration"

    public static class state_aux_variable_declaration_return extends TreeRuleReturnScope {
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "state_aux_variable_declaration"
    // RBuilder.g:1010:1: state_aux_variable_declaration : AUX_VAR variable_declaration_group ;
    public final RBuilder.state_aux_variable_declaration_return state_aux_variable_declaration() throws RecognitionException {
        RBuilder.state_aux_variable_declaration_return retval = new RBuilder.state_aux_variable_declaration_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        ColsAST _first_0 = null;
        ColsAST _last = null;

        ColsAST AUX_VAR36=null;
        RBuilder.variable_declaration_group_return variable_declaration_group37 = null;


        ColsAST AUX_VAR36_tree=null;

        try {
            // RBuilder.g:1011:5: ( AUX_VAR variable_declaration_group )
            // RBuilder.g:1011:9: AUX_VAR variable_declaration_group
            {
            root_0 = (ColsAST)adaptor.nil();

            _last = (ColsAST)input.LT(1);
            AUX_VAR36=(ColsAST)match(input,AUX_VAR,FOLLOW_AUX_VAR_in_state_aux_variable_declaration3955); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            AUX_VAR36_tree = (ColsAST)adaptor.dupNode(AUX_VAR36);

            adaptor.addChild(root_0, AUX_VAR36_tree);
            }
            _last = (ColsAST)input.LT(1);
            pushFollow(FOLLOW_variable_declaration_group_in_state_aux_variable_declaration3957);
            variable_declaration_group37=variable_declaration_group();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, variable_declaration_group37.getTree());

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "state_aux_variable_declaration"

    public static class facility_declaration_return extends TreeRuleReturnScope {
        public FacilityDec dec = null;
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "facility_declaration"
    // RBuilder.g:1018:1: facility_declaration returns [FacilityDec dec = null] : ^( FACILITY ps= ident cName= ident (cPars= module_argument_section )? (eItem= facility_enhancement )* REALIZED bName= ident ( WITH_PROFILE prof= ident )? (bPars= module_argument_section )? (ebItem= facility_body_enhancement )* ) ;
    public final RBuilder.facility_declaration_return facility_declaration() throws RecognitionException {
        RBuilder.facility_declaration_return retval = new RBuilder.facility_declaration_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        ColsAST _first_0 = null;
        ColsAST _last = null;

        ColsAST FACILITY38=null;
        ColsAST REALIZED39=null;
        ColsAST WITH_PROFILE40=null;
        RBuilder.ident_return ps = null;

        RBuilder.ident_return cName = null;

        RBuilder.module_argument_section_return cPars = null;

        RBuilder.facility_enhancement_return eItem = null;

        RBuilder.ident_return bName = null;

        RBuilder.ident_return prof = null;

        RBuilder.module_argument_section_return bPars = null;

        RBuilder.facility_body_enhancement_return ebItem = null;


        ColsAST FACILITY38_tree=null;
        ColsAST REALIZED39_tree=null;
        ColsAST WITH_PROFILE40_tree=null;


            edu.clemson.cs.r2jt.collections.List<EnhancementItem> eItems
                = new edu.clemson.cs.r2jt.collections.List<EnhancementItem>("EnhancementItem");
            edu.clemson.cs.r2jt.collections.List<EnhancementBodyItem> ebItems
                = new edu.clemson.cs.r2jt.collections.List<EnhancementBodyItem>("ModuleArgumentItem");
            edu.clemson.cs.r2jt.collections.List<ModuleArgumentItem> args = new edu.clemson.cs.r2jt.collections.List<ModuleArgumentItem>("ModuleArgumentItem");

        try {
            // RBuilder.g:1026:5: ( ^( FACILITY ps= ident cName= ident (cPars= module_argument_section )? (eItem= facility_enhancement )* REALIZED bName= ident ( WITH_PROFILE prof= ident )? (bPars= module_argument_section )? (ebItem= facility_body_enhancement )* ) )
            // RBuilder.g:1026:9: ^( FACILITY ps= ident cName= ident (cPars= module_argument_section )? (eItem= facility_enhancement )* REALIZED bName= ident ( WITH_PROFILE prof= ident )? (bPars= module_argument_section )? (ebItem= facility_body_enhancement )* )
            {
            root_0 = (ColsAST)adaptor.nil();

            _last = (ColsAST)input.LT(1);
            {
            ColsAST _save_last_1 = _last;
            ColsAST _first_1 = null;
            ColsAST root_1 = (ColsAST)adaptor.nil();_last = (ColsAST)input.LT(1);
            FACILITY38=(ColsAST)match(input,FACILITY,FOLLOW_FACILITY_in_facility_declaration3991); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            FACILITY38_tree = (ColsAST)adaptor.dupNode(FACILITY38);

            root_1 = (ColsAST)adaptor.becomeRoot(FACILITY38_tree, root_1);
            }


            match(input, Token.DOWN, null); if (state.failed) return retval;
            _last = (ColsAST)input.LT(1);
            pushFollow(FOLLOW_ident_in_facility_declaration3995);
            ps=ident();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, ps.getTree());
            _last = (ColsAST)input.LT(1);
            pushFollow(FOLLOW_ident_in_facility_declaration4011);
            cName=ident();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, cName.getTree());
            // RBuilder.g:1027:25: (cPars= module_argument_section )?
            int alt56=2;
            int LA56_0 = input.LA(1);

            if ( (LA56_0==PARAMS) ) {
                alt56=1;
            }
            switch (alt56) {
                case 1 :
                    // RBuilder.g:1027:26: cPars= module_argument_section
                    {
                    _last = (ColsAST)input.LT(1);
                    pushFollow(FOLLOW_module_argument_section_in_facility_declaration4016);
                    cPars=module_argument_section();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, cPars.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }

            // RBuilder.g:1028:13: (eItem= facility_enhancement )*
            loop57:
            do {
                int alt57=2;
                int LA57_0 = input.LA(1);

                if ( (LA57_0==ENHANCED) ) {
                    alt57=1;
                }


                switch (alt57) {
            	case 1 :
            	    // RBuilder.g:1028:14: eItem= facility_enhancement
            	    {
            	    _last = (ColsAST)input.LT(1);
            	    pushFollow(FOLLOW_facility_enhancement_in_facility_declaration4035);
            	    eItem=facility_enhancement();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) 
            	    adaptor.addChild(root_1, eItem.getTree());
            	    if ( state.backtracking==0 ) {
            	       eItems.add((eItem!=null?eItem.item:null)); 
            	    }

            	    if ( state.backtracking==0 ) {
            	    }
            	    }
            	    break;

            	default :
            	    break loop57;
                }
            } while (true);

            _last = (ColsAST)input.LT(1);
            REALIZED39=(ColsAST)match(input,REALIZED,FOLLOW_REALIZED_in_facility_declaration4053); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REALIZED39_tree = (ColsAST)adaptor.dupNode(REALIZED39);

            adaptor.addChild(root_1, REALIZED39_tree);
            }
            _last = (ColsAST)input.LT(1);
            pushFollow(FOLLOW_ident_in_facility_declaration4057);
            bName=ident();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, bName.getTree());
            // RBuilder.g:1029:34: ( WITH_PROFILE prof= ident )?
            int alt58=2;
            int LA58_0 = input.LA(1);

            if ( (LA58_0==WITH_PROFILE) ) {
                alt58=1;
            }
            switch (alt58) {
                case 1 :
                    // RBuilder.g:1029:35: WITH_PROFILE prof= ident
                    {
                    _last = (ColsAST)input.LT(1);
                    WITH_PROFILE40=(ColsAST)match(input,WITH_PROFILE,FOLLOW_WITH_PROFILE_in_facility_declaration4060); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    WITH_PROFILE40_tree = (ColsAST)adaptor.dupNode(WITH_PROFILE40);

                    adaptor.addChild(root_1, WITH_PROFILE40_tree);
                    }
                    _last = (ColsAST)input.LT(1);
                    pushFollow(FOLLOW_ident_in_facility_declaration4064);
                    prof=ident();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, prof.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }

            // RBuilder.g:1029:61: (bPars= module_argument_section )?
            int alt59=2;
            int LA59_0 = input.LA(1);

            if ( (LA59_0==PARAMS) ) {
                alt59=1;
            }
            switch (alt59) {
                case 1 :
                    // RBuilder.g:1029:62: bPars= module_argument_section
                    {
                    _last = (ColsAST)input.LT(1);
                    pushFollow(FOLLOW_module_argument_section_in_facility_declaration4071);
                    bPars=module_argument_section();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, bPars.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }

            // RBuilder.g:1030:13: (ebItem= facility_body_enhancement )*
            loop60:
            do {
                int alt60=2;
                int LA60_0 = input.LA(1);

                if ( (LA60_0==ENHANCED) ) {
                    alt60=1;
                }


                switch (alt60) {
            	case 1 :
            	    // RBuilder.g:1030:14: ebItem= facility_body_enhancement
            	    {
            	    _last = (ColsAST)input.LT(1);
            	    pushFollow(FOLLOW_facility_body_enhancement_in_facility_declaration4090);
            	    ebItem=facility_body_enhancement();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) 
            	    adaptor.addChild(root_1, ebItem.getTree());
            	    if ( state.backtracking==0 ) {
            	       ebItems.add((ebItem!=null?ebItem.item:null)); 
            	    }

            	    if ( state.backtracking==0 ) {
            	    }
            	    }
            	    break;

            	default :
            	    break loop60;
                }
            } while (true);


            match(input, Token.UP, null); if (state.failed) return retval;adaptor.addChild(root_0, root_1);_last = _save_last_1;
            }

            if ( state.backtracking==0 ) {
                 retval.dec = new FacilityDec((ps!=null?ps.ps:null), (cName!=null?cName.ps:null),
                                                  (cPars!=null?cPars.args:null)!=null?(cPars!=null?cPars.args:null):args,
                                                  eItems, (bName!=null?bName.ps:null), (prof!=null?prof.ps:null),
                                                  (bPars!=null?bPars.args:null)!=null?(bPars!=null?bPars.args:null):args,
                                                  ebItems);
                      
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "facility_declaration"

    public static class facility_enhancement_return extends TreeRuleReturnScope {
        public EnhancementItem item = null;
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "facility_enhancement"
    // RBuilder.g:1040:1: facility_enhancement returns [EnhancementItem item = null] : ^( ENHANCED ps= ident (args2= module_argument_section )? ) ;
    public final RBuilder.facility_enhancement_return facility_enhancement() throws RecognitionException {
        RBuilder.facility_enhancement_return retval = new RBuilder.facility_enhancement_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        ColsAST _first_0 = null;
        ColsAST _last = null;

        ColsAST ENHANCED41=null;
        RBuilder.ident_return ps = null;

        RBuilder.module_argument_section_return args2 = null;


        ColsAST ENHANCED41_tree=null;


            edu.clemson.cs.r2jt.collections.List<ModuleArgumentItem> args = new edu.clemson.cs.r2jt.collections.List<ModuleArgumentItem>("ModuleArgumentItem");

        try {
            // RBuilder.g:1044:5: ( ^( ENHANCED ps= ident (args2= module_argument_section )? ) )
            // RBuilder.g:1044:9: ^( ENHANCED ps= ident (args2= module_argument_section )? )
            {
            root_0 = (ColsAST)adaptor.nil();

            _last = (ColsAST)input.LT(1);
            {
            ColsAST _save_last_1 = _last;
            ColsAST _first_1 = null;
            ColsAST root_1 = (ColsAST)adaptor.nil();_last = (ColsAST)input.LT(1);
            ENHANCED41=(ColsAST)match(input,ENHANCED,FOLLOW_ENHANCED_in_facility_enhancement4142); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ENHANCED41_tree = (ColsAST)adaptor.dupNode(ENHANCED41);

            root_1 = (ColsAST)adaptor.becomeRoot(ENHANCED41_tree, root_1);
            }


            match(input, Token.DOWN, null); if (state.failed) return retval;
            _last = (ColsAST)input.LT(1);
            pushFollow(FOLLOW_ident_in_facility_enhancement4146);
            ps=ident();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, ps.getTree());
            // RBuilder.g:1044:29: (args2= module_argument_section )?
            int alt61=2;
            int LA61_0 = input.LA(1);

            if ( (LA61_0==PARAMS) ) {
                alt61=1;
            }
            switch (alt61) {
                case 1 :
                    // RBuilder.g:1044:30: args2= module_argument_section
                    {
                    _last = (ColsAST)input.LT(1);
                    pushFollow(FOLLOW_module_argument_section_in_facility_enhancement4151);
                    args2=module_argument_section();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, args2.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }


            match(input, Token.UP, null); if (state.failed) return retval;adaptor.addChild(root_0, root_1);_last = _save_last_1;
            }

            if ( state.backtracking==0 ) {
               retval.item = new EnhancementItem((ps!=null?ps.ps:null), (args2!=null?args2.args:null)!=null?(args2!=null?args2.args:null):args); 
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "facility_enhancement"

    public static class facility_body_enhancement_return extends TreeRuleReturnScope {
        public EnhancementBodyItem item = null;
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "facility_body_enhancement"
    // RBuilder.g:1048:1: facility_body_enhancement returns [EnhancementBodyItem item = null] : ^( ENHANCED ps= ident (args2= module_argument_section )? REALIZED bName= ident ( WITH_PROFILE prof= ident )? (bArgs= module_argument_section )? ) ;
    public final RBuilder.facility_body_enhancement_return facility_body_enhancement() throws RecognitionException {
        RBuilder.facility_body_enhancement_return retval = new RBuilder.facility_body_enhancement_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        ColsAST _first_0 = null;
        ColsAST _last = null;

        ColsAST ENHANCED42=null;
        ColsAST REALIZED43=null;
        ColsAST WITH_PROFILE44=null;
        RBuilder.ident_return ps = null;

        RBuilder.module_argument_section_return args2 = null;

        RBuilder.ident_return bName = null;

        RBuilder.ident_return prof = null;

        RBuilder.module_argument_section_return bArgs = null;


        ColsAST ENHANCED42_tree=null;
        ColsAST REALIZED43_tree=null;
        ColsAST WITH_PROFILE44_tree=null;


            edu.clemson.cs.r2jt.collections.List<ModuleArgumentItem> args = new edu.clemson.cs.r2jt.collections.List<ModuleArgumentItem>("ModuleArgumentItem");

        try {
            // RBuilder.g:1052:5: ( ^( ENHANCED ps= ident (args2= module_argument_section )? REALIZED bName= ident ( WITH_PROFILE prof= ident )? (bArgs= module_argument_section )? ) )
            // RBuilder.g:1052:9: ^( ENHANCED ps= ident (args2= module_argument_section )? REALIZED bName= ident ( WITH_PROFILE prof= ident )? (bArgs= module_argument_section )? )
            {
            root_0 = (ColsAST)adaptor.nil();

            _last = (ColsAST)input.LT(1);
            {
            ColsAST _save_last_1 = _last;
            ColsAST _first_1 = null;
            ColsAST root_1 = (ColsAST)adaptor.nil();_last = (ColsAST)input.LT(1);
            ENHANCED42=(ColsAST)match(input,ENHANCED,FOLLOW_ENHANCED_in_facility_body_enhancement4194); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ENHANCED42_tree = (ColsAST)adaptor.dupNode(ENHANCED42);

            root_1 = (ColsAST)adaptor.becomeRoot(ENHANCED42_tree, root_1);
            }


            match(input, Token.DOWN, null); if (state.failed) return retval;
            _last = (ColsAST)input.LT(1);
            pushFollow(FOLLOW_ident_in_facility_body_enhancement4198);
            ps=ident();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, ps.getTree());
            // RBuilder.g:1052:31: (args2= module_argument_section )?
            int alt62=2;
            int LA62_0 = input.LA(1);

            if ( (LA62_0==PARAMS) ) {
                alt62=1;
            }
            switch (alt62) {
                case 1 :
                    // RBuilder.g:1052:32: args2= module_argument_section
                    {
                    _last = (ColsAST)input.LT(1);
                    pushFollow(FOLLOW_module_argument_section_in_facility_body_enhancement4203);
                    args2=module_argument_section();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, args2.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }

            _last = (ColsAST)input.LT(1);
            REALIZED43=(ColsAST)match(input,REALIZED,FOLLOW_REALIZED_in_facility_body_enhancement4219); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REALIZED43_tree = (ColsAST)adaptor.dupNode(REALIZED43);

            adaptor.addChild(root_1, REALIZED43_tree);
            }
            _last = (ColsAST)input.LT(1);
            pushFollow(FOLLOW_ident_in_facility_body_enhancement4223);
            bName=ident();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, bName.getTree());
            // RBuilder.g:1053:34: ( WITH_PROFILE prof= ident )?
            int alt63=2;
            int LA63_0 = input.LA(1);

            if ( (LA63_0==WITH_PROFILE) ) {
                alt63=1;
            }
            switch (alt63) {
                case 1 :
                    // RBuilder.g:1053:35: WITH_PROFILE prof= ident
                    {
                    _last = (ColsAST)input.LT(1);
                    WITH_PROFILE44=(ColsAST)match(input,WITH_PROFILE,FOLLOW_WITH_PROFILE_in_facility_body_enhancement4226); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    WITH_PROFILE44_tree = (ColsAST)adaptor.dupNode(WITH_PROFILE44);

                    adaptor.addChild(root_1, WITH_PROFILE44_tree);
                    }
                    _last = (ColsAST)input.LT(1);
                    pushFollow(FOLLOW_ident_in_facility_body_enhancement4230);
                    prof=ident();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, prof.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }

            // RBuilder.g:1053:61: (bArgs= module_argument_section )?
            int alt64=2;
            int LA64_0 = input.LA(1);

            if ( (LA64_0==PARAMS) ) {
                alt64=1;
            }
            switch (alt64) {
                case 1 :
                    // RBuilder.g:1053:62: bArgs= module_argument_section
                    {
                    _last = (ColsAST)input.LT(1);
                    pushFollow(FOLLOW_module_argument_section_in_facility_body_enhancement4237);
                    bArgs=module_argument_section();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, bArgs.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }


            match(input, Token.UP, null); if (state.failed) return retval;adaptor.addChild(root_0, root_1);_last = _save_last_1;
            }

            if ( state.backtracking==0 ) {
               retval.item = new EnhancementBodyItem((ps!=null?ps.ps:null),
                                                        (args2!=null?args2.args:null)!=null?(args2!=null?args2.args:null):args,
                                                        (bName!=null?bName.ps:null), (prof!=null?prof.ps:null),
                                                        (bArgs!=null?bArgs.args:null)!=null?(bArgs!=null?bArgs.args:null):args); 
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "facility_body_enhancement"

    public static class module_argument_section_return extends TreeRuleReturnScope {
        public edu.clemson.cs.r2jt.collections.List<ModuleArgumentItem> args
                = new edu.clemson.cs.r2jt.collections.List<ModuleArgumentItem>("ModuleArgumentItem");
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "module_argument_section"
    // RBuilder.g:1061:1: module_argument_section returns [edu.clemson.cs.r2jt.collections.List<ModuleArgumentItem> args\n = new edu.clemson.cs.r2jt.collections.List<ModuleArgumentItem>(\"ModuleArgumentItem\")] : ^( PARAMS (arg= module_argument )+ ) ;
    public final RBuilder.module_argument_section_return module_argument_section() throws RecognitionException {
        RBuilder.module_argument_section_return retval = new RBuilder.module_argument_section_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        ColsAST _first_0 = null;
        ColsAST _last = null;

        ColsAST PARAMS45=null;
        RBuilder.module_argument_return arg = null;


        ColsAST PARAMS45_tree=null;



        try {
            // RBuilder.g:1065:5: ( ^( PARAMS (arg= module_argument )+ ) )
            // RBuilder.g:1065:9: ^( PARAMS (arg= module_argument )+ )
            {
            root_0 = (ColsAST)adaptor.nil();

            _last = (ColsAST)input.LT(1);
            {
            ColsAST _save_last_1 = _last;
            ColsAST _first_1 = null;
            ColsAST root_1 = (ColsAST)adaptor.nil();_last = (ColsAST)input.LT(1);
            PARAMS45=(ColsAST)match(input,PARAMS,FOLLOW_PARAMS_in_module_argument_section4287); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            PARAMS45_tree = (ColsAST)adaptor.dupNode(PARAMS45);

            root_1 = (ColsAST)adaptor.becomeRoot(PARAMS45_tree, root_1);
            }


            match(input, Token.DOWN, null); if (state.failed) return retval;
            // RBuilder.g:1065:18: (arg= module_argument )+
            int cnt65=0;
            loop65:
            do {
                int alt65=2;
                int LA65_0 = input.LA(1);

                if ( (LA65_0==IDENTIFIER||LA65_0==EXPR) ) {
                    alt65=1;
                }


                switch (alt65) {
            	case 1 :
            	    // RBuilder.g:1065:19: arg= module_argument
            	    {
            	    _last = (ColsAST)input.LT(1);
            	    pushFollow(FOLLOW_module_argument_in_module_argument_section4292);
            	    arg=module_argument();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) 
            	    adaptor.addChild(root_1, arg.getTree());
            	    if ( state.backtracking==0 ) {
            	       retval.args.add((arg!=null?arg.arg:null)); 
            	    }

            	    if ( state.backtracking==0 ) {
            	    }
            	    }
            	    break;

            	default :
            	    if ( cnt65 >= 1 ) break loop65;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(65, input);
                        throw eee;
                }
                cnt65++;
            } while (true);


            match(input, Token.UP, null); if (state.failed) return retval;adaptor.addChild(root_0, root_1);_last = _save_last_1;
            }


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "module_argument_section"

    public static class module_argument_return extends TreeRuleReturnScope {
        public ModuleArgumentItem arg = null;
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "module_argument"
    // RBuilder.g:1068:1: module_argument returns [ModuleArgumentItem arg = null] : (qid= qualified_ident | exp= program_expression ) ;
    public final RBuilder.module_argument_return module_argument() throws RecognitionException {
        RBuilder.module_argument_return retval = new RBuilder.module_argument_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        ColsAST _first_0 = null;
        ColsAST _last = null;

        RBuilder.qualified_ident_return qid = null;

        RBuilder.program_expression_return exp = null;




            PosSymbol qual = null;
            PosSymbol name = null;

        try {
            // RBuilder.g:1073:5: ( (qid= qualified_ident | exp= program_expression ) )
            // RBuilder.g:1073:9: (qid= qualified_ident | exp= program_expression )
            {
            root_0 = (ColsAST)adaptor.nil();

            // RBuilder.g:1073:9: (qid= qualified_ident | exp= program_expression )
            int alt66=2;
            int LA66_0 = input.LA(1);

            if ( (LA66_0==IDENTIFIER) ) {
                alt66=1;
            }
            else if ( (LA66_0==EXPR) ) {
                alt66=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 66, 0, input);

                throw nvae;
            }
            switch (alt66) {
                case 1 :
                    // RBuilder.g:1073:13: qid= qualified_ident
                    {
                    _last = (ColsAST)input.LT(1);
                    pushFollow(FOLLOW_qualified_ident_in_module_argument4330);
                    qid=qualified_ident();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, qid.getTree());
                    if ( state.backtracking==0 ) {
                         qual = (qid!=null?qid.exp:null).getQualifier();
                                      name = (qid!=null?qid.exp:null).getName();
                                  
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // RBuilder.g:1077:13: exp= program_expression
                    {
                    _last = (ColsAST)input.LT(1);
                    pushFollow(FOLLOW_program_expression_in_module_argument4361);
                    exp=program_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, exp.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }

            if ( state.backtracking==0 ) {
               retval.arg = new ModuleArgumentItem(qual, name, (exp!=null?exp.exp:null)); 
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "module_argument"

    public static class defines_declaration_return extends TreeRuleReturnScope {
        public DefinitionDec dec = null;
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "defines_declaration"
    // RBuilder.g:1086:1: defines_declaration returns [DefinitionDec dec = null] : ^( DEFINES dec2= definition_signature ) ;
    public final RBuilder.defines_declaration_return defines_declaration() throws RecognitionException {
        RBuilder.defines_declaration_return retval = new RBuilder.defines_declaration_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        ColsAST _first_0 = null;
        ColsAST _last = null;

        ColsAST DEFINES46=null;
        RBuilder.definition_signature_return dec2 = null;


        ColsAST DEFINES46_tree=null;


            boolean impl = false;
            PosSymbol ps = null; //dummy
            edu.clemson.cs.r2jt.collections.List<MathVarDec> pars = null; //dummy
            Ty ty = null; //dummy
            Exp base = null; //dummy
            Exp hyp = null; //dummy
            Exp exp = null;

        try {
            // RBuilder.g:1096:5: ( ^( DEFINES dec2= definition_signature ) )
            // RBuilder.g:1096:9: ^( DEFINES dec2= definition_signature )
            {
            root_0 = (ColsAST)adaptor.nil();

            _last = (ColsAST)input.LT(1);
            {
            ColsAST _save_last_1 = _last;
            ColsAST _first_1 = null;
            ColsAST root_1 = (ColsAST)adaptor.nil();_last = (ColsAST)input.LT(1);
            DEFINES46=(ColsAST)match(input,DEFINES,FOLLOW_DEFINES_in_defines_declaration4413); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            DEFINES46_tree = (ColsAST)adaptor.dupNode(DEFINES46);

            root_1 = (ColsAST)adaptor.becomeRoot(DEFINES46_tree, root_1);
            }


            match(input, Token.DOWN, null); if (state.failed) return retval;
            _last = (ColsAST)input.LT(1);
            pushFollow(FOLLOW_definition_signature_in_defines_declaration4417);
            dec2=definition_signature();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, dec2.getTree());

            match(input, Token.UP, null); if (state.failed) return retval;adaptor.addChild(root_0, root_1);_last = _save_last_1;
            }

            if ( state.backtracking==0 ) {
                 ps = (dec2!=null?dec2.dec:null).getName();
                          pars = (dec2!=null?dec2.dec:null).getParameters();
                          ty = (dec2!=null?dec2.dec:null).getReturnTy();
                          retval.dec = new DefinitionDec(impl, ps, pars, ty, base, hyp, exp);
                      
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "defines_declaration"

    public static class definition_declaration_return extends TreeRuleReturnScope {
        public DefinitionDec dec = null;
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "definition_declaration"
    // RBuilder.g:1104:1: definition_declaration returns [DefinitionDec dec = null] : (dec1= implicit_definition_declaration | dec2= inductive_definition_declaration | dec3= standard_definition_declaration );
    public final RBuilder.definition_declaration_return definition_declaration() throws RecognitionException {
        RBuilder.definition_declaration_return retval = new RBuilder.definition_declaration_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        ColsAST _first_0 = null;
        ColsAST _last = null;

        RBuilder.implicit_definition_declaration_return dec1 = null;

        RBuilder.inductive_definition_declaration_return dec2 = null;

        RBuilder.standard_definition_declaration_return dec3 = null;



        try {
            // RBuilder.g:1105:5: (dec1= implicit_definition_declaration | dec2= inductive_definition_declaration | dec3= standard_definition_declaration )
            int alt67=3;
            switch ( input.LA(1) ) {
            case IMPLICIT_DEF:
                {
                alt67=1;
                }
                break;
            case INDUCTIVE_DEF:
                {
                alt67=2;
                }
                break;
            case DEFINITION:
                {
                alt67=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 67, 0, input);

                throw nvae;
            }

            switch (alt67) {
                case 1 :
                    // RBuilder.g:1105:9: dec1= implicit_definition_declaration
                    {
                    root_0 = (ColsAST)adaptor.nil();

                    _last = (ColsAST)input.LT(1);
                    pushFollow(FOLLOW_implicit_definition_declaration_in_definition_declaration4456);
                    dec1=implicit_definition_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, dec1.getTree());
                    if ( state.backtracking==0 ) {
                       retval.dec = (dec1!=null?dec1.dec:null); 
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // RBuilder.g:1106:9: dec2= inductive_definition_declaration
                    {
                    root_0 = (ColsAST)adaptor.nil();

                    _last = (ColsAST)input.LT(1);
                    pushFollow(FOLLOW_inductive_definition_declaration_in_definition_declaration4470);
                    dec2=inductive_definition_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, dec2.getTree());
                    if ( state.backtracking==0 ) {
                       retval.dec = (dec2!=null?dec2.dec:null); 
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 3 :
                    // RBuilder.g:1107:9: dec3= standard_definition_declaration
                    {
                    root_0 = (ColsAST)adaptor.nil();

                    _last = (ColsAST)input.LT(1);
                    pushFollow(FOLLOW_standard_definition_declaration_in_definition_declaration4484);
                    dec3=standard_definition_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, dec3.getTree());
                    if ( state.backtracking==0 ) {
                       retval.dec = (dec3!=null?dec3.dec:null); 
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }
            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "definition_declaration"

    public static class implicit_definition_declaration_return extends TreeRuleReturnScope {
        public DefinitionDec dec = null;
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "implicit_definition_declaration"
    // RBuilder.g:1111:1: implicit_definition_declaration returns [DefinitionDec dec = null] : ^( IMPLICIT_DEF dec2= definition_signature exp= math_expression ) ;
    public final RBuilder.implicit_definition_declaration_return implicit_definition_declaration() throws RecognitionException {
        RBuilder.implicit_definition_declaration_return retval = new RBuilder.implicit_definition_declaration_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        ColsAST _first_0 = null;
        ColsAST _last = null;

        ColsAST IMPLICIT_DEF47=null;
        RBuilder.definition_signature_return dec2 = null;

        RBuilder.math_expression_return exp = null;


        ColsAST IMPLICIT_DEF47_tree=null;

           
            boolean impl = true;
            PosSymbol ps = null; //dummy
            edu.clemson.cs.r2jt.collections.List<MathVarDec> pars = null; //dummy
            Ty ty = null; //dummy
            Exp base = null; //dummy
            Exp hyp = null; //dummy

        try {
            // RBuilder.g:1120:5: ( ^( IMPLICIT_DEF dec2= definition_signature exp= math_expression ) )
            // RBuilder.g:1120:9: ^( IMPLICIT_DEF dec2= definition_signature exp= math_expression )
            {
            root_0 = (ColsAST)adaptor.nil();

            _last = (ColsAST)input.LT(1);
            {
            ColsAST _save_last_1 = _last;
            ColsAST _first_1 = null;
            ColsAST root_1 = (ColsAST)adaptor.nil();_last = (ColsAST)input.LT(1);
            IMPLICIT_DEF47=(ColsAST)match(input,IMPLICIT_DEF,FOLLOW_IMPLICIT_DEF_in_implicit_definition_declaration4523); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            IMPLICIT_DEF47_tree = (ColsAST)adaptor.dupNode(IMPLICIT_DEF47);

            root_1 = (ColsAST)adaptor.becomeRoot(IMPLICIT_DEF47_tree, root_1);
            }


            match(input, Token.DOWN, null); if (state.failed) return retval;
            _last = (ColsAST)input.LT(1);
            pushFollow(FOLLOW_definition_signature_in_implicit_definition_declaration4527);
            dec2=definition_signature();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, dec2.getTree());
            _last = (ColsAST)input.LT(1);
            pushFollow(FOLLOW_math_expression_in_implicit_definition_declaration4531);
            exp=math_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, exp.getTree());

            match(input, Token.UP, null); if (state.failed) return retval;adaptor.addChild(root_0, root_1);_last = _save_last_1;
            }

            if ( state.backtracking==0 ) {
                 ps = (dec2!=null?dec2.dec:null).getName();
                          pars = (dec2!=null?dec2.dec:null).getParameters();
                          ty = (dec2!=null?dec2.dec:null).getReturnTy();
                          retval.dec = new DefinitionDec(impl, ps, pars, ty, base, hyp, (exp!=null?exp.exp:null));
                      
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "implicit_definition_declaration"

    public static class inductive_definition_declaration_return extends TreeRuleReturnScope {
        public DefinitionDec dec = null;
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inductive_definition_declaration"
    // RBuilder.g:1128:1: inductive_definition_declaration returns [DefinitionDec dec = null] : ^( INDUCTIVE_DEF dec2= definition_signature base= indexed_expression hyp= indexed_expression ) ;
    public final RBuilder.inductive_definition_declaration_return inductive_definition_declaration() throws RecognitionException {
        RBuilder.inductive_definition_declaration_return retval = new RBuilder.inductive_definition_declaration_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        ColsAST _first_0 = null;
        ColsAST _last = null;

        ColsAST INDUCTIVE_DEF48=null;
        RBuilder.definition_signature_return dec2 = null;

        RBuilder.indexed_expression_return base = null;

        RBuilder.indexed_expression_return hyp = null;


        ColsAST INDUCTIVE_DEF48_tree=null;

           
            boolean impl = true;
            PosSymbol ps = null; //dummy
            edu.clemson.cs.r2jt.collections.List<MathVarDec> pars = null; //dummy
            Ty ty = null; //dummy
            Exp exp = null; //dummy

        try {
            // RBuilder.g:1136:5: ( ^( INDUCTIVE_DEF dec2= definition_signature base= indexed_expression hyp= indexed_expression ) )
            // RBuilder.g:1136:9: ^( INDUCTIVE_DEF dec2= definition_signature base= indexed_expression hyp= indexed_expression )
            {
            root_0 = (ColsAST)adaptor.nil();

            _last = (ColsAST)input.LT(1);
            {
            ColsAST _save_last_1 = _last;
            ColsAST _first_1 = null;
            ColsAST root_1 = (ColsAST)adaptor.nil();_last = (ColsAST)input.LT(1);
            INDUCTIVE_DEF48=(ColsAST)match(input,INDUCTIVE_DEF,FOLLOW_INDUCTIVE_DEF_in_inductive_definition_declaration4575); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            INDUCTIVE_DEF48_tree = (ColsAST)adaptor.dupNode(INDUCTIVE_DEF48);

            root_1 = (ColsAST)adaptor.becomeRoot(INDUCTIVE_DEF48_tree, root_1);
            }


            match(input, Token.DOWN, null); if (state.failed) return retval;
            _last = (ColsAST)input.LT(1);
            pushFollow(FOLLOW_definition_signature_in_inductive_definition_declaration4579);
            dec2=definition_signature();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, dec2.getTree());
            _last = (ColsAST)input.LT(1);
            pushFollow(FOLLOW_indexed_expression_in_inductive_definition_declaration4595);
            base=indexed_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, base.getTree());
            _last = (ColsAST)input.LT(1);
            pushFollow(FOLLOW_indexed_expression_in_inductive_definition_declaration4599);
            hyp=indexed_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, hyp.getTree());

            match(input, Token.UP, null); if (state.failed) return retval;adaptor.addChild(root_0, root_1);_last = _save_last_1;
            }

            if ( state.backtracking==0 ) {
                 ps = (dec2!=null?dec2.dec:null).getName();
                          pars = (dec2!=null?dec2.dec:null).getParameters();
                          ty = (dec2!=null?dec2.dec:null).getReturnTy();
                          retval.dec = new DefinitionDec(impl, ps, pars, ty, (base!=null?base.exp:null), (hyp!=null?hyp.exp:null), exp);
                      
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "inductive_definition_declaration"

    public static class standard_definition_declaration_return extends TreeRuleReturnScope {
        public DefinitionDec dec = null;
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "standard_definition_declaration"
    // RBuilder.g:1146:1: standard_definition_declaration returns [DefinitionDec dec = null] : ^( DEFINITION dec2= definition_signature (exp= math_expression )? ) ;
    public final RBuilder.standard_definition_declaration_return standard_definition_declaration() throws RecognitionException {
        RBuilder.standard_definition_declaration_return retval = new RBuilder.standard_definition_declaration_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        ColsAST _first_0 = null;
        ColsAST _last = null;

        ColsAST DEFINITION49=null;
        RBuilder.definition_signature_return dec2 = null;

        RBuilder.math_expression_return exp = null;


        ColsAST DEFINITION49_tree=null;


            boolean impl = false;
            PosSymbol ps = null; //dummy
            edu.clemson.cs.r2jt.collections.List<MathVarDec> pars = null; //dummy
            Ty ty = null; //dummy
            Exp base = null; //dummy
            Exp hyp = null; //dummy

        try {
            // RBuilder.g:1155:5: ( ^( DEFINITION dec2= definition_signature (exp= math_expression )? ) )
            // RBuilder.g:1155:9: ^( DEFINITION dec2= definition_signature (exp= math_expression )? )
            {
            root_0 = (ColsAST)adaptor.nil();

            _last = (ColsAST)input.LT(1);
            {
            ColsAST _save_last_1 = _last;
            ColsAST _first_1 = null;
            ColsAST root_1 = (ColsAST)adaptor.nil();_last = (ColsAST)input.LT(1);
            DEFINITION49=(ColsAST)match(input,DEFINITION,FOLLOW_DEFINITION_in_standard_definition_declaration4650); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            DEFINITION49_tree = (ColsAST)adaptor.dupNode(DEFINITION49);

            root_1 = (ColsAST)adaptor.becomeRoot(DEFINITION49_tree, root_1);
            }


            match(input, Token.DOWN, null); if (state.failed) return retval;
            _last = (ColsAST)input.LT(1);
            pushFollow(FOLLOW_definition_signature_in_standard_definition_declaration4654);
            dec2=definition_signature();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, dec2.getTree());
            // RBuilder.g:1155:48: (exp= math_expression )?
            int alt68=2;
            int LA68_0 = input.LA(1);

            if ( (LA68_0==EXPR) ) {
                alt68=1;
            }
            switch (alt68) {
                case 1 :
                    // RBuilder.g:1155:49: exp= math_expression
                    {
                    _last = (ColsAST)input.LT(1);
                    pushFollow(FOLLOW_math_expression_in_standard_definition_declaration4659);
                    exp=math_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, exp.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }


            match(input, Token.UP, null); if (state.failed) return retval;adaptor.addChild(root_0, root_1);_last = _save_last_1;
            }

            if ( state.backtracking==0 ) {
                 ps = (dec2!=null?dec2.dec:null).getName();
                          pars = (dec2!=null?dec2.dec:null).getParameters();
                          ty = (dec2!=null?dec2.dec:null).getReturnTy();
                          retval.dec = new DefinitionDec(impl, ps, pars, ty, base, hyp, (exp!=null?exp.exp:null));
                      
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "standard_definition_declaration"

    public static class categorical_definition_declaration_return extends TreeRuleReturnScope {
        public CategoricalDefinitionDec dec = null;
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "categorical_definition_declaration"
    // RBuilder.g:1163:1: categorical_definition_declaration returns [CategoricalDefinitionDec dec = null] : ^( CATEGORICAL_DEFINITION dec1= categorical_definition_construct ^( RELATED_BY exp= math_expression ) ) ;
    public final RBuilder.categorical_definition_declaration_return categorical_definition_declaration() throws RecognitionException {
        RBuilder.categorical_definition_declaration_return retval = new RBuilder.categorical_definition_declaration_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        ColsAST _first_0 = null;
        ColsAST _last = null;

        ColsAST CATEGORICAL_DEFINITION50=null;
        ColsAST RELATED_BY51=null;
        RBuilder.categorical_definition_construct_return dec1 = null;

        RBuilder.math_expression_return exp = null;


        ColsAST CATEGORICAL_DEFINITION50_tree=null;
        ColsAST RELATED_BY51_tree=null;

        try {
            // RBuilder.g:1164:5: ( ^( CATEGORICAL_DEFINITION dec1= categorical_definition_construct ^( RELATED_BY exp= math_expression ) ) )
            // RBuilder.g:1164:9: ^( CATEGORICAL_DEFINITION dec1= categorical_definition_construct ^( RELATED_BY exp= math_expression ) )
            {
            root_0 = (ColsAST)adaptor.nil();

            _last = (ColsAST)input.LT(1);
            {
            ColsAST _save_last_1 = _last;
            ColsAST _first_1 = null;
            ColsAST root_1 = (ColsAST)adaptor.nil();_last = (ColsAST)input.LT(1);
            CATEGORICAL_DEFINITION50=(ColsAST)match(input,CATEGORICAL_DEFINITION,FOLLOW_CATEGORICAL_DEFINITION_in_categorical_definition_declaration4703); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            CATEGORICAL_DEFINITION50_tree = (ColsAST)adaptor.dupNode(CATEGORICAL_DEFINITION50);

            root_1 = (ColsAST)adaptor.becomeRoot(CATEGORICAL_DEFINITION50_tree, root_1);
            }


            match(input, Token.DOWN, null); if (state.failed) return retval;
            _last = (ColsAST)input.LT(1);
            pushFollow(FOLLOW_categorical_definition_construct_in_categorical_definition_declaration4707);
            dec1=categorical_definition_construct();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, dec1.getTree());
            _last = (ColsAST)input.LT(1);
            {
            ColsAST _save_last_2 = _last;
            ColsAST _first_2 = null;
            ColsAST root_2 = (ColsAST)adaptor.nil();_last = (ColsAST)input.LT(1);
            RELATED_BY51=(ColsAST)match(input,RELATED_BY,FOLLOW_RELATED_BY_in_categorical_definition_declaration4710); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RELATED_BY51_tree = (ColsAST)adaptor.dupNode(RELATED_BY51);

            root_2 = (ColsAST)adaptor.becomeRoot(RELATED_BY51_tree, root_2);
            }


            match(input, Token.DOWN, null); if (state.failed) return retval;
            _last = (ColsAST)input.LT(1);
            pushFollow(FOLLOW_math_expression_in_categorical_definition_declaration4714);
            exp=math_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_2, exp.getTree());

            match(input, Token.UP, null); if (state.failed) return retval;adaptor.addChild(root_1, root_2);_last = _save_last_2;
            }


            match(input, Token.UP, null); if (state.failed) return retval;adaptor.addChild(root_0, root_1);_last = _save_last_1;
            }

            if ( state.backtracking==0 ) {
                 
                          retval.dec = new CategoricalDefinitionDec((dec1!=null?dec1.defs:null), (exp!=null?exp.exp:null)); 
                      
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "categorical_definition_declaration"

    public static class definition_signature_return extends TreeRuleReturnScope {
        public DefinitionDec dec = null;
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "definition_signature"
    // RBuilder.g:1170:1: definition_signature returns [DefinitionDec dec = null] : ( (dec1= infix_definition_construct | dec2= outfix_definition_construct | dec3= standard_definition_construct ) ty= math_type_expression ) ;
    public final RBuilder.definition_signature_return definition_signature() throws RecognitionException {
        RBuilder.definition_signature_return retval = new RBuilder.definition_signature_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        ColsAST _first_0 = null;
        ColsAST _last = null;

        RBuilder.infix_definition_construct_return dec1 = null;

        RBuilder.outfix_definition_construct_return dec2 = null;

        RBuilder.standard_definition_construct_return dec3 = null;

        RBuilder.math_type_expression_return ty = null;



           
            boolean impl = false;
            PosSymbol ps = null; //dummy
            edu.clemson.cs.r2jt.collections.List<MathVarDec> pars = null; //dummy
            Exp base = null; //dummy
            Exp hyp = null; //dummy
            Exp exp = null; //dummy

        try {
            // RBuilder.g:1179:5: ( ( (dec1= infix_definition_construct | dec2= outfix_definition_construct | dec3= standard_definition_construct ) ty= math_type_expression ) )
            // RBuilder.g:1179:9: ( (dec1= infix_definition_construct | dec2= outfix_definition_construct | dec3= standard_definition_construct ) ty= math_type_expression )
            {
            root_0 = (ColsAST)adaptor.nil();

            // RBuilder.g:1179:9: ( (dec1= infix_definition_construct | dec2= outfix_definition_construct | dec3= standard_definition_construct ) ty= math_type_expression )
            // RBuilder.g:1179:13: (dec1= infix_definition_construct | dec2= outfix_definition_construct | dec3= standard_definition_construct ) ty= math_type_expression
            {
            // RBuilder.g:1179:13: (dec1= infix_definition_construct | dec2= outfix_definition_construct | dec3= standard_definition_construct )
            int alt69=3;
            switch ( input.LA(1) ) {
            case PARAMS:
                {
                alt69=1;
                }
                break;
            case LT:
            case LL:
            case BAR:
            case DBL_BAR:
                {
                alt69=2;
                }
                break;
            case ABS:
            case COMPLEMENT:
            case NOT:
            case IDENTIFIER:
            case NUMERIC_LITERAL:
            case PLUS:
            case MINUS:
                {
                alt69=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 69, 0, input);

                throw nvae;
            }

            switch (alt69) {
                case 1 :
                    // RBuilder.g:1179:17: dec1= infix_definition_construct
                    {
                    _last = (ColsAST)input.LT(1);
                    pushFollow(FOLLOW_infix_definition_construct_in_definition_signature4763);
                    dec1=infix_definition_construct();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, dec1.getTree());
                    if ( state.backtracking==0 ) {

                                        ps = (dec1!=null?dec1.dec:null).getName();
                                        pars = (dec1!=null?dec1.dec:null).getParameters();
                                      
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // RBuilder.g:1184:17: dec2= outfix_definition_construct
                    {
                    _last = (ColsAST)input.LT(1);
                    pushFollow(FOLLOW_outfix_definition_construct_in_definition_signature4801);
                    dec2=outfix_definition_construct();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, dec2.getTree());
                    if ( state.backtracking==0 ) {

                                        ps = (dec2!=null?dec2.dec:null).getName();
                                        pars = (dec2!=null?dec2.dec:null).getParameters();
                                      
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 3 :
                    // RBuilder.g:1189:17: dec3= standard_definition_construct
                    {
                    _last = (ColsAST)input.LT(1);
                    pushFollow(FOLLOW_standard_definition_construct_in_definition_signature4839);
                    dec3=standard_definition_construct();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, dec3.getTree());
                    if ( state.backtracking==0 ) {

                                        ps = (dec3!=null?dec3.dec:null).getName();
                                        pars = (dec3!=null?dec3.dec:null).getParameters();
                                      
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }

            _last = (ColsAST)input.LT(1);
            pushFollow(FOLLOW_math_type_expression_in_definition_signature4887);
            ty=math_type_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, ty.getTree());

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {
                 
                          retval.dec = new DefinitionDec(impl, ps, pars, (ty!=null?ty.ty:null), base, hyp, exp);
                      
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "definition_signature"

    public static class infix_definition_construct_return extends TreeRuleReturnScope {
        public DefinitionDec dec = null;
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "infix_definition_construct"
    // RBuilder.g:1202:1: infix_definition_construct returns [DefinitionDec dec = null] : var2= singleton_definition_parameter (ps1= ident | ps2= infix_symbol ) var3= singleton_definition_parameter ;
    public final RBuilder.infix_definition_construct_return infix_definition_construct() throws RecognitionException {
        RBuilder.infix_definition_construct_return retval = new RBuilder.infix_definition_construct_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        ColsAST _first_0 = null;
        ColsAST _last = null;

        RBuilder.singleton_definition_parameter_return var2 = null;

        RBuilder.ident_return ps1 = null;

        RBuilder.infix_symbol_return ps2 = null;

        RBuilder.singleton_definition_parameter_return var3 = null;




            PosSymbol ps = null;  
            boolean impl = false;
            edu.clemson.cs.r2jt.collections.List<MathVarDec> pars = new edu.clemson.cs.r2jt.collections.List<MathVarDec>("MathVarDec");
            Ty ty = null; //dummy
            Exp base = null; //dummy
            Exp hyp = null; //dummy
            Exp exp = null; //dummy

        try {
            // RBuilder.g:1212:5: (var2= singleton_definition_parameter (ps1= ident | ps2= infix_symbol ) var3= singleton_definition_parameter )
            // RBuilder.g:1212:9: var2= singleton_definition_parameter (ps1= ident | ps2= infix_symbol ) var3= singleton_definition_parameter
            {
            root_0 = (ColsAST)adaptor.nil();

            _last = (ColsAST)input.LT(1);
            pushFollow(FOLLOW_singleton_definition_parameter_in_infix_definition_construct4939);
            var2=singleton_definition_parameter();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, var2.getTree());
            if ( state.backtracking==0 ) {
               pars.add((var2!=null?var2.dec:null)); 
            }
            // RBuilder.g:1213:9: (ps1= ident | ps2= infix_symbol )
            int alt70=2;
            int LA70_0 = input.LA(1);

            if ( (LA70_0==IDENTIFIER) ) {
                alt70=1;
            }
            else if ( (LA70_0==AND||LA70_0==COMPLEMENT||LA70_0==DIV||LA70_0==IFF||LA70_0==IMPLIES||LA70_0==INTERSECT||(LA70_0>=IN && LA70_0<=SUBSTR)||LA70_0==MOD||LA70_0==CAT||LA70_0==OR||LA70_0==REM||LA70_0==UNION||LA70_0==WITHOUT||(LA70_0>=PLUS && LA70_0<=MINUS)||(LA70_0>=MULTIPLY && LA70_0<=GT)||(LA70_0>=XOR && LA70_0<=ORELSE)) ) {
                alt70=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 70, 0, input);

                throw nvae;
            }
            switch (alt70) {
                case 1 :
                    // RBuilder.g:1213:10: ps1= ident
                    {
                    _last = (ColsAST)input.LT(1);
                    pushFollow(FOLLOW_ident_in_infix_definition_construct4954);
                    ps1=ident();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, ps1.getTree());
                    if ( state.backtracking==0 ) {
                       ps = (ps1!=null?ps1.ps:null); 
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // RBuilder.g:1213:39: ps2= infix_symbol
                    {
                    _last = (ColsAST)input.LT(1);
                    pushFollow(FOLLOW_infix_symbol_in_infix_definition_construct4961);
                    ps2=infix_symbol();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, ps2.getTree());
                    if ( state.backtracking==0 ) {
                       ps = (ps2!=null?ps2.ps:null); 
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }

            _last = (ColsAST)input.LT(1);
            pushFollow(FOLLOW_singleton_definition_parameter_in_infix_definition_construct4976);
            var3=singleton_definition_parameter();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, var3.getTree());
            if ( state.backtracking==0 ) {
               pars.add((var3!=null?var3.dec:null)); 
            }
            if ( state.backtracking==0 ) {
               retval.dec = new DefinitionDec(impl, ps, pars, ty, base, hyp, exp); 
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "infix_definition_construct"

    public static class outfix_definition_construct_return extends TreeRuleReturnScope {
        public DefinitionDec dec = null;
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "outfix_definition_construct"
    // RBuilder.g:1218:1: outfix_definition_construct returns [DefinitionDec dec = null] : ( BAR var2= singleton_definition_parameter | DBL_BAR var2= singleton_definition_parameter | LT var2= singleton_definition_parameter | LL var2= singleton_definition_parameter ) ;
    public final RBuilder.outfix_definition_construct_return outfix_definition_construct() throws RecognitionException {
        RBuilder.outfix_definition_construct_return retval = new RBuilder.outfix_definition_construct_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        ColsAST _first_0 = null;
        ColsAST _last = null;

        ColsAST BAR52=null;
        ColsAST DBL_BAR53=null;
        ColsAST LT54=null;
        ColsAST LL55=null;
        RBuilder.singleton_definition_parameter_return var2 = null;


        ColsAST BAR52_tree=null;
        ColsAST DBL_BAR53_tree=null;
        ColsAST LT54_tree=null;
        ColsAST LL55_tree=null;

           
            boolean impl = false;
            PosSymbol ps = null;
            edu.clemson.cs.r2jt.collections.List<MathVarDec> pars = new edu.clemson.cs.r2jt.collections.List<MathVarDec>("MathVarDec");
            Ty ty = null; //dummy
            Exp base = null; //dummy
            Exp hyp = null; //dummy
            Exp exp = null; //dummy

        try {
            // RBuilder.g:1228:5: ( ( BAR var2= singleton_definition_parameter | DBL_BAR var2= singleton_definition_parameter | LT var2= singleton_definition_parameter | LL var2= singleton_definition_parameter ) )
            // RBuilder.g:1228:9: ( BAR var2= singleton_definition_parameter | DBL_BAR var2= singleton_definition_parameter | LT var2= singleton_definition_parameter | LL var2= singleton_definition_parameter )
            {
            root_0 = (ColsAST)adaptor.nil();

            // RBuilder.g:1228:9: ( BAR var2= singleton_definition_parameter | DBL_BAR var2= singleton_definition_parameter | LT var2= singleton_definition_parameter | LL var2= singleton_definition_parameter )
            int alt71=4;
            switch ( input.LA(1) ) {
            case BAR:
                {
                alt71=1;
                }
                break;
            case DBL_BAR:
                {
                alt71=2;
                }
                break;
            case LT:
                {
                alt71=3;
                }
                break;
            case LL:
                {
                alt71=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 71, 0, input);

                throw nvae;
            }

            switch (alt71) {
                case 1 :
                    // RBuilder.g:1228:13: BAR var2= singleton_definition_parameter
                    {
                    _last = (ColsAST)input.LT(1);
                    BAR52=(ColsAST)match(input,BAR,FOLLOW_BAR_in_outfix_definition_construct5019); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    BAR52_tree = (ColsAST)adaptor.dupNode(BAR52);

                    adaptor.addChild(root_0, BAR52_tree);
                    }
                    _last = (ColsAST)input.LT(1);
                    pushFollow(FOLLOW_singleton_definition_parameter_in_outfix_definition_construct5023);
                    var2=singleton_definition_parameter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, var2.getTree());
                    if ( state.backtracking==0 ) {
                       ps = getOutfixPosSymbol(BAR52); pars.add((var2!=null?var2.dec:null)); 
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // RBuilder.g:1230:13: DBL_BAR var2= singleton_definition_parameter
                    {
                    _last = (ColsAST)input.LT(1);
                    DBL_BAR53=(ColsAST)match(input,DBL_BAR,FOLLOW_DBL_BAR_in_outfix_definition_construct5051); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DBL_BAR53_tree = (ColsAST)adaptor.dupNode(DBL_BAR53);

                    adaptor.addChild(root_0, DBL_BAR53_tree);
                    }
                    _last = (ColsAST)input.LT(1);
                    pushFollow(FOLLOW_singleton_definition_parameter_in_outfix_definition_construct5055);
                    var2=singleton_definition_parameter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, var2.getTree());
                    if ( state.backtracking==0 ) {
                       ps = getOutfixPosSymbol(DBL_BAR53); pars.add((var2!=null?var2.dec:null)); 
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 3 :
                    // RBuilder.g:1232:13: LT var2= singleton_definition_parameter
                    {
                    _last = (ColsAST)input.LT(1);
                    LT54=(ColsAST)match(input,LT,FOLLOW_LT_in_outfix_definition_construct5083); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LT54_tree = (ColsAST)adaptor.dupNode(LT54);

                    adaptor.addChild(root_0, LT54_tree);
                    }
                    _last = (ColsAST)input.LT(1);
                    pushFollow(FOLLOW_singleton_definition_parameter_in_outfix_definition_construct5087);
                    var2=singleton_definition_parameter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, var2.getTree());
                    if ( state.backtracking==0 ) {
                       ps = getOutfixPosSymbol(LT54); pars.add((var2!=null?var2.dec:null)); 
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 4 :
                    // RBuilder.g:1234:13: LL var2= singleton_definition_parameter
                    {
                    _last = (ColsAST)input.LT(1);
                    LL55=(ColsAST)match(input,LL,FOLLOW_LL_in_outfix_definition_construct5115); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LL55_tree = (ColsAST)adaptor.dupNode(LL55);

                    adaptor.addChild(root_0, LL55_tree);
                    }
                    _last = (ColsAST)input.LT(1);
                    pushFollow(FOLLOW_singleton_definition_parameter_in_outfix_definition_construct5119);
                    var2=singleton_definition_parameter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, var2.getTree());
                    if ( state.backtracking==0 ) {
                       ps = getOutfixPosSymbol(LL55); pars.add((var2!=null?var2.dec:null)); 
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }

            if ( state.backtracking==0 ) {
               retval.dec = new DefinitionDec(impl, ps, pars, ty, base, hyp, exp); 
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "outfix_definition_construct"

    public static class standard_definition_construct_return extends TreeRuleReturnScope {
        public DefinitionDec dec = null;
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "standard_definition_construct"
    // RBuilder.g:1240:1: standard_definition_construct returns [DefinitionDec dec = null] : (ps1= ident | ps2= prefix_symbol | NUMERIC_LITERAL ) (pars= definition_formal_param_section )? ;
    public final RBuilder.standard_definition_construct_return standard_definition_construct() throws RecognitionException {
        RBuilder.standard_definition_construct_return retval = new RBuilder.standard_definition_construct_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        ColsAST _first_0 = null;
        ColsAST _last = null;

        ColsAST NUMERIC_LITERAL56=null;
        RBuilder.ident_return ps1 = null;

        RBuilder.prefix_symbol_return ps2 = null;

        RBuilder.definition_formal_param_section_return pars = null;


        ColsAST NUMERIC_LITERAL56_tree=null;

           
            PosSymbol ps = null;
            boolean impl = false;
            Ty ty = null; //dummy
            Exp base = null; //dummy
            Exp hyp = null; //dummy
            Exp exp = null; //dummy
            MathVarDec var2 = null;

        try {
            // RBuilder.g:1250:5: ( (ps1= ident | ps2= prefix_symbol | NUMERIC_LITERAL ) (pars= definition_formal_param_section )? )
            // RBuilder.g:1250:9: (ps1= ident | ps2= prefix_symbol | NUMERIC_LITERAL ) (pars= definition_formal_param_section )?
            {
            root_0 = (ColsAST)adaptor.nil();

            // RBuilder.g:1250:9: (ps1= ident | ps2= prefix_symbol | NUMERIC_LITERAL )
            int alt72=3;
            switch ( input.LA(1) ) {
            case IDENTIFIER:
                {
                alt72=1;
                }
                break;
            case ABS:
            case COMPLEMENT:
            case NOT:
            case PLUS:
            case MINUS:
                {
                alt72=2;
                }
                break;
            case NUMERIC_LITERAL:
                {
                alt72=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 72, 0, input);

                throw nvae;
            }

            switch (alt72) {
                case 1 :
                    // RBuilder.g:1250:13: ps1= ident
                    {
                    _last = (ColsAST)input.LT(1);
                    pushFollow(FOLLOW_ident_in_standard_definition_construct5186);
                    ps1=ident();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, ps1.getTree());
                    if ( state.backtracking==0 ) {
                       ps = (ps1!=null?ps1.ps:null); 
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // RBuilder.g:1251:13: ps2= prefix_symbol
                    {
                    _last = (ColsAST)input.LT(1);
                    pushFollow(FOLLOW_prefix_symbol_in_standard_definition_construct5204);
                    ps2=prefix_symbol();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, ps2.getTree());
                    if ( state.backtracking==0 ) {
                       ps = (ps2!=null?ps2.ps:null); 
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 3 :
                    // RBuilder.g:1252:13: NUMERIC_LITERAL
                    {
                    _last = (ColsAST)input.LT(1);
                    NUMERIC_LITERAL56=(ColsAST)match(input,NUMERIC_LITERAL,FOLLOW_NUMERIC_LITERAL_in_standard_definition_construct5220); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NUMERIC_LITERAL56_tree = (ColsAST)adaptor.dupNode(NUMERIC_LITERAL56);

                    adaptor.addChild(root_0, NUMERIC_LITERAL56_tree);
                    }
                    if ( state.backtracking==0 ) {
                       ps=getPosSymbol(NUMERIC_LITERAL56); 
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }

            // RBuilder.g:1254:9: (pars= definition_formal_param_section )?
            int alt73=2;
            int LA73_0 = input.LA(1);

            if ( (LA73_0==PARAMS) ) {
                alt73=1;
            }
            switch (alt73) {
                case 1 :
                    // RBuilder.g:1254:10: pars= definition_formal_param_section
                    {
                    _last = (ColsAST)input.LT(1);
                    pushFollow(FOLLOW_definition_formal_param_section_in_standard_definition_construct5245);
                    pars=definition_formal_param_section();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, pars.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }

            if ( state.backtracking==0 ) {
               retval.dec = new DefinitionDec(impl, ps, (pars!=null?pars.decs:null), ty, base, hyp, exp); 
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "standard_definition_construct"

    public static class categorical_definition_construct_return extends TreeRuleReturnScope {
        public edu.clemson.cs.r2jt.collections.List<DefinitionDec> defs
                = new edu.clemson.cs.r2jt.collections.List<DefinitionDec>("DefinitionDec");
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "categorical_definition_construct"
    // RBuilder.g:1258:1: categorical_definition_construct returns [edu.clemson.cs.r2jt.collections.List<DefinitionDec> defs\n = new edu.clemson.cs.r2jt.collections.List<DefinitionDec>(\"DefinitionDec\")] : ( ^( DEFINITION dec= definition_signature ) )+ ;
    public final RBuilder.categorical_definition_construct_return categorical_definition_construct() throws RecognitionException {
        RBuilder.categorical_definition_construct_return retval = new RBuilder.categorical_definition_construct_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        ColsAST _first_0 = null;
        ColsAST _last = null;

        ColsAST DEFINITION57=null;
        RBuilder.definition_signature_return dec = null;


        ColsAST DEFINITION57_tree=null;

        try {
            // RBuilder.g:1260:5: ( ( ^( DEFINITION dec= definition_signature ) )+ )
            // RBuilder.g:1260:9: ( ^( DEFINITION dec= definition_signature ) )+
            {
            root_0 = (ColsAST)adaptor.nil();

            // RBuilder.g:1260:9: ( ^( DEFINITION dec= definition_signature ) )+
            int cnt74=0;
            loop74:
            do {
                int alt74=2;
                int LA74_0 = input.LA(1);

                if ( (LA74_0==DEFINITION) ) {
                    alt74=1;
                }


                switch (alt74) {
            	case 1 :
            	    // RBuilder.g:1260:10: ^( DEFINITION dec= definition_signature )
            	    {
            	    _last = (ColsAST)input.LT(1);
            	    {
            	    ColsAST _save_last_1 = _last;
            	    ColsAST _first_1 = null;
            	    ColsAST root_1 = (ColsAST)adaptor.nil();_last = (ColsAST)input.LT(1);
            	    DEFINITION57=(ColsAST)match(input,DEFINITION,FOLLOW_DEFINITION_in_categorical_definition_construct5282); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    DEFINITION57_tree = (ColsAST)adaptor.dupNode(DEFINITION57);

            	    root_1 = (ColsAST)adaptor.becomeRoot(DEFINITION57_tree, root_1);
            	    }


            	    match(input, Token.DOWN, null); if (state.failed) return retval;
            	    _last = (ColsAST)input.LT(1);
            	    pushFollow(FOLLOW_definition_signature_in_categorical_definition_construct5286);
            	    dec=definition_signature();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) 
            	    adaptor.addChild(root_1, dec.getTree());

            	    match(input, Token.UP, null); if (state.failed) return retval;adaptor.addChild(root_0, root_1);_last = _save_last_1;
            	    }

            	    if ( state.backtracking==0 ) {
            	       retval.defs.add((dec!=null?dec.dec:null)); 
            	    }

            	    if ( state.backtracking==0 ) {
            	    }
            	    }
            	    break;

            	default :
            	    if ( cnt74 >= 1 ) break loop74;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(74, input);
                        throw eee;
                }
                cnt74++;
            } while (true);


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "categorical_definition_construct"

    public static class indexed_expression_return extends TreeRuleReturnScope {
        public Exp exp = null;
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "indexed_expression"
    // RBuilder.g:1264:1: indexed_expression returns [Exp exp = null] : exp1= math_expression ;
    public final RBuilder.indexed_expression_return indexed_expression() throws RecognitionException {
        RBuilder.indexed_expression_return retval = new RBuilder.indexed_expression_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        ColsAST _first_0 = null;
        ColsAST _last = null;

        RBuilder.math_expression_return exp1 = null;



        try {
            // RBuilder.g:1265:5: (exp1= math_expression )
            // RBuilder.g:1265:9: exp1= math_expression
            {
            root_0 = (ColsAST)adaptor.nil();

            _last = (ColsAST)input.LT(1);
            pushFollow(FOLLOW_math_expression_in_indexed_expression5325);
            exp1=math_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, exp1.getTree());
            if ( state.backtracking==0 ) {
               retval.exp = (exp1!=null?exp1.exp:null); 
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "indexed_expression"

    public static class singleton_definition_parameter_return extends TreeRuleReturnScope {
        public MathVarDec dec = null;
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "singleton_definition_parameter"
    // RBuilder.g:1269:1: singleton_definition_parameter returns [MathVarDec dec = null] : ^( PARAMS dec1= math_variable_declaration ) ;
    public final RBuilder.singleton_definition_parameter_return singleton_definition_parameter() throws RecognitionException {
        RBuilder.singleton_definition_parameter_return retval = new RBuilder.singleton_definition_parameter_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        ColsAST _first_0 = null;
        ColsAST _last = null;

        ColsAST PARAMS58=null;
        RBuilder.math_variable_declaration_return dec1 = null;


        ColsAST PARAMS58_tree=null;

        try {
            // RBuilder.g:1270:5: ( ^( PARAMS dec1= math_variable_declaration ) )
            // RBuilder.g:1270:9: ^( PARAMS dec1= math_variable_declaration )
            {
            root_0 = (ColsAST)adaptor.nil();

            _last = (ColsAST)input.LT(1);
            {
            ColsAST _save_last_1 = _last;
            ColsAST _first_1 = null;
            ColsAST root_1 = (ColsAST)adaptor.nil();_last = (ColsAST)input.LT(1);
            PARAMS58=(ColsAST)match(input,PARAMS,FOLLOW_PARAMS_in_singleton_definition_parameter5359); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            PARAMS58_tree = (ColsAST)adaptor.dupNode(PARAMS58);

            root_1 = (ColsAST)adaptor.becomeRoot(PARAMS58_tree, root_1);
            }


            match(input, Token.DOWN, null); if (state.failed) return retval;
            _last = (ColsAST)input.LT(1);
            pushFollow(FOLLOW_math_variable_declaration_in_singleton_definition_parameter5363);
            dec1=math_variable_declaration();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, dec1.getTree());

            match(input, Token.UP, null); if (state.failed) return retval;adaptor.addChild(root_0, root_1);_last = _save_last_1;
            }

            if ( state.backtracking==0 ) {
               retval.dec = (dec1!=null?dec1.var:null); 
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "singleton_definition_parameter"

    public static class definition_formal_param_section_return extends TreeRuleReturnScope {
        public edu.clemson.cs.r2jt.collections.List<MathVarDec> decs
                = new edu.clemson.cs.r2jt.collections.List<MathVarDec>("MathVarDec");
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "definition_formal_param_section"
    // RBuilder.g:1274:1: definition_formal_param_section returns [edu.clemson.cs.r2jt.collections.List<MathVarDec> decs\n = new edu.clemson.cs.r2jt.collections.List<MathVarDec>(\"MathVarDec\")] : ^( PARAMS (decs2= math_variable_declaration_group )+ ) ;
    public final RBuilder.definition_formal_param_section_return definition_formal_param_section() throws RecognitionException {
        RBuilder.definition_formal_param_section_return retval = new RBuilder.definition_formal_param_section_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        ColsAST _first_0 = null;
        ColsAST _last = null;

        ColsAST PARAMS59=null;
        RBuilder.math_variable_declaration_group_return decs2 = null;


        ColsAST PARAMS59_tree=null;

        try {
            // RBuilder.g:1276:5: ( ^( PARAMS (decs2= math_variable_declaration_group )+ ) )
            // RBuilder.g:1276:9: ^( PARAMS (decs2= math_variable_declaration_group )+ )
            {
            root_0 = (ColsAST)adaptor.nil();

            _last = (ColsAST)input.LT(1);
            {
            ColsAST _save_last_1 = _last;
            ColsAST _first_1 = null;
            ColsAST root_1 = (ColsAST)adaptor.nil();_last = (ColsAST)input.LT(1);
            PARAMS59=(ColsAST)match(input,PARAMS,FOLLOW_PARAMS_in_definition_formal_param_section5400); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            PARAMS59_tree = (ColsAST)adaptor.dupNode(PARAMS59);

            root_1 = (ColsAST)adaptor.becomeRoot(PARAMS59_tree, root_1);
            }


            match(input, Token.DOWN, null); if (state.failed) return retval;
            // RBuilder.g:1277:13: (decs2= math_variable_declaration_group )+
            int cnt75=0;
            loop75:
            do {
                int alt75=2;
                int LA75_0 = input.LA(1);

                if ( (LA75_0==IDENTIFIER) ) {
                    alt75=1;
                }


                switch (alt75) {
            	case 1 :
            	    // RBuilder.g:1277:14: decs2= math_variable_declaration_group
            	    {
            	    _last = (ColsAST)input.LT(1);
            	    pushFollow(FOLLOW_math_variable_declaration_group_in_definition_formal_param_section5417);
            	    decs2=math_variable_declaration_group();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) 
            	    adaptor.addChild(root_1, decs2.getTree());
            	    if ( state.backtracking==0 ) {
            	       retval.decs.addAll((decs2!=null?decs2.vars:null)); 
            	    }

            	    if ( state.backtracking==0 ) {
            	    }
            	    }
            	    break;

            	default :
            	    if ( cnt75 >= 1 ) break loop75;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(75, input);
                        throw eee;
                }
                cnt75++;
            } while (true);


            match(input, Token.UP, null); if (state.failed) return retval;adaptor.addChild(root_0, root_1);_last = _save_last_1;
            }


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "definition_formal_param_section"

    public static class infix_symbol_return extends TreeRuleReturnScope {
        public PosSymbol ps = null;
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "infix_symbol"
    // RBuilder.g:1281:1: infix_symbol returns [PosSymbol ps = null] : (sym= EQL | sym= NOT_EQL | sym= LT | sym= GT | sym= LT_EQL | sym= GT_EQL | sym= PLUS | sym= MINUS | sym= MULTIPLY | sym= DIVIDE | sym= EXP | sym= MOD | sym= REM | sym= DIV | sym= IMPLIES | sym= IFF | sym= AND | sym= OR | sym= XOR | sym= ANDTHEN | sym= ORELSE | sym= COMPLEMENT | sym= IN | sym= NOT_IN | sym= RANGE | sym= UNION | sym= INTERSECT | sym= WITHOUT | sym= SUBSET | sym= PROP_SUBSET | sym= NOT_SUBSET | sym= NOT_PROP_SUBSET | sym= CAT | sym= SUBSTR | sym= NOT_SUBSTR ) ;
    public final RBuilder.infix_symbol_return infix_symbol() throws RecognitionException {
        RBuilder.infix_symbol_return retval = new RBuilder.infix_symbol_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        ColsAST _first_0 = null;
        ColsAST _last = null;

        ColsAST sym=null;

        ColsAST sym_tree=null;

        try {
            // RBuilder.g:1282:5: ( (sym= EQL | sym= NOT_EQL | sym= LT | sym= GT | sym= LT_EQL | sym= GT_EQL | sym= PLUS | sym= MINUS | sym= MULTIPLY | sym= DIVIDE | sym= EXP | sym= MOD | sym= REM | sym= DIV | sym= IMPLIES | sym= IFF | sym= AND | sym= OR | sym= XOR | sym= ANDTHEN | sym= ORELSE | sym= COMPLEMENT | sym= IN | sym= NOT_IN | sym= RANGE | sym= UNION | sym= INTERSECT | sym= WITHOUT | sym= SUBSET | sym= PROP_SUBSET | sym= NOT_SUBSET | sym= NOT_PROP_SUBSET | sym= CAT | sym= SUBSTR | sym= NOT_SUBSTR ) )
            // RBuilder.g:1282:9: (sym= EQL | sym= NOT_EQL | sym= LT | sym= GT | sym= LT_EQL | sym= GT_EQL | sym= PLUS | sym= MINUS | sym= MULTIPLY | sym= DIVIDE | sym= EXP | sym= MOD | sym= REM | sym= DIV | sym= IMPLIES | sym= IFF | sym= AND | sym= OR | sym= XOR | sym= ANDTHEN | sym= ORELSE | sym= COMPLEMENT | sym= IN | sym= NOT_IN | sym= RANGE | sym= UNION | sym= INTERSECT | sym= WITHOUT | sym= SUBSET | sym= PROP_SUBSET | sym= NOT_SUBSET | sym= NOT_PROP_SUBSET | sym= CAT | sym= SUBSTR | sym= NOT_SUBSTR )
            {
            root_0 = (ColsAST)adaptor.nil();

            // RBuilder.g:1282:9: (sym= EQL | sym= NOT_EQL | sym= LT | sym= GT | sym= LT_EQL | sym= GT_EQL | sym= PLUS | sym= MINUS | sym= MULTIPLY | sym= DIVIDE | sym= EXP | sym= MOD | sym= REM | sym= DIV | sym= IMPLIES | sym= IFF | sym= AND | sym= OR | sym= XOR | sym= ANDTHEN | sym= ORELSE | sym= COMPLEMENT | sym= IN | sym= NOT_IN | sym= RANGE | sym= UNION | sym= INTERSECT | sym= WITHOUT | sym= SUBSET | sym= PROP_SUBSET | sym= NOT_SUBSET | sym= NOT_PROP_SUBSET | sym= CAT | sym= SUBSTR | sym= NOT_SUBSTR )
            int alt76=35;
            alt76 = dfa76.predict(input);
            switch (alt76) {
                case 1 :
                    // RBuilder.g:1282:13: sym= EQL
                    {
                    _last = (ColsAST)input.LT(1);
                    sym=(ColsAST)match(input,EQL,FOLLOW_EQL_in_infix_symbol5460); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    sym_tree = (ColsAST)adaptor.dupNode(sym);

                    adaptor.addChild(root_0, sym_tree);
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // RBuilder.g:1282:23: sym= NOT_EQL
                    {
                    _last = (ColsAST)input.LT(1);
                    sym=(ColsAST)match(input,NOT_EQL,FOLLOW_NOT_EQL_in_infix_symbol5466); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    sym_tree = (ColsAST)adaptor.dupNode(sym);

                    adaptor.addChild(root_0, sym_tree);
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 3 :
                    // RBuilder.g:1282:37: sym= LT
                    {
                    _last = (ColsAST)input.LT(1);
                    sym=(ColsAST)match(input,LT,FOLLOW_LT_in_infix_symbol5472); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    sym_tree = (ColsAST)adaptor.dupNode(sym);

                    adaptor.addChild(root_0, sym_tree);
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 4 :
                    // RBuilder.g:1282:46: sym= GT
                    {
                    _last = (ColsAST)input.LT(1);
                    sym=(ColsAST)match(input,GT,FOLLOW_GT_in_infix_symbol5478); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    sym_tree = (ColsAST)adaptor.dupNode(sym);

                    adaptor.addChild(root_0, sym_tree);
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 5 :
                    // RBuilder.g:1282:55: sym= LT_EQL
                    {
                    _last = (ColsAST)input.LT(1);
                    sym=(ColsAST)match(input,LT_EQL,FOLLOW_LT_EQL_in_infix_symbol5484); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    sym_tree = (ColsAST)adaptor.dupNode(sym);

                    adaptor.addChild(root_0, sym_tree);
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 6 :
                    // RBuilder.g:1282:68: sym= GT_EQL
                    {
                    _last = (ColsAST)input.LT(1);
                    sym=(ColsAST)match(input,GT_EQL,FOLLOW_GT_EQL_in_infix_symbol5490); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    sym_tree = (ColsAST)adaptor.dupNode(sym);

                    adaptor.addChild(root_0, sym_tree);
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 7 :
                    // RBuilder.g:1283:11: sym= PLUS
                    {
                    _last = (ColsAST)input.LT(1);
                    sym=(ColsAST)match(input,PLUS,FOLLOW_PLUS_in_infix_symbol5504); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    sym_tree = (ColsAST)adaptor.dupNode(sym);

                    adaptor.addChild(root_0, sym_tree);
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 8 :
                    // RBuilder.g:1283:22: sym= MINUS
                    {
                    _last = (ColsAST)input.LT(1);
                    sym=(ColsAST)match(input,MINUS,FOLLOW_MINUS_in_infix_symbol5510); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    sym_tree = (ColsAST)adaptor.dupNode(sym);

                    adaptor.addChild(root_0, sym_tree);
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 9 :
                    // RBuilder.g:1283:34: sym= MULTIPLY
                    {
                    _last = (ColsAST)input.LT(1);
                    sym=(ColsAST)match(input,MULTIPLY,FOLLOW_MULTIPLY_in_infix_symbol5516); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    sym_tree = (ColsAST)adaptor.dupNode(sym);

                    adaptor.addChild(root_0, sym_tree);
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 10 :
                    // RBuilder.g:1283:49: sym= DIVIDE
                    {
                    _last = (ColsAST)input.LT(1);
                    sym=(ColsAST)match(input,DIVIDE,FOLLOW_DIVIDE_in_infix_symbol5522); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    sym_tree = (ColsAST)adaptor.dupNode(sym);

                    adaptor.addChild(root_0, sym_tree);
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 11 :
                    // RBuilder.g:1283:62: sym= EXP
                    {
                    _last = (ColsAST)input.LT(1);
                    sym=(ColsAST)match(input,EXP,FOLLOW_EXP_in_infix_symbol5528); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    sym_tree = (ColsAST)adaptor.dupNode(sym);

                    adaptor.addChild(root_0, sym_tree);
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 12 :
                    // RBuilder.g:1284:11: sym= MOD
                    {
                    _last = (ColsAST)input.LT(1);
                    sym=(ColsAST)match(input,MOD,FOLLOW_MOD_in_infix_symbol5542); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    sym_tree = (ColsAST)adaptor.dupNode(sym);

                    adaptor.addChild(root_0, sym_tree);
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 13 :
                    // RBuilder.g:1284:21: sym= REM
                    {
                    _last = (ColsAST)input.LT(1);
                    sym=(ColsAST)match(input,REM,FOLLOW_REM_in_infix_symbol5548); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    sym_tree = (ColsAST)adaptor.dupNode(sym);

                    adaptor.addChild(root_0, sym_tree);
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 14 :
                    // RBuilder.g:1284:31: sym= DIV
                    {
                    _last = (ColsAST)input.LT(1);
                    sym=(ColsAST)match(input,DIV,FOLLOW_DIV_in_infix_symbol5554); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    sym_tree = (ColsAST)adaptor.dupNode(sym);

                    adaptor.addChild(root_0, sym_tree);
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 15 :
                    // RBuilder.g:1284:41: sym= IMPLIES
                    {
                    _last = (ColsAST)input.LT(1);
                    sym=(ColsAST)match(input,IMPLIES,FOLLOW_IMPLIES_in_infix_symbol5560); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    sym_tree = (ColsAST)adaptor.dupNode(sym);

                    adaptor.addChild(root_0, sym_tree);
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 16 :
                    // RBuilder.g:1284:55: sym= IFF
                    {
                    _last = (ColsAST)input.LT(1);
                    sym=(ColsAST)match(input,IFF,FOLLOW_IFF_in_infix_symbol5566); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    sym_tree = (ColsAST)adaptor.dupNode(sym);

                    adaptor.addChild(root_0, sym_tree);
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 17 :
                    // RBuilder.g:1284:65: sym= AND
                    {
                    _last = (ColsAST)input.LT(1);
                    sym=(ColsAST)match(input,AND,FOLLOW_AND_in_infix_symbol5572); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    sym_tree = (ColsAST)adaptor.dupNode(sym);

                    adaptor.addChild(root_0, sym_tree);
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 18 :
                    // RBuilder.g:1285:11: sym= OR
                    {
                    _last = (ColsAST)input.LT(1);
                    sym=(ColsAST)match(input,OR,FOLLOW_OR_in_infix_symbol5586); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    sym_tree = (ColsAST)adaptor.dupNode(sym);

                    adaptor.addChild(root_0, sym_tree);
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 19 :
                    // RBuilder.g:1285:20: sym= XOR
                    {
                    _last = (ColsAST)input.LT(1);
                    sym=(ColsAST)match(input,XOR,FOLLOW_XOR_in_infix_symbol5592); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    sym_tree = (ColsAST)adaptor.dupNode(sym);

                    adaptor.addChild(root_0, sym_tree);
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 20 :
                    // RBuilder.g:1285:30: sym= ANDTHEN
                    {
                    _last = (ColsAST)input.LT(1);
                    sym=(ColsAST)match(input,ANDTHEN,FOLLOW_ANDTHEN_in_infix_symbol5598); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    sym_tree = (ColsAST)adaptor.dupNode(sym);

                    adaptor.addChild(root_0, sym_tree);
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 21 :
                    // RBuilder.g:1285:44: sym= ORELSE
                    {
                    _last = (ColsAST)input.LT(1);
                    sym=(ColsAST)match(input,ORELSE,FOLLOW_ORELSE_in_infix_symbol5604); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    sym_tree = (ColsAST)adaptor.dupNode(sym);

                    adaptor.addChild(root_0, sym_tree);
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 22 :
                    // RBuilder.g:1285:57: sym= COMPLEMENT
                    {
                    _last = (ColsAST)input.LT(1);
                    sym=(ColsAST)match(input,COMPLEMENT,FOLLOW_COMPLEMENT_in_infix_symbol5610); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    sym_tree = (ColsAST)adaptor.dupNode(sym);

                    adaptor.addChild(root_0, sym_tree);
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 23 :
                    // RBuilder.g:1285:74: sym= IN
                    {
                    _last = (ColsAST)input.LT(1);
                    sym=(ColsAST)match(input,IN,FOLLOW_IN_in_infix_symbol5616); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    sym_tree = (ColsAST)adaptor.dupNode(sym);

                    adaptor.addChild(root_0, sym_tree);
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 24 :
                    // RBuilder.g:1286:11: sym= NOT_IN
                    {
                    _last = (ColsAST)input.LT(1);
                    sym=(ColsAST)match(input,NOT_IN,FOLLOW_NOT_IN_in_infix_symbol5630); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    sym_tree = (ColsAST)adaptor.dupNode(sym);

                    adaptor.addChild(root_0, sym_tree);
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 25 :
                    // RBuilder.g:1286:24: sym= RANGE
                    {
                    _last = (ColsAST)input.LT(1);
                    sym=(ColsAST)match(input,RANGE,FOLLOW_RANGE_in_infix_symbol5636); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    sym_tree = (ColsAST)adaptor.dupNode(sym);

                    adaptor.addChild(root_0, sym_tree);
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 26 :
                    // RBuilder.g:1286:36: sym= UNION
                    {
                    _last = (ColsAST)input.LT(1);
                    sym=(ColsAST)match(input,UNION,FOLLOW_UNION_in_infix_symbol5642); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    sym_tree = (ColsAST)adaptor.dupNode(sym);

                    adaptor.addChild(root_0, sym_tree);
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 27 :
                    // RBuilder.g:1286:48: sym= INTERSECT
                    {
                    _last = (ColsAST)input.LT(1);
                    sym=(ColsAST)match(input,INTERSECT,FOLLOW_INTERSECT_in_infix_symbol5648); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    sym_tree = (ColsAST)adaptor.dupNode(sym);

                    adaptor.addChild(root_0, sym_tree);
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 28 :
                    // RBuilder.g:1286:64: sym= WITHOUT
                    {
                    _last = (ColsAST)input.LT(1);
                    sym=(ColsAST)match(input,WITHOUT,FOLLOW_WITHOUT_in_infix_symbol5654); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    sym_tree = (ColsAST)adaptor.dupNode(sym);

                    adaptor.addChild(root_0, sym_tree);
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 29 :
                    // RBuilder.g:1287:11: sym= SUBSET
                    {
                    _last = (ColsAST)input.LT(1);
                    sym=(ColsAST)match(input,SUBSET,FOLLOW_SUBSET_in_infix_symbol5668); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    sym_tree = (ColsAST)adaptor.dupNode(sym);

                    adaptor.addChild(root_0, sym_tree);
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 30 :
                    // RBuilder.g:1287:24: sym= PROP_SUBSET
                    {
                    _last = (ColsAST)input.LT(1);
                    sym=(ColsAST)match(input,PROP_SUBSET,FOLLOW_PROP_SUBSET_in_infix_symbol5674); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    sym_tree = (ColsAST)adaptor.dupNode(sym);

                    adaptor.addChild(root_0, sym_tree);
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 31 :
                    // RBuilder.g:1287:42: sym= NOT_SUBSET
                    {
                    _last = (ColsAST)input.LT(1);
                    sym=(ColsAST)match(input,NOT_SUBSET,FOLLOW_NOT_SUBSET_in_infix_symbol5680); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    sym_tree = (ColsAST)adaptor.dupNode(sym);

                    adaptor.addChild(root_0, sym_tree);
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 32 :
                    // RBuilder.g:1287:59: sym= NOT_PROP_SUBSET
                    {
                    _last = (ColsAST)input.LT(1);
                    sym=(ColsAST)match(input,NOT_PROP_SUBSET,FOLLOW_NOT_PROP_SUBSET_in_infix_symbol5686); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    sym_tree = (ColsAST)adaptor.dupNode(sym);

                    adaptor.addChild(root_0, sym_tree);
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 33 :
                    // RBuilder.g:1288:11: sym= CAT
                    {
                    _last = (ColsAST)input.LT(1);
                    sym=(ColsAST)match(input,CAT,FOLLOW_CAT_in_infix_symbol5700); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    sym_tree = (ColsAST)adaptor.dupNode(sym);

                    adaptor.addChild(root_0, sym_tree);
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 34 :
                    // RBuilder.g:1288:21: sym= SUBSTR
                    {
                    _last = (ColsAST)input.LT(1);
                    sym=(ColsAST)match(input,SUBSTR,FOLLOW_SUBSTR_in_infix_symbol5706); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    sym_tree = (ColsAST)adaptor.dupNode(sym);

                    adaptor.addChild(root_0, sym_tree);
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 35 :
                    // RBuilder.g:1288:34: sym= NOT_SUBSTR
                    {
                    _last = (ColsAST)input.LT(1);
                    sym=(ColsAST)match(input,NOT_SUBSTR,FOLLOW_NOT_SUBSTR_in_infix_symbol5712); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    sym_tree = (ColsAST)adaptor.dupNode(sym);

                    adaptor.addChild(root_0, sym_tree);
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }

            if ( state.backtracking==0 ) {
               retval.ps = getPosSymbol(sym); 
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "infix_symbol"

    public static class prefix_symbol_return extends TreeRuleReturnScope {
        public PosSymbol ps = null;
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prefix_symbol"
    // RBuilder.g:1293:1: prefix_symbol returns [PosSymbol ps = null] : (sym= PLUS | sym= MINUS | sym= NOT | sym= ABS | sym= COMPLEMENT ) ;
    public final RBuilder.prefix_symbol_return prefix_symbol() throws RecognitionException {
        RBuilder.prefix_symbol_return retval = new RBuilder.prefix_symbol_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        ColsAST _first_0 = null;
        ColsAST _last = null;

        ColsAST sym=null;

        ColsAST sym_tree=null;

        try {
            // RBuilder.g:1294:5: ( (sym= PLUS | sym= MINUS | sym= NOT | sym= ABS | sym= COMPLEMENT ) )
            // RBuilder.g:1294:7: (sym= PLUS | sym= MINUS | sym= NOT | sym= ABS | sym= COMPLEMENT )
            {
            root_0 = (ColsAST)adaptor.nil();

            // RBuilder.g:1294:7: (sym= PLUS | sym= MINUS | sym= NOT | sym= ABS | sym= COMPLEMENT )
            int alt77=5;
            switch ( input.LA(1) ) {
            case PLUS:
                {
                alt77=1;
                }
                break;
            case MINUS:
                {
                alt77=2;
                }
                break;
            case NOT:
                {
                alt77=3;
                }
                break;
            case ABS:
                {
                alt77=4;
                }
                break;
            case COMPLEMENT:
                {
                alt77=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 77, 0, input);

                throw nvae;
            }

            switch (alt77) {
                case 1 :
                    // RBuilder.g:1294:8: sym= PLUS
                    {
                    _last = (ColsAST)input.LT(1);
                    sym=(ColsAST)match(input,PLUS,FOLLOW_PLUS_in_prefix_symbol5756); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    sym_tree = (ColsAST)adaptor.dupNode(sym);

                    adaptor.addChild(root_0, sym_tree);
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // RBuilder.g:1294:19: sym= MINUS
                    {
                    _last = (ColsAST)input.LT(1);
                    sym=(ColsAST)match(input,MINUS,FOLLOW_MINUS_in_prefix_symbol5762); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    sym_tree = (ColsAST)adaptor.dupNode(sym);

                    adaptor.addChild(root_0, sym_tree);
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 3 :
                    // RBuilder.g:1294:31: sym= NOT
                    {
                    _last = (ColsAST)input.LT(1);
                    sym=(ColsAST)match(input,NOT,FOLLOW_NOT_in_prefix_symbol5768); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    sym_tree = (ColsAST)adaptor.dupNode(sym);

                    adaptor.addChild(root_0, sym_tree);
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 4 :
                    // RBuilder.g:1294:41: sym= ABS
                    {
                    _last = (ColsAST)input.LT(1);
                    sym=(ColsAST)match(input,ABS,FOLLOW_ABS_in_prefix_symbol5774); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    sym_tree = (ColsAST)adaptor.dupNode(sym);

                    adaptor.addChild(root_0, sym_tree);
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 5 :
                    // RBuilder.g:1294:51: sym= COMPLEMENT
                    {
                    _last = (ColsAST)input.LT(1);
                    sym=(ColsAST)match(input,COMPLEMENT,FOLLOW_COMPLEMENT_in_prefix_symbol5780); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    sym_tree = (ColsAST)adaptor.dupNode(sym);

                    adaptor.addChild(root_0, sym_tree);
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }

            if ( state.backtracking==0 ) {
               retval.ps = getPosSymbol(sym); 
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "prefix_symbol"

    public static class quant_symbol_return extends TreeRuleReturnScope {
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "quant_symbol"
    // RBuilder.g:1297:1: quant_symbol : ( BIG_UNION | BIG_INTERSECT | BIG_SUM | BIG_PRODUCT | BIG_CONCAT );
    public final RBuilder.quant_symbol_return quant_symbol() throws RecognitionException {
        RBuilder.quant_symbol_return retval = new RBuilder.quant_symbol_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        ColsAST _first_0 = null;
        ColsAST _last = null;

        ColsAST set60=null;

        ColsAST set60_tree=null;

        try {
            // RBuilder.g:1298:5: ( BIG_UNION | BIG_INTERSECT | BIG_SUM | BIG_PRODUCT | BIG_CONCAT )
            // RBuilder.g:
            {
            root_0 = (ColsAST)adaptor.nil();

            _last = (ColsAST)input.LT(1);
            set60=(ColsAST)input.LT(1);
            if ( (input.LA(1)>=BIG_UNION && input.LA(1)<=BIG_CONCAT) ) {
                input.consume();

                if ( state.backtracking==0 ) {
                set60_tree = (ColsAST)adaptor.dupNode(set60);

                adaptor.addChild(root_0, set60_tree);
                }
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }

            if ( state.backtracking==0 ) {
            } 

            }

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "quant_symbol"

    public static class operation_procedure_declaration_return extends TreeRuleReturnScope {
        public FacilityOperationDec dec = null;
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "operation_procedure_declaration"
    // RBuilder.g:1305:1: operation_procedure_declaration returns [FacilityOperationDec dec = null] : ^( OPERATION ps= ident pars= operation_formal_param_section (ty= program_type_expression )? (items2= affects_clause )* (req= requires_clause )? (ens= ensures_clause )? (decr= decreasing_clause )? (fac2= facility_declaration )* (vars2= variable_declaration )* (aux_vars2= aux_variable_declaration )* (sts= statement_sequence ) ) ;
    public final RBuilder.operation_procedure_declaration_return operation_procedure_declaration() throws RecognitionException {
        RBuilder.operation_procedure_declaration_return retval = new RBuilder.operation_procedure_declaration_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        ColsAST _first_0 = null;
        ColsAST _last = null;

        ColsAST OPERATION61=null;
        RBuilder.ident_return ps = null;

        RBuilder.operation_formal_param_section_return pars = null;

        RBuilder.program_type_expression_return ty = null;

        RBuilder.affects_clause_return items2 = null;

        RBuilder.requires_clause_return req = null;

        RBuilder.ensures_clause_return ens = null;

        RBuilder.decreasing_clause_return decr = null;

        RBuilder.facility_declaration_return fac2 = null;

        RBuilder.variable_declaration_return vars2 = null;

        RBuilder.aux_variable_declaration_return aux_vars2 = null;

        RBuilder.statement_sequence_return sts = null;


        ColsAST OPERATION61_tree=null;


            edu.clemson.cs.r2jt.collections.List<AffectsItem> items = new edu.clemson.cs.r2jt.collections.List<AffectsItem>("AffectsItem");
            edu.clemson.cs.r2jt.collections.List<FacilityDec> facs = new edu.clemson.cs.r2jt.collections.List<FacilityDec>("FacilityDec");
            edu.clemson.cs.r2jt.collections.List<VarDec> vars = new edu.clemson.cs.r2jt.collections.List<VarDec>("VarDec");
            edu.clemson.cs.r2jt.collections.List<AuxVarDec> aux_vars = new edu.clemson.cs.r2jt.collections.List<AuxVarDec>("AuxVarDec");

        try {
            // RBuilder.g:1312:5: ( ^( OPERATION ps= ident pars= operation_formal_param_section (ty= program_type_expression )? (items2= affects_clause )* (req= requires_clause )? (ens= ensures_clause )? (decr= decreasing_clause )? (fac2= facility_declaration )* (vars2= variable_declaration )* (aux_vars2= aux_variable_declaration )* (sts= statement_sequence ) ) )
            // RBuilder.g:1312:9: ^( OPERATION ps= ident pars= operation_formal_param_section (ty= program_type_expression )? (items2= affects_clause )* (req= requires_clause )? (ens= ensures_clause )? (decr= decreasing_clause )? (fac2= facility_declaration )* (vars2= variable_declaration )* (aux_vars2= aux_variable_declaration )* (sts= statement_sequence ) )
            {
            root_0 = (ColsAST)adaptor.nil();

            _last = (ColsAST)input.LT(1);
            {
            ColsAST _save_last_1 = _last;
            ColsAST _first_1 = null;
            ColsAST root_1 = (ColsAST)adaptor.nil();_last = (ColsAST)input.LT(1);
            OPERATION61=(ColsAST)match(input,OPERATION,FOLLOW_OPERATION_in_operation_procedure_declaration5854); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            OPERATION61_tree = (ColsAST)adaptor.dupNode(OPERATION61);

            root_1 = (ColsAST)adaptor.becomeRoot(OPERATION61_tree, root_1);
            }


            match(input, Token.DOWN, null); if (state.failed) return retval;
            _last = (ColsAST)input.LT(1);
            pushFollow(FOLLOW_ident_in_operation_procedure_declaration5858);
            ps=ident();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, ps.getTree());
            _last = (ColsAST)input.LT(1);
            pushFollow(FOLLOW_operation_formal_param_section_in_operation_procedure_declaration5874);
            pars=operation_formal_param_section();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, pars.getTree());
            // RBuilder.g:1314:13: (ty= program_type_expression )?
            int alt78=2;
            int LA78_0 = input.LA(1);

            if ( (LA78_0==ARRAY||LA78_0==TYPEX) ) {
                alt78=1;
            }
            switch (alt78) {
                case 1 :
                    // RBuilder.g:1314:14: ty= program_type_expression
                    {
                    _last = (ColsAST)input.LT(1);
                    pushFollow(FOLLOW_program_type_expression_in_operation_procedure_declaration5891);
                    ty=program_type_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, ty.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }

            // RBuilder.g:1315:13: (items2= affects_clause )*
            loop79:
            do {
                int alt79=2;
                int LA79_0 = input.LA(1);

                if ( (LA79_0==AFFECTS) ) {
                    alt79=1;
                }


                switch (alt79) {
            	case 1 :
            	    // RBuilder.g:1315:14: items2= affects_clause
            	    {
            	    _last = (ColsAST)input.LT(1);
            	    pushFollow(FOLLOW_affects_clause_in_operation_procedure_declaration5910);
            	    items2=affects_clause();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) 
            	    adaptor.addChild(root_1, items2.getTree());
            	    if ( state.backtracking==0 ) {
            	       items.addAll((items2!=null?items2.items:null)); 
            	    }

            	    if ( state.backtracking==0 ) {
            	    }
            	    }
            	    break;

            	default :
            	    break loop79;
                }
            } while (true);

            // RBuilder.g:1316:13: (req= requires_clause )?
            int alt80=2;
            int LA80_0 = input.LA(1);

            if ( (LA80_0==REQUIRES) ) {
                alt80=1;
            }
            switch (alt80) {
                case 1 :
                    // RBuilder.g:1316:14: req= requires_clause
                    {
                    _last = (ColsAST)input.LT(1);
                    pushFollow(FOLLOW_requires_clause_in_operation_procedure_declaration5931);
                    req=requires_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, req.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }

            // RBuilder.g:1317:13: (ens= ensures_clause )?
            int alt81=2;
            int LA81_0 = input.LA(1);

            if ( (LA81_0==ENSURES) ) {
                alt81=1;
            }
            switch (alt81) {
                case 1 :
                    // RBuilder.g:1317:14: ens= ensures_clause
                    {
                    _last = (ColsAST)input.LT(1);
                    pushFollow(FOLLOW_ensures_clause_in_operation_procedure_declaration5950);
                    ens=ensures_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, ens.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }

            // RBuilder.g:1318:13: (decr= decreasing_clause )?
            int alt82=2;
            int LA82_0 = input.LA(1);

            if ( (LA82_0==DECREASING) ) {
                alt82=1;
            }
            switch (alt82) {
                case 1 :
                    // RBuilder.g:1318:14: decr= decreasing_clause
                    {
                    _last = (ColsAST)input.LT(1);
                    pushFollow(FOLLOW_decreasing_clause_in_operation_procedure_declaration5969);
                    decr=decreasing_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, decr.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }

            // RBuilder.g:1319:13: (fac2= facility_declaration )*
            loop83:
            do {
                int alt83=2;
                int LA83_0 = input.LA(1);

                if ( (LA83_0==FACILITY) ) {
                    alt83=1;
                }


                switch (alt83) {
            	case 1 :
            	    // RBuilder.g:1319:14: fac2= facility_declaration
            	    {
            	    _last = (ColsAST)input.LT(1);
            	    pushFollow(FOLLOW_facility_declaration_in_operation_procedure_declaration5988);
            	    fac2=facility_declaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) 
            	    adaptor.addChild(root_1, fac2.getTree());
            	    if ( state.backtracking==0 ) {
            	       facs.add((fac2!=null?fac2.dec:null)); 
            	    }

            	    if ( state.backtracking==0 ) {
            	    }
            	    }
            	    break;

            	default :
            	    break loop83;
                }
            } while (true);

            // RBuilder.g:1320:13: (vars2= variable_declaration )*
            loop84:
            do {
                int alt84=2;
                int LA84_0 = input.LA(1);

                if ( (LA84_0==VAR) ) {
                    alt84=1;
                }


                switch (alt84) {
            	case 1 :
            	    // RBuilder.g:1320:14: vars2= variable_declaration
            	    {
            	    _last = (ColsAST)input.LT(1);
            	    pushFollow(FOLLOW_variable_declaration_in_operation_procedure_declaration6009);
            	    vars2=variable_declaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) 
            	    adaptor.addChild(root_1, vars2.getTree());
            	    if ( state.backtracking==0 ) {
            	       vars.addAll((vars2!=null?vars2.decs:null)); 
            	    }

            	    if ( state.backtracking==0 ) {
            	    }
            	    }
            	    break;

            	default :
            	    break loop84;
                }
            } while (true);

            // RBuilder.g:1321:13: (aux_vars2= aux_variable_declaration )*
            loop85:
            do {
                int alt85=2;
                int LA85_0 = input.LA(1);

                if ( (LA85_0==AUX_VAR) ) {
                    alt85=1;
                }


                switch (alt85) {
            	case 1 :
            	    // RBuilder.g:1321:14: aux_vars2= aux_variable_declaration
            	    {
            	    _last = (ColsAST)input.LT(1);
            	    pushFollow(FOLLOW_aux_variable_declaration_in_operation_procedure_declaration6030);
            	    aux_vars2=aux_variable_declaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) 
            	    adaptor.addChild(root_1, aux_vars2.getTree());
            	    if ( state.backtracking==0 ) {
            	       aux_vars.addAll((aux_vars2!=null?aux_vars2.decs:null)); 
            	    }

            	    if ( state.backtracking==0 ) {
            	    }
            	    }
            	    break;

            	default :
            	    break loop85;
                }
            } while (true);

            // RBuilder.g:1322:13: (sts= statement_sequence )
            // RBuilder.g:1322:14: sts= statement_sequence
            {
            _last = (ColsAST)input.LT(1);
            pushFollow(FOLLOW_statement_sequence_in_operation_procedure_declaration6051);
            sts=statement_sequence();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, sts.getTree());

            if ( state.backtracking==0 ) {
            }
            }


            match(input, Token.UP, null); if (state.failed) return retval;adaptor.addChild(root_0, root_1);_last = _save_last_1;
            }

            if ( state.backtracking==0 ) {
                 retval.dec = new FacilityOperationDec((ps!=null?ps.ps:null), (pars!=null?pars.decs:null), (ty!=null?ty.ty:null), items,
                              (req!=null?req.exp:null), (ens!=null?ens.exp:null), (decr!=null?decr.exp:null), facs, vars, aux_vars, (sts!=null?sts.stmts:null));
                      
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "operation_procedure_declaration"

    public static class operation_recursive_procedure_declaration_return extends TreeRuleReturnScope {
        public FacilityOperationDec dec = null;
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "operation_recursive_procedure_declaration"
    // RBuilder.g:1329:1: operation_recursive_procedure_declaration returns [FacilityOperationDec dec = null] : ^( RECURSIVE_OPERATION_PROCEDURE ps= ident pars= operation_formal_param_section (ty= program_type_expression )? (items2= affects_clause )* (req= requires_clause )? (ens= ensures_clause )? decr= decreasing_clause (fac2= facility_declaration )* (vars2= variable_declaration )* (aux_vars2= aux_variable_declaration )* (sts= statement_sequence ) ) ;
    public final RBuilder.operation_recursive_procedure_declaration_return operation_recursive_procedure_declaration() throws RecognitionException {
        RBuilder.operation_recursive_procedure_declaration_return retval = new RBuilder.operation_recursive_procedure_declaration_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        ColsAST _first_0 = null;
        ColsAST _last = null;

        ColsAST RECURSIVE_OPERATION_PROCEDURE62=null;
        RBuilder.ident_return ps = null;

        RBuilder.operation_formal_param_section_return pars = null;

        RBuilder.program_type_expression_return ty = null;

        RBuilder.affects_clause_return items2 = null;

        RBuilder.requires_clause_return req = null;

        RBuilder.ensures_clause_return ens = null;

        RBuilder.decreasing_clause_return decr = null;

        RBuilder.facility_declaration_return fac2 = null;

        RBuilder.variable_declaration_return vars2 = null;

        RBuilder.aux_variable_declaration_return aux_vars2 = null;

        RBuilder.statement_sequence_return sts = null;


        ColsAST RECURSIVE_OPERATION_PROCEDURE62_tree=null;


            edu.clemson.cs.r2jt.collections.List<AffectsItem> items = new edu.clemson.cs.r2jt.collections.List<AffectsItem>("AffectsItem");
            edu.clemson.cs.r2jt.collections.List<FacilityDec> facs = new edu.clemson.cs.r2jt.collections.List<FacilityDec>("FacilityDec");
            edu.clemson.cs.r2jt.collections.List<VarDec> vars = new edu.clemson.cs.r2jt.collections.List<VarDec>("VarDec");
            edu.clemson.cs.r2jt.collections.List<AuxVarDec> aux_vars = new edu.clemson.cs.r2jt.collections.List<AuxVarDec>("AuxVarDec");

        try {
            // RBuilder.g:1336:5: ( ^( RECURSIVE_OPERATION_PROCEDURE ps= ident pars= operation_formal_param_section (ty= program_type_expression )? (items2= affects_clause )* (req= requires_clause )? (ens= ensures_clause )? decr= decreasing_clause (fac2= facility_declaration )* (vars2= variable_declaration )* (aux_vars2= aux_variable_declaration )* (sts= statement_sequence ) ) )
            // RBuilder.g:1336:9: ^( RECURSIVE_OPERATION_PROCEDURE ps= ident pars= operation_formal_param_section (ty= program_type_expression )? (items2= affects_clause )* (req= requires_clause )? (ens= ensures_clause )? decr= decreasing_clause (fac2= facility_declaration )* (vars2= variable_declaration )* (aux_vars2= aux_variable_declaration )* (sts= statement_sequence ) )
            {
            root_0 = (ColsAST)adaptor.nil();

            _last = (ColsAST)input.LT(1);
            {
            ColsAST _save_last_1 = _last;
            ColsAST _first_1 = null;
            ColsAST root_1 = (ColsAST)adaptor.nil();_last = (ColsAST)input.LT(1);
            RECURSIVE_OPERATION_PROCEDURE62=(ColsAST)match(input,RECURSIVE_OPERATION_PROCEDURE,FOLLOW_RECURSIVE_OPERATION_PROCEDURE_in_operation_recursive_procedure_declaration6106); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RECURSIVE_OPERATION_PROCEDURE62_tree = (ColsAST)adaptor.dupNode(RECURSIVE_OPERATION_PROCEDURE62);

            root_1 = (ColsAST)adaptor.becomeRoot(RECURSIVE_OPERATION_PROCEDURE62_tree, root_1);
            }


            match(input, Token.DOWN, null); if (state.failed) return retval;
            _last = (ColsAST)input.LT(1);
            pushFollow(FOLLOW_ident_in_operation_recursive_procedure_declaration6110);
            ps=ident();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, ps.getTree());
            _last = (ColsAST)input.LT(1);
            pushFollow(FOLLOW_operation_formal_param_section_in_operation_recursive_procedure_declaration6126);
            pars=operation_formal_param_section();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, pars.getTree());
            // RBuilder.g:1338:13: (ty= program_type_expression )?
            int alt86=2;
            int LA86_0 = input.LA(1);

            if ( (LA86_0==ARRAY||LA86_0==TYPEX) ) {
                alt86=1;
            }
            switch (alt86) {
                case 1 :
                    // RBuilder.g:1338:14: ty= program_type_expression
                    {
                    _last = (ColsAST)input.LT(1);
                    pushFollow(FOLLOW_program_type_expression_in_operation_recursive_procedure_declaration6143);
                    ty=program_type_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, ty.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }

            // RBuilder.g:1339:13: (items2= affects_clause )*
            loop87:
            do {
                int alt87=2;
                int LA87_0 = input.LA(1);

                if ( (LA87_0==AFFECTS) ) {
                    alt87=1;
                }


                switch (alt87) {
            	case 1 :
            	    // RBuilder.g:1339:14: items2= affects_clause
            	    {
            	    _last = (ColsAST)input.LT(1);
            	    pushFollow(FOLLOW_affects_clause_in_operation_recursive_procedure_declaration6162);
            	    items2=affects_clause();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) 
            	    adaptor.addChild(root_1, items2.getTree());
            	    if ( state.backtracking==0 ) {
            	       items.addAll((items2!=null?items2.items:null)); 
            	    }

            	    if ( state.backtracking==0 ) {
            	    }
            	    }
            	    break;

            	default :
            	    break loop87;
                }
            } while (true);

            // RBuilder.g:1340:13: (req= requires_clause )?
            int alt88=2;
            int LA88_0 = input.LA(1);

            if ( (LA88_0==REQUIRES) ) {
                alt88=1;
            }
            switch (alt88) {
                case 1 :
                    // RBuilder.g:1340:14: req= requires_clause
                    {
                    _last = (ColsAST)input.LT(1);
                    pushFollow(FOLLOW_requires_clause_in_operation_recursive_procedure_declaration6183);
                    req=requires_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, req.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }

            // RBuilder.g:1341:13: (ens= ensures_clause )?
            int alt89=2;
            int LA89_0 = input.LA(1);

            if ( (LA89_0==ENSURES) ) {
                alt89=1;
            }
            switch (alt89) {
                case 1 :
                    // RBuilder.g:1341:14: ens= ensures_clause
                    {
                    _last = (ColsAST)input.LT(1);
                    pushFollow(FOLLOW_ensures_clause_in_operation_recursive_procedure_declaration6202);
                    ens=ensures_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, ens.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }

            _last = (ColsAST)input.LT(1);
            pushFollow(FOLLOW_decreasing_clause_in_operation_recursive_procedure_declaration6220);
            decr=decreasing_clause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, decr.getTree());
            // RBuilder.g:1343:13: (fac2= facility_declaration )*
            loop90:
            do {
                int alt90=2;
                int LA90_0 = input.LA(1);

                if ( (LA90_0==FACILITY) ) {
                    alt90=1;
                }


                switch (alt90) {
            	case 1 :
            	    // RBuilder.g:1343:14: fac2= facility_declaration
            	    {
            	    _last = (ColsAST)input.LT(1);
            	    pushFollow(FOLLOW_facility_declaration_in_operation_recursive_procedure_declaration6237);
            	    fac2=facility_declaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) 
            	    adaptor.addChild(root_1, fac2.getTree());
            	    if ( state.backtracking==0 ) {
            	       facs.add((fac2!=null?fac2.dec:null)); 
            	    }

            	    if ( state.backtracking==0 ) {
            	    }
            	    }
            	    break;

            	default :
            	    break loop90;
                }
            } while (true);

            // RBuilder.g:1344:13: (vars2= variable_declaration )*
            loop91:
            do {
                int alt91=2;
                int LA91_0 = input.LA(1);

                if ( (LA91_0==VAR) ) {
                    alt91=1;
                }


                switch (alt91) {
            	case 1 :
            	    // RBuilder.g:1344:14: vars2= variable_declaration
            	    {
            	    _last = (ColsAST)input.LT(1);
            	    pushFollow(FOLLOW_variable_declaration_in_operation_recursive_procedure_declaration6258);
            	    vars2=variable_declaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) 
            	    adaptor.addChild(root_1, vars2.getTree());
            	    if ( state.backtracking==0 ) {
            	       vars.addAll((vars2!=null?vars2.decs:null)); 
            	    }

            	    if ( state.backtracking==0 ) {
            	    }
            	    }
            	    break;

            	default :
            	    break loop91;
                }
            } while (true);

            // RBuilder.g:1345:13: (aux_vars2= aux_variable_declaration )*
            loop92:
            do {
                int alt92=2;
                int LA92_0 = input.LA(1);

                if ( (LA92_0==AUX_VAR) ) {
                    alt92=1;
                }


                switch (alt92) {
            	case 1 :
            	    // RBuilder.g:1345:14: aux_vars2= aux_variable_declaration
            	    {
            	    _last = (ColsAST)input.LT(1);
            	    pushFollow(FOLLOW_aux_variable_declaration_in_operation_recursive_procedure_declaration6279);
            	    aux_vars2=aux_variable_declaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) 
            	    adaptor.addChild(root_1, aux_vars2.getTree());
            	    if ( state.backtracking==0 ) {
            	       aux_vars.addAll((aux_vars2!=null?aux_vars2.decs:null)); 
            	    }

            	    if ( state.backtracking==0 ) {
            	    }
            	    }
            	    break;

            	default :
            	    break loop92;
                }
            } while (true);

            // RBuilder.g:1346:13: (sts= statement_sequence )
            // RBuilder.g:1346:14: sts= statement_sequence
            {
            _last = (ColsAST)input.LT(1);
            pushFollow(FOLLOW_statement_sequence_in_operation_recursive_procedure_declaration6300);
            sts=statement_sequence();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, sts.getTree());

            if ( state.backtracking==0 ) {
            }
            }


            match(input, Token.UP, null); if (state.failed) return retval;adaptor.addChild(root_0, root_1);_last = _save_last_1;
            }

            if ( state.backtracking==0 ) {
                 retval.dec = new FacilityOperationDec((ps!=null?ps.ps:null), (pars!=null?pars.decs:null), (ty!=null?ty.ty:null), items,
                              (req!=null?req.exp:null), (ens!=null?ens.exp:null), (decr!=null?decr.exp:null), facs, vars, aux_vars, (sts!=null?sts.stmts:null), true);
                      
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "operation_recursive_procedure_declaration"

    public static class operation_declaration_return extends TreeRuleReturnScope {
        public OperationDec dec = null;
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "operation_declaration"
    // RBuilder.g:1353:1: operation_declaration returns [OperationDec dec = null] : ^( OPERATION ps= ident pars= operation_formal_param_section (ty= program_type_expression )? (items2= affects_clause )* (req= requires_clause )? (ens= ensures_clause )? ) ;
    public final RBuilder.operation_declaration_return operation_declaration() throws RecognitionException {
        RBuilder.operation_declaration_return retval = new RBuilder.operation_declaration_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        ColsAST _first_0 = null;
        ColsAST _last = null;

        ColsAST OPERATION63=null;
        RBuilder.ident_return ps = null;

        RBuilder.operation_formal_param_section_return pars = null;

        RBuilder.program_type_expression_return ty = null;

        RBuilder.affects_clause_return items2 = null;

        RBuilder.requires_clause_return req = null;

        RBuilder.ensures_clause_return ens = null;


        ColsAST OPERATION63_tree=null;


            edu.clemson.cs.r2jt.collections.List<AffectsItem> items = new edu.clemson.cs.r2jt.collections.List<AffectsItem>("AffectsItem");

        try {
            // RBuilder.g:1357:5: ( ^( OPERATION ps= ident pars= operation_formal_param_section (ty= program_type_expression )? (items2= affects_clause )* (req= requires_clause )? (ens= ensures_clause )? ) )
            // RBuilder.g:1357:9: ^( OPERATION ps= ident pars= operation_formal_param_section (ty= program_type_expression )? (items2= affects_clause )* (req= requires_clause )? (ens= ensures_clause )? )
            {
            root_0 = (ColsAST)adaptor.nil();

            _last = (ColsAST)input.LT(1);
            {
            ColsAST _save_last_1 = _last;
            ColsAST _first_1 = null;
            ColsAST root_1 = (ColsAST)adaptor.nil();_last = (ColsAST)input.LT(1);
            OPERATION63=(ColsAST)match(input,OPERATION,FOLLOW_OPERATION_in_operation_declaration6351); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            OPERATION63_tree = (ColsAST)adaptor.dupNode(OPERATION63);

            root_1 = (ColsAST)adaptor.becomeRoot(OPERATION63_tree, root_1);
            }


            match(input, Token.DOWN, null); if (state.failed) return retval;
            _last = (ColsAST)input.LT(1);
            pushFollow(FOLLOW_ident_in_operation_declaration6355);
            ps=ident();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, ps.getTree());
            _last = (ColsAST)input.LT(1);
            pushFollow(FOLLOW_operation_formal_param_section_in_operation_declaration6371);
            pars=operation_formal_param_section();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, pars.getTree());
            // RBuilder.g:1359:13: (ty= program_type_expression )?
            int alt93=2;
            int LA93_0 = input.LA(1);

            if ( (LA93_0==ARRAY||LA93_0==TYPEX) ) {
                alt93=1;
            }
            switch (alt93) {
                case 1 :
                    // RBuilder.g:1359:14: ty= program_type_expression
                    {
                    _last = (ColsAST)input.LT(1);
                    pushFollow(FOLLOW_program_type_expression_in_operation_declaration6388);
                    ty=program_type_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, ty.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }

            // RBuilder.g:1360:13: (items2= affects_clause )*
            loop94:
            do {
                int alt94=2;
                int LA94_0 = input.LA(1);

                if ( (LA94_0==AFFECTS) ) {
                    alt94=1;
                }


                switch (alt94) {
            	case 1 :
            	    // RBuilder.g:1360:14: items2= affects_clause
            	    {
            	    _last = (ColsAST)input.LT(1);
            	    pushFollow(FOLLOW_affects_clause_in_operation_declaration6407);
            	    items2=affects_clause();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) 
            	    adaptor.addChild(root_1, items2.getTree());
            	    if ( state.backtracking==0 ) {
            	       items.addAll((items2!=null?items2.items:null)); 
            	    }

            	    if ( state.backtracking==0 ) {
            	    }
            	    }
            	    break;

            	default :
            	    break loop94;
                }
            } while (true);

            // RBuilder.g:1361:13: (req= requires_clause )?
            int alt95=2;
            int LA95_0 = input.LA(1);

            if ( (LA95_0==REQUIRES) ) {
                alt95=1;
            }
            switch (alt95) {
                case 1 :
                    // RBuilder.g:1361:14: req= requires_clause
                    {
                    _last = (ColsAST)input.LT(1);
                    pushFollow(FOLLOW_requires_clause_in_operation_declaration6428);
                    req=requires_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, req.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }

            // RBuilder.g:1362:13: (ens= ensures_clause )?
            int alt96=2;
            int LA96_0 = input.LA(1);

            if ( (LA96_0==ENSURES) ) {
                alt96=1;
            }
            switch (alt96) {
                case 1 :
                    // RBuilder.g:1362:14: ens= ensures_clause
                    {
                    _last = (ColsAST)input.LT(1);
                    pushFollow(FOLLOW_ensures_clause_in_operation_declaration6447);
                    ens=ensures_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, ens.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }


            match(input, Token.UP, null); if (state.failed) return retval;adaptor.addChild(root_0, root_1);_last = _save_last_1;
            }

            if ( state.backtracking==0 ) {
               retval.dec = new OperationDec((ps!=null?ps.ps:null), (pars!=null?pars.decs:null), (ty!=null?ty.ty:null), items, (req!=null?req.exp:null), (ens!=null?ens.exp:null)); 
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "operation_declaration"

    public static class performance_operation_declaration_return extends TreeRuleReturnScope {
        public PerformanceOperationDec  dec = null;
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "performance_operation_declaration"
    // RBuilder.g:1367:1: performance_operation_declaration returns [PerformanceOperationDec dec = null] : ^( OPERATION ps= ident pars= operation_formal_param_section (ty= program_type_expression )? (items2= affects_clause )* (req= requires_clause )? (ens= ensures_clause )? (dur= duration_clause )? (msp= mainp_disp_clause )? ) ;
    public final RBuilder.performance_operation_declaration_return performance_operation_declaration() throws RecognitionException {
        RBuilder.performance_operation_declaration_return retval = new RBuilder.performance_operation_declaration_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        ColsAST _first_0 = null;
        ColsAST _last = null;

        ColsAST OPERATION64=null;
        RBuilder.ident_return ps = null;

        RBuilder.operation_formal_param_section_return pars = null;

        RBuilder.program_type_expression_return ty = null;

        RBuilder.affects_clause_return items2 = null;

        RBuilder.requires_clause_return req = null;

        RBuilder.ensures_clause_return ens = null;

        RBuilder.duration_clause_return dur = null;

        RBuilder.mainp_disp_clause_return msp = null;


        ColsAST OPERATION64_tree=null;


            edu.clemson.cs.r2jt.collections.List<AffectsItem> items = new edu.clemson.cs.r2jt.collections.List<AffectsItem>("AffectsItem");

        try {
            // RBuilder.g:1371:5: ( ^( OPERATION ps= ident pars= operation_formal_param_section (ty= program_type_expression )? (items2= affects_clause )* (req= requires_clause )? (ens= ensures_clause )? (dur= duration_clause )? (msp= mainp_disp_clause )? ) )
            // RBuilder.g:1371:9: ^( OPERATION ps= ident pars= operation_formal_param_section (ty= program_type_expression )? (items2= affects_clause )* (req= requires_clause )? (ens= ensures_clause )? (dur= duration_clause )? (msp= mainp_disp_clause )? )
            {
            root_0 = (ColsAST)adaptor.nil();

            _last = (ColsAST)input.LT(1);
            {
            ColsAST _save_last_1 = _last;
            ColsAST _first_1 = null;
            ColsAST root_1 = (ColsAST)adaptor.nil();_last = (ColsAST)input.LT(1);
            OPERATION64=(ColsAST)match(input,OPERATION,FOLLOW_OPERATION_in_performance_operation_declaration6503); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            OPERATION64_tree = (ColsAST)adaptor.dupNode(OPERATION64);

            root_1 = (ColsAST)adaptor.becomeRoot(OPERATION64_tree, root_1);
            }


            match(input, Token.DOWN, null); if (state.failed) return retval;
            _last = (ColsAST)input.LT(1);
            pushFollow(FOLLOW_ident_in_performance_operation_declaration6507);
            ps=ident();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, ps.getTree());
            _last = (ColsAST)input.LT(1);
            pushFollow(FOLLOW_operation_formal_param_section_in_performance_operation_declaration6523);
            pars=operation_formal_param_section();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, pars.getTree());
            // RBuilder.g:1373:13: (ty= program_type_expression )?
            int alt97=2;
            int LA97_0 = input.LA(1);

            if ( (LA97_0==ARRAY||LA97_0==TYPEX) ) {
                alt97=1;
            }
            switch (alt97) {
                case 1 :
                    // RBuilder.g:1373:14: ty= program_type_expression
                    {
                    _last = (ColsAST)input.LT(1);
                    pushFollow(FOLLOW_program_type_expression_in_performance_operation_declaration6540);
                    ty=program_type_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, ty.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }

            // RBuilder.g:1374:13: (items2= affects_clause )*
            loop98:
            do {
                int alt98=2;
                int LA98_0 = input.LA(1);

                if ( (LA98_0==AFFECTS) ) {
                    alt98=1;
                }


                switch (alt98) {
            	case 1 :
            	    // RBuilder.g:1374:14: items2= affects_clause
            	    {
            	    _last = (ColsAST)input.LT(1);
            	    pushFollow(FOLLOW_affects_clause_in_performance_operation_declaration6559);
            	    items2=affects_clause();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) 
            	    adaptor.addChild(root_1, items2.getTree());
            	    if ( state.backtracking==0 ) {
            	       items.addAll((items2!=null?items2.items:null)); 
            	    }

            	    if ( state.backtracking==0 ) {
            	    }
            	    }
            	    break;

            	default :
            	    break loop98;
                }
            } while (true);

            // RBuilder.g:1375:13: (req= requires_clause )?
            int alt99=2;
            int LA99_0 = input.LA(1);

            if ( (LA99_0==REQUIRES) ) {
                alt99=1;
            }
            switch (alt99) {
                case 1 :
                    // RBuilder.g:1375:14: req= requires_clause
                    {
                    _last = (ColsAST)input.LT(1);
                    pushFollow(FOLLOW_requires_clause_in_performance_operation_declaration6580);
                    req=requires_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, req.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }

            // RBuilder.g:1376:13: (ens= ensures_clause )?
            int alt100=2;
            int LA100_0 = input.LA(1);

            if ( (LA100_0==ENSURES) ) {
                alt100=1;
            }
            switch (alt100) {
                case 1 :
                    // RBuilder.g:1376:14: ens= ensures_clause
                    {
                    _last = (ColsAST)input.LT(1);
                    pushFollow(FOLLOW_ensures_clause_in_performance_operation_declaration6599);
                    ens=ensures_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, ens.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }

            // RBuilder.g:1377:13: (dur= duration_clause )?
            int alt101=2;
            int LA101_0 = input.LA(1);

            if ( (LA101_0==DURATION) ) {
                alt101=1;
            }
            switch (alt101) {
                case 1 :
                    // RBuilder.g:1377:14: dur= duration_clause
                    {
                    _last = (ColsAST)input.LT(1);
                    pushFollow(FOLLOW_duration_clause_in_performance_operation_declaration6618);
                    dur=duration_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, dur.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }

            // RBuilder.g:1378:13: (msp= mainp_disp_clause )?
            int alt102=2;
            int LA102_0 = input.LA(1);

            if ( (LA102_0==MAINP_DISP) ) {
                alt102=1;
            }
            switch (alt102) {
                case 1 :
                    // RBuilder.g:1378:14: msp= mainp_disp_clause
                    {
                    _last = (ColsAST)input.LT(1);
                    pushFollow(FOLLOW_mainp_disp_clause_in_performance_operation_declaration6637);
                    msp=mainp_disp_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, msp.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }


            match(input, Token.UP, null); if (state.failed) return retval;adaptor.addChild(root_0, root_1);_last = _save_last_1;
            }

            if ( state.backtracking==0 ) {
               retval.dec = new PerformanceOperationDec ((ps!=null?ps.ps:null), (pars!=null?pars.decs:null), (ty!=null?ty.ty:null), items, (req!=null?req.exp:null), (ens!=null?ens.exp:null), (dur!=null?dur.exp:null), (msp!=null?msp.exp:null)); 
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "performance_operation_declaration"

    public static class aux_operation_declaration_return extends TreeRuleReturnScope {
        public OperationDec dec = null;
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "aux_operation_declaration"
    // RBuilder.g:1383:1: aux_operation_declaration returns [OperationDec dec = null] : ^( AUX_OPERATION ps= ident pars= operation_formal_param_section (ty= program_type_expression )? (items2= affects_clause )* (req= requires_clause )? (ens= ensures_clause )? ) ;
    public final RBuilder.aux_operation_declaration_return aux_operation_declaration() throws RecognitionException {
        RBuilder.aux_operation_declaration_return retval = new RBuilder.aux_operation_declaration_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        ColsAST _first_0 = null;
        ColsAST _last = null;

        ColsAST AUX_OPERATION65=null;
        RBuilder.ident_return ps = null;

        RBuilder.operation_formal_param_section_return pars = null;

        RBuilder.program_type_expression_return ty = null;

        RBuilder.affects_clause_return items2 = null;

        RBuilder.requires_clause_return req = null;

        RBuilder.ensures_clause_return ens = null;


        ColsAST AUX_OPERATION65_tree=null;


            edu.clemson.cs.r2jt.collections.List<AffectsItem> items = new edu.clemson.cs.r2jt.collections.List<AffectsItem>("AffectsItem");

        try {
            // RBuilder.g:1387:5: ( ^( AUX_OPERATION ps= ident pars= operation_formal_param_section (ty= program_type_expression )? (items2= affects_clause )* (req= requires_clause )? (ens= ensures_clause )? ) )
            // RBuilder.g:1387:9: ^( AUX_OPERATION ps= ident pars= operation_formal_param_section (ty= program_type_expression )? (items2= affects_clause )* (req= requires_clause )? (ens= ensures_clause )? )
            {
            root_0 = (ColsAST)adaptor.nil();

            _last = (ColsAST)input.LT(1);
            {
            ColsAST _save_last_1 = _last;
            ColsAST _first_1 = null;
            ColsAST root_1 = (ColsAST)adaptor.nil();_last = (ColsAST)input.LT(1);
            AUX_OPERATION65=(ColsAST)match(input,AUX_OPERATION,FOLLOW_AUX_OPERATION_in_aux_operation_declaration6689); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            AUX_OPERATION65_tree = (ColsAST)adaptor.dupNode(AUX_OPERATION65);

            root_1 = (ColsAST)adaptor.becomeRoot(AUX_OPERATION65_tree, root_1);
            }


            match(input, Token.DOWN, null); if (state.failed) return retval;
            _last = (ColsAST)input.LT(1);
            pushFollow(FOLLOW_ident_in_aux_operation_declaration6693);
            ps=ident();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, ps.getTree());
            _last = (ColsAST)input.LT(1);
            pushFollow(FOLLOW_operation_formal_param_section_in_aux_operation_declaration6709);
            pars=operation_formal_param_section();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, pars.getTree());
            // RBuilder.g:1389:13: (ty= program_type_expression )?
            int alt103=2;
            int LA103_0 = input.LA(1);

            if ( (LA103_0==ARRAY||LA103_0==TYPEX) ) {
                alt103=1;
            }
            switch (alt103) {
                case 1 :
                    // RBuilder.g:1389:14: ty= program_type_expression
                    {
                    _last = (ColsAST)input.LT(1);
                    pushFollow(FOLLOW_program_type_expression_in_aux_operation_declaration6726);
                    ty=program_type_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, ty.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }

            // RBuilder.g:1390:13: (items2= affects_clause )*
            loop104:
            do {
                int alt104=2;
                int LA104_0 = input.LA(1);

                if ( (LA104_0==AFFECTS) ) {
                    alt104=1;
                }


                switch (alt104) {
            	case 1 :
            	    // RBuilder.g:1390:14: items2= affects_clause
            	    {
            	    _last = (ColsAST)input.LT(1);
            	    pushFollow(FOLLOW_affects_clause_in_aux_operation_declaration6745);
            	    items2=affects_clause();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) 
            	    adaptor.addChild(root_1, items2.getTree());
            	    if ( state.backtracking==0 ) {
            	       items.addAll((items2!=null?items2.items:null)); 
            	    }

            	    if ( state.backtracking==0 ) {
            	    }
            	    }
            	    break;

            	default :
            	    break loop104;
                }
            } while (true);

            // RBuilder.g:1391:13: (req= requires_clause )?
            int alt105=2;
            int LA105_0 = input.LA(1);

            if ( (LA105_0==REQUIRES) ) {
                alt105=1;
            }
            switch (alt105) {
                case 1 :
                    // RBuilder.g:1391:14: req= requires_clause
                    {
                    _last = (ColsAST)input.LT(1);
                    pushFollow(FOLLOW_requires_clause_in_aux_operation_declaration6766);
                    req=requires_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, req.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }

            // RBuilder.g:1392:13: (ens= ensures_clause )?
            int alt106=2;
            int LA106_0 = input.LA(1);

            if ( (LA106_0==ENSURES) ) {
                alt106=1;
            }
            switch (alt106) {
                case 1 :
                    // RBuilder.g:1392:14: ens= ensures_clause
                    {
                    _last = (ColsAST)input.LT(1);
                    pushFollow(FOLLOW_ensures_clause_in_aux_operation_declaration6785);
                    ens=ensures_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, ens.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }


            match(input, Token.UP, null); if (state.failed) return retval;adaptor.addChild(root_0, root_1);_last = _save_last_1;
            }

            if ( state.backtracking==0 ) {
               retval.dec = new OperationDec((ps!=null?ps.ps:null), (pars!=null?pars.decs:null), (ty!=null?ty.ty:null), items, (req!=null?req.exp:null), (ens!=null?ens.exp:null)); 
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "aux_operation_declaration"

    public static class procedure_declaration_return extends TreeRuleReturnScope {
        public ProcedureDec dec = null;
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "procedure_declaration"
    // RBuilder.g:1397:1: procedure_declaration returns [ProcedureDec dec = null] : ^( PROCEDURE ps= ident pars= operation_formal_param_section (ty= program_type_expression )? (items2= affects_clause )* (decr= decreasing_clause )? (fac2= facility_declaration )* (vars2= variable_declaration )* (aux_vars2= aux_variable_declaration )* (sts= statement_sequence ) ) ;
    public final RBuilder.procedure_declaration_return procedure_declaration() throws RecognitionException {
        RBuilder.procedure_declaration_return retval = new RBuilder.procedure_declaration_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        ColsAST _first_0 = null;
        ColsAST _last = null;

        ColsAST PROCEDURE66=null;
        RBuilder.ident_return ps = null;

        RBuilder.operation_formal_param_section_return pars = null;

        RBuilder.program_type_expression_return ty = null;

        RBuilder.affects_clause_return items2 = null;

        RBuilder.decreasing_clause_return decr = null;

        RBuilder.facility_declaration_return fac2 = null;

        RBuilder.variable_declaration_return vars2 = null;

        RBuilder.aux_variable_declaration_return aux_vars2 = null;

        RBuilder.statement_sequence_return sts = null;


        ColsAST PROCEDURE66_tree=null;


            edu.clemson.cs.r2jt.collections.List<AffectsItem> items = new edu.clemson.cs.r2jt.collections.List<AffectsItem>("AffectsItem");
            edu.clemson.cs.r2jt.collections.List<FacilityDec> facs = new edu.clemson.cs.r2jt.collections.List<FacilityDec>("FacilityDec");
            edu.clemson.cs.r2jt.collections.List<VarDec> vars = new edu.clemson.cs.r2jt.collections.List<VarDec>("VarDec");
            edu.clemson.cs.r2jt.collections.List<AuxVarDec> aux_vars = new edu.clemson.cs.r2jt.collections.List<AuxVarDec>("AuxVarDec");

        try {
            // RBuilder.g:1404:5: ( ^( PROCEDURE ps= ident pars= operation_formal_param_section (ty= program_type_expression )? (items2= affects_clause )* (decr= decreasing_clause )? (fac2= facility_declaration )* (vars2= variable_declaration )* (aux_vars2= aux_variable_declaration )* (sts= statement_sequence ) ) )
            // RBuilder.g:1404:9: ^( PROCEDURE ps= ident pars= operation_formal_param_section (ty= program_type_expression )? (items2= affects_clause )* (decr= decreasing_clause )? (fac2= facility_declaration )* (vars2= variable_declaration )* (aux_vars2= aux_variable_declaration )* (sts= statement_sequence ) )
            {
            root_0 = (ColsAST)adaptor.nil();

            _last = (ColsAST)input.LT(1);
            {
            ColsAST _save_last_1 = _last;
            ColsAST _first_1 = null;
            ColsAST root_1 = (ColsAST)adaptor.nil();_last = (ColsAST)input.LT(1);
            PROCEDURE66=(ColsAST)match(input,PROCEDURE,FOLLOW_PROCEDURE_in_procedure_declaration6837); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            PROCEDURE66_tree = (ColsAST)adaptor.dupNode(PROCEDURE66);

            root_1 = (ColsAST)adaptor.becomeRoot(PROCEDURE66_tree, root_1);
            }


            match(input, Token.DOWN, null); if (state.failed) return retval;
            _last = (ColsAST)input.LT(1);
            pushFollow(FOLLOW_ident_in_procedure_declaration6841);
            ps=ident();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, ps.getTree());
            _last = (ColsAST)input.LT(1);
            pushFollow(FOLLOW_operation_formal_param_section_in_procedure_declaration6857);
            pars=operation_formal_param_section();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, pars.getTree());
            // RBuilder.g:1406:13: (ty= program_type_expression )?
            int alt107=2;
            int LA107_0 = input.LA(1);

            if ( (LA107_0==ARRAY||LA107_0==TYPEX) ) {
                alt107=1;
            }
            switch (alt107) {
                case 1 :
                    // RBuilder.g:1406:14: ty= program_type_expression
                    {
                    _last = (ColsAST)input.LT(1);
                    pushFollow(FOLLOW_program_type_expression_in_procedure_declaration6874);
                    ty=program_type_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, ty.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }

            // RBuilder.g:1407:13: (items2= affects_clause )*
            loop108:
            do {
                int alt108=2;
                int LA108_0 = input.LA(1);

                if ( (LA108_0==AFFECTS) ) {
                    alt108=1;
                }


                switch (alt108) {
            	case 1 :
            	    // RBuilder.g:1407:14: items2= affects_clause
            	    {
            	    _last = (ColsAST)input.LT(1);
            	    pushFollow(FOLLOW_affects_clause_in_procedure_declaration6893);
            	    items2=affects_clause();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) 
            	    adaptor.addChild(root_1, items2.getTree());
            	    if ( state.backtracking==0 ) {
            	       items.addAll((items2!=null?items2.items:null)); 
            	    }

            	    if ( state.backtracking==0 ) {
            	    }
            	    }
            	    break;

            	default :
            	    break loop108;
                }
            } while (true);

            // RBuilder.g:1408:13: (decr= decreasing_clause )?
            int alt109=2;
            int LA109_0 = input.LA(1);

            if ( (LA109_0==DECREASING) ) {
                alt109=1;
            }
            switch (alt109) {
                case 1 :
                    // RBuilder.g:1408:14: decr= decreasing_clause
                    {
                    _last = (ColsAST)input.LT(1);
                    pushFollow(FOLLOW_decreasing_clause_in_procedure_declaration6914);
                    decr=decreasing_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, decr.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }

            // RBuilder.g:1409:13: (fac2= facility_declaration )*
            loop110:
            do {
                int alt110=2;
                int LA110_0 = input.LA(1);

                if ( (LA110_0==FACILITY) ) {
                    alt110=1;
                }


                switch (alt110) {
            	case 1 :
            	    // RBuilder.g:1409:14: fac2= facility_declaration
            	    {
            	    _last = (ColsAST)input.LT(1);
            	    pushFollow(FOLLOW_facility_declaration_in_procedure_declaration6933);
            	    fac2=facility_declaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) 
            	    adaptor.addChild(root_1, fac2.getTree());
            	    if ( state.backtracking==0 ) {
            	       facs.add((fac2!=null?fac2.dec:null)); 
            	    }

            	    if ( state.backtracking==0 ) {
            	    }
            	    }
            	    break;

            	default :
            	    break loop110;
                }
            } while (true);

            // RBuilder.g:1410:13: (vars2= variable_declaration )*
            loop111:
            do {
                int alt111=2;
                int LA111_0 = input.LA(1);

                if ( (LA111_0==VAR) ) {
                    alt111=1;
                }


                switch (alt111) {
            	case 1 :
            	    // RBuilder.g:1410:14: vars2= variable_declaration
            	    {
            	    _last = (ColsAST)input.LT(1);
            	    pushFollow(FOLLOW_variable_declaration_in_procedure_declaration6954);
            	    vars2=variable_declaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) 
            	    adaptor.addChild(root_1, vars2.getTree());
            	    if ( state.backtracking==0 ) {
            	       vars.addAll((vars2!=null?vars2.decs:null)); 
            	    }

            	    if ( state.backtracking==0 ) {
            	    }
            	    }
            	    break;

            	default :
            	    break loop111;
                }
            } while (true);

            // RBuilder.g:1411:13: (aux_vars2= aux_variable_declaration )*
            loop112:
            do {
                int alt112=2;
                int LA112_0 = input.LA(1);

                if ( (LA112_0==AUX_VAR) ) {
                    alt112=1;
                }


                switch (alt112) {
            	case 1 :
            	    // RBuilder.g:1411:14: aux_vars2= aux_variable_declaration
            	    {
            	    _last = (ColsAST)input.LT(1);
            	    pushFollow(FOLLOW_aux_variable_declaration_in_procedure_declaration6975);
            	    aux_vars2=aux_variable_declaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) 
            	    adaptor.addChild(root_1, aux_vars2.getTree());
            	    if ( state.backtracking==0 ) {
            	       aux_vars.addAll((aux_vars2!=null?aux_vars2.decs:null)); 
            	    }

            	    if ( state.backtracking==0 ) {
            	    }
            	    }
            	    break;

            	default :
            	    break loop112;
                }
            } while (true);

            // RBuilder.g:1412:13: (sts= statement_sequence )
            // RBuilder.g:1412:14: sts= statement_sequence
            {
            _last = (ColsAST)input.LT(1);
            pushFollow(FOLLOW_statement_sequence_in_procedure_declaration6996);
            sts=statement_sequence();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, sts.getTree());

            if ( state.backtracking==0 ) {
            }
            }


            match(input, Token.UP, null); if (state.failed) return retval;adaptor.addChild(root_0, root_1);_last = _save_last_1;
            }

            if ( state.backtracking==0 ) {
                 retval.dec = new ProcedureDec((ps!=null?ps.ps:null), (pars!=null?pars.decs:null), (ty!=null?ty.ty:null), items, (decr!=null?decr.exp:null),
                              facs, vars, aux_vars, (sts!=null?sts.stmts:null));
                      
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "procedure_declaration"

    public static class recursive_procedure_declaration_return extends TreeRuleReturnScope {
        public ProcedureDec dec = null;
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "recursive_procedure_declaration"
    // RBuilder.g:1419:1: recursive_procedure_declaration returns [ProcedureDec dec = null] : ^( RECURSIVE_PROCEDURE ps= ident pars= operation_formal_param_section (ty= program_type_expression )? (items2= affects_clause )* (decr= decreasing_clause )? (fac2= facility_declaration )* (vars2= variable_declaration )* (aux_vars2= aux_variable_declaration )* (sts= statement_sequence ) ) ;
    public final RBuilder.recursive_procedure_declaration_return recursive_procedure_declaration() throws RecognitionException {
        RBuilder.recursive_procedure_declaration_return retval = new RBuilder.recursive_procedure_declaration_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        ColsAST _first_0 = null;
        ColsAST _last = null;

        ColsAST RECURSIVE_PROCEDURE67=null;
        RBuilder.ident_return ps = null;

        RBuilder.operation_formal_param_section_return pars = null;

        RBuilder.program_type_expression_return ty = null;

        RBuilder.affects_clause_return items2 = null;

        RBuilder.decreasing_clause_return decr = null;

        RBuilder.facility_declaration_return fac2 = null;

        RBuilder.variable_declaration_return vars2 = null;

        RBuilder.aux_variable_declaration_return aux_vars2 = null;

        RBuilder.statement_sequence_return sts = null;


        ColsAST RECURSIVE_PROCEDURE67_tree=null;


            edu.clemson.cs.r2jt.collections.List<AffectsItem> items = new edu.clemson.cs.r2jt.collections.List<AffectsItem>("AffectsItem");
            edu.clemson.cs.r2jt.collections.List<FacilityDec> facs = new edu.clemson.cs.r2jt.collections.List<FacilityDec>("FacilityDec");
            edu.clemson.cs.r2jt.collections.List<VarDec> vars = new edu.clemson.cs.r2jt.collections.List<VarDec>("VarDec");
            edu.clemson.cs.r2jt.collections.List<AuxVarDec> aux_vars = new edu.clemson.cs.r2jt.collections.List<AuxVarDec>("AuxVarDec");

        try {
            // RBuilder.g:1426:5: ( ^( RECURSIVE_PROCEDURE ps= ident pars= operation_formal_param_section (ty= program_type_expression )? (items2= affects_clause )* (decr= decreasing_clause )? (fac2= facility_declaration )* (vars2= variable_declaration )* (aux_vars2= aux_variable_declaration )* (sts= statement_sequence ) ) )
            // RBuilder.g:1426:9: ^( RECURSIVE_PROCEDURE ps= ident pars= operation_formal_param_section (ty= program_type_expression )? (items2= affects_clause )* (decr= decreasing_clause )? (fac2= facility_declaration )* (vars2= variable_declaration )* (aux_vars2= aux_variable_declaration )* (sts= statement_sequence ) )
            {
            root_0 = (ColsAST)adaptor.nil();

            _last = (ColsAST)input.LT(1);
            {
            ColsAST _save_last_1 = _last;
            ColsAST _first_1 = null;
            ColsAST root_1 = (ColsAST)adaptor.nil();_last = (ColsAST)input.LT(1);
            RECURSIVE_PROCEDURE67=(ColsAST)match(input,RECURSIVE_PROCEDURE,FOLLOW_RECURSIVE_PROCEDURE_in_recursive_procedure_declaration7051); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RECURSIVE_PROCEDURE67_tree = (ColsAST)adaptor.dupNode(RECURSIVE_PROCEDURE67);

            root_1 = (ColsAST)adaptor.becomeRoot(RECURSIVE_PROCEDURE67_tree, root_1);
            }


            match(input, Token.DOWN, null); if (state.failed) return retval;
            _last = (ColsAST)input.LT(1);
            pushFollow(FOLLOW_ident_in_recursive_procedure_declaration7055);
            ps=ident();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, ps.getTree());
            _last = (ColsAST)input.LT(1);
            pushFollow(FOLLOW_operation_formal_param_section_in_recursive_procedure_declaration7071);
            pars=operation_formal_param_section();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, pars.getTree());
            // RBuilder.g:1428:13: (ty= program_type_expression )?
            int alt113=2;
            int LA113_0 = input.LA(1);

            if ( (LA113_0==ARRAY||LA113_0==TYPEX) ) {
                alt113=1;
            }
            switch (alt113) {
                case 1 :
                    // RBuilder.g:1428:14: ty= program_type_expression
                    {
                    _last = (ColsAST)input.LT(1);
                    pushFollow(FOLLOW_program_type_expression_in_recursive_procedure_declaration7088);
                    ty=program_type_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, ty.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }

            // RBuilder.g:1429:13: (items2= affects_clause )*
            loop114:
            do {
                int alt114=2;
                int LA114_0 = input.LA(1);

                if ( (LA114_0==AFFECTS) ) {
                    alt114=1;
                }


                switch (alt114) {
            	case 1 :
            	    // RBuilder.g:1429:14: items2= affects_clause
            	    {
            	    _last = (ColsAST)input.LT(1);
            	    pushFollow(FOLLOW_affects_clause_in_recursive_procedure_declaration7107);
            	    items2=affects_clause();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) 
            	    adaptor.addChild(root_1, items2.getTree());
            	    if ( state.backtracking==0 ) {
            	       items.addAll((items2!=null?items2.items:null)); 
            	    }

            	    if ( state.backtracking==0 ) {
            	    }
            	    }
            	    break;

            	default :
            	    break loop114;
                }
            } while (true);

            // RBuilder.g:1430:13: (decr= decreasing_clause )?
            int alt115=2;
            int LA115_0 = input.LA(1);

            if ( (LA115_0==DECREASING) ) {
                alt115=1;
            }
            switch (alt115) {
                case 1 :
                    // RBuilder.g:1430:14: decr= decreasing_clause
                    {
                    _last = (ColsAST)input.LT(1);
                    pushFollow(FOLLOW_decreasing_clause_in_recursive_procedure_declaration7128);
                    decr=decreasing_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, decr.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }

            // RBuilder.g:1431:13: (fac2= facility_declaration )*
            loop116:
            do {
                int alt116=2;
                int LA116_0 = input.LA(1);

                if ( (LA116_0==FACILITY) ) {
                    alt116=1;
                }


                switch (alt116) {
            	case 1 :
            	    // RBuilder.g:1431:14: fac2= facility_declaration
            	    {
            	    _last = (ColsAST)input.LT(1);
            	    pushFollow(FOLLOW_facility_declaration_in_recursive_procedure_declaration7147);
            	    fac2=facility_declaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) 
            	    adaptor.addChild(root_1, fac2.getTree());
            	    if ( state.backtracking==0 ) {
            	       facs.add((fac2!=null?fac2.dec:null)); 
            	    }

            	    if ( state.backtracking==0 ) {
            	    }
            	    }
            	    break;

            	default :
            	    break loop116;
                }
            } while (true);

            // RBuilder.g:1432:13: (vars2= variable_declaration )*
            loop117:
            do {
                int alt117=2;
                int LA117_0 = input.LA(1);

                if ( (LA117_0==VAR) ) {
                    alt117=1;
                }


                switch (alt117) {
            	case 1 :
            	    // RBuilder.g:1432:14: vars2= variable_declaration
            	    {
            	    _last = (ColsAST)input.LT(1);
            	    pushFollow(FOLLOW_variable_declaration_in_recursive_procedure_declaration7168);
            	    vars2=variable_declaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) 
            	    adaptor.addChild(root_1, vars2.getTree());
            	    if ( state.backtracking==0 ) {
            	       vars.addAll((vars2!=null?vars2.decs:null)); 
            	    }

            	    if ( state.backtracking==0 ) {
            	    }
            	    }
            	    break;

            	default :
            	    break loop117;
                }
            } while (true);

            // RBuilder.g:1433:13: (aux_vars2= aux_variable_declaration )*
            loop118:
            do {
                int alt118=2;
                int LA118_0 = input.LA(1);

                if ( (LA118_0==AUX_VAR) ) {
                    alt118=1;
                }


                switch (alt118) {
            	case 1 :
            	    // RBuilder.g:1433:14: aux_vars2= aux_variable_declaration
            	    {
            	    _last = (ColsAST)input.LT(1);
            	    pushFollow(FOLLOW_aux_variable_declaration_in_recursive_procedure_declaration7189);
            	    aux_vars2=aux_variable_declaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) 
            	    adaptor.addChild(root_1, aux_vars2.getTree());
            	    if ( state.backtracking==0 ) {
            	       aux_vars.addAll((aux_vars2!=null?aux_vars2.decs:null)); 
            	    }

            	    if ( state.backtracking==0 ) {
            	    }
            	    }
            	    break;

            	default :
            	    break loop118;
                }
            } while (true);

            // RBuilder.g:1434:13: (sts= statement_sequence )
            // RBuilder.g:1434:14: sts= statement_sequence
            {
            _last = (ColsAST)input.LT(1);
            pushFollow(FOLLOW_statement_sequence_in_recursive_procedure_declaration7210);
            sts=statement_sequence();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, sts.getTree());

            if ( state.backtracking==0 ) {
            }
            }


            match(input, Token.UP, null); if (state.failed) return retval;adaptor.addChild(root_0, root_1);_last = _save_last_1;
            }

            if ( state.backtracking==0 ) {
                 retval.dec = new ProcedureDec((ps!=null?ps.ps:null), (pars!=null?pars.decs:null), (ty!=null?ty.ty:null), items, (decr!=null?decr.exp:null),
                              facs, vars, aux_vars, (sts!=null?sts.stmts:null), true);
                      
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "recursive_procedure_declaration"

    public static class operation_formal_param_section_return extends TreeRuleReturnScope {
        public edu.clemson.cs.r2jt.collections.List<ParameterVarDec> decs
                = new edu.clemson.cs.r2jt.collections.List<ParameterVarDec>("ParameterVarDec");
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "operation_formal_param_section"
    // RBuilder.g:1441:1: operation_formal_param_section returns [edu.clemson.cs.r2jt.collections.List<ParameterVarDec> decs\n = new edu.clemson.cs.r2jt.collections.List<ParameterVarDec>(\"ParameterVarDec\")] : ^( PARAMS (vars= operation_formal_param_group )* ) ;
    public final RBuilder.operation_formal_param_section_return operation_formal_param_section() throws RecognitionException {
        RBuilder.operation_formal_param_section_return retval = new RBuilder.operation_formal_param_section_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        ColsAST _first_0 = null;
        ColsAST _last = null;

        ColsAST PARAMS68=null;
        RBuilder.operation_formal_param_group_return vars = null;


        ColsAST PARAMS68_tree=null;

        try {
            // RBuilder.g:1443:5: ( ^( PARAMS (vars= operation_formal_param_group )* ) )
            // RBuilder.g:1443:9: ^( PARAMS (vars= operation_formal_param_group )* )
            {
            root_0 = (ColsAST)adaptor.nil();

            _last = (ColsAST)input.LT(1);
            {
            ColsAST _save_last_1 = _last;
            ColsAST _first_1 = null;
            ColsAST root_1 = (ColsAST)adaptor.nil();_last = (ColsAST)input.LT(1);
            PARAMS68=(ColsAST)match(input,PARAMS,FOLLOW_PARAMS_in_operation_formal_param_section7255); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            PARAMS68_tree = (ColsAST)adaptor.dupNode(PARAMS68);

            root_1 = (ColsAST)adaptor.becomeRoot(PARAMS68_tree, root_1);
            }


            if ( input.LA(1)==Token.DOWN ) {
                match(input, Token.DOWN, null); if (state.failed) return retval;
                // RBuilder.g:1443:18: (vars= operation_formal_param_group )*
                loop119:
                do {
                    int alt119=2;
                    int LA119_0 = input.LA(1);

                    if ( (LA119_0==VAR) ) {
                        alt119=1;
                    }


                    switch (alt119) {
                	case 1 :
                	    // RBuilder.g:1443:19: vars= operation_formal_param_group
                	    {
                	    _last = (ColsAST)input.LT(1);
                	    pushFollow(FOLLOW_operation_formal_param_group_in_operation_formal_param_section7260);
                	    vars=operation_formal_param_group();

                	    state._fsp--;
                	    if (state.failed) return retval;
                	    if ( state.backtracking==0 ) 
                	    adaptor.addChild(root_1, vars.getTree());
                	    if ( state.backtracking==0 ) {
                	       retval.decs.addAll((vars!=null?vars.decs:null)); 
                	    }

                	    if ( state.backtracking==0 ) {
                	    }
                	    }
                	    break;

                	default :
                	    break loop119;
                    }
                } while (true);


                match(input, Token.UP, null); if (state.failed) return retval;
            }adaptor.addChild(root_0, root_1);_last = _save_last_1;
            }


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "operation_formal_param_section"

    public static class operation_formal_param_group_return extends TreeRuleReturnScope {
        public edu.clemson.cs.r2jt.collections.List<ParameterVarDec> decs
                = new edu.clemson.cs.r2jt.collections.List<ParameterVarDec>("ParameterVarDec");
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "operation_formal_param_group"
    // RBuilder.g:1446:1: operation_formal_param_group returns [edu.clemson.cs.r2jt.collections.List<ParameterVarDec> decs\n = new edu.clemson.cs.r2jt.collections.List<ParameterVarDec>(\"ParameterVarDec\")] : ^( VAR mode= abstract_mode vars= variable_declaration_group ) ;
    public final RBuilder.operation_formal_param_group_return operation_formal_param_group() throws RecognitionException {
        RBuilder.operation_formal_param_group_return retval = new RBuilder.operation_formal_param_group_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        ColsAST _first_0 = null;
        ColsAST _last = null;

        ColsAST VAR69=null;
        RBuilder.abstract_mode_return mode = null;

        RBuilder.variable_declaration_group_return vars = null;


        ColsAST VAR69_tree=null;

        try {
            // RBuilder.g:1448:5: ( ^( VAR mode= abstract_mode vars= variable_declaration_group ) )
            // RBuilder.g:1448:9: ^( VAR mode= abstract_mode vars= variable_declaration_group )
            {
            root_0 = (ColsAST)adaptor.nil();

            _last = (ColsAST)input.LT(1);
            {
            ColsAST _save_last_1 = _last;
            ColsAST _first_1 = null;
            ColsAST root_1 = (ColsAST)adaptor.nil();_last = (ColsAST)input.LT(1);
            VAR69=(ColsAST)match(input,VAR,FOLLOW_VAR_in_operation_formal_param_group7289); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            VAR69_tree = (ColsAST)adaptor.dupNode(VAR69);

            root_1 = (ColsAST)adaptor.becomeRoot(VAR69_tree, root_1);
            }


            match(input, Token.DOWN, null); if (state.failed) return retval;
            _last = (ColsAST)input.LT(1);
            pushFollow(FOLLOW_abstract_mode_in_operation_formal_param_group7293);
            mode=abstract_mode();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, mode.getTree());
            _last = (ColsAST)input.LT(1);
            pushFollow(FOLLOW_variable_declaration_group_in_operation_formal_param_group7297);
            vars=variable_declaration_group();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, vars.getTree());

            match(input, Token.UP, null); if (state.failed) return retval;adaptor.addChild(root_0, root_1);_last = _save_last_1;
            }

            if ( state.backtracking==0 ) {
               retval.decs = getParamVarDecList((mode!=null?mode.mode:null), (vars!=null?vars.decs:null)); 
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "operation_formal_param_group"

    public static class variable_declaration_return extends TreeRuleReturnScope {
        public edu.clemson.cs.r2jt.collections.List<VarDec> decs = new edu.clemson.cs.r2jt.collections.List<VarDec>("VarDec");
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "variable_declaration"
    // RBuilder.g:1452:1: variable_declaration returns [edu.clemson.cs.r2jt.collections.List<VarDec> decs = new edu.clemson.cs.r2jt.collections.List<VarDec>(\"VarDec\")] : ^( VAR decs1= variable_declaration_group ) ;
    public final RBuilder.variable_declaration_return variable_declaration() throws RecognitionException {
        RBuilder.variable_declaration_return retval = new RBuilder.variable_declaration_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        ColsAST _first_0 = null;
        ColsAST _last = null;

        ColsAST VAR70=null;
        RBuilder.variable_declaration_group_return decs1 = null;


        ColsAST VAR70_tree=null;

        try {
            // RBuilder.g:1453:5: ( ^( VAR decs1= variable_declaration_group ) )
            // RBuilder.g:1453:9: ^( VAR decs1= variable_declaration_group )
            {
            root_0 = (ColsAST)adaptor.nil();

            _last = (ColsAST)input.LT(1);
            {
            ColsAST _save_last_1 = _last;
            ColsAST _first_1 = null;
            ColsAST root_1 = (ColsAST)adaptor.nil();_last = (ColsAST)input.LT(1);
            VAR70=(ColsAST)match(input,VAR,FOLLOW_VAR_in_variable_declaration7332); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            VAR70_tree = (ColsAST)adaptor.dupNode(VAR70);

            root_1 = (ColsAST)adaptor.becomeRoot(VAR70_tree, root_1);
            }


            match(input, Token.DOWN, null); if (state.failed) return retval;
            _last = (ColsAST)input.LT(1);
            pushFollow(FOLLOW_variable_declaration_group_in_variable_declaration7336);
            decs1=variable_declaration_group();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, decs1.getTree());

            match(input, Token.UP, null); if (state.failed) return retval;adaptor.addChild(root_0, root_1);_last = _save_last_1;
            }

            if ( state.backtracking==0 ) {
               retval.decs = (decs1!=null?decs1.decs:null); 
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "variable_declaration"

    public static class aux_variable_declaration_return extends TreeRuleReturnScope {
        public edu.clemson.cs.r2jt.collections.List<AuxVarDec> decs = new edu.clemson.cs.r2jt.collections.List<AuxVarDec>("AuxVarDec");
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "aux_variable_declaration"
    // RBuilder.g:1457:1: aux_variable_declaration returns [edu.clemson.cs.r2jt.collections.List<AuxVarDec> decs = new edu.clemson.cs.r2jt.collections.List<AuxVarDec>(\"AuxVarDec\")] : ^( AUX_VAR decs1= aux_variable_declaration_group ) ;
    public final RBuilder.aux_variable_declaration_return aux_variable_declaration() throws RecognitionException {
        RBuilder.aux_variable_declaration_return retval = new RBuilder.aux_variable_declaration_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        ColsAST _first_0 = null;
        ColsAST _last = null;

        ColsAST AUX_VAR71=null;
        RBuilder.aux_variable_declaration_group_return decs1 = null;


        ColsAST AUX_VAR71_tree=null;

        try {
            // RBuilder.g:1458:5: ( ^( AUX_VAR decs1= aux_variable_declaration_group ) )
            // RBuilder.g:1458:9: ^( AUX_VAR decs1= aux_variable_declaration_group )
            {
            root_0 = (ColsAST)adaptor.nil();

            _last = (ColsAST)input.LT(1);
            {
            ColsAST _save_last_1 = _last;
            ColsAST _first_1 = null;
            ColsAST root_1 = (ColsAST)adaptor.nil();_last = (ColsAST)input.LT(1);
            AUX_VAR71=(ColsAST)match(input,AUX_VAR,FOLLOW_AUX_VAR_in_aux_variable_declaration7375); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            AUX_VAR71_tree = (ColsAST)adaptor.dupNode(AUX_VAR71);

            root_1 = (ColsAST)adaptor.becomeRoot(AUX_VAR71_tree, root_1);
            }


            match(input, Token.DOWN, null); if (state.failed) return retval;
            _last = (ColsAST)input.LT(1);
            pushFollow(FOLLOW_aux_variable_declaration_group_in_aux_variable_declaration7379);
            decs1=aux_variable_declaration_group();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, decs1.getTree());

            match(input, Token.UP, null); if (state.failed) return retval;adaptor.addChild(root_0, root_1);_last = _save_last_1;
            }

            if ( state.backtracking==0 ) {
               retval.decs = (decs1!=null?decs1.decs:null); 
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "aux_variable_declaration"

    public static class affects_clause_return extends TreeRuleReturnScope {
        public edu.clemson.cs.r2jt.collections.List<AffectsItem> items
                = new edu.clemson.cs.r2jt.collections.List<AffectsItem>("AffectsItem");
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "affects_clause"
    // RBuilder.g:1462:1: affects_clause returns [edu.clemson.cs.r2jt.collections.List<AffectsItem> items\n = new edu.clemson.cs.r2jt.collections.List<AffectsItem>(\"AffectsItem\")] : ^( AFFECTS mode= abstract_mode (qid= qualified_ident ) ( COMMA qid= qualified_ident )* ) ;
    public final RBuilder.affects_clause_return affects_clause() throws RecognitionException {
        RBuilder.affects_clause_return retval = new RBuilder.affects_clause_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        ColsAST _first_0 = null;
        ColsAST _last = null;

        ColsAST AFFECTS72=null;
        ColsAST COMMA73=null;
        RBuilder.abstract_mode_return mode = null;

        RBuilder.qualified_ident_return qid = null;


        ColsAST AFFECTS72_tree=null;
        ColsAST COMMA73_tree=null;


            PosSymbol qual = null;
            PosSymbol name = null;
            AffectsItem item = null;

        try {
            // RBuilder.g:1469:5: ( ^( AFFECTS mode= abstract_mode (qid= qualified_ident ) ( COMMA qid= qualified_ident )* ) )
            // RBuilder.g:1469:9: ^( AFFECTS mode= abstract_mode (qid= qualified_ident ) ( COMMA qid= qualified_ident )* )
            {
            root_0 = (ColsAST)adaptor.nil();

            _last = (ColsAST)input.LT(1);
            {
            ColsAST _save_last_1 = _last;
            ColsAST _first_1 = null;
            ColsAST root_1 = (ColsAST)adaptor.nil();_last = (ColsAST)input.LT(1);
            AFFECTS72=(ColsAST)match(input,AFFECTS,FOLLOW_AFFECTS_in_affects_clause7420); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            AFFECTS72_tree = (ColsAST)adaptor.dupNode(AFFECTS72);

            root_1 = (ColsAST)adaptor.becomeRoot(AFFECTS72_tree, root_1);
            }


            match(input, Token.DOWN, null); if (state.failed) return retval;
            _last = (ColsAST)input.LT(1);
            pushFollow(FOLLOW_abstract_mode_in_affects_clause7424);
            mode=abstract_mode();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, mode.getTree());
            // RBuilder.g:1470:13: (qid= qualified_ident )
            // RBuilder.g:1470:17: qid= qualified_ident
            {
            _last = (ColsAST)input.LT(1);
            pushFollow(FOLLOW_qualified_ident_in_affects_clause7444);
            qid=qualified_ident();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, qid.getTree());
            if ( state.backtracking==0 ) {
                 qual = (qid!=null?qid.exp:null).getQualifier();
                                  name = (qid!=null?qid.exp:null).getName();
                                  item = new AffectsItem((mode!=null?mode.mode:null), qual, name);
                                  retval.items.add(item);
                              
            }

            if ( state.backtracking==0 ) {
            }
            }

            // RBuilder.g:1477:13: ( COMMA qid= qualified_ident )*
            loop120:
            do {
                int alt120=2;
                int LA120_0 = input.LA(1);

                if ( (LA120_0==COMMA) ) {
                    alt120=1;
                }


                switch (alt120) {
            	case 1 :
            	    // RBuilder.g:1477:17: COMMA qid= qualified_ident
            	    {
            	    _last = (ColsAST)input.LT(1);
            	    COMMA73=(ColsAST)match(input,COMMA,FOLLOW_COMMA_in_affects_clause7494); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    COMMA73_tree = (ColsAST)adaptor.dupNode(COMMA73);

            	    adaptor.addChild(root_1, COMMA73_tree);
            	    }
            	    _last = (ColsAST)input.LT(1);
            	    pushFollow(FOLLOW_qualified_ident_in_affects_clause7498);
            	    qid=qualified_ident();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) 
            	    adaptor.addChild(root_1, qid.getTree());
            	    if ( state.backtracking==0 ) {
            	         qual = (qid!=null?qid.exp:null).getQualifier();
            	                          name = (qid!=null?qid.exp:null).getName();
            	                          item = new AffectsItem((mode!=null?mode.mode:null), qual, name);
            	                          retval.items.add(item);
            	                      
            	    }

            	    if ( state.backtracking==0 ) {
            	    }
            	    }
            	    break;

            	default :
            	    break loop120;
                }
            } while (true);


            match(input, Token.UP, null); if (state.failed) return retval;adaptor.addChild(root_0, root_1);_last = _save_last_1;
            }


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "affects_clause"

    public static class abstract_mode_return extends TreeRuleReturnScope {
        public Mode mode = null;
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "abstract_mode"
    // RBuilder.g:1487:1: abstract_mode returns [Mode mode = null] : ( ALTERS | CLEARS | EVALUATES | PRESERVES | REPLACES | RESTORES | UPDATES | REASSIGNS );
    public final RBuilder.abstract_mode_return abstract_mode() throws RecognitionException {
        RBuilder.abstract_mode_return retval = new RBuilder.abstract_mode_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        ColsAST _first_0 = null;
        ColsAST _last = null;

        ColsAST ALTERS74=null;
        ColsAST CLEARS75=null;
        ColsAST EVALUATES76=null;
        ColsAST PRESERVES77=null;
        ColsAST REPLACES78=null;
        ColsAST RESTORES79=null;
        ColsAST UPDATES80=null;
        ColsAST REASSIGNS81=null;

        ColsAST ALTERS74_tree=null;
        ColsAST CLEARS75_tree=null;
        ColsAST EVALUATES76_tree=null;
        ColsAST PRESERVES77_tree=null;
        ColsAST REPLACES78_tree=null;
        ColsAST RESTORES79_tree=null;
        ColsAST UPDATES80_tree=null;
        ColsAST REASSIGNS81_tree=null;

        try {
            // RBuilder.g:1488:5: ( ALTERS | CLEARS | EVALUATES | PRESERVES | REPLACES | RESTORES | UPDATES | REASSIGNS )
            int alt121=8;
            switch ( input.LA(1) ) {
            case ALTERS:
                {
                alt121=1;
                }
                break;
            case CLEARS:
                {
                alt121=2;
                }
                break;
            case EVALUATES:
                {
                alt121=3;
                }
                break;
            case PRESERVES:
                {
                alt121=4;
                }
                break;
            case REPLACES:
                {
                alt121=5;
                }
                break;
            case RESTORES:
                {
                alt121=6;
                }
                break;
            case UPDATES:
                {
                alt121=7;
                }
                break;
            case REASSIGNS:
                {
                alt121=8;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 121, 0, input);

                throw nvae;
            }

            switch (alt121) {
                case 1 :
                    // RBuilder.g:1488:9: ALTERS
                    {
                    root_0 = (ColsAST)adaptor.nil();

                    _last = (ColsAST)input.LT(1);
                    ALTERS74=(ColsAST)match(input,ALTERS,FOLLOW_ALTERS_in_abstract_mode7564); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ALTERS74_tree = (ColsAST)adaptor.dupNode(ALTERS74);

                    adaptor.addChild(root_0, ALTERS74_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.mode = Mode.ALTERS; 
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // RBuilder.g:1489:9: CLEARS
                    {
                    root_0 = (ColsAST)adaptor.nil();

                    _last = (ColsAST)input.LT(1);
                    CLEARS75=(ColsAST)match(input,CLEARS,FOLLOW_CLEARS_in_abstract_mode7576); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    CLEARS75_tree = (ColsAST)adaptor.dupNode(CLEARS75);

                    adaptor.addChild(root_0, CLEARS75_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.mode = Mode.CLEARS; 
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 3 :
                    // RBuilder.g:1490:9: EVALUATES
                    {
                    root_0 = (ColsAST)adaptor.nil();

                    _last = (ColsAST)input.LT(1);
                    EVALUATES76=(ColsAST)match(input,EVALUATES,FOLLOW_EVALUATES_in_abstract_mode7588); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    EVALUATES76_tree = (ColsAST)adaptor.dupNode(EVALUATES76);

                    adaptor.addChild(root_0, EVALUATES76_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.mode = Mode.EVALUATES; 
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 4 :
                    // RBuilder.g:1491:9: PRESERVES
                    {
                    root_0 = (ColsAST)adaptor.nil();

                    _last = (ColsAST)input.LT(1);
                    PRESERVES77=(ColsAST)match(input,PRESERVES,FOLLOW_PRESERVES_in_abstract_mode7600); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PRESERVES77_tree = (ColsAST)adaptor.dupNode(PRESERVES77);

                    adaptor.addChild(root_0, PRESERVES77_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.mode = Mode.PRESERVES; 
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 5 :
                    // RBuilder.g:1492:9: REPLACES
                    {
                    root_0 = (ColsAST)adaptor.nil();

                    _last = (ColsAST)input.LT(1);
                    REPLACES78=(ColsAST)match(input,REPLACES,FOLLOW_REPLACES_in_abstract_mode7612); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    REPLACES78_tree = (ColsAST)adaptor.dupNode(REPLACES78);

                    adaptor.addChild(root_0, REPLACES78_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.mode = Mode.REPLACES; 
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 6 :
                    // RBuilder.g:1493:9: RESTORES
                    {
                    root_0 = (ColsAST)adaptor.nil();

                    _last = (ColsAST)input.LT(1);
                    RESTORES79=(ColsAST)match(input,RESTORES,FOLLOW_RESTORES_in_abstract_mode7624); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RESTORES79_tree = (ColsAST)adaptor.dupNode(RESTORES79);

                    adaptor.addChild(root_0, RESTORES79_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.mode = Mode.RESTORES; 
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 7 :
                    // RBuilder.g:1494:9: UPDATES
                    {
                    root_0 = (ColsAST)adaptor.nil();

                    _last = (ColsAST)input.LT(1);
                    UPDATES80=(ColsAST)match(input,UPDATES,FOLLOW_UPDATES_in_abstract_mode7636); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    UPDATES80_tree = (ColsAST)adaptor.dupNode(UPDATES80);

                    adaptor.addChild(root_0, UPDATES80_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.mode = Mode.UPDATES; 
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 8 :
                    // RBuilder.g:1495:9: REASSIGNS
                    {
                    root_0 = (ColsAST)adaptor.nil();

                    _last = (ColsAST)input.LT(1);
                    REASSIGNS81=(ColsAST)match(input,REASSIGNS,FOLLOW_REASSIGNS_in_abstract_mode7648); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    REASSIGNS81_tree = (ColsAST)adaptor.dupNode(REASSIGNS81);

                    adaptor.addChild(root_0, REASSIGNS81_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.mode = Mode.REASSIGNS; 
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }
            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "abstract_mode"

    public static class requires_clause_return extends TreeRuleReturnScope {
        public Exp exp = null;
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "requires_clause"
    // RBuilder.g:1498:1: requires_clause returns [Exp exp = null] : ^( REQUIRES exp1= math_expression ) ;
    public final RBuilder.requires_clause_return requires_clause() throws RecognitionException {
        RBuilder.requires_clause_return retval = new RBuilder.requires_clause_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        ColsAST _first_0 = null;
        ColsAST _last = null;

        ColsAST REQUIRES82=null;
        RBuilder.math_expression_return exp1 = null;


        ColsAST REQUIRES82_tree=null;

        try {
            // RBuilder.g:1499:5: ( ^( REQUIRES exp1= math_expression ) )
            // RBuilder.g:1499:9: ^( REQUIRES exp1= math_expression )
            {
            root_0 = (ColsAST)adaptor.nil();

            _last = (ColsAST)input.LT(1);
            {
            ColsAST _save_last_1 = _last;
            ColsAST _first_1 = null;
            ColsAST root_1 = (ColsAST)adaptor.nil();_last = (ColsAST)input.LT(1);
            REQUIRES82=(ColsAST)match(input,REQUIRES,FOLLOW_REQUIRES_in_requires_clause7674); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REQUIRES82_tree = (ColsAST)adaptor.dupNode(REQUIRES82);

            root_1 = (ColsAST)adaptor.becomeRoot(REQUIRES82_tree, root_1);
            }


            match(input, Token.DOWN, null); if (state.failed) return retval;
            _last = (ColsAST)input.LT(1);
            pushFollow(FOLLOW_math_expression_in_requires_clause7678);
            exp1=math_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, exp1.getTree());

            match(input, Token.UP, null); if (state.failed) return retval;adaptor.addChild(root_0, root_1);_last = _save_last_1;
            }

            if ( state.backtracking==0 ) {
               retval.exp = (exp1!=null?exp1.exp:null); 
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "requires_clause"

    public static class ensures_clause_return extends TreeRuleReturnScope {
        public Exp exp = null;
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "ensures_clause"
    // RBuilder.g:1503:1: ensures_clause returns [Exp exp = null] : ^( ENSURES exp1= math_expression ) ;
    public final RBuilder.ensures_clause_return ensures_clause() throws RecognitionException {
        RBuilder.ensures_clause_return retval = new RBuilder.ensures_clause_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        ColsAST _first_0 = null;
        ColsAST _last = null;

        ColsAST ENSURES83=null;
        RBuilder.math_expression_return exp1 = null;


        ColsAST ENSURES83_tree=null;

        try {
            // RBuilder.g:1504:5: ( ^( ENSURES exp1= math_expression ) )
            // RBuilder.g:1504:9: ^( ENSURES exp1= math_expression )
            {
            root_0 = (ColsAST)adaptor.nil();

            _last = (ColsAST)input.LT(1);
            {
            ColsAST _save_last_1 = _last;
            ColsAST _first_1 = null;
            ColsAST root_1 = (ColsAST)adaptor.nil();_last = (ColsAST)input.LT(1);
            ENSURES83=(ColsAST)match(input,ENSURES,FOLLOW_ENSURES_in_ensures_clause7713); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ENSURES83_tree = (ColsAST)adaptor.dupNode(ENSURES83);

            root_1 = (ColsAST)adaptor.becomeRoot(ENSURES83_tree, root_1);
            }


            match(input, Token.DOWN, null); if (state.failed) return retval;
            _last = (ColsAST)input.LT(1);
            pushFollow(FOLLOW_math_expression_in_ensures_clause7717);
            exp1=math_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, exp1.getTree());

            match(input, Token.UP, null); if (state.failed) return retval;adaptor.addChild(root_0, root_1);_last = _save_last_1;
            }

            if ( state.backtracking==0 ) {
               retval.exp = (exp1!=null?exp1.exp:null); 
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "ensures_clause"

    public static class duration_clause_return extends TreeRuleReturnScope {
        public Exp exp = null;
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "duration_clause"
    // RBuilder.g:1508:1: duration_clause returns [Exp exp = null] : ^( DURATION exp1= math_expression ) ;
    public final RBuilder.duration_clause_return duration_clause() throws RecognitionException {
        RBuilder.duration_clause_return retval = new RBuilder.duration_clause_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        ColsAST _first_0 = null;
        ColsAST _last = null;

        ColsAST DURATION84=null;
        RBuilder.math_expression_return exp1 = null;


        ColsAST DURATION84_tree=null;

        try {
            // RBuilder.g:1509:5: ( ^( DURATION exp1= math_expression ) )
            // RBuilder.g:1509:9: ^( DURATION exp1= math_expression )
            {
            root_0 = (ColsAST)adaptor.nil();

            _last = (ColsAST)input.LT(1);
            {
            ColsAST _save_last_1 = _last;
            ColsAST _first_1 = null;
            ColsAST root_1 = (ColsAST)adaptor.nil();_last = (ColsAST)input.LT(1);
            DURATION84=(ColsAST)match(input,DURATION,FOLLOW_DURATION_in_duration_clause7752); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            DURATION84_tree = (ColsAST)adaptor.dupNode(DURATION84);

            root_1 = (ColsAST)adaptor.becomeRoot(DURATION84_tree, root_1);
            }


            match(input, Token.DOWN, null); if (state.failed) return retval;
            _last = (ColsAST)input.LT(1);
            pushFollow(FOLLOW_math_expression_in_duration_clause7756);
            exp1=math_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, exp1.getTree());

            match(input, Token.UP, null); if (state.failed) return retval;adaptor.addChild(root_0, root_1);_last = _save_last_1;
            }

            if ( state.backtracking==0 ) {
               retval.exp = (exp1!=null?exp1.exp:null); 
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "duration_clause"

    public static class mainp_disp_clause_return extends TreeRuleReturnScope {
        public Exp exp = null;
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "mainp_disp_clause"
    // RBuilder.g:1513:1: mainp_disp_clause returns [Exp exp = null] : ^( MAINP_DISP exp1= math_expression ) ;
    public final RBuilder.mainp_disp_clause_return mainp_disp_clause() throws RecognitionException {
        RBuilder.mainp_disp_clause_return retval = new RBuilder.mainp_disp_clause_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        ColsAST _first_0 = null;
        ColsAST _last = null;

        ColsAST MAINP_DISP85=null;
        RBuilder.math_expression_return exp1 = null;


        ColsAST MAINP_DISP85_tree=null;

        try {
            // RBuilder.g:1514:5: ( ^( MAINP_DISP exp1= math_expression ) )
            // RBuilder.g:1514:9: ^( MAINP_DISP exp1= math_expression )
            {
            root_0 = (ColsAST)adaptor.nil();

            _last = (ColsAST)input.LT(1);
            {
            ColsAST _save_last_1 = _last;
            ColsAST _first_1 = null;
            ColsAST root_1 = (ColsAST)adaptor.nil();_last = (ColsAST)input.LT(1);
            MAINP_DISP85=(ColsAST)match(input,MAINP_DISP,FOLLOW_MAINP_DISP_in_mainp_disp_clause7791); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            MAINP_DISP85_tree = (ColsAST)adaptor.dupNode(MAINP_DISP85);

            root_1 = (ColsAST)adaptor.becomeRoot(MAINP_DISP85_tree, root_1);
            }


            match(input, Token.DOWN, null); if (state.failed) return retval;
            _last = (ColsAST)input.LT(1);
            pushFollow(FOLLOW_math_expression_in_mainp_disp_clause7795);
            exp1=math_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, exp1.getTree());

            match(input, Token.UP, null); if (state.failed) return retval;adaptor.addChild(root_0, root_1);_last = _save_last_1;
            }

            if ( state.backtracking==0 ) {
               retval.exp = (exp1!=null?exp1.exp:null); 
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "mainp_disp_clause"

    public static class type_declaration_return extends TreeRuleReturnScope {
        public TypeDec dec = null;
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "type_declaration"
    // RBuilder.g:1522:1: type_declaration returns [TypeDec dec = null] : ^( TYPE_FAMILY ps= ident ty= math_type_expression exem= ident (cons= constraint_clause )? (init= type_concept_init_declaration )? (fin= type_concept_final_declaration )? ) ;
    public final RBuilder.type_declaration_return type_declaration() throws RecognitionException {
        RBuilder.type_declaration_return retval = new RBuilder.type_declaration_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        ColsAST _first_0 = null;
        ColsAST _last = null;

        ColsAST TYPE_FAMILY86=null;
        RBuilder.ident_return ps = null;

        RBuilder.math_type_expression_return ty = null;

        RBuilder.ident_return exem = null;

        RBuilder.constraint_clause_return cons = null;

        RBuilder.type_concept_init_declaration_return init = null;

        RBuilder.type_concept_final_declaration_return fin = null;


        ColsAST TYPE_FAMILY86_tree=null;

        try {
            // RBuilder.g:1523:5: ( ^( TYPE_FAMILY ps= ident ty= math_type_expression exem= ident (cons= constraint_clause )? (init= type_concept_init_declaration )? (fin= type_concept_final_declaration )? ) )
            // RBuilder.g:1523:9: ^( TYPE_FAMILY ps= ident ty= math_type_expression exem= ident (cons= constraint_clause )? (init= type_concept_init_declaration )? (fin= type_concept_final_declaration )? )
            {
            root_0 = (ColsAST)adaptor.nil();

            _last = (ColsAST)input.LT(1);
            {
            ColsAST _save_last_1 = _last;
            ColsAST _first_1 = null;
            ColsAST root_1 = (ColsAST)adaptor.nil();_last = (ColsAST)input.LT(1);
            TYPE_FAMILY86=(ColsAST)match(input,TYPE_FAMILY,FOLLOW_TYPE_FAMILY_in_type_declaration7836); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TYPE_FAMILY86_tree = (ColsAST)adaptor.dupNode(TYPE_FAMILY86);

            root_1 = (ColsAST)adaptor.becomeRoot(TYPE_FAMILY86_tree, root_1);
            }


            match(input, Token.DOWN, null); if (state.failed) return retval;
            _last = (ColsAST)input.LT(1);
            pushFollow(FOLLOW_ident_in_type_declaration7840);
            ps=ident();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, ps.getTree());
            _last = (ColsAST)input.LT(1);
            pushFollow(FOLLOW_math_type_expression_in_type_declaration7856);
            ty=math_type_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, ty.getTree());
            _last = (ColsAST)input.LT(1);
            pushFollow(FOLLOW_ident_in_type_declaration7872);
            exem=ident();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, exem.getTree());
            // RBuilder.g:1526:13: (cons= constraint_clause )?
            int alt122=2;
            int LA122_0 = input.LA(1);

            if ( (LA122_0==CONSTRAINT) ) {
                alt122=1;
            }
            switch (alt122) {
                case 1 :
                    // RBuilder.g:1526:14: cons= constraint_clause
                    {
                    _last = (ColsAST)input.LT(1);
                    pushFollow(FOLLOW_constraint_clause_in_type_declaration7889);
                    cons=constraint_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, cons.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }

            // RBuilder.g:1527:13: (init= type_concept_init_declaration )?
            int alt123=2;
            int LA123_0 = input.LA(1);

            if ( (LA123_0==INITIALIZATION) ) {
                alt123=1;
            }
            switch (alt123) {
                case 1 :
                    // RBuilder.g:1527:14: init= type_concept_init_declaration
                    {
                    _last = (ColsAST)input.LT(1);
                    pushFollow(FOLLOW_type_concept_init_declaration_in_type_declaration7908);
                    init=type_concept_init_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, init.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }

            // RBuilder.g:1528:13: (fin= type_concept_final_declaration )?
            int alt124=2;
            int LA124_0 = input.LA(1);

            if ( (LA124_0==FINALIZATION) ) {
                alt124=1;
            }
            switch (alt124) {
                case 1 :
                    // RBuilder.g:1528:14: fin= type_concept_final_declaration
                    {
                    _last = (ColsAST)input.LT(1);
                    pushFollow(FOLLOW_type_concept_final_declaration_in_type_declaration7927);
                    fin=type_concept_final_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, fin.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }


            match(input, Token.UP, null); if (state.failed) return retval;adaptor.addChild(root_0, root_1);_last = _save_last_1;
            }

            if ( state.backtracking==0 ) {
               retval.dec = new TypeDec((ps!=null?ps.ps:null), (ty!=null?ty.ty:null), (exem!=null?exem.ps:null), (cons!=null?cons.exp:null), (init!=null?init.item:null), (fin!=null?fin.item:null)); 
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "type_declaration"

    public static class performance_type_declaration_return extends TreeRuleReturnScope {
        public PerformanceTypeDec dec = null;
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "performance_type_declaration"
    // RBuilder.g:1533:1: performance_type_declaration returns [PerformanceTypeDec dec = null] : ^( TYPE_FAMILY ps= ident ty= math_type_expression (cons= constraint_clause )? (perfInit= performance_type_init_declaration )? (perfFinal= performance_type_final_declaration )? ) ;
    public final RBuilder.performance_type_declaration_return performance_type_declaration() throws RecognitionException {
        RBuilder.performance_type_declaration_return retval = new RBuilder.performance_type_declaration_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        ColsAST _first_0 = null;
        ColsAST _last = null;

        ColsAST TYPE_FAMILY87=null;
        RBuilder.ident_return ps = null;

        RBuilder.math_type_expression_return ty = null;

        RBuilder.constraint_clause_return cons = null;

        RBuilder.performance_type_init_declaration_return perfInit = null;

        RBuilder.performance_type_final_declaration_return perfFinal = null;


        ColsAST TYPE_FAMILY87_tree=null;

        try {
            // RBuilder.g:1534:5: ( ^( TYPE_FAMILY ps= ident ty= math_type_expression (cons= constraint_clause )? (perfInit= performance_type_init_declaration )? (perfFinal= performance_type_final_declaration )? ) )
            // RBuilder.g:1534:9: ^( TYPE_FAMILY ps= ident ty= math_type_expression (cons= constraint_clause )? (perfInit= performance_type_init_declaration )? (perfFinal= performance_type_final_declaration )? )
            {
            root_0 = (ColsAST)adaptor.nil();

            _last = (ColsAST)input.LT(1);
            {
            ColsAST _save_last_1 = _last;
            ColsAST _first_1 = null;
            ColsAST root_1 = (ColsAST)adaptor.nil();_last = (ColsAST)input.LT(1);
            TYPE_FAMILY87=(ColsAST)match(input,TYPE_FAMILY,FOLLOW_TYPE_FAMILY_in_performance_type_declaration7975); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TYPE_FAMILY87_tree = (ColsAST)adaptor.dupNode(TYPE_FAMILY87);

            root_1 = (ColsAST)adaptor.becomeRoot(TYPE_FAMILY87_tree, root_1);
            }


            match(input, Token.DOWN, null); if (state.failed) return retval;
            _last = (ColsAST)input.LT(1);
            pushFollow(FOLLOW_ident_in_performance_type_declaration7979);
            ps=ident();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, ps.getTree());
            _last = (ColsAST)input.LT(1);
            pushFollow(FOLLOW_math_type_expression_in_performance_type_declaration7995);
            ty=math_type_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, ty.getTree());
            // RBuilder.g:1536:13: (cons= constraint_clause )?
            int alt125=2;
            int LA125_0 = input.LA(1);

            if ( (LA125_0==CONSTRAINT) ) {
                alt125=1;
            }
            switch (alt125) {
                case 1 :
                    // RBuilder.g:1536:14: cons= constraint_clause
                    {
                    _last = (ColsAST)input.LT(1);
                    pushFollow(FOLLOW_constraint_clause_in_performance_type_declaration8012);
                    cons=constraint_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, cons.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }

            // RBuilder.g:1537:13: (perfInit= performance_type_init_declaration )?
            int alt126=2;
            int LA126_0 = input.LA(1);

            if ( (LA126_0==INITIALIZATION) ) {
                alt126=1;
            }
            switch (alt126) {
                case 1 :
                    // RBuilder.g:1537:14: perfInit= performance_type_init_declaration
                    {
                    _last = (ColsAST)input.LT(1);
                    pushFollow(FOLLOW_performance_type_init_declaration_in_performance_type_declaration8031);
                    perfInit=performance_type_init_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, perfInit.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }

            // RBuilder.g:1538:13: (perfFinal= performance_type_final_declaration )?
            int alt127=2;
            int LA127_0 = input.LA(1);

            if ( (LA127_0==FINALIZATION) ) {
                alt127=1;
            }
            switch (alt127) {
                case 1 :
                    // RBuilder.g:1538:14: perfFinal= performance_type_final_declaration
                    {
                    _last = (ColsAST)input.LT(1);
                    pushFollow(FOLLOW_performance_type_final_declaration_in_performance_type_declaration8050);
                    perfFinal=performance_type_final_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, perfFinal.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }


            match(input, Token.UP, null); if (state.failed) return retval;adaptor.addChild(root_0, root_1);_last = _save_last_1;
            }

            if ( state.backtracking==0 ) {
               retval.dec = new PerformanceTypeDec((ps!=null?ps.ps:null), (ty!=null?ty.ty:null), (cons!=null?cons.exp:null), (perfInit!=null?perfInit.item:null), (perfFinal!=null?perfFinal.item:null)); 
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "performance_type_declaration"

    public static class type_representation_declaration_return extends TreeRuleReturnScope {
        public RepresentationDec dec = null;
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "type_representation_declaration"
    // RBuilder.g:1543:1: type_representation_declaration returns [RepresentationDec dec = null] : ^( TYPE ps= ident rep= structural_program_type_expression (conv= convention_clause )? (corr= correspondence_clause )? (init= type_body_init_declaration )? (fin= type_body_final_declaration )? ) ;
    public final RBuilder.type_representation_declaration_return type_representation_declaration() throws RecognitionException {
        RBuilder.type_representation_declaration_return retval = new RBuilder.type_representation_declaration_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        ColsAST _first_0 = null;
        ColsAST _last = null;

        ColsAST TYPE88=null;
        RBuilder.ident_return ps = null;

        RBuilder.structural_program_type_expression_return rep = null;

        RBuilder.convention_clause_return conv = null;

        RBuilder.correspondence_clause_return corr = null;

        RBuilder.type_body_init_declaration_return init = null;

        RBuilder.type_body_final_declaration_return fin = null;


        ColsAST TYPE88_tree=null;

        try {
            // RBuilder.g:1544:5: ( ^( TYPE ps= ident rep= structural_program_type_expression (conv= convention_clause )? (corr= correspondence_clause )? (init= type_body_init_declaration )? (fin= type_body_final_declaration )? ) )
            // RBuilder.g:1544:9: ^( TYPE ps= ident rep= structural_program_type_expression (conv= convention_clause )? (corr= correspondence_clause )? (init= type_body_init_declaration )? (fin= type_body_final_declaration )? )
            {
            root_0 = (ColsAST)adaptor.nil();

            _last = (ColsAST)input.LT(1);
            {
            ColsAST _save_last_1 = _last;
            ColsAST _first_1 = null;
            ColsAST root_1 = (ColsAST)adaptor.nil();_last = (ColsAST)input.LT(1);
            TYPE88=(ColsAST)match(input,TYPE,FOLLOW_TYPE_in_type_representation_declaration8098); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TYPE88_tree = (ColsAST)adaptor.dupNode(TYPE88);

            root_1 = (ColsAST)adaptor.becomeRoot(TYPE88_tree, root_1);
            }


            match(input, Token.DOWN, null); if (state.failed) return retval;
            _last = (ColsAST)input.LT(1);
            pushFollow(FOLLOW_ident_in_type_representation_declaration8102);
            ps=ident();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, ps.getTree());
            _last = (ColsAST)input.LT(1);
            pushFollow(FOLLOW_structural_program_type_expression_in_type_representation_declaration8118);
            rep=structural_program_type_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, rep.getTree());
            // RBuilder.g:1546:13: (conv= convention_clause )?
            int alt128=2;
            int LA128_0 = input.LA(1);

            if ( (LA128_0==CONVENTION) ) {
                alt128=1;
            }
            switch (alt128) {
                case 1 :
                    // RBuilder.g:1546:14: conv= convention_clause
                    {
                    _last = (ColsAST)input.LT(1);
                    pushFollow(FOLLOW_convention_clause_in_type_representation_declaration8135);
                    conv=convention_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, conv.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }

            // RBuilder.g:1547:13: (corr= correspondence_clause )?
            int alt129=2;
            int LA129_0 = input.LA(1);

            if ( (LA129_0==CORR) ) {
                alt129=1;
            }
            switch (alt129) {
                case 1 :
                    // RBuilder.g:1547:14: corr= correspondence_clause
                    {
                    _last = (ColsAST)input.LT(1);
                    pushFollow(FOLLOW_correspondence_clause_in_type_representation_declaration8154);
                    corr=correspondence_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, corr.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }

            // RBuilder.g:1548:13: (init= type_body_init_declaration )?
            int alt130=2;
            int LA130_0 = input.LA(1);

            if ( (LA130_0==INITIALIZATION) ) {
                alt130=1;
            }
            switch (alt130) {
                case 1 :
                    // RBuilder.g:1548:14: init= type_body_init_declaration
                    {
                    _last = (ColsAST)input.LT(1);
                    pushFollow(FOLLOW_type_body_init_declaration_in_type_representation_declaration8173);
                    init=type_body_init_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, init.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }

            // RBuilder.g:1549:13: (fin= type_body_final_declaration )?
            int alt131=2;
            int LA131_0 = input.LA(1);

            if ( (LA131_0==FINALIZATION) ) {
                alt131=1;
            }
            switch (alt131) {
                case 1 :
                    // RBuilder.g:1549:14: fin= type_body_final_declaration
                    {
                    _last = (ColsAST)input.LT(1);
                    pushFollow(FOLLOW_type_body_final_declaration_in_type_representation_declaration8192);
                    fin=type_body_final_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, fin.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }


            match(input, Token.UP, null); if (state.failed) return retval;adaptor.addChild(root_0, root_1);_last = _save_last_1;
            }

            if ( state.backtracking==0 ) {
               retval.dec = new RepresentationDec((ps!=null?ps.ps:null), (rep!=null?rep.ty:null), (conv!=null?conv.exp:null), (corr!=null?corr.exp:null), (init!=null?init.item:null), (fin!=null?fin.item:null)); 
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "type_representation_declaration"

    public static class facility_type_declaration_return extends TreeRuleReturnScope {
        public FacilityTypeDec dec = null;
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "facility_type_declaration"
    // RBuilder.g:1554:1: facility_type_declaration returns [FacilityTypeDec dec = null] : ^( TYPE ps= ident rep= structural_program_type_expression (conv= convention_clause )? (init= type_facility_init_declaration )? (fin= type_facility_final_declaration )? ) ;
    public final RBuilder.facility_type_declaration_return facility_type_declaration() throws RecognitionException {
        RBuilder.facility_type_declaration_return retval = new RBuilder.facility_type_declaration_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        ColsAST _first_0 = null;
        ColsAST _last = null;

        ColsAST TYPE89=null;
        RBuilder.ident_return ps = null;

        RBuilder.structural_program_type_expression_return rep = null;

        RBuilder.convention_clause_return conv = null;

        RBuilder.type_facility_init_declaration_return init = null;

        RBuilder.type_facility_final_declaration_return fin = null;


        ColsAST TYPE89_tree=null;

        try {
            // RBuilder.g:1555:5: ( ^( TYPE ps= ident rep= structural_program_type_expression (conv= convention_clause )? (init= type_facility_init_declaration )? (fin= type_facility_final_declaration )? ) )
            // RBuilder.g:1555:9: ^( TYPE ps= ident rep= structural_program_type_expression (conv= convention_clause )? (init= type_facility_init_declaration )? (fin= type_facility_final_declaration )? )
            {
            root_0 = (ColsAST)adaptor.nil();

            _last = (ColsAST)input.LT(1);
            {
            ColsAST _save_last_1 = _last;
            ColsAST _first_1 = null;
            ColsAST root_1 = (ColsAST)adaptor.nil();_last = (ColsAST)input.LT(1);
            TYPE89=(ColsAST)match(input,TYPE,FOLLOW_TYPE_in_facility_type_declaration8240); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TYPE89_tree = (ColsAST)adaptor.dupNode(TYPE89);

            root_1 = (ColsAST)adaptor.becomeRoot(TYPE89_tree, root_1);
            }


            match(input, Token.DOWN, null); if (state.failed) return retval;
            _last = (ColsAST)input.LT(1);
            pushFollow(FOLLOW_ident_in_facility_type_declaration8244);
            ps=ident();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, ps.getTree());
            _last = (ColsAST)input.LT(1);
            pushFollow(FOLLOW_structural_program_type_expression_in_facility_type_declaration8260);
            rep=structural_program_type_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, rep.getTree());
            // RBuilder.g:1557:13: (conv= convention_clause )?
            int alt132=2;
            int LA132_0 = input.LA(1);

            if ( (LA132_0==CONVENTION) ) {
                alt132=1;
            }
            switch (alt132) {
                case 1 :
                    // RBuilder.g:1557:14: conv= convention_clause
                    {
                    _last = (ColsAST)input.LT(1);
                    pushFollow(FOLLOW_convention_clause_in_facility_type_declaration8277);
                    conv=convention_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, conv.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }

            // RBuilder.g:1558:13: (init= type_facility_init_declaration )?
            int alt133=2;
            int LA133_0 = input.LA(1);

            if ( (LA133_0==INITIALIZATION) ) {
                alt133=1;
            }
            switch (alt133) {
                case 1 :
                    // RBuilder.g:1558:14: init= type_facility_init_declaration
                    {
                    _last = (ColsAST)input.LT(1);
                    pushFollow(FOLLOW_type_facility_init_declaration_in_facility_type_declaration8296);
                    init=type_facility_init_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, init.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }

            // RBuilder.g:1559:13: (fin= type_facility_final_declaration )?
            int alt134=2;
            int LA134_0 = input.LA(1);

            if ( (LA134_0==FINALIZATION) ) {
                alt134=1;
            }
            switch (alt134) {
                case 1 :
                    // RBuilder.g:1559:14: fin= type_facility_final_declaration
                    {
                    _last = (ColsAST)input.LT(1);
                    pushFollow(FOLLOW_type_facility_final_declaration_in_facility_type_declaration8316);
                    fin=type_facility_final_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, fin.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }


            match(input, Token.UP, null); if (state.failed) return retval;adaptor.addChild(root_0, root_1);_last = _save_last_1;
            }

            if ( state.backtracking==0 ) {
               retval.dec = new FacilityTypeDec((ps!=null?ps.ps:null), (rep!=null?rep.ty:null), (conv!=null?conv.exp:null), (init!=null?init.item:null), (fin!=null?fin.item:null)); 
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "facility_type_declaration"

    public static class module_concept_init_declaration_return extends TreeRuleReturnScope {
        public InitItem item = null;
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "module_concept_init_declaration"
    // RBuilder.g:1570:1: module_concept_init_declaration returns [InitItem item = null] : ^( FAC_INIT item2= concept_init_final_section ) ;
    public final RBuilder.module_concept_init_declaration_return module_concept_init_declaration() throws RecognitionException {
        RBuilder.module_concept_init_declaration_return retval = new RBuilder.module_concept_init_declaration_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        ColsAST _first_0 = null;
        ColsAST _last = null;

        ColsAST FAC_INIT90=null;
        RBuilder.concept_init_final_section_return item2 = null;


        ColsAST FAC_INIT90_tree=null;

        try {
            // RBuilder.g:1571:5: ( ^( FAC_INIT item2= concept_init_final_section ) )
            // RBuilder.g:1571:9: ^( FAC_INIT item2= concept_init_final_section )
            {
            root_0 = (ColsAST)adaptor.nil();

            _last = (ColsAST)input.LT(1);
            {
            ColsAST _save_last_1 = _last;
            ColsAST _first_1 = null;
            ColsAST root_1 = (ColsAST)adaptor.nil();_last = (ColsAST)input.LT(1);
            FAC_INIT90=(ColsAST)match(input,FAC_INIT,FOLLOW_FAC_INIT_in_module_concept_init_declaration8368); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            FAC_INIT90_tree = (ColsAST)adaptor.dupNode(FAC_INIT90);

            root_1 = (ColsAST)adaptor.becomeRoot(FAC_INIT90_tree, root_1);
            }


            if ( input.LA(1)==Token.DOWN ) {
                match(input, Token.DOWN, null); if (state.failed) return retval;
                _last = (ColsAST)input.LT(1);
                pushFollow(FOLLOW_concept_init_final_section_in_module_concept_init_declaration8372);
                item2=concept_init_final_section();

                state._fsp--;
                if (state.failed) return retval;
                if ( state.backtracking==0 ) 
                adaptor.addChild(root_1, item2.getTree());

                match(input, Token.UP, null); if (state.failed) return retval;
            }adaptor.addChild(root_0, root_1);_last = _save_last_1;
            }

            if ( state.backtracking==0 ) {
               retval.item = getInitItem(getLocation(FAC_INIT90), (item2!=null?item2.item:null)); 
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "module_concept_init_declaration"

    public static class module_concept_final_declaration_return extends TreeRuleReturnScope {
        public FinalItem item = null;
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "module_concept_final_declaration"
    // RBuilder.g:1575:1: module_concept_final_declaration returns [FinalItem item = null] : ^( FAC_FINAL item2= concept_init_final_section ) ;
    public final RBuilder.module_concept_final_declaration_return module_concept_final_declaration() throws RecognitionException {
        RBuilder.module_concept_final_declaration_return retval = new RBuilder.module_concept_final_declaration_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        ColsAST _first_0 = null;
        ColsAST _last = null;

        ColsAST FAC_FINAL91=null;
        RBuilder.concept_init_final_section_return item2 = null;


        ColsAST FAC_FINAL91_tree=null;

        try {
            // RBuilder.g:1576:5: ( ^( FAC_FINAL item2= concept_init_final_section ) )
            // RBuilder.g:1576:9: ^( FAC_FINAL item2= concept_init_final_section )
            {
            root_0 = (ColsAST)adaptor.nil();

            _last = (ColsAST)input.LT(1);
            {
            ColsAST _save_last_1 = _last;
            ColsAST _first_1 = null;
            ColsAST root_1 = (ColsAST)adaptor.nil();_last = (ColsAST)input.LT(1);
            FAC_FINAL91=(ColsAST)match(input,FAC_FINAL,FOLLOW_FAC_FINAL_in_module_concept_final_declaration8407); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            FAC_FINAL91_tree = (ColsAST)adaptor.dupNode(FAC_FINAL91);

            root_1 = (ColsAST)adaptor.becomeRoot(FAC_FINAL91_tree, root_1);
            }


            if ( input.LA(1)==Token.DOWN ) {
                match(input, Token.DOWN, null); if (state.failed) return retval;
                _last = (ColsAST)input.LT(1);
                pushFollow(FOLLOW_concept_init_final_section_in_module_concept_final_declaration8411);
                item2=concept_init_final_section();

                state._fsp--;
                if (state.failed) return retval;
                if ( state.backtracking==0 ) 
                adaptor.addChild(root_1, item2.getTree());

                match(input, Token.UP, null); if (state.failed) return retval;
            }adaptor.addChild(root_0, root_1);_last = _save_last_1;
            }

            if ( state.backtracking==0 ) {
               retval.item = getFinalItem(getLocation(FAC_FINAL91), (item2!=null?item2.item:null)); 
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "module_concept_final_declaration"

    public static class performance_module_init_declaration_return extends TreeRuleReturnScope {
        public PerformanceInitItem item = null;
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "performance_module_init_declaration"
    // RBuilder.g:1580:1: performance_module_init_declaration returns [PerformanceInitItem item = null] : ^( PERF_INIT item2= performance_init_section ) ;
    public final RBuilder.performance_module_init_declaration_return performance_module_init_declaration() throws RecognitionException {
        RBuilder.performance_module_init_declaration_return retval = new RBuilder.performance_module_init_declaration_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        ColsAST _first_0 = null;
        ColsAST _last = null;

        ColsAST PERF_INIT92=null;
        RBuilder.performance_init_section_return item2 = null;


        ColsAST PERF_INIT92_tree=null;

        try {
            // RBuilder.g:1581:5: ( ^( PERF_INIT item2= performance_init_section ) )
            // RBuilder.g:1581:9: ^( PERF_INIT item2= performance_init_section )
            {
            root_0 = (ColsAST)adaptor.nil();

            _last = (ColsAST)input.LT(1);
            {
            ColsAST _save_last_1 = _last;
            ColsAST _first_1 = null;
            ColsAST root_1 = (ColsAST)adaptor.nil();_last = (ColsAST)input.LT(1);
            PERF_INIT92=(ColsAST)match(input,PERF_INIT,FOLLOW_PERF_INIT_in_performance_module_init_declaration8446); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            PERF_INIT92_tree = (ColsAST)adaptor.dupNode(PERF_INIT92);

            root_1 = (ColsAST)adaptor.becomeRoot(PERF_INIT92_tree, root_1);
            }


            if ( input.LA(1)==Token.DOWN ) {
                match(input, Token.DOWN, null); if (state.failed) return retval;
                _last = (ColsAST)input.LT(1);
                pushFollow(FOLLOW_performance_init_section_in_performance_module_init_declaration8450);
                item2=performance_init_section();

                state._fsp--;
                if (state.failed) return retval;
                if ( state.backtracking==0 ) 
                adaptor.addChild(root_1, item2.getTree());

                match(input, Token.UP, null); if (state.failed) return retval;
            }adaptor.addChild(root_0, root_1);_last = _save_last_1;
            }

            if ( state.backtracking==0 ) {
               retval.item = getPerformanceInitItem(getLocation(PERF_INIT92), (item2!=null?item2.item:null)); 
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "performance_module_init_declaration"

    public static class performance_module_final_declaration_return extends TreeRuleReturnScope {
        public PerformanceFinalItem item = null;
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "performance_module_final_declaration"
    // RBuilder.g:1585:1: performance_module_final_declaration returns [PerformanceFinalItem item = null] : ^( PERF_FINAL item2= performance_final_section ) ;
    public final RBuilder.performance_module_final_declaration_return performance_module_final_declaration() throws RecognitionException {
        RBuilder.performance_module_final_declaration_return retval = new RBuilder.performance_module_final_declaration_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        ColsAST _first_0 = null;
        ColsAST _last = null;

        ColsAST PERF_FINAL93=null;
        RBuilder.performance_final_section_return item2 = null;


        ColsAST PERF_FINAL93_tree=null;

        try {
            // RBuilder.g:1586:5: ( ^( PERF_FINAL item2= performance_final_section ) )
            // RBuilder.g:1586:9: ^( PERF_FINAL item2= performance_final_section )
            {
            root_0 = (ColsAST)adaptor.nil();

            _last = (ColsAST)input.LT(1);
            {
            ColsAST _save_last_1 = _last;
            ColsAST _first_1 = null;
            ColsAST root_1 = (ColsAST)adaptor.nil();_last = (ColsAST)input.LT(1);
            PERF_FINAL93=(ColsAST)match(input,PERF_FINAL,FOLLOW_PERF_FINAL_in_performance_module_final_declaration8485); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            PERF_FINAL93_tree = (ColsAST)adaptor.dupNode(PERF_FINAL93);

            root_1 = (ColsAST)adaptor.becomeRoot(PERF_FINAL93_tree, root_1);
            }


            if ( input.LA(1)==Token.DOWN ) {
                match(input, Token.DOWN, null); if (state.failed) return retval;
                _last = (ColsAST)input.LT(1);
                pushFollow(FOLLOW_performance_final_section_in_performance_module_final_declaration8489);
                item2=performance_final_section();

                state._fsp--;
                if (state.failed) return retval;
                if ( state.backtracking==0 ) 
                adaptor.addChild(root_1, item2.getTree());

                match(input, Token.UP, null); if (state.failed) return retval;
            }adaptor.addChild(root_0, root_1);_last = _save_last_1;
            }

            if ( state.backtracking==0 ) {
               retval.item = getPerformanceFinalItem(getLocation(PERF_FINAL93), (item2!=null?item2.item:null)); 
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "performance_module_final_declaration"

    public static class module_body_init_declaration_return extends TreeRuleReturnScope {
        public InitItem item = null;
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "module_body_init_declaration"
    // RBuilder.g:1590:1: module_body_init_declaration returns [InitItem item = null] : ^( FAC_INIT item2= body_init_final_section ) ;
    public final RBuilder.module_body_init_declaration_return module_body_init_declaration() throws RecognitionException {
        RBuilder.module_body_init_declaration_return retval = new RBuilder.module_body_init_declaration_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        ColsAST _first_0 = null;
        ColsAST _last = null;

        ColsAST FAC_INIT94=null;
        RBuilder.body_init_final_section_return item2 = null;


        ColsAST FAC_INIT94_tree=null;

        try {
            // RBuilder.g:1591:5: ( ^( FAC_INIT item2= body_init_final_section ) )
            // RBuilder.g:1591:9: ^( FAC_INIT item2= body_init_final_section )
            {
            root_0 = (ColsAST)adaptor.nil();

            _last = (ColsAST)input.LT(1);
            {
            ColsAST _save_last_1 = _last;
            ColsAST _first_1 = null;
            ColsAST root_1 = (ColsAST)adaptor.nil();_last = (ColsAST)input.LT(1);
            FAC_INIT94=(ColsAST)match(input,FAC_INIT,FOLLOW_FAC_INIT_in_module_body_init_declaration8524); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            FAC_INIT94_tree = (ColsAST)adaptor.dupNode(FAC_INIT94);

            root_1 = (ColsAST)adaptor.becomeRoot(FAC_INIT94_tree, root_1);
            }


            match(input, Token.DOWN, null); if (state.failed) return retval;
            _last = (ColsAST)input.LT(1);
            pushFollow(FOLLOW_body_init_final_section_in_module_body_init_declaration8528);
            item2=body_init_final_section();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, item2.getTree());

            match(input, Token.UP, null); if (state.failed) return retval;adaptor.addChild(root_0, root_1);_last = _save_last_1;
            }

            if ( state.backtracking==0 ) {
               retval.item = getInitItem(getLocation(FAC_INIT94), (item2!=null?item2.item:null)); 
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "module_body_init_declaration"

    public static class module_body_final_declaration_return extends TreeRuleReturnScope {
        public FinalItem item = null;
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "module_body_final_declaration"
    // RBuilder.g:1595:1: module_body_final_declaration returns [FinalItem item = null] : ^( FAC_FINAL item2= body_init_final_section ) ;
    public final RBuilder.module_body_final_declaration_return module_body_final_declaration() throws RecognitionException {
        RBuilder.module_body_final_declaration_return retval = new RBuilder.module_body_final_declaration_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        ColsAST _first_0 = null;
        ColsAST _last = null;

        ColsAST FAC_FINAL95=null;
        RBuilder.body_init_final_section_return item2 = null;


        ColsAST FAC_FINAL95_tree=null;

        try {
            // RBuilder.g:1596:5: ( ^( FAC_FINAL item2= body_init_final_section ) )
            // RBuilder.g:1596:9: ^( FAC_FINAL item2= body_init_final_section )
            {
            root_0 = (ColsAST)adaptor.nil();

            _last = (ColsAST)input.LT(1);
            {
            ColsAST _save_last_1 = _last;
            ColsAST _first_1 = null;
            ColsAST root_1 = (ColsAST)adaptor.nil();_last = (ColsAST)input.LT(1);
            FAC_FINAL95=(ColsAST)match(input,FAC_FINAL,FOLLOW_FAC_FINAL_in_module_body_final_declaration8563); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            FAC_FINAL95_tree = (ColsAST)adaptor.dupNode(FAC_FINAL95);

            root_1 = (ColsAST)adaptor.becomeRoot(FAC_FINAL95_tree, root_1);
            }


            match(input, Token.DOWN, null); if (state.failed) return retval;
            _last = (ColsAST)input.LT(1);
            pushFollow(FOLLOW_body_init_final_section_in_module_body_final_declaration8567);
            item2=body_init_final_section();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, item2.getTree());

            match(input, Token.UP, null); if (state.failed) return retval;adaptor.addChild(root_0, root_1);_last = _save_last_1;
            }

            if ( state.backtracking==0 ) {
               retval.item = getFinalItem(getLocation(FAC_FINAL95), (item2!=null?item2.item:null)); 
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "module_body_final_declaration"

    public static class module_facility_init_declaration_return extends TreeRuleReturnScope {
        public InitItem item = null;
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "module_facility_init_declaration"
    // RBuilder.g:1600:1: module_facility_init_declaration returns [InitItem item = null] : ^( FAC_INIT item2= facility_init_final_section ) ;
    public final RBuilder.module_facility_init_declaration_return module_facility_init_declaration() throws RecognitionException {
        RBuilder.module_facility_init_declaration_return retval = new RBuilder.module_facility_init_declaration_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        ColsAST _first_0 = null;
        ColsAST _last = null;

        ColsAST FAC_INIT96=null;
        RBuilder.facility_init_final_section_return item2 = null;


        ColsAST FAC_INIT96_tree=null;

        try {
            // RBuilder.g:1601:5: ( ^( FAC_INIT item2= facility_init_final_section ) )
            // RBuilder.g:1601:9: ^( FAC_INIT item2= facility_init_final_section )
            {
            root_0 = (ColsAST)adaptor.nil();

            _last = (ColsAST)input.LT(1);
            {
            ColsAST _save_last_1 = _last;
            ColsAST _first_1 = null;
            ColsAST root_1 = (ColsAST)adaptor.nil();_last = (ColsAST)input.LT(1);
            FAC_INIT96=(ColsAST)match(input,FAC_INIT,FOLLOW_FAC_INIT_in_module_facility_init_declaration8602); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            FAC_INIT96_tree = (ColsAST)adaptor.dupNode(FAC_INIT96);

            root_1 = (ColsAST)adaptor.becomeRoot(FAC_INIT96_tree, root_1);
            }


            match(input, Token.DOWN, null); if (state.failed) return retval;
            _last = (ColsAST)input.LT(1);
            pushFollow(FOLLOW_facility_init_final_section_in_module_facility_init_declaration8606);
            item2=facility_init_final_section();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, item2.getTree());

            match(input, Token.UP, null); if (state.failed) return retval;adaptor.addChild(root_0, root_1);_last = _save_last_1;
            }

            if ( state.backtracking==0 ) {
               retval.item = getInitItem(getLocation(FAC_INIT96), (item2!=null?item2.item:null)); 
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "module_facility_init_declaration"

    public static class module_facility_final_declaration_return extends TreeRuleReturnScope {
        public FinalItem item = null;
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "module_facility_final_declaration"
    // RBuilder.g:1605:1: module_facility_final_declaration returns [FinalItem item = null] : ^( FAC_FINAL item2= facility_init_final_section ) ;
    public final RBuilder.module_facility_final_declaration_return module_facility_final_declaration() throws RecognitionException {
        RBuilder.module_facility_final_declaration_return retval = new RBuilder.module_facility_final_declaration_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        ColsAST _first_0 = null;
        ColsAST _last = null;

        ColsAST FAC_FINAL97=null;
        RBuilder.facility_init_final_section_return item2 = null;


        ColsAST FAC_FINAL97_tree=null;

        try {
            // RBuilder.g:1606:5: ( ^( FAC_FINAL item2= facility_init_final_section ) )
            // RBuilder.g:1606:9: ^( FAC_FINAL item2= facility_init_final_section )
            {
            root_0 = (ColsAST)adaptor.nil();

            _last = (ColsAST)input.LT(1);
            {
            ColsAST _save_last_1 = _last;
            ColsAST _first_1 = null;
            ColsAST root_1 = (ColsAST)adaptor.nil();_last = (ColsAST)input.LT(1);
            FAC_FINAL97=(ColsAST)match(input,FAC_FINAL,FOLLOW_FAC_FINAL_in_module_facility_final_declaration8641); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            FAC_FINAL97_tree = (ColsAST)adaptor.dupNode(FAC_FINAL97);

            root_1 = (ColsAST)adaptor.becomeRoot(FAC_FINAL97_tree, root_1);
            }


            match(input, Token.DOWN, null); if (state.failed) return retval;
            _last = (ColsAST)input.LT(1);
            pushFollow(FOLLOW_facility_init_final_section_in_module_facility_final_declaration8645);
            item2=facility_init_final_section();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, item2.getTree());

            match(input, Token.UP, null); if (state.failed) return retval;adaptor.addChild(root_0, root_1);_last = _save_last_1;
            }

            if ( state.backtracking==0 ) {
               retval.item = getFinalItem(getLocation(FAC_FINAL97), (item2!=null?item2.item:null)); 
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "module_facility_final_declaration"

    public static class type_concept_init_declaration_return extends TreeRuleReturnScope {
        public InitItem item = null;
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "type_concept_init_declaration"
    // RBuilder.g:1612:1: type_concept_init_declaration returns [InitItem item = null] : ^( INITIALIZATION item2= concept_init_final_section ) ;
    public final RBuilder.type_concept_init_declaration_return type_concept_init_declaration() throws RecognitionException {
        RBuilder.type_concept_init_declaration_return retval = new RBuilder.type_concept_init_declaration_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        ColsAST _first_0 = null;
        ColsAST _last = null;

        ColsAST INITIALIZATION98=null;
        RBuilder.concept_init_final_section_return item2 = null;


        ColsAST INITIALIZATION98_tree=null;

        try {
            // RBuilder.g:1613:5: ( ^( INITIALIZATION item2= concept_init_final_section ) )
            // RBuilder.g:1613:9: ^( INITIALIZATION item2= concept_init_final_section )
            {
            root_0 = (ColsAST)adaptor.nil();

            _last = (ColsAST)input.LT(1);
            {
            ColsAST _save_last_1 = _last;
            ColsAST _first_1 = null;
            ColsAST root_1 = (ColsAST)adaptor.nil();_last = (ColsAST)input.LT(1);
            INITIALIZATION98=(ColsAST)match(input,INITIALIZATION,FOLLOW_INITIALIZATION_in_type_concept_init_declaration8682); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            INITIALIZATION98_tree = (ColsAST)adaptor.dupNode(INITIALIZATION98);

            root_1 = (ColsAST)adaptor.becomeRoot(INITIALIZATION98_tree, root_1);
            }


            if ( input.LA(1)==Token.DOWN ) {
                match(input, Token.DOWN, null); if (state.failed) return retval;
                _last = (ColsAST)input.LT(1);
                pushFollow(FOLLOW_concept_init_final_section_in_type_concept_init_declaration8686);
                item2=concept_init_final_section();

                state._fsp--;
                if (state.failed) return retval;
                if ( state.backtracking==0 ) 
                adaptor.addChild(root_1, item2.getTree());

                match(input, Token.UP, null); if (state.failed) return retval;
            }adaptor.addChild(root_0, root_1);_last = _save_last_1;
            }

            if ( state.backtracking==0 ) {
               retval.item = getInitItem(getLocation(INITIALIZATION98), (item2!=null?item2.item:null)); 
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "type_concept_init_declaration"

    public static class type_concept_final_declaration_return extends TreeRuleReturnScope {
        public FinalItem item = null;
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "type_concept_final_declaration"
    // RBuilder.g:1617:1: type_concept_final_declaration returns [FinalItem item = null] : ^( FINALIZATION item2= concept_init_final_section ) ;
    public final RBuilder.type_concept_final_declaration_return type_concept_final_declaration() throws RecognitionException {
        RBuilder.type_concept_final_declaration_return retval = new RBuilder.type_concept_final_declaration_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        ColsAST _first_0 = null;
        ColsAST _last = null;

        ColsAST FINALIZATION99=null;
        RBuilder.concept_init_final_section_return item2 = null;


        ColsAST FINALIZATION99_tree=null;

        try {
            // RBuilder.g:1618:5: ( ^( FINALIZATION item2= concept_init_final_section ) )
            // RBuilder.g:1618:9: ^( FINALIZATION item2= concept_init_final_section )
            {
            root_0 = (ColsAST)adaptor.nil();

            _last = (ColsAST)input.LT(1);
            {
            ColsAST _save_last_1 = _last;
            ColsAST _first_1 = null;
            ColsAST root_1 = (ColsAST)adaptor.nil();_last = (ColsAST)input.LT(1);
            FINALIZATION99=(ColsAST)match(input,FINALIZATION,FOLLOW_FINALIZATION_in_type_concept_final_declaration8721); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            FINALIZATION99_tree = (ColsAST)adaptor.dupNode(FINALIZATION99);

            root_1 = (ColsAST)adaptor.becomeRoot(FINALIZATION99_tree, root_1);
            }


            if ( input.LA(1)==Token.DOWN ) {
                match(input, Token.DOWN, null); if (state.failed) return retval;
                _last = (ColsAST)input.LT(1);
                pushFollow(FOLLOW_concept_init_final_section_in_type_concept_final_declaration8725);
                item2=concept_init_final_section();

                state._fsp--;
                if (state.failed) return retval;
                if ( state.backtracking==0 ) 
                adaptor.addChild(root_1, item2.getTree());

                match(input, Token.UP, null); if (state.failed) return retval;
            }adaptor.addChild(root_0, root_1);_last = _save_last_1;
            }

            if ( state.backtracking==0 ) {
               retval.item = getFinalItem(getLocation(FINALIZATION99), (item2!=null?item2.item:null)
                      ); 
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "type_concept_final_declaration"

    public static class performance_type_init_declaration_return extends TreeRuleReturnScope {
        public PerformanceInitItem item = null;
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "performance_type_init_declaration"
    // RBuilder.g:1623:1: performance_type_init_declaration returns [PerformanceInitItem item = null] : ^( INITIALIZATION item2= performance_init_section ) ;
    public final RBuilder.performance_type_init_declaration_return performance_type_init_declaration() throws RecognitionException {
        RBuilder.performance_type_init_declaration_return retval = new RBuilder.performance_type_init_declaration_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        ColsAST _first_0 = null;
        ColsAST _last = null;

        ColsAST INITIALIZATION100=null;
        RBuilder.performance_init_section_return item2 = null;


        ColsAST INITIALIZATION100_tree=null;

        try {
            // RBuilder.g:1624:5: ( ^( INITIALIZATION item2= performance_init_section ) )
            // RBuilder.g:1624:9: ^( INITIALIZATION item2= performance_init_section )
            {
            root_0 = (ColsAST)adaptor.nil();

            _last = (ColsAST)input.LT(1);
            {
            ColsAST _save_last_1 = _last;
            ColsAST _first_1 = null;
            ColsAST root_1 = (ColsAST)adaptor.nil();_last = (ColsAST)input.LT(1);
            INITIALIZATION100=(ColsAST)match(input,INITIALIZATION,FOLLOW_INITIALIZATION_in_performance_type_init_declaration8761); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            INITIALIZATION100_tree = (ColsAST)adaptor.dupNode(INITIALIZATION100);

            root_1 = (ColsAST)adaptor.becomeRoot(INITIALIZATION100_tree, root_1);
            }


            if ( input.LA(1)==Token.DOWN ) {
                match(input, Token.DOWN, null); if (state.failed) return retval;
                _last = (ColsAST)input.LT(1);
                pushFollow(FOLLOW_performance_init_section_in_performance_type_init_declaration8765);
                item2=performance_init_section();

                state._fsp--;
                if (state.failed) return retval;
                if ( state.backtracking==0 ) 
                adaptor.addChild(root_1, item2.getTree());

                match(input, Token.UP, null); if (state.failed) return retval;
            }adaptor.addChild(root_0, root_1);_last = _save_last_1;
            }

            if ( state.backtracking==0 ) {
               retval.item = getPerformanceInitItem(getLocation(INITIALIZATION100), (item2!=null?item2.item:null)); 
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "performance_type_init_declaration"

    public static class performance_type_final_declaration_return extends TreeRuleReturnScope {
        public PerformanceFinalItem item = null;
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "performance_type_final_declaration"
    // RBuilder.g:1628:1: performance_type_final_declaration returns [PerformanceFinalItem item = null] : ^( FINALIZATION item2= performance_final_section ) ;
    public final RBuilder.performance_type_final_declaration_return performance_type_final_declaration() throws RecognitionException {
        RBuilder.performance_type_final_declaration_return retval = new RBuilder.performance_type_final_declaration_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        ColsAST _first_0 = null;
        ColsAST _last = null;

        ColsAST FINALIZATION101=null;
        RBuilder.performance_final_section_return item2 = null;


        ColsAST FINALIZATION101_tree=null;

        try {
            // RBuilder.g:1629:5: ( ^( FINALIZATION item2= performance_final_section ) )
            // RBuilder.g:1629:9: ^( FINALIZATION item2= performance_final_section )
            {
            root_0 = (ColsAST)adaptor.nil();

            _last = (ColsAST)input.LT(1);
            {
            ColsAST _save_last_1 = _last;
            ColsAST _first_1 = null;
            ColsAST root_1 = (ColsAST)adaptor.nil();_last = (ColsAST)input.LT(1);
            FINALIZATION101=(ColsAST)match(input,FINALIZATION,FOLLOW_FINALIZATION_in_performance_type_final_declaration8800); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            FINALIZATION101_tree = (ColsAST)adaptor.dupNode(FINALIZATION101);

            root_1 = (ColsAST)adaptor.becomeRoot(FINALIZATION101_tree, root_1);
            }


            if ( input.LA(1)==Token.DOWN ) {
                match(input, Token.DOWN, null); if (state.failed) return retval;
                _last = (ColsAST)input.LT(1);
                pushFollow(FOLLOW_performance_final_section_in_performance_type_final_declaration8805);
                item2=performance_final_section();

                state._fsp--;
                if (state.failed) return retval;
                if ( state.backtracking==0 ) 
                adaptor.addChild(root_1, item2.getTree());

                match(input, Token.UP, null); if (state.failed) return retval;
            }adaptor.addChild(root_0, root_1);_last = _save_last_1;
            }

            if ( state.backtracking==0 ) {
               retval.item = getPerformanceFinalItem(getLocation(FINALIZATION101), (item2!=null?item2.item:null)); 
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "performance_type_final_declaration"

    public static class type_body_init_declaration_return extends TreeRuleReturnScope {
        public InitItem item = null;
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "type_body_init_declaration"
    // RBuilder.g:1633:1: type_body_init_declaration returns [InitItem item = null] : ^( INITIALIZATION item2= body_init_final_section ) ;
    public final RBuilder.type_body_init_declaration_return type_body_init_declaration() throws RecognitionException {
        RBuilder.type_body_init_declaration_return retval = new RBuilder.type_body_init_declaration_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        ColsAST _first_0 = null;
        ColsAST _last = null;

        ColsAST INITIALIZATION102=null;
        RBuilder.body_init_final_section_return item2 = null;


        ColsAST INITIALIZATION102_tree=null;

        try {
            // RBuilder.g:1634:5: ( ^( INITIALIZATION item2= body_init_final_section ) )
            // RBuilder.g:1634:9: ^( INITIALIZATION item2= body_init_final_section )
            {
            root_0 = (ColsAST)adaptor.nil();

            _last = (ColsAST)input.LT(1);
            {
            ColsAST _save_last_1 = _last;
            ColsAST _first_1 = null;
            ColsAST root_1 = (ColsAST)adaptor.nil();_last = (ColsAST)input.LT(1);
            INITIALIZATION102=(ColsAST)match(input,INITIALIZATION,FOLLOW_INITIALIZATION_in_type_body_init_declaration8840); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            INITIALIZATION102_tree = (ColsAST)adaptor.dupNode(INITIALIZATION102);

            root_1 = (ColsAST)adaptor.becomeRoot(INITIALIZATION102_tree, root_1);
            }


            match(input, Token.DOWN, null); if (state.failed) return retval;
            _last = (ColsAST)input.LT(1);
            pushFollow(FOLLOW_body_init_final_section_in_type_body_init_declaration8844);
            item2=body_init_final_section();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, item2.getTree());

            match(input, Token.UP, null); if (state.failed) return retval;adaptor.addChild(root_0, root_1);_last = _save_last_1;
            }

            if ( state.backtracking==0 ) {
               retval.item = getInitItem(getLocation(INITIALIZATION102), (item2!=null?item2.item:null)); 
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "type_body_init_declaration"

    public static class type_body_final_declaration_return extends TreeRuleReturnScope {
        public FinalItem item = null;
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "type_body_final_declaration"
    // RBuilder.g:1638:1: type_body_final_declaration returns [FinalItem item = null] : ^( FINALIZATION item2= body_init_final_section ) ;
    public final RBuilder.type_body_final_declaration_return type_body_final_declaration() throws RecognitionException {
        RBuilder.type_body_final_declaration_return retval = new RBuilder.type_body_final_declaration_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        ColsAST _first_0 = null;
        ColsAST _last = null;

        ColsAST FINALIZATION103=null;
        RBuilder.body_init_final_section_return item2 = null;


        ColsAST FINALIZATION103_tree=null;

        try {
            // RBuilder.g:1639:5: ( ^( FINALIZATION item2= body_init_final_section ) )
            // RBuilder.g:1639:9: ^( FINALIZATION item2= body_init_final_section )
            {
            root_0 = (ColsAST)adaptor.nil();

            _last = (ColsAST)input.LT(1);
            {
            ColsAST _save_last_1 = _last;
            ColsAST _first_1 = null;
            ColsAST root_1 = (ColsAST)adaptor.nil();_last = (ColsAST)input.LT(1);
            FINALIZATION103=(ColsAST)match(input,FINALIZATION,FOLLOW_FINALIZATION_in_type_body_final_declaration8879); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            FINALIZATION103_tree = (ColsAST)adaptor.dupNode(FINALIZATION103);

            root_1 = (ColsAST)adaptor.becomeRoot(FINALIZATION103_tree, root_1);
            }


            match(input, Token.DOWN, null); if (state.failed) return retval;
            _last = (ColsAST)input.LT(1);
            pushFollow(FOLLOW_body_init_final_section_in_type_body_final_declaration8883);
            item2=body_init_final_section();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, item2.getTree());

            match(input, Token.UP, null); if (state.failed) return retval;adaptor.addChild(root_0, root_1);_last = _save_last_1;
            }

            if ( state.backtracking==0 ) {
               retval.item = getFinalItem(getLocation(FINALIZATION103), (item2!=null?item2.item:null)); 
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "type_body_final_declaration"

    public static class type_facility_init_declaration_return extends TreeRuleReturnScope {
        public InitItem item = null;
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "type_facility_init_declaration"
    // RBuilder.g:1643:1: type_facility_init_declaration returns [InitItem item = null] : ^( INITIALIZATION item2= facility_init_final_section ) ;
    public final RBuilder.type_facility_init_declaration_return type_facility_init_declaration() throws RecognitionException {
        RBuilder.type_facility_init_declaration_return retval = new RBuilder.type_facility_init_declaration_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        ColsAST _first_0 = null;
        ColsAST _last = null;

        ColsAST INITIALIZATION104=null;
        RBuilder.facility_init_final_section_return item2 = null;


        ColsAST INITIALIZATION104_tree=null;

        try {
            // RBuilder.g:1644:5: ( ^( INITIALIZATION item2= facility_init_final_section ) )
            // RBuilder.g:1644:9: ^( INITIALIZATION item2= facility_init_final_section )
            {
            root_0 = (ColsAST)adaptor.nil();

            _last = (ColsAST)input.LT(1);
            {
            ColsAST _save_last_1 = _last;
            ColsAST _first_1 = null;
            ColsAST root_1 = (ColsAST)adaptor.nil();_last = (ColsAST)input.LT(1);
            INITIALIZATION104=(ColsAST)match(input,INITIALIZATION,FOLLOW_INITIALIZATION_in_type_facility_init_declaration8918); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            INITIALIZATION104_tree = (ColsAST)adaptor.dupNode(INITIALIZATION104);

            root_1 = (ColsAST)adaptor.becomeRoot(INITIALIZATION104_tree, root_1);
            }


            match(input, Token.DOWN, null); if (state.failed) return retval;
            _last = (ColsAST)input.LT(1);
            pushFollow(FOLLOW_facility_init_final_section_in_type_facility_init_declaration8922);
            item2=facility_init_final_section();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, item2.getTree());

            match(input, Token.UP, null); if (state.failed) return retval;adaptor.addChild(root_0, root_1);_last = _save_last_1;
            }

            if ( state.backtracking==0 ) {
               retval.item = getInitItem(getLocation(INITIALIZATION104), (item2!=null?item2.item:null)); 
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "type_facility_init_declaration"

    public static class type_facility_final_declaration_return extends TreeRuleReturnScope {
        public FinalItem item = null;
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "type_facility_final_declaration"
    // RBuilder.g:1648:1: type_facility_final_declaration returns [FinalItem item = null] : ^( FINALIZATION item2= facility_init_final_section ) ;
    public final RBuilder.type_facility_final_declaration_return type_facility_final_declaration() throws RecognitionException {
        RBuilder.type_facility_final_declaration_return retval = new RBuilder.type_facility_final_declaration_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        ColsAST _first_0 = null;
        ColsAST _last = null;

        ColsAST FINALIZATION105=null;
        RBuilder.facility_init_final_section_return item2 = null;


        ColsAST FINALIZATION105_tree=null;

        try {
            // RBuilder.g:1649:5: ( ^( FINALIZATION item2= facility_init_final_section ) )
            // RBuilder.g:1649:9: ^( FINALIZATION item2= facility_init_final_section )
            {
            root_0 = (ColsAST)adaptor.nil();

            _last = (ColsAST)input.LT(1);
            {
            ColsAST _save_last_1 = _last;
            ColsAST _first_1 = null;
            ColsAST root_1 = (ColsAST)adaptor.nil();_last = (ColsAST)input.LT(1);
            FINALIZATION105=(ColsAST)match(input,FINALIZATION,FOLLOW_FINALIZATION_in_type_facility_final_declaration8957); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            FINALIZATION105_tree = (ColsAST)adaptor.dupNode(FINALIZATION105);

            root_1 = (ColsAST)adaptor.becomeRoot(FINALIZATION105_tree, root_1);
            }


            match(input, Token.DOWN, null); if (state.failed) return retval;
            _last = (ColsAST)input.LT(1);
            pushFollow(FOLLOW_facility_init_final_section_in_type_facility_final_declaration8961);
            item2=facility_init_final_section();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, item2.getTree());

            match(input, Token.UP, null); if (state.failed) return retval;adaptor.addChild(root_0, root_1);_last = _save_last_1;
            }

            if ( state.backtracking==0 ) {
               retval.item = getFinalItem(getLocation(FINALIZATION105), (item2!=null?item2.item:null)); 
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "type_facility_final_declaration"

    public static class concept_init_final_section_return extends TreeRuleReturnScope {
        public InitItem item = null;
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "concept_init_final_section"
    // RBuilder.g:1655:1: concept_init_final_section returns [InitItem item = null] : (items2= affects_clause )* (req= requires_clause )? (ens= ensures_clause )? ;
    public final RBuilder.concept_init_final_section_return concept_init_final_section() throws RecognitionException {
        RBuilder.concept_init_final_section_return retval = new RBuilder.concept_init_final_section_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        ColsAST _first_0 = null;
        ColsAST _last = null;

        RBuilder.affects_clause_return items2 = null;

        RBuilder.requires_clause_return req = null;

        RBuilder.ensures_clause_return ens = null;



           Location loc = null; //dummy
            edu.clemson.cs.r2jt.collections.List<AffectsItem> items = new edu.clemson.cs.r2jt.collections.List<AffectsItem>("AffectsItem");
            edu.clemson.cs.r2jt.collections.List<FacilityDec> facs = new edu.clemson.cs.r2jt.collections.List<FacilityDec>(); //dummy
            edu.clemson.cs.r2jt.collections.List<VarDec> vars = new edu.clemson.cs.r2jt.collections.List<VarDec>(); //dummy
            edu.clemson.cs.r2jt.collections.List<AuxVarDec> aux_vars = new edu.clemson.cs.r2jt.collections.List<AuxVarDec>(); //dummy
            edu.clemson.cs.r2jt.collections.List<Statement> sts = new edu.clemson.cs.r2jt.collections.List<Statement>(); //dummy

        try {
            // RBuilder.g:1663:5: ( (items2= affects_clause )* (req= requires_clause )? (ens= ensures_clause )? )
            // RBuilder.g:1663:9: (items2= affects_clause )* (req= requires_clause )? (ens= ensures_clause )?
            {
            root_0 = (ColsAST)adaptor.nil();

            // RBuilder.g:1663:9: (items2= affects_clause )*
            loop135:
            do {
                int alt135=2;
                int LA135_0 = input.LA(1);

                if ( (LA135_0==AFFECTS) ) {
                    alt135=1;
                }


                switch (alt135) {
            	case 1 :
            	    // RBuilder.g:1663:10: items2= affects_clause
            	    {
            	    _last = (ColsAST)input.LT(1);
            	    pushFollow(FOLLOW_affects_clause_in_concept_init_final_section9004);
            	    items2=affects_clause();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) 
            	    adaptor.addChild(root_0, items2.getTree());
            	    if ( state.backtracking==0 ) {
            	       items.addAll((items2!=null?items2.items:null)); 
            	    }

            	    if ( state.backtracking==0 ) {
            	    }
            	    }
            	    break;

            	default :
            	    break loop135;
                }
            } while (true);

            // RBuilder.g:1664:9: (req= requires_clause )?
            int alt136=2;
            int LA136_0 = input.LA(1);

            if ( (LA136_0==REQUIRES) ) {
                alt136=1;
            }
            switch (alt136) {
                case 1 :
                    // RBuilder.g:1664:10: req= requires_clause
                    {
                    _last = (ColsAST)input.LT(1);
                    pushFollow(FOLLOW_requires_clause_in_concept_init_final_section9021);
                    req=requires_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, req.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }

            // RBuilder.g:1665:9: (ens= ensures_clause )?
            int alt137=2;
            int LA137_0 = input.LA(1);

            if ( (LA137_0==ENSURES) ) {
                alt137=1;
            }
            switch (alt137) {
                case 1 :
                    // RBuilder.g:1665:10: ens= ensures_clause
                    {
                    _last = (ColsAST)input.LT(1);
                    pushFollow(FOLLOW_ensures_clause_in_concept_init_final_section9036);
                    ens=ensures_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, ens.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }

            if ( state.backtracking==0 ) {
               retval.item = new InitItem(loc, items, (req!=null?req.exp:null), (ens!=null?ens.exp:null), facs, vars, aux_vars, sts); 
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "concept_init_final_section"

    public static class performance_init_section_return extends TreeRuleReturnScope {
        public PerformanceInitItem  item = null;
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "performance_init_section"
    // RBuilder.g:1669:1: performance_init_section returns [PerformanceInitItem item = null] : (items2= affects_clause )* (req= requires_clause )? (ens= ensures_clause )? (dur= duration_clause )? (msp= mainp_disp_clause )? ;
    public final RBuilder.performance_init_section_return performance_init_section() throws RecognitionException {
        RBuilder.performance_init_section_return retval = new RBuilder.performance_init_section_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        ColsAST _first_0 = null;
        ColsAST _last = null;

        RBuilder.affects_clause_return items2 = null;

        RBuilder.requires_clause_return req = null;

        RBuilder.ensures_clause_return ens = null;

        RBuilder.duration_clause_return dur = null;

        RBuilder.mainp_disp_clause_return msp = null;



           Location loc = null; //dummy
            edu.clemson.cs.r2jt.collections.List<AffectsItem> items = new edu.clemson.cs.r2jt.collections.List<AffectsItem>("AffectsItem");
            edu.clemson.cs.r2jt.collections.List<FacilityDec> facs = new edu.clemson.cs.r2jt.collections.List<FacilityDec>(); //dummy
            edu.clemson.cs.r2jt.collections.List<VarDec> vars = new edu.clemson.cs.r2jt.collections.List<VarDec>(); //dummy
            edu.clemson.cs.r2jt.collections.List<AuxVarDec> aux_vars = new edu.clemson.cs.r2jt.collections.List<AuxVarDec>(); //dummy
            edu.clemson.cs.r2jt.collections.List<Statement> sts = new edu.clemson.cs.r2jt.collections.List<Statement>(); //dummy

        try {
            // RBuilder.g:1677:5: ( (items2= affects_clause )* (req= requires_clause )? (ens= ensures_clause )? (dur= duration_clause )? (msp= mainp_disp_clause )? )
            // RBuilder.g:1677:9: (items2= affects_clause )* (req= requires_clause )? (ens= ensures_clause )? (dur= duration_clause )? (msp= mainp_disp_clause )?
            {
            root_0 = (ColsAST)adaptor.nil();

            // RBuilder.g:1677:9: (items2= affects_clause )*
            loop138:
            do {
                int alt138=2;
                int LA138_0 = input.LA(1);

                if ( (LA138_0==AFFECTS) ) {
                    alt138=1;
                }


                switch (alt138) {
            	case 1 :
            	    // RBuilder.g:1677:10: items2= affects_clause
            	    {
            	    _last = (ColsAST)input.LT(1);
            	    pushFollow(FOLLOW_affects_clause_in_performance_init_section9078);
            	    items2=affects_clause();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) 
            	    adaptor.addChild(root_0, items2.getTree());
            	    if ( state.backtracking==0 ) {
            	       items.addAll((items2!=null?items2.items:null)); 
            	    }

            	    if ( state.backtracking==0 ) {
            	    }
            	    }
            	    break;

            	default :
            	    break loop138;
                }
            } while (true);

            // RBuilder.g:1678:9: (req= requires_clause )?
            int alt139=2;
            int LA139_0 = input.LA(1);

            if ( (LA139_0==REQUIRES) ) {
                alt139=1;
            }
            switch (alt139) {
                case 1 :
                    // RBuilder.g:1678:10: req= requires_clause
                    {
                    _last = (ColsAST)input.LT(1);
                    pushFollow(FOLLOW_requires_clause_in_performance_init_section9095);
                    req=requires_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, req.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }

            // RBuilder.g:1679:9: (ens= ensures_clause )?
            int alt140=2;
            int LA140_0 = input.LA(1);

            if ( (LA140_0==ENSURES) ) {
                alt140=1;
            }
            switch (alt140) {
                case 1 :
                    // RBuilder.g:1679:10: ens= ensures_clause
                    {
                    _last = (ColsAST)input.LT(1);
                    pushFollow(FOLLOW_ensures_clause_in_performance_init_section9110);
                    ens=ensures_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, ens.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }

            // RBuilder.g:1680:9: (dur= duration_clause )?
            int alt141=2;
            int LA141_0 = input.LA(1);

            if ( (LA141_0==DURATION) ) {
                alt141=1;
            }
            switch (alt141) {
                case 1 :
                    // RBuilder.g:1680:10: dur= duration_clause
                    {
                    _last = (ColsAST)input.LT(1);
                    pushFollow(FOLLOW_duration_clause_in_performance_init_section9125);
                    dur=duration_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, dur.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }

            // RBuilder.g:1681:9: (msp= mainp_disp_clause )?
            int alt142=2;
            int LA142_0 = input.LA(1);

            if ( (LA142_0==MAINP_DISP) ) {
                alt142=1;
            }
            switch (alt142) {
                case 1 :
                    // RBuilder.g:1681:10: msp= mainp_disp_clause
                    {
                    _last = (ColsAST)input.LT(1);
                    pushFollow(FOLLOW_mainp_disp_clause_in_performance_init_section9140);
                    msp=mainp_disp_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, msp.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }

            if ( state.backtracking==0 ) {
               retval.item = new PerformanceInitItem(loc, items, (req!=null?req.exp:null), (ens!=null?ens.exp:null), (dur!=null?dur.exp:null), (msp!=null?msp.exp:null), facs, vars, aux_vars, sts); 
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "performance_init_section"

    public static class performance_final_section_return extends TreeRuleReturnScope {
        public PerformanceFinalItem  item = null;
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "performance_final_section"
    // RBuilder.g:1685:1: performance_final_section returns [PerformanceFinalItem item = null] : (items2= affects_clause )* (req= requires_clause )? (ens= ensures_clause )? (dur= duration_clause )? (msp= mainp_disp_clause )? ;
    public final RBuilder.performance_final_section_return performance_final_section() throws RecognitionException {
        RBuilder.performance_final_section_return retval = new RBuilder.performance_final_section_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        ColsAST _first_0 = null;
        ColsAST _last = null;

        RBuilder.affects_clause_return items2 = null;

        RBuilder.requires_clause_return req = null;

        RBuilder.ensures_clause_return ens = null;

        RBuilder.duration_clause_return dur = null;

        RBuilder.mainp_disp_clause_return msp = null;



           Location loc = null; //dummy
            edu.clemson.cs.r2jt.collections.List<AffectsItem> items = new edu.clemson.cs.r2jt.collections.List<AffectsItem>("AffectsItem");
            edu.clemson.cs.r2jt.collections.List<FacilityDec> facs = new edu.clemson.cs.r2jt.collections.List<FacilityDec>(); //dummy
            edu.clemson.cs.r2jt.collections.List<VarDec> vars = new edu.clemson.cs.r2jt.collections.List<VarDec>(); //dummy
            edu.clemson.cs.r2jt.collections.List<AuxVarDec> aux_vars = new edu.clemson.cs.r2jt.collections.List<AuxVarDec>(); //dummy
            edu.clemson.cs.r2jt.collections.List<Statement> sts = new edu.clemson.cs.r2jt.collections.List<Statement>(); //dummy

        try {
            // RBuilder.g:1693:5: ( (items2= affects_clause )* (req= requires_clause )? (ens= ensures_clause )? (dur= duration_clause )? (msp= mainp_disp_clause )? )
            // RBuilder.g:1693:9: (items2= affects_clause )* (req= requires_clause )? (ens= ensures_clause )? (dur= duration_clause )? (msp= mainp_disp_clause )?
            {
            root_0 = (ColsAST)adaptor.nil();

            // RBuilder.g:1693:9: (items2= affects_clause )*
            loop143:
            do {
                int alt143=2;
                int LA143_0 = input.LA(1);

                if ( (LA143_0==AFFECTS) ) {
                    alt143=1;
                }


                switch (alt143) {
            	case 1 :
            	    // RBuilder.g:1693:10: items2= affects_clause
            	    {
            	    _last = (ColsAST)input.LT(1);
            	    pushFollow(FOLLOW_affects_clause_in_performance_final_section9182);
            	    items2=affects_clause();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) 
            	    adaptor.addChild(root_0, items2.getTree());
            	    if ( state.backtracking==0 ) {
            	       items.addAll((items2!=null?items2.items:null)); 
            	    }

            	    if ( state.backtracking==0 ) {
            	    }
            	    }
            	    break;

            	default :
            	    break loop143;
                }
            } while (true);

            // RBuilder.g:1694:9: (req= requires_clause )?
            int alt144=2;
            int LA144_0 = input.LA(1);

            if ( (LA144_0==REQUIRES) ) {
                alt144=1;
            }
            switch (alt144) {
                case 1 :
                    // RBuilder.g:1694:10: req= requires_clause
                    {
                    _last = (ColsAST)input.LT(1);
                    pushFollow(FOLLOW_requires_clause_in_performance_final_section9199);
                    req=requires_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, req.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }

            // RBuilder.g:1695:9: (ens= ensures_clause )?
            int alt145=2;
            int LA145_0 = input.LA(1);

            if ( (LA145_0==ENSURES) ) {
                alt145=1;
            }
            switch (alt145) {
                case 1 :
                    // RBuilder.g:1695:10: ens= ensures_clause
                    {
                    _last = (ColsAST)input.LT(1);
                    pushFollow(FOLLOW_ensures_clause_in_performance_final_section9214);
                    ens=ensures_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, ens.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }

            // RBuilder.g:1696:9: (dur= duration_clause )?
            int alt146=2;
            int LA146_0 = input.LA(1);

            if ( (LA146_0==DURATION) ) {
                alt146=1;
            }
            switch (alt146) {
                case 1 :
                    // RBuilder.g:1696:10: dur= duration_clause
                    {
                    _last = (ColsAST)input.LT(1);
                    pushFollow(FOLLOW_duration_clause_in_performance_final_section9229);
                    dur=duration_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, dur.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }

            // RBuilder.g:1697:9: (msp= mainp_disp_clause )?
            int alt147=2;
            int LA147_0 = input.LA(1);

            if ( (LA147_0==MAINP_DISP) ) {
                alt147=1;
            }
            switch (alt147) {
                case 1 :
                    // RBuilder.g:1697:10: msp= mainp_disp_clause
                    {
                    _last = (ColsAST)input.LT(1);
                    pushFollow(FOLLOW_mainp_disp_clause_in_performance_final_section9244);
                    msp=mainp_disp_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, msp.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }

            if ( state.backtracking==0 ) {
               retval.item = new PerformanceFinalItem (loc, items, (req!=null?req.exp:null), (ens!=null?ens.exp:null), (dur!=null?dur.exp:null), (msp!=null?msp.exp:null), facs, vars, aux_vars, sts); 
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "performance_final_section"

    public static class body_init_final_section_return extends TreeRuleReturnScope {
        public InitItem item = null;
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "body_init_final_section"
    // RBuilder.g:1701:1: body_init_final_section returns [InitItem item = null] : (items2= affects_clause )* (fac2= facility_declaration )* (vars2= variable_declaration )* (aux_vars2= aux_variable_declaration )* (sts= statement_sequence ) ;
    public final RBuilder.body_init_final_section_return body_init_final_section() throws RecognitionException {
        RBuilder.body_init_final_section_return retval = new RBuilder.body_init_final_section_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        ColsAST _first_0 = null;
        ColsAST _last = null;

        RBuilder.affects_clause_return items2 = null;

        RBuilder.facility_declaration_return fac2 = null;

        RBuilder.variable_declaration_return vars2 = null;

        RBuilder.aux_variable_declaration_return aux_vars2 = null;

        RBuilder.statement_sequence_return sts = null;



           Location loc = null; //dummy
            edu.clemson.cs.r2jt.collections.List<AffectsItem> items = new edu.clemson.cs.r2jt.collections.List<AffectsItem>("AffectsItem");
            Exp req = null; //dummy
            Exp ens = null; //dummy
            edu.clemson.cs.r2jt.collections.List<FacilityDec> facs = new edu.clemson.cs.r2jt.collections.List<FacilityDec>("FacilityDec");
            edu.clemson.cs.r2jt.collections.List<VarDec> vars = new edu.clemson.cs.r2jt.collections.List<VarDec>("VarDec");
            edu.clemson.cs.r2jt.collections.List<AuxVarDec> aux_vars = new edu.clemson.cs.r2jt.collections.List<AuxVarDec>("AuxVarDec");

        try {
            // RBuilder.g:1710:5: ( (items2= affects_clause )* (fac2= facility_declaration )* (vars2= variable_declaration )* (aux_vars2= aux_variable_declaration )* (sts= statement_sequence ) )
            // RBuilder.g:1710:9: (items2= affects_clause )* (fac2= facility_declaration )* (vars2= variable_declaration )* (aux_vars2= aux_variable_declaration )* (sts= statement_sequence )
            {
            root_0 = (ColsAST)adaptor.nil();

            // RBuilder.g:1710:9: (items2= affects_clause )*
            loop148:
            do {
                int alt148=2;
                int LA148_0 = input.LA(1);

                if ( (LA148_0==AFFECTS) ) {
                    alt148=1;
                }


                switch (alt148) {
            	case 1 :
            	    // RBuilder.g:1710:10: items2= affects_clause
            	    {
            	    _last = (ColsAST)input.LT(1);
            	    pushFollow(FOLLOW_affects_clause_in_body_init_final_section9286);
            	    items2=affects_clause();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) 
            	    adaptor.addChild(root_0, items2.getTree());
            	    if ( state.backtracking==0 ) {
            	       items.addAll((items2!=null?items2.items:null)); 
            	    }

            	    if ( state.backtracking==0 ) {
            	    }
            	    }
            	    break;

            	default :
            	    break loop148;
                }
            } while (true);

            // RBuilder.g:1711:9: (fac2= facility_declaration )*
            loop149:
            do {
                int alt149=2;
                int LA149_0 = input.LA(1);

                if ( (LA149_0==FACILITY) ) {
                    alt149=1;
                }


                switch (alt149) {
            	case 1 :
            	    // RBuilder.g:1711:10: fac2= facility_declaration
            	    {
            	    _last = (ColsAST)input.LT(1);
            	    pushFollow(FOLLOW_facility_declaration_in_body_init_final_section9303);
            	    fac2=facility_declaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) 
            	    adaptor.addChild(root_0, fac2.getTree());
            	    if ( state.backtracking==0 ) {
            	       facs.add((fac2!=null?fac2.dec:null)); 
            	    }

            	    if ( state.backtracking==0 ) {
            	    }
            	    }
            	    break;

            	default :
            	    break loop149;
                }
            } while (true);

            // RBuilder.g:1712:9: (vars2= variable_declaration )*
            loop150:
            do {
                int alt150=2;
                int LA150_0 = input.LA(1);

                if ( (LA150_0==VAR) ) {
                    alt150=1;
                }


                switch (alt150) {
            	case 1 :
            	    // RBuilder.g:1712:10: vars2= variable_declaration
            	    {
            	    _last = (ColsAST)input.LT(1);
            	    pushFollow(FOLLOW_variable_declaration_in_body_init_final_section9320);
            	    vars2=variable_declaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) 
            	    adaptor.addChild(root_0, vars2.getTree());
            	    if ( state.backtracking==0 ) {
            	       vars.addAll((vars2!=null?vars2.decs:null)); 
            	    }

            	    if ( state.backtracking==0 ) {
            	    }
            	    }
            	    break;

            	default :
            	    break loop150;
                }
            } while (true);

            // RBuilder.g:1713:9: (aux_vars2= aux_variable_declaration )*
            loop151:
            do {
                int alt151=2;
                int LA151_0 = input.LA(1);

                if ( (LA151_0==AUX_VAR) ) {
                    alt151=1;
                }


                switch (alt151) {
            	case 1 :
            	    // RBuilder.g:1713:10: aux_vars2= aux_variable_declaration
            	    {
            	    _last = (ColsAST)input.LT(1);
            	    pushFollow(FOLLOW_aux_variable_declaration_in_body_init_final_section9337);
            	    aux_vars2=aux_variable_declaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) 
            	    adaptor.addChild(root_0, aux_vars2.getTree());
            	    if ( state.backtracking==0 ) {
            	       aux_vars.addAll((aux_vars2!=null?aux_vars2.decs:null)); 
            	    }

            	    if ( state.backtracking==0 ) {
            	    }
            	    }
            	    break;

            	default :
            	    break loop151;
                }
            } while (true);

            // RBuilder.g:1714:9: (sts= statement_sequence )
            // RBuilder.g:1714:10: sts= statement_sequence
            {
            _last = (ColsAST)input.LT(1);
            pushFollow(FOLLOW_statement_sequence_in_body_init_final_section9354);
            sts=statement_sequence();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, sts.getTree());

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {
               retval.item = new InitItem(loc, items, req, ens, facs, vars, aux_vars, (sts!=null?sts.stmts:null)); 
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "body_init_final_section"

    public static class facility_init_final_section_return extends TreeRuleReturnScope {
        public InitItem item = null;
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "facility_init_final_section"
    // RBuilder.g:1718:1: facility_init_final_section returns [InitItem item = null] : (items2= affects_clause )* (req= requires_clause )? (ens= ensures_clause )? (fac2= facility_declaration )* (vars2= variable_declaration )* (aux_vars2= aux_variable_declaration )* (sts= statement_sequence ) ;
    public final RBuilder.facility_init_final_section_return facility_init_final_section() throws RecognitionException {
        RBuilder.facility_init_final_section_return retval = new RBuilder.facility_init_final_section_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        ColsAST _first_0 = null;
        ColsAST _last = null;

        RBuilder.affects_clause_return items2 = null;

        RBuilder.requires_clause_return req = null;

        RBuilder.ensures_clause_return ens = null;

        RBuilder.facility_declaration_return fac2 = null;

        RBuilder.variable_declaration_return vars2 = null;

        RBuilder.aux_variable_declaration_return aux_vars2 = null;

        RBuilder.statement_sequence_return sts = null;



           Location loc = null; //dummy
            edu.clemson.cs.r2jt.collections.List<AffectsItem> items = new edu.clemson.cs.r2jt.collections.List<AffectsItem>("AffectsItem");
            edu.clemson.cs.r2jt.collections.List<FacilityDec> facs = new edu.clemson.cs.r2jt.collections.List<FacilityDec>("FacilityDec");
            edu.clemson.cs.r2jt.collections.List<VarDec> vars = new edu.clemson.cs.r2jt.collections.List<VarDec>("VarDec");
            edu.clemson.cs.r2jt.collections.List<AuxVarDec> aux_vars = new edu.clemson.cs.r2jt.collections.List<AuxVarDec>("AuxVarDec");

        try {
            // RBuilder.g:1725:5: ( (items2= affects_clause )* (req= requires_clause )? (ens= ensures_clause )? (fac2= facility_declaration )* (vars2= variable_declaration )* (aux_vars2= aux_variable_declaration )* (sts= statement_sequence ) )
            // RBuilder.g:1725:9: (items2= affects_clause )* (req= requires_clause )? (ens= ensures_clause )? (fac2= facility_declaration )* (vars2= variable_declaration )* (aux_vars2= aux_variable_declaration )* (sts= statement_sequence )
            {
            root_0 = (ColsAST)adaptor.nil();

            // RBuilder.g:1725:9: (items2= affects_clause )*
            loop152:
            do {
                int alt152=2;
                int LA152_0 = input.LA(1);

                if ( (LA152_0==AFFECTS) ) {
                    alt152=1;
                }


                switch (alt152) {
            	case 1 :
            	    // RBuilder.g:1725:10: items2= affects_clause
            	    {
            	    _last = (ColsAST)input.LT(1);
            	    pushFollow(FOLLOW_affects_clause_in_facility_init_final_section9395);
            	    items2=affects_clause();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) 
            	    adaptor.addChild(root_0, items2.getTree());
            	    if ( state.backtracking==0 ) {
            	       items.addAll((items2!=null?items2.items:null)); 
            	    }

            	    if ( state.backtracking==0 ) {
            	    }
            	    }
            	    break;

            	default :
            	    break loop152;
                }
            } while (true);

            // RBuilder.g:1726:9: (req= requires_clause )?
            int alt153=2;
            int LA153_0 = input.LA(1);

            if ( (LA153_0==REQUIRES) ) {
                alt153=1;
            }
            switch (alt153) {
                case 1 :
                    // RBuilder.g:1726:10: req= requires_clause
                    {
                    _last = (ColsAST)input.LT(1);
                    pushFollow(FOLLOW_requires_clause_in_facility_init_final_section9412);
                    req=requires_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, req.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }

            // RBuilder.g:1727:9: (ens= ensures_clause )?
            int alt154=2;
            int LA154_0 = input.LA(1);

            if ( (LA154_0==ENSURES) ) {
                alt154=1;
            }
            switch (alt154) {
                case 1 :
                    // RBuilder.g:1727:10: ens= ensures_clause
                    {
                    _last = (ColsAST)input.LT(1);
                    pushFollow(FOLLOW_ensures_clause_in_facility_init_final_section9427);
                    ens=ensures_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, ens.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }

            // RBuilder.g:1728:9: (fac2= facility_declaration )*
            loop155:
            do {
                int alt155=2;
                int LA155_0 = input.LA(1);

                if ( (LA155_0==FACILITY) ) {
                    alt155=1;
                }


                switch (alt155) {
            	case 1 :
            	    // RBuilder.g:1728:10: fac2= facility_declaration
            	    {
            	    _last = (ColsAST)input.LT(1);
            	    pushFollow(FOLLOW_facility_declaration_in_facility_init_final_section9442);
            	    fac2=facility_declaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) 
            	    adaptor.addChild(root_0, fac2.getTree());
            	    if ( state.backtracking==0 ) {
            	       facs.add((fac2!=null?fac2.dec:null)); 
            	    }

            	    if ( state.backtracking==0 ) {
            	    }
            	    }
            	    break;

            	default :
            	    break loop155;
                }
            } while (true);

            // RBuilder.g:1729:9: (vars2= variable_declaration )*
            loop156:
            do {
                int alt156=2;
                int LA156_0 = input.LA(1);

                if ( (LA156_0==VAR) ) {
                    alt156=1;
                }


                switch (alt156) {
            	case 1 :
            	    // RBuilder.g:1729:10: vars2= variable_declaration
            	    {
            	    _last = (ColsAST)input.LT(1);
            	    pushFollow(FOLLOW_variable_declaration_in_facility_init_final_section9459);
            	    vars2=variable_declaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) 
            	    adaptor.addChild(root_0, vars2.getTree());
            	    if ( state.backtracking==0 ) {
            	       vars.addAll((vars2!=null?vars2.decs:null)); 
            	    }

            	    if ( state.backtracking==0 ) {
            	    }
            	    }
            	    break;

            	default :
            	    break loop156;
                }
            } while (true);

            // RBuilder.g:1730:9: (aux_vars2= aux_variable_declaration )*
            loop157:
            do {
                int alt157=2;
                int LA157_0 = input.LA(1);

                if ( (LA157_0==AUX_VAR) ) {
                    alt157=1;
                }


                switch (alt157) {
            	case 1 :
            	    // RBuilder.g:1730:10: aux_vars2= aux_variable_declaration
            	    {
            	    _last = (ColsAST)input.LT(1);
            	    pushFollow(FOLLOW_aux_variable_declaration_in_facility_init_final_section9476);
            	    aux_vars2=aux_variable_declaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) 
            	    adaptor.addChild(root_0, aux_vars2.getTree());
            	    if ( state.backtracking==0 ) {
            	       aux_vars.addAll((aux_vars2!=null?aux_vars2.decs:null)); 
            	    }

            	    if ( state.backtracking==0 ) {
            	    }
            	    }
            	    break;

            	default :
            	    break loop157;
                }
            } while (true);

            // RBuilder.g:1731:9: (sts= statement_sequence )
            // RBuilder.g:1731:10: sts= statement_sequence
            {
            _last = (ColsAST)input.LT(1);
            pushFollow(FOLLOW_statement_sequence_in_facility_init_final_section9493);
            sts=statement_sequence();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, sts.getTree());

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {
               retval.item = new InitItem(loc, items, (req!=null?req.exp:null), (ens!=null?ens.exp:null), facs, vars, aux_vars, (sts!=null?sts.stmts:null)); 
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "facility_init_final_section"

    public static class statement_return extends TreeRuleReturnScope {
        public Statement stmt = null;
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "statement"
    // RBuilder.g:1739:1: statement returns [Statement stmt = null] : ^( STATEMENT (stmt1= function_assignment | stmt2= forget_statement | stmt3= if_statement | stmt4= iterate_loop_statement | stmt5= procedure_operation_call | stmt6= remember_statement | stmt7= selection_statement | stmt8= swap_statement | stmt9= while_loop_statement | stmt10= confirm_statement | stmt11= assume_statement | stmt12= aux_code_statement ) ) ;
    public final RBuilder.statement_return statement() throws RecognitionException {
        RBuilder.statement_return retval = new RBuilder.statement_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        ColsAST _first_0 = null;
        ColsAST _last = null;

        ColsAST STATEMENT106=null;
        RBuilder.function_assignment_return stmt1 = null;

        RBuilder.forget_statement_return stmt2 = null;

        RBuilder.if_statement_return stmt3 = null;

        RBuilder.iterate_loop_statement_return stmt4 = null;

        RBuilder.procedure_operation_call_return stmt5 = null;

        RBuilder.remember_statement_return stmt6 = null;

        RBuilder.selection_statement_return stmt7 = null;

        RBuilder.swap_statement_return stmt8 = null;

        RBuilder.while_loop_statement_return stmt9 = null;

        RBuilder.confirm_statement_return stmt10 = null;

        RBuilder.assume_statement_return stmt11 = null;

        RBuilder.aux_code_statement_return stmt12 = null;


        ColsAST STATEMENT106_tree=null;

        try {
            // RBuilder.g:1740:5: ( ^( STATEMENT (stmt1= function_assignment | stmt2= forget_statement | stmt3= if_statement | stmt4= iterate_loop_statement | stmt5= procedure_operation_call | stmt6= remember_statement | stmt7= selection_statement | stmt8= swap_statement | stmt9= while_loop_statement | stmt10= confirm_statement | stmt11= assume_statement | stmt12= aux_code_statement ) ) )
            // RBuilder.g:1740:9: ^( STATEMENT (stmt1= function_assignment | stmt2= forget_statement | stmt3= if_statement | stmt4= iterate_loop_statement | stmt5= procedure_operation_call | stmt6= remember_statement | stmt7= selection_statement | stmt8= swap_statement | stmt9= while_loop_statement | stmt10= confirm_statement | stmt11= assume_statement | stmt12= aux_code_statement ) )
            {
            root_0 = (ColsAST)adaptor.nil();

            _last = (ColsAST)input.LT(1);
            {
            ColsAST _save_last_1 = _last;
            ColsAST _first_1 = null;
            ColsAST root_1 = (ColsAST)adaptor.nil();_last = (ColsAST)input.LT(1);
            STATEMENT106=(ColsAST)match(input,STATEMENT,FOLLOW_STATEMENT_in_statement9534); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            STATEMENT106_tree = (ColsAST)adaptor.dupNode(STATEMENT106);

            root_1 = (ColsAST)adaptor.becomeRoot(STATEMENT106_tree, root_1);
            }


            match(input, Token.DOWN, null); if (state.failed) return retval;
            // RBuilder.g:1741:13: (stmt1= function_assignment | stmt2= forget_statement | stmt3= if_statement | stmt4= iterate_loop_statement | stmt5= procedure_operation_call | stmt6= remember_statement | stmt7= selection_statement | stmt8= swap_statement | stmt9= while_loop_statement | stmt10= confirm_statement | stmt11= assume_statement | stmt12= aux_code_statement )
            int alt158=12;
            alt158 = dfa158.predict(input);
            switch (alt158) {
                case 1 :
                    // RBuilder.g:1741:17: stmt1= function_assignment
                    {
                    _last = (ColsAST)input.LT(1);
                    pushFollow(FOLLOW_function_assignment_in_statement9554);
                    stmt1=function_assignment();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, stmt1.getTree());
                    if ( state.backtracking==0 ) {
                       retval.stmt = (stmt1!=null?stmt1.stmt:null); 
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // RBuilder.g:1742:17: stmt2= forget_statement
                    {
                    _last = (ColsAST)input.LT(1);
                    pushFollow(FOLLOW_forget_statement_in_statement9576);
                    stmt2=forget_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, stmt2.getTree());
                    if ( state.backtracking==0 ) {
                       retval.stmt = (stmt2!=null?stmt2.stmt:null); 
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 3 :
                    // RBuilder.g:1743:17: stmt3= if_statement
                    {
                    _last = (ColsAST)input.LT(1);
                    pushFollow(FOLLOW_if_statement_in_statement9598);
                    stmt3=if_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, stmt3.getTree());
                    if ( state.backtracking==0 ) {
                       retval.stmt = (stmt3!=null?stmt3.stmt:null); 
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 4 :
                    // RBuilder.g:1744:17: stmt4= iterate_loop_statement
                    {
                    _last = (ColsAST)input.LT(1);
                    pushFollow(FOLLOW_iterate_loop_statement_in_statement9620);
                    stmt4=iterate_loop_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, stmt4.getTree());
                    if ( state.backtracking==0 ) {
                       retval.stmt = (stmt4!=null?stmt4.stmt:null); 
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 5 :
                    // RBuilder.g:1745:17: stmt5= procedure_operation_call
                    {
                    _last = (ColsAST)input.LT(1);
                    pushFollow(FOLLOW_procedure_operation_call_in_statement9642);
                    stmt5=procedure_operation_call();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, stmt5.getTree());
                    if ( state.backtracking==0 ) {
                       retval.stmt = (stmt5!=null?stmt5.stmt:null); 
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 6 :
                    // RBuilder.g:1746:17: stmt6= remember_statement
                    {
                    _last = (ColsAST)input.LT(1);
                    pushFollow(FOLLOW_remember_statement_in_statement9664);
                    stmt6=remember_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, stmt6.getTree());
                    if ( state.backtracking==0 ) {
                       retval.stmt = (stmt6!=null?stmt6.stmt:null); 
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 7 :
                    // RBuilder.g:1747:17: stmt7= selection_statement
                    {
                    _last = (ColsAST)input.LT(1);
                    pushFollow(FOLLOW_selection_statement_in_statement9686);
                    stmt7=selection_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, stmt7.getTree());
                    if ( state.backtracking==0 ) {
                       retval.stmt = (stmt7!=null?stmt7.stmt:null); 
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 8 :
                    // RBuilder.g:1748:17: stmt8= swap_statement
                    {
                    _last = (ColsAST)input.LT(1);
                    pushFollow(FOLLOW_swap_statement_in_statement9708);
                    stmt8=swap_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, stmt8.getTree());
                    if ( state.backtracking==0 ) {
                       retval.stmt = (stmt8!=null?stmt8.stmt:null); 
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 9 :
                    // RBuilder.g:1749:17: stmt9= while_loop_statement
                    {
                    _last = (ColsAST)input.LT(1);
                    pushFollow(FOLLOW_while_loop_statement_in_statement9730);
                    stmt9=while_loop_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, stmt9.getTree());
                    if ( state.backtracking==0 ) {
                       retval.stmt = (stmt9!=null?stmt9.stmt:null); 
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 10 :
                    // RBuilder.g:1750:17: stmt10= confirm_statement
                    {
                    _last = (ColsAST)input.LT(1);
                    pushFollow(FOLLOW_confirm_statement_in_statement9752);
                    stmt10=confirm_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, stmt10.getTree());
                    if ( state.backtracking==0 ) {
                       retval.stmt = (stmt10!=null?stmt10.stmt:null); 
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 11 :
                    // RBuilder.g:1751:17: stmt11= assume_statement
                    {
                    _last = (ColsAST)input.LT(1);
                    pushFollow(FOLLOW_assume_statement_in_statement9774);
                    stmt11=assume_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, stmt11.getTree());
                    if ( state.backtracking==0 ) {
                       retval.stmt = (stmt11!=null?stmt11.stmt:null); 
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 12 :
                    // RBuilder.g:1752:17: stmt12= aux_code_statement
                    {
                    _last = (ColsAST)input.LT(1);
                    pushFollow(FOLLOW_aux_code_statement_in_statement9796);
                    stmt12=aux_code_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, stmt12.getTree());
                    if ( state.backtracking==0 ) {
                       retval.stmt = (stmt12!=null?stmt12.stmt:null); 
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }


            match(input, Token.UP, null); if (state.failed) return retval;adaptor.addChild(root_0, root_1);_last = _save_last_1;
            }


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "statement"

    public static class in_aux_statement_return extends TreeRuleReturnScope {
        public Statement stmt = null;
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "in_aux_statement"
    // RBuilder.g:1757:1: in_aux_statement returns [Statement stmt = null] : ^( STATEMENT (stmt1= function_assignment | stmt2= forget_statement | stmt3= if_statement | stmt4= iterate_loop_statement | stmt6= remember_statement | stmt7= selection_statement | stmt8= swap_statement | stmt9= while_loop_statement | stmt10= confirm_statement | stmt11= assume_statement | stmt12= aux_code_statement ) ) ;
    public final RBuilder.in_aux_statement_return in_aux_statement() throws RecognitionException {
        RBuilder.in_aux_statement_return retval = new RBuilder.in_aux_statement_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        ColsAST _first_0 = null;
        ColsAST _last = null;

        ColsAST STATEMENT107=null;
        RBuilder.function_assignment_return stmt1 = null;

        RBuilder.forget_statement_return stmt2 = null;

        RBuilder.if_statement_return stmt3 = null;

        RBuilder.iterate_loop_statement_return stmt4 = null;

        RBuilder.remember_statement_return stmt6 = null;

        RBuilder.selection_statement_return stmt7 = null;

        RBuilder.swap_statement_return stmt8 = null;

        RBuilder.while_loop_statement_return stmt9 = null;

        RBuilder.confirm_statement_return stmt10 = null;

        RBuilder.assume_statement_return stmt11 = null;

        RBuilder.aux_code_statement_return stmt12 = null;


        ColsAST STATEMENT107_tree=null;

        try {
            // RBuilder.g:1758:5: ( ^( STATEMENT (stmt1= function_assignment | stmt2= forget_statement | stmt3= if_statement | stmt4= iterate_loop_statement | stmt6= remember_statement | stmt7= selection_statement | stmt8= swap_statement | stmt9= while_loop_statement | stmt10= confirm_statement | stmt11= assume_statement | stmt12= aux_code_statement ) ) )
            // RBuilder.g:1758:9: ^( STATEMENT (stmt1= function_assignment | stmt2= forget_statement | stmt3= if_statement | stmt4= iterate_loop_statement | stmt6= remember_statement | stmt7= selection_statement | stmt8= swap_statement | stmt9= while_loop_statement | stmt10= confirm_statement | stmt11= assume_statement | stmt12= aux_code_statement ) )
            {
            root_0 = (ColsAST)adaptor.nil();

            _last = (ColsAST)input.LT(1);
            {
            ColsAST _save_last_1 = _last;
            ColsAST _first_1 = null;
            ColsAST root_1 = (ColsAST)adaptor.nil();_last = (ColsAST)input.LT(1);
            STATEMENT107=(ColsAST)match(input,STATEMENT,FOLLOW_STATEMENT_in_in_aux_statement9852); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            STATEMENT107_tree = (ColsAST)adaptor.dupNode(STATEMENT107);

            root_1 = (ColsAST)adaptor.becomeRoot(STATEMENT107_tree, root_1);
            }


            match(input, Token.DOWN, null); if (state.failed) return retval;
            // RBuilder.g:1759:13: (stmt1= function_assignment | stmt2= forget_statement | stmt3= if_statement | stmt4= iterate_loop_statement | stmt6= remember_statement | stmt7= selection_statement | stmt8= swap_statement | stmt9= while_loop_statement | stmt10= confirm_statement | stmt11= assume_statement | stmt12= aux_code_statement )
            int alt159=11;
            alt159 = dfa159.predict(input);
            switch (alt159) {
                case 1 :
                    // RBuilder.g:1759:17: stmt1= function_assignment
                    {
                    _last = (ColsAST)input.LT(1);
                    pushFollow(FOLLOW_function_assignment_in_in_aux_statement9872);
                    stmt1=function_assignment();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, stmt1.getTree());
                    if ( state.backtracking==0 ) {
                       retval.stmt = (stmt1!=null?stmt1.stmt:null); 
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // RBuilder.g:1760:17: stmt2= forget_statement
                    {
                    _last = (ColsAST)input.LT(1);
                    pushFollow(FOLLOW_forget_statement_in_in_aux_statement9894);
                    stmt2=forget_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, stmt2.getTree());
                    if ( state.backtracking==0 ) {
                       retval.stmt = (stmt2!=null?stmt2.stmt:null); 
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 3 :
                    // RBuilder.g:1761:17: stmt3= if_statement
                    {
                    _last = (ColsAST)input.LT(1);
                    pushFollow(FOLLOW_if_statement_in_in_aux_statement9916);
                    stmt3=if_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, stmt3.getTree());
                    if ( state.backtracking==0 ) {
                       retval.stmt = (stmt3!=null?stmt3.stmt:null); 
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 4 :
                    // RBuilder.g:1762:17: stmt4= iterate_loop_statement
                    {
                    _last = (ColsAST)input.LT(1);
                    pushFollow(FOLLOW_iterate_loop_statement_in_in_aux_statement9938);
                    stmt4=iterate_loop_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, stmt4.getTree());
                    if ( state.backtracking==0 ) {
                       retval.stmt = (stmt4!=null?stmt4.stmt:null); 
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 5 :
                    // RBuilder.g:1764:17: stmt6= remember_statement
                    {
                    _last = (ColsAST)input.LT(1);
                    pushFollow(FOLLOW_remember_statement_in_in_aux_statement9973);
                    stmt6=remember_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, stmt6.getTree());
                    if ( state.backtracking==0 ) {
                       retval.stmt = (stmt6!=null?stmt6.stmt:null); 
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 6 :
                    // RBuilder.g:1765:17: stmt7= selection_statement
                    {
                    _last = (ColsAST)input.LT(1);
                    pushFollow(FOLLOW_selection_statement_in_in_aux_statement9995);
                    stmt7=selection_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, stmt7.getTree());
                    if ( state.backtracking==0 ) {
                       retval.stmt = (stmt7!=null?stmt7.stmt:null); 
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 7 :
                    // RBuilder.g:1766:17: stmt8= swap_statement
                    {
                    _last = (ColsAST)input.LT(1);
                    pushFollow(FOLLOW_swap_statement_in_in_aux_statement10017);
                    stmt8=swap_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, stmt8.getTree());
                    if ( state.backtracking==0 ) {
                       retval.stmt = (stmt8!=null?stmt8.stmt:null); 
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 8 :
                    // RBuilder.g:1767:17: stmt9= while_loop_statement
                    {
                    _last = (ColsAST)input.LT(1);
                    pushFollow(FOLLOW_while_loop_statement_in_in_aux_statement10039);
                    stmt9=while_loop_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, stmt9.getTree());
                    if ( state.backtracking==0 ) {
                       retval.stmt = (stmt9!=null?stmt9.stmt:null); 
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 9 :
                    // RBuilder.g:1768:17: stmt10= confirm_statement
                    {
                    _last = (ColsAST)input.LT(1);
                    pushFollow(FOLLOW_confirm_statement_in_in_aux_statement10061);
                    stmt10=confirm_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, stmt10.getTree());
                    if ( state.backtracking==0 ) {
                       retval.stmt = (stmt10!=null?stmt10.stmt:null); 
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 10 :
                    // RBuilder.g:1769:17: stmt11= assume_statement
                    {
                    _last = (ColsAST)input.LT(1);
                    pushFollow(FOLLOW_assume_statement_in_in_aux_statement10083);
                    stmt11=assume_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, stmt11.getTree());
                    if ( state.backtracking==0 ) {
                       retval.stmt = (stmt11!=null?stmt11.stmt:null); 
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 11 :
                    // RBuilder.g:1770:17: stmt12= aux_code_statement
                    {
                    _last = (ColsAST)input.LT(1);
                    pushFollow(FOLLOW_aux_code_statement_in_in_aux_statement10105);
                    stmt12=aux_code_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, stmt12.getTree());
                    if ( state.backtracking==0 ) {
                       retval.stmt = (stmt12!=null?stmt12.stmt:null); 
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }


            match(input, Token.UP, null); if (state.failed) return retval;adaptor.addChild(root_0, root_1);_last = _save_last_1;
            }


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "in_aux_statement"

    public static class statement_sequence_return extends TreeRuleReturnScope {
        public edu.clemson.cs.r2jt.collections.List<Statement> stmts
                = new edu.clemson.cs.r2jt.collections.List<Statement>("Statement");
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "statement_sequence"
    // RBuilder.g:1775:1: statement_sequence returns [edu.clemson.cs.r2jt.collections.List<Statement> stmts\n = new edu.clemson.cs.r2jt.collections.List<Statement>(\"Statement\")] : ^( STATEMENT_SEQUENCE (stmt= statement )* ) ;
    public final RBuilder.statement_sequence_return statement_sequence() throws RecognitionException {
        RBuilder.statement_sequence_return retval = new RBuilder.statement_sequence_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        ColsAST _first_0 = null;
        ColsAST _last = null;

        ColsAST STATEMENT_SEQUENCE108=null;
        RBuilder.statement_return stmt = null;


        ColsAST STATEMENT_SEQUENCE108_tree=null;

        try {
            // RBuilder.g:1777:5: ( ^( STATEMENT_SEQUENCE (stmt= statement )* ) )
            // RBuilder.g:1777:9: ^( STATEMENT_SEQUENCE (stmt= statement )* )
            {
            root_0 = (ColsAST)adaptor.nil();

            _last = (ColsAST)input.LT(1);
            {
            ColsAST _save_last_1 = _last;
            ColsAST _first_1 = null;
            ColsAST root_1 = (ColsAST)adaptor.nil();_last = (ColsAST)input.LT(1);
            STATEMENT_SEQUENCE108=(ColsAST)match(input,STATEMENT_SEQUENCE,FOLLOW_STATEMENT_SEQUENCE_in_statement_sequence10155); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            STATEMENT_SEQUENCE108_tree = (ColsAST)adaptor.dupNode(STATEMENT_SEQUENCE108);

            root_1 = (ColsAST)adaptor.becomeRoot(STATEMENT_SEQUENCE108_tree, root_1);
            }


            if ( input.LA(1)==Token.DOWN ) {
                match(input, Token.DOWN, null); if (state.failed) return retval;
                // RBuilder.g:1777:30: (stmt= statement )*
                loop160:
                do {
                    int alt160=2;
                    int LA160_0 = input.LA(1);

                    if ( (LA160_0==STATEMENT) ) {
                        alt160=1;
                    }


                    switch (alt160) {
                	case 1 :
                	    // RBuilder.g:1777:31: stmt= statement
                	    {
                	    _last = (ColsAST)input.LT(1);
                	    pushFollow(FOLLOW_statement_in_statement_sequence10160);
                	    stmt=statement();

                	    state._fsp--;
                	    if (state.failed) return retval;
                	    if ( state.backtracking==0 ) 
                	    adaptor.addChild(root_1, stmt.getTree());
                	    if ( state.backtracking==0 ) {
                	       retval.stmts.add((stmt!=null?stmt.stmt:null)); 
                	    }

                	    if ( state.backtracking==0 ) {
                	    }
                	    }
                	    break;

                	default :
                	    break loop160;
                    }
                } while (true);


                match(input, Token.UP, null); if (state.failed) return retval;
            }adaptor.addChild(root_0, root_1);_last = _save_last_1;
            }


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "statement_sequence"

    public static class in_aux_statement_sequence_return extends TreeRuleReturnScope {
        public edu.clemson.cs.r2jt.collections.List<Statement> stmts
                = new edu.clemson.cs.r2jt.collections.List<Statement>("Statement");
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "in_aux_statement_sequence"
    // RBuilder.g:1780:1: in_aux_statement_sequence returns [edu.clemson.cs.r2jt.collections.List<Statement> stmts\n = new edu.clemson.cs.r2jt.collections.List<Statement>(\"Statement\")] : ^( STATEMENT_SEQUENCE (stmt= in_aux_statement )* ) ;
    public final RBuilder.in_aux_statement_sequence_return in_aux_statement_sequence() throws RecognitionException {
        RBuilder.in_aux_statement_sequence_return retval = new RBuilder.in_aux_statement_sequence_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        ColsAST _first_0 = null;
        ColsAST _last = null;

        ColsAST STATEMENT_SEQUENCE109=null;
        RBuilder.in_aux_statement_return stmt = null;


        ColsAST STATEMENT_SEQUENCE109_tree=null;

        try {
            // RBuilder.g:1782:5: ( ^( STATEMENT_SEQUENCE (stmt= in_aux_statement )* ) )
            // RBuilder.g:1782:9: ^( STATEMENT_SEQUENCE (stmt= in_aux_statement )* )
            {
            root_0 = (ColsAST)adaptor.nil();

            _last = (ColsAST)input.LT(1);
            {
            ColsAST _save_last_1 = _last;
            ColsAST _first_1 = null;
            ColsAST root_1 = (ColsAST)adaptor.nil();_last = (ColsAST)input.LT(1);
            STATEMENT_SEQUENCE109=(ColsAST)match(input,STATEMENT_SEQUENCE,FOLLOW_STATEMENT_SEQUENCE_in_in_aux_statement_sequence10193); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            STATEMENT_SEQUENCE109_tree = (ColsAST)adaptor.dupNode(STATEMENT_SEQUENCE109);

            root_1 = (ColsAST)adaptor.becomeRoot(STATEMENT_SEQUENCE109_tree, root_1);
            }


            if ( input.LA(1)==Token.DOWN ) {
                match(input, Token.DOWN, null); if (state.failed) return retval;
                // RBuilder.g:1782:30: (stmt= in_aux_statement )*
                loop161:
                do {
                    int alt161=2;
                    int LA161_0 = input.LA(1);

                    if ( (LA161_0==STATEMENT) ) {
                        alt161=1;
                    }


                    switch (alt161) {
                	case 1 :
                	    // RBuilder.g:1782:31: stmt= in_aux_statement
                	    {
                	    _last = (ColsAST)input.LT(1);
                	    pushFollow(FOLLOW_in_aux_statement_in_in_aux_statement_sequence10198);
                	    stmt=in_aux_statement();

                	    state._fsp--;
                	    if (state.failed) return retval;
                	    if ( state.backtracking==0 ) 
                	    adaptor.addChild(root_1, stmt.getTree());
                	    if ( state.backtracking==0 ) {
                	       retval.stmts.add((stmt!=null?stmt.stmt:null)); 
                	    }

                	    if ( state.backtracking==0 ) {
                	    }
                	    }
                	    break;

                	default :
                	    break loop161;
                    }
                } while (true);


                match(input, Token.UP, null); if (state.failed) return retval;
            }adaptor.addChild(root_0, root_1);_last = _save_last_1;
            }


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "in_aux_statement_sequence"

    public static class aux_code_statement_return extends TreeRuleReturnScope {
        public AuxCodeStmt stmt = null;
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "aux_code_statement"
    // RBuilder.g:1787:1: aux_code_statement returns [AuxCodeStmt stmt = null] : ^( AUX_CODE statements= in_aux_statement_sequence ) ;
    public final RBuilder.aux_code_statement_return aux_code_statement() throws RecognitionException {
        RBuilder.aux_code_statement_return retval = new RBuilder.aux_code_statement_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        ColsAST _first_0 = null;
        ColsAST _last = null;

        ColsAST AUX_CODE110=null;
        RBuilder.in_aux_statement_sequence_return statements = null;


        ColsAST AUX_CODE110_tree=null;

        try {
            // RBuilder.g:1788:5: ( ^( AUX_CODE statements= in_aux_statement_sequence ) )
            // RBuilder.g:1788:9: ^( AUX_CODE statements= in_aux_statement_sequence )
            {
            root_0 = (ColsAST)adaptor.nil();

            _last = (ColsAST)input.LT(1);
            {
            ColsAST _save_last_1 = _last;
            ColsAST _first_1 = null;
            ColsAST root_1 = (ColsAST)adaptor.nil();_last = (ColsAST)input.LT(1);
            AUX_CODE110=(ColsAST)match(input,AUX_CODE,FOLLOW_AUX_CODE_in_aux_code_statement10231); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            AUX_CODE110_tree = (ColsAST)adaptor.dupNode(AUX_CODE110);

            root_1 = (ColsAST)adaptor.becomeRoot(AUX_CODE110_tree, root_1);
            }


            match(input, Token.DOWN, null); if (state.failed) return retval;
            _last = (ColsAST)input.LT(1);
            pushFollow(FOLLOW_in_aux_statement_sequence_in_aux_code_statement10235);
            statements=in_aux_statement_sequence();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, statements.getTree());

            match(input, Token.UP, null); if (state.failed) return retval;adaptor.addChild(root_0, root_1);_last = _save_last_1;
            }

            if ( state.backtracking==0 ) {
               retval.stmt = new AuxCodeStmt((statements!=null?statements.stmts:null)); 
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "aux_code_statement"

    public static class function_assignment_return extends TreeRuleReturnScope {
        public FuncAssignStmt stmt = null;
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "function_assignment"
    // RBuilder.g:1796:1: function_assignment returns [FuncAssignStmt stmt = null] : ^( ASSIGN_OP var= variable_expression exp= program_expression ) ;
    public final RBuilder.function_assignment_return function_assignment() throws RecognitionException {
        RBuilder.function_assignment_return retval = new RBuilder.function_assignment_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        ColsAST _first_0 = null;
        ColsAST _last = null;

        ColsAST ASSIGN_OP111=null;
        RBuilder.variable_expression_return var = null;

        RBuilder.program_expression_return exp = null;


        ColsAST ASSIGN_OP111_tree=null;

        try {
            // RBuilder.g:1797:5: ( ^( ASSIGN_OP var= variable_expression exp= program_expression ) )
            // RBuilder.g:1797:9: ^( ASSIGN_OP var= variable_expression exp= program_expression )
            {
            root_0 = (ColsAST)adaptor.nil();

            _last = (ColsAST)input.LT(1);
            {
            ColsAST _save_last_1 = _last;
            ColsAST _first_1 = null;
            ColsAST root_1 = (ColsAST)adaptor.nil();_last = (ColsAST)input.LT(1);
            ASSIGN_OP111=(ColsAST)match(input,ASSIGN_OP,FOLLOW_ASSIGN_OP_in_function_assignment10282); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ASSIGN_OP111_tree = (ColsAST)adaptor.dupNode(ASSIGN_OP111);

            root_1 = (ColsAST)adaptor.becomeRoot(ASSIGN_OP111_tree, root_1);
            }


            match(input, Token.DOWN, null); if (state.failed) return retval;
            _last = (ColsAST)input.LT(1);
            pushFollow(FOLLOW_variable_expression_in_function_assignment10286);
            var=variable_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, var.getTree());
            _last = (ColsAST)input.LT(1);
            pushFollow(FOLLOW_program_expression_in_function_assignment10290);
            exp=program_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, exp.getTree());

            match(input, Token.UP, null); if (state.failed) return retval;adaptor.addChild(root_0, root_1);_last = _save_last_1;
            }

            if ( state.backtracking==0 ) {
               retval.stmt = new FuncAssignStmt(getLocation(ASSIGN_OP111), (var!=null?var.exp:null), (exp!=null?exp.exp:null)); 
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "function_assignment"

    public static class forget_statement_return extends TreeRuleReturnScope {
        public MemoryStmt stmt = null;
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "forget_statement"
    // RBuilder.g:1804:1: forget_statement returns [MemoryStmt stmt = null] : FORGET ;
    public final RBuilder.forget_statement_return forget_statement() throws RecognitionException {
        RBuilder.forget_statement_return retval = new RBuilder.forget_statement_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        ColsAST _first_0 = null;
        ColsAST _last = null;

        ColsAST FORGET112=null;

        ColsAST FORGET112_tree=null;

        try {
            // RBuilder.g:1805:5: ( FORGET )
            // RBuilder.g:1805:9: FORGET
            {
            root_0 = (ColsAST)adaptor.nil();

            _last = (ColsAST)input.LT(1);
            FORGET112=(ColsAST)match(input,FORGET,FOLLOW_FORGET_in_forget_statement10331); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            FORGET112_tree = (ColsAST)adaptor.dupNode(FORGET112);

            adaptor.addChild(root_0, FORGET112_tree);
            }
            if ( state.backtracking==0 ) {
               retval.stmt = new MemoryStmt(getLocation(FORGET112), false); 
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "forget_statement"

    public static class remember_statement_return extends TreeRuleReturnScope {
        public MemoryStmt stmt = null;
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "remember_statement"
    // RBuilder.g:1808:1: remember_statement returns [MemoryStmt stmt = null] : REMEMBER ;
    public final RBuilder.remember_statement_return remember_statement() throws RecognitionException {
        RBuilder.remember_statement_return retval = new RBuilder.remember_statement_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        ColsAST _first_0 = null;
        ColsAST _last = null;

        ColsAST REMEMBER113=null;

        ColsAST REMEMBER113_tree=null;

        try {
            // RBuilder.g:1809:5: ( REMEMBER )
            // RBuilder.g:1809:9: REMEMBER
            {
            root_0 = (ColsAST)adaptor.nil();

            _last = (ColsAST)input.LT(1);
            REMEMBER113=(ColsAST)match(input,REMEMBER,FOLLOW_REMEMBER_in_remember_statement10356); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REMEMBER113_tree = (ColsAST)adaptor.dupNode(REMEMBER113);

            adaptor.addChild(root_0, REMEMBER113_tree);
            }
            if ( state.backtracking==0 ) {
               retval.stmt = new MemoryStmt(getLocation(REMEMBER113), true); 
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "remember_statement"

    public static class if_statement_return extends TreeRuleReturnScope {
        public IfStmt stmt = null;
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "if_statement"
    // RBuilder.g:1815:1: if_statement returns [IfStmt stmt = null] : ^( IF cond= condition thenStmts= statement_sequence (condItem= elsif_item )* (elseStmts= else_part )? ) ;
    public final RBuilder.if_statement_return if_statement() throws RecognitionException {
        RBuilder.if_statement_return retval = new RBuilder.if_statement_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        ColsAST _first_0 = null;
        ColsAST _last = null;

        ColsAST IF114=null;
        RBuilder.condition_return cond = null;

        RBuilder.statement_sequence_return thenStmts = null;

        RBuilder.elsif_item_return condItem = null;

        RBuilder.else_part_return elseStmts = null;


        ColsAST IF114_tree=null;


            edu.clemson.cs.r2jt.collections.List<ConditionItem> condItems = new edu.clemson.cs.r2jt.collections.List<ConditionItem>("ConditionItem");

        try {
            // RBuilder.g:1819:5: ( ^( IF cond= condition thenStmts= statement_sequence (condItem= elsif_item )* (elseStmts= else_part )? ) )
            // RBuilder.g:1819:9: ^( IF cond= condition thenStmts= statement_sequence (condItem= elsif_item )* (elseStmts= else_part )? )
            {
            root_0 = (ColsAST)adaptor.nil();

            _last = (ColsAST)input.LT(1);
            {
            ColsAST _save_last_1 = _last;
            ColsAST _first_1 = null;
            ColsAST root_1 = (ColsAST)adaptor.nil();_last = (ColsAST)input.LT(1);
            IF114=(ColsAST)match(input,IF,FOLLOW_IF_in_if_statement10395); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            IF114_tree = (ColsAST)adaptor.dupNode(IF114);

            root_1 = (ColsAST)adaptor.becomeRoot(IF114_tree, root_1);
            }


            match(input, Token.DOWN, null); if (state.failed) return retval;
            _last = (ColsAST)input.LT(1);
            pushFollow(FOLLOW_condition_in_if_statement10399);
            cond=condition();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, cond.getTree());
            _last = (ColsAST)input.LT(1);
            pushFollow(FOLLOW_statement_sequence_in_if_statement10403);
            thenStmts=statement_sequence();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, thenStmts.getTree());
            // RBuilder.g:1820:13: (condItem= elsif_item )*
            loop162:
            do {
                int alt162=2;
                int LA162_0 = input.LA(1);

                if ( (LA162_0==ELSIF) ) {
                    alt162=1;
                }


                switch (alt162) {
            	case 1 :
            	    // RBuilder.g:1820:14: condItem= elsif_item
            	    {
            	    _last = (ColsAST)input.LT(1);
            	    pushFollow(FOLLOW_elsif_item_in_if_statement10420);
            	    condItem=elsif_item();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) 
            	    adaptor.addChild(root_1, condItem.getTree());
            	    if ( state.backtracking==0 ) {
            	       condItems.add((condItem!=null?condItem.item:null)); 
            	    }

            	    if ( state.backtracking==0 ) {
            	    }
            	    }
            	    break;

            	default :
            	    break loop162;
                }
            } while (true);

            // RBuilder.g:1821:13: (elseStmts= else_part )?
            int alt163=2;
            int LA163_0 = input.LA(1);

            if ( (LA163_0==ELSE) ) {
                alt163=1;
            }
            switch (alt163) {
                case 1 :
                    // RBuilder.g:1821:14: elseStmts= else_part
                    {
                    _last = (ColsAST)input.LT(1);
                    pushFollow(FOLLOW_else_part_in_if_statement10441);
                    elseStmts=else_part();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, elseStmts.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }


            match(input, Token.UP, null); if (state.failed) return retval;adaptor.addChild(root_0, root_1);_last = _save_last_1;
            }

            if ( state.backtracking==0 ) {
               retval.stmt = new IfStmt((cond!=null?cond.exp:null), (thenStmts!=null?thenStmts.stmts:null), condItems, (elseStmts!=null?elseStmts.stmts:null)); 
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "if_statement"

    public static class elsif_item_return extends TreeRuleReturnScope {
        public ConditionItem item = null;
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "elsif_item"
    // RBuilder.g:1826:1: elsif_item returns [ConditionItem item = null] : ^( ELSIF cond= condition thenStmts= statement_sequence ) ;
    public final RBuilder.elsif_item_return elsif_item() throws RecognitionException {
        RBuilder.elsif_item_return retval = new RBuilder.elsif_item_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        ColsAST _first_0 = null;
        ColsAST _last = null;

        ColsAST ELSIF115=null;
        RBuilder.condition_return cond = null;

        RBuilder.statement_sequence_return thenStmts = null;


        ColsAST ELSIF115_tree=null;

        try {
            // RBuilder.g:1827:5: ( ^( ELSIF cond= condition thenStmts= statement_sequence ) )
            // RBuilder.g:1827:9: ^( ELSIF cond= condition thenStmts= statement_sequence )
            {
            root_0 = (ColsAST)adaptor.nil();

            _last = (ColsAST)input.LT(1);
            {
            ColsAST _save_last_1 = _last;
            ColsAST _first_1 = null;
            ColsAST root_1 = (ColsAST)adaptor.nil();_last = (ColsAST)input.LT(1);
            ELSIF115=(ColsAST)match(input,ELSIF,FOLLOW_ELSIF_in_elsif_item10487); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ELSIF115_tree = (ColsAST)adaptor.dupNode(ELSIF115);

            root_1 = (ColsAST)adaptor.becomeRoot(ELSIF115_tree, root_1);
            }


            match(input, Token.DOWN, null); if (state.failed) return retval;
            _last = (ColsAST)input.LT(1);
            pushFollow(FOLLOW_condition_in_elsif_item10491);
            cond=condition();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, cond.getTree());
            _last = (ColsAST)input.LT(1);
            pushFollow(FOLLOW_statement_sequence_in_elsif_item10495);
            thenStmts=statement_sequence();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, thenStmts.getTree());

            match(input, Token.UP, null); if (state.failed) return retval;adaptor.addChild(root_0, root_1);_last = _save_last_1;
            }

            if ( state.backtracking==0 ) {
               retval.item = new ConditionItem((cond!=null?cond.exp:null), (thenStmts!=null?thenStmts.stmts:null)); 
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "elsif_item"

    public static class else_part_return extends TreeRuleReturnScope {
        public edu.clemson.cs.r2jt.collections.List<Statement> stmts = new edu.clemson.cs.r2jt.collections.List<Statement>("Statement");
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "else_part"
    // RBuilder.g:1831:1: else_part returns [edu.clemson.cs.r2jt.collections.List<Statement> stmts = new edu.clemson.cs.r2jt.collections.List<Statement>(\"Statement\")] : ^( ELSE stmts1= statement_sequence ) ;
    public final RBuilder.else_part_return else_part() throws RecognitionException {
        RBuilder.else_part_return retval = new RBuilder.else_part_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        ColsAST _first_0 = null;
        ColsAST _last = null;

        ColsAST ELSE116=null;
        RBuilder.statement_sequence_return stmts1 = null;


        ColsAST ELSE116_tree=null;

        try {
            // RBuilder.g:1832:5: ( ^( ELSE stmts1= statement_sequence ) )
            // RBuilder.g:1832:9: ^( ELSE stmts1= statement_sequence )
            {
            root_0 = (ColsAST)adaptor.nil();

            _last = (ColsAST)input.LT(1);
            {
            ColsAST _save_last_1 = _last;
            ColsAST _first_1 = null;
            ColsAST root_1 = (ColsAST)adaptor.nil();_last = (ColsAST)input.LT(1);
            ELSE116=(ColsAST)match(input,ELSE,FOLLOW_ELSE_in_else_part10530); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ELSE116_tree = (ColsAST)adaptor.dupNode(ELSE116);

            root_1 = (ColsAST)adaptor.becomeRoot(ELSE116_tree, root_1);
            }


            match(input, Token.DOWN, null); if (state.failed) return retval;
            _last = (ColsAST)input.LT(1);
            pushFollow(FOLLOW_statement_sequence_in_else_part10534);
            stmts1=statement_sequence();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, stmts1.getTree());

            match(input, Token.UP, null); if (state.failed) return retval;adaptor.addChild(root_0, root_1);_last = _save_last_1;
            }

            if ( state.backtracking==0 ) {
               retval.stmts = (stmts1!=null?stmts1.stmts:null); 
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "else_part"

    public static class condition_return extends TreeRuleReturnScope {
        public ProgramExp exp = null;
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "condition"
    // RBuilder.g:1835:1: condition returns [ProgramExp exp = null] : exp1= program_expression ;
    public final RBuilder.condition_return condition() throws RecognitionException {
        RBuilder.condition_return retval = new RBuilder.condition_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        ColsAST _first_0 = null;
        ColsAST _last = null;

        RBuilder.program_expression_return exp1 = null;



        try {
            // RBuilder.g:1836:5: (exp1= program_expression )
            // RBuilder.g:1836:9: exp1= program_expression
            {
            root_0 = (ColsAST)adaptor.nil();

            _last = (ColsAST)input.LT(1);
            pushFollow(FOLLOW_program_expression_in_condition10562);
            exp1=program_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, exp1.getTree());
            if ( state.backtracking==0 ) {
               retval.exp = (exp1!=null?exp1.exp:null); 
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "condition"

    public static class iterate_loop_statement_return extends TreeRuleReturnScope {
        public IterateStmt stmt = null;
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "iterate_loop_statement"
    // RBuilder.g:1841:1: iterate_loop_statement returns [IterateStmt stmt = null] : ^( ITERATE (chans= changing_clause )? main= maintaining_clause (decr= decreasing_clause )? stmts= iterate_item_sequence ) ;
    public final RBuilder.iterate_loop_statement_return iterate_loop_statement() throws RecognitionException {
        RBuilder.iterate_loop_statement_return retval = new RBuilder.iterate_loop_statement_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        ColsAST _first_0 = null;
        ColsAST _last = null;

        ColsAST ITERATE117=null;
        RBuilder.changing_clause_return chans = null;

        RBuilder.maintaining_clause_return main = null;

        RBuilder.decreasing_clause_return decr = null;

        RBuilder.iterate_item_sequence_return stmts = null;


        ColsAST ITERATE117_tree=null;

        try {
            // RBuilder.g:1842:5: ( ^( ITERATE (chans= changing_clause )? main= maintaining_clause (decr= decreasing_clause )? stmts= iterate_item_sequence ) )
            // RBuilder.g:1842:9: ^( ITERATE (chans= changing_clause )? main= maintaining_clause (decr= decreasing_clause )? stmts= iterate_item_sequence )
            {
            root_0 = (ColsAST)adaptor.nil();

            _last = (ColsAST)input.LT(1);
            {
            ColsAST _save_last_1 = _last;
            ColsAST _first_1 = null;
            ColsAST root_1 = (ColsAST)adaptor.nil();_last = (ColsAST)input.LT(1);
            ITERATE117=(ColsAST)match(input,ITERATE,FOLLOW_ITERATE_in_iterate_loop_statement10592); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ITERATE117_tree = (ColsAST)adaptor.dupNode(ITERATE117);

            root_1 = (ColsAST)adaptor.becomeRoot(ITERATE117_tree, root_1);
            }


            match(input, Token.DOWN, null); if (state.failed) return retval;
            // RBuilder.g:1842:21: (chans= changing_clause )?
            int alt164=2;
            int LA164_0 = input.LA(1);

            if ( (LA164_0==CHANGING) ) {
                alt164=1;
            }
            switch (alt164) {
                case 1 :
                    // RBuilder.g:1842:22: chans= changing_clause
                    {
                    _last = (ColsAST)input.LT(1);
                    pushFollow(FOLLOW_changing_clause_in_iterate_loop_statement10597);
                    chans=changing_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, chans.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }

            _last = (ColsAST)input.LT(1);
            pushFollow(FOLLOW_maintaining_clause_in_iterate_loop_statement10615);
            main=maintaining_clause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, main.getTree());
            // RBuilder.g:1843:37: (decr= decreasing_clause )?
            int alt165=2;
            int LA165_0 = input.LA(1);

            if ( (LA165_0==DECREASING) ) {
                alt165=1;
            }
            switch (alt165) {
                case 1 :
                    // RBuilder.g:1843:38: decr= decreasing_clause
                    {
                    _last = (ColsAST)input.LT(1);
                    pushFollow(FOLLOW_decreasing_clause_in_iterate_loop_statement10620);
                    decr=decreasing_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, decr.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }

            _last = (ColsAST)input.LT(1);
            pushFollow(FOLLOW_iterate_item_sequence_in_iterate_loop_statement10638);
            stmts=iterate_item_sequence();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, stmts.getTree());

            match(input, Token.UP, null); if (state.failed) return retval;adaptor.addChild(root_0, root_1);_last = _save_last_1;
            }

            if ( state.backtracking==0 ) {
               retval.stmt = new IterateStmt((chans!=null?chans.exps:null), (main!=null?main.exp:null), (decr!=null?decr.exp:null), (stmts!=null?stmts.stmts:null)); 
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "iterate_loop_statement"

    public static class iterate_item_sequence_return extends TreeRuleReturnScope {
        public edu.clemson.cs.r2jt.collections.List<Statement> stmts
                = new edu.clemson.cs.r2jt.collections.List<Statement>("Statement");
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "iterate_item_sequence"
    // RBuilder.g:1849:1: iterate_item_sequence returns [edu.clemson.cs.r2jt.collections.List<Statement> stmts\n = new edu.clemson.cs.r2jt.collections.List<Statement>(\"Statement\")] : (stmt= iterate_item )+ ;
    public final RBuilder.iterate_item_sequence_return iterate_item_sequence() throws RecognitionException {
        RBuilder.iterate_item_sequence_return retval = new RBuilder.iterate_item_sequence_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        ColsAST _first_0 = null;
        ColsAST _last = null;

        RBuilder.iterate_item_return stmt = null;



        try {
            // RBuilder.g:1851:5: ( (stmt= iterate_item )+ )
            // RBuilder.g:1851:9: (stmt= iterate_item )+
            {
            root_0 = (ColsAST)adaptor.nil();

            // RBuilder.g:1851:9: (stmt= iterate_item )+
            int cnt166=0;
            loop166:
            do {
                int alt166=2;
                int LA166_0 = input.LA(1);

                if ( (LA166_0==ITERATE_EXIT||LA166_0==STATEMENT) ) {
                    alt166=1;
                }


                switch (alt166) {
            	case 1 :
            	    // RBuilder.g:1851:10: stmt= iterate_item
            	    {
            	    _last = (ColsAST)input.LT(1);
            	    pushFollow(FOLLOW_iterate_item_in_iterate_item_sequence10684);
            	    stmt=iterate_item();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) 
            	    adaptor.addChild(root_0, stmt.getTree());
            	    if ( state.backtracking==0 ) {
            	       retval.stmts.add((stmt!=null?stmt.stmt:null)); 
            	    }

            	    if ( state.backtracking==0 ) {
            	    }
            	    }
            	    break;

            	default :
            	    if ( cnt166 >= 1 ) break loop166;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(166, input);
                        throw eee;
                }
                cnt166++;
            } while (true);


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "iterate_item_sequence"

    public static class iterate_item_return extends TreeRuleReturnScope {
        public Statement stmt = null;
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "iterate_item"
    // RBuilder.g:1854:1: iterate_item returns [Statement stmt = null] : (stmt1= statement | stmt2= iterate_exit_statement );
    public final RBuilder.iterate_item_return iterate_item() throws RecognitionException {
        RBuilder.iterate_item_return retval = new RBuilder.iterate_item_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        ColsAST _first_0 = null;
        ColsAST _last = null;

        RBuilder.statement_return stmt1 = null;

        RBuilder.iterate_exit_statement_return stmt2 = null;



        try {
            // RBuilder.g:1855:5: (stmt1= statement | stmt2= iterate_exit_statement )
            int alt167=2;
            int LA167_0 = input.LA(1);

            if ( (LA167_0==STATEMENT) ) {
                alt167=1;
            }
            else if ( (LA167_0==ITERATE_EXIT) ) {
                alt167=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 167, 0, input);

                throw nvae;
            }
            switch (alt167) {
                case 1 :
                    // RBuilder.g:1855:9: stmt1= statement
                    {
                    root_0 = (ColsAST)adaptor.nil();

                    _last = (ColsAST)input.LT(1);
                    pushFollow(FOLLOW_statement_in_iterate_item10713);
                    stmt1=statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, stmt1.getTree());
                    if ( state.backtracking==0 ) {
                       retval.stmt = (stmt1!=null?stmt1.stmt:null); 
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // RBuilder.g:1856:9: stmt2= iterate_exit_statement
                    {
                    root_0 = (ColsAST)adaptor.nil();

                    _last = (ColsAST)input.LT(1);
                    pushFollow(FOLLOW_iterate_exit_statement_in_iterate_item10727);
                    stmt2=iterate_exit_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, stmt2.getTree());
                    if ( state.backtracking==0 ) {
                       retval.stmt = (stmt2!=null?stmt2.stmt:null); 
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }
            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "iterate_item"

    public static class iterate_exit_statement_return extends TreeRuleReturnScope {
        public IterateExitStmt stmt = null;
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "iterate_exit_statement"
    // RBuilder.g:1859:1: iterate_exit_statement returns [IterateExitStmt stmt = null] : ^( ITERATE_EXIT test= condition stmts= statement_sequence ) ;
    public final RBuilder.iterate_exit_statement_return iterate_exit_statement() throws RecognitionException {
        RBuilder.iterate_exit_statement_return retval = new RBuilder.iterate_exit_statement_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        ColsAST _first_0 = null;
        ColsAST _last = null;

        ColsAST ITERATE_EXIT118=null;
        RBuilder.condition_return test = null;

        RBuilder.statement_sequence_return stmts = null;


        ColsAST ITERATE_EXIT118_tree=null;

        try {
            // RBuilder.g:1860:5: ( ^( ITERATE_EXIT test= condition stmts= statement_sequence ) )
            // RBuilder.g:1860:9: ^( ITERATE_EXIT test= condition stmts= statement_sequence )
            {
            root_0 = (ColsAST)adaptor.nil();

            _last = (ColsAST)input.LT(1);
            {
            ColsAST _save_last_1 = _last;
            ColsAST _first_1 = null;
            ColsAST root_1 = (ColsAST)adaptor.nil();_last = (ColsAST)input.LT(1);
            ITERATE_EXIT118=(ColsAST)match(input,ITERATE_EXIT,FOLLOW_ITERATE_EXIT_in_iterate_exit_statement10753); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ITERATE_EXIT118_tree = (ColsAST)adaptor.dupNode(ITERATE_EXIT118);

            root_1 = (ColsAST)adaptor.becomeRoot(ITERATE_EXIT118_tree, root_1);
            }


            match(input, Token.DOWN, null); if (state.failed) return retval;
            _last = (ColsAST)input.LT(1);
            pushFollow(FOLLOW_condition_in_iterate_exit_statement10757);
            test=condition();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, test.getTree());
            _last = (ColsAST)input.LT(1);
            pushFollow(FOLLOW_statement_sequence_in_iterate_exit_statement10761);
            stmts=statement_sequence();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, stmts.getTree());

            match(input, Token.UP, null); if (state.failed) return retval;adaptor.addChild(root_0, root_1);_last = _save_last_1;
            }

            if ( state.backtracking==0 ) {
               retval.stmt = new IterateExitStmt((test!=null?test.exp:null), (stmts!=null?stmts.stmts:null)); 
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "iterate_exit_statement"

    public static class procedure_operation_call_return extends TreeRuleReturnScope {
        public CallStmt stmt = null;
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "procedure_operation_call"
    // RBuilder.g:1866:1: procedure_operation_call returns [CallStmt stmt = null] : ^( FUNCTION qid= qualified_ident args2= operation_argument_section ) ;
    public final RBuilder.procedure_operation_call_return procedure_operation_call() throws RecognitionException {
        RBuilder.procedure_operation_call_return retval = new RBuilder.procedure_operation_call_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        ColsAST _first_0 = null;
        ColsAST _last = null;

        ColsAST FUNCTION119=null;
        RBuilder.qualified_ident_return qid = null;

        RBuilder.operation_argument_section_return args2 = null;


        ColsAST FUNCTION119_tree=null;


            PosSymbol qual = null;
            PosSymbol name = null;
            edu.clemson.cs.r2jt.collections.List<ProgramExp> args = new edu.clemson.cs.r2jt.collections.List<ProgramExp>("ProgramExp");

        try {
            // RBuilder.g:1872:5: ( ^( FUNCTION qid= qualified_ident args2= operation_argument_section ) )
            // RBuilder.g:1872:9: ^( FUNCTION qid= qualified_ident args2= operation_argument_section )
            {
            root_0 = (ColsAST)adaptor.nil();

            _last = (ColsAST)input.LT(1);
            {
            ColsAST _save_last_1 = _last;
            ColsAST _first_1 = null;
            ColsAST root_1 = (ColsAST)adaptor.nil();_last = (ColsAST)input.LT(1);
            FUNCTION119=(ColsAST)match(input,FUNCTION,FOLLOW_FUNCTION_in_procedure_operation_call10807); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            FUNCTION119_tree = (ColsAST)adaptor.dupNode(FUNCTION119);

            root_1 = (ColsAST)adaptor.becomeRoot(FUNCTION119_tree, root_1);
            }


            match(input, Token.DOWN, null); if (state.failed) return retval;
            _last = (ColsAST)input.LT(1);
            pushFollow(FOLLOW_qualified_ident_in_procedure_operation_call10811);
            qid=qualified_ident();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, qid.getTree());
            _last = (ColsAST)input.LT(1);
            pushFollow(FOLLOW_operation_argument_section_in_procedure_operation_call10815);
            args2=operation_argument_section();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, args2.getTree());

            match(input, Token.UP, null); if (state.failed) return retval;adaptor.addChild(root_0, root_1);_last = _save_last_1;
            }

            if ( state.backtracking==0 ) {
                 qual = (qid!=null?qid.exp:null).getQualifier();
                          name = (qid!=null?qid.exp:null).getName();
                          retval.stmt = new CallStmt(qual, name,
                                                (args2!=null?args2.exps:null)!=null?(args2!=null?args2.exps:null):args);
                      
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "procedure_operation_call"

    public static class operation_argument_section_return extends TreeRuleReturnScope {
        public edu.clemson.cs.r2jt.collections.List<ProgramExp> exps
                = new edu.clemson.cs.r2jt.collections.List<ProgramExp>("ProgramExp");
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "operation_argument_section"
    // RBuilder.g:1880:1: operation_argument_section returns [edu.clemson.cs.r2jt.collections.List<ProgramExp> exps\n = new edu.clemson.cs.r2jt.collections.List<ProgramExp>(\"ProgramExp\")] : ^( PARAMS (exp= program_expression )* ) ;
    public final RBuilder.operation_argument_section_return operation_argument_section() throws RecognitionException {
        RBuilder.operation_argument_section_return retval = new RBuilder.operation_argument_section_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        ColsAST _first_0 = null;
        ColsAST _last = null;

        ColsAST PARAMS120=null;
        RBuilder.program_expression_return exp = null;


        ColsAST PARAMS120_tree=null;

        try {
            // RBuilder.g:1882:5: ( ^( PARAMS (exp= program_expression )* ) )
            // RBuilder.g:1882:9: ^( PARAMS (exp= program_expression )* )
            {
            root_0 = (ColsAST)adaptor.nil();

            _last = (ColsAST)input.LT(1);
            {
            ColsAST _save_last_1 = _last;
            ColsAST _first_1 = null;
            ColsAST root_1 = (ColsAST)adaptor.nil();_last = (ColsAST)input.LT(1);
            PARAMS120=(ColsAST)match(input,PARAMS,FOLLOW_PARAMS_in_operation_argument_section10850); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            PARAMS120_tree = (ColsAST)adaptor.dupNode(PARAMS120);

            root_1 = (ColsAST)adaptor.becomeRoot(PARAMS120_tree, root_1);
            }


            if ( input.LA(1)==Token.DOWN ) {
                match(input, Token.DOWN, null); if (state.failed) return retval;
                // RBuilder.g:1882:18: (exp= program_expression )*
                loop168:
                do {
                    int alt168=2;
                    int LA168_0 = input.LA(1);

                    if ( (LA168_0==EXPR) ) {
                        alt168=1;
                    }


                    switch (alt168) {
                	case 1 :
                	    // RBuilder.g:1882:19: exp= program_expression
                	    {
                	    _last = (ColsAST)input.LT(1);
                	    pushFollow(FOLLOW_program_expression_in_operation_argument_section10855);
                	    exp=program_expression();

                	    state._fsp--;
                	    if (state.failed) return retval;
                	    if ( state.backtracking==0 ) 
                	    adaptor.addChild(root_1, exp.getTree());
                	    if ( state.backtracking==0 ) {
                	       retval.exps.add((exp!=null?exp.exp:null)); 
                	    }

                	    if ( state.backtracking==0 ) {
                	    }
                	    }
                	    break;

                	default :
                	    break loop168;
                    }
                } while (true);


                match(input, Token.UP, null); if (state.failed) return retval;
            }adaptor.addChild(root_0, root_1);_last = _save_last_1;
            }


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "operation_argument_section"

    public static class selection_statement_return extends TreeRuleReturnScope {
        public SelectionStmt stmt = null;
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "selection_statement"
    // RBuilder.g:1887:1: selection_statement returns [SelectionStmt stmt = null] : ^( CASE exp= program_expression whens= selection_alternative_sequence (def= default_alternative )? ) ;
    public final RBuilder.selection_statement_return selection_statement() throws RecognitionException {
        RBuilder.selection_statement_return retval = new RBuilder.selection_statement_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        ColsAST _first_0 = null;
        ColsAST _last = null;

        ColsAST CASE121=null;
        RBuilder.program_expression_return exp = null;

        RBuilder.selection_alternative_sequence_return whens = null;

        RBuilder.default_alternative_return def = null;


        ColsAST CASE121_tree=null;

        try {
            // RBuilder.g:1888:5: ( ^( CASE exp= program_expression whens= selection_alternative_sequence (def= default_alternative )? ) )
            // RBuilder.g:1888:9: ^( CASE exp= program_expression whens= selection_alternative_sequence (def= default_alternative )? )
            {
            root_0 = (ColsAST)adaptor.nil();

            _last = (ColsAST)input.LT(1);
            {
            ColsAST _save_last_1 = _last;
            ColsAST _first_1 = null;
            ColsAST root_1 = (ColsAST)adaptor.nil();_last = (ColsAST)input.LT(1);
            CASE121=(ColsAST)match(input,CASE,FOLLOW_CASE_in_selection_statement10888); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            CASE121_tree = (ColsAST)adaptor.dupNode(CASE121);

            root_1 = (ColsAST)adaptor.becomeRoot(CASE121_tree, root_1);
            }


            match(input, Token.DOWN, null); if (state.failed) return retval;
            _last = (ColsAST)input.LT(1);
            pushFollow(FOLLOW_program_expression_in_selection_statement10892);
            exp=program_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, exp.getTree());
            _last = (ColsAST)input.LT(1);
            pushFollow(FOLLOW_selection_alternative_sequence_in_selection_statement10908);
            whens=selection_alternative_sequence();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, whens.getTree());
            // RBuilder.g:1890:13: (def= default_alternative )?
            int alt169=2;
            int LA169_0 = input.LA(1);

            if ( (LA169_0==DEFAULT) ) {
                alt169=1;
            }
            switch (alt169) {
                case 1 :
                    // RBuilder.g:1890:14: def= default_alternative
                    {
                    _last = (ColsAST)input.LT(1);
                    pushFollow(FOLLOW_default_alternative_in_selection_statement10925);
                    def=default_alternative();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, def.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }


            match(input, Token.UP, null); if (state.failed) return retval;adaptor.addChild(root_0, root_1);_last = _save_last_1;
            }

            if ( state.backtracking==0 ) {
               retval.stmt = new SelectionStmt((exp!=null?exp.exp:null), (whens!=null?whens.items:null), (def!=null?def.stmts:null)); 
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "selection_statement"

    public static class selection_alternative_sequence_return extends TreeRuleReturnScope {
        public edu.clemson.cs.r2jt.collections.List<ChoiceItem> items
                = new edu.clemson.cs.r2jt.collections.List<ChoiceItem>("ChoiceItem");
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "selection_alternative_sequence"
    // RBuilder.g:1895:1: selection_alternative_sequence returns [edu.clemson.cs.r2jt.collections.List<ChoiceItem> items\n = new edu.clemson.cs.r2jt.collections.List<ChoiceItem>(\"ChoiceItem\")] : (item= selection_alternative )+ ;
    public final RBuilder.selection_alternative_sequence_return selection_alternative_sequence() throws RecognitionException {
        RBuilder.selection_alternative_sequence_return retval = new RBuilder.selection_alternative_sequence_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        ColsAST _first_0 = null;
        ColsAST _last = null;

        RBuilder.selection_alternative_return item = null;



        try {
            // RBuilder.g:1897:5: ( (item= selection_alternative )+ )
            // RBuilder.g:1897:9: (item= selection_alternative )+
            {
            root_0 = (ColsAST)adaptor.nil();

            // RBuilder.g:1897:9: (item= selection_alternative )+
            int cnt170=0;
            loop170:
            do {
                int alt170=2;
                int LA170_0 = input.LA(1);

                if ( (LA170_0==WHEN) ) {
                    alt170=1;
                }


                switch (alt170) {
            	case 1 :
            	    // RBuilder.g:1897:10: item= selection_alternative
            	    {
            	    _last = (ColsAST)input.LT(1);
            	    pushFollow(FOLLOW_selection_alternative_in_selection_alternative_sequence10973);
            	    item=selection_alternative();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) 
            	    adaptor.addChild(root_0, item.getTree());
            	    if ( state.backtracking==0 ) {
            	       retval.items.add((item!=null?item.item:null)); 
            	    }

            	    if ( state.backtracking==0 ) {
            	    }
            	    }
            	    break;

            	default :
            	    if ( cnt170 >= 1 ) break loop170;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(170, input);
                        throw eee;
                }
                cnt170++;
            } while (true);


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "selection_alternative_sequence"

    public static class selection_alternative_return extends TreeRuleReturnScope {
        public ChoiceItem item = null;
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "selection_alternative"
    // RBuilder.g:1900:1: selection_alternative returns [ChoiceItem item = null] : ^( WHEN test= choices thens= statement_sequence ) ;
    public final RBuilder.selection_alternative_return selection_alternative() throws RecognitionException {
        RBuilder.selection_alternative_return retval = new RBuilder.selection_alternative_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        ColsAST _first_0 = null;
        ColsAST _last = null;

        ColsAST WHEN122=null;
        RBuilder.choices_return test = null;

        RBuilder.statement_sequence_return thens = null;


        ColsAST WHEN122_tree=null;

        try {
            // RBuilder.g:1901:5: ( ^( WHEN test= choices thens= statement_sequence ) )
            // RBuilder.g:1901:9: ^( WHEN test= choices thens= statement_sequence )
            {
            root_0 = (ColsAST)adaptor.nil();

            _last = (ColsAST)input.LT(1);
            {
            ColsAST _save_last_1 = _last;
            ColsAST _first_1 = null;
            ColsAST root_1 = (ColsAST)adaptor.nil();_last = (ColsAST)input.LT(1);
            WHEN122=(ColsAST)match(input,WHEN,FOLLOW_WHEN_in_selection_alternative11001); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            WHEN122_tree = (ColsAST)adaptor.dupNode(WHEN122);

            root_1 = (ColsAST)adaptor.becomeRoot(WHEN122_tree, root_1);
            }


            match(input, Token.DOWN, null); if (state.failed) return retval;
            _last = (ColsAST)input.LT(1);
            pushFollow(FOLLOW_choices_in_selection_alternative11005);
            test=choices();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, test.getTree());
            _last = (ColsAST)input.LT(1);
            pushFollow(FOLLOW_statement_sequence_in_selection_alternative11009);
            thens=statement_sequence();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, thens.getTree());

            match(input, Token.UP, null); if (state.failed) return retval;adaptor.addChild(root_0, root_1);_last = _save_last_1;
            }

            if ( state.backtracking==0 ) {
               retval.item = new ChoiceItem((test!=null?test.exps:null), (thens!=null?thens.stmts:null)); 
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "selection_alternative"

    public static class default_alternative_return extends TreeRuleReturnScope {
        public edu.clemson.cs.r2jt.collections.List<Statement> stmts
                = new edu.clemson.cs.r2jt.collections.List<Statement>("Statement");
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "default_alternative"
    // RBuilder.g:1905:1: default_alternative returns [edu.clemson.cs.r2jt.collections.List<Statement> stmts\n = new edu.clemson.cs.r2jt.collections.List<Statement>(\"Statement\")] : ^( DEFAULT stmts1= statement_sequence ) ;
    public final RBuilder.default_alternative_return default_alternative() throws RecognitionException {
        RBuilder.default_alternative_return retval = new RBuilder.default_alternative_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        ColsAST _first_0 = null;
        ColsAST _last = null;

        ColsAST DEFAULT123=null;
        RBuilder.statement_sequence_return stmts1 = null;


        ColsAST DEFAULT123_tree=null;

        try {
            // RBuilder.g:1907:5: ( ^( DEFAULT stmts1= statement_sequence ) )
            // RBuilder.g:1907:9: ^( DEFAULT stmts1= statement_sequence )
            {
            root_0 = (ColsAST)adaptor.nil();

            _last = (ColsAST)input.LT(1);
            {
            ColsAST _save_last_1 = _last;
            ColsAST _first_1 = null;
            ColsAST root_1 = (ColsAST)adaptor.nil();_last = (ColsAST)input.LT(1);
            DEFAULT123=(ColsAST)match(input,DEFAULT,FOLLOW_DEFAULT_in_default_alternative11044); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            DEFAULT123_tree = (ColsAST)adaptor.dupNode(DEFAULT123);

            root_1 = (ColsAST)adaptor.becomeRoot(DEFAULT123_tree, root_1);
            }


            match(input, Token.DOWN, null); if (state.failed) return retval;
            _last = (ColsAST)input.LT(1);
            pushFollow(FOLLOW_statement_sequence_in_default_alternative11048);
            stmts1=statement_sequence();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, stmts1.getTree());

            match(input, Token.UP, null); if (state.failed) return retval;adaptor.addChild(root_0, root_1);_last = _save_last_1;
            }

            if ( state.backtracking==0 ) {
               retval.stmts = (stmts1!=null?stmts1.stmts:null); 
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "default_alternative"

    public static class choice_return extends TreeRuleReturnScope {
        public ProgramExp exp = null;
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "choice"
    // RBuilder.g:1910:1: choice returns [ProgramExp exp = null] : exp1= program_expression ;
    public final RBuilder.choice_return choice() throws RecognitionException {
        RBuilder.choice_return retval = new RBuilder.choice_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        ColsAST _first_0 = null;
        ColsAST _last = null;

        RBuilder.program_expression_return exp1 = null;



        try {
            // RBuilder.g:1911:5: (exp1= program_expression )
            // RBuilder.g:1911:9: exp1= program_expression
            {
            root_0 = (ColsAST)adaptor.nil();

            _last = (ColsAST)input.LT(1);
            pushFollow(FOLLOW_program_expression_in_choice11076);
            exp1=program_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, exp1.getTree());
            if ( state.backtracking==0 ) {
               retval.exp = (exp1!=null?exp1.exp:null); 
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "choice"

    public static class choices_return extends TreeRuleReturnScope {
        public edu.clemson.cs.r2jt.collections.List<ProgramExp> exps = new edu.clemson.cs.r2jt.collections.List<ProgramExp>("ProgramExp");
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "choices"
    // RBuilder.g:1914:1: choices returns [edu.clemson.cs.r2jt.collections.List<ProgramExp> exps = new edu.clemson.cs.r2jt.collections.List<ProgramExp>(\"ProgramExp\")] : ^( CHOICES (exp= choice )+ ) ;
    public final RBuilder.choices_return choices() throws RecognitionException {
        RBuilder.choices_return retval = new RBuilder.choices_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        ColsAST _first_0 = null;
        ColsAST _last = null;

        ColsAST CHOICES124=null;
        RBuilder.choice_return exp = null;


        ColsAST CHOICES124_tree=null;

        try {
            // RBuilder.g:1915:5: ( ^( CHOICES (exp= choice )+ ) )
            // RBuilder.g:1915:9: ^( CHOICES (exp= choice )+ )
            {
            root_0 = (ColsAST)adaptor.nil();

            _last = (ColsAST)input.LT(1);
            {
            ColsAST _save_last_1 = _last;
            ColsAST _first_1 = null;
            ColsAST root_1 = (ColsAST)adaptor.nil();_last = (ColsAST)input.LT(1);
            CHOICES124=(ColsAST)match(input,CHOICES,FOLLOW_CHOICES_in_choices11102); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            CHOICES124_tree = (ColsAST)adaptor.dupNode(CHOICES124);

            root_1 = (ColsAST)adaptor.becomeRoot(CHOICES124_tree, root_1);
            }


            match(input, Token.DOWN, null); if (state.failed) return retval;
            // RBuilder.g:1915:19: (exp= choice )+
            int cnt171=0;
            loop171:
            do {
                int alt171=2;
                int LA171_0 = input.LA(1);

                if ( (LA171_0==EXPR) ) {
                    alt171=1;
                }


                switch (alt171) {
            	case 1 :
            	    // RBuilder.g:1915:20: exp= choice
            	    {
            	    _last = (ColsAST)input.LT(1);
            	    pushFollow(FOLLOW_choice_in_choices11107);
            	    exp=choice();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) 
            	    adaptor.addChild(root_1, exp.getTree());
            	    if ( state.backtracking==0 ) {
            	       retval.exps.add((exp!=null?exp.exp:null)); 
            	    }

            	    if ( state.backtracking==0 ) {
            	    }
            	    }
            	    break;

            	default :
            	    if ( cnt171 >= 1 ) break loop171;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(171, input);
                        throw eee;
                }
                cnt171++;
            } while (true);


            match(input, Token.UP, null); if (state.failed) return retval;adaptor.addChild(root_0, root_1);_last = _save_last_1;
            }


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "choices"

    public static class swap_statement_return extends TreeRuleReturnScope {
        public SwapStmt stmt = null;
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "swap_statement"
    // RBuilder.g:1920:1: swap_statement returns [SwapStmt stmt = null] : ^( SWAP_OP exp2= variable_expression exp3= variable_expression ) ;
    public final RBuilder.swap_statement_return swap_statement() throws RecognitionException {
        RBuilder.swap_statement_return retval = new RBuilder.swap_statement_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        ColsAST _first_0 = null;
        ColsAST _last = null;

        ColsAST SWAP_OP125=null;
        RBuilder.variable_expression_return exp2 = null;

        RBuilder.variable_expression_return exp3 = null;


        ColsAST SWAP_OP125_tree=null;

        try {
            // RBuilder.g:1921:5: ( ^( SWAP_OP exp2= variable_expression exp3= variable_expression ) )
            // RBuilder.g:1921:9: ^( SWAP_OP exp2= variable_expression exp3= variable_expression )
            {
            root_0 = (ColsAST)adaptor.nil();

            _last = (ColsAST)input.LT(1);
            {
            ColsAST _save_last_1 = _last;
            ColsAST _first_1 = null;
            ColsAST root_1 = (ColsAST)adaptor.nil();_last = (ColsAST)input.LT(1);
            SWAP_OP125=(ColsAST)match(input,SWAP_OP,FOLLOW_SWAP_OP_in_swap_statement11138); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SWAP_OP125_tree = (ColsAST)adaptor.dupNode(SWAP_OP125);

            root_1 = (ColsAST)adaptor.becomeRoot(SWAP_OP125_tree, root_1);
            }


            match(input, Token.DOWN, null); if (state.failed) return retval;
            _last = (ColsAST)input.LT(1);
            pushFollow(FOLLOW_variable_expression_in_swap_statement11142);
            exp2=variable_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, exp2.getTree());
            _last = (ColsAST)input.LT(1);
            pushFollow(FOLLOW_variable_expression_in_swap_statement11146);
            exp3=variable_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, exp3.getTree());

            match(input, Token.UP, null); if (state.failed) return retval;adaptor.addChild(root_0, root_1);_last = _save_last_1;
            }

            if ( state.backtracking==0 ) {
               retval.stmt = new SwapStmt(getLocation(SWAP_OP125), (exp2!=null?exp2.exp:null), (exp3!=null?exp3.exp:null)); 
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "swap_statement"

    public static class confirm_statement_return extends TreeRuleReturnScope {
        public ConfirmStmt stmt = null;
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "confirm_statement"
    // RBuilder.g:1928:1: confirm_statement returns [ConfirmStmt stmt = null] : ^( CONFIRM exp2= math_expression ) ;
    public final RBuilder.confirm_statement_return confirm_statement() throws RecognitionException {
        RBuilder.confirm_statement_return retval = new RBuilder.confirm_statement_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        ColsAST _first_0 = null;
        ColsAST _last = null;

        ColsAST CONFIRM126=null;
        RBuilder.math_expression_return exp2 = null;


        ColsAST CONFIRM126_tree=null;

        try {
            // RBuilder.g:1929:5: ( ^( CONFIRM exp2= math_expression ) )
            // RBuilder.g:1929:9: ^( CONFIRM exp2= math_expression )
            {
            root_0 = (ColsAST)adaptor.nil();

            _last = (ColsAST)input.LT(1);
            {
            ColsAST _save_last_1 = _last;
            ColsAST _first_1 = null;
            ColsAST root_1 = (ColsAST)adaptor.nil();_last = (ColsAST)input.LT(1);
            CONFIRM126=(ColsAST)match(input,CONFIRM,FOLLOW_CONFIRM_in_confirm_statement11192); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            CONFIRM126_tree = (ColsAST)adaptor.dupNode(CONFIRM126);

            root_1 = (ColsAST)adaptor.becomeRoot(CONFIRM126_tree, root_1);
            }


            match(input, Token.DOWN, null); if (state.failed) return retval;
            _last = (ColsAST)input.LT(1);
            pushFollow(FOLLOW_math_expression_in_confirm_statement11196);
            exp2=math_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, exp2.getTree());

            match(input, Token.UP, null); if (state.failed) return retval;adaptor.addChild(root_0, root_1);_last = _save_last_1;
            }

            if ( state.backtracking==0 ) {
               retval.stmt = new ConfirmStmt(getLocation(CONFIRM126), (exp2!=null?exp2.exp:null)); 
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "confirm_statement"

    public static class assume_statement_return extends TreeRuleReturnScope {
        public AssumeStmt stmt = null;
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "assume_statement"
    // RBuilder.g:1935:1: assume_statement returns [AssumeStmt stmt = null] : ^( ASSUME exp2= math_expression ) ;
    public final RBuilder.assume_statement_return assume_statement() throws RecognitionException {
        RBuilder.assume_statement_return retval = new RBuilder.assume_statement_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        ColsAST _first_0 = null;
        ColsAST _last = null;

        ColsAST ASSUME127=null;
        RBuilder.math_expression_return exp2 = null;


        ColsAST ASSUME127_tree=null;

        try {
            // RBuilder.g:1936:5: ( ^( ASSUME exp2= math_expression ) )
            // RBuilder.g:1936:9: ^( ASSUME exp2= math_expression )
            {
            root_0 = (ColsAST)adaptor.nil();

            _last = (ColsAST)input.LT(1);
            {
            ColsAST _save_last_1 = _last;
            ColsAST _first_1 = null;
            ColsAST root_1 = (ColsAST)adaptor.nil();_last = (ColsAST)input.LT(1);
            ASSUME127=(ColsAST)match(input,ASSUME,FOLLOW_ASSUME_in_assume_statement11233); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ASSUME127_tree = (ColsAST)adaptor.dupNode(ASSUME127);

            root_1 = (ColsAST)adaptor.becomeRoot(ASSUME127_tree, root_1);
            }


            match(input, Token.DOWN, null); if (state.failed) return retval;
            _last = (ColsAST)input.LT(1);
            pushFollow(FOLLOW_math_expression_in_assume_statement11237);
            exp2=math_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, exp2.getTree());

            match(input, Token.UP, null); if (state.failed) return retval;adaptor.addChild(root_0, root_1);_last = _save_last_1;
            }

            if ( state.backtracking==0 ) {
               retval.stmt = new AssumeStmt(getLocation(ASSUME127), (exp2!=null?exp2.exp:null)); 
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "assume_statement"

    public static class while_loop_statement_return extends TreeRuleReturnScope {
        public WhileStmt stmt = null;
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "while_loop_statement"
    // RBuilder.g:1942:1: while_loop_statement returns [WhileStmt stmt = null] : ^( WHILE test= condition (chans= changing_clause )? (main= maintaining_clause )? (decr= decreasing_clause )? (elasptime= elapsed_time_clause )? stmts= statement_sequence ) ;
    public final RBuilder.while_loop_statement_return while_loop_statement() throws RecognitionException {
        RBuilder.while_loop_statement_return retval = new RBuilder.while_loop_statement_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        ColsAST _first_0 = null;
        ColsAST _last = null;

        ColsAST WHILE128=null;
        RBuilder.condition_return test = null;

        RBuilder.changing_clause_return chans = null;

        RBuilder.maintaining_clause_return main = null;

        RBuilder.decreasing_clause_return decr = null;

        RBuilder.elapsed_time_clause_return elasptime = null;

        RBuilder.statement_sequence_return stmts = null;


        ColsAST WHILE128_tree=null;

        try {
            // RBuilder.g:1943:5: ( ^( WHILE test= condition (chans= changing_clause )? (main= maintaining_clause )? (decr= decreasing_clause )? (elasptime= elapsed_time_clause )? stmts= statement_sequence ) )
            // RBuilder.g:1943:9: ^( WHILE test= condition (chans= changing_clause )? (main= maintaining_clause )? (decr= decreasing_clause )? (elasptime= elapsed_time_clause )? stmts= statement_sequence )
            {
            root_0 = (ColsAST)adaptor.nil();

            _last = (ColsAST)input.LT(1);
            {
            ColsAST _save_last_1 = _last;
            ColsAST _first_1 = null;
            ColsAST root_1 = (ColsAST)adaptor.nil();_last = (ColsAST)input.LT(1);
            WHILE128=(ColsAST)match(input,WHILE,FOLLOW_WHILE_in_while_loop_statement11276); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            WHILE128_tree = (ColsAST)adaptor.dupNode(WHILE128);

            root_1 = (ColsAST)adaptor.becomeRoot(WHILE128_tree, root_1);
            }


            match(input, Token.DOWN, null); if (state.failed) return retval;
            _last = (ColsAST)input.LT(1);
            pushFollow(FOLLOW_condition_in_while_loop_statement11280);
            test=condition();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, test.getTree());
            // RBuilder.g:1943:34: (chans= changing_clause )?
            int alt172=2;
            int LA172_0 = input.LA(1);

            if ( (LA172_0==CHANGING) ) {
                alt172=1;
            }
            switch (alt172) {
                case 1 :
                    // RBuilder.g:1943:35: chans= changing_clause
                    {
                    _last = (ColsAST)input.LT(1);
                    pushFollow(FOLLOW_changing_clause_in_while_loop_statement11285);
                    chans=changing_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, chans.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }

            // RBuilder.g:1944:13: (main= maintaining_clause )?
            int alt173=2;
            int LA173_0 = input.LA(1);

            if ( (LA173_0==MAINTAINING) ) {
                alt173=1;
            }
            switch (alt173) {
                case 1 :
                    // RBuilder.g:1944:14: main= maintaining_clause
                    {
                    _last = (ColsAST)input.LT(1);
                    pushFollow(FOLLOW_maintaining_clause_in_while_loop_statement11308);
                    main=maintaining_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, main.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }

            // RBuilder.g:1944:40: (decr= decreasing_clause )?
            int alt174=2;
            int LA174_0 = input.LA(1);

            if ( (LA174_0==DECREASING) ) {
                alt174=1;
            }
            switch (alt174) {
                case 1 :
                    // RBuilder.g:1944:41: decr= decreasing_clause
                    {
                    _last = (ColsAST)input.LT(1);
                    pushFollow(FOLLOW_decreasing_clause_in_while_loop_statement11315);
                    decr=decreasing_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, decr.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }

            // RBuilder.g:1945:13: (elasptime= elapsed_time_clause )?
            int alt175=2;
            int LA175_0 = input.LA(1);

            if ( (LA175_0==ELAPSED_TIME) ) {
                alt175=1;
            }
            switch (alt175) {
                case 1 :
                    // RBuilder.g:1945:14: elasptime= elapsed_time_clause
                    {
                    _last = (ColsAST)input.LT(1);
                    pushFollow(FOLLOW_elapsed_time_clause_in_while_loop_statement11334);
                    elasptime=elapsed_time_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, elasptime.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }

            _last = (ColsAST)input.LT(1);
            pushFollow(FOLLOW_statement_sequence_in_while_loop_statement11352);
            stmts=statement_sequence();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, stmts.getTree());

            match(input, Token.UP, null); if (state.failed) return retval;adaptor.addChild(root_0, root_1);_last = _save_last_1;
            }

            if ( state.backtracking==0 ) {
               retval.stmt = new WhileStmt(getLocation(WHILE128), (test!=null?test.exp:null), (chans!=null?chans.exps:null), (main!=null?main.exp:null), (decr!=null?decr.exp:null), (elasptime!=null?elasptime.exp:null), (stmts!=null?stmts.stmts:null)); 
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "while_loop_statement"

    public static class maintaining_clause_return extends TreeRuleReturnScope {
        public Exp exp = null;
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "maintaining_clause"
    // RBuilder.g:1951:1: maintaining_clause returns [Exp exp = null] : ^( MAINTAINING exp1= math_expression ) ;
    public final RBuilder.maintaining_clause_return maintaining_clause() throws RecognitionException {
        RBuilder.maintaining_clause_return retval = new RBuilder.maintaining_clause_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        ColsAST _first_0 = null;
        ColsAST _last = null;

        ColsAST MAINTAINING129=null;
        RBuilder.math_expression_return exp1 = null;


        ColsAST MAINTAINING129_tree=null;

        try {
            // RBuilder.g:1952:5: ( ^( MAINTAINING exp1= math_expression ) )
            // RBuilder.g:1952:9: ^( MAINTAINING exp1= math_expression )
            {
            root_0 = (ColsAST)adaptor.nil();

            _last = (ColsAST)input.LT(1);
            {
            ColsAST _save_last_1 = _last;
            ColsAST _first_1 = null;
            ColsAST root_1 = (ColsAST)adaptor.nil();_last = (ColsAST)input.LT(1);
            MAINTAINING129=(ColsAST)match(input,MAINTAINING,FOLLOW_MAINTAINING_in_maintaining_clause11396); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            MAINTAINING129_tree = (ColsAST)adaptor.dupNode(MAINTAINING129);

            root_1 = (ColsAST)adaptor.becomeRoot(MAINTAINING129_tree, root_1);
            }


            match(input, Token.DOWN, null); if (state.failed) return retval;
            _last = (ColsAST)input.LT(1);
            pushFollow(FOLLOW_math_expression_in_maintaining_clause11400);
            exp1=math_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, exp1.getTree());

            match(input, Token.UP, null); if (state.failed) return retval;adaptor.addChild(root_0, root_1);_last = _save_last_1;
            }

            if ( state.backtracking==0 ) {
               retval.exp = (exp1!=null?exp1.exp:null); 
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "maintaining_clause"

    public static class decreasing_clause_return extends TreeRuleReturnScope {
        public Exp exp = null;
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "decreasing_clause"
    // RBuilder.g:1955:1: decreasing_clause returns [Exp exp = null] : ^( DECREASING exp1= adding_expression ) ;
    public final RBuilder.decreasing_clause_return decreasing_clause() throws RecognitionException {
        RBuilder.decreasing_clause_return retval = new RBuilder.decreasing_clause_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        ColsAST _first_0 = null;
        ColsAST _last = null;

        ColsAST DECREASING130=null;
        RBuilder.adding_expression_return exp1 = null;


        ColsAST DECREASING130_tree=null;

        try {
            // RBuilder.g:1956:5: ( ^( DECREASING exp1= adding_expression ) )
            // RBuilder.g:1956:9: ^( DECREASING exp1= adding_expression )
            {
            root_0 = (ColsAST)adaptor.nil();

            _last = (ColsAST)input.LT(1);
            {
            ColsAST _save_last_1 = _last;
            ColsAST _first_1 = null;
            ColsAST root_1 = (ColsAST)adaptor.nil();_last = (ColsAST)input.LT(1);
            DECREASING130=(ColsAST)match(input,DECREASING,FOLLOW_DECREASING_in_decreasing_clause11427); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            DECREASING130_tree = (ColsAST)adaptor.dupNode(DECREASING130);

            root_1 = (ColsAST)adaptor.becomeRoot(DECREASING130_tree, root_1);
            }


            match(input, Token.DOWN, null); if (state.failed) return retval;
            _last = (ColsAST)input.LT(1);
            pushFollow(FOLLOW_adding_expression_in_decreasing_clause11431);
            exp1=adding_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, exp1.getTree());

            match(input, Token.UP, null); if (state.failed) return retval;adaptor.addChild(root_0, root_1);_last = _save_last_1;
            }

            if ( state.backtracking==0 ) {
               retval.exp = (exp1!=null?exp1.exp:null); 
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "decreasing_clause"

    public static class elapsed_time_clause_return extends TreeRuleReturnScope {
        public Exp exp = null;
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "elapsed_time_clause"
    // RBuilder.g:1959:1: elapsed_time_clause returns [Exp exp = null] : ^( ELAPSED_TIME exp1= math_expression ) ;
    public final RBuilder.elapsed_time_clause_return elapsed_time_clause() throws RecognitionException {
        RBuilder.elapsed_time_clause_return retval = new RBuilder.elapsed_time_clause_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        ColsAST _first_0 = null;
        ColsAST _last = null;

        ColsAST ELAPSED_TIME131=null;
        RBuilder.math_expression_return exp1 = null;


        ColsAST ELAPSED_TIME131_tree=null;

        try {
            // RBuilder.g:1960:5: ( ^( ELAPSED_TIME exp1= math_expression ) )
            // RBuilder.g:1960:9: ^( ELAPSED_TIME exp1= math_expression )
            {
            root_0 = (ColsAST)adaptor.nil();

            _last = (ColsAST)input.LT(1);
            {
            ColsAST _save_last_1 = _last;
            ColsAST _first_1 = null;
            ColsAST root_1 = (ColsAST)adaptor.nil();_last = (ColsAST)input.LT(1);
            ELAPSED_TIME131=(ColsAST)match(input,ELAPSED_TIME,FOLLOW_ELAPSED_TIME_in_elapsed_time_clause11458); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ELAPSED_TIME131_tree = (ColsAST)adaptor.dupNode(ELAPSED_TIME131);

            root_1 = (ColsAST)adaptor.becomeRoot(ELAPSED_TIME131_tree, root_1);
            }


            match(input, Token.DOWN, null); if (state.failed) return retval;
            _last = (ColsAST)input.LT(1);
            pushFollow(FOLLOW_math_expression_in_elapsed_time_clause11462);
            exp1=math_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, exp1.getTree());

            match(input, Token.UP, null); if (state.failed) return retval;adaptor.addChild(root_0, root_1);_last = _save_last_1;
            }

            if ( state.backtracking==0 ) {
               retval.exp = (exp1!=null?exp1.exp:null); 
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "elapsed_time_clause"

    public static class changing_clause_return extends TreeRuleReturnScope {
        public edu.clemson.cs.r2jt.collections.List<VariableExp> exps
                = new edu.clemson.cs.r2jt.collections.List<VariableExp>("VariableExp");
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "changing_clause"
    // RBuilder.g:1963:1: changing_clause returns [edu.clemson.cs.r2jt.collections.List<VariableExp> exps\n = new edu.clemson.cs.r2jt.collections.List<VariableExp>(\"VariableExp\")] : ^( CHANGING (exp= variable_expression )+ ) ;
    public final RBuilder.changing_clause_return changing_clause() throws RecognitionException {
        RBuilder.changing_clause_return retval = new RBuilder.changing_clause_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        ColsAST _first_0 = null;
        ColsAST _last = null;

        ColsAST CHANGING132=null;
        RBuilder.variable_expression_return exp = null;


        ColsAST CHANGING132_tree=null;

        try {
            // RBuilder.g:1965:5: ( ^( CHANGING (exp= variable_expression )+ ) )
            // RBuilder.g:1965:9: ^( CHANGING (exp= variable_expression )+ )
            {
            root_0 = (ColsAST)adaptor.nil();

            _last = (ColsAST)input.LT(1);
            {
            ColsAST _save_last_1 = _last;
            ColsAST _first_1 = null;
            ColsAST root_1 = (ColsAST)adaptor.nil();_last = (ColsAST)input.LT(1);
            CHANGING132=(ColsAST)match(input,CHANGING,FOLLOW_CHANGING_in_changing_clause11489); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            CHANGING132_tree = (ColsAST)adaptor.dupNode(CHANGING132);

            root_1 = (ColsAST)adaptor.becomeRoot(CHANGING132_tree, root_1);
            }


            match(input, Token.DOWN, null); if (state.failed) return retval;
            // RBuilder.g:1965:20: (exp= variable_expression )+
            int cnt176=0;
            loop176:
            do {
                int alt176=2;
                int LA176_0 = input.LA(1);

                if ( (LA176_0==IDENTIFIER||LA176_0==ARRAYFUNCTION||LA176_0==VARDOT) ) {
                    alt176=1;
                }


                switch (alt176) {
            	case 1 :
            	    // RBuilder.g:1965:21: exp= variable_expression
            	    {
            	    _last = (ColsAST)input.LT(1);
            	    pushFollow(FOLLOW_variable_expression_in_changing_clause11494);
            	    exp=variable_expression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) 
            	    adaptor.addChild(root_1, exp.getTree());
            	    if ( state.backtracking==0 ) {
            	       retval.exps.add((exp!=null?exp.exp:null)); 
            	    }

            	    if ( state.backtracking==0 ) {
            	    }
            	    }
            	    break;

            	default :
            	    if ( cnt176 >= 1 ) break loop176;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(176, input);
                        throw eee;
                }
                cnt176++;
            } while (true);


            match(input, Token.UP, null); if (state.failed) return retval;adaptor.addChild(root_0, root_1);_last = _save_last_1;
            }


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "changing_clause"

    public static class program_type_expression_return extends TreeRuleReturnScope {
        public Ty ty = null;
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "program_type_expression"
    // RBuilder.g:1972:1: program_type_expression returns [Ty ty = null] : ( ^( TYPEX qid= qualified_ident ) | ^( ARRAY ran= array_range ent= program_type_expression ) );
    public final RBuilder.program_type_expression_return program_type_expression() throws RecognitionException {
        RBuilder.program_type_expression_return retval = new RBuilder.program_type_expression_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        ColsAST _first_0 = null;
        ColsAST _last = null;

        ColsAST TYPEX133=null;
        ColsAST ARRAY134=null;
        RBuilder.qualified_ident_return qid = null;

        RBuilder.array_range_return ran = null;

        RBuilder.program_type_expression_return ent = null;


        ColsAST TYPEX133_tree=null;
        ColsAST ARRAY134_tree=null;

           PosSymbol qual = null;
            PosSymbol name = null;
            ProgramExp lo = null;
            ProgramExp hi = null;

        try {
            // RBuilder.g:1978:5: ( ^( TYPEX qid= qualified_ident ) | ^( ARRAY ran= array_range ent= program_type_expression ) )
            int alt177=2;
            int LA177_0 = input.LA(1);

            if ( (LA177_0==TYPEX) ) {
                alt177=1;
            }
            else if ( (LA177_0==ARRAY) ) {
                alt177=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 177, 0, input);

                throw nvae;
            }
            switch (alt177) {
                case 1 :
                    // RBuilder.g:1978:9: ^( TYPEX qid= qualified_ident )
                    {
                    root_0 = (ColsAST)adaptor.nil();

                    _last = (ColsAST)input.LT(1);
                    {
                    ColsAST _save_last_1 = _last;
                    ColsAST _first_1 = null;
                    ColsAST root_1 = (ColsAST)adaptor.nil();_last = (ColsAST)input.LT(1);
                    TYPEX133=(ColsAST)match(input,TYPEX,FOLLOW_TYPEX_in_program_type_expression11531); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    TYPEX133_tree = (ColsAST)adaptor.dupNode(TYPEX133);

                    root_1 = (ColsAST)adaptor.becomeRoot(TYPEX133_tree, root_1);
                    }


                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    _last = (ColsAST)input.LT(1);
                    pushFollow(FOLLOW_qualified_ident_in_program_type_expression11535);
                    qid=qualified_ident();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, qid.getTree());

                    match(input, Token.UP, null); if (state.failed) return retval;adaptor.addChild(root_0, root_1);_last = _save_last_1;
                    }

                    if ( state.backtracking==0 ) {
                         qual = (qid!=null?qid.exp:null).getQualifier();
                                          name = (qid!=null?qid.exp:null).getName();
                                          retval.ty = new NameTy(qual, name);
                                      
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // RBuilder.g:1984:9: ^( ARRAY ran= array_range ent= program_type_expression )
                    {
                    root_0 = (ColsAST)adaptor.nil();

                    _last = (ColsAST)input.LT(1);
                    {
                    ColsAST _save_last_1 = _last;
                    ColsAST _first_1 = null;
                    ColsAST root_1 = (ColsAST)adaptor.nil();_last = (ColsAST)input.LT(1);
                    ARRAY134=(ColsAST)match(input,ARRAY,FOLLOW_ARRAY_in_program_type_expression11575); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ARRAY134_tree = (ColsAST)adaptor.dupNode(ARRAY134);

                    root_1 = (ColsAST)adaptor.becomeRoot(ARRAY134_tree, root_1);
                    }


                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    _last = (ColsAST)input.LT(1);
                    pushFollow(FOLLOW_array_range_in_program_type_expression11579);
                    ran=array_range();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, ran.getTree());
                    _last = (ColsAST)input.LT(1);
                    pushFollow(FOLLOW_program_type_expression_in_program_type_expression11583);
                    ent=program_type_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, ent.getTree());

                    match(input, Token.UP, null); if (state.failed) return retval;adaptor.addChild(root_0, root_1);_last = _save_last_1;
                    }

                    if ( state.backtracking==0 ) {
                         assert (ran!=null?ran.exps:null).size() == 2 : "ran.size() != 2";
                                          lo = (ran!=null?ran.exps:null).get(0);
                                          hi = (ran!=null?ran.exps:null).get(1);
                                          retval.ty = new ArrayTy(getLocation(ARRAY134), lo, hi, (ent!=null?ent.ty:null));
                                      
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }
            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "program_type_expression"

    public static class structural_program_type_expression_return extends TreeRuleReturnScope {
        public Ty ty = null;
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "structural_program_type_expression"
    // RBuilder.g:1992:1: structural_program_type_expression returns [Ty ty = null] : ( ^( RECORD (decs2= record_variable_declaration_group )+ ) | ty1= program_type_expression );
    public final RBuilder.structural_program_type_expression_return structural_program_type_expression() throws RecognitionException {
        RBuilder.structural_program_type_expression_return retval = new RBuilder.structural_program_type_expression_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        ColsAST _first_0 = null;
        ColsAST _last = null;

        ColsAST RECORD135=null;
        RBuilder.record_variable_declaration_group_return decs2 = null;

        RBuilder.program_type_expression_return ty1 = null;


        ColsAST RECORD135_tree=null;

           edu.clemson.cs.r2jt.collections.List<VarDec> decs = new edu.clemson.cs.r2jt.collections.List<VarDec>("VarDec");

        try {
            // RBuilder.g:1995:5: ( ^( RECORD (decs2= record_variable_declaration_group )+ ) | ty1= program_type_expression )
            int alt179=2;
            int LA179_0 = input.LA(1);

            if ( (LA179_0==RECORD) ) {
                alt179=1;
            }
            else if ( (LA179_0==ARRAY||LA179_0==TYPEX) ) {
                alt179=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 179, 0, input);

                throw nvae;
            }
            switch (alt179) {
                case 1 :
                    // RBuilder.g:1995:9: ^( RECORD (decs2= record_variable_declaration_group )+ )
                    {
                    root_0 = (ColsAST)adaptor.nil();

                    _last = (ColsAST)input.LT(1);
                    {
                    ColsAST _save_last_1 = _last;
                    ColsAST _first_1 = null;
                    ColsAST root_1 = (ColsAST)adaptor.nil();_last = (ColsAST)input.LT(1);
                    RECORD135=(ColsAST)match(input,RECORD,FOLLOW_RECORD_in_structural_program_type_expression11632); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RECORD135_tree = (ColsAST)adaptor.dupNode(RECORD135);

                    root_1 = (ColsAST)adaptor.becomeRoot(RECORD135_tree, root_1);
                    }


                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    // RBuilder.g:1996:13: (decs2= record_variable_declaration_group )+
                    int cnt178=0;
                    loop178:
                    do {
                        int alt178=2;
                        int LA178_0 = input.LA(1);

                        if ( (LA178_0==VAR) ) {
                            alt178=1;
                        }


                        switch (alt178) {
                    	case 1 :
                    	    // RBuilder.g:1996:14: decs2= record_variable_declaration_group
                    	    {
                    	    _last = (ColsAST)input.LT(1);
                    	    pushFollow(FOLLOW_record_variable_declaration_group_in_structural_program_type_expression11649);
                    	    decs2=record_variable_declaration_group();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) 
                    	    adaptor.addChild(root_1, decs2.getTree());
                    	    if ( state.backtracking==0 ) {
                    	       decs.addAll((decs2!=null?decs2.decs:null)); 
                    	    }

                    	    if ( state.backtracking==0 ) {
                    	    }
                    	    }
                    	    break;

                    	default :
                    	    if ( cnt178 >= 1 ) break loop178;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(178, input);
                                throw eee;
                        }
                        cnt178++;
                    } while (true);


                    match(input, Token.UP, null); if (state.failed) return retval;adaptor.addChild(root_0, root_1);_last = _save_last_1;
                    }

                    if ( state.backtracking==0 ) {
                       retval.ty = new RecordTy(getLocation(RECORD135), decs); 
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // RBuilder.g:1999:9: ty1= program_type_expression
                    {
                    root_0 = (ColsAST)adaptor.nil();

                    _last = (ColsAST)input.LT(1);
                    pushFollow(FOLLOW_program_type_expression_in_structural_program_type_expression11685);
                    ty1=program_type_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, ty1.getTree());
                    if ( state.backtracking==0 ) {
                       retval.ty = (ty1!=null?ty1.ty:null); 
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }
            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "structural_program_type_expression"

    public static class record_variable_declaration_group_return extends TreeRuleReturnScope {
        public edu.clemson.cs.r2jt.collections.List<VarDec> decs
                = new edu.clemson.cs.r2jt.collections.List<VarDec>("VarDec");
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "record_variable_declaration_group"
    // RBuilder.g:2002:1: record_variable_declaration_group returns [edu.clemson.cs.r2jt.collections.List<VarDec> decs\n = new edu.clemson.cs.r2jt.collections.List<VarDec>(\"VarDec\")] : ^( VAR psyms= variable_id_list ty= program_type_expression ) ;
    public final RBuilder.record_variable_declaration_group_return record_variable_declaration_group() throws RecognitionException {
        RBuilder.record_variable_declaration_group_return retval = new RBuilder.record_variable_declaration_group_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        ColsAST _first_0 = null;
        ColsAST _last = null;

        ColsAST VAR136=null;
        RBuilder.variable_id_list_return psyms = null;

        RBuilder.program_type_expression_return ty = null;


        ColsAST VAR136_tree=null;

        try {
            // RBuilder.g:2004:5: ( ^( VAR psyms= variable_id_list ty= program_type_expression ) )
            // RBuilder.g:2004:9: ^( VAR psyms= variable_id_list ty= program_type_expression )
            {
            root_0 = (ColsAST)adaptor.nil();

            _last = (ColsAST)input.LT(1);
            {
            ColsAST _save_last_1 = _last;
            ColsAST _first_1 = null;
            ColsAST root_1 = (ColsAST)adaptor.nil();_last = (ColsAST)input.LT(1);
            VAR136=(ColsAST)match(input,VAR,FOLLOW_VAR_in_record_variable_declaration_group11711); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            VAR136_tree = (ColsAST)adaptor.dupNode(VAR136);

            root_1 = (ColsAST)adaptor.becomeRoot(VAR136_tree, root_1);
            }


            match(input, Token.DOWN, null); if (state.failed) return retval;
            _last = (ColsAST)input.LT(1);
            pushFollow(FOLLOW_variable_id_list_in_record_variable_declaration_group11715);
            psyms=variable_id_list();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, psyms.getTree());
            _last = (ColsAST)input.LT(1);
            pushFollow(FOLLOW_program_type_expression_in_record_variable_declaration_group11719);
            ty=program_type_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, ty.getTree());

            match(input, Token.UP, null); if (state.failed) return retval;adaptor.addChild(root_0, root_1);_last = _save_last_1;
            }

            if ( state.backtracking==0 ) {
               retval.decs = getVarDecList((psyms!=null?psyms.psyms:null), (ty!=null?ty.ty:null)); 
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "record_variable_declaration_group"

    public static class record_aux_variable_declaration_group_return extends TreeRuleReturnScope {
        public edu.clemson.cs.r2jt.collections.List<AuxVarDec> decs
                = new edu.clemson.cs.r2jt.collections.List<AuxVarDec>("VarDec");
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "record_aux_variable_declaration_group"
    // RBuilder.g:2008:1: record_aux_variable_declaration_group returns [edu.clemson.cs.r2jt.collections.List<AuxVarDec> decs\n = new edu.clemson.cs.r2jt.collections.List<AuxVarDec>(\"VarDec\")] : ^( AUX_VAR psyms= variable_id_list ty= program_type_expression ) ;
    public final RBuilder.record_aux_variable_declaration_group_return record_aux_variable_declaration_group() throws RecognitionException {
        RBuilder.record_aux_variable_declaration_group_return retval = new RBuilder.record_aux_variable_declaration_group_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        ColsAST _first_0 = null;
        ColsAST _last = null;

        ColsAST AUX_VAR137=null;
        RBuilder.variable_id_list_return psyms = null;

        RBuilder.program_type_expression_return ty = null;


        ColsAST AUX_VAR137_tree=null;

        try {
            // RBuilder.g:2010:5: ( ^( AUX_VAR psyms= variable_id_list ty= program_type_expression ) )
            // RBuilder.g:2010:9: ^( AUX_VAR psyms= variable_id_list ty= program_type_expression )
            {
            root_0 = (ColsAST)adaptor.nil();

            _last = (ColsAST)input.LT(1);
            {
            ColsAST _save_last_1 = _last;
            ColsAST _first_1 = null;
            ColsAST root_1 = (ColsAST)adaptor.nil();_last = (ColsAST)input.LT(1);
            AUX_VAR137=(ColsAST)match(input,AUX_VAR,FOLLOW_AUX_VAR_in_record_aux_variable_declaration_group11758); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            AUX_VAR137_tree = (ColsAST)adaptor.dupNode(AUX_VAR137);

            root_1 = (ColsAST)adaptor.becomeRoot(AUX_VAR137_tree, root_1);
            }


            match(input, Token.DOWN, null); if (state.failed) return retval;
            _last = (ColsAST)input.LT(1);
            pushFollow(FOLLOW_variable_id_list_in_record_aux_variable_declaration_group11762);
            psyms=variable_id_list();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, psyms.getTree());
            _last = (ColsAST)input.LT(1);
            pushFollow(FOLLOW_program_type_expression_in_record_aux_variable_declaration_group11766);
            ty=program_type_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, ty.getTree());

            match(input, Token.UP, null); if (state.failed) return retval;adaptor.addChild(root_0, root_1);_last = _save_last_1;
            }

            if ( state.backtracking==0 ) {
               retval.decs = getAuxVarDecList((psyms!=null?psyms.psyms:null), (ty!=null?ty.ty:null)); 
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "record_aux_variable_declaration_group"

    public static class array_range_return extends TreeRuleReturnScope {
        public edu.clemson.cs.r2jt.collections.List<ProgramExp> exps
                = new edu.clemson.cs.r2jt.collections.List<ProgramExp>("ProgramExp");
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "array_range"
    // RBuilder.g:2014:1: array_range returns [edu.clemson.cs.r2jt.collections.List<ProgramExp> exps\n = new edu.clemson.cs.r2jt.collections.List<ProgramExp>(\"ProgramExp\")] : ^( RANGE exp2= program_expression exp3= program_expression ) ;
    public final RBuilder.array_range_return array_range() throws RecognitionException {
        RBuilder.array_range_return retval = new RBuilder.array_range_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        ColsAST _first_0 = null;
        ColsAST _last = null;

        ColsAST RANGE138=null;
        RBuilder.program_expression_return exp2 = null;

        RBuilder.program_expression_return exp3 = null;


        ColsAST RANGE138_tree=null;

        try {
            // RBuilder.g:2016:5: ( ^( RANGE exp2= program_expression exp3= program_expression ) )
            // RBuilder.g:2016:9: ^( RANGE exp2= program_expression exp3= program_expression )
            {
            root_0 = (ColsAST)adaptor.nil();

            _last = (ColsAST)input.LT(1);
            {
            ColsAST _save_last_1 = _last;
            ColsAST _first_1 = null;
            ColsAST root_1 = (ColsAST)adaptor.nil();_last = (ColsAST)input.LT(1);
            RANGE138=(ColsAST)match(input,RANGE,FOLLOW_RANGE_in_array_range11801); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RANGE138_tree = (ColsAST)adaptor.dupNode(RANGE138);

            root_1 = (ColsAST)adaptor.becomeRoot(RANGE138_tree, root_1);
            }


            match(input, Token.DOWN, null); if (state.failed) return retval;
            _last = (ColsAST)input.LT(1);
            pushFollow(FOLLOW_program_expression_in_array_range11805);
            exp2=program_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, exp2.getTree());
            _last = (ColsAST)input.LT(1);
            pushFollow(FOLLOW_program_expression_in_array_range11809);
            exp3=program_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, exp3.getTree());

            match(input, Token.UP, null); if (state.failed) return retval;adaptor.addChild(root_0, root_1);_last = _save_last_1;
            }

            if ( state.backtracking==0 ) {
               retval.exps.add((exp2!=null?exp2.exp:null)); retval.exps.add((exp3!=null?exp3.exp:null)); 
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "array_range"

    public static class variable_declaration_group_return extends TreeRuleReturnScope {
        public edu.clemson.cs.r2jt.collections.List<VarDec> decs
                = new edu.clemson.cs.r2jt.collections.List<VarDec>("VarDec");
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "variable_declaration_group"
    // RBuilder.g:2020:1: variable_declaration_group returns [edu.clemson.cs.r2jt.collections.List<VarDec> decs\n = new edu.clemson.cs.r2jt.collections.List<VarDec>(\"VarDec\")] : psyms= variable_id_list ty= program_type_expression ;
    public final RBuilder.variable_declaration_group_return variable_declaration_group() throws RecognitionException {
        RBuilder.variable_declaration_group_return retval = new RBuilder.variable_declaration_group_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        ColsAST _first_0 = null;
        ColsAST _last = null;

        RBuilder.variable_id_list_return psyms = null;

        RBuilder.program_type_expression_return ty = null;



        try {
            // RBuilder.g:2022:5: (psyms= variable_id_list ty= program_type_expression )
            // RBuilder.g:2022:9: psyms= variable_id_list ty= program_type_expression
            {
            root_0 = (ColsAST)adaptor.nil();

            _last = (ColsAST)input.LT(1);
            pushFollow(FOLLOW_variable_id_list_in_variable_declaration_group11845);
            psyms=variable_id_list();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, psyms.getTree());
            _last = (ColsAST)input.LT(1);
            pushFollow(FOLLOW_program_type_expression_in_variable_declaration_group11849);
            ty=program_type_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, ty.getTree());
            if ( state.backtracking==0 ) {
               retval.decs = getVarDecList((psyms!=null?psyms.psyms:null), (ty!=null?ty.ty:null)); 
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "variable_declaration_group"

    public static class aux_variable_declaration_group_return extends TreeRuleReturnScope {
        public edu.clemson.cs.r2jt.collections.List<AuxVarDec> decs
                = new edu.clemson.cs.r2jt.collections.List<AuxVarDec>("AuxVarDec");
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "aux_variable_declaration_group"
    // RBuilder.g:2027:1: aux_variable_declaration_group returns [edu.clemson.cs.r2jt.collections.List<AuxVarDec> decs\n = new edu.clemson.cs.r2jt.collections.List<AuxVarDec>(\"AuxVarDec\")] : psyms= variable_id_list ty= program_type_expression ;
    public final RBuilder.aux_variable_declaration_group_return aux_variable_declaration_group() throws RecognitionException {
        RBuilder.aux_variable_declaration_group_return retval = new RBuilder.aux_variable_declaration_group_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        ColsAST _first_0 = null;
        ColsAST _last = null;

        RBuilder.variable_id_list_return psyms = null;

        RBuilder.program_type_expression_return ty = null;



        try {
            // RBuilder.g:2029:5: (psyms= variable_id_list ty= program_type_expression )
            // RBuilder.g:2029:9: psyms= variable_id_list ty= program_type_expression
            {
            root_0 = (ColsAST)adaptor.nil();

            _last = (ColsAST)input.LT(1);
            pushFollow(FOLLOW_variable_id_list_in_aux_variable_declaration_group11892);
            psyms=variable_id_list();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, psyms.getTree());
            _last = (ColsAST)input.LT(1);
            pushFollow(FOLLOW_program_type_expression_in_aux_variable_declaration_group11896);
            ty=program_type_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, ty.getTree());
            if ( state.backtracking==0 ) {
               retval.decs = getAuxVarDecList((psyms!=null?psyms.psyms:null), (ty!=null?ty.ty:null)); 
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "aux_variable_declaration_group"

    public static class variable_id_list_return extends TreeRuleReturnScope {
        public edu.clemson.cs.r2jt.collections.List<PosSymbol> psyms
                = new edu.clemson.cs.r2jt.collections.List<PosSymbol>("PosSymbol");
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "variable_id_list"
    // RBuilder.g:2033:1: variable_id_list returns [edu.clemson.cs.r2jt.collections.List<PosSymbol> psyms\n = new edu.clemson.cs.r2jt.collections.List<PosSymbol>(\"PosSymbol\")] : (ps= ident )+ ;
    public final RBuilder.variable_id_list_return variable_id_list() throws RecognitionException {
        RBuilder.variable_id_list_return retval = new RBuilder.variable_id_list_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        ColsAST _first_0 = null;
        ColsAST _last = null;

        RBuilder.ident_return ps = null;



        try {
            // RBuilder.g:2035:5: ( (ps= ident )+ )
            // RBuilder.g:2035:9: (ps= ident )+
            {
            root_0 = (ColsAST)adaptor.nil();

            // RBuilder.g:2035:9: (ps= ident )+
            int cnt180=0;
            loop180:
            do {
                int alt180=2;
                int LA180_0 = input.LA(1);

                if ( (LA180_0==IDENTIFIER) ) {
                    alt180=1;
                }


                switch (alt180) {
            	case 1 :
            	    // RBuilder.g:2035:10: ps= ident
            	    {
            	    _last = (ColsAST)input.LT(1);
            	    pushFollow(FOLLOW_ident_in_variable_id_list11932);
            	    ps=ident();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) 
            	    adaptor.addChild(root_0, ps.getTree());
            	    if ( state.backtracking==0 ) {
            	       retval.psyms.add((ps!=null?ps.ps:null)); 
            	    }

            	    if ( state.backtracking==0 ) {
            	    }
            	    }
            	    break;

            	default :
            	    if ( cnt180 >= 1 ) break loop180;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(180, input);
                        throw eee;
                }
                cnt180++;
            } while (true);


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "variable_id_list"

    public static class math_type_expression_return extends TreeRuleReturnScope {
        public ArbitraryExpTy ty = null;
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "math_type_expression"
    // RBuilder.g:2042:1: math_type_expression returns [ArbitraryExpTy ty = null] : i= infix_expression ;
    public final RBuilder.math_type_expression_return math_type_expression() throws RecognitionException {
        RBuilder.math_type_expression_return retval = new RBuilder.math_type_expression_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        ColsAST _first_0 = null;
        ColsAST _last = null;

        RBuilder.infix_expression_return i = null;



        try {
            // RBuilder.g:2043:5: (i= infix_expression )
            // RBuilder.g:2045:5: i= infix_expression
            {
            root_0 = (ColsAST)adaptor.nil();

            _last = (ColsAST)input.LT(1);
            pushFollow(FOLLOW_infix_expression_in_math_type_expression11975);
            i=infix_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, i.getTree());
            if ( state.backtracking==0 ) {
               retval.ty = new ArbitraryExpTy((i!=null?i.exp:null)); 
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "math_type_expression"

    public static class type_expression_argument_list_return extends TreeRuleReturnScope {
        public edu.clemson.cs.r2jt.collections.List<Ty> tys = new edu.clemson.cs.r2jt.collections.List<Ty>("Ty");
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "type_expression_argument_list"
    // RBuilder.g:2117:1: type_expression_argument_list returns [edu.clemson.cs.r2jt.collections.List<Ty> tys = new edu.clemson.cs.r2jt.collections.List<Ty>(\"Ty\")] : ^( PARAMS (ty2= math_type_expression )+ ) ;
    public final RBuilder.type_expression_argument_list_return type_expression_argument_list() throws RecognitionException {
        RBuilder.type_expression_argument_list_return retval = new RBuilder.type_expression_argument_list_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        ColsAST _first_0 = null;
        ColsAST _last = null;

        ColsAST PARAMS139=null;
        RBuilder.math_type_expression_return ty2 = null;


        ColsAST PARAMS139_tree=null;

        try {
            // RBuilder.g:2118:5: ( ^( PARAMS (ty2= math_type_expression )+ ) )
            // RBuilder.g:2118:9: ^( PARAMS (ty2= math_type_expression )+ )
            {
            root_0 = (ColsAST)adaptor.nil();

            _last = (ColsAST)input.LT(1);
            {
            ColsAST _save_last_1 = _last;
            ColsAST _first_1 = null;
            ColsAST root_1 = (ColsAST)adaptor.nil();_last = (ColsAST)input.LT(1);
            PARAMS139=(ColsAST)match(input,PARAMS,FOLLOW_PARAMS_in_type_expression_argument_list12011); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            PARAMS139_tree = (ColsAST)adaptor.dupNode(PARAMS139);

            root_1 = (ColsAST)adaptor.becomeRoot(PARAMS139_tree, root_1);
            }


            match(input, Token.DOWN, null); if (state.failed) return retval;
            // RBuilder.g:2118:18: (ty2= math_type_expression )+
            int cnt181=0;
            loop181:
            do {
                int alt181=2;
                int LA181_0 = input.LA(1);

                if ( (LA181_0==BOOLEAN||LA181_0==CARTPROD||LA181_0==COMPLEMENT||LA181_0==DIV||LA181_0==INTERSECT||LA181_0==LAMBDA||LA181_0==MOD||(LA181_0>=NOT && LA181_0<=CAT)||LA181_0==REM||LA181_0==UNION||LA181_0==WITHOUT||LA181_0==IDENTIFIER||LA181_0==DOT||LA181_0==NUMERIC_LITERAL||LA181_0==CHARACTER_LITERAL||LA181_0==LBRACE||LA181_0==DBL_LBRACE||LA181_0==HASH||(LA181_0>=PLUS && LA181_0<=MINUS)||(LA181_0>=MULTIPLY && LA181_0<=RANGE)||LA181_0==FUNCARROW||(LA181_0>=BAR && LA181_0<=DBL_BAR)||LA181_0==STRING_LITERAL||LA181_0==FREE_OPERATOR||LA181_0==ANGLE||LA181_0==DBL_ANGLE||LA181_0==FUNCTION||LA181_0==ITERATION||LA181_0==NESTED||LA181_0==TUPLE||LA181_0==UNARY_MINUS||(LA181_0>=QUALNUM && LA181_0<=LOCALVAREXP)) ) {
                    alt181=1;
                }


                switch (alt181) {
            	case 1 :
            	    // RBuilder.g:2118:19: ty2= math_type_expression
            	    {
            	    _last = (ColsAST)input.LT(1);
            	    pushFollow(FOLLOW_math_type_expression_in_type_expression_argument_list12016);
            	    ty2=math_type_expression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) 
            	    adaptor.addChild(root_1, ty2.getTree());
            	    if ( state.backtracking==0 ) {
            	       retval.tys.add((ty2!=null?ty2.ty:null)); 
            	    }

            	    if ( state.backtracking==0 ) {
            	    }
            	    }
            	    break;

            	default :
            	    if ( cnt181 >= 1 ) break loop181;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(181, input);
                        throw eee;
                }
                cnt181++;
            } while (true);


            match(input, Token.UP, null); if (state.failed) return retval;adaptor.addChild(root_0, root_1);_last = _save_last_1;
            }


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "type_expression_argument_list"

    public static class cartprod_variable_declaration_group_return extends TreeRuleReturnScope {
        public edu.clemson.cs.r2jt.collections.List<MathVarDec> vars
                = new edu.clemson.cs.r2jt.collections.List<MathVarDec>("MathVarDec");
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "cartprod_variable_declaration_group"
    // RBuilder.g:2121:1: cartprod_variable_declaration_group returns [edu.clemson.cs.r2jt.collections.List<MathVarDec> vars\n = new edu.clemson.cs.r2jt.collections.List<MathVarDec>(\"MathVarDec\")] : ^( VAR vars1= math_variable_declaration_group ) ;
    public final RBuilder.cartprod_variable_declaration_group_return cartprod_variable_declaration_group() throws RecognitionException {
        RBuilder.cartprod_variable_declaration_group_return retval = new RBuilder.cartprod_variable_declaration_group_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        ColsAST _first_0 = null;
        ColsAST _last = null;

        ColsAST VAR140=null;
        RBuilder.math_variable_declaration_group_return vars1 = null;


        ColsAST VAR140_tree=null;

        try {
            // RBuilder.g:2123:5: ( ^( VAR vars1= math_variable_declaration_group ) )
            // RBuilder.g:2123:9: ^( VAR vars1= math_variable_declaration_group )
            {
            root_0 = (ColsAST)adaptor.nil();

            _last = (ColsAST)input.LT(1);
            {
            ColsAST _save_last_1 = _last;
            ColsAST _first_1 = null;
            ColsAST root_1 = (ColsAST)adaptor.nil();_last = (ColsAST)input.LT(1);
            VAR140=(ColsAST)match(input,VAR,FOLLOW_VAR_in_cartprod_variable_declaration_group12045); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            VAR140_tree = (ColsAST)adaptor.dupNode(VAR140);

            root_1 = (ColsAST)adaptor.becomeRoot(VAR140_tree, root_1);
            }


            match(input, Token.DOWN, null); if (state.failed) return retval;
            _last = (ColsAST)input.LT(1);
            pushFollow(FOLLOW_math_variable_declaration_group_in_cartprod_variable_declaration_group12049);
            vars1=math_variable_declaration_group();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, vars1.getTree());

            match(input, Token.UP, null); if (state.failed) return retval;adaptor.addChild(root_0, root_1);_last = _save_last_1;
            }

            if ( state.backtracking==0 ) {
               retval.vars = (vars1!=null?vars1.vars:null); 
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "cartprod_variable_declaration_group"

    public static class structural_math_variable_declaration_group_return extends TreeRuleReturnScope {
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "structural_math_variable_declaration_group"
    // RBuilder.g:2126:1: structural_math_variable_declaration_group : variable_id_list COLON math_type_expression ;
    public final RBuilder.structural_math_variable_declaration_group_return structural_math_variable_declaration_group() throws RecognitionException {
        RBuilder.structural_math_variable_declaration_group_return retval = new RBuilder.structural_math_variable_declaration_group_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        ColsAST _first_0 = null;
        ColsAST _last = null;

        ColsAST COLON142=null;
        RBuilder.variable_id_list_return variable_id_list141 = null;

        RBuilder.math_type_expression_return math_type_expression143 = null;


        ColsAST COLON142_tree=null;

        try {
            // RBuilder.g:2127:5: ( variable_id_list COLON math_type_expression )
            // RBuilder.g:2127:9: variable_id_list COLON math_type_expression
            {
            root_0 = (ColsAST)adaptor.nil();

            _last = (ColsAST)input.LT(1);
            pushFollow(FOLLOW_variable_id_list_in_structural_math_variable_declaration_group12075);
            variable_id_list141=variable_id_list();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, variable_id_list141.getTree());
            _last = (ColsAST)input.LT(1);
            COLON142=(ColsAST)match(input,COLON,FOLLOW_COLON_in_structural_math_variable_declaration_group12077); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            COLON142_tree = (ColsAST)adaptor.dupNode(COLON142);

            adaptor.addChild(root_0, COLON142_tree);
            }
            _last = (ColsAST)input.LT(1);
            pushFollow(FOLLOW_math_type_expression_in_structural_math_variable_declaration_group12079);
            math_type_expression143=math_type_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, math_type_expression143.getTree());

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "structural_math_variable_declaration_group"

    public static class math_variable_declaration_group_return extends TreeRuleReturnScope {
        public edu.clemson.cs.r2jt.collections.List<MathVarDec> vars
                = new edu.clemson.cs.r2jt.collections.List<MathVarDec>("MathVarDec");
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "math_variable_declaration_group"
    // RBuilder.g:2130:1: math_variable_declaration_group returns [edu.clemson.cs.r2jt.collections.List<MathVarDec> vars\n = new edu.clemson.cs.r2jt.collections.List<MathVarDec>(\"MathVarDec\")] : psyms= variable_id_list COLON ty= math_type_expression ;
    public final RBuilder.math_variable_declaration_group_return math_variable_declaration_group() throws RecognitionException {
        RBuilder.math_variable_declaration_group_return retval = new RBuilder.math_variable_declaration_group_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        ColsAST _first_0 = null;
        ColsAST _last = null;

        ColsAST COLON144=null;
        RBuilder.variable_id_list_return psyms = null;

        RBuilder.math_type_expression_return ty = null;


        ColsAST COLON144_tree=null;

        try {
            // RBuilder.g:2132:5: (psyms= variable_id_list COLON ty= math_type_expression )
            // RBuilder.g:2132:9: psyms= variable_id_list COLON ty= math_type_expression
            {
            root_0 = (ColsAST)adaptor.nil();

            _last = (ColsAST)input.LT(1);
            pushFollow(FOLLOW_variable_id_list_in_math_variable_declaration_group12104);
            psyms=variable_id_list();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, psyms.getTree());
            _last = (ColsAST)input.LT(1);
            COLON144=(ColsAST)match(input,COLON,FOLLOW_COLON_in_math_variable_declaration_group12106); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            COLON144_tree = (ColsAST)adaptor.dupNode(COLON144);

            adaptor.addChild(root_0, COLON144_tree);
            }
            _last = (ColsAST)input.LT(1);
            pushFollow(FOLLOW_math_type_expression_in_math_variable_declaration_group12110);
            ty=math_type_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, ty.getTree());
            if ( state.backtracking==0 ) {
               retval.vars = getMathVarDecList((psyms!=null?psyms.psyms:null), (ty!=null?ty.ty:null)); 
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "math_variable_declaration_group"

    public static class math_variable_declaration_return extends TreeRuleReturnScope {
        public MathVarDec var = null;
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "math_variable_declaration"
    // RBuilder.g:2136:1: math_variable_declaration returns [MathVarDec var = null] : ps= ident COLON ty= math_type_expression ;
    public final RBuilder.math_variable_declaration_return math_variable_declaration() throws RecognitionException {
        RBuilder.math_variable_declaration_return retval = new RBuilder.math_variable_declaration_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        ColsAST _first_0 = null;
        ColsAST _last = null;

        ColsAST COLON145=null;
        RBuilder.ident_return ps = null;

        RBuilder.math_type_expression_return ty = null;


        ColsAST COLON145_tree=null;

        try {
            // RBuilder.g:2137:5: (ps= ident COLON ty= math_type_expression )
            // RBuilder.g:2137:9: ps= ident COLON ty= math_type_expression
            {
            root_0 = (ColsAST)adaptor.nil();

            _last = (ColsAST)input.LT(1);
            pushFollow(FOLLOW_ident_in_math_variable_declaration12146);
            ps=ident();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, ps.getTree());
            _last = (ColsAST)input.LT(1);
            COLON145=(ColsAST)match(input,COLON,FOLLOW_COLON_in_math_variable_declaration12148); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            COLON145_tree = (ColsAST)adaptor.dupNode(COLON145);

            adaptor.addChild(root_0, COLON145_tree);
            }
            _last = (ColsAST)input.LT(1);
            pushFollow(FOLLOW_math_type_expression_in_math_variable_declaration12152);
            ty=math_type_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, ty.getTree());
            if ( state.backtracking==0 ) {
               retval.var = new MathVarDec((ps!=null?ps.ps:null), (ty!=null?ty.ty:null)); 
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "math_variable_declaration"

    public static class implicit_type_parameter_group_return extends TreeRuleReturnScope {
        public Ty ty = null;
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "implicit_type_parameter_group"
    // RBuilder.g:2141:1: implicit_type_parameter_group returns [Ty ty = null] : ps= ident exp= math_expression ;
    public final RBuilder.implicit_type_parameter_group_return implicit_type_parameter_group() throws RecognitionException {
        RBuilder.implicit_type_parameter_group_return retval = new RBuilder.implicit_type_parameter_group_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        ColsAST _first_0 = null;
        ColsAST _last = null;

        RBuilder.ident_return ps = null;

        RBuilder.math_expression_return exp = null;




          PosSymbol qual = null;
          edu.clemson.cs.r2jt.collections.List<Ty> args = new edu.clemson.cs.r2jt.collections.List<Ty>();

        try {
            // RBuilder.g:2146:5: (ps= ident exp= math_expression )
            // RBuilder.g:2146:9: ps= ident exp= math_expression
            {
            root_0 = (ColsAST)adaptor.nil();

            _last = (ColsAST)input.LT(1);
            pushFollow(FOLLOW_ident_in_implicit_type_parameter_group12195);
            ps=ident();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, ps.getTree());
            _last = (ColsAST)input.LT(1);
            pushFollow(FOLLOW_math_expression_in_implicit_type_parameter_group12199);
            exp=math_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, exp.getTree());

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "implicit_type_parameter_group"

    public static class math_expression_return extends TreeRuleReturnScope {
        public Exp exp = null;
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "math_expression"
    // RBuilder.g:2157:1: math_expression returns [Exp exp = null] : ^( EXPR (exp1= iterated_construct | exp2= quantified_expression ) ) ;
    public final RBuilder.math_expression_return math_expression() throws RecognitionException {
        RBuilder.math_expression_return retval = new RBuilder.math_expression_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        ColsAST _first_0 = null;
        ColsAST _last = null;

        ColsAST EXPR146=null;
        RBuilder.iterated_construct_return exp1 = null;

        RBuilder.quantified_expression_return exp2 = null;


        ColsAST EXPR146_tree=null;

        try {
            // RBuilder.g:2158:5: ( ^( EXPR (exp1= iterated_construct | exp2= quantified_expression ) ) )
            // RBuilder.g:2158:9: ^( EXPR (exp1= iterated_construct | exp2= quantified_expression ) )
            {
            root_0 = (ColsAST)adaptor.nil();

            _last = (ColsAST)input.LT(1);
            {
            ColsAST _save_last_1 = _last;
            ColsAST _first_1 = null;
            ColsAST root_1 = (ColsAST)adaptor.nil();_last = (ColsAST)input.LT(1);
            EXPR146=(ColsAST)match(input,EXPR,FOLLOW_EXPR_in_math_expression12269); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            EXPR146_tree = (ColsAST)adaptor.dupNode(EXPR146);

            root_1 = (ColsAST)adaptor.becomeRoot(EXPR146_tree, root_1);
            }


            match(input, Token.DOWN, null); if (state.failed) return retval;
            // RBuilder.g:2159:13: (exp1= iterated_construct | exp2= quantified_expression )
            int alt182=2;
            alt182 = dfa182.predict(input);
            switch (alt182) {
                case 1 :
                    // RBuilder.g:2159:17: exp1= iterated_construct
                    {
                    _last = (ColsAST)input.LT(1);
                    pushFollow(FOLLOW_iterated_construct_in_math_expression12289);
                    exp1=iterated_construct();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, exp1.getTree());
                    if ( state.backtracking==0 ) {
                       retval.exp = (exp1!=null?exp1.exp:null); 
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // RBuilder.g:2160:17: exp2= quantified_expression
                    {
                    _last = (ColsAST)input.LT(1);
                    pushFollow(FOLLOW_quantified_expression_in_math_expression12311);
                    exp2=quantified_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, exp2.getTree());
                    if ( state.backtracking==0 ) {
                       retval.exp = (exp2!=null?exp2.exp:null); 
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }


            match(input, Token.UP, null); if (state.failed) return retval;adaptor.addChild(root_0, root_1);_last = _save_last_1;
            }


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "math_expression"

    public static class quantified_expression_return extends TreeRuleReturnScope {
        public Exp exp = null;
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "quantified_expression"
    // RBuilder.g:2165:1: quantified_expression returns [Exp exp = null] : (exp1= implies_expression | ( ^(id= FORALL vars= math_variable_declaration_group (where= where_clause )? body= quantified_expression ) | ^(id= EXISTS vars= math_variable_declaration_group (where= where_clause )? body= quantified_expression ) | ^(id= EXISTS_UNIQUE vars= math_variable_declaration_group (where= where_clause )? body= quantified_expression ) ) );
    public final RBuilder.quantified_expression_return quantified_expression() throws RecognitionException {
        RBuilder.quantified_expression_return retval = new RBuilder.quantified_expression_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        ColsAST _first_0 = null;
        ColsAST _last = null;

        ColsAST id=null;
        RBuilder.implies_expression_return exp1 = null;

        RBuilder.math_variable_declaration_group_return vars = null;

        RBuilder.where_clause_return where = null;

        RBuilder.quantified_expression_return body = null;


        ColsAST id_tree=null;


            int op = 0;

        try {
            // RBuilder.g:2169:5: (exp1= implies_expression | ( ^(id= FORALL vars= math_variable_declaration_group (where= where_clause )? body= quantified_expression ) | ^(id= EXISTS vars= math_variable_declaration_group (where= where_clause )? body= quantified_expression ) | ^(id= EXISTS_UNIQUE vars= math_variable_declaration_group (where= where_clause )? body= quantified_expression ) ) )
            int alt187=2;
            int LA187_0 = input.LA(1);

            if ( (LA187_0==AND||LA187_0==BOOLEAN||LA187_0==CARTPROD||LA187_0==COMPLEMENT||LA187_0==DIV||(LA187_0>=IF && LA187_0<=IFF)||LA187_0==IMPLIES||LA187_0==INTERSECT||(LA187_0>=IN && LA187_0<=SUBSTR)||LA187_0==LAMBDA||LA187_0==MOD||(LA187_0>=NOT && LA187_0<=CAT)||LA187_0==OR||LA187_0==REM||LA187_0==UNION||LA187_0==WITHOUT||LA187_0==IDENTIFIER||LA187_0==DOT||LA187_0==NUMERIC_LITERAL||LA187_0==CHARACTER_LITERAL||LA187_0==LBRACE||LA187_0==DBL_LBRACE||LA187_0==HASH||(LA187_0>=PLUS && LA187_0<=MINUS)||(LA187_0>=MULTIPLY && LA187_0<=GT)||LA187_0==FUNCARROW||(LA187_0>=BAR && LA187_0<=DBL_BAR)||LA187_0==STRING_LITERAL||LA187_0==FREE_OPERATOR||LA187_0==ANGLE||LA187_0==BETWEEN_EXPR||LA187_0==DBL_ANGLE||LA187_0==FUNCTION||LA187_0==ITERATION||LA187_0==NESTED||LA187_0==TUPLE||LA187_0==UNARY_MINUS||(LA187_0>=QUALNUM && LA187_0<=LOCALVAREXP)) ) {
                alt187=1;
            }
            else if ( (LA187_0==EXISTS||LA187_0==EXISTS_UNIQUE||LA187_0==FORALL) ) {
                alt187=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 187, 0, input);

                throw nvae;
            }
            switch (alt187) {
                case 1 :
                    // RBuilder.g:2169:9: exp1= implies_expression
                    {
                    root_0 = (ColsAST)adaptor.nil();

                    _last = (ColsAST)input.LT(1);
                    pushFollow(FOLLOW_implies_expression_in_quantified_expression12366);
                    exp1=implies_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, exp1.getTree());
                    if ( state.backtracking==0 ) {
                       retval.exp = (exp1!=null?exp1.exp:null); 
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // RBuilder.g:2170:9: ( ^(id= FORALL vars= math_variable_declaration_group (where= where_clause )? body= quantified_expression ) | ^(id= EXISTS vars= math_variable_declaration_group (where= where_clause )? body= quantified_expression ) | ^(id= EXISTS_UNIQUE vars= math_variable_declaration_group (where= where_clause )? body= quantified_expression ) )
                    {
                    root_0 = (ColsAST)adaptor.nil();

                    // RBuilder.g:2170:9: ( ^(id= FORALL vars= math_variable_declaration_group (where= where_clause )? body= quantified_expression ) | ^(id= EXISTS vars= math_variable_declaration_group (where= where_clause )? body= quantified_expression ) | ^(id= EXISTS_UNIQUE vars= math_variable_declaration_group (where= where_clause )? body= quantified_expression ) )
                    int alt186=3;
                    switch ( input.LA(1) ) {
                    case FORALL:
                        {
                        alt186=1;
                        }
                        break;
                    case EXISTS:
                        {
                        alt186=2;
                        }
                        break;
                    case EXISTS_UNIQUE:
                        {
                        alt186=3;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 186, 0, input);

                        throw nvae;
                    }

                    switch (alt186) {
                        case 1 :
                            // RBuilder.g:2170:13: ^(id= FORALL vars= math_variable_declaration_group (where= where_clause )? body= quantified_expression )
                            {
                            _last = (ColsAST)input.LT(1);
                            {
                            ColsAST _save_last_1 = _last;
                            ColsAST _first_1 = null;
                            ColsAST root_1 = (ColsAST)adaptor.nil();_last = (ColsAST)input.LT(1);
                            id=(ColsAST)match(input,FORALL,FOLLOW_FORALL_in_quantified_expression12387); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            id_tree = (ColsAST)adaptor.dupNode(id);

                            root_1 = (ColsAST)adaptor.becomeRoot(id_tree, root_1);
                            }


                            match(input, Token.DOWN, null); if (state.failed) return retval;
                            _last = (ColsAST)input.LT(1);
                            pushFollow(FOLLOW_math_variable_declaration_group_in_quantified_expression12391);
                            vars=math_variable_declaration_group();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) 
                            adaptor.addChild(root_1, vars.getTree());
                            // RBuilder.g:2171:17: (where= where_clause )?
                            int alt183=2;
                            int LA183_0 = input.LA(1);

                            if ( (LA183_0==WHERE) ) {
                                alt183=1;
                            }
                            switch (alt183) {
                                case 1 :
                                    // RBuilder.g:2171:18: where= where_clause
                                    {
                                    _last = (ColsAST)input.LT(1);
                                    pushFollow(FOLLOW_where_clause_in_quantified_expression12412);
                                    where=where_clause();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) 
                                    adaptor.addChild(root_1, where.getTree());

                                    if ( state.backtracking==0 ) {
                                    }
                                    }
                                    break;

                            }

                            _last = (ColsAST)input.LT(1);
                            pushFollow(FOLLOW_quantified_expression_in_quantified_expression12434);
                            body=quantified_expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) 
                            adaptor.addChild(root_1, body.getTree());

                            match(input, Token.UP, null); if (state.failed) return retval;adaptor.addChild(root_0, root_1);_last = _save_last_1;
                            }

                            if ( state.backtracking==0 ) {
                               op = QuantExp.FORALL; 
                            }

                            if ( state.backtracking==0 ) {
                            }
                            }
                            break;
                        case 2 :
                            // RBuilder.g:2174:13: ^(id= EXISTS vars= math_variable_declaration_group (where= where_clause )? body= quantified_expression )
                            {
                            _last = (ColsAST)input.LT(1);
                            {
                            ColsAST _save_last_1 = _last;
                            ColsAST _first_1 = null;
                            ColsAST root_1 = (ColsAST)adaptor.nil();_last = (ColsAST)input.LT(1);
                            id=(ColsAST)match(input,EXISTS,FOLLOW_EXISTS_in_quantified_expression12468); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            id_tree = (ColsAST)adaptor.dupNode(id);

                            root_1 = (ColsAST)adaptor.becomeRoot(id_tree, root_1);
                            }


                            match(input, Token.DOWN, null); if (state.failed) return retval;
                            _last = (ColsAST)input.LT(1);
                            pushFollow(FOLLOW_math_variable_declaration_group_in_quantified_expression12472);
                            vars=math_variable_declaration_group();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) 
                            adaptor.addChild(root_1, vars.getTree());
                            // RBuilder.g:2175:17: (where= where_clause )?
                            int alt184=2;
                            int LA184_0 = input.LA(1);

                            if ( (LA184_0==WHERE) ) {
                                alt184=1;
                            }
                            switch (alt184) {
                                case 1 :
                                    // RBuilder.g:2175:18: where= where_clause
                                    {
                                    _last = (ColsAST)input.LT(1);
                                    pushFollow(FOLLOW_where_clause_in_quantified_expression12493);
                                    where=where_clause();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) 
                                    adaptor.addChild(root_1, where.getTree());

                                    if ( state.backtracking==0 ) {
                                    }
                                    }
                                    break;

                            }

                            _last = (ColsAST)input.LT(1);
                            pushFollow(FOLLOW_quantified_expression_in_quantified_expression12515);
                            body=quantified_expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) 
                            adaptor.addChild(root_1, body.getTree());

                            match(input, Token.UP, null); if (state.failed) return retval;adaptor.addChild(root_0, root_1);_last = _save_last_1;
                            }

                            if ( state.backtracking==0 ) {
                               op = QuantExp.EXISTS; 
                            }

                            if ( state.backtracking==0 ) {
                            }
                            }
                            break;
                        case 3 :
                            // RBuilder.g:2178:13: ^(id= EXISTS_UNIQUE vars= math_variable_declaration_group (where= where_clause )? body= quantified_expression )
                            {
                            _last = (ColsAST)input.LT(1);
                            {
                            ColsAST _save_last_1 = _last;
                            ColsAST _first_1 = null;
                            ColsAST root_1 = (ColsAST)adaptor.nil();_last = (ColsAST)input.LT(1);
                            id=(ColsAST)match(input,EXISTS_UNIQUE,FOLLOW_EXISTS_UNIQUE_in_quantified_expression12549); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            id_tree = (ColsAST)adaptor.dupNode(id);

                            root_1 = (ColsAST)adaptor.becomeRoot(id_tree, root_1);
                            }


                            match(input, Token.DOWN, null); if (state.failed) return retval;
                            _last = (ColsAST)input.LT(1);
                            pushFollow(FOLLOW_math_variable_declaration_group_in_quantified_expression12553);
                            vars=math_variable_declaration_group();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) 
                            adaptor.addChild(root_1, vars.getTree());
                            // RBuilder.g:2179:17: (where= where_clause )?
                            int alt185=2;
                            int LA185_0 = input.LA(1);

                            if ( (LA185_0==WHERE) ) {
                                alt185=1;
                            }
                            switch (alt185) {
                                case 1 :
                                    // RBuilder.g:2179:18: where= where_clause
                                    {
                                    _last = (ColsAST)input.LT(1);
                                    pushFollow(FOLLOW_where_clause_in_quantified_expression12574);
                                    where=where_clause();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) 
                                    adaptor.addChild(root_1, where.getTree());

                                    if ( state.backtracking==0 ) {
                                    }
                                    }
                                    break;

                            }

                            _last = (ColsAST)input.LT(1);
                            pushFollow(FOLLOW_quantified_expression_in_quantified_expression12596);
                            body=quantified_expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) 
                            adaptor.addChild(root_1, body.getTree());

                            match(input, Token.UP, null); if (state.failed) return retval;adaptor.addChild(root_0, root_1);_last = _save_last_1;
                            }

                            if ( state.backtracking==0 ) {
                               op = QuantExp.UNIQUE; 
                            }

                            if ( state.backtracking==0 ) {
                            }
                            }
                            break;

                    }

                    if ( state.backtracking==0 ) {
                       retval.exp = new QuantExp(getLocation(id), op, (vars!=null?vars.vars:null), (where!=null?where.exp:null), (body!=null?body.exp:null)); 
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }
            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "quantified_expression"

    public static class implies_expression_return extends TreeRuleReturnScope {
        public Exp exp = null;
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "implies_expression"
    // RBuilder.g:2186:1: implies_expression returns [Exp exp = null] : (exp1= logical_expression | ( ^(id= IMPLIES lf= logical_expression rt= logical_expression ) | ^(id= IFF lf= logical_expression rt= logical_expression ) ) | ^( IF test= logical_expression then= logical_expression (other= logical_expression )? ) );
    public final RBuilder.implies_expression_return implies_expression() throws RecognitionException {
        RBuilder.implies_expression_return retval = new RBuilder.implies_expression_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        ColsAST _first_0 = null;
        ColsAST _last = null;

        ColsAST id=null;
        ColsAST IF147=null;
        RBuilder.logical_expression_return exp1 = null;

        RBuilder.logical_expression_return lf = null;

        RBuilder.logical_expression_return rt = null;

        RBuilder.logical_expression_return test = null;

        RBuilder.logical_expression_return then = null;

        RBuilder.logical_expression_return other = null;


        ColsAST id_tree=null;
        ColsAST IF147_tree=null;

        try {
            // RBuilder.g:2187:5: (exp1= logical_expression | ( ^(id= IMPLIES lf= logical_expression rt= logical_expression ) | ^(id= IFF lf= logical_expression rt= logical_expression ) ) | ^( IF test= logical_expression then= logical_expression (other= logical_expression )? ) )
            int alt190=3;
            switch ( input.LA(1) ) {
            case AND:
            case BOOLEAN:
            case CARTPROD:
            case COMPLEMENT:
            case DIV:
            case INTERSECT:
            case IN:
            case NOT_IN:
            case NOT_PROP_SUBSET:
            case NOT_SUBSET:
            case NOT_SUBSTR:
            case PROP_SUBSET:
            case SUBSET:
            case SUBSTR:
            case LAMBDA:
            case MOD:
            case NOT:
            case CAT:
            case OR:
            case REM:
            case UNION:
            case WITHOUT:
            case IDENTIFIER:
            case DOT:
            case NUMERIC_LITERAL:
            case CHARACTER_LITERAL:
            case LBRACE:
            case DBL_LBRACE:
            case HASH:
            case PLUS:
            case MINUS:
            case MULTIPLY:
            case DIVIDE:
            case EXP:
            case RANGE:
            case NOT_EQL:
            case GT_EQL:
            case LT_EQL:
            case EQL:
            case LT:
            case GT:
            case FUNCARROW:
            case BAR:
            case DBL_BAR:
            case STRING_LITERAL:
            case FREE_OPERATOR:
            case ANGLE:
            case BETWEEN_EXPR:
            case DBL_ANGLE:
            case FUNCTION:
            case ITERATION:
            case NESTED:
            case TUPLE:
            case UNARY_MINUS:
            case QUALNUM:
            case LOCALVAREXP:
                {
                alt190=1;
                }
                break;
            case IFF:
            case IMPLIES:
                {
                alt190=2;
                }
                break;
            case IF:
                {
                alt190=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 190, 0, input);

                throw nvae;
            }

            switch (alt190) {
                case 1 :
                    // RBuilder.g:2187:9: exp1= logical_expression
                    {
                    root_0 = (ColsAST)adaptor.nil();

                    _last = (ColsAST)input.LT(1);
                    pushFollow(FOLLOW_logical_expression_in_implies_expression12656);
                    exp1=logical_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, exp1.getTree());
                    if ( state.backtracking==0 ) {
                       retval.exp = (exp1!=null?exp1.exp:null); 
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // RBuilder.g:2188:9: ( ^(id= IMPLIES lf= logical_expression rt= logical_expression ) | ^(id= IFF lf= logical_expression rt= logical_expression ) )
                    {
                    root_0 = (ColsAST)adaptor.nil();

                    // RBuilder.g:2188:9: ( ^(id= IMPLIES lf= logical_expression rt= logical_expression ) | ^(id= IFF lf= logical_expression rt= logical_expression ) )
                    int alt188=2;
                    int LA188_0 = input.LA(1);

                    if ( (LA188_0==IMPLIES) ) {
                        alt188=1;
                    }
                    else if ( (LA188_0==IFF) ) {
                        alt188=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 188, 0, input);

                        throw nvae;
                    }
                    switch (alt188) {
                        case 1 :
                            // RBuilder.g:2188:13: ^(id= IMPLIES lf= logical_expression rt= logical_expression )
                            {
                            _last = (ColsAST)input.LT(1);
                            {
                            ColsAST _save_last_1 = _last;
                            ColsAST _first_1 = null;
                            ColsAST root_1 = (ColsAST)adaptor.nil();_last = (ColsAST)input.LT(1);
                            id=(ColsAST)match(input,IMPLIES,FOLLOW_IMPLIES_in_implies_expression12675); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            id_tree = (ColsAST)adaptor.dupNode(id);

                            root_1 = (ColsAST)adaptor.becomeRoot(id_tree, root_1);
                            }


                            match(input, Token.DOWN, null); if (state.failed) return retval;
                            _last = (ColsAST)input.LT(1);
                            pushFollow(FOLLOW_logical_expression_in_implies_expression12679);
                            lf=logical_expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) 
                            adaptor.addChild(root_1, lf.getTree());
                            _last = (ColsAST)input.LT(1);
                            pushFollow(FOLLOW_logical_expression_in_implies_expression12683);
                            rt=logical_expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) 
                            adaptor.addChild(root_1, rt.getTree());

                            match(input, Token.UP, null); if (state.failed) return retval;adaptor.addChild(root_0, root_1);_last = _save_last_1;
                            }


                            if ( state.backtracking==0 ) {
                            }
                            }
                            break;
                        case 2 :
                            // RBuilder.g:2189:13: ^(id= IFF lf= logical_expression rt= logical_expression )
                            {
                            _last = (ColsAST)input.LT(1);
                            {
                            ColsAST _save_last_1 = _last;
                            ColsAST _first_1 = null;
                            ColsAST root_1 = (ColsAST)adaptor.nil();_last = (ColsAST)input.LT(1);
                            id=(ColsAST)match(input,IFF,FOLLOW_IFF_in_implies_expression12701); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            id_tree = (ColsAST)adaptor.dupNode(id);

                            root_1 = (ColsAST)adaptor.becomeRoot(id_tree, root_1);
                            }


                            match(input, Token.DOWN, null); if (state.failed) return retval;
                            _last = (ColsAST)input.LT(1);
                            pushFollow(FOLLOW_logical_expression_in_implies_expression12705);
                            lf=logical_expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) 
                            adaptor.addChild(root_1, lf.getTree());
                            _last = (ColsAST)input.LT(1);
                            pushFollow(FOLLOW_logical_expression_in_implies_expression12709);
                            rt=logical_expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) 
                            adaptor.addChild(root_1, rt.getTree());

                            match(input, Token.UP, null); if (state.failed) return retval;adaptor.addChild(root_0, root_1);_last = _save_last_1;
                            }


                            if ( state.backtracking==0 ) {
                            }
                            }
                            break;

                    }

                    if ( state.backtracking==0 ) {

                                  BooleanType b = BooleanType.INSTANCE;
                                  retval.exp = new InfixExp(getLocation(id), (lf!=null?lf.exp:null), getPosSymbol(id), (rt!=null?rt.exp:null), b);
                              
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 3 :
                    // RBuilder.g:2195:9: ^( IF test= logical_expression then= logical_expression (other= logical_expression )? )
                    {
                    root_0 = (ColsAST)adaptor.nil();

                    _last = (ColsAST)input.LT(1);
                    {
                    ColsAST _save_last_1 = _last;
                    ColsAST _first_1 = null;
                    ColsAST root_1 = (ColsAST)adaptor.nil();_last = (ColsAST)input.LT(1);
                    IF147=(ColsAST)match(input,IF,FOLLOW_IF_in_implies_expression12743); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    IF147_tree = (ColsAST)adaptor.dupNode(IF147);

                    root_1 = (ColsAST)adaptor.becomeRoot(IF147_tree, root_1);
                    }


                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    _last = (ColsAST)input.LT(1);
                    pushFollow(FOLLOW_logical_expression_in_implies_expression12747);
                    test=logical_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, test.getTree());
                    _last = (ColsAST)input.LT(1);
                    pushFollow(FOLLOW_logical_expression_in_implies_expression12751);
                    then=logical_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, then.getTree());
                    // RBuilder.g:2196:13: (other= logical_expression )?
                    int alt189=2;
                    int LA189_0 = input.LA(1);

                    if ( (LA189_0==AND||LA189_0==BOOLEAN||LA189_0==CARTPROD||LA189_0==COMPLEMENT||LA189_0==DIV||LA189_0==INTERSECT||(LA189_0>=IN && LA189_0<=SUBSTR)||LA189_0==LAMBDA||LA189_0==MOD||(LA189_0>=NOT && LA189_0<=CAT)||LA189_0==OR||LA189_0==REM||LA189_0==UNION||LA189_0==WITHOUT||LA189_0==IDENTIFIER||LA189_0==DOT||LA189_0==NUMERIC_LITERAL||LA189_0==CHARACTER_LITERAL||LA189_0==LBRACE||LA189_0==DBL_LBRACE||LA189_0==HASH||(LA189_0>=PLUS && LA189_0<=MINUS)||(LA189_0>=MULTIPLY && LA189_0<=GT)||LA189_0==FUNCARROW||(LA189_0>=BAR && LA189_0<=DBL_BAR)||LA189_0==STRING_LITERAL||LA189_0==FREE_OPERATOR||LA189_0==ANGLE||LA189_0==BETWEEN_EXPR||LA189_0==DBL_ANGLE||LA189_0==FUNCTION||LA189_0==ITERATION||LA189_0==NESTED||LA189_0==TUPLE||LA189_0==UNARY_MINUS||(LA189_0>=QUALNUM && LA189_0<=LOCALVAREXP)) ) {
                        alt189=1;
                    }
                    switch (alt189) {
                        case 1 :
                            // RBuilder.g:2196:14: other= logical_expression
                            {
                            _last = (ColsAST)input.LT(1);
                            pushFollow(FOLLOW_logical_expression_in_implies_expression12768);
                            other=logical_expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) 
                            adaptor.addChild(root_1, other.getTree());

                            if ( state.backtracking==0 ) {
                            }
                            }
                            break;

                    }


                    match(input, Token.UP, null); if (state.failed) return retval;adaptor.addChild(root_0, root_1);_last = _save_last_1;
                    }

                    if ( state.backtracking==0 ) {
                       retval.exp = new IfExp(getLocation(IF147), (test!=null?test.exp:null), (then!=null?then.exp:null), (other!=null?other.exp:null)); 
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }
            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "implies_expression"

    public static class logical_expression_return extends TreeRuleReturnScope {
        public Exp exp = null;
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "logical_expression"
    // RBuilder.g:2201:1: logical_expression returns [Exp exp = null] : (exp1= relational_expression | ( ^(id= AND lf= logical_expression rt= relational_expression ) | ^(id= OR lf= logical_expression rt= relational_expression ) ) );
    public final RBuilder.logical_expression_return logical_expression() throws RecognitionException {
        RBuilder.logical_expression_return retval = new RBuilder.logical_expression_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        ColsAST _first_0 = null;
        ColsAST _last = null;

        ColsAST id=null;
        RBuilder.relational_expression_return exp1 = null;

        RBuilder.logical_expression_return lf = null;

        RBuilder.relational_expression_return rt = null;


        ColsAST id_tree=null;

        try {
            // RBuilder.g:2202:5: (exp1= relational_expression | ( ^(id= AND lf= logical_expression rt= relational_expression ) | ^(id= OR lf= logical_expression rt= relational_expression ) ) )
            int alt192=2;
            int LA192_0 = input.LA(1);

            if ( (LA192_0==BOOLEAN||LA192_0==CARTPROD||LA192_0==COMPLEMENT||LA192_0==DIV||LA192_0==INTERSECT||(LA192_0>=IN && LA192_0<=SUBSTR)||LA192_0==LAMBDA||LA192_0==MOD||(LA192_0>=NOT && LA192_0<=CAT)||LA192_0==REM||LA192_0==UNION||LA192_0==WITHOUT||LA192_0==IDENTIFIER||LA192_0==DOT||LA192_0==NUMERIC_LITERAL||LA192_0==CHARACTER_LITERAL||LA192_0==LBRACE||LA192_0==DBL_LBRACE||LA192_0==HASH||(LA192_0>=PLUS && LA192_0<=MINUS)||(LA192_0>=MULTIPLY && LA192_0<=GT)||LA192_0==FUNCARROW||(LA192_0>=BAR && LA192_0<=DBL_BAR)||LA192_0==STRING_LITERAL||LA192_0==FREE_OPERATOR||LA192_0==ANGLE||LA192_0==BETWEEN_EXPR||LA192_0==DBL_ANGLE||LA192_0==FUNCTION||LA192_0==ITERATION||LA192_0==NESTED||LA192_0==TUPLE||LA192_0==UNARY_MINUS||(LA192_0>=QUALNUM && LA192_0<=LOCALVAREXP)) ) {
                alt192=1;
            }
            else if ( (LA192_0==AND||LA192_0==OR) ) {
                alt192=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 192, 0, input);

                throw nvae;
            }
            switch (alt192) {
                case 1 :
                    // RBuilder.g:2202:9: exp1= relational_expression
                    {
                    root_0 = (ColsAST)adaptor.nil();

                    _last = (ColsAST)input.LT(1);
                    pushFollow(FOLLOW_relational_expression_in_logical_expression12815);
                    exp1=relational_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, exp1.getTree());
                    if ( state.backtracking==0 ) {
                       retval.exp = (exp1!=null?exp1.exp:null); 
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // RBuilder.g:2203:9: ( ^(id= AND lf= logical_expression rt= relational_expression ) | ^(id= OR lf= logical_expression rt= relational_expression ) )
                    {
                    root_0 = (ColsAST)adaptor.nil();

                    // RBuilder.g:2203:9: ( ^(id= AND lf= logical_expression rt= relational_expression ) | ^(id= OR lf= logical_expression rt= relational_expression ) )
                    int alt191=2;
                    int LA191_0 = input.LA(1);

                    if ( (LA191_0==AND) ) {
                        alt191=1;
                    }
                    else if ( (LA191_0==OR) ) {
                        alt191=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 191, 0, input);

                        throw nvae;
                    }
                    switch (alt191) {
                        case 1 :
                            // RBuilder.g:2203:13: ^(id= AND lf= logical_expression rt= relational_expression )
                            {
                            _last = (ColsAST)input.LT(1);
                            {
                            ColsAST _save_last_1 = _last;
                            ColsAST _first_1 = null;
                            ColsAST root_1 = (ColsAST)adaptor.nil();_last = (ColsAST)input.LT(1);
                            id=(ColsAST)match(input,AND,FOLLOW_AND_in_logical_expression12834); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            id_tree = (ColsAST)adaptor.dupNode(id);

                            root_1 = (ColsAST)adaptor.becomeRoot(id_tree, root_1);
                            }


                            match(input, Token.DOWN, null); if (state.failed) return retval;
                            _last = (ColsAST)input.LT(1);
                            pushFollow(FOLLOW_logical_expression_in_logical_expression12838);
                            lf=logical_expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) 
                            adaptor.addChild(root_1, lf.getTree());
                            _last = (ColsAST)input.LT(1);
                            pushFollow(FOLLOW_relational_expression_in_logical_expression12842);
                            rt=relational_expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) 
                            adaptor.addChild(root_1, rt.getTree());

                            match(input, Token.UP, null); if (state.failed) return retval;adaptor.addChild(root_0, root_1);_last = _save_last_1;
                            }


                            if ( state.backtracking==0 ) {
                            }
                            }
                            break;
                        case 2 :
                            // RBuilder.g:2204:13: ^(id= OR lf= logical_expression rt= relational_expression )
                            {
                            _last = (ColsAST)input.LT(1);
                            {
                            ColsAST _save_last_1 = _last;
                            ColsAST _first_1 = null;
                            ColsAST root_1 = (ColsAST)adaptor.nil();_last = (ColsAST)input.LT(1);
                            id=(ColsAST)match(input,OR,FOLLOW_OR_in_logical_expression12860); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            id_tree = (ColsAST)adaptor.dupNode(id);

                            root_1 = (ColsAST)adaptor.becomeRoot(id_tree, root_1);
                            }


                            match(input, Token.DOWN, null); if (state.failed) return retval;
                            _last = (ColsAST)input.LT(1);
                            pushFollow(FOLLOW_logical_expression_in_logical_expression12864);
                            lf=logical_expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) 
                            adaptor.addChild(root_1, lf.getTree());
                            _last = (ColsAST)input.LT(1);
                            pushFollow(FOLLOW_relational_expression_in_logical_expression12868);
                            rt=relational_expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) 
                            adaptor.addChild(root_1, rt.getTree());

                            match(input, Token.UP, null); if (state.failed) return retval;adaptor.addChild(root_0, root_1);_last = _save_last_1;
                            }


                            if ( state.backtracking==0 ) {
                            }
                            }
                            break;

                    }

                    if ( state.backtracking==0 ) {

                                  BooleanType b = BooleanType.INSTANCE;
                                  retval.exp = new InfixExp(getLocation(id), (lf!=null?lf.exp:null), getPosSymbol(id), (rt!=null?rt.exp:null), b);
                              
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }
            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "logical_expression"

    public static class relational_expression_return extends TreeRuleReturnScope {
        public Exp exp = null;
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "relational_expression"
    // RBuilder.g:2213:1: relational_expression returns [Exp exp = null] : (exp1= infix_expression | exp2= between_expression | ( ^(id= EQL lf= infix_expression rt= infix_expression ) | ^(id= NOT_EQL lf= infix_expression rt= infix_expression ) ) | ( ^(id= LT lf= infix_expression rt= infix_expression ) | ^(id= LT_EQL lf= infix_expression rt= infix_expression ) | ^(id= GT lf= infix_expression rt= infix_expression ) | ^(id= GT_EQL lf= infix_expression rt= infix_expression ) | ^(id= SUBSET lf= infix_expression rt= infix_expression ) | ^(id= NOT_SUBSET lf= infix_expression rt= infix_expression ) | ^(id= PROP_SUBSET lf= infix_expression rt= infix_expression ) | ^(id= NOT_PROP_SUBSET lf= infix_expression rt= infix_expression ) | ^(id= SUBSTR lf= infix_expression rt= infix_expression ) | ^(id= NOT_SUBSTR lf= infix_expression rt= infix_expression ) ) | ( ^(id= IN lf= infix_expression rt= infix_expression ) | ^(id= NOT_IN lf= infix_expression rt= infix_expression ) ) );
    public final RBuilder.relational_expression_return relational_expression() throws RecognitionException {
        RBuilder.relational_expression_return retval = new RBuilder.relational_expression_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        ColsAST _first_0 = null;
        ColsAST _last = null;

        ColsAST id=null;
        RBuilder.infix_expression_return exp1 = null;

        RBuilder.between_expression_return exp2 = null;

        RBuilder.infix_expression_return lf = null;

        RBuilder.infix_expression_return rt = null;


        ColsAST id_tree=null;

           //edu.clemson.cs.r2jt.collections.List<Exp> lss = new edu.clemson.cs.r2jt.collections.List<Exp>("Exp");
            int op = 0;

        try {
            // RBuilder.g:2217:5: (exp1= infix_expression | exp2= between_expression | ( ^(id= EQL lf= infix_expression rt= infix_expression ) | ^(id= NOT_EQL lf= infix_expression rt= infix_expression ) ) | ( ^(id= LT lf= infix_expression rt= infix_expression ) | ^(id= LT_EQL lf= infix_expression rt= infix_expression ) | ^(id= GT lf= infix_expression rt= infix_expression ) | ^(id= GT_EQL lf= infix_expression rt= infix_expression ) | ^(id= SUBSET lf= infix_expression rt= infix_expression ) | ^(id= NOT_SUBSET lf= infix_expression rt= infix_expression ) | ^(id= PROP_SUBSET lf= infix_expression rt= infix_expression ) | ^(id= NOT_PROP_SUBSET lf= infix_expression rt= infix_expression ) | ^(id= SUBSTR lf= infix_expression rt= infix_expression ) | ^(id= NOT_SUBSTR lf= infix_expression rt= infix_expression ) ) | ( ^(id= IN lf= infix_expression rt= infix_expression ) | ^(id= NOT_IN lf= infix_expression rt= infix_expression ) ) )
            int alt196=5;
            switch ( input.LA(1) ) {
            case BOOLEAN:
            case CARTPROD:
            case COMPLEMENT:
            case DIV:
            case INTERSECT:
            case LAMBDA:
            case MOD:
            case NOT:
            case CAT:
            case REM:
            case UNION:
            case WITHOUT:
            case IDENTIFIER:
            case DOT:
            case NUMERIC_LITERAL:
            case CHARACTER_LITERAL:
            case LBRACE:
            case DBL_LBRACE:
            case HASH:
            case PLUS:
            case MINUS:
            case MULTIPLY:
            case DIVIDE:
            case EXP:
            case RANGE:
            case FUNCARROW:
            case BAR:
            case DBL_BAR:
            case STRING_LITERAL:
            case FREE_OPERATOR:
            case ANGLE:
            case DBL_ANGLE:
            case FUNCTION:
            case ITERATION:
            case NESTED:
            case TUPLE:
            case UNARY_MINUS:
            case QUALNUM:
            case LOCALVAREXP:
                {
                alt196=1;
                }
                break;
            case BETWEEN_EXPR:
                {
                alt196=2;
                }
                break;
            case NOT_EQL:
            case EQL:
                {
                alt196=3;
                }
                break;
            case NOT_PROP_SUBSET:
            case NOT_SUBSET:
            case NOT_SUBSTR:
            case PROP_SUBSET:
            case SUBSET:
            case SUBSTR:
            case GT_EQL:
            case LT_EQL:
            case LT:
            case GT:
                {
                alt196=4;
                }
                break;
            case IN:
            case NOT_IN:
                {
                alt196=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 196, 0, input);

                throw nvae;
            }

            switch (alt196) {
                case 1 :
                    // RBuilder.g:2217:9: exp1= infix_expression
                    {
                    root_0 = (ColsAST)adaptor.nil();

                    _last = (ColsAST)input.LT(1);
                    pushFollow(FOLLOW_infix_expression_in_relational_expression12928);
                    exp1=infix_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, exp1.getTree());
                    if ( state.backtracking==0 ) {
                       retval.exp = (exp1!=null?exp1.exp:null); 
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // RBuilder.g:2218:9: exp2= between_expression
                    {
                    root_0 = (ColsAST)adaptor.nil();

                    _last = (ColsAST)input.LT(1);
                    pushFollow(FOLLOW_between_expression_in_relational_expression12942);
                    exp2=between_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, exp2.getTree());
                    if ( state.backtracking==0 ) {
                       retval.exp = (exp2!=null?exp2.exp:null); 
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 3 :
                    // RBuilder.g:2221:9: ( ^(id= EQL lf= infix_expression rt= infix_expression ) | ^(id= NOT_EQL lf= infix_expression rt= infix_expression ) )
                    {
                    root_0 = (ColsAST)adaptor.nil();

                    // RBuilder.g:2221:9: ( ^(id= EQL lf= infix_expression rt= infix_expression ) | ^(id= NOT_EQL lf= infix_expression rt= infix_expression ) )
                    int alt193=2;
                    int LA193_0 = input.LA(1);

                    if ( (LA193_0==EQL) ) {
                        alt193=1;
                    }
                    else if ( (LA193_0==NOT_EQL) ) {
                        alt193=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 193, 0, input);

                        throw nvae;
                    }
                    switch (alt193) {
                        case 1 :
                            // RBuilder.g:2221:13: ^(id= EQL lf= infix_expression rt= infix_expression )
                            {
                            _last = (ColsAST)input.LT(1);
                            {
                            ColsAST _save_last_1 = _last;
                            ColsAST _first_1 = null;
                            ColsAST root_1 = (ColsAST)adaptor.nil();_last = (ColsAST)input.LT(1);
                            id=(ColsAST)match(input,EQL,FOLLOW_EQL_in_relational_expression12981); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            id_tree = (ColsAST)adaptor.dupNode(id);

                            root_1 = (ColsAST)adaptor.becomeRoot(id_tree, root_1);
                            }


                            match(input, Token.DOWN, null); if (state.failed) return retval;
                            _last = (ColsAST)input.LT(1);
                            pushFollow(FOLLOW_infix_expression_in_relational_expression12985);
                            lf=infix_expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) 
                            adaptor.addChild(root_1, lf.getTree());
                            _last = (ColsAST)input.LT(1);
                            pushFollow(FOLLOW_infix_expression_in_relational_expression12989);
                            rt=infix_expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) 
                            adaptor.addChild(root_1, rt.getTree());

                            match(input, Token.UP, null); if (state.failed) return retval;adaptor.addChild(root_0, root_1);_last = _save_last_1;
                            }

                            if ( state.backtracking==0 ) {
                               op = EqualsExp.EQUAL; 
                            }

                            if ( state.backtracking==0 ) {
                            }
                            }
                            break;
                        case 2 :
                            // RBuilder.g:2223:13: ^(id= NOT_EQL lf= infix_expression rt= infix_expression )
                            {
                            _last = (ColsAST)input.LT(1);
                            {
                            ColsAST _save_last_1 = _last;
                            ColsAST _first_1 = null;
                            ColsAST root_1 = (ColsAST)adaptor.nil();_last = (ColsAST)input.LT(1);
                            id=(ColsAST)match(input,NOT_EQL,FOLLOW_NOT_EQL_in_relational_expression13021); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            id_tree = (ColsAST)adaptor.dupNode(id);

                            root_1 = (ColsAST)adaptor.becomeRoot(id_tree, root_1);
                            }


                            match(input, Token.DOWN, null); if (state.failed) return retval;
                            _last = (ColsAST)input.LT(1);
                            pushFollow(FOLLOW_infix_expression_in_relational_expression13025);
                            lf=infix_expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) 
                            adaptor.addChild(root_1, lf.getTree());
                            _last = (ColsAST)input.LT(1);
                            pushFollow(FOLLOW_infix_expression_in_relational_expression13029);
                            rt=infix_expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) 
                            adaptor.addChild(root_1, rt.getTree());

                            match(input, Token.UP, null); if (state.failed) return retval;adaptor.addChild(root_0, root_1);_last = _save_last_1;
                            }

                            if ( state.backtracking==0 ) {
                               op = EqualsExp.NOT_EQUAL; 
                            }

                            if ( state.backtracking==0 ) {
                            }
                            }
                            break;

                    }

                    if ( state.backtracking==0 ) {
                       retval.exp = new EqualsExp(getLocation(id), (lf!=null?lf.exp:null), op, (rt!=null?rt.exp:null)); 
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 4 :
                    // RBuilder.g:2227:9: ( ^(id= LT lf= infix_expression rt= infix_expression ) | ^(id= LT_EQL lf= infix_expression rt= infix_expression ) | ^(id= GT lf= infix_expression rt= infix_expression ) | ^(id= GT_EQL lf= infix_expression rt= infix_expression ) | ^(id= SUBSET lf= infix_expression rt= infix_expression ) | ^(id= NOT_SUBSET lf= infix_expression rt= infix_expression ) | ^(id= PROP_SUBSET lf= infix_expression rt= infix_expression ) | ^(id= NOT_PROP_SUBSET lf= infix_expression rt= infix_expression ) | ^(id= SUBSTR lf= infix_expression rt= infix_expression ) | ^(id= NOT_SUBSTR lf= infix_expression rt= infix_expression ) )
                    {
                    root_0 = (ColsAST)adaptor.nil();

                    // RBuilder.g:2227:9: ( ^(id= LT lf= infix_expression rt= infix_expression ) | ^(id= LT_EQL lf= infix_expression rt= infix_expression ) | ^(id= GT lf= infix_expression rt= infix_expression ) | ^(id= GT_EQL lf= infix_expression rt= infix_expression ) | ^(id= SUBSET lf= infix_expression rt= infix_expression ) | ^(id= NOT_SUBSET lf= infix_expression rt= infix_expression ) | ^(id= PROP_SUBSET lf= infix_expression rt= infix_expression ) | ^(id= NOT_PROP_SUBSET lf= infix_expression rt= infix_expression ) | ^(id= SUBSTR lf= infix_expression rt= infix_expression ) | ^(id= NOT_SUBSTR lf= infix_expression rt= infix_expression ) )
                    int alt194=10;
                    alt194 = dfa194.predict(input);
                    switch (alt194) {
                        case 1 :
                            // RBuilder.g:2227:13: ^(id= LT lf= infix_expression rt= infix_expression )
                            {
                            _last = (ColsAST)input.LT(1);
                            {
                            ColsAST _save_last_1 = _last;
                            ColsAST _first_1 = null;
                            ColsAST root_1 = (ColsAST)adaptor.nil();_last = (ColsAST)input.LT(1);
                            id=(ColsAST)match(input,LT,FOLLOW_LT_in_relational_expression13082); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            id_tree = (ColsAST)adaptor.dupNode(id);

                            root_1 = (ColsAST)adaptor.becomeRoot(id_tree, root_1);
                            }


                            match(input, Token.DOWN, null); if (state.failed) return retval;
                            _last = (ColsAST)input.LT(1);
                            pushFollow(FOLLOW_infix_expression_in_relational_expression13086);
                            lf=infix_expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) 
                            adaptor.addChild(root_1, lf.getTree());
                            _last = (ColsAST)input.LT(1);
                            pushFollow(FOLLOW_infix_expression_in_relational_expression13090);
                            rt=infix_expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) 
                            adaptor.addChild(root_1, rt.getTree());

                            match(input, Token.UP, null); if (state.failed) return retval;adaptor.addChild(root_0, root_1);_last = _save_last_1;
                            }


                            if ( state.backtracking==0 ) {
                            }
                            }
                            break;
                        case 2 :
                            // RBuilder.g:2228:13: ^(id= LT_EQL lf= infix_expression rt= infix_expression )
                            {
                            _last = (ColsAST)input.LT(1);
                            {
                            ColsAST _save_last_1 = _last;
                            ColsAST _first_1 = null;
                            ColsAST root_1 = (ColsAST)adaptor.nil();_last = (ColsAST)input.LT(1);
                            id=(ColsAST)match(input,LT_EQL,FOLLOW_LT_EQL_in_relational_expression13108); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            id_tree = (ColsAST)adaptor.dupNode(id);

                            root_1 = (ColsAST)adaptor.becomeRoot(id_tree, root_1);
                            }


                            match(input, Token.DOWN, null); if (state.failed) return retval;
                            _last = (ColsAST)input.LT(1);
                            pushFollow(FOLLOW_infix_expression_in_relational_expression13112);
                            lf=infix_expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) 
                            adaptor.addChild(root_1, lf.getTree());
                            _last = (ColsAST)input.LT(1);
                            pushFollow(FOLLOW_infix_expression_in_relational_expression13116);
                            rt=infix_expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) 
                            adaptor.addChild(root_1, rt.getTree());

                            match(input, Token.UP, null); if (state.failed) return retval;adaptor.addChild(root_0, root_1);_last = _save_last_1;
                            }


                            if ( state.backtracking==0 ) {
                            }
                            }
                            break;
                        case 3 :
                            // RBuilder.g:2229:13: ^(id= GT lf= infix_expression rt= infix_expression )
                            {
                            _last = (ColsAST)input.LT(1);
                            {
                            ColsAST _save_last_1 = _last;
                            ColsAST _first_1 = null;
                            ColsAST root_1 = (ColsAST)adaptor.nil();_last = (ColsAST)input.LT(1);
                            id=(ColsAST)match(input,GT,FOLLOW_GT_in_relational_expression13134); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            id_tree = (ColsAST)adaptor.dupNode(id);

                            root_1 = (ColsAST)adaptor.becomeRoot(id_tree, root_1);
                            }


                            match(input, Token.DOWN, null); if (state.failed) return retval;
                            _last = (ColsAST)input.LT(1);
                            pushFollow(FOLLOW_infix_expression_in_relational_expression13138);
                            lf=infix_expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) 
                            adaptor.addChild(root_1, lf.getTree());
                            _last = (ColsAST)input.LT(1);
                            pushFollow(FOLLOW_infix_expression_in_relational_expression13142);
                            rt=infix_expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) 
                            adaptor.addChild(root_1, rt.getTree());

                            match(input, Token.UP, null); if (state.failed) return retval;adaptor.addChild(root_0, root_1);_last = _save_last_1;
                            }


                            if ( state.backtracking==0 ) {
                            }
                            }
                            break;
                        case 4 :
                            // RBuilder.g:2230:13: ^(id= GT_EQL lf= infix_expression rt= infix_expression )
                            {
                            _last = (ColsAST)input.LT(1);
                            {
                            ColsAST _save_last_1 = _last;
                            ColsAST _first_1 = null;
                            ColsAST root_1 = (ColsAST)adaptor.nil();_last = (ColsAST)input.LT(1);
                            id=(ColsAST)match(input,GT_EQL,FOLLOW_GT_EQL_in_relational_expression13160); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            id_tree = (ColsAST)adaptor.dupNode(id);

                            root_1 = (ColsAST)adaptor.becomeRoot(id_tree, root_1);
                            }


                            match(input, Token.DOWN, null); if (state.failed) return retval;
                            _last = (ColsAST)input.LT(1);
                            pushFollow(FOLLOW_infix_expression_in_relational_expression13164);
                            lf=infix_expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) 
                            adaptor.addChild(root_1, lf.getTree());
                            _last = (ColsAST)input.LT(1);
                            pushFollow(FOLLOW_infix_expression_in_relational_expression13168);
                            rt=infix_expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) 
                            adaptor.addChild(root_1, rt.getTree());

                            match(input, Token.UP, null); if (state.failed) return retval;adaptor.addChild(root_0, root_1);_last = _save_last_1;
                            }


                            if ( state.backtracking==0 ) {
                            }
                            }
                            break;
                        case 5 :
                            // RBuilder.g:2233:13: ^(id= SUBSET lf= infix_expression rt= infix_expression )
                            {
                            _last = (ColsAST)input.LT(1);
                            {
                            ColsAST _save_last_1 = _last;
                            ColsAST _first_1 = null;
                            ColsAST root_1 = (ColsAST)adaptor.nil();_last = (ColsAST)input.LT(1);
                            id=(ColsAST)match(input,SUBSET,FOLLOW_SUBSET_in_relational_expression13204); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            id_tree = (ColsAST)adaptor.dupNode(id);

                            root_1 = (ColsAST)adaptor.becomeRoot(id_tree, root_1);
                            }


                            match(input, Token.DOWN, null); if (state.failed) return retval;
                            _last = (ColsAST)input.LT(1);
                            pushFollow(FOLLOW_infix_expression_in_relational_expression13208);
                            lf=infix_expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) 
                            adaptor.addChild(root_1, lf.getTree());
                            _last = (ColsAST)input.LT(1);
                            pushFollow(FOLLOW_infix_expression_in_relational_expression13212);
                            rt=infix_expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) 
                            adaptor.addChild(root_1, rt.getTree());

                            match(input, Token.UP, null); if (state.failed) return retval;adaptor.addChild(root_0, root_1);_last = _save_last_1;
                            }


                            if ( state.backtracking==0 ) {
                            }
                            }
                            break;
                        case 6 :
                            // RBuilder.g:2234:13: ^(id= NOT_SUBSET lf= infix_expression rt= infix_expression )
                            {
                            _last = (ColsAST)input.LT(1);
                            {
                            ColsAST _save_last_1 = _last;
                            ColsAST _first_1 = null;
                            ColsAST root_1 = (ColsAST)adaptor.nil();_last = (ColsAST)input.LT(1);
                            id=(ColsAST)match(input,NOT_SUBSET,FOLLOW_NOT_SUBSET_in_relational_expression13230); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            id_tree = (ColsAST)adaptor.dupNode(id);

                            root_1 = (ColsAST)adaptor.becomeRoot(id_tree, root_1);
                            }


                            match(input, Token.DOWN, null); if (state.failed) return retval;
                            _last = (ColsAST)input.LT(1);
                            pushFollow(FOLLOW_infix_expression_in_relational_expression13234);
                            lf=infix_expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) 
                            adaptor.addChild(root_1, lf.getTree());
                            _last = (ColsAST)input.LT(1);
                            pushFollow(FOLLOW_infix_expression_in_relational_expression13238);
                            rt=infix_expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) 
                            adaptor.addChild(root_1, rt.getTree());

                            match(input, Token.UP, null); if (state.failed) return retval;adaptor.addChild(root_0, root_1);_last = _save_last_1;
                            }


                            if ( state.backtracking==0 ) {
                            }
                            }
                            break;
                        case 7 :
                            // RBuilder.g:2235:13: ^(id= PROP_SUBSET lf= infix_expression rt= infix_expression )
                            {
                            _last = (ColsAST)input.LT(1);
                            {
                            ColsAST _save_last_1 = _last;
                            ColsAST _first_1 = null;
                            ColsAST root_1 = (ColsAST)adaptor.nil();_last = (ColsAST)input.LT(1);
                            id=(ColsAST)match(input,PROP_SUBSET,FOLLOW_PROP_SUBSET_in_relational_expression13256); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            id_tree = (ColsAST)adaptor.dupNode(id);

                            root_1 = (ColsAST)adaptor.becomeRoot(id_tree, root_1);
                            }


                            match(input, Token.DOWN, null); if (state.failed) return retval;
                            _last = (ColsAST)input.LT(1);
                            pushFollow(FOLLOW_infix_expression_in_relational_expression13260);
                            lf=infix_expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) 
                            adaptor.addChild(root_1, lf.getTree());
                            _last = (ColsAST)input.LT(1);
                            pushFollow(FOLLOW_infix_expression_in_relational_expression13264);
                            rt=infix_expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) 
                            adaptor.addChild(root_1, rt.getTree());

                            match(input, Token.UP, null); if (state.failed) return retval;adaptor.addChild(root_0, root_1);_last = _save_last_1;
                            }


                            if ( state.backtracking==0 ) {
                            }
                            }
                            break;
                        case 8 :
                            // RBuilder.g:2236:13: ^(id= NOT_PROP_SUBSET lf= infix_expression rt= infix_expression )
                            {
                            _last = (ColsAST)input.LT(1);
                            {
                            ColsAST _save_last_1 = _last;
                            ColsAST _first_1 = null;
                            ColsAST root_1 = (ColsAST)adaptor.nil();_last = (ColsAST)input.LT(1);
                            id=(ColsAST)match(input,NOT_PROP_SUBSET,FOLLOW_NOT_PROP_SUBSET_in_relational_expression13282); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            id_tree = (ColsAST)adaptor.dupNode(id);

                            root_1 = (ColsAST)adaptor.becomeRoot(id_tree, root_1);
                            }


                            match(input, Token.DOWN, null); if (state.failed) return retval;
                            _last = (ColsAST)input.LT(1);
                            pushFollow(FOLLOW_infix_expression_in_relational_expression13286);
                            lf=infix_expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) 
                            adaptor.addChild(root_1, lf.getTree());
                            _last = (ColsAST)input.LT(1);
                            pushFollow(FOLLOW_infix_expression_in_relational_expression13290);
                            rt=infix_expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) 
                            adaptor.addChild(root_1, rt.getTree());

                            match(input, Token.UP, null); if (state.failed) return retval;adaptor.addChild(root_0, root_1);_last = _save_last_1;
                            }


                            if ( state.backtracking==0 ) {
                            }
                            }
                            break;
                        case 9 :
                            // RBuilder.g:2237:13: ^(id= SUBSTR lf= infix_expression rt= infix_expression )
                            {
                            _last = (ColsAST)input.LT(1);
                            {
                            ColsAST _save_last_1 = _last;
                            ColsAST _first_1 = null;
                            ColsAST root_1 = (ColsAST)adaptor.nil();_last = (ColsAST)input.LT(1);
                            id=(ColsAST)match(input,SUBSTR,FOLLOW_SUBSTR_in_relational_expression13308); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            id_tree = (ColsAST)adaptor.dupNode(id);

                            root_1 = (ColsAST)adaptor.becomeRoot(id_tree, root_1);
                            }


                            match(input, Token.DOWN, null); if (state.failed) return retval;
                            _last = (ColsAST)input.LT(1);
                            pushFollow(FOLLOW_infix_expression_in_relational_expression13312);
                            lf=infix_expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) 
                            adaptor.addChild(root_1, lf.getTree());
                            _last = (ColsAST)input.LT(1);
                            pushFollow(FOLLOW_infix_expression_in_relational_expression13316);
                            rt=infix_expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) 
                            adaptor.addChild(root_1, rt.getTree());

                            match(input, Token.UP, null); if (state.failed) return retval;adaptor.addChild(root_0, root_1);_last = _save_last_1;
                            }


                            if ( state.backtracking==0 ) {
                            }
                            }
                            break;
                        case 10 :
                            // RBuilder.g:2238:13: ^(id= NOT_SUBSTR lf= infix_expression rt= infix_expression )
                            {
                            _last = (ColsAST)input.LT(1);
                            {
                            ColsAST _save_last_1 = _last;
                            ColsAST _first_1 = null;
                            ColsAST root_1 = (ColsAST)adaptor.nil();_last = (ColsAST)input.LT(1);
                            id=(ColsAST)match(input,NOT_SUBSTR,FOLLOW_NOT_SUBSTR_in_relational_expression13334); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            id_tree = (ColsAST)adaptor.dupNode(id);

                            root_1 = (ColsAST)adaptor.becomeRoot(id_tree, root_1);
                            }


                            match(input, Token.DOWN, null); if (state.failed) return retval;
                            _last = (ColsAST)input.LT(1);
                            pushFollow(FOLLOW_infix_expression_in_relational_expression13338);
                            lf=infix_expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) 
                            adaptor.addChild(root_1, lf.getTree());
                            _last = (ColsAST)input.LT(1);
                            pushFollow(FOLLOW_infix_expression_in_relational_expression13342);
                            rt=infix_expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) 
                            adaptor.addChild(root_1, rt.getTree());

                            match(input, Token.UP, null); if (state.failed) return retval;adaptor.addChild(root_0, root_1);_last = _save_last_1;
                            }


                            if ( state.backtracking==0 ) {
                            }
                            }
                            break;

                    }

                    if ( state.backtracking==0 ) {
                       retval.exp = new InfixExp(getLocation(id), (lf!=null?lf.exp:null), getPosSymbol(id), (rt!=null?rt.exp:null)); 
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 5 :
                    // RBuilder.g:2241:9: ( ^(id= IN lf= infix_expression rt= infix_expression ) | ^(id= NOT_IN lf= infix_expression rt= infix_expression ) )
                    {
                    root_0 = (ColsAST)adaptor.nil();

                    // RBuilder.g:2241:9: ( ^(id= IN lf= infix_expression rt= infix_expression ) | ^(id= NOT_IN lf= infix_expression rt= infix_expression ) )
                    int alt195=2;
                    int LA195_0 = input.LA(1);

                    if ( (LA195_0==IN) ) {
                        alt195=1;
                    }
                    else if ( (LA195_0==NOT_IN) ) {
                        alt195=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 195, 0, input);

                        throw nvae;
                    }
                    switch (alt195) {
                        case 1 :
                            // RBuilder.g:2241:13: ^(id= IN lf= infix_expression rt= infix_expression )
                            {
                            _last = (ColsAST)input.LT(1);
                            {
                            ColsAST _save_last_1 = _last;
                            ColsAST _first_1 = null;
                            ColsAST root_1 = (ColsAST)adaptor.nil();_last = (ColsAST)input.LT(1);
                            id=(ColsAST)match(input,IN,FOLLOW_IN_in_relational_expression13380); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            id_tree = (ColsAST)adaptor.dupNode(id);

                            root_1 = (ColsAST)adaptor.becomeRoot(id_tree, root_1);
                            }


                            match(input, Token.DOWN, null); if (state.failed) return retval;
                            _last = (ColsAST)input.LT(1);
                            pushFollow(FOLLOW_infix_expression_in_relational_expression13384);
                            lf=infix_expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) 
                            adaptor.addChild(root_1, lf.getTree());
                            _last = (ColsAST)input.LT(1);
                            pushFollow(FOLLOW_infix_expression_in_relational_expression13388);
                            rt=infix_expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) 
                            adaptor.addChild(root_1, rt.getTree());

                            match(input, Token.UP, null); if (state.failed) return retval;adaptor.addChild(root_0, root_1);_last = _save_last_1;
                            }

                            if ( state.backtracking==0 ) {
                               op = IsInExp.IS_IN; 
                            }

                            if ( state.backtracking==0 ) {
                            }
                            }
                            break;
                        case 2 :
                            // RBuilder.g:2243:13: ^(id= NOT_IN lf= infix_expression rt= infix_expression )
                            {
                            _last = (ColsAST)input.LT(1);
                            {
                            ColsAST _save_last_1 = _last;
                            ColsAST _first_1 = null;
                            ColsAST root_1 = (ColsAST)adaptor.nil();_last = (ColsAST)input.LT(1);
                            id=(ColsAST)match(input,NOT_IN,FOLLOW_NOT_IN_in_relational_expression13420); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            id_tree = (ColsAST)adaptor.dupNode(id);

                            root_1 = (ColsAST)adaptor.becomeRoot(id_tree, root_1);
                            }


                            match(input, Token.DOWN, null); if (state.failed) return retval;
                            _last = (ColsAST)input.LT(1);
                            pushFollow(FOLLOW_infix_expression_in_relational_expression13424);
                            lf=infix_expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) 
                            adaptor.addChild(root_1, lf.getTree());
                            _last = (ColsAST)input.LT(1);
                            pushFollow(FOLLOW_infix_expression_in_relational_expression13428);
                            rt=infix_expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) 
                            adaptor.addChild(root_1, rt.getTree());

                            match(input, Token.UP, null); if (state.failed) return retval;adaptor.addChild(root_0, root_1);_last = _save_last_1;
                            }

                            if ( state.backtracking==0 ) {
                               op = IsInExp.IS_IN; 
                            }

                            if ( state.backtracking==0 ) {
                            }
                            }
                            break;

                    }

                    if ( state.backtracking==0 ) {
                       
                                retval.exp = new IsInExp(getLocation(id), (lf!=null?lf.exp:null), op, (rt!=null?rt.exp:null));
                                //Type t = new IsInType(getPosSymbol(id), null);
                                //retval.exp = new InfixExp(getLocation(id), (lf!=null?lf.exp:null), getPosSymbol(id), (rt!=null?rt.exp:null), t);
                              
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }
            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "relational_expression"

    public static class between_expression_return extends TreeRuleReturnScope {
        public Exp exp = null;
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "between_expression"
    // RBuilder.g:2254:1: between_expression returns [Exp exp = null] : ^( BETWEEN_EXPR (lf= infix_expression ( (id= LT | id= LT_EQL ) rt= infix_expression )+ ) ) ;
    public final RBuilder.between_expression_return between_expression() throws RecognitionException {
        RBuilder.between_expression_return retval = new RBuilder.between_expression_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        ColsAST _first_0 = null;
        ColsAST _last = null;

        ColsAST id=null;
        ColsAST BETWEEN_EXPR148=null;
        RBuilder.infix_expression_return lf = null;

        RBuilder.infix_expression_return rt = null;


        ColsAST id_tree=null;
        ColsAST BETWEEN_EXPR148_tree=null;


           edu.clemson.cs.r2jt.collections.List<Exp> lss = new edu.clemson.cs.r2jt.collections.List<Exp>("Exp");
           Exp lf_temp = null;
           Exp conjuncts = null;
           Exp conjunct;

        try {
            // RBuilder.g:2261:5: ( ^( BETWEEN_EXPR (lf= infix_expression ( (id= LT | id= LT_EQL ) rt= infix_expression )+ ) ) )
            // RBuilder.g:2262:11: ^( BETWEEN_EXPR (lf= infix_expression ( (id= LT | id= LT_EQL ) rt= infix_expression )+ ) )
            {
            root_0 = (ColsAST)adaptor.nil();

            _last = (ColsAST)input.LT(1);
            {
            ColsAST _save_last_1 = _last;
            ColsAST _first_1 = null;
            ColsAST root_1 = (ColsAST)adaptor.nil();_last = (ColsAST)input.LT(1);
            BETWEEN_EXPR148=(ColsAST)match(input,BETWEEN_EXPR,FOLLOW_BETWEEN_EXPR_in_between_expression13511); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            BETWEEN_EXPR148_tree = (ColsAST)adaptor.dupNode(BETWEEN_EXPR148);

            root_1 = (ColsAST)adaptor.becomeRoot(BETWEEN_EXPR148_tree, root_1);
            }


            match(input, Token.DOWN, null); if (state.failed) return retval;
            // RBuilder.g:2262:26: (lf= infix_expression ( (id= LT | id= LT_EQL ) rt= infix_expression )+ )
            // RBuilder.g:2262:27: lf= infix_expression ( (id= LT | id= LT_EQL ) rt= infix_expression )+
            {
            _last = (ColsAST)input.LT(1);
            pushFollow(FOLLOW_infix_expression_in_between_expression13516);
            lf=infix_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, lf.getTree());
            if ( state.backtracking==0 ) {
               lf_temp = (lf!=null?lf.exp:null); 
            }
            // RBuilder.g:2263:13: ( (id= LT | id= LT_EQL ) rt= infix_expression )+
            int cnt198=0;
            loop198:
            do {
                int alt198=2;
                int LA198_0 = input.LA(1);

                if ( (LA198_0==LT_EQL||LA198_0==LT) ) {
                    alt198=1;
                }


                switch (alt198) {
            	case 1 :
            	    // RBuilder.g:2264:13: (id= LT | id= LT_EQL ) rt= infix_expression
            	    {
            	    // RBuilder.g:2264:13: (id= LT | id= LT_EQL )
            	    int alt197=2;
            	    int LA197_0 = input.LA(1);

            	    if ( (LA197_0==LT) ) {
            	        alt197=1;
            	    }
            	    else if ( (LA197_0==LT_EQL) ) {
            	        alt197=2;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 197, 0, input);

            	        throw nvae;
            	    }
            	    switch (alt197) {
            	        case 1 :
            	            // RBuilder.g:2264:14: id= LT
            	            {
            	            _last = (ColsAST)input.LT(1);
            	            id=(ColsAST)match(input,LT,FOLLOW_LT_in_between_expression13549); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            id_tree = (ColsAST)adaptor.dupNode(id);

            	            adaptor.addChild(root_1, id_tree);
            	            }

            	            if ( state.backtracking==0 ) {
            	            }
            	            }
            	            break;
            	        case 2 :
            	            // RBuilder.g:2264:22: id= LT_EQL
            	            {
            	            _last = (ColsAST)input.LT(1);
            	            id=(ColsAST)match(input,LT_EQL,FOLLOW_LT_EQL_in_between_expression13555); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            id_tree = (ColsAST)adaptor.dupNode(id);

            	            adaptor.addChild(root_1, id_tree);
            	            }

            	            if ( state.backtracking==0 ) {
            	            }
            	            }
            	            break;

            	    }

            	    _last = (ColsAST)input.LT(1);
            	    pushFollow(FOLLOW_infix_expression_in_between_expression13572);
            	    rt=infix_expression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) 
            	    adaptor.addChild(root_1, rt.getTree());
            	    if ( state.backtracking==0 ) {

            	                    conjunct = new InfixExp(getLocation(id), lf_temp, 
            	                            getPosSymbol(id), (rt!=null?rt.exp:null));  
            	                    lss.add(conjunct);
            	                    lf_temp = (rt!=null?rt.exp:null);
            	                    
            	                    if (conjuncts == null) {
            	                        conjuncts = conjunct;
            	                    }
            	                    else {
            	                        PosSymbol andPosSymbol = getPosSymbol(id);
            	                        andPosSymbol.setSymbol(Symbol.symbol("and"));
            	                        conjuncts = new InfixExp(getLocation(id), conjuncts,
            	                            andPosSymbol, conjunct);
            	                    }
            	                  
            	    }

            	    if ( state.backtracking==0 ) {
            	    }
            	    }
            	    break;

            	default :
            	    if ( cnt198 >= 1 ) break loop198;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(198, input);
                        throw eee;
                }
                cnt198++;
            } while (true);


            if ( state.backtracking==0 ) {
            }
            }


            match(input, Token.UP, null); if (state.failed) return retval;adaptor.addChild(root_0, root_1);_last = _save_last_1;
            }

            if ( state.backtracking==0 ) {
               retval.exp = conjuncts; 
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "between_expression"

    public static class infix_expression_return extends TreeRuleReturnScope {
        public Exp exp = null;
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "infix_expression"
    // RBuilder.g:2292:1: infix_expression returns [Exp exp = null] : ( ^( LOCALVAREXP locals= math_variable_declarations lf= math_expression ) | (exp1= function_type_expression | ( ^(id= RANGE lf1= function_type_expression rt= function_type_expression ) | ^(id= FREE_OPERATOR lf1= function_type_expression rt= function_type_expression ) ) ) | id= BOOLEAN );
    public final RBuilder.infix_expression_return infix_expression() throws RecognitionException {
        RBuilder.infix_expression_return retval = new RBuilder.infix_expression_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        ColsAST _first_0 = null;
        ColsAST _last = null;

        ColsAST id=null;
        ColsAST LOCALVAREXP149=null;
        RBuilder.math_variable_declarations_return locals = null;

        RBuilder.math_expression_return lf = null;

        RBuilder.function_type_expression_return exp1 = null;

        RBuilder.function_type_expression_return lf1 = null;

        RBuilder.function_type_expression_return rt = null;


        ColsAST id_tree=null;
        ColsAST LOCALVAREXP149_tree=null;

        try {
            // RBuilder.g:2293:5: ( ^( LOCALVAREXP locals= math_variable_declarations lf= math_expression ) | (exp1= function_type_expression | ( ^(id= RANGE lf1= function_type_expression rt= function_type_expression ) | ^(id= FREE_OPERATOR lf1= function_type_expression rt= function_type_expression ) ) ) | id= BOOLEAN )
            int alt201=3;
            switch ( input.LA(1) ) {
            case LOCALVAREXP:
                {
                alt201=1;
                }
                break;
            case CARTPROD:
            case COMPLEMENT:
            case DIV:
            case INTERSECT:
            case LAMBDA:
            case MOD:
            case NOT:
            case CAT:
            case REM:
            case UNION:
            case WITHOUT:
            case IDENTIFIER:
            case DOT:
            case NUMERIC_LITERAL:
            case CHARACTER_LITERAL:
            case LBRACE:
            case DBL_LBRACE:
            case HASH:
            case PLUS:
            case MINUS:
            case MULTIPLY:
            case DIVIDE:
            case EXP:
            case RANGE:
            case FUNCARROW:
            case BAR:
            case DBL_BAR:
            case STRING_LITERAL:
            case FREE_OPERATOR:
            case ANGLE:
            case DBL_ANGLE:
            case FUNCTION:
            case ITERATION:
            case NESTED:
            case TUPLE:
            case UNARY_MINUS:
            case QUALNUM:
                {
                alt201=2;
                }
                break;
            case BOOLEAN:
                {
                alt201=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 201, 0, input);

                throw nvae;
            }

            switch (alt201) {
                case 1 :
                    // RBuilder.g:2294:11: ^( LOCALVAREXP locals= math_variable_declarations lf= math_expression )
                    {
                    root_0 = (ColsAST)adaptor.nil();

                    _last = (ColsAST)input.LT(1);
                    {
                    ColsAST _save_last_1 = _last;
                    ColsAST _first_1 = null;
                    ColsAST root_1 = (ColsAST)adaptor.nil();_last = (ColsAST)input.LT(1);
                    LOCALVAREXP149=(ColsAST)match(input,LOCALVAREXP,FOLLOW_LOCALVAREXP_in_infix_expression13687); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LOCALVAREXP149_tree = (ColsAST)adaptor.dupNode(LOCALVAREXP149);

                    root_1 = (ColsAST)adaptor.becomeRoot(LOCALVAREXP149_tree, root_1);
                    }


                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    _last = (ColsAST)input.LT(1);
                    pushFollow(FOLLOW_math_variable_declarations_in_infix_expression13691);
                    locals=math_variable_declarations();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, locals.getTree());
                    _last = (ColsAST)input.LT(1);
                    pushFollow(FOLLOW_math_expression_in_infix_expression13695);
                    lf=math_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, lf.getTree());
                    if ( state.backtracking==0 ) {
                       retval.exp = new QuantExp(getLocation(LOCALVAREXP149), QuantExp.NONE, (locals!=null?locals.decs:null), null, (lf!=null?lf.exp:null)); 
                    }

                    match(input, Token.UP, null); if (state.failed) return retval;adaptor.addChild(root_0, root_1);_last = _save_last_1;
                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // RBuilder.g:2296:9: (exp1= function_type_expression | ( ^(id= RANGE lf1= function_type_expression rt= function_type_expression ) | ^(id= FREE_OPERATOR lf1= function_type_expression rt= function_type_expression ) ) )
                    {
                    root_0 = (ColsAST)adaptor.nil();

                    // RBuilder.g:2296:9: (exp1= function_type_expression | ( ^(id= RANGE lf1= function_type_expression rt= function_type_expression ) | ^(id= FREE_OPERATOR lf1= function_type_expression rt= function_type_expression ) ) )
                    int alt200=2;
                    int LA200_0 = input.LA(1);

                    if ( (LA200_0==CARTPROD||LA200_0==COMPLEMENT||LA200_0==DIV||LA200_0==INTERSECT||LA200_0==LAMBDA||LA200_0==MOD||(LA200_0>=NOT && LA200_0<=CAT)||LA200_0==REM||LA200_0==UNION||LA200_0==WITHOUT||LA200_0==IDENTIFIER||LA200_0==DOT||LA200_0==NUMERIC_LITERAL||LA200_0==CHARACTER_LITERAL||LA200_0==LBRACE||LA200_0==DBL_LBRACE||LA200_0==HASH||(LA200_0>=PLUS && LA200_0<=MINUS)||(LA200_0>=MULTIPLY && LA200_0<=EXP)||LA200_0==FUNCARROW||(LA200_0>=BAR && LA200_0<=DBL_BAR)||LA200_0==STRING_LITERAL||LA200_0==ANGLE||LA200_0==DBL_ANGLE||LA200_0==FUNCTION||LA200_0==ITERATION||LA200_0==NESTED||LA200_0==TUPLE||LA200_0==UNARY_MINUS||LA200_0==QUALNUM) ) {
                        alt200=1;
                    }
                    else if ( (LA200_0==RANGE||LA200_0==FREE_OPERATOR) ) {
                        alt200=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 200, 0, input);

                        throw nvae;
                    }
                    switch (alt200) {
                        case 1 :
                            // RBuilder.g:2296:10: exp1= function_type_expression
                            {
                            _last = (ColsAST)input.LT(1);
                            pushFollow(FOLLOW_function_type_expression_in_infix_expression13717);
                            exp1=function_type_expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) 
                            adaptor.addChild(root_0, exp1.getTree());
                            if ( state.backtracking==0 ) {
                               retval.exp = (exp1!=null?exp1.exp:null); 
                            }

                            if ( state.backtracking==0 ) {
                            }
                            }
                            break;
                        case 2 :
                            // RBuilder.g:2297:9: ( ^(id= RANGE lf1= function_type_expression rt= function_type_expression ) | ^(id= FREE_OPERATOR lf1= function_type_expression rt= function_type_expression ) )
                            {
                            // RBuilder.g:2297:9: ( ^(id= RANGE lf1= function_type_expression rt= function_type_expression ) | ^(id= FREE_OPERATOR lf1= function_type_expression rt= function_type_expression ) )
                            int alt199=2;
                            int LA199_0 = input.LA(1);

                            if ( (LA199_0==RANGE) ) {
                                alt199=1;
                            }
                            else if ( (LA199_0==FREE_OPERATOR) ) {
                                alt199=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 199, 0, input);

                                throw nvae;
                            }
                            switch (alt199) {
                                case 1 :
                                    // RBuilder.g:2297:13: ^(id= RANGE lf1= function_type_expression rt= function_type_expression )
                                    {
                                    _last = (ColsAST)input.LT(1);
                                    {
                                    ColsAST _save_last_1 = _last;
                                    ColsAST _first_1 = null;
                                    ColsAST root_1 = (ColsAST)adaptor.nil();_last = (ColsAST)input.LT(1);
                                    id=(ColsAST)match(input,RANGE,FOLLOW_RANGE_in_infix_expression13736); if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                    id_tree = (ColsAST)adaptor.dupNode(id);

                                    root_1 = (ColsAST)adaptor.becomeRoot(id_tree, root_1);
                                    }


                                    match(input, Token.DOWN, null); if (state.failed) return retval;
                                    _last = (ColsAST)input.LT(1);
                                    pushFollow(FOLLOW_function_type_expression_in_infix_expression13740);
                                    lf1=function_type_expression();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) 
                                    adaptor.addChild(root_1, lf1.getTree());
                                    _last = (ColsAST)input.LT(1);
                                    pushFollow(FOLLOW_function_type_expression_in_infix_expression13744);
                                    rt=function_type_expression();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) 
                                    adaptor.addChild(root_1, rt.getTree());

                                    match(input, Token.UP, null); if (state.failed) return retval;adaptor.addChild(root_0, root_1);_last = _save_last_1;
                                    }


                                    if ( state.backtracking==0 ) {
                                    }
                                    }
                                    break;
                                case 2 :
                                    // RBuilder.g:2298:13: ^(id= FREE_OPERATOR lf1= function_type_expression rt= function_type_expression )
                                    {
                                    _last = (ColsAST)input.LT(1);
                                    {
                                    ColsAST _save_last_1 = _last;
                                    ColsAST _first_1 = null;
                                    ColsAST root_1 = (ColsAST)adaptor.nil();_last = (ColsAST)input.LT(1);
                                    id=(ColsAST)match(input,FREE_OPERATOR,FOLLOW_FREE_OPERATOR_in_infix_expression13762); if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                    id_tree = (ColsAST)adaptor.dupNode(id);

                                    root_1 = (ColsAST)adaptor.becomeRoot(id_tree, root_1);
                                    }


                                    match(input, Token.DOWN, null); if (state.failed) return retval;
                                    _last = (ColsAST)input.LT(1);
                                    pushFollow(FOLLOW_function_type_expression_in_infix_expression13766);
                                    lf1=function_type_expression();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) 
                                    adaptor.addChild(root_1, lf1.getTree());
                                    _last = (ColsAST)input.LT(1);
                                    pushFollow(FOLLOW_function_type_expression_in_infix_expression13770);
                                    rt=function_type_expression();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) 
                                    adaptor.addChild(root_1, rt.getTree());

                                    match(input, Token.UP, null); if (state.failed) return retval;adaptor.addChild(root_0, root_1);_last = _save_last_1;
                                    }


                                    if ( state.backtracking==0 ) {
                                    }
                                    }
                                    break;

                            }

                            if ( state.backtracking==0 ) {
                               retval.exp = new InfixExp(getLocation(id), (lf1!=null?lf1.exp:null), getPosSymbol(id), (rt!=null?rt.exp:null)); 
                            }

                            if ( state.backtracking==0 ) {
                            }
                            }
                            break;

                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 3 :
                    // RBuilder.g:2302:9: id= BOOLEAN
                    {
                    root_0 = (ColsAST)adaptor.nil();

                    _last = (ColsAST)input.LT(1);
                    id=(ColsAST)match(input,BOOLEAN,FOLLOW_BOOLEAN_in_infix_expression13813); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    id_tree = (ColsAST)adaptor.dupNode(id);

                    adaptor.addChild(root_0, id_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.exp = new VarExp(getLocation(id), null, getPosSymbol(id), BooleanType.INSTANCE); 
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }
            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "infix_expression"

    public static class function_type_expression_return extends TreeRuleReturnScope {
        public Exp exp;
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "function_type_expression"
    // RBuilder.g:2305:1: function_type_expression returns [Exp exp] : (left= adding_expression | ^(id= FUNCARROW left= adding_expression right= function_expression ) );
    public final RBuilder.function_type_expression_return function_type_expression() throws RecognitionException {
        RBuilder.function_type_expression_return retval = new RBuilder.function_type_expression_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        ColsAST _first_0 = null;
        ColsAST _last = null;

        ColsAST id=null;
        RBuilder.adding_expression_return left = null;

        RBuilder.function_expression_return right = null;


        ColsAST id_tree=null;

        try {
            // RBuilder.g:2306:5: (left= adding_expression | ^(id= FUNCARROW left= adding_expression right= function_expression ) )
            int alt202=2;
            int LA202_0 = input.LA(1);

            if ( (LA202_0==CARTPROD||LA202_0==COMPLEMENT||LA202_0==DIV||LA202_0==INTERSECT||LA202_0==LAMBDA||LA202_0==MOD||(LA202_0>=NOT && LA202_0<=CAT)||LA202_0==REM||LA202_0==UNION||LA202_0==WITHOUT||LA202_0==IDENTIFIER||LA202_0==DOT||LA202_0==NUMERIC_LITERAL||LA202_0==CHARACTER_LITERAL||LA202_0==LBRACE||LA202_0==DBL_LBRACE||LA202_0==HASH||(LA202_0>=PLUS && LA202_0<=MINUS)||(LA202_0>=MULTIPLY && LA202_0<=EXP)||(LA202_0>=BAR && LA202_0<=DBL_BAR)||LA202_0==STRING_LITERAL||LA202_0==ANGLE||LA202_0==DBL_ANGLE||LA202_0==FUNCTION||LA202_0==ITERATION||LA202_0==NESTED||LA202_0==TUPLE||LA202_0==UNARY_MINUS||LA202_0==QUALNUM) ) {
                alt202=1;
            }
            else if ( (LA202_0==FUNCARROW) ) {
                alt202=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 202, 0, input);

                throw nvae;
            }
            switch (alt202) {
                case 1 :
                    // RBuilder.g:2306:8: left= adding_expression
                    {
                    root_0 = (ColsAST)adaptor.nil();

                    _last = (ColsAST)input.LT(1);
                    pushFollow(FOLLOW_adding_expression_in_function_type_expression13839);
                    left=adding_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, left.getTree());
                    if ( state.backtracking==0 ) {
                       retval.exp = (left!=null?left.exp:null); 
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // RBuilder.g:2307:8: ^(id= FUNCARROW left= adding_expression right= function_expression )
                    {
                    root_0 = (ColsAST)adaptor.nil();

                    _last = (ColsAST)input.LT(1);
                    {
                    ColsAST _save_last_1 = _last;
                    ColsAST _first_1 = null;
                    ColsAST root_1 = (ColsAST)adaptor.nil();_last = (ColsAST)input.LT(1);
                    id=(ColsAST)match(input,FUNCARROW,FOLLOW_FUNCARROW_in_function_type_expression13853); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    id_tree = (ColsAST)adaptor.dupNode(id);

                    root_1 = (ColsAST)adaptor.becomeRoot(id_tree, root_1);
                    }


                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    _last = (ColsAST)input.LT(1);
                    pushFollow(FOLLOW_adding_expression_in_function_type_expression13857);
                    left=adding_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, left.getTree());
                    _last = (ColsAST)input.LT(1);
                    pushFollow(FOLLOW_function_expression_in_function_type_expression13861);
                    right=function_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, right.getTree());

                    match(input, Token.UP, null); if (state.failed) return retval;adaptor.addChild(root_0, root_1);_last = _save_last_1;
                    }

                    if ( state.backtracking==0 ) {
                       retval.exp = new InfixExp(getLocation(id), (left!=null?left.exp:null), getPosSymbol(id), 
                                                   (right!=null?right.exp:null)); 
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }
            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "function_type_expression"

    public static class adding_expression_return extends TreeRuleReturnScope {
        public Exp exp = null;
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "adding_expression"
    // RBuilder.g:2312:1: adding_expression returns [Exp exp = null] : (exp1= multiplying_expression | ( ^(id= PLUS lf= adding_expression rt= multiplying_expression ) | ^(id= MINUS lf= adding_expression rt= multiplying_expression ) | ^(id= CAT lf= adding_expression rt= multiplying_expression ) | ^(id= UNION lf= adding_expression rt= multiplying_expression ) | ^(id= INTERSECT lf= adding_expression rt= multiplying_expression ) | ^(id= WITHOUT lf= adding_expression rt= multiplying_expression ) ) );
    public final RBuilder.adding_expression_return adding_expression() throws RecognitionException {
        RBuilder.adding_expression_return retval = new RBuilder.adding_expression_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        ColsAST _first_0 = null;
        ColsAST _last = null;

        ColsAST id=null;
        RBuilder.multiplying_expression_return exp1 = null;

        RBuilder.adding_expression_return lf = null;

        RBuilder.multiplying_expression_return rt = null;


        ColsAST id_tree=null;

        try {
            // RBuilder.g:2313:5: (exp1= multiplying_expression | ( ^(id= PLUS lf= adding_expression rt= multiplying_expression ) | ^(id= MINUS lf= adding_expression rt= multiplying_expression ) | ^(id= CAT lf= adding_expression rt= multiplying_expression ) | ^(id= UNION lf= adding_expression rt= multiplying_expression ) | ^(id= INTERSECT lf= adding_expression rt= multiplying_expression ) | ^(id= WITHOUT lf= adding_expression rt= multiplying_expression ) ) )
            int alt204=2;
            int LA204_0 = input.LA(1);

            if ( (LA204_0==CARTPROD||LA204_0==COMPLEMENT||LA204_0==DIV||LA204_0==LAMBDA||LA204_0==MOD||LA204_0==NOT||LA204_0==REM||LA204_0==IDENTIFIER||LA204_0==DOT||LA204_0==NUMERIC_LITERAL||LA204_0==CHARACTER_LITERAL||LA204_0==LBRACE||LA204_0==DBL_LBRACE||LA204_0==HASH||(LA204_0>=MULTIPLY && LA204_0<=EXP)||(LA204_0>=BAR && LA204_0<=DBL_BAR)||LA204_0==STRING_LITERAL||LA204_0==ANGLE||LA204_0==DBL_ANGLE||LA204_0==FUNCTION||LA204_0==ITERATION||LA204_0==NESTED||LA204_0==TUPLE||LA204_0==UNARY_MINUS||LA204_0==QUALNUM) ) {
                alt204=1;
            }
            else if ( (LA204_0==INTERSECT||LA204_0==CAT||LA204_0==UNION||LA204_0==WITHOUT||(LA204_0>=PLUS && LA204_0<=MINUS)) ) {
                alt204=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 204, 0, input);

                throw nvae;
            }
            switch (alt204) {
                case 1 :
                    // RBuilder.g:2313:9: exp1= multiplying_expression
                    {
                    root_0 = (ColsAST)adaptor.nil();

                    _last = (ColsAST)input.LT(1);
                    pushFollow(FOLLOW_multiplying_expression_in_adding_expression13898);
                    exp1=multiplying_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, exp1.getTree());
                    if ( state.backtracking==0 ) {
                       retval.exp = (exp1!=null?exp1.exp:null); 
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // RBuilder.g:2314:9: ( ^(id= PLUS lf= adding_expression rt= multiplying_expression ) | ^(id= MINUS lf= adding_expression rt= multiplying_expression ) | ^(id= CAT lf= adding_expression rt= multiplying_expression ) | ^(id= UNION lf= adding_expression rt= multiplying_expression ) | ^(id= INTERSECT lf= adding_expression rt= multiplying_expression ) | ^(id= WITHOUT lf= adding_expression rt= multiplying_expression ) )
                    {
                    root_0 = (ColsAST)adaptor.nil();

                    // RBuilder.g:2314:9: ( ^(id= PLUS lf= adding_expression rt= multiplying_expression ) | ^(id= MINUS lf= adding_expression rt= multiplying_expression ) | ^(id= CAT lf= adding_expression rt= multiplying_expression ) | ^(id= UNION lf= adding_expression rt= multiplying_expression ) | ^(id= INTERSECT lf= adding_expression rt= multiplying_expression ) | ^(id= WITHOUT lf= adding_expression rt= multiplying_expression ) )
                    int alt203=6;
                    switch ( input.LA(1) ) {
                    case PLUS:
                        {
                        alt203=1;
                        }
                        break;
                    case MINUS:
                        {
                        alt203=2;
                        }
                        break;
                    case CAT:
                        {
                        alt203=3;
                        }
                        break;
                    case UNION:
                        {
                        alt203=4;
                        }
                        break;
                    case INTERSECT:
                        {
                        alt203=5;
                        }
                        break;
                    case WITHOUT:
                        {
                        alt203=6;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 203, 0, input);

                        throw nvae;
                    }

                    switch (alt203) {
                        case 1 :
                            // RBuilder.g:2314:13: ^(id= PLUS lf= adding_expression rt= multiplying_expression )
                            {
                            _last = (ColsAST)input.LT(1);
                            {
                            ColsAST _save_last_1 = _last;
                            ColsAST _first_1 = null;
                            ColsAST root_1 = (ColsAST)adaptor.nil();_last = (ColsAST)input.LT(1);
                            id=(ColsAST)match(input,PLUS,FOLLOW_PLUS_in_adding_expression13918); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            id_tree = (ColsAST)adaptor.dupNode(id);

                            root_1 = (ColsAST)adaptor.becomeRoot(id_tree, root_1);
                            }


                            match(input, Token.DOWN, null); if (state.failed) return retval;
                            _last = (ColsAST)input.LT(1);
                            pushFollow(FOLLOW_adding_expression_in_adding_expression13922);
                            lf=adding_expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) 
                            adaptor.addChild(root_1, lf.getTree());
                            _last = (ColsAST)input.LT(1);
                            pushFollow(FOLLOW_multiplying_expression_in_adding_expression13926);
                            rt=multiplying_expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) 
                            adaptor.addChild(root_1, rt.getTree());

                            match(input, Token.UP, null); if (state.failed) return retval;adaptor.addChild(root_0, root_1);_last = _save_last_1;
                            }


                            if ( state.backtracking==0 ) {
                            }
                            }
                            break;
                        case 2 :
                            // RBuilder.g:2315:13: ^(id= MINUS lf= adding_expression rt= multiplying_expression )
                            {
                            _last = (ColsAST)input.LT(1);
                            {
                            ColsAST _save_last_1 = _last;
                            ColsAST _first_1 = null;
                            ColsAST root_1 = (ColsAST)adaptor.nil();_last = (ColsAST)input.LT(1);
                            id=(ColsAST)match(input,MINUS,FOLLOW_MINUS_in_adding_expression13944); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            id_tree = (ColsAST)adaptor.dupNode(id);

                            root_1 = (ColsAST)adaptor.becomeRoot(id_tree, root_1);
                            }


                            match(input, Token.DOWN, null); if (state.failed) return retval;
                            _last = (ColsAST)input.LT(1);
                            pushFollow(FOLLOW_adding_expression_in_adding_expression13948);
                            lf=adding_expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) 
                            adaptor.addChild(root_1, lf.getTree());
                            _last = (ColsAST)input.LT(1);
                            pushFollow(FOLLOW_multiplying_expression_in_adding_expression13952);
                            rt=multiplying_expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) 
                            adaptor.addChild(root_1, rt.getTree());

                            match(input, Token.UP, null); if (state.failed) return retval;adaptor.addChild(root_0, root_1);_last = _save_last_1;
                            }


                            if ( state.backtracking==0 ) {
                            }
                            }
                            break;
                        case 3 :
                            // RBuilder.g:2316:13: ^(id= CAT lf= adding_expression rt= multiplying_expression )
                            {
                            _last = (ColsAST)input.LT(1);
                            {
                            ColsAST _save_last_1 = _last;
                            ColsAST _first_1 = null;
                            ColsAST root_1 = (ColsAST)adaptor.nil();_last = (ColsAST)input.LT(1);
                            id=(ColsAST)match(input,CAT,FOLLOW_CAT_in_adding_expression13970); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            id_tree = (ColsAST)adaptor.dupNode(id);

                            root_1 = (ColsAST)adaptor.becomeRoot(id_tree, root_1);
                            }


                            match(input, Token.DOWN, null); if (state.failed) return retval;
                            _last = (ColsAST)input.LT(1);
                            pushFollow(FOLLOW_adding_expression_in_adding_expression13974);
                            lf=adding_expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) 
                            adaptor.addChild(root_1, lf.getTree());
                            _last = (ColsAST)input.LT(1);
                            pushFollow(FOLLOW_multiplying_expression_in_adding_expression13978);
                            rt=multiplying_expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) 
                            adaptor.addChild(root_1, rt.getTree());

                            match(input, Token.UP, null); if (state.failed) return retval;adaptor.addChild(root_0, root_1);_last = _save_last_1;
                            }


                            if ( state.backtracking==0 ) {
                            }
                            }
                            break;
                        case 4 :
                            // RBuilder.g:2317:13: ^(id= UNION lf= adding_expression rt= multiplying_expression )
                            {
                            _last = (ColsAST)input.LT(1);
                            {
                            ColsAST _save_last_1 = _last;
                            ColsAST _first_1 = null;
                            ColsAST root_1 = (ColsAST)adaptor.nil();_last = (ColsAST)input.LT(1);
                            id=(ColsAST)match(input,UNION,FOLLOW_UNION_in_adding_expression13996); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            id_tree = (ColsAST)adaptor.dupNode(id);

                            root_1 = (ColsAST)adaptor.becomeRoot(id_tree, root_1);
                            }


                            match(input, Token.DOWN, null); if (state.failed) return retval;
                            _last = (ColsAST)input.LT(1);
                            pushFollow(FOLLOW_adding_expression_in_adding_expression14000);
                            lf=adding_expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) 
                            adaptor.addChild(root_1, lf.getTree());
                            _last = (ColsAST)input.LT(1);
                            pushFollow(FOLLOW_multiplying_expression_in_adding_expression14004);
                            rt=multiplying_expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) 
                            adaptor.addChild(root_1, rt.getTree());

                            match(input, Token.UP, null); if (state.failed) return retval;adaptor.addChild(root_0, root_1);_last = _save_last_1;
                            }


                            if ( state.backtracking==0 ) {
                            }
                            }
                            break;
                        case 5 :
                            // RBuilder.g:2318:13: ^(id= INTERSECT lf= adding_expression rt= multiplying_expression )
                            {
                            _last = (ColsAST)input.LT(1);
                            {
                            ColsAST _save_last_1 = _last;
                            ColsAST _first_1 = null;
                            ColsAST root_1 = (ColsAST)adaptor.nil();_last = (ColsAST)input.LT(1);
                            id=(ColsAST)match(input,INTERSECT,FOLLOW_INTERSECT_in_adding_expression14022); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            id_tree = (ColsAST)adaptor.dupNode(id);

                            root_1 = (ColsAST)adaptor.becomeRoot(id_tree, root_1);
                            }


                            match(input, Token.DOWN, null); if (state.failed) return retval;
                            _last = (ColsAST)input.LT(1);
                            pushFollow(FOLLOW_adding_expression_in_adding_expression14026);
                            lf=adding_expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) 
                            adaptor.addChild(root_1, lf.getTree());
                            _last = (ColsAST)input.LT(1);
                            pushFollow(FOLLOW_multiplying_expression_in_adding_expression14030);
                            rt=multiplying_expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) 
                            adaptor.addChild(root_1, rt.getTree());

                            match(input, Token.UP, null); if (state.failed) return retval;adaptor.addChild(root_0, root_1);_last = _save_last_1;
                            }


                            if ( state.backtracking==0 ) {
                            }
                            }
                            break;
                        case 6 :
                            // RBuilder.g:2319:13: ^(id= WITHOUT lf= adding_expression rt= multiplying_expression )
                            {
                            _last = (ColsAST)input.LT(1);
                            {
                            ColsAST _save_last_1 = _last;
                            ColsAST _first_1 = null;
                            ColsAST root_1 = (ColsAST)adaptor.nil();_last = (ColsAST)input.LT(1);
                            id=(ColsAST)match(input,WITHOUT,FOLLOW_WITHOUT_in_adding_expression14048); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            id_tree = (ColsAST)adaptor.dupNode(id);

                            root_1 = (ColsAST)adaptor.becomeRoot(id_tree, root_1);
                            }


                            match(input, Token.DOWN, null); if (state.failed) return retval;
                            _last = (ColsAST)input.LT(1);
                            pushFollow(FOLLOW_adding_expression_in_adding_expression14052);
                            lf=adding_expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) 
                            adaptor.addChild(root_1, lf.getTree());
                            _last = (ColsAST)input.LT(1);
                            pushFollow(FOLLOW_multiplying_expression_in_adding_expression14056);
                            rt=multiplying_expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) 
                            adaptor.addChild(root_1, rt.getTree());

                            match(input, Token.UP, null); if (state.failed) return retval;adaptor.addChild(root_0, root_1);_last = _save_last_1;
                            }


                            if ( state.backtracking==0 ) {
                            }
                            }
                            break;

                    }

                    if ( state.backtracking==0 ) {
                       retval.exp = new InfixExp(getLocation(id), (lf!=null?lf.exp:null), getPosSymbol(id), (rt!=null?rt.exp:null)); 
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }
            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "adding_expression"

    public static class multiplying_expression_return extends TreeRuleReturnScope {
        public Exp exp = null;
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "multiplying_expression"
    // RBuilder.g:2324:1: multiplying_expression returns [Exp exp = null] : (exp1= exponential_expression | ( ^(id= MULTIPLY lf= multiplying_expression rt= exponential_expression ) | ^(id= DIVIDE lf= multiplying_expression rt= exponential_expression ) | ^(id= MOD lf= multiplying_expression rt= exponential_expression ) | ^(id= REM lf= multiplying_expression rt= exponential_expression ) | ^(id= DIV lf= multiplying_expression rt= exponential_expression ) ) );
    public final RBuilder.multiplying_expression_return multiplying_expression() throws RecognitionException {
        RBuilder.multiplying_expression_return retval = new RBuilder.multiplying_expression_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        ColsAST _first_0 = null;
        ColsAST _last = null;

        ColsAST id=null;
        RBuilder.exponential_expression_return exp1 = null;

        RBuilder.multiplying_expression_return lf = null;

        RBuilder.exponential_expression_return rt = null;


        ColsAST id_tree=null;

        try {
            // RBuilder.g:2325:5: (exp1= exponential_expression | ( ^(id= MULTIPLY lf= multiplying_expression rt= exponential_expression ) | ^(id= DIVIDE lf= multiplying_expression rt= exponential_expression ) | ^(id= MOD lf= multiplying_expression rt= exponential_expression ) | ^(id= REM lf= multiplying_expression rt= exponential_expression ) | ^(id= DIV lf= multiplying_expression rt= exponential_expression ) ) )
            int alt206=2;
            int LA206_0 = input.LA(1);

            if ( (LA206_0==CARTPROD||LA206_0==COMPLEMENT||LA206_0==LAMBDA||LA206_0==NOT||LA206_0==IDENTIFIER||LA206_0==DOT||LA206_0==NUMERIC_LITERAL||LA206_0==CHARACTER_LITERAL||LA206_0==LBRACE||LA206_0==DBL_LBRACE||LA206_0==HASH||LA206_0==EXP||(LA206_0>=BAR && LA206_0<=DBL_BAR)||LA206_0==STRING_LITERAL||LA206_0==ANGLE||LA206_0==DBL_ANGLE||LA206_0==FUNCTION||LA206_0==ITERATION||LA206_0==NESTED||LA206_0==TUPLE||LA206_0==UNARY_MINUS||LA206_0==QUALNUM) ) {
                alt206=1;
            }
            else if ( (LA206_0==DIV||LA206_0==MOD||LA206_0==REM||(LA206_0>=MULTIPLY && LA206_0<=DIVIDE)) ) {
                alt206=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 206, 0, input);

                throw nvae;
            }
            switch (alt206) {
                case 1 :
                    // RBuilder.g:2325:9: exp1= exponential_expression
                    {
                    root_0 = (ColsAST)adaptor.nil();

                    _last = (ColsAST)input.LT(1);
                    pushFollow(FOLLOW_exponential_expression_in_multiplying_expression14102);
                    exp1=exponential_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, exp1.getTree());
                    if ( state.backtracking==0 ) {
                       retval.exp = (exp1!=null?exp1.exp:null); 
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // RBuilder.g:2326:9: ( ^(id= MULTIPLY lf= multiplying_expression rt= exponential_expression ) | ^(id= DIVIDE lf= multiplying_expression rt= exponential_expression ) | ^(id= MOD lf= multiplying_expression rt= exponential_expression ) | ^(id= REM lf= multiplying_expression rt= exponential_expression ) | ^(id= DIV lf= multiplying_expression rt= exponential_expression ) )
                    {
                    root_0 = (ColsAST)adaptor.nil();

                    // RBuilder.g:2326:9: ( ^(id= MULTIPLY lf= multiplying_expression rt= exponential_expression ) | ^(id= DIVIDE lf= multiplying_expression rt= exponential_expression ) | ^(id= MOD lf= multiplying_expression rt= exponential_expression ) | ^(id= REM lf= multiplying_expression rt= exponential_expression ) | ^(id= DIV lf= multiplying_expression rt= exponential_expression ) )
                    int alt205=5;
                    switch ( input.LA(1) ) {
                    case MULTIPLY:
                        {
                        alt205=1;
                        }
                        break;
                    case DIVIDE:
                        {
                        alt205=2;
                        }
                        break;
                    case MOD:
                        {
                        alt205=3;
                        }
                        break;
                    case REM:
                        {
                        alt205=4;
                        }
                        break;
                    case DIV:
                        {
                        alt205=5;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 205, 0, input);

                        throw nvae;
                    }

                    switch (alt205) {
                        case 1 :
                            // RBuilder.g:2326:13: ^(id= MULTIPLY lf= multiplying_expression rt= exponential_expression )
                            {
                            _last = (ColsAST)input.LT(1);
                            {
                            ColsAST _save_last_1 = _last;
                            ColsAST _first_1 = null;
                            ColsAST root_1 = (ColsAST)adaptor.nil();_last = (ColsAST)input.LT(1);
                            id=(ColsAST)match(input,MULTIPLY,FOLLOW_MULTIPLY_in_multiplying_expression14121); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            id_tree = (ColsAST)adaptor.dupNode(id);

                            root_1 = (ColsAST)adaptor.becomeRoot(id_tree, root_1);
                            }


                            match(input, Token.DOWN, null); if (state.failed) return retval;
                            _last = (ColsAST)input.LT(1);
                            pushFollow(FOLLOW_multiplying_expression_in_multiplying_expression14125);
                            lf=multiplying_expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) 
                            adaptor.addChild(root_1, lf.getTree());
                            _last = (ColsAST)input.LT(1);
                            pushFollow(FOLLOW_exponential_expression_in_multiplying_expression14129);
                            rt=exponential_expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) 
                            adaptor.addChild(root_1, rt.getTree());

                            match(input, Token.UP, null); if (state.failed) return retval;adaptor.addChild(root_0, root_1);_last = _save_last_1;
                            }


                            if ( state.backtracking==0 ) {
                            }
                            }
                            break;
                        case 2 :
                            // RBuilder.g:2327:13: ^(id= DIVIDE lf= multiplying_expression rt= exponential_expression )
                            {
                            _last = (ColsAST)input.LT(1);
                            {
                            ColsAST _save_last_1 = _last;
                            ColsAST _first_1 = null;
                            ColsAST root_1 = (ColsAST)adaptor.nil();_last = (ColsAST)input.LT(1);
                            id=(ColsAST)match(input,DIVIDE,FOLLOW_DIVIDE_in_multiplying_expression14147); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            id_tree = (ColsAST)adaptor.dupNode(id);

                            root_1 = (ColsAST)adaptor.becomeRoot(id_tree, root_1);
                            }


                            match(input, Token.DOWN, null); if (state.failed) return retval;
                            _last = (ColsAST)input.LT(1);
                            pushFollow(FOLLOW_multiplying_expression_in_multiplying_expression14151);
                            lf=multiplying_expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) 
                            adaptor.addChild(root_1, lf.getTree());
                            _last = (ColsAST)input.LT(1);
                            pushFollow(FOLLOW_exponential_expression_in_multiplying_expression14155);
                            rt=exponential_expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) 
                            adaptor.addChild(root_1, rt.getTree());

                            match(input, Token.UP, null); if (state.failed) return retval;adaptor.addChild(root_0, root_1);_last = _save_last_1;
                            }


                            if ( state.backtracking==0 ) {
                            }
                            }
                            break;
                        case 3 :
                            // RBuilder.g:2328:13: ^(id= MOD lf= multiplying_expression rt= exponential_expression )
                            {
                            _last = (ColsAST)input.LT(1);
                            {
                            ColsAST _save_last_1 = _last;
                            ColsAST _first_1 = null;
                            ColsAST root_1 = (ColsAST)adaptor.nil();_last = (ColsAST)input.LT(1);
                            id=(ColsAST)match(input,MOD,FOLLOW_MOD_in_multiplying_expression14173); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            id_tree = (ColsAST)adaptor.dupNode(id);

                            root_1 = (ColsAST)adaptor.becomeRoot(id_tree, root_1);
                            }


                            match(input, Token.DOWN, null); if (state.failed) return retval;
                            _last = (ColsAST)input.LT(1);
                            pushFollow(FOLLOW_multiplying_expression_in_multiplying_expression14177);
                            lf=multiplying_expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) 
                            adaptor.addChild(root_1, lf.getTree());
                            _last = (ColsAST)input.LT(1);
                            pushFollow(FOLLOW_exponential_expression_in_multiplying_expression14181);
                            rt=exponential_expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) 
                            adaptor.addChild(root_1, rt.getTree());

                            match(input, Token.UP, null); if (state.failed) return retval;adaptor.addChild(root_0, root_1);_last = _save_last_1;
                            }


                            if ( state.backtracking==0 ) {
                            }
                            }
                            break;
                        case 4 :
                            // RBuilder.g:2329:13: ^(id= REM lf= multiplying_expression rt= exponential_expression )
                            {
                            _last = (ColsAST)input.LT(1);
                            {
                            ColsAST _save_last_1 = _last;
                            ColsAST _first_1 = null;
                            ColsAST root_1 = (ColsAST)adaptor.nil();_last = (ColsAST)input.LT(1);
                            id=(ColsAST)match(input,REM,FOLLOW_REM_in_multiplying_expression14199); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            id_tree = (ColsAST)adaptor.dupNode(id);

                            root_1 = (ColsAST)adaptor.becomeRoot(id_tree, root_1);
                            }


                            match(input, Token.DOWN, null); if (state.failed) return retval;
                            _last = (ColsAST)input.LT(1);
                            pushFollow(FOLLOW_multiplying_expression_in_multiplying_expression14203);
                            lf=multiplying_expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) 
                            adaptor.addChild(root_1, lf.getTree());
                            _last = (ColsAST)input.LT(1);
                            pushFollow(FOLLOW_exponential_expression_in_multiplying_expression14207);
                            rt=exponential_expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) 
                            adaptor.addChild(root_1, rt.getTree());

                            match(input, Token.UP, null); if (state.failed) return retval;adaptor.addChild(root_0, root_1);_last = _save_last_1;
                            }


                            if ( state.backtracking==0 ) {
                            }
                            }
                            break;
                        case 5 :
                            // RBuilder.g:2330:13: ^(id= DIV lf= multiplying_expression rt= exponential_expression )
                            {
                            _last = (ColsAST)input.LT(1);
                            {
                            ColsAST _save_last_1 = _last;
                            ColsAST _first_1 = null;
                            ColsAST root_1 = (ColsAST)adaptor.nil();_last = (ColsAST)input.LT(1);
                            id=(ColsAST)match(input,DIV,FOLLOW_DIV_in_multiplying_expression14225); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            id_tree = (ColsAST)adaptor.dupNode(id);

                            root_1 = (ColsAST)adaptor.becomeRoot(id_tree, root_1);
                            }


                            match(input, Token.DOWN, null); if (state.failed) return retval;
                            _last = (ColsAST)input.LT(1);
                            pushFollow(FOLLOW_multiplying_expression_in_multiplying_expression14229);
                            lf=multiplying_expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) 
                            adaptor.addChild(root_1, lf.getTree());
                            _last = (ColsAST)input.LT(1);
                            pushFollow(FOLLOW_exponential_expression_in_multiplying_expression14233);
                            rt=exponential_expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) 
                            adaptor.addChild(root_1, rt.getTree());

                            match(input, Token.UP, null); if (state.failed) return retval;adaptor.addChild(root_0, root_1);_last = _save_last_1;
                            }


                            if ( state.backtracking==0 ) {
                            }
                            }
                            break;

                    }

                    if ( state.backtracking==0 ) {
                       retval.exp = new InfixExp(getLocation(id), (lf!=null?lf.exp:null), getPosSymbol(id), (rt!=null?rt.exp:null)); 
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }
            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "multiplying_expression"

    public static class exponential_expression_return extends TreeRuleReturnScope {
        public Exp exp = null;
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "exponential_expression"
    // RBuilder.g:2335:1: exponential_expression returns [Exp exp = null] : (exp1= prefix_expression | ^( EXP lf= prefix_expression rt= exponential_expression ) );
    public final RBuilder.exponential_expression_return exponential_expression() throws RecognitionException {
        RBuilder.exponential_expression_return retval = new RBuilder.exponential_expression_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        ColsAST _first_0 = null;
        ColsAST _last = null;

        ColsAST EXP150=null;
        RBuilder.prefix_expression_return exp1 = null;

        RBuilder.prefix_expression_return lf = null;

        RBuilder.exponential_expression_return rt = null;


        ColsAST EXP150_tree=null;

        try {
            // RBuilder.g:2336:5: (exp1= prefix_expression | ^( EXP lf= prefix_expression rt= exponential_expression ) )
            int alt207=2;
            int LA207_0 = input.LA(1);

            if ( (LA207_0==CARTPROD||LA207_0==COMPLEMENT||LA207_0==LAMBDA||LA207_0==NOT||LA207_0==IDENTIFIER||LA207_0==DOT||LA207_0==NUMERIC_LITERAL||LA207_0==CHARACTER_LITERAL||LA207_0==LBRACE||LA207_0==DBL_LBRACE||LA207_0==HASH||(LA207_0>=BAR && LA207_0<=DBL_BAR)||LA207_0==STRING_LITERAL||LA207_0==ANGLE||LA207_0==DBL_ANGLE||LA207_0==FUNCTION||LA207_0==ITERATION||LA207_0==NESTED||LA207_0==TUPLE||LA207_0==UNARY_MINUS||LA207_0==QUALNUM) ) {
                alt207=1;
            }
            else if ( (LA207_0==EXP) ) {
                alt207=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 207, 0, input);

                throw nvae;
            }
            switch (alt207) {
                case 1 :
                    // RBuilder.g:2336:9: exp1= prefix_expression
                    {
                    root_0 = (ColsAST)adaptor.nil();

                    _last = (ColsAST)input.LT(1);
                    pushFollow(FOLLOW_prefix_expression_in_exponential_expression14279);
                    exp1=prefix_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, exp1.getTree());
                    if ( state.backtracking==0 ) {
                       retval.exp = (exp1!=null?exp1.exp:null); 
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // RBuilder.g:2337:9: ^( EXP lf= prefix_expression rt= exponential_expression )
                    {
                    root_0 = (ColsAST)adaptor.nil();

                    _last = (ColsAST)input.LT(1);
                    {
                    ColsAST _save_last_1 = _last;
                    ColsAST _first_1 = null;
                    ColsAST root_1 = (ColsAST)adaptor.nil();_last = (ColsAST)input.LT(1);
                    EXP150=(ColsAST)match(input,EXP,FOLLOW_EXP_in_exponential_expression14293); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    EXP150_tree = (ColsAST)adaptor.dupNode(EXP150);

                    root_1 = (ColsAST)adaptor.becomeRoot(EXP150_tree, root_1);
                    }


                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    _last = (ColsAST)input.LT(1);
                    pushFollow(FOLLOW_prefix_expression_in_exponential_expression14297);
                    lf=prefix_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, lf.getTree());
                    _last = (ColsAST)input.LT(1);
                    pushFollow(FOLLOW_exponential_expression_in_exponential_expression14301);
                    rt=exponential_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, rt.getTree());

                    match(input, Token.UP, null); if (state.failed) return retval;adaptor.addChild(root_0, root_1);_last = _save_last_1;
                    }

                    if ( state.backtracking==0 ) {
                       retval.exp = new InfixExp(getLocation(EXP150), (lf!=null?lf.exp:null), getPosSymbol(EXP150), (rt!=null?rt.exp:null)); 
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }
            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "exponential_expression"

    public static class prefix_expression_return extends TreeRuleReturnScope {
        public Exp exp = null;
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prefix_expression"
    // RBuilder.g:2341:1: prefix_expression returns [Exp exp = null] : exp1= unary_expression ;
    public final RBuilder.prefix_expression_return prefix_expression() throws RecognitionException {
        RBuilder.prefix_expression_return retval = new RBuilder.prefix_expression_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        ColsAST _first_0 = null;
        ColsAST _last = null;

        RBuilder.unary_expression_return exp1 = null;



        try {
            // RBuilder.g:2342:5: (exp1= unary_expression )
            // RBuilder.g:2342:9: exp1= unary_expression
            {
            root_0 = (ColsAST)adaptor.nil();

            _last = (ColsAST)input.LT(1);
            pushFollow(FOLLOW_unary_expression_in_prefix_expression14337);
            exp1=unary_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, exp1.getTree());
            if ( state.backtracking==0 ) {
               retval.exp = (exp1!=null?exp1.exp:null); 
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "prefix_expression"

    public static class unary_expression_return extends TreeRuleReturnScope {
        public Exp exp = null;
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unary_expression"
    // RBuilder.g:2344:1: unary_expression returns [Exp exp = null] : (exp1= primitive_expression | ( ^(id= NOT arg= unary_expression ) | ^(id= COMPLEMENT arg= unary_expression ) | ^(id= UNARY_MINUS arg= unary_expression ) ) );
    public final RBuilder.unary_expression_return unary_expression() throws RecognitionException {
        RBuilder.unary_expression_return retval = new RBuilder.unary_expression_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        ColsAST _first_0 = null;
        ColsAST _last = null;

        ColsAST id=null;
        RBuilder.primitive_expression_return exp1 = null;

        RBuilder.unary_expression_return arg = null;


        ColsAST id_tree=null;

        try {
            // RBuilder.g:2345:5: (exp1= primitive_expression | ( ^(id= NOT arg= unary_expression ) | ^(id= COMPLEMENT arg= unary_expression ) | ^(id= UNARY_MINUS arg= unary_expression ) ) )
            int alt209=2;
            int LA209_0 = input.LA(1);

            if ( (LA209_0==CARTPROD||LA209_0==LAMBDA||LA209_0==IDENTIFIER||LA209_0==DOT||LA209_0==NUMERIC_LITERAL||LA209_0==CHARACTER_LITERAL||LA209_0==LBRACE||LA209_0==DBL_LBRACE||LA209_0==HASH||(LA209_0>=BAR && LA209_0<=DBL_BAR)||LA209_0==STRING_LITERAL||LA209_0==ANGLE||LA209_0==DBL_ANGLE||LA209_0==FUNCTION||LA209_0==ITERATION||LA209_0==NESTED||LA209_0==TUPLE||LA209_0==QUALNUM) ) {
                alt209=1;
            }
            else if ( (LA209_0==COMPLEMENT||LA209_0==NOT||LA209_0==UNARY_MINUS) ) {
                alt209=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 209, 0, input);

                throw nvae;
            }
            switch (alt209) {
                case 1 :
                    // RBuilder.g:2345:9: exp1= primitive_expression
                    {
                    root_0 = (ColsAST)adaptor.nil();

                    _last = (ColsAST)input.LT(1);
                    pushFollow(FOLLOW_primitive_expression_in_unary_expression14360);
                    exp1=primitive_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, exp1.getTree());
                    if ( state.backtracking==0 ) {
                       retval.exp = (exp1!=null?exp1.exp:null); 
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // RBuilder.g:2346:9: ( ^(id= NOT arg= unary_expression ) | ^(id= COMPLEMENT arg= unary_expression ) | ^(id= UNARY_MINUS arg= unary_expression ) )
                    {
                    root_0 = (ColsAST)adaptor.nil();

                    // RBuilder.g:2346:9: ( ^(id= NOT arg= unary_expression ) | ^(id= COMPLEMENT arg= unary_expression ) | ^(id= UNARY_MINUS arg= unary_expression ) )
                    int alt208=3;
                    switch ( input.LA(1) ) {
                    case NOT:
                        {
                        alt208=1;
                        }
                        break;
                    case COMPLEMENT:
                        {
                        alt208=2;
                        }
                        break;
                    case UNARY_MINUS:
                        {
                        alt208=3;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 208, 0, input);

                        throw nvae;
                    }

                    switch (alt208) {
                        case 1 :
                            // RBuilder.g:2346:13: ^(id= NOT arg= unary_expression )
                            {
                            _last = (ColsAST)input.LT(1);
                            {
                            ColsAST _save_last_1 = _last;
                            ColsAST _first_1 = null;
                            ColsAST root_1 = (ColsAST)adaptor.nil();_last = (ColsAST)input.LT(1);
                            id=(ColsAST)match(input,NOT,FOLLOW_NOT_in_unary_expression14379); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            id_tree = (ColsAST)adaptor.dupNode(id);

                            root_1 = (ColsAST)adaptor.becomeRoot(id_tree, root_1);
                            }


                            match(input, Token.DOWN, null); if (state.failed) return retval;
                            _last = (ColsAST)input.LT(1);
                            pushFollow(FOLLOW_unary_expression_in_unary_expression14383);
                            arg=unary_expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) 
                            adaptor.addChild(root_1, arg.getTree());

                            match(input, Token.UP, null); if (state.failed) return retval;adaptor.addChild(root_0, root_1);_last = _save_last_1;
                            }

                            if ( state.backtracking==0 ) {
                               retval.exp = new PrefixExp(getLocation(id), getPosSymbol(id), (arg!=null?arg.exp:null), BooleanType.INSTANCE); 
                            }

                            if ( state.backtracking==0 ) {
                            }
                            }
                            break;
                        case 2 :
                            // RBuilder.g:2348:13: ^(id= COMPLEMENT arg= unary_expression )
                            {
                            _last = (ColsAST)input.LT(1);
                            {
                            ColsAST _save_last_1 = _last;
                            ColsAST _first_1 = null;
                            ColsAST root_1 = (ColsAST)adaptor.nil();_last = (ColsAST)input.LT(1);
                            id=(ColsAST)match(input,COMPLEMENT,FOLLOW_COMPLEMENT_in_unary_expression14415); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            id_tree = (ColsAST)adaptor.dupNode(id);

                            root_1 = (ColsAST)adaptor.becomeRoot(id_tree, root_1);
                            }


                            match(input, Token.DOWN, null); if (state.failed) return retval;
                            _last = (ColsAST)input.LT(1);
                            pushFollow(FOLLOW_unary_expression_in_unary_expression14419);
                            arg=unary_expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) 
                            adaptor.addChild(root_1, arg.getTree());

                            match(input, Token.UP, null); if (state.failed) return retval;adaptor.addChild(root_0, root_1);_last = _save_last_1;
                            }

                            if ( state.backtracking==0 ) {
                               retval.exp = new PrefixExp(getLocation(id), getPosSymbol(id), (arg!=null?arg.exp:null)); 
                            }

                            if ( state.backtracking==0 ) {
                            }
                            }
                            break;
                        case 3 :
                            // RBuilder.g:2350:13: ^(id= UNARY_MINUS arg= unary_expression )
                            {
                            _last = (ColsAST)input.LT(1);
                            {
                            ColsAST _save_last_1 = _last;
                            ColsAST _first_1 = null;
                            ColsAST root_1 = (ColsAST)adaptor.nil();_last = (ColsAST)input.LT(1);
                            id=(ColsAST)match(input,UNARY_MINUS,FOLLOW_UNARY_MINUS_in_unary_expression14451); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            id_tree = (ColsAST)adaptor.dupNode(id);

                            root_1 = (ColsAST)adaptor.becomeRoot(id_tree, root_1);
                            }


                            match(input, Token.DOWN, null); if (state.failed) return retval;
                            _last = (ColsAST)input.LT(1);
                            pushFollow(FOLLOW_unary_expression_in_unary_expression14455);
                            arg=unary_expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) 
                            adaptor.addChild(root_1, arg.getTree());

                            match(input, Token.UP, null); if (state.failed) return retval;adaptor.addChild(root_0, root_1);_last = _save_last_1;
                            }

                            if ( state.backtracking==0 ) {
                               retval.exp = new PrefixExp(getLocation(id), getPosSymbol(id), (arg!=null?arg.exp:null)); 
                            }

                            if ( state.backtracking==0 ) {
                            }
                            }
                            break;

                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }
            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "unary_expression"

    public static class primitive_expression_return extends TreeRuleReturnScope {
        public Exp exp = null;
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "primitive_expression"
    // RBuilder.g:2356:1: primitive_expression returns [Exp exp = null] : (exp1= alternative_expression | exp2= dot_expression | exp3= lambda_expression | exp4= literal_expression | exp5= outfix_expression | exp6= set_constructor | exp7= tuple_expression | exp8= nested_expression | exp9= iterated_construct | exp10= tagged_cartesian_product_type_expression );
    public final RBuilder.primitive_expression_return primitive_expression() throws RecognitionException {
        RBuilder.primitive_expression_return retval = new RBuilder.primitive_expression_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        ColsAST _first_0 = null;
        ColsAST _last = null;

        RBuilder.alternative_expression_return exp1 = null;

        RBuilder.dot_expression_return exp2 = null;

        RBuilder.lambda_expression_return exp3 = null;

        RBuilder.literal_expression_return exp4 = null;

        RBuilder.outfix_expression_return exp5 = null;

        RBuilder.set_constructor_return exp6 = null;

        RBuilder.tuple_expression_return exp7 = null;

        RBuilder.nested_expression_return exp8 = null;

        RBuilder.iterated_construct_return exp9 = null;

        RBuilder.tagged_cartesian_product_type_expression_return exp10 = null;




          //VarExp ve = null;
          //PosSymbol name = null;

        try {
            // RBuilder.g:2361:5: (exp1= alternative_expression | exp2= dot_expression | exp3= lambda_expression | exp4= literal_expression | exp5= outfix_expression | exp6= set_constructor | exp7= tuple_expression | exp8= nested_expression | exp9= iterated_construct | exp10= tagged_cartesian_product_type_expression )
            int alt210=10;
            alt210 = dfa210.predict(input);
            switch (alt210) {
                case 1 :
                    // RBuilder.g:2361:9: exp1= alternative_expression
                    {
                    root_0 = (ColsAST)adaptor.nil();

                    _last = (ColsAST)input.LT(1);
                    pushFollow(FOLLOW_alternative_expression_in_primitive_expression14518);
                    exp1=alternative_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, exp1.getTree());
                    if ( state.backtracking==0 ) {
                       retval.exp = (exp1!=null?exp1.exp:null); 
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // RBuilder.g:2362:9: exp2= dot_expression
                    {
                    root_0 = (ColsAST)adaptor.nil();

                    _last = (ColsAST)input.LT(1);
                    pushFollow(FOLLOW_dot_expression_in_primitive_expression14532);
                    exp2=dot_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, exp2.getTree());
                    if ( state.backtracking==0 ) {
                       retval.exp = (exp2!=null?exp2.exp:null); 
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 3 :
                    // RBuilder.g:2363:9: exp3= lambda_expression
                    {
                    root_0 = (ColsAST)adaptor.nil();

                    _last = (ColsAST)input.LT(1);
                    pushFollow(FOLLOW_lambda_expression_in_primitive_expression14546);
                    exp3=lambda_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, exp3.getTree());
                    if ( state.backtracking==0 ) {
                       retval.exp = (exp3!=null?exp3.exp:null); 
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 4 :
                    // RBuilder.g:2364:9: exp4= literal_expression
                    {
                    root_0 = (ColsAST)adaptor.nil();

                    _last = (ColsAST)input.LT(1);
                    pushFollow(FOLLOW_literal_expression_in_primitive_expression14560);
                    exp4=literal_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, exp4.getTree());
                    if ( state.backtracking==0 ) {
                       retval.exp = (exp4!=null?exp4.exp:null); 
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 5 :
                    // RBuilder.g:2365:9: exp5= outfix_expression
                    {
                    root_0 = (ColsAST)adaptor.nil();

                    _last = (ColsAST)input.LT(1);
                    pushFollow(FOLLOW_outfix_expression_in_primitive_expression14574);
                    exp5=outfix_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, exp5.getTree());
                    if ( state.backtracking==0 ) {
                       retval.exp = (exp5!=null?exp5.exp:null); 
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 6 :
                    // RBuilder.g:2366:9: exp6= set_constructor
                    {
                    root_0 = (ColsAST)adaptor.nil();

                    _last = (ColsAST)input.LT(1);
                    pushFollow(FOLLOW_set_constructor_in_primitive_expression14588);
                    exp6=set_constructor();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, exp6.getTree());
                    if ( state.backtracking==0 ) {
                       retval.exp = (exp6!=null?exp6.exp:null); 
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 7 :
                    // RBuilder.g:2367:9: exp7= tuple_expression
                    {
                    root_0 = (ColsAST)adaptor.nil();

                    _last = (ColsAST)input.LT(1);
                    pushFollow(FOLLOW_tuple_expression_in_primitive_expression14602);
                    exp7=tuple_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, exp7.getTree());
                    if ( state.backtracking==0 ) {
                       retval.exp = (exp7!=null?exp7.exp:null); 
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 8 :
                    // RBuilder.g:2368:9: exp8= nested_expression
                    {
                    root_0 = (ColsAST)adaptor.nil();

                    _last = (ColsAST)input.LT(1);
                    pushFollow(FOLLOW_nested_expression_in_primitive_expression14616);
                    exp8=nested_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, exp8.getTree());
                    if ( state.backtracking==0 ) {
                       retval.exp = (exp8!=null?exp8.exp:null); 
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 9 :
                    // RBuilder.g:2369:9: exp9= iterated_construct
                    {
                    root_0 = (ColsAST)adaptor.nil();

                    _last = (ColsAST)input.LT(1);
                    pushFollow(FOLLOW_iterated_construct_in_primitive_expression14630);
                    exp9=iterated_construct();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, exp9.getTree());
                    if ( state.backtracking==0 ) {
                       retval.exp = (exp9!=null?exp9.exp:null); 
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 10 :
                    // RBuilder.g:2370:9: exp10= tagged_cartesian_product_type_expression
                    {
                    root_0 = (ColsAST)adaptor.nil();

                    _last = (ColsAST)input.LT(1);
                    pushFollow(FOLLOW_tagged_cartesian_product_type_expression_in_primitive_expression14644);
                    exp10=tagged_cartesian_product_type_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, exp10.getTree());
                    if ( state.backtracking==0 ) {
                       retval.exp = (exp10!=null?exp10.exp:null); 
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }
            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "primitive_expression"

    public static class tagged_cartesian_product_type_expression_return extends TreeRuleReturnScope {
        public CrossTypeExpression exp = null;
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "tagged_cartesian_product_type_expression"
    // RBuilder.g:2374:1: tagged_cartesian_product_type_expression returns [CrossTypeExpression exp = null] : id= CARTPROD (varList= cartprod_variable_declaration_group SEMICOLON )+ END ;
    public final RBuilder.tagged_cartesian_product_type_expression_return tagged_cartesian_product_type_expression() throws RecognitionException {
        RBuilder.tagged_cartesian_product_type_expression_return retval = new RBuilder.tagged_cartesian_product_type_expression_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        ColsAST _first_0 = null;
        ColsAST _last = null;

        ColsAST id=null;
        ColsAST SEMICOLON151=null;
        ColsAST END152=null;
        RBuilder.cartprod_variable_declaration_group_return varList = null;


        ColsAST id_tree=null;
        ColsAST SEMICOLON151_tree=null;
        ColsAST END152_tree=null;

        try {
            // RBuilder.g:2376:5: (id= CARTPROD (varList= cartprod_variable_declaration_group SEMICOLON )+ END )
            // RBuilder.g:2376:9: id= CARTPROD (varList= cartprod_variable_declaration_group SEMICOLON )+ END
            {
            root_0 = (ColsAST)adaptor.nil();

            _last = (ColsAST)input.LT(1);
            id=(ColsAST)match(input,CARTPROD,FOLLOW_CARTPROD_in_tagged_cartesian_product_type_expression14681); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            id_tree = (ColsAST)adaptor.dupNode(id);

            root_0 = (ColsAST)adaptor.becomeRoot(id_tree, root_0);
            }
            if ( state.backtracking==0 ) {
               retval.exp = new CrossTypeExpression(getLocation(id)); 
            }
            // RBuilder.g:2377:9: (varList= cartprod_variable_declaration_group SEMICOLON )+
            int cnt211=0;
            loop211:
            do {
                int alt211=2;
                int LA211_0 = input.LA(1);

                if ( (LA211_0==VAR) ) {
                    alt211=1;
                }


                switch (alt211) {
            	case 1 :
            	    // RBuilder.g:2377:10: varList= cartprod_variable_declaration_group SEMICOLON
            	    {
            	    _last = (ColsAST)input.LT(1);
            	    pushFollow(FOLLOW_cartprod_variable_declaration_group_in_tagged_cartesian_product_type_expression14698);
            	    varList=cartprod_variable_declaration_group();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) 
            	    adaptor.addChild(root_0, varList.getTree());
            	    _last = (ColsAST)input.LT(1);
            	    SEMICOLON151=(ColsAST)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_tagged_cartesian_product_type_expression14700); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {

            	                    for (MathVarDec d : (varList!=null?varList.vars:null)) {
            	                      retval.exp.addTaggedField(d.getName(), 
            	                          ((ArbitraryExpTy) d.getTy()).getArbitraryExp());
            	                    }
            	                  
            	    }

            	    if ( state.backtracking==0 ) {
            	    }
            	    }
            	    break;

            	default :
            	    if ( cnt211 >= 1 ) break loop211;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(211, input);
                        throw eee;
                }
                cnt211++;
            } while (true);

            _last = (ColsAST)input.LT(1);
            END152=(ColsAST)match(input,END,FOLLOW_END_in_tagged_cartesian_product_type_expression14736); if (state.failed) return retval;

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "tagged_cartesian_product_type_expression"

    public static class dot_expression_return extends TreeRuleReturnScope {
        public Exp exp = null;
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "dot_expression"
    // RBuilder.g:2391:1: dot_expression returns [Exp exp = null] : (exp1= function_expression | ^( DOT (seg= function_expression ) (seg1= clean_function_expression )* ) );
    public final RBuilder.dot_expression_return dot_expression() throws RecognitionException {
        RBuilder.dot_expression_return retval = new RBuilder.dot_expression_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        ColsAST _first_0 = null;
        ColsAST _last = null;

        ColsAST DOT153=null;
        RBuilder.function_expression_return exp1 = null;

        RBuilder.function_expression_return seg = null;

        RBuilder.clean_function_expression_return seg1 = null;


        ColsAST DOT153_tree=null;


            edu.clemson.cs.r2jt.collections.List<Exp> segs = new edu.clemson.cs.r2jt.collections.List<Exp>("Exp");
            Exp sem = null;

        try {
            // RBuilder.g:2396:5: (exp1= function_expression | ^( DOT (seg= function_expression ) (seg1= clean_function_expression )* ) )
            int alt213=2;
            int LA213_0 = input.LA(1);

            if ( (LA213_0==IDENTIFIER||LA213_0==HASH||LA213_0==FUNCTION) ) {
                alt213=1;
            }
            else if ( (LA213_0==DOT) ) {
                alt213=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 213, 0, input);

                throw nvae;
            }
            switch (alt213) {
                case 1 :
                    // RBuilder.g:2396:9: exp1= function_expression
                    {
                    root_0 = (ColsAST)adaptor.nil();

                    _last = (ColsAST)input.LT(1);
                    pushFollow(FOLLOW_function_expression_in_dot_expression14765);
                    exp1=function_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, exp1.getTree());
                    if ( state.backtracking==0 ) {
                       retval.exp = (exp1!=null?exp1.exp:null); 
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // RBuilder.g:2397:9: ^( DOT (seg= function_expression ) (seg1= clean_function_expression )* )
                    {
                    root_0 = (ColsAST)adaptor.nil();

                    _last = (ColsAST)input.LT(1);
                    {
                    ColsAST _save_last_1 = _last;
                    ColsAST _first_1 = null;
                    ColsAST root_1 = (ColsAST)adaptor.nil();_last = (ColsAST)input.LT(1);
                    DOT153=(ColsAST)match(input,DOT,FOLLOW_DOT_in_dot_expression14778); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DOT153_tree = (ColsAST)adaptor.dupNode(DOT153);

                    root_1 = (ColsAST)adaptor.becomeRoot(DOT153_tree, root_1);
                    }


                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    // RBuilder.g:2397:15: (seg= function_expression )
                    // RBuilder.g:2397:16: seg= function_expression
                    {
                    _last = (ColsAST)input.LT(1);
                    pushFollow(FOLLOW_function_expression_in_dot_expression14783);
                    seg=function_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, seg.getTree());
                    if ( state.backtracking==0 ) {
                       segs.add((seg!=null?seg.exp:null)); 
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }

                    // RBuilder.g:2398:13: (seg1= clean_function_expression )*
                    loop212:
                    do {
                        int alt212=2;
                        int LA212_0 = input.LA(1);

                        if ( (LA212_0==IDENTIFIER||LA212_0==FUNCTION) ) {
                            alt212=1;
                        }


                        switch (alt212) {
                    	case 1 :
                    	    // RBuilder.g:2398:13: seg1= clean_function_expression
                    	    {
                    	    _last = (ColsAST)input.LT(1);
                    	    pushFollow(FOLLOW_clean_function_expression_in_dot_expression14798);
                    	    seg1=clean_function_expression();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) 
                    	    adaptor.addChild(root_1, seg1.getTree());

                    	    if ( state.backtracking==0 ) {
                    	    }
                    	    }
                    	    break;

                    	default :
                    	    break loop212;
                        }
                    } while (true);

                    if ( state.backtracking==0 ) {
                       segs.add((seg1!=null?seg1.exp:null)); 
                    }

                    match(input, Token.UP, null); if (state.failed) return retval;adaptor.addChild(root_0, root_1);_last = _save_last_1;
                    }

                    if ( state.backtracking==0 ) {
                       retval.exp = new DotExp(getLocation(DOT153), segs, sem); 
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }
            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "dot_expression"

    public static class function_expression_return extends TreeRuleReturnScope {
        public Exp exp = null;
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "function_expression"
    // RBuilder.g:2402:1: function_expression returns [Exp exp = null] : (exp1= clean_function_expression | ^( HASH exp2= clean_function_expression ) );
    public final RBuilder.function_expression_return function_expression() throws RecognitionException {
        RBuilder.function_expression_return retval = new RBuilder.function_expression_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        ColsAST _first_0 = null;
        ColsAST _last = null;

        ColsAST HASH154=null;
        RBuilder.clean_function_expression_return exp1 = null;

        RBuilder.clean_function_expression_return exp2 = null;


        ColsAST HASH154_tree=null;

        try {
            // RBuilder.g:2403:5: (exp1= clean_function_expression | ^( HASH exp2= clean_function_expression ) )
            int alt214=2;
            int LA214_0 = input.LA(1);

            if ( (LA214_0==IDENTIFIER||LA214_0==FUNCTION) ) {
                alt214=1;
            }
            else if ( (LA214_0==HASH) ) {
                alt214=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 214, 0, input);

                throw nvae;
            }
            switch (alt214) {
                case 1 :
                    // RBuilder.g:2403:9: exp1= clean_function_expression
                    {
                    root_0 = (ColsAST)adaptor.nil();

                    _last = (ColsAST)input.LT(1);
                    pushFollow(FOLLOW_clean_function_expression_in_function_expression14837);
                    exp1=clean_function_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, exp1.getTree());
                    if ( state.backtracking==0 ) {
                       retval.exp = (exp1!=null?exp1.exp:null); 
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // RBuilder.g:2404:9: ^( HASH exp2= clean_function_expression )
                    {
                    root_0 = (ColsAST)adaptor.nil();

                    _last = (ColsAST)input.LT(1);
                    {
                    ColsAST _save_last_1 = _last;
                    ColsAST _first_1 = null;
                    ColsAST root_1 = (ColsAST)adaptor.nil();_last = (ColsAST)input.LT(1);
                    HASH154=(ColsAST)match(input,HASH,FOLLOW_HASH_in_function_expression14850); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    HASH154_tree = (ColsAST)adaptor.dupNode(HASH154);

                    root_1 = (ColsAST)adaptor.becomeRoot(HASH154_tree, root_1);
                    }


                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    _last = (ColsAST)input.LT(1);
                    pushFollow(FOLLOW_clean_function_expression_in_function_expression14854);
                    exp2=clean_function_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, exp2.getTree());

                    match(input, Token.UP, null); if (state.failed) return retval;adaptor.addChild(root_0, root_1);_last = _save_last_1;
                    }

                    if ( state.backtracking==0 ) {
                       retval.exp = new OldExp(getLocation(HASH154), (exp2!=null?exp2.exp:null)); 
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }
            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "function_expression"

    public static class clean_function_expression_return extends TreeRuleReturnScope {
        public Exp exp = null;
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "clean_function_expression"
    // RBuilder.g:2408:1: clean_function_expression returns [Exp exp = null] : (ps= ident | ^( FUNCTION ps= ident (hat= hat_expression )? (aGrp= function_argument_list )+ ) );
    public final RBuilder.clean_function_expression_return clean_function_expression() throws RecognitionException {
        RBuilder.clean_function_expression_return retval = new RBuilder.clean_function_expression_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        ColsAST _first_0 = null;
        ColsAST _last = null;

        ColsAST FUNCTION155=null;
        RBuilder.ident_return ps = null;

        RBuilder.hat_expression_return hat = null;

        RBuilder.function_argument_list_return aGrp = null;


        ColsAST FUNCTION155_tree=null;


            PosSymbol qual = null; //dummy
            edu.clemson.cs.r2jt.collections.List<FunctionArgList> aGrps = new edu.clemson.cs.r2jt.collections.List<FunctionArgList>("FunctionArgList");

        try {
            // RBuilder.g:2413:5: (ps= ident | ^( FUNCTION ps= ident (hat= hat_expression )? (aGrp= function_argument_list )+ ) )
            int alt217=2;
            int LA217_0 = input.LA(1);

            if ( (LA217_0==IDENTIFIER) ) {
                alt217=1;
            }
            else if ( (LA217_0==FUNCTION) ) {
                alt217=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 217, 0, input);

                throw nvae;
            }
            switch (alt217) {
                case 1 :
                    // RBuilder.g:2413:9: ps= ident
                    {
                    root_0 = (ColsAST)adaptor.nil();

                    _last = (ColsAST)input.LT(1);
                    pushFollow(FOLLOW_ident_in_clean_function_expression14894);
                    ps=ident();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, ps.getTree());
                    if ( state.backtracking==0 ) {
                       retval.exp = new VarExp(getLocation((ColsAST)ps.getTree()), qual, (ps!=null?ps.ps:null)); 
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // RBuilder.g:2415:9: ^( FUNCTION ps= ident (hat= hat_expression )? (aGrp= function_argument_list )+ )
                    {
                    root_0 = (ColsAST)adaptor.nil();

                    _last = (ColsAST)input.LT(1);
                    {
                    ColsAST _save_last_1 = _last;
                    ColsAST _first_1 = null;
                    ColsAST root_1 = (ColsAST)adaptor.nil();_last = (ColsAST)input.LT(1);
                    FUNCTION155=(ColsAST)match(input,FUNCTION,FOLLOW_FUNCTION_in_clean_function_expression14915); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    FUNCTION155_tree = (ColsAST)adaptor.dupNode(FUNCTION155);

                    root_1 = (ColsAST)adaptor.becomeRoot(FUNCTION155_tree, root_1);
                    }


                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    _last = (ColsAST)input.LT(1);
                    pushFollow(FOLLOW_ident_in_clean_function_expression14919);
                    ps=ident();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, ps.getTree());
                    // RBuilder.g:2415:29: (hat= hat_expression )?
                    int alt215=2;
                    int LA215_0 = input.LA(1);

                    if ( (LA215_0==CARAT) ) {
                        alt215=1;
                    }
                    switch (alt215) {
                        case 1 :
                            // RBuilder.g:2415:30: hat= hat_expression
                            {
                            _last = (ColsAST)input.LT(1);
                            pushFollow(FOLLOW_hat_expression_in_clean_function_expression14924);
                            hat=hat_expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) 
                            adaptor.addChild(root_1, hat.getTree());

                            if ( state.backtracking==0 ) {
                            }
                            }
                            break;

                    }

                    // RBuilder.g:2416:9: (aGrp= function_argument_list )+
                    int cnt216=0;
                    loop216:
                    do {
                        int alt216=2;
                        int LA216_0 = input.LA(1);

                        if ( (LA216_0==PARAMS) ) {
                            alt216=1;
                        }


                        switch (alt216) {
                    	case 1 :
                    	    // RBuilder.g:2416:10: aGrp= function_argument_list
                    	    {
                    	    _last = (ColsAST)input.LT(1);
                    	    pushFollow(FOLLOW_function_argument_list_in_clean_function_expression14939);
                    	    aGrp=function_argument_list();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) 
                    	    adaptor.addChild(root_1, aGrp.getTree());
                    	    if ( state.backtracking==0 ) {
                    	       aGrps.add((aGrp!=null?aGrp.list:null)); 
                    	    }

                    	    if ( state.backtracking==0 ) {
                    	    }
                    	    }
                    	    break;

                    	default :
                    	    if ( cnt216 >= 1 ) break loop216;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(216, input);
                                throw eee;
                        }
                        cnt216++;
                    } while (true);


                    match(input, Token.UP, null); if (state.failed) return retval;adaptor.addChild(root_0, root_1);_last = _save_last_1;
                    }

                    if ( state.backtracking==0 ) {
                       retval.exp = new FunctionExp(getLocation(FUNCTION155), qual, (ps!=null?ps.ps:null), (hat!=null?hat.exp:null), aGrps); 
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }
            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "clean_function_expression"

    public static class hat_expression_return extends TreeRuleReturnScope {
        public Exp exp = null;
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "hat_expression"
    // RBuilder.g:2420:1: hat_expression returns [Exp exp = null] : ^( CARAT (exp1= qualified_ident | exp2= adding_expression ) ) ;
    public final RBuilder.hat_expression_return hat_expression() throws RecognitionException {
        RBuilder.hat_expression_return retval = new RBuilder.hat_expression_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        ColsAST _first_0 = null;
        ColsAST _last = null;

        ColsAST CARAT156=null;
        RBuilder.qualified_ident_return exp1 = null;

        RBuilder.adding_expression_return exp2 = null;


        ColsAST CARAT156_tree=null;

        try {
            // RBuilder.g:2421:5: ( ^( CARAT (exp1= qualified_ident | exp2= adding_expression ) ) )
            // RBuilder.g:2421:9: ^( CARAT (exp1= qualified_ident | exp2= adding_expression ) )
            {
            root_0 = (ColsAST)adaptor.nil();

            _last = (ColsAST)input.LT(1);
            {
            ColsAST _save_last_1 = _last;
            ColsAST _first_1 = null;
            ColsAST root_1 = (ColsAST)adaptor.nil();_last = (ColsAST)input.LT(1);
            CARAT156=(ColsAST)match(input,CARAT,FOLLOW_CARAT_in_hat_expression14978); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            CARAT156_tree = (ColsAST)adaptor.dupNode(CARAT156);

            root_1 = (ColsAST)adaptor.becomeRoot(CARAT156_tree, root_1);
            }


            match(input, Token.DOWN, null); if (state.failed) return retval;
            // RBuilder.g:2421:17: (exp1= qualified_ident | exp2= adding_expression )
            int alt218=2;
            alt218 = dfa218.predict(input);
            switch (alt218) {
                case 1 :
                    // RBuilder.g:2421:18: exp1= qualified_ident
                    {
                    _last = (ColsAST)input.LT(1);
                    pushFollow(FOLLOW_qualified_ident_in_hat_expression14983);
                    exp1=qualified_ident();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, exp1.getTree());
                    if ( state.backtracking==0 ) {
                       retval.exp = (exp1!=null?exp1.exp:null); 
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // RBuilder.g:2422:9: exp2= adding_expression
                    {
                    _last = (ColsAST)input.LT(1);
                    pushFollow(FOLLOW_adding_expression_in_hat_expression14997);
                    exp2=adding_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, exp2.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }

            if ( state.backtracking==0 ) {
               retval.exp = (exp2!=null?exp2.exp:null); 
            }

            match(input, Token.UP, null); if (state.failed) return retval;adaptor.addChild(root_0, root_1);_last = _save_last_1;
            }


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "hat_expression"

    public static class function_argument_list_return extends TreeRuleReturnScope {
        public FunctionArgList list = null;
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "function_argument_list"
    // RBuilder.g:2425:1: function_argument_list returns [FunctionArgList list = null] : ^( PARAMS (arg= math_expression )+ ) ;
    public final RBuilder.function_argument_list_return function_argument_list() throws RecognitionException {
        RBuilder.function_argument_list_return retval = new RBuilder.function_argument_list_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        ColsAST _first_0 = null;
        ColsAST _last = null;

        ColsAST PARAMS157=null;
        RBuilder.math_expression_return arg = null;


        ColsAST PARAMS157_tree=null;


            edu.clemson.cs.r2jt.collections.List<Exp> args = new edu.clemson.cs.r2jt.collections.List<Exp>("Exp");

        try {
            // RBuilder.g:2429:5: ( ^( PARAMS (arg= math_expression )+ ) )
            // RBuilder.g:2429:9: ^( PARAMS (arg= math_expression )+ )
            {
            root_0 = (ColsAST)adaptor.nil();

            _last = (ColsAST)input.LT(1);
            {
            ColsAST _save_last_1 = _last;
            ColsAST _first_1 = null;
            ColsAST root_1 = (ColsAST)adaptor.nil();_last = (ColsAST)input.LT(1);
            PARAMS157=(ColsAST)match(input,PARAMS,FOLLOW_PARAMS_in_function_argument_list15029); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            PARAMS157_tree = (ColsAST)adaptor.dupNode(PARAMS157);

            root_1 = (ColsAST)adaptor.becomeRoot(PARAMS157_tree, root_1);
            }


            match(input, Token.DOWN, null); if (state.failed) return retval;
            // RBuilder.g:2429:18: (arg= math_expression )+
            int cnt219=0;
            loop219:
            do {
                int alt219=2;
                int LA219_0 = input.LA(1);

                if ( (LA219_0==EXPR) ) {
                    alt219=1;
                }


                switch (alt219) {
            	case 1 :
            	    // RBuilder.g:2429:19: arg= math_expression
            	    {
            	    _last = (ColsAST)input.LT(1);
            	    pushFollow(FOLLOW_math_expression_in_function_argument_list15034);
            	    arg=math_expression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) 
            	    adaptor.addChild(root_1, arg.getTree());
            	    if ( state.backtracking==0 ) {
            	       args.add((arg!=null?arg.exp:null)); 
            	    }

            	    if ( state.backtracking==0 ) {
            	    }
            	    }
            	    break;

            	default :
            	    if ( cnt219 >= 1 ) break loop219;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(219, input);
                        throw eee;
                }
                cnt219++;
            } while (true);


            match(input, Token.UP, null); if (state.failed) return retval;adaptor.addChild(root_0, root_1);_last = _save_last_1;
            }

            if ( state.backtracking==0 ) {
               retval.list = new FunctionArgList(args); 
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "function_argument_list"

    public static class alternative_expression_return extends TreeRuleReturnScope {
        public AlternativeExp exp = null;
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "alternative_expression"
    // RBuilder.g:2437:1: alternative_expression returns [AlternativeExp exp = null] : ^( DBL_LBRACE (alt= alternative_expression_item )+ ) ;
    public final RBuilder.alternative_expression_return alternative_expression() throws RecognitionException {
        RBuilder.alternative_expression_return retval = new RBuilder.alternative_expression_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        ColsAST _first_0 = null;
        ColsAST _last = null;

        ColsAST DBL_LBRACE158=null;
        RBuilder.alternative_expression_item_return alt = null;


        ColsAST DBL_LBRACE158_tree=null;


            edu.clemson.cs.r2jt.collections.List<AltItemExp> alts = new edu.clemson.cs.r2jt.collections.List<AltItemExp>("AltItemExp");

        try {
            // RBuilder.g:2441:5: ( ^( DBL_LBRACE (alt= alternative_expression_item )+ ) )
            // RBuilder.g:2441:9: ^( DBL_LBRACE (alt= alternative_expression_item )+ )
            {
            root_0 = (ColsAST)adaptor.nil();

            _last = (ColsAST)input.LT(1);
            {
            ColsAST _save_last_1 = _last;
            ColsAST _first_1 = null;
            ColsAST root_1 = (ColsAST)adaptor.nil();_last = (ColsAST)input.LT(1);
            DBL_LBRACE158=(ColsAST)match(input,DBL_LBRACE,FOLLOW_DBL_LBRACE_in_alternative_expression15081); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            DBL_LBRACE158_tree = (ColsAST)adaptor.dupNode(DBL_LBRACE158);

            root_1 = (ColsAST)adaptor.becomeRoot(DBL_LBRACE158_tree, root_1);
            }


            match(input, Token.DOWN, null); if (state.failed) return retval;
            // RBuilder.g:2441:22: (alt= alternative_expression_item )+
            int cnt220=0;
            loop220:
            do {
                int alt220=2;
                int LA220_0 = input.LA(1);

                if ( (LA220_0==IF||LA220_0==OTHERWISE) ) {
                    alt220=1;
                }


                switch (alt220) {
            	case 1 :
            	    // RBuilder.g:2441:23: alt= alternative_expression_item
            	    {
            	    _last = (ColsAST)input.LT(1);
            	    pushFollow(FOLLOW_alternative_expression_item_in_alternative_expression15086);
            	    alt=alternative_expression_item();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) 
            	    adaptor.addChild(root_1, alt.getTree());
            	    if ( state.backtracking==0 ) {
            	       alts.add((alt!=null?alt.exp:null)); 
            	    }

            	    if ( state.backtracking==0 ) {
            	    }
            	    }
            	    break;

            	default :
            	    if ( cnt220 >= 1 ) break loop220;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(220, input);
                        throw eee;
                }
                cnt220++;
            } while (true);


            match(input, Token.UP, null); if (state.failed) return retval;adaptor.addChild(root_0, root_1);_last = _save_last_1;
            }

            if ( state.backtracking==0 ) {
               retval.exp = new AlternativeExp(getLocation(DBL_LBRACE158), alts); 
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "alternative_expression"

    public static class alternative_expression_item_return extends TreeRuleReturnScope {
        public AltItemExp exp = null;
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "alternative_expression_item"
    // RBuilder.g:2445:1: alternative_expression_item returns [AltItemExp exp = null] : ( ^(id= IF assign= adding_expression test= relational_expression ) | ^(id= OTHERWISE assign= adding_expression ) ) ;
    public final RBuilder.alternative_expression_item_return alternative_expression_item() throws RecognitionException {
        RBuilder.alternative_expression_item_return retval = new RBuilder.alternative_expression_item_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        ColsAST _first_0 = null;
        ColsAST _last = null;

        ColsAST id=null;
        RBuilder.adding_expression_return assign = null;

        RBuilder.relational_expression_return test = null;


        ColsAST id_tree=null;

        try {
            // RBuilder.g:2446:5: ( ( ^(id= IF assign= adding_expression test= relational_expression ) | ^(id= OTHERWISE assign= adding_expression ) ) )
            // RBuilder.g:2446:9: ( ^(id= IF assign= adding_expression test= relational_expression ) | ^(id= OTHERWISE assign= adding_expression ) )
            {
            root_0 = (ColsAST)adaptor.nil();

            // RBuilder.g:2446:9: ( ^(id= IF assign= adding_expression test= relational_expression ) | ^(id= OTHERWISE assign= adding_expression ) )
            int alt221=2;
            int LA221_0 = input.LA(1);

            if ( (LA221_0==IF) ) {
                alt221=1;
            }
            else if ( (LA221_0==OTHERWISE) ) {
                alt221=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 221, 0, input);

                throw nvae;
            }
            switch (alt221) {
                case 1 :
                    // RBuilder.g:2446:13: ^(id= IF assign= adding_expression test= relational_expression )
                    {
                    _last = (ColsAST)input.LT(1);
                    {
                    ColsAST _save_last_1 = _last;
                    ColsAST _first_1 = null;
                    ColsAST root_1 = (ColsAST)adaptor.nil();_last = (ColsAST)input.LT(1);
                    id=(ColsAST)match(input,IF,FOLLOW_IF_in_alternative_expression_item15131); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    id_tree = (ColsAST)adaptor.dupNode(id);

                    root_1 = (ColsAST)adaptor.becomeRoot(id_tree, root_1);
                    }


                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    _last = (ColsAST)input.LT(1);
                    pushFollow(FOLLOW_adding_expression_in_alternative_expression_item15135);
                    assign=adding_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, assign.getTree());
                    _last = (ColsAST)input.LT(1);
                    pushFollow(FOLLOW_relational_expression_in_alternative_expression_item15139);
                    test=relational_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, test.getTree());

                    match(input, Token.UP, null); if (state.failed) return retval;adaptor.addChild(root_0, root_1);_last = _save_last_1;
                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // RBuilder.g:2447:13: ^(id= OTHERWISE assign= adding_expression )
                    {
                    _last = (ColsAST)input.LT(1);
                    {
                    ColsAST _save_last_1 = _last;
                    ColsAST _first_1 = null;
                    ColsAST root_1 = (ColsAST)adaptor.nil();_last = (ColsAST)input.LT(1);
                    id=(ColsAST)match(input,OTHERWISE,FOLLOW_OTHERWISE_in_alternative_expression_item15157); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    id_tree = (ColsAST)adaptor.dupNode(id);

                    root_1 = (ColsAST)adaptor.becomeRoot(id_tree, root_1);
                    }


                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    _last = (ColsAST)input.LT(1);
                    pushFollow(FOLLOW_adding_expression_in_alternative_expression_item15161);
                    assign=adding_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, assign.getTree());

                    match(input, Token.UP, null); if (state.failed) return retval;adaptor.addChild(root_0, root_1);_last = _save_last_1;
                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }

            if ( state.backtracking==0 ) {
               retval.exp = new AltItemExp(getLocation(id), (test!=null?test.exp:null), (assign!=null?assign.exp:null)); 
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "alternative_expression_item"

    public static class iterated_construct_return extends TreeRuleReturnScope {
        public IterativeExp exp = null;
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "iterated_construct"
    // RBuilder.g:2452:1: iterated_construct returns [IterativeExp exp = null] : ^( ITERATION inm= ident vnm= ident vty= math_type_expression (where= where_clause )? body= math_expression ) ;
    public final RBuilder.iterated_construct_return iterated_construct() throws RecognitionException {
        RBuilder.iterated_construct_return retval = new RBuilder.iterated_construct_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        ColsAST _first_0 = null;
        ColsAST _last = null;

        ColsAST ITERATION159=null;
        RBuilder.ident_return inm = null;

        RBuilder.ident_return vnm = null;

        RBuilder.math_type_expression_return vty = null;

        RBuilder.where_clause_return where = null;

        RBuilder.math_expression_return body = null;


        ColsAST ITERATION159_tree=null;


            int op = 0;
            MathVarDec var = null;

        try {
            // RBuilder.g:2457:5: ( ^( ITERATION inm= ident vnm= ident vty= math_type_expression (where= where_clause )? body= math_expression ) )
            // RBuilder.g:2457:9: ^( ITERATION inm= ident vnm= ident vty= math_type_expression (where= where_clause )? body= math_expression )
            {
            root_0 = (ColsAST)adaptor.nil();

            _last = (ColsAST)input.LT(1);
            {
            ColsAST _save_last_1 = _last;
            ColsAST _first_1 = null;
            ColsAST root_1 = (ColsAST)adaptor.nil();_last = (ColsAST)input.LT(1);
            ITERATION159=(ColsAST)match(input,ITERATION,FOLLOW_ITERATION_in_iterated_construct15212); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ITERATION159_tree = (ColsAST)adaptor.dupNode(ITERATION159);

            root_1 = (ColsAST)adaptor.becomeRoot(ITERATION159_tree, root_1);
            }


            match(input, Token.DOWN, null); if (state.failed) return retval;
            _last = (ColsAST)input.LT(1);
            pushFollow(FOLLOW_ident_in_iterated_construct15216);
            inm=ident();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, inm.getTree());
            _last = (ColsAST)input.LT(1);
            pushFollow(FOLLOW_ident_in_iterated_construct15220);
            vnm=ident();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, vnm.getTree());
            _last = (ColsAST)input.LT(1);
            pushFollow(FOLLOW_math_type_expression_in_iterated_construct15236);
            vty=math_type_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, vty.getTree());
            // RBuilder.g:2459:13: (where= where_clause )?
            int alt222=2;
            int LA222_0 = input.LA(1);

            if ( (LA222_0==WHERE) ) {
                alt222=1;
            }
            switch (alt222) {
                case 1 :
                    // RBuilder.g:2459:14: where= where_clause
                    {
                    _last = (ColsAST)input.LT(1);
                    pushFollow(FOLLOW_where_clause_in_iterated_construct15254);
                    where=where_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, where.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }

            _last = (ColsAST)input.LT(1);
            pushFollow(FOLLOW_math_expression_in_iterated_construct15272);
            body=math_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, body.getTree());

            match(input, Token.UP, null); if (state.failed) return retval;adaptor.addChild(root_0, root_1);_last = _save_last_1;
            }

            if ( state.backtracking==0 ) {
                 op = getIterativeOp((inm!=null?inm.ps:null));
                          var = new MathVarDec((vnm!=null?vnm.ps:null), (vty!=null?vty.ty:null));
                          retval.exp = new IterativeExp(getLocation(ITERATION159), op, var, (where!=null?where.exp:null), (body!=null?body.exp:null));
                      
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "iterated_construct"

    public static class lambda_expression_return extends TreeRuleReturnScope {
        public LambdaExp exp = null;
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "lambda_expression"
    // RBuilder.g:2468:1: lambda_expression returns [LambdaExp exp = null] : ^( LAMBDA ps= ident (qid= certain_qualified_ident | tnm1= ident ) body= math_expression ) ;
    public final RBuilder.lambda_expression_return lambda_expression() throws RecognitionException {
        RBuilder.lambda_expression_return retval = new RBuilder.lambda_expression_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        ColsAST _first_0 = null;
        ColsAST _last = null;

        ColsAST LAMBDA160=null;
        RBuilder.ident_return ps = null;

        RBuilder.certain_qualified_ident_return qid = null;

        RBuilder.ident_return tnm1 = null;

        RBuilder.math_expression_return body = null;


        ColsAST LAMBDA160_tree=null;


            Ty ty = null;
            PosSymbol tql = null;
            PosSymbol tnm = null;

        try {
            // RBuilder.g:2474:5: ( ^( LAMBDA ps= ident (qid= certain_qualified_ident | tnm1= ident ) body= math_expression ) )
            // RBuilder.g:2474:9: ^( LAMBDA ps= ident (qid= certain_qualified_ident | tnm1= ident ) body= math_expression )
            {
            root_0 = (ColsAST)adaptor.nil();

            _last = (ColsAST)input.LT(1);
            {
            ColsAST _save_last_1 = _last;
            ColsAST _first_1 = null;
            ColsAST root_1 = (ColsAST)adaptor.nil();_last = (ColsAST)input.LT(1);
            LAMBDA160=(ColsAST)match(input,LAMBDA,FOLLOW_LAMBDA_in_lambda_expression15325); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LAMBDA160_tree = (ColsAST)adaptor.dupNode(LAMBDA160);

            root_1 = (ColsAST)adaptor.becomeRoot(LAMBDA160_tree, root_1);
            }


            match(input, Token.DOWN, null); if (state.failed) return retval;
            _last = (ColsAST)input.LT(1);
            pushFollow(FOLLOW_ident_in_lambda_expression15329);
            ps=ident();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, ps.getTree());
            // RBuilder.g:2475:13: (qid= certain_qualified_ident | tnm1= ident )
            int alt223=2;
            int LA223_0 = input.LA(1);

            if ( (LA223_0==IDENT) ) {
                alt223=1;
            }
            else if ( (LA223_0==IDENTIFIER) ) {
                alt223=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 223, 0, input);

                throw nvae;
            }
            switch (alt223) {
                case 1 :
                    // RBuilder.g:2475:17: qid= certain_qualified_ident
                    {
                    _last = (ColsAST)input.LT(1);
                    pushFollow(FOLLOW_certain_qualified_ident_in_lambda_expression15349);
                    qid=certain_qualified_ident();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, qid.getTree());
                    if ( state.backtracking==0 ) {
                       tql = (qid!=null?qid.exp:null).getQualifier(); tnm = (qid!=null?qid.exp:null).getName(); 
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // RBuilder.g:2477:17: tnm1= ident
                    {
                    _last = (ColsAST)input.LT(1);
                    pushFollow(FOLLOW_ident_in_lambda_expression15387);
                    tnm1=ident();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, tnm1.getTree());
                    if ( state.backtracking==0 ) {
                       tnm = (tnm1!=null?tnm1.ps:null); 
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }

            _last = (ColsAST)input.LT(1);
            pushFollow(FOLLOW_math_expression_in_lambda_expression15419);
            body=math_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, body.getTree());

            match(input, Token.UP, null); if (state.failed) return retval;adaptor.addChild(root_0, root_1);_last = _save_last_1;
            }

            if ( state.backtracking==0 ) {
                 ty = new NameTy(tql, tnm);
                          retval.exp = new LambdaExp(getLocation(LAMBDA160), (ps!=null?ps.ps:null), ty, (body!=null?body.exp:null));
                      
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "lambda_expression"

    public static class literal_expression_return extends TreeRuleReturnScope {
        public Exp exp = null;
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "literal_expression"
    // RBuilder.g:2486:1: literal_expression returns [Exp exp = null] : (exp1= qualified_numeric_literal | NUMERIC_LITERAL | CHARACTER_LITERAL | STRING_LITERAL );
    public final RBuilder.literal_expression_return literal_expression() throws RecognitionException {
        RBuilder.literal_expression_return retval = new RBuilder.literal_expression_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        ColsAST _first_0 = null;
        ColsAST _last = null;

        ColsAST NUMERIC_LITERAL161=null;
        ColsAST CHARACTER_LITERAL162=null;
        ColsAST STRING_LITERAL163=null;
        RBuilder.qualified_numeric_literal_return exp1 = null;


        ColsAST NUMERIC_LITERAL161_tree=null;
        ColsAST CHARACTER_LITERAL162_tree=null;
        ColsAST STRING_LITERAL163_tree=null;


            int ival = 0;
            double dval = 0.0;
            Character ch = null;
            String str = null;

        try {
            // RBuilder.g:2493:5: (exp1= qualified_numeric_literal | NUMERIC_LITERAL | CHARACTER_LITERAL | STRING_LITERAL )
            int alt224=4;
            switch ( input.LA(1) ) {
            case QUALNUM:
                {
                alt224=1;
                }
                break;
            case NUMERIC_LITERAL:
                {
                alt224=2;
                }
                break;
            case CHARACTER_LITERAL:
                {
                alt224=3;
                }
                break;
            case STRING_LITERAL:
                {
                alt224=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 224, 0, input);

                throw nvae;
            }

            switch (alt224) {
                case 1 :
                    // RBuilder.g:2493:9: exp1= qualified_numeric_literal
                    {
                    root_0 = (ColsAST)adaptor.nil();

                    _last = (ColsAST)input.LT(1);
                    pushFollow(FOLLOW_qualified_numeric_literal_in_literal_expression15468);
                    exp1=qualified_numeric_literal();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, exp1.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // RBuilder.g:2494:9: NUMERIC_LITERAL
                    {
                    root_0 = (ColsAST)adaptor.nil();

                    _last = (ColsAST)input.LT(1);
                    NUMERIC_LITERAL161=(ColsAST)match(input,NUMERIC_LITERAL,FOLLOW_NUMERIC_LITERAL_in_literal_expression15478); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NUMERIC_LITERAL161_tree = (ColsAST)adaptor.dupNode(NUMERIC_LITERAL161);

                    adaptor.addChild(root_0, NUMERIC_LITERAL161_tree);
                    }
                    if ( state.backtracking==0 ) {
                         str = NUMERIC_LITERAL161.getText();
                                  if (str.indexOf('.') == -1) { // a dot does not appear
                                      try {
                                          ival = (int)Integer.valueOf(str).intValue();
                                      } catch (Exception e) { ; } //FIX: add error here
                                      retval.exp = new IntegerExp(getLocation(NUMERIC_LITERAL161), null, ival);
                                  } else {
                                      try {
                                          dval = (double)Double.valueOf(str).doubleValue();
                                      } catch (Exception e) { ; } //FIX: add error here
                                      retval.exp = new DoubleExp(getLocation(NUMERIC_LITERAL161), dval);
                                  }
                              
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 3 :
                    // RBuilder.g:2508:9: CHARACTER_LITERAL
                    {
                    root_0 = (ColsAST)adaptor.nil();

                    _last = (ColsAST)input.LT(1);
                    CHARACTER_LITERAL162=(ColsAST)match(input,CHARACTER_LITERAL,FOLLOW_CHARACTER_LITERAL_in_literal_expression15498); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    CHARACTER_LITERAL162_tree = (ColsAST)adaptor.dupNode(CHARACTER_LITERAL162);

                    adaptor.addChild(root_0, CHARACTER_LITERAL162_tree);
                    }
                    if ( state.backtracking==0 ) {
                         str = CHARACTER_LITERAL162.getText();
                                  ch = new Character(str.charAt(1));
                                  retval.exp = new CharExp(getLocation(CHARACTER_LITERAL162), ch);
                              
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 4 :
                    // RBuilder.g:2513:9: STRING_LITERAL
                    {
                    root_0 = (ColsAST)adaptor.nil();

                    _last = (ColsAST)input.LT(1);
                    STRING_LITERAL163=(ColsAST)match(input,STRING_LITERAL,FOLLOW_STRING_LITERAL_in_literal_expression15518); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STRING_LITERAL163_tree = (ColsAST)adaptor.dupNode(STRING_LITERAL163);

                    adaptor.addChild(root_0, STRING_LITERAL163_tree);
                    }
                    if ( state.backtracking==0 ) {
                         str = STRING_LITERAL163.getText();
                                  retval.exp = new StringExp(getLocation(STRING_LITERAL163), str);
                              
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }
            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "literal_expression"

    public static class numeric_lit_return extends TreeRuleReturnScope {
        public Exp exp = null;
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "numeric_lit"
    // RBuilder.g:2519:1: numeric_lit returns [Exp exp = null] : NUMERIC_LITERAL ;
    public final RBuilder.numeric_lit_return numeric_lit() throws RecognitionException {
        RBuilder.numeric_lit_return retval = new RBuilder.numeric_lit_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        ColsAST _first_0 = null;
        ColsAST _last = null;

        ColsAST NUMERIC_LITERAL164=null;

        ColsAST NUMERIC_LITERAL164_tree=null;


          int ival = 0;
          double dval = 0.0;
          String str = null;

        try {
            // RBuilder.g:2525:5: ( NUMERIC_LITERAL )
            // RBuilder.g:2525:9: NUMERIC_LITERAL
            {
            root_0 = (ColsAST)adaptor.nil();

            _last = (ColsAST)input.LT(1);
            NUMERIC_LITERAL164=(ColsAST)match(input,NUMERIC_LITERAL,FOLLOW_NUMERIC_LITERAL_in_numeric_lit15559); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            NUMERIC_LITERAL164_tree = (ColsAST)adaptor.dupNode(NUMERIC_LITERAL164);

            adaptor.addChild(root_0, NUMERIC_LITERAL164_tree);
            }
            if ( state.backtracking==0 ) {
                 str = NUMERIC_LITERAL164.getText();
                          if (str.indexOf('.') == -1) { // a dot does not appear
                              try {
                                  ival = (int)Integer.valueOf(str).intValue();
                              } catch (Exception e) { ; } //FIX: add error here
                              retval.exp = new IntegerExp(getLocation(NUMERIC_LITERAL164), null, ival);
                          } else {
                              try {
                                  dval = (double)Double.valueOf(str).doubleValue();
                              } catch (Exception e) { ; } //FIX: add error here
                              retval.exp = new DoubleExp(getLocation(NUMERIC_LITERAL164), dval);
                          }
                      
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "numeric_lit"

    public static class qualified_numeric_literal_return extends TreeRuleReturnScope {
        public Exp exp = null;
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "qualified_numeric_literal"
    // RBuilder.g:2541:1: qualified_numeric_literal returns [Exp exp = null] : ^( QUALNUM qual= ident exp1= numeric_lit ) ;
    public final RBuilder.qualified_numeric_literal_return qualified_numeric_literal() throws RecognitionException {
        RBuilder.qualified_numeric_literal_return retval = new RBuilder.qualified_numeric_literal_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        ColsAST _first_0 = null;
        ColsAST _last = null;

        ColsAST QUALNUM165=null;
        RBuilder.ident_return qual = null;

        RBuilder.numeric_lit_return exp1 = null;


        ColsAST QUALNUM165_tree=null;

        try {
            // RBuilder.g:2542:5: ( ^( QUALNUM qual= ident exp1= numeric_lit ) )
            // RBuilder.g:2542:9: ^( QUALNUM qual= ident exp1= numeric_lit )
            {
            root_0 = (ColsAST)adaptor.nil();

            _last = (ColsAST)input.LT(1);
            {
            ColsAST _save_last_1 = _last;
            ColsAST _first_1 = null;
            ColsAST root_1 = (ColsAST)adaptor.nil();_last = (ColsAST)input.LT(1);
            QUALNUM165=(ColsAST)match(input,QUALNUM,FOLLOW_QUALNUM_in_qualified_numeric_literal15597); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            QUALNUM165_tree = (ColsAST)adaptor.dupNode(QUALNUM165);

            root_1 = (ColsAST)adaptor.becomeRoot(QUALNUM165_tree, root_1);
            }


            match(input, Token.DOWN, null); if (state.failed) return retval;
            _last = (ColsAST)input.LT(1);
            pushFollow(FOLLOW_ident_in_qualified_numeric_literal15601);
            qual=ident();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, qual.getTree());
            _last = (ColsAST)input.LT(1);
            pushFollow(FOLLOW_numeric_lit_in_qualified_numeric_literal15605);
            exp1=numeric_lit();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, exp1.getTree());
            if ( state.backtracking==0 ) {

                          if((exp1!=null?exp1.exp:null) instanceof IntegerExp) {
                            retval.exp = (exp1!=null?exp1.exp:null);
                            ((IntegerExp)retval.exp).setQualifier((qual!=null?qual.ps:null));
                          }
                      
            }

            match(input, Token.UP, null); if (state.failed) return retval;adaptor.addChild(root_0, root_1);_last = _save_last_1;
            }


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "qualified_numeric_literal"

    public static class nested_expression_return extends TreeRuleReturnScope {
        public Exp exp = null;
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nested_expression"
    // RBuilder.g:2552:1: nested_expression returns [Exp exp = null] : ^( NESTED exp1= math_expression ) ;
    public final RBuilder.nested_expression_return nested_expression() throws RecognitionException {
        RBuilder.nested_expression_return retval = new RBuilder.nested_expression_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        ColsAST _first_0 = null;
        ColsAST _last = null;

        ColsAST NESTED166=null;
        RBuilder.math_expression_return exp1 = null;


        ColsAST NESTED166_tree=null;

        try {
            // RBuilder.g:2553:5: ( ^( NESTED exp1= math_expression ) )
            // RBuilder.g:2553:9: ^( NESTED exp1= math_expression )
            {
            root_0 = (ColsAST)adaptor.nil();

            _last = (ColsAST)input.LT(1);
            {
            ColsAST _save_last_1 = _last;
            ColsAST _first_1 = null;
            ColsAST root_1 = (ColsAST)adaptor.nil();_last = (ColsAST)input.LT(1);
            NESTED166=(ColsAST)match(input,NESTED,FOLLOW_NESTED_in_nested_expression15649); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            NESTED166_tree = (ColsAST)adaptor.dupNode(NESTED166);

            root_1 = (ColsAST)adaptor.becomeRoot(NESTED166_tree, root_1);
            }


            match(input, Token.DOWN, null); if (state.failed) return retval;
            _last = (ColsAST)input.LT(1);
            pushFollow(FOLLOW_math_expression_in_nested_expression15653);
            exp1=math_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, exp1.getTree());

            match(input, Token.UP, null); if (state.failed) return retval;adaptor.addChild(root_0, root_1);_last = _save_last_1;
            }

            if ( state.backtracking==0 ) {
               retval.exp = (exp1!=null?exp1.exp:null);  
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nested_expression"

    public static class outfix_expression_return extends TreeRuleReturnScope {
        public OutfixExp exp = null;
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "outfix_expression"
    // RBuilder.g:2557:1: outfix_expression returns [OutfixExp exp = null] : ( ^(id= ANGLE arg1= infix_expression ) | ^(id= DBL_ANGLE arg2= math_expression ) | ^(id= BAR arg2= math_expression ) | ^(id= DBL_BAR arg2= math_expression ) ) ;
    public final RBuilder.outfix_expression_return outfix_expression() throws RecognitionException {
        RBuilder.outfix_expression_return retval = new RBuilder.outfix_expression_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        ColsAST _first_0 = null;
        ColsAST _last = null;

        ColsAST id=null;
        RBuilder.infix_expression_return arg1 = null;

        RBuilder.math_expression_return arg2 = null;


        ColsAST id_tree=null;


            int op = 0;
            Exp arg = null;

        try {
            // RBuilder.g:2562:5: ( ( ^(id= ANGLE arg1= infix_expression ) | ^(id= DBL_ANGLE arg2= math_expression ) | ^(id= BAR arg2= math_expression ) | ^(id= DBL_BAR arg2= math_expression ) ) )
            // RBuilder.g:2562:9: ( ^(id= ANGLE arg1= infix_expression ) | ^(id= DBL_ANGLE arg2= math_expression ) | ^(id= BAR arg2= math_expression ) | ^(id= DBL_BAR arg2= math_expression ) )
            {
            root_0 = (ColsAST)adaptor.nil();

            // RBuilder.g:2562:9: ( ^(id= ANGLE arg1= infix_expression ) | ^(id= DBL_ANGLE arg2= math_expression ) | ^(id= BAR arg2= math_expression ) | ^(id= DBL_BAR arg2= math_expression ) )
            int alt225=4;
            switch ( input.LA(1) ) {
            case ANGLE:
                {
                alt225=1;
                }
                break;
            case DBL_ANGLE:
                {
                alt225=2;
                }
                break;
            case BAR:
                {
                alt225=3;
                }
                break;
            case DBL_BAR:
                {
                alt225=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 225, 0, input);

                throw nvae;
            }

            switch (alt225) {
                case 1 :
                    // RBuilder.g:2562:13: ^(id= ANGLE arg1= infix_expression )
                    {
                    _last = (ColsAST)input.LT(1);
                    {
                    ColsAST _save_last_1 = _last;
                    ColsAST _first_1 = null;
                    ColsAST root_1 = (ColsAST)adaptor.nil();_last = (ColsAST)input.LT(1);
                    id=(ColsAST)match(input,ANGLE,FOLLOW_ANGLE_in_outfix_expression15698); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    id_tree = (ColsAST)adaptor.dupNode(id);

                    root_1 = (ColsAST)adaptor.becomeRoot(id_tree, root_1);
                    }

                    if ( state.backtracking==0 ) {
                       op = OutfixExp.ANGLE; 
                    }

                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    _last = (ColsAST)input.LT(1);
                    pushFollow(FOLLOW_infix_expression_in_outfix_expression15704);
                    arg1=infix_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, arg1.getTree());

                    match(input, Token.UP, null); if (state.failed) return retval;adaptor.addChild(root_0, root_1);_last = _save_last_1;
                    }

                    if ( state.backtracking==0 ) {
                       arg = (arg1!=null?arg1.exp:null); 
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // RBuilder.g:2563:13: ^(id= DBL_ANGLE arg2= math_expression )
                    {
                    _last = (ColsAST)input.LT(1);
                    {
                    ColsAST _save_last_1 = _last;
                    ColsAST _first_1 = null;
                    ColsAST root_1 = (ColsAST)adaptor.nil();_last = (ColsAST)input.LT(1);
                    id=(ColsAST)match(input,DBL_ANGLE,FOLLOW_DBL_ANGLE_in_outfix_expression15724); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    id_tree = (ColsAST)adaptor.dupNode(id);

                    root_1 = (ColsAST)adaptor.becomeRoot(id_tree, root_1);
                    }

                    if ( state.backtracking==0 ) {
                       op = OutfixExp.DBL_ANGLE; 
                    }

                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    _last = (ColsAST)input.LT(1);
                    pushFollow(FOLLOW_math_expression_in_outfix_expression15730);
                    arg2=math_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, arg2.getTree());

                    match(input, Token.UP, null); if (state.failed) return retval;adaptor.addChild(root_0, root_1);_last = _save_last_1;
                    }

                    if ( state.backtracking==0 ) {
                       arg = (arg2!=null?arg2.exp:null); 
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 3 :
                    // RBuilder.g:2564:13: ^(id= BAR arg2= math_expression )
                    {
                    _last = (ColsAST)input.LT(1);
                    {
                    ColsAST _save_last_1 = _last;
                    ColsAST _first_1 = null;
                    ColsAST root_1 = (ColsAST)adaptor.nil();_last = (ColsAST)input.LT(1);
                    id=(ColsAST)match(input,BAR,FOLLOW_BAR_in_outfix_expression15750); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    id_tree = (ColsAST)adaptor.dupNode(id);

                    root_1 = (ColsAST)adaptor.becomeRoot(id_tree, root_1);
                    }

                    if ( state.backtracking==0 ) {
                       op = OutfixExp.BAR; 
                    }

                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    _last = (ColsAST)input.LT(1);
                    pushFollow(FOLLOW_math_expression_in_outfix_expression15756);
                    arg2=math_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, arg2.getTree());

                    match(input, Token.UP, null); if (state.failed) return retval;adaptor.addChild(root_0, root_1);_last = _save_last_1;
                    }

                    if ( state.backtracking==0 ) {
                       arg = (arg2!=null?arg2.exp:null); 
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 4 :
                    // RBuilder.g:2565:13: ^(id= DBL_BAR arg2= math_expression )
                    {
                    _last = (ColsAST)input.LT(1);
                    {
                    ColsAST _save_last_1 = _last;
                    ColsAST _first_1 = null;
                    ColsAST root_1 = (ColsAST)adaptor.nil();_last = (ColsAST)input.LT(1);
                    id=(ColsAST)match(input,DBL_BAR,FOLLOW_DBL_BAR_in_outfix_expression15776); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    id_tree = (ColsAST)adaptor.dupNode(id);

                    root_1 = (ColsAST)adaptor.becomeRoot(id_tree, root_1);
                    }

                    if ( state.backtracking==0 ) {
                       op = OutfixExp.DBL_BAR; 
                    }

                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    _last = (ColsAST)input.LT(1);
                    pushFollow(FOLLOW_math_expression_in_outfix_expression15782);
                    arg2=math_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, arg2.getTree());

                    match(input, Token.UP, null); if (state.failed) return retval;adaptor.addChild(root_0, root_1);_last = _save_last_1;
                    }

                    if ( state.backtracking==0 ) {
                       arg = (arg2!=null?arg2.exp:null); 
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }

            if ( state.backtracking==0 ) {
               retval.exp = new OutfixExp(getLocation(id), op, arg); 
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "outfix_expression"

    public static class parenthesized_expression_return extends TreeRuleReturnScope {
        public Exp exp = null;
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "parenthesized_expression"
    // RBuilder.g:2570:1: parenthesized_expression returns [Exp exp = null] : exp1= math_expression ;
    public final RBuilder.parenthesized_expression_return parenthesized_expression() throws RecognitionException {
        RBuilder.parenthesized_expression_return retval = new RBuilder.parenthesized_expression_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        ColsAST _first_0 = null;
        ColsAST _last = null;

        RBuilder.math_expression_return exp1 = null;



        try {
            // RBuilder.g:2571:5: (exp1= math_expression )
            // RBuilder.g:2571:9: exp1= math_expression
            {
            root_0 = (ColsAST)adaptor.nil();

            _last = (ColsAST)input.LT(1);
            pushFollow(FOLLOW_math_expression_in_parenthesized_expression15830);
            exp1=math_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, exp1.getTree());
            if ( state.backtracking==0 ) {
               retval.exp = (exp1!=null?exp1.exp:null);  
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "parenthesized_expression"

    public static class set_constructor_return extends TreeRuleReturnScope {
        public SetExp exp = null;
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "set_constructor"
    // RBuilder.g:2574:1: set_constructor returns [SetExp exp = null] : ^( LBRACE vnm= ident vty= math_type_expression (where= where_clause )? body= math_expression ) ;
    public final RBuilder.set_constructor_return set_constructor() throws RecognitionException {
        RBuilder.set_constructor_return retval = new RBuilder.set_constructor_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        ColsAST _first_0 = null;
        ColsAST _last = null;

        ColsAST LBRACE167=null;
        RBuilder.ident_return vnm = null;

        RBuilder.math_type_expression_return vty = null;

        RBuilder.where_clause_return where = null;

        RBuilder.math_expression_return body = null;


        ColsAST LBRACE167_tree=null;


            MathVarDec var = null;

        try {
            // RBuilder.g:2578:5: ( ^( LBRACE vnm= ident vty= math_type_expression (where= where_clause )? body= math_expression ) )
            // RBuilder.g:2578:9: ^( LBRACE vnm= ident vty= math_type_expression (where= where_clause )? body= math_expression )
            {
            root_0 = (ColsAST)adaptor.nil();

            _last = (ColsAST)input.LT(1);
            {
            ColsAST _save_last_1 = _last;
            ColsAST _first_1 = null;
            ColsAST root_1 = (ColsAST)adaptor.nil();_last = (ColsAST)input.LT(1);
            LBRACE167=(ColsAST)match(input,LBRACE,FOLLOW_LBRACE_in_set_constructor15862); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LBRACE167_tree = (ColsAST)adaptor.dupNode(LBRACE167);

            root_1 = (ColsAST)adaptor.becomeRoot(LBRACE167_tree, root_1);
            }


            match(input, Token.DOWN, null); if (state.failed) return retval;
            _last = (ColsAST)input.LT(1);
            pushFollow(FOLLOW_ident_in_set_constructor15866);
            vnm=ident();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, vnm.getTree());
            _last = (ColsAST)input.LT(1);
            pushFollow(FOLLOW_math_type_expression_in_set_constructor15870);
            vty=math_type_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, vty.getTree());
            // RBuilder.g:2579:13: (where= where_clause )?
            int alt226=2;
            int LA226_0 = input.LA(1);

            if ( (LA226_0==WHERE) ) {
                alt226=1;
            }
            switch (alt226) {
                case 1 :
                    // RBuilder.g:2579:14: where= where_clause
                    {
                    _last = (ColsAST)input.LT(1);
                    pushFollow(FOLLOW_where_clause_in_set_constructor15887);
                    where=where_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, where.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }

            _last = (ColsAST)input.LT(1);
            pushFollow(FOLLOW_math_expression_in_set_constructor15893);
            body=math_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, body.getTree());

            match(input, Token.UP, null); if (state.failed) return retval;adaptor.addChild(root_0, root_1);_last = _save_last_1;
            }

            if ( state.backtracking==0 ) {
                 var = new MathVarDec((vnm!=null?vnm.ps:null), (vty!=null?vty.ty:null));
                          retval.exp = new SetExp(getLocation(LBRACE167), var, (where!=null?where.exp:null), (body!=null?body.exp:null));
                      
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "set_constructor"

    public static class tuple_expression_return extends TreeRuleReturnScope {
        public TupleExp exp = null;
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "tuple_expression"
    // RBuilder.g:2586:1: tuple_expression returns [TupleExp exp = null] : ^( TUPLE (fld= math_expression )+ ) ;
    public final RBuilder.tuple_expression_return tuple_expression() throws RecognitionException {
        RBuilder.tuple_expression_return retval = new RBuilder.tuple_expression_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        ColsAST _first_0 = null;
        ColsAST _last = null;

        ColsAST TUPLE168=null;
        RBuilder.math_expression_return fld = null;


        ColsAST TUPLE168_tree=null;


            edu.clemson.cs.r2jt.collections.List<Exp> flds = new edu.clemson.cs.r2jt.collections.List<Exp>("Exp");

        try {
            // RBuilder.g:2590:5: ( ^( TUPLE (fld= math_expression )+ ) )
            // RBuilder.g:2590:9: ^( TUPLE (fld= math_expression )+ )
            {
            root_0 = (ColsAST)adaptor.nil();

            _last = (ColsAST)input.LT(1);
            {
            ColsAST _save_last_1 = _last;
            ColsAST _first_1 = null;
            ColsAST root_1 = (ColsAST)adaptor.nil();_last = (ColsAST)input.LT(1);
            TUPLE168=(ColsAST)match(input,TUPLE,FOLLOW_TUPLE_in_tuple_expression15941); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TUPLE168_tree = (ColsAST)adaptor.dupNode(TUPLE168);

            root_1 = (ColsAST)adaptor.becomeRoot(TUPLE168_tree, root_1);
            }


            match(input, Token.DOWN, null); if (state.failed) return retval;
            // RBuilder.g:2590:17: (fld= math_expression )+
            int cnt227=0;
            loop227:
            do {
                int alt227=2;
                int LA227_0 = input.LA(1);

                if ( (LA227_0==EXPR) ) {
                    alt227=1;
                }


                switch (alt227) {
            	case 1 :
            	    // RBuilder.g:2590:18: fld= math_expression
            	    {
            	    _last = (ColsAST)input.LT(1);
            	    pushFollow(FOLLOW_math_expression_in_tuple_expression15946);
            	    fld=math_expression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) 
            	    adaptor.addChild(root_1, fld.getTree());
            	    if ( state.backtracking==0 ) {
            	       flds.add((fld!=null?fld.exp:null)); 
            	    }

            	    if ( state.backtracking==0 ) {
            	    }
            	    }
            	    break;

            	default :
            	    if ( cnt227 >= 1 ) break loop227;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(227, input);
                        throw eee;
                }
                cnt227++;
            } while (true);


            match(input, Token.UP, null); if (state.failed) return retval;adaptor.addChild(root_0, root_1);_last = _save_last_1;
            }

            if ( state.backtracking==0 ) {
               retval.exp = new TupleExp(getLocation(TUPLE168), flds); 
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "tuple_expression"

    public static class where_clause_return extends TreeRuleReturnScope {
        public Exp exp = null;
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "where_clause"
    // RBuilder.g:2594:1: where_clause returns [Exp exp = null] : ^( WHERE exp1= math_expression ) ;
    public final RBuilder.where_clause_return where_clause() throws RecognitionException {
        RBuilder.where_clause_return retval = new RBuilder.where_clause_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        ColsAST _first_0 = null;
        ColsAST _last = null;

        ColsAST WHERE169=null;
        RBuilder.math_expression_return exp1 = null;


        ColsAST WHERE169_tree=null;

        try {
            // RBuilder.g:2595:5: ( ^( WHERE exp1= math_expression ) )
            // RBuilder.g:2595:9: ^( WHERE exp1= math_expression )
            {
            root_0 = (ColsAST)adaptor.nil();

            _last = (ColsAST)input.LT(1);
            {
            ColsAST _save_last_1 = _last;
            ColsAST _first_1 = null;
            ColsAST root_1 = (ColsAST)adaptor.nil();_last = (ColsAST)input.LT(1);
            WHERE169=(ColsAST)match(input,WHERE,FOLLOW_WHERE_in_where_clause15985); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            WHERE169_tree = (ColsAST)adaptor.dupNode(WHERE169);

            root_1 = (ColsAST)adaptor.becomeRoot(WHERE169_tree, root_1);
            }


            match(input, Token.DOWN, null); if (state.failed) return retval;
            _last = (ColsAST)input.LT(1);
            pushFollow(FOLLOW_math_expression_in_where_clause15989);
            exp1=math_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, exp1.getTree());

            match(input, Token.UP, null); if (state.failed) return retval;adaptor.addChild(root_0, root_1);_last = _save_last_1;
            }

            if ( state.backtracking==0 ) {
               retval.exp = (exp1!=null?exp1.exp:null); 
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "where_clause"

    public static class program_expression_return extends TreeRuleReturnScope {
        public ProgramExp exp = null;
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "program_expression"
    // RBuilder.g:2602:1: program_expression returns [ProgramExp exp = null] : ^( EXPR exp1= program_logical_expression ) ;
    public final RBuilder.program_expression_return program_expression() throws RecognitionException {
        RBuilder.program_expression_return retval = new RBuilder.program_expression_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        ColsAST _first_0 = null;
        ColsAST _last = null;

        ColsAST EXPR170=null;
        RBuilder.program_logical_expression_return exp1 = null;


        ColsAST EXPR170_tree=null;

        try {
            // RBuilder.g:2603:5: ( ^( EXPR exp1= program_logical_expression ) )
            // RBuilder.g:2603:9: ^( EXPR exp1= program_logical_expression )
            {
            root_0 = (ColsAST)adaptor.nil();

            _last = (ColsAST)input.LT(1);
            {
            ColsAST _save_last_1 = _last;
            ColsAST _first_1 = null;
            ColsAST root_1 = (ColsAST)adaptor.nil();_last = (ColsAST)input.LT(1);
            EXPR170=(ColsAST)match(input,EXPR,FOLLOW_EXPR_in_program_expression16020); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            EXPR170_tree = (ColsAST)adaptor.dupNode(EXPR170);

            root_1 = (ColsAST)adaptor.becomeRoot(EXPR170_tree, root_1);
            }


            match(input, Token.DOWN, null); if (state.failed) return retval;
            _last = (ColsAST)input.LT(1);
            pushFollow(FOLLOW_program_logical_expression_in_program_expression16024);
            exp1=program_logical_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, exp1.getTree());

            match(input, Token.UP, null); if (state.failed) return retval;adaptor.addChild(root_0, root_1);_last = _save_last_1;
            }

            if ( state.backtracking==0 ) {
               retval.exp = (exp1!=null?exp1.exp:null); 
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "program_expression"

    public static class program_logical_expression_return extends TreeRuleReturnScope {
        public ProgramExp exp = null;
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "program_logical_expression"
    // RBuilder.g:2606:1: program_logical_expression returns [ProgramExp exp = null] : (exp1= program_relational_expression | ( ^(id= AND lf= program_logical_expression rt= program_relational_expression ) | ^(id= OR lf= program_logical_expression rt= program_relational_expression ) ) );
    public final RBuilder.program_logical_expression_return program_logical_expression() throws RecognitionException {
        RBuilder.program_logical_expression_return retval = new RBuilder.program_logical_expression_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        ColsAST _first_0 = null;
        ColsAST _last = null;

        ColsAST id=null;
        RBuilder.program_relational_expression_return exp1 = null;

        RBuilder.program_logical_expression_return lf = null;

        RBuilder.program_relational_expression_return rt = null;


        ColsAST id_tree=null;


            int op = 0;

        try {
            // RBuilder.g:2610:5: (exp1= program_relational_expression | ( ^(id= AND lf= program_logical_expression rt= program_relational_expression ) | ^(id= OR lf= program_logical_expression rt= program_relational_expression ) ) )
            int alt229=2;
            int LA229_0 = input.LA(1);

            if ( (LA229_0==DIV||LA229_0==MOD||LA229_0==NOT||LA229_0==REM||LA229_0==IDENTIFIER||LA229_0==NUMERIC_LITERAL||LA229_0==CHARACTER_LITERAL||(LA229_0>=PLUS && LA229_0<=MINUS)||(LA229_0>=MULTIPLY && LA229_0<=EXP)||(LA229_0>=NOT_EQL && LA229_0<=GT)||LA229_0==STRING_LITERAL||LA229_0==ARRAYFUNCTION||LA229_0==FUNCTION||LA229_0==NESTED||LA229_0==PROGDOT||LA229_0==UNARY_MINUS||LA229_0==VARDOT) ) {
                alt229=1;
            }
            else if ( (LA229_0==AND||LA229_0==OR) ) {
                alt229=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 229, 0, input);

                throw nvae;
            }
            switch (alt229) {
                case 1 :
                    // RBuilder.g:2610:9: exp1= program_relational_expression
                    {
                    root_0 = (ColsAST)adaptor.nil();

                    _last = (ColsAST)input.LT(1);
                    pushFollow(FOLLOW_program_relational_expression_in_program_logical_expression16056);
                    exp1=program_relational_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, exp1.getTree());
                    if ( state.backtracking==0 ) {
                       retval.exp = (exp1!=null?exp1.exp:null); 
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // RBuilder.g:2611:9: ( ^(id= AND lf= program_logical_expression rt= program_relational_expression ) | ^(id= OR lf= program_logical_expression rt= program_relational_expression ) )
                    {
                    root_0 = (ColsAST)adaptor.nil();

                    // RBuilder.g:2611:9: ( ^(id= AND lf= program_logical_expression rt= program_relational_expression ) | ^(id= OR lf= program_logical_expression rt= program_relational_expression ) )
                    int alt228=2;
                    int LA228_0 = input.LA(1);

                    if ( (LA228_0==AND) ) {
                        alt228=1;
                    }
                    else if ( (LA228_0==OR) ) {
                        alt228=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 228, 0, input);

                        throw nvae;
                    }
                    switch (alt228) {
                        case 1 :
                            // RBuilder.g:2611:13: ^(id= AND lf= program_logical_expression rt= program_relational_expression )
                            {
                            _last = (ColsAST)input.LT(1);
                            {
                            ColsAST _save_last_1 = _last;
                            ColsAST _first_1 = null;
                            ColsAST root_1 = (ColsAST)adaptor.nil();_last = (ColsAST)input.LT(1);
                            id=(ColsAST)match(input,AND,FOLLOW_AND_in_program_logical_expression16077); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            id_tree = (ColsAST)adaptor.dupNode(id);

                            root_1 = (ColsAST)adaptor.becomeRoot(id_tree, root_1);
                            }

                            if ( state.backtracking==0 ) {
                               op = ProgramOpExp.AND; 
                            }

                            match(input, Token.DOWN, null); if (state.failed) return retval;
                            _last = (ColsAST)input.LT(1);
                            pushFollow(FOLLOW_program_logical_expression_in_program_logical_expression16099);
                            lf=program_logical_expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) 
                            adaptor.addChild(root_1, lf.getTree());
                            _last = (ColsAST)input.LT(1);
                            pushFollow(FOLLOW_program_relational_expression_in_program_logical_expression16119);
                            rt=program_relational_expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) 
                            adaptor.addChild(root_1, rt.getTree());

                            match(input, Token.UP, null); if (state.failed) return retval;adaptor.addChild(root_0, root_1);_last = _save_last_1;
                            }


                            if ( state.backtracking==0 ) {
                            }
                            }
                            break;
                        case 2 :
                            // RBuilder.g:2614:13: ^(id= OR lf= program_logical_expression rt= program_relational_expression )
                            {
                            _last = (ColsAST)input.LT(1);
                            {
                            ColsAST _save_last_1 = _last;
                            ColsAST _first_1 = null;
                            ColsAST root_1 = (ColsAST)adaptor.nil();_last = (ColsAST)input.LT(1);
                            id=(ColsAST)match(input,OR,FOLLOW_OR_in_program_logical_expression16139); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            id_tree = (ColsAST)adaptor.dupNode(id);

                            root_1 = (ColsAST)adaptor.becomeRoot(id_tree, root_1);
                            }

                            if ( state.backtracking==0 ) {
                               op = ProgramOpExp.OR; 
                            }

                            match(input, Token.DOWN, null); if (state.failed) return retval;
                            _last = (ColsAST)input.LT(1);
                            pushFollow(FOLLOW_program_logical_expression_in_program_logical_expression16161);
                            lf=program_logical_expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) 
                            adaptor.addChild(root_1, lf.getTree());
                            _last = (ColsAST)input.LT(1);
                            pushFollow(FOLLOW_program_relational_expression_in_program_logical_expression16181);
                            rt=program_relational_expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) 
                            adaptor.addChild(root_1, rt.getTree());

                            match(input, Token.UP, null); if (state.failed) return retval;adaptor.addChild(root_0, root_1);_last = _save_last_1;
                            }


                            if ( state.backtracking==0 ) {
                            }
                            }
                            break;

                    }

                    if ( state.backtracking==0 ) {
                       retval.exp = new ProgramOpExp(getLocation(id), op, (lf!=null?lf.exp:null), (rt!=null?rt.exp:null)); 
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }
            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "program_logical_expression"

    public static class program_relational_expression_return extends TreeRuleReturnScope {
        public ProgramExp exp = null;
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "program_relational_expression"
    // RBuilder.g:2621:1: program_relational_expression returns [ProgramExp exp = null] : (exp1= program_adding_expression | ( ^(id= EQL lf= program_relational_expression rt= program_adding_expression ) | ^(id= NOT_EQL lf= program_relational_expression rt= program_adding_expression ) | ^(id= LT lf= program_relational_expression rt= program_adding_expression ) | ^(id= LT_EQL lf= program_relational_expression rt= program_adding_expression ) | ^(id= GT lf= program_relational_expression rt= program_adding_expression ) | ^(id= GT_EQL lf= program_relational_expression rt= program_adding_expression ) ) );
    public final RBuilder.program_relational_expression_return program_relational_expression() throws RecognitionException {
        RBuilder.program_relational_expression_return retval = new RBuilder.program_relational_expression_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        ColsAST _first_0 = null;
        ColsAST _last = null;

        ColsAST id=null;
        RBuilder.program_adding_expression_return exp1 = null;

        RBuilder.program_relational_expression_return lf = null;

        RBuilder.program_adding_expression_return rt = null;


        ColsAST id_tree=null;


            int op = 0;

        try {
            // RBuilder.g:2625:5: (exp1= program_adding_expression | ( ^(id= EQL lf= program_relational_expression rt= program_adding_expression ) | ^(id= NOT_EQL lf= program_relational_expression rt= program_adding_expression ) | ^(id= LT lf= program_relational_expression rt= program_adding_expression ) | ^(id= LT_EQL lf= program_relational_expression rt= program_adding_expression ) | ^(id= GT lf= program_relational_expression rt= program_adding_expression ) | ^(id= GT_EQL lf= program_relational_expression rt= program_adding_expression ) ) )
            int alt231=2;
            int LA231_0 = input.LA(1);

            if ( (LA231_0==DIV||LA231_0==MOD||LA231_0==NOT||LA231_0==REM||LA231_0==IDENTIFIER||LA231_0==NUMERIC_LITERAL||LA231_0==CHARACTER_LITERAL||(LA231_0>=PLUS && LA231_0<=MINUS)||(LA231_0>=MULTIPLY && LA231_0<=EXP)||LA231_0==STRING_LITERAL||LA231_0==ARRAYFUNCTION||LA231_0==FUNCTION||LA231_0==NESTED||LA231_0==PROGDOT||LA231_0==UNARY_MINUS||LA231_0==VARDOT) ) {
                alt231=1;
            }
            else if ( ((LA231_0>=NOT_EQL && LA231_0<=GT)) ) {
                alt231=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 231, 0, input);

                throw nvae;
            }
            switch (alt231) {
                case 1 :
                    // RBuilder.g:2625:9: exp1= program_adding_expression
                    {
                    root_0 = (ColsAST)adaptor.nil();

                    _last = (ColsAST)input.LT(1);
                    pushFollow(FOLLOW_program_adding_expression_in_program_relational_expression16231);
                    exp1=program_adding_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, exp1.getTree());
                    if ( state.backtracking==0 ) {
                       retval.exp = (exp1!=null?exp1.exp:null); 
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // RBuilder.g:2626:9: ( ^(id= EQL lf= program_relational_expression rt= program_adding_expression ) | ^(id= NOT_EQL lf= program_relational_expression rt= program_adding_expression ) | ^(id= LT lf= program_relational_expression rt= program_adding_expression ) | ^(id= LT_EQL lf= program_relational_expression rt= program_adding_expression ) | ^(id= GT lf= program_relational_expression rt= program_adding_expression ) | ^(id= GT_EQL lf= program_relational_expression rt= program_adding_expression ) )
                    {
                    root_0 = (ColsAST)adaptor.nil();

                    // RBuilder.g:2626:9: ( ^(id= EQL lf= program_relational_expression rt= program_adding_expression ) | ^(id= NOT_EQL lf= program_relational_expression rt= program_adding_expression ) | ^(id= LT lf= program_relational_expression rt= program_adding_expression ) | ^(id= LT_EQL lf= program_relational_expression rt= program_adding_expression ) | ^(id= GT lf= program_relational_expression rt= program_adding_expression ) | ^(id= GT_EQL lf= program_relational_expression rt= program_adding_expression ) )
                    int alt230=6;
                    switch ( input.LA(1) ) {
                    case EQL:
                        {
                        alt230=1;
                        }
                        break;
                    case NOT_EQL:
                        {
                        alt230=2;
                        }
                        break;
                    case LT:
                        {
                        alt230=3;
                        }
                        break;
                    case LT_EQL:
                        {
                        alt230=4;
                        }
                        break;
                    case GT:
                        {
                        alt230=5;
                        }
                        break;
                    case GT_EQL:
                        {
                        alt230=6;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 230, 0, input);

                        throw nvae;
                    }

                    switch (alt230) {
                        case 1 :
                            // RBuilder.g:2626:13: ^(id= EQL lf= program_relational_expression rt= program_adding_expression )
                            {
                            _last = (ColsAST)input.LT(1);
                            {
                            ColsAST _save_last_1 = _last;
                            ColsAST _first_1 = null;
                            ColsAST root_1 = (ColsAST)adaptor.nil();_last = (ColsAST)input.LT(1);
                            id=(ColsAST)match(input,EQL,FOLLOW_EQL_in_program_relational_expression16252); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            id_tree = (ColsAST)adaptor.dupNode(id);

                            root_1 = (ColsAST)adaptor.becomeRoot(id_tree, root_1);
                            }

                            if ( state.backtracking==0 ) {
                               op = ProgramOpExp.EQUAL; 
                            }

                            match(input, Token.DOWN, null); if (state.failed) return retval;
                            _last = (ColsAST)input.LT(1);
                            pushFollow(FOLLOW_program_relational_expression_in_program_relational_expression16274);
                            lf=program_relational_expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) 
                            adaptor.addChild(root_1, lf.getTree());
                            _last = (ColsAST)input.LT(1);
                            pushFollow(FOLLOW_program_adding_expression_in_program_relational_expression16294);
                            rt=program_adding_expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) 
                            adaptor.addChild(root_1, rt.getTree());

                            match(input, Token.UP, null); if (state.failed) return retval;adaptor.addChild(root_0, root_1);_last = _save_last_1;
                            }


                            if ( state.backtracking==0 ) {
                            }
                            }
                            break;
                        case 2 :
                            // RBuilder.g:2629:13: ^(id= NOT_EQL lf= program_relational_expression rt= program_adding_expression )
                            {
                            _last = (ColsAST)input.LT(1);
                            {
                            ColsAST _save_last_1 = _last;
                            ColsAST _first_1 = null;
                            ColsAST root_1 = (ColsAST)adaptor.nil();_last = (ColsAST)input.LT(1);
                            id=(ColsAST)match(input,NOT_EQL,FOLLOW_NOT_EQL_in_program_relational_expression16314); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            id_tree = (ColsAST)adaptor.dupNode(id);

                            root_1 = (ColsAST)adaptor.becomeRoot(id_tree, root_1);
                            }

                            if ( state.backtracking==0 ) {
                               op = ProgramOpExp.NOT_EQUAL; 
                            }

                            match(input, Token.DOWN, null); if (state.failed) return retval;
                            _last = (ColsAST)input.LT(1);
                            pushFollow(FOLLOW_program_relational_expression_in_program_relational_expression16336);
                            lf=program_relational_expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) 
                            adaptor.addChild(root_1, lf.getTree());
                            _last = (ColsAST)input.LT(1);
                            pushFollow(FOLLOW_program_adding_expression_in_program_relational_expression16356);
                            rt=program_adding_expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) 
                            adaptor.addChild(root_1, rt.getTree());

                            match(input, Token.UP, null); if (state.failed) return retval;adaptor.addChild(root_0, root_1);_last = _save_last_1;
                            }


                            if ( state.backtracking==0 ) {
                            }
                            }
                            break;
                        case 3 :
                            // RBuilder.g:2632:13: ^(id= LT lf= program_relational_expression rt= program_adding_expression )
                            {
                            _last = (ColsAST)input.LT(1);
                            {
                            ColsAST _save_last_1 = _last;
                            ColsAST _first_1 = null;
                            ColsAST root_1 = (ColsAST)adaptor.nil();_last = (ColsAST)input.LT(1);
                            id=(ColsAST)match(input,LT,FOLLOW_LT_in_program_relational_expression16376); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            id_tree = (ColsAST)adaptor.dupNode(id);

                            root_1 = (ColsAST)adaptor.becomeRoot(id_tree, root_1);
                            }

                            if ( state.backtracking==0 ) {
                               op = ProgramOpExp.LT; 
                            }

                            match(input, Token.DOWN, null); if (state.failed) return retval;
                            _last = (ColsAST)input.LT(1);
                            pushFollow(FOLLOW_program_relational_expression_in_program_relational_expression16399);
                            lf=program_relational_expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) 
                            adaptor.addChild(root_1, lf.getTree());
                            _last = (ColsAST)input.LT(1);
                            pushFollow(FOLLOW_program_adding_expression_in_program_relational_expression16419);
                            rt=program_adding_expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) 
                            adaptor.addChild(root_1, rt.getTree());

                            match(input, Token.UP, null); if (state.failed) return retval;adaptor.addChild(root_0, root_1);_last = _save_last_1;
                            }


                            if ( state.backtracking==0 ) {
                            }
                            }
                            break;
                        case 4 :
                            // RBuilder.g:2635:13: ^(id= LT_EQL lf= program_relational_expression rt= program_adding_expression )
                            {
                            _last = (ColsAST)input.LT(1);
                            {
                            ColsAST _save_last_1 = _last;
                            ColsAST _first_1 = null;
                            ColsAST root_1 = (ColsAST)adaptor.nil();_last = (ColsAST)input.LT(1);
                            id=(ColsAST)match(input,LT_EQL,FOLLOW_LT_EQL_in_program_relational_expression16439); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            id_tree = (ColsAST)adaptor.dupNode(id);

                            root_1 = (ColsAST)adaptor.becomeRoot(id_tree, root_1);
                            }

                            if ( state.backtracking==0 ) {
                               op = ProgramOpExp.LT_EQL; 
                            }

                            match(input, Token.DOWN, null); if (state.failed) return retval;
                            _last = (ColsAST)input.LT(1);
                            pushFollow(FOLLOW_program_relational_expression_in_program_relational_expression16462);
                            lf=program_relational_expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) 
                            adaptor.addChild(root_1, lf.getTree());
                            _last = (ColsAST)input.LT(1);
                            pushFollow(FOLLOW_program_adding_expression_in_program_relational_expression16482);
                            rt=program_adding_expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) 
                            adaptor.addChild(root_1, rt.getTree());

                            match(input, Token.UP, null); if (state.failed) return retval;adaptor.addChild(root_0, root_1);_last = _save_last_1;
                            }


                            if ( state.backtracking==0 ) {
                            }
                            }
                            break;
                        case 5 :
                            // RBuilder.g:2638:13: ^(id= GT lf= program_relational_expression rt= program_adding_expression )
                            {
                            _last = (ColsAST)input.LT(1);
                            {
                            ColsAST _save_last_1 = _last;
                            ColsAST _first_1 = null;
                            ColsAST root_1 = (ColsAST)adaptor.nil();_last = (ColsAST)input.LT(1);
                            id=(ColsAST)match(input,GT,FOLLOW_GT_in_program_relational_expression16502); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            id_tree = (ColsAST)adaptor.dupNode(id);

                            root_1 = (ColsAST)adaptor.becomeRoot(id_tree, root_1);
                            }

                            if ( state.backtracking==0 ) {
                               op = ProgramOpExp.GT; 
                            }

                            match(input, Token.DOWN, null); if (state.failed) return retval;
                            _last = (ColsAST)input.LT(1);
                            pushFollow(FOLLOW_program_relational_expression_in_program_relational_expression16525);
                            lf=program_relational_expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) 
                            adaptor.addChild(root_1, lf.getTree());
                            _last = (ColsAST)input.LT(1);
                            pushFollow(FOLLOW_program_adding_expression_in_program_relational_expression16545);
                            rt=program_adding_expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) 
                            adaptor.addChild(root_1, rt.getTree());

                            match(input, Token.UP, null); if (state.failed) return retval;adaptor.addChild(root_0, root_1);_last = _save_last_1;
                            }


                            if ( state.backtracking==0 ) {
                            }
                            }
                            break;
                        case 6 :
                            // RBuilder.g:2641:13: ^(id= GT_EQL lf= program_relational_expression rt= program_adding_expression )
                            {
                            _last = (ColsAST)input.LT(1);
                            {
                            ColsAST _save_last_1 = _last;
                            ColsAST _first_1 = null;
                            ColsAST root_1 = (ColsAST)adaptor.nil();_last = (ColsAST)input.LT(1);
                            id=(ColsAST)match(input,GT_EQL,FOLLOW_GT_EQL_in_program_relational_expression16565); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            id_tree = (ColsAST)adaptor.dupNode(id);

                            root_1 = (ColsAST)adaptor.becomeRoot(id_tree, root_1);
                            }

                            if ( state.backtracking==0 ) {
                               op = ProgramOpExp.GT_EQL; 
                            }

                            match(input, Token.DOWN, null); if (state.failed) return retval;
                            _last = (ColsAST)input.LT(1);
                            pushFollow(FOLLOW_program_relational_expression_in_program_relational_expression16587);
                            lf=program_relational_expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) 
                            adaptor.addChild(root_1, lf.getTree());
                            _last = (ColsAST)input.LT(1);
                            pushFollow(FOLLOW_program_adding_expression_in_program_relational_expression16607);
                            rt=program_adding_expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) 
                            adaptor.addChild(root_1, rt.getTree());

                            match(input, Token.UP, null); if (state.failed) return retval;adaptor.addChild(root_0, root_1);_last = _save_last_1;
                            }


                            if ( state.backtracking==0 ) {
                            }
                            }
                            break;

                    }

                    if ( state.backtracking==0 ) {
                       retval.exp = new ProgramOpExp(getLocation(id), op, (lf!=null?lf.exp:null), (rt!=null?rt.exp:null)); 
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }
            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "program_relational_expression"

    public static class program_adding_expression_return extends TreeRuleReturnScope {
        public ProgramExp exp = null;
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "program_adding_expression"
    // RBuilder.g:2648:1: program_adding_expression returns [ProgramExp exp = null] : (exp1= program_multiplying_expression | ( ^(id= PLUS lf= program_adding_expression rt= program_multiplying_expression ) | ^(id= MINUS lf= program_adding_expression rt= program_multiplying_expression ) ) );
    public final RBuilder.program_adding_expression_return program_adding_expression() throws RecognitionException {
        RBuilder.program_adding_expression_return retval = new RBuilder.program_adding_expression_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        ColsAST _first_0 = null;
        ColsAST _last = null;

        ColsAST id=null;
        RBuilder.program_multiplying_expression_return exp1 = null;

        RBuilder.program_adding_expression_return lf = null;

        RBuilder.program_multiplying_expression_return rt = null;


        ColsAST id_tree=null;


            int op = 0;

        try {
            // RBuilder.g:2652:5: (exp1= program_multiplying_expression | ( ^(id= PLUS lf= program_adding_expression rt= program_multiplying_expression ) | ^(id= MINUS lf= program_adding_expression rt= program_multiplying_expression ) ) )
            int alt233=2;
            int LA233_0 = input.LA(1);

            if ( (LA233_0==DIV||LA233_0==MOD||LA233_0==NOT||LA233_0==REM||LA233_0==IDENTIFIER||LA233_0==NUMERIC_LITERAL||LA233_0==CHARACTER_LITERAL||(LA233_0>=MULTIPLY && LA233_0<=EXP)||LA233_0==STRING_LITERAL||LA233_0==ARRAYFUNCTION||LA233_0==FUNCTION||LA233_0==NESTED||LA233_0==PROGDOT||LA233_0==UNARY_MINUS||LA233_0==VARDOT) ) {
                alt233=1;
            }
            else if ( ((LA233_0>=PLUS && LA233_0<=MINUS)) ) {
                alt233=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 233, 0, input);

                throw nvae;
            }
            switch (alt233) {
                case 1 :
                    // RBuilder.g:2652:9: exp1= program_multiplying_expression
                    {
                    root_0 = (ColsAST)adaptor.nil();

                    _last = (ColsAST)input.LT(1);
                    pushFollow(FOLLOW_program_multiplying_expression_in_program_adding_expression16657);
                    exp1=program_multiplying_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, exp1.getTree());
                    if ( state.backtracking==0 ) {
                       retval.exp = (exp1!=null?exp1.exp:null); 
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // RBuilder.g:2653:9: ( ^(id= PLUS lf= program_adding_expression rt= program_multiplying_expression ) | ^(id= MINUS lf= program_adding_expression rt= program_multiplying_expression ) )
                    {
                    root_0 = (ColsAST)adaptor.nil();

                    // RBuilder.g:2653:9: ( ^(id= PLUS lf= program_adding_expression rt= program_multiplying_expression ) | ^(id= MINUS lf= program_adding_expression rt= program_multiplying_expression ) )
                    int alt232=2;
                    int LA232_0 = input.LA(1);

                    if ( (LA232_0==PLUS) ) {
                        alt232=1;
                    }
                    else if ( (LA232_0==MINUS) ) {
                        alt232=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 232, 0, input);

                        throw nvae;
                    }
                    switch (alt232) {
                        case 1 :
                            // RBuilder.g:2653:13: ^(id= PLUS lf= program_adding_expression rt= program_multiplying_expression )
                            {
                            _last = (ColsAST)input.LT(1);
                            {
                            ColsAST _save_last_1 = _last;
                            ColsAST _first_1 = null;
                            ColsAST root_1 = (ColsAST)adaptor.nil();_last = (ColsAST)input.LT(1);
                            id=(ColsAST)match(input,PLUS,FOLLOW_PLUS_in_program_adding_expression16678); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            id_tree = (ColsAST)adaptor.dupNode(id);

                            root_1 = (ColsAST)adaptor.becomeRoot(id_tree, root_1);
                            }

                            if ( state.backtracking==0 ) {
                               op = ProgramOpExp.PLUS; 
                            }

                            match(input, Token.DOWN, null); if (state.failed) return retval;
                            _last = (ColsAST)input.LT(1);
                            pushFollow(FOLLOW_program_adding_expression_in_program_adding_expression16700);
                            lf=program_adding_expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) 
                            adaptor.addChild(root_1, lf.getTree());
                            _last = (ColsAST)input.LT(1);
                            pushFollow(FOLLOW_program_multiplying_expression_in_program_adding_expression16720);
                            rt=program_multiplying_expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) 
                            adaptor.addChild(root_1, rt.getTree());

                            match(input, Token.UP, null); if (state.failed) return retval;adaptor.addChild(root_0, root_1);_last = _save_last_1;
                            }


                            if ( state.backtracking==0 ) {
                            }
                            }
                            break;
                        case 2 :
                            // RBuilder.g:2656:13: ^(id= MINUS lf= program_adding_expression rt= program_multiplying_expression )
                            {
                            _last = (ColsAST)input.LT(1);
                            {
                            ColsAST _save_last_1 = _last;
                            ColsAST _first_1 = null;
                            ColsAST root_1 = (ColsAST)adaptor.nil();_last = (ColsAST)input.LT(1);
                            id=(ColsAST)match(input,MINUS,FOLLOW_MINUS_in_program_adding_expression16740); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            id_tree = (ColsAST)adaptor.dupNode(id);

                            root_1 = (ColsAST)adaptor.becomeRoot(id_tree, root_1);
                            }

                            if ( state.backtracking==0 ) {
                               op = ProgramOpExp.MINUS; 
                            }

                            match(input, Token.DOWN, null); if (state.failed) return retval;
                            _last = (ColsAST)input.LT(1);
                            pushFollow(FOLLOW_program_adding_expression_in_program_adding_expression16762);
                            lf=program_adding_expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) 
                            adaptor.addChild(root_1, lf.getTree());
                            _last = (ColsAST)input.LT(1);
                            pushFollow(FOLLOW_program_multiplying_expression_in_program_adding_expression16782);
                            rt=program_multiplying_expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) 
                            adaptor.addChild(root_1, rt.getTree());

                            match(input, Token.UP, null); if (state.failed) return retval;adaptor.addChild(root_0, root_1);_last = _save_last_1;
                            }


                            if ( state.backtracking==0 ) {
                            }
                            }
                            break;

                    }

                    if ( state.backtracking==0 ) {
                       retval.exp = new ProgramOpExp(getLocation(id), op, (lf!=null?lf.exp:null), (rt!=null?rt.exp:null)); 
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }
            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "program_adding_expression"

    public static class program_multiplying_expression_return extends TreeRuleReturnScope {
        public ProgramExp exp = null;
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "program_multiplying_expression"
    // RBuilder.g:2663:1: program_multiplying_expression returns [ProgramExp exp = null] : (exp1= program_exponential_expression | ( ^(id= MULTIPLY lf= program_multiplying_expression rt= program_exponential_expression ) | ^(id= DIVIDE lf= program_multiplying_expression rt= program_exponential_expression ) | ^(id= MOD lf= program_multiplying_expression rt= program_exponential_expression ) | ^(id= REM lf= program_multiplying_expression rt= program_exponential_expression ) | ^(id= DIV lf= program_multiplying_expression rt= program_exponential_expression ) ) );
    public final RBuilder.program_multiplying_expression_return program_multiplying_expression() throws RecognitionException {
        RBuilder.program_multiplying_expression_return retval = new RBuilder.program_multiplying_expression_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        ColsAST _first_0 = null;
        ColsAST _last = null;

        ColsAST id=null;
        RBuilder.program_exponential_expression_return exp1 = null;

        RBuilder.program_multiplying_expression_return lf = null;

        RBuilder.program_exponential_expression_return rt = null;


        ColsAST id_tree=null;


            int op = 0;

        try {
            // RBuilder.g:2667:5: (exp1= program_exponential_expression | ( ^(id= MULTIPLY lf= program_multiplying_expression rt= program_exponential_expression ) | ^(id= DIVIDE lf= program_multiplying_expression rt= program_exponential_expression ) | ^(id= MOD lf= program_multiplying_expression rt= program_exponential_expression ) | ^(id= REM lf= program_multiplying_expression rt= program_exponential_expression ) | ^(id= DIV lf= program_multiplying_expression rt= program_exponential_expression ) ) )
            int alt235=2;
            int LA235_0 = input.LA(1);

            if ( (LA235_0==NOT||LA235_0==IDENTIFIER||LA235_0==NUMERIC_LITERAL||LA235_0==CHARACTER_LITERAL||LA235_0==EXP||LA235_0==STRING_LITERAL||LA235_0==ARRAYFUNCTION||LA235_0==FUNCTION||LA235_0==NESTED||LA235_0==PROGDOT||LA235_0==UNARY_MINUS||LA235_0==VARDOT) ) {
                alt235=1;
            }
            else if ( (LA235_0==DIV||LA235_0==MOD||LA235_0==REM||(LA235_0>=MULTIPLY && LA235_0<=DIVIDE)) ) {
                alt235=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 235, 0, input);

                throw nvae;
            }
            switch (alt235) {
                case 1 :
                    // RBuilder.g:2667:9: exp1= program_exponential_expression
                    {
                    root_0 = (ColsAST)adaptor.nil();

                    _last = (ColsAST)input.LT(1);
                    pushFollow(FOLLOW_program_exponential_expression_in_program_multiplying_expression16832);
                    exp1=program_exponential_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, exp1.getTree());
                    if ( state.backtracking==0 ) {
                       retval.exp = (exp1!=null?exp1.exp:null); 
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // RBuilder.g:2668:9: ( ^(id= MULTIPLY lf= program_multiplying_expression rt= program_exponential_expression ) | ^(id= DIVIDE lf= program_multiplying_expression rt= program_exponential_expression ) | ^(id= MOD lf= program_multiplying_expression rt= program_exponential_expression ) | ^(id= REM lf= program_multiplying_expression rt= program_exponential_expression ) | ^(id= DIV lf= program_multiplying_expression rt= program_exponential_expression ) )
                    {
                    root_0 = (ColsAST)adaptor.nil();

                    // RBuilder.g:2668:9: ( ^(id= MULTIPLY lf= program_multiplying_expression rt= program_exponential_expression ) | ^(id= DIVIDE lf= program_multiplying_expression rt= program_exponential_expression ) | ^(id= MOD lf= program_multiplying_expression rt= program_exponential_expression ) | ^(id= REM lf= program_multiplying_expression rt= program_exponential_expression ) | ^(id= DIV lf= program_multiplying_expression rt= program_exponential_expression ) )
                    int alt234=5;
                    switch ( input.LA(1) ) {
                    case MULTIPLY:
                        {
                        alt234=1;
                        }
                        break;
                    case DIVIDE:
                        {
                        alt234=2;
                        }
                        break;
                    case MOD:
                        {
                        alt234=3;
                        }
                        break;
                    case REM:
                        {
                        alt234=4;
                        }
                        break;
                    case DIV:
                        {
                        alt234=5;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 234, 0, input);

                        throw nvae;
                    }

                    switch (alt234) {
                        case 1 :
                            // RBuilder.g:2668:13: ^(id= MULTIPLY lf= program_multiplying_expression rt= program_exponential_expression )
                            {
                            _last = (ColsAST)input.LT(1);
                            {
                            ColsAST _save_last_1 = _last;
                            ColsAST _first_1 = null;
                            ColsAST root_1 = (ColsAST)adaptor.nil();_last = (ColsAST)input.LT(1);
                            id=(ColsAST)match(input,MULTIPLY,FOLLOW_MULTIPLY_in_program_multiplying_expression16853); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            id_tree = (ColsAST)adaptor.dupNode(id);

                            root_1 = (ColsAST)adaptor.becomeRoot(id_tree, root_1);
                            }

                            if ( state.backtracking==0 ) {
                               op = ProgramOpExp.MULTIPLY; 
                            }

                            match(input, Token.DOWN, null); if (state.failed) return retval;
                            _last = (ColsAST)input.LT(1);
                            pushFollow(FOLLOW_program_multiplying_expression_in_program_multiplying_expression16875);
                            lf=program_multiplying_expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) 
                            adaptor.addChild(root_1, lf.getTree());
                            _last = (ColsAST)input.LT(1);
                            pushFollow(FOLLOW_program_exponential_expression_in_program_multiplying_expression16895);
                            rt=program_exponential_expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) 
                            adaptor.addChild(root_1, rt.getTree());

                            match(input, Token.UP, null); if (state.failed) return retval;adaptor.addChild(root_0, root_1);_last = _save_last_1;
                            }


                            if ( state.backtracking==0 ) {
                            }
                            }
                            break;
                        case 2 :
                            // RBuilder.g:2671:13: ^(id= DIVIDE lf= program_multiplying_expression rt= program_exponential_expression )
                            {
                            _last = (ColsAST)input.LT(1);
                            {
                            ColsAST _save_last_1 = _last;
                            ColsAST _first_1 = null;
                            ColsAST root_1 = (ColsAST)adaptor.nil();_last = (ColsAST)input.LT(1);
                            id=(ColsAST)match(input,DIVIDE,FOLLOW_DIVIDE_in_program_multiplying_expression16915); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            id_tree = (ColsAST)adaptor.dupNode(id);

                            root_1 = (ColsAST)adaptor.becomeRoot(id_tree, root_1);
                            }

                            if ( state.backtracking==0 ) {
                               op = ProgramOpExp.DIVIDE; 
                            }

                            match(input, Token.DOWN, null); if (state.failed) return retval;
                            _last = (ColsAST)input.LT(1);
                            pushFollow(FOLLOW_program_multiplying_expression_in_program_multiplying_expression16937);
                            lf=program_multiplying_expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) 
                            adaptor.addChild(root_1, lf.getTree());
                            _last = (ColsAST)input.LT(1);
                            pushFollow(FOLLOW_program_exponential_expression_in_program_multiplying_expression16957);
                            rt=program_exponential_expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) 
                            adaptor.addChild(root_1, rt.getTree());

                            match(input, Token.UP, null); if (state.failed) return retval;adaptor.addChild(root_0, root_1);_last = _save_last_1;
                            }


                            if ( state.backtracking==0 ) {
                            }
                            }
                            break;
                        case 3 :
                            // RBuilder.g:2674:13: ^(id= MOD lf= program_multiplying_expression rt= program_exponential_expression )
                            {
                            _last = (ColsAST)input.LT(1);
                            {
                            ColsAST _save_last_1 = _last;
                            ColsAST _first_1 = null;
                            ColsAST root_1 = (ColsAST)adaptor.nil();_last = (ColsAST)input.LT(1);
                            id=(ColsAST)match(input,MOD,FOLLOW_MOD_in_program_multiplying_expression16977); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            id_tree = (ColsAST)adaptor.dupNode(id);

                            root_1 = (ColsAST)adaptor.becomeRoot(id_tree, root_1);
                            }

                            if ( state.backtracking==0 ) {
                               op = ProgramOpExp.MOD; 
                            }

                            match(input, Token.DOWN, null); if (state.failed) return retval;
                            _last = (ColsAST)input.LT(1);
                            pushFollow(FOLLOW_program_multiplying_expression_in_program_multiplying_expression16999);
                            lf=program_multiplying_expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) 
                            adaptor.addChild(root_1, lf.getTree());
                            _last = (ColsAST)input.LT(1);
                            pushFollow(FOLLOW_program_exponential_expression_in_program_multiplying_expression17019);
                            rt=program_exponential_expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) 
                            adaptor.addChild(root_1, rt.getTree());

                            match(input, Token.UP, null); if (state.failed) return retval;adaptor.addChild(root_0, root_1);_last = _save_last_1;
                            }


                            if ( state.backtracking==0 ) {
                            }
                            }
                            break;
                        case 4 :
                            // RBuilder.g:2677:13: ^(id= REM lf= program_multiplying_expression rt= program_exponential_expression )
                            {
                            _last = (ColsAST)input.LT(1);
                            {
                            ColsAST _save_last_1 = _last;
                            ColsAST _first_1 = null;
                            ColsAST root_1 = (ColsAST)adaptor.nil();_last = (ColsAST)input.LT(1);
                            id=(ColsAST)match(input,REM,FOLLOW_REM_in_program_multiplying_expression17039); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            id_tree = (ColsAST)adaptor.dupNode(id);

                            root_1 = (ColsAST)adaptor.becomeRoot(id_tree, root_1);
                            }

                            if ( state.backtracking==0 ) {
                               op = ProgramOpExp.REM; 
                            }

                            match(input, Token.DOWN, null); if (state.failed) return retval;
                            _last = (ColsAST)input.LT(1);
                            pushFollow(FOLLOW_program_multiplying_expression_in_program_multiplying_expression17061);
                            lf=program_multiplying_expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) 
                            adaptor.addChild(root_1, lf.getTree());
                            _last = (ColsAST)input.LT(1);
                            pushFollow(FOLLOW_program_exponential_expression_in_program_multiplying_expression17081);
                            rt=program_exponential_expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) 
                            adaptor.addChild(root_1, rt.getTree());

                            match(input, Token.UP, null); if (state.failed) return retval;adaptor.addChild(root_0, root_1);_last = _save_last_1;
                            }


                            if ( state.backtracking==0 ) {
                            }
                            }
                            break;
                        case 5 :
                            // RBuilder.g:2680:13: ^(id= DIV lf= program_multiplying_expression rt= program_exponential_expression )
                            {
                            _last = (ColsAST)input.LT(1);
                            {
                            ColsAST _save_last_1 = _last;
                            ColsAST _first_1 = null;
                            ColsAST root_1 = (ColsAST)adaptor.nil();_last = (ColsAST)input.LT(1);
                            id=(ColsAST)match(input,DIV,FOLLOW_DIV_in_program_multiplying_expression17101); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            id_tree = (ColsAST)adaptor.dupNode(id);

                            root_1 = (ColsAST)adaptor.becomeRoot(id_tree, root_1);
                            }

                            if ( state.backtracking==0 ) {
                               op = ProgramOpExp.DIV; 
                            }

                            match(input, Token.DOWN, null); if (state.failed) return retval;
                            _last = (ColsAST)input.LT(1);
                            pushFollow(FOLLOW_program_multiplying_expression_in_program_multiplying_expression17123);
                            lf=program_multiplying_expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) 
                            adaptor.addChild(root_1, lf.getTree());
                            _last = (ColsAST)input.LT(1);
                            pushFollow(FOLLOW_program_exponential_expression_in_program_multiplying_expression17143);
                            rt=program_exponential_expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) 
                            adaptor.addChild(root_1, rt.getTree());

                            match(input, Token.UP, null); if (state.failed) return retval;adaptor.addChild(root_0, root_1);_last = _save_last_1;
                            }


                            if ( state.backtracking==0 ) {
                            }
                            }
                            break;

                    }

                    if ( state.backtracking==0 ) {
                       retval.exp = new ProgramOpExp(getLocation(id), op, (lf!=null?lf.exp:null), (rt!=null?rt.exp:null)); 
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }
            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "program_multiplying_expression"

    public static class program_exponential_expression_return extends TreeRuleReturnScope {
        public ProgramExp exp = null;
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "program_exponential_expression"
    // RBuilder.g:2687:1: program_exponential_expression returns [ProgramExp exp = null] : (exp1= program_unary_expression | ^( EXP lf= program_unary_expression rt= program_exponential_expression ) );
    public final RBuilder.program_exponential_expression_return program_exponential_expression() throws RecognitionException {
        RBuilder.program_exponential_expression_return retval = new RBuilder.program_exponential_expression_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        ColsAST _first_0 = null;
        ColsAST _last = null;

        ColsAST EXP171=null;
        RBuilder.program_unary_expression_return exp1 = null;

        RBuilder.program_unary_expression_return lf = null;

        RBuilder.program_exponential_expression_return rt = null;


        ColsAST EXP171_tree=null;


            int op = 0;

        try {
            // RBuilder.g:2691:5: (exp1= program_unary_expression | ^( EXP lf= program_unary_expression rt= program_exponential_expression ) )
            int alt236=2;
            int LA236_0 = input.LA(1);

            if ( (LA236_0==NOT||LA236_0==IDENTIFIER||LA236_0==NUMERIC_LITERAL||LA236_0==CHARACTER_LITERAL||LA236_0==STRING_LITERAL||LA236_0==ARRAYFUNCTION||LA236_0==FUNCTION||LA236_0==NESTED||LA236_0==PROGDOT||LA236_0==UNARY_MINUS||LA236_0==VARDOT) ) {
                alt236=1;
            }
            else if ( (LA236_0==EXP) ) {
                alt236=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 236, 0, input);

                throw nvae;
            }
            switch (alt236) {
                case 1 :
                    // RBuilder.g:2691:9: exp1= program_unary_expression
                    {
                    root_0 = (ColsAST)adaptor.nil();

                    _last = (ColsAST)input.LT(1);
                    pushFollow(FOLLOW_program_unary_expression_in_program_exponential_expression17193);
                    exp1=program_unary_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, exp1.getTree());
                    if ( state.backtracking==0 ) {
                       retval.exp = (exp1!=null?exp1.exp:null); 
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // RBuilder.g:2692:9: ^( EXP lf= program_unary_expression rt= program_exponential_expression )
                    {
                    root_0 = (ColsAST)adaptor.nil();

                    _last = (ColsAST)input.LT(1);
                    {
                    ColsAST _save_last_1 = _last;
                    ColsAST _first_1 = null;
                    ColsAST root_1 = (ColsAST)adaptor.nil();_last = (ColsAST)input.LT(1);
                    EXP171=(ColsAST)match(input,EXP,FOLLOW_EXP_in_program_exponential_expression17208); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    EXP171_tree = (ColsAST)adaptor.dupNode(EXP171);

                    root_1 = (ColsAST)adaptor.becomeRoot(EXP171_tree, root_1);
                    }

                    if ( state.backtracking==0 ) {
                       op = ProgramOpExp.EXP; 
                    }

                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    _last = (ColsAST)input.LT(1);
                    pushFollow(FOLLOW_program_unary_expression_in_program_exponential_expression17226);
                    lf=program_unary_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, lf.getTree());
                    _last = (ColsAST)input.LT(1);
                    pushFollow(FOLLOW_program_exponential_expression_in_program_exponential_expression17242);
                    rt=program_exponential_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, rt.getTree());

                    match(input, Token.UP, null); if (state.failed) return retval;adaptor.addChild(root_0, root_1);_last = _save_last_1;
                    }

                    if ( state.backtracking==0 ) {
                       retval.exp = new ProgramOpExp(getLocation(EXP171), op, (lf!=null?lf.exp:null), (rt!=null?rt.exp:null)); 
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }
            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "program_exponential_expression"

    public static class program_unary_expression_return extends TreeRuleReturnScope {
        public ProgramExp exp = null;
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "program_unary_expression"
    // RBuilder.g:2698:1: program_unary_expression returns [ProgramExp exp = null] : (exp1= program_primitive_expression | ( ^(id= NOT arg= program_unary_expression ) | ^(id= UNARY_MINUS arg= program_unary_expression ) ) );
    public final RBuilder.program_unary_expression_return program_unary_expression() throws RecognitionException {
        RBuilder.program_unary_expression_return retval = new RBuilder.program_unary_expression_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        ColsAST _first_0 = null;
        ColsAST _last = null;

        ColsAST id=null;
        RBuilder.program_primitive_expression_return exp1 = null;

        RBuilder.program_unary_expression_return arg = null;


        ColsAST id_tree=null;


            int op = 0;
            ProgramExp extra = null; //dummy

        try {
            // RBuilder.g:2703:5: (exp1= program_primitive_expression | ( ^(id= NOT arg= program_unary_expression ) | ^(id= UNARY_MINUS arg= program_unary_expression ) ) )
            int alt238=2;
            int LA238_0 = input.LA(1);

            if ( (LA238_0==IDENTIFIER||LA238_0==NUMERIC_LITERAL||LA238_0==CHARACTER_LITERAL||LA238_0==STRING_LITERAL||LA238_0==ARRAYFUNCTION||LA238_0==FUNCTION||LA238_0==NESTED||LA238_0==PROGDOT||LA238_0==VARDOT) ) {
                alt238=1;
            }
            else if ( (LA238_0==NOT||LA238_0==UNARY_MINUS) ) {
                alt238=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 238, 0, input);

                throw nvae;
            }
            switch (alt238) {
                case 1 :
                    // RBuilder.g:2703:9: exp1= program_primitive_expression
                    {
                    root_0 = (ColsAST)adaptor.nil();

                    _last = (ColsAST)input.LT(1);
                    pushFollow(FOLLOW_program_primitive_expression_in_program_unary_expression17282);
                    exp1=program_primitive_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, exp1.getTree());
                    if ( state.backtracking==0 ) {
                       retval.exp = (exp1!=null?exp1.exp:null); 
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // RBuilder.g:2704:9: ( ^(id= NOT arg= program_unary_expression ) | ^(id= UNARY_MINUS arg= program_unary_expression ) )
                    {
                    root_0 = (ColsAST)adaptor.nil();

                    // RBuilder.g:2704:9: ( ^(id= NOT arg= program_unary_expression ) | ^(id= UNARY_MINUS arg= program_unary_expression ) )
                    int alt237=2;
                    int LA237_0 = input.LA(1);

                    if ( (LA237_0==NOT) ) {
                        alt237=1;
                    }
                    else if ( (LA237_0==UNARY_MINUS) ) {
                        alt237=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 237, 0, input);

                        throw nvae;
                    }
                    switch (alt237) {
                        case 1 :
                            // RBuilder.g:2704:13: ^(id= NOT arg= program_unary_expression )
                            {
                            _last = (ColsAST)input.LT(1);
                            {
                            ColsAST _save_last_1 = _last;
                            ColsAST _first_1 = null;
                            ColsAST root_1 = (ColsAST)adaptor.nil();_last = (ColsAST)input.LT(1);
                            id=(ColsAST)match(input,NOT,FOLLOW_NOT_in_program_unary_expression17303); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            id_tree = (ColsAST)adaptor.dupNode(id);

                            root_1 = (ColsAST)adaptor.becomeRoot(id_tree, root_1);
                            }

                            if ( state.backtracking==0 ) {
                               op = ProgramOpExp.NOT; 
                            }

                            match(input, Token.DOWN, null); if (state.failed) return retval;
                            _last = (ColsAST)input.LT(1);
                            pushFollow(FOLLOW_program_unary_expression_in_program_unary_expression17325);
                            arg=program_unary_expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) 
                            adaptor.addChild(root_1, arg.getTree());

                            match(input, Token.UP, null); if (state.failed) return retval;adaptor.addChild(root_0, root_1);_last = _save_last_1;
                            }


                            if ( state.backtracking==0 ) {
                            }
                            }
                            break;
                        case 2 :
                            // RBuilder.g:2706:13: ^(id= UNARY_MINUS arg= program_unary_expression )
                            {
                            _last = (ColsAST)input.LT(1);
                            {
                            ColsAST _save_last_1 = _last;
                            ColsAST _first_1 = null;
                            ColsAST root_1 = (ColsAST)adaptor.nil();_last = (ColsAST)input.LT(1);
                            id=(ColsAST)match(input,UNARY_MINUS,FOLLOW_UNARY_MINUS_in_program_unary_expression17345); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            id_tree = (ColsAST)adaptor.dupNode(id);

                            root_1 = (ColsAST)adaptor.becomeRoot(id_tree, root_1);
                            }

                            if ( state.backtracking==0 ) {
                               op = ProgramOpExp.UNARY_MINUS; 
                            }

                            match(input, Token.DOWN, null); if (state.failed) return retval;
                            _last = (ColsAST)input.LT(1);
                            pushFollow(FOLLOW_program_unary_expression_in_program_unary_expression17367);
                            arg=program_unary_expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) 
                            adaptor.addChild(root_1, arg.getTree());

                            match(input, Token.UP, null); if (state.failed) return retval;adaptor.addChild(root_0, root_1);_last = _save_last_1;
                            }


                            if ( state.backtracking==0 ) {
                            }
                            }
                            break;

                    }

                    if ( state.backtracking==0 ) {
                       retval.exp = new ProgramOpExp(getLocation(id), op, (arg!=null?arg.exp:null), extra); 
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }
            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "program_unary_expression"

    public static class program_primitive_expression_return extends TreeRuleReturnScope {
        public ProgramExp exp = null;
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "program_primitive_expression"
    // RBuilder.g:2712:1: program_primitive_expression returns [ProgramExp exp = null] : (exp1= program_literal_expression | exp2= program_variable_expression | exp3= program_nested_expression );
    public final RBuilder.program_primitive_expression_return program_primitive_expression() throws RecognitionException {
        RBuilder.program_primitive_expression_return retval = new RBuilder.program_primitive_expression_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        ColsAST _first_0 = null;
        ColsAST _last = null;

        RBuilder.program_literal_expression_return exp1 = null;

        RBuilder.program_variable_expression_return exp2 = null;

        RBuilder.program_nested_expression_return exp3 = null;



        try {
            // RBuilder.g:2713:5: (exp1= program_literal_expression | exp2= program_variable_expression | exp3= program_nested_expression )
            int alt239=3;
            switch ( input.LA(1) ) {
            case NUMERIC_LITERAL:
            case CHARACTER_LITERAL:
            case STRING_LITERAL:
                {
                alt239=1;
                }
                break;
            case IDENTIFIER:
            case ARRAYFUNCTION:
            case FUNCTION:
            case PROGDOT:
            case VARDOT:
                {
                alt239=2;
                }
                break;
            case NESTED:
                {
                alt239=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 239, 0, input);

                throw nvae;
            }

            switch (alt239) {
                case 1 :
                    // RBuilder.g:2713:9: exp1= program_literal_expression
                    {
                    root_0 = (ColsAST)adaptor.nil();

                    _last = (ColsAST)input.LT(1);
                    pushFollow(FOLLOW_program_literal_expression_in_program_primitive_expression17413);
                    exp1=program_literal_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, exp1.getTree());
                    if ( state.backtracking==0 ) {
                       retval.exp = (exp1!=null?exp1.exp:null); 
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // RBuilder.g:2714:9: exp2= program_variable_expression
                    {
                    root_0 = (ColsAST)adaptor.nil();

                    _last = (ColsAST)input.LT(1);
                    pushFollow(FOLLOW_program_variable_expression_in_program_primitive_expression17427);
                    exp2=program_variable_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, exp2.getTree());
                    if ( state.backtracking==0 ) {
                       retval.exp = (exp2!=null?exp2.exp:null); 
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 3 :
                    // RBuilder.g:2715:9: exp3= program_nested_expression
                    {
                    root_0 = (ColsAST)adaptor.nil();

                    _last = (ColsAST)input.LT(1);
                    pushFollow(FOLLOW_program_nested_expression_in_program_primitive_expression17441);
                    exp3=program_nested_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, exp3.getTree());
                    if ( state.backtracking==0 ) {
                       retval.exp = (exp3!=null?exp3.exp:null); 
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }
            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "program_primitive_expression"

    public static class program_variable_expression_return extends TreeRuleReturnScope {
        public ProgramExp exp = null;
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "program_variable_expression"
    // RBuilder.g:2718:1: program_variable_expression returns [ProgramExp exp = null] : (exp1= program_dot_expression | exp2= variable_expression );
    public final RBuilder.program_variable_expression_return program_variable_expression() throws RecognitionException {
        RBuilder.program_variable_expression_return retval = new RBuilder.program_variable_expression_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        ColsAST _first_0 = null;
        ColsAST _last = null;

        RBuilder.program_dot_expression_return exp1 = null;

        RBuilder.variable_expression_return exp2 = null;



        try {
            // RBuilder.g:2719:5: (exp1= program_dot_expression | exp2= variable_expression )
            int alt240=2;
            int LA240_0 = input.LA(1);

            if ( (LA240_0==FUNCTION||LA240_0==PROGDOT) ) {
                alt240=1;
            }
            else if ( (LA240_0==IDENTIFIER||LA240_0==ARRAYFUNCTION||LA240_0==VARDOT) ) {
                alt240=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 240, 0, input);

                throw nvae;
            }
            switch (alt240) {
                case 1 :
                    // RBuilder.g:2719:9: exp1= program_dot_expression
                    {
                    root_0 = (ColsAST)adaptor.nil();

                    _last = (ColsAST)input.LT(1);
                    pushFollow(FOLLOW_program_dot_expression_in_program_variable_expression17468);
                    exp1=program_dot_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, exp1.getTree());
                    if ( state.backtracking==0 ) {
                       retval.exp = (exp1!=null?exp1.exp:null); 
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // RBuilder.g:2720:9: exp2= variable_expression
                    {
                    root_0 = (ColsAST)adaptor.nil();

                    _last = (ColsAST)input.LT(1);
                    pushFollow(FOLLOW_variable_expression_in_program_variable_expression17482);
                    exp2=variable_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, exp2.getTree());
                    if ( state.backtracking==0 ) {
                       retval.exp = (exp2!=null?exp2.exp:null); 
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }
            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "program_variable_expression"

    public static class program_dot_expression_return extends TreeRuleReturnScope {
        public ProgramExp exp = null;
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "program_dot_expression"
    // RBuilder.g:2723:1: program_dot_expression returns [ProgramExp exp = null] : (exp1= program_function_expression | ^( PROGDOT sem1= ident (seg= program_function_expression )+ ) );
    public final RBuilder.program_dot_expression_return program_dot_expression() throws RecognitionException {
        RBuilder.program_dot_expression_return retval = new RBuilder.program_dot_expression_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        ColsAST _first_0 = null;
        ColsAST _last = null;

        ColsAST PROGDOT172=null;
        RBuilder.program_function_expression_return exp1 = null;

        RBuilder.ident_return sem1 = null;

        RBuilder.program_function_expression_return seg = null;


        ColsAST PROGDOT172_tree=null;


            edu.clemson.cs.r2jt.collections.List<ProgramExp> segs = new edu.clemson.cs.r2jt.collections.List<ProgramExp>("ProgramExp");

        try {
            // RBuilder.g:2727:5: (exp1= program_function_expression | ^( PROGDOT sem1= ident (seg= program_function_expression )+ ) )
            int alt242=2;
            int LA242_0 = input.LA(1);

            if ( (LA242_0==FUNCTION) ) {
                alt242=1;
            }
            else if ( (LA242_0==PROGDOT) ) {
                alt242=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 242, 0, input);

                throw nvae;
            }
            switch (alt242) {
                case 1 :
                    // RBuilder.g:2727:9: exp1= program_function_expression
                    {
                    root_0 = (ColsAST)adaptor.nil();

                    _last = (ColsAST)input.LT(1);
                    pushFollow(FOLLOW_program_function_expression_in_program_dot_expression17513);
                    exp1=program_function_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, exp1.getTree());
                    if ( state.backtracking==0 ) {
                       retval.exp = (exp1!=null?exp1.exp:null); 
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // RBuilder.g:2728:9: ^( PROGDOT sem1= ident (seg= program_function_expression )+ )
                    {
                    root_0 = (ColsAST)adaptor.nil();

                    _last = (ColsAST)input.LT(1);
                    {
                    ColsAST _save_last_1 = _last;
                    ColsAST _first_1 = null;
                    ColsAST root_1 = (ColsAST)adaptor.nil();_last = (ColsAST)input.LT(1);
                    PROGDOT172=(ColsAST)match(input,PROGDOT,FOLLOW_PROGDOT_in_program_dot_expression17526); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PROGDOT172_tree = (ColsAST)adaptor.dupNode(PROGDOT172);

                    root_1 = (ColsAST)adaptor.becomeRoot(PROGDOT172_tree, root_1);
                    }


                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    _last = (ColsAST)input.LT(1);
                    pushFollow(FOLLOW_ident_in_program_dot_expression17530);
                    sem1=ident();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, sem1.getTree());
                    if ( state.backtracking==0 ) {
                       segs.add(new VariableNameExp(getLocation((sem1!=null?((ColsAST)sem1.tree):null)), null, (sem1!=null?sem1.ps:null))); 
                    }
                    // RBuilder.g:2729:13: (seg= program_function_expression )+
                    int cnt241=0;
                    loop241:
                    do {
                        int alt241=2;
                        int LA241_0 = input.LA(1);

                        if ( (LA241_0==FUNCTION) ) {
                            alt241=1;
                        }


                        switch (alt241) {
                    	case 1 :
                    	    // RBuilder.g:2729:14: seg= program_function_expression
                    	    {
                    	    _last = (ColsAST)input.LT(1);
                    	    pushFollow(FOLLOW_program_function_expression_in_program_dot_expression17549);
                    	    seg=program_function_expression();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) 
                    	    adaptor.addChild(root_1, seg.getTree());
                    	    if ( state.backtracking==0 ) {
                    	       segs.add((seg!=null?seg.exp:null)); 
                    	    }

                    	    if ( state.backtracking==0 ) {
                    	    }
                    	    }
                    	    break;

                    	default :
                    	    if ( cnt241 >= 1 ) break loop241;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(241, input);
                                throw eee;
                        }
                        cnt241++;
                    } while (true);


                    match(input, Token.UP, null); if (state.failed) return retval;adaptor.addChild(root_0, root_1);_last = _save_last_1;
                    }

                    if ( state.backtracking==0 ) {
                       retval.exp = new ProgramDotExp(getLocation(PROGDOT172), segs, null); 
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }
            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "program_dot_expression"

    public static class program_function_expression_return extends TreeRuleReturnScope {
        public ProgramExp exp = null;
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "program_function_expression"
    // RBuilder.g:2734:1: program_function_expression returns [ProgramExp exp = null] : ^( FUNCTION name= ident args2= program_function_argument_list ) ;
    public final RBuilder.program_function_expression_return program_function_expression() throws RecognitionException {
        RBuilder.program_function_expression_return retval = new RBuilder.program_function_expression_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        ColsAST _first_0 = null;
        ColsAST _last = null;

        ColsAST FUNCTION173=null;
        RBuilder.ident_return name = null;

        RBuilder.program_function_argument_list_return args2 = null;


        ColsAST FUNCTION173_tree=null;


            PosSymbol qual = null; //dummy
            ProgramExp sem = null; //dummy
            edu.clemson.cs.r2jt.collections.List<ProgramExp> args = new edu.clemson.cs.r2jt.collections.List<ProgramExp>("ProgramExp");

        try {
            // RBuilder.g:2740:5: ( ^( FUNCTION name= ident args2= program_function_argument_list ) )
            // RBuilder.g:2740:10: ^( FUNCTION name= ident args2= program_function_argument_list )
            {
            root_0 = (ColsAST)adaptor.nil();

            _last = (ColsAST)input.LT(1);
            {
            ColsAST _save_last_1 = _last;
            ColsAST _first_1 = null;
            ColsAST root_1 = (ColsAST)adaptor.nil();_last = (ColsAST)input.LT(1);
            FUNCTION173=(ColsAST)match(input,FUNCTION,FOLLOW_FUNCTION_in_program_function_expression17604); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            FUNCTION173_tree = (ColsAST)adaptor.dupNode(FUNCTION173);

            root_1 = (ColsAST)adaptor.becomeRoot(FUNCTION173_tree, root_1);
            }


            match(input, Token.DOWN, null); if (state.failed) return retval;
            _last = (ColsAST)input.LT(1);
            pushFollow(FOLLOW_ident_in_program_function_expression17608);
            name=ident();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, name.getTree());
            _last = (ColsAST)input.LT(1);
            pushFollow(FOLLOW_program_function_argument_list_in_program_function_expression17612);
            args2=program_function_argument_list();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, args2.getTree());

            match(input, Token.UP, null); if (state.failed) return retval;adaptor.addChild(root_0, root_1);_last = _save_last_1;
            }

            if ( state.backtracking==0 ) {
               retval.exp = new ProgramParamExp(getLocation(FUNCTION173), (name!=null?name.ps:null),
                                                    (args2!=null?args2.args:null)!=null?(args2!=null?args2.args:null):args,
                                                    null); 
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "program_function_expression"

    public static class program_function_argument_list_return extends TreeRuleReturnScope {
        public edu.clemson.cs.r2jt.collections.List<ProgramExp> args
                = new edu.clemson.cs.r2jt.collections.List<ProgramExp>("ProgramExp");
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "program_function_argument_list"
    // RBuilder.g:2746:1: program_function_argument_list returns [edu.clemson.cs.r2jt.collections.List<ProgramExp> args\n = new edu.clemson.cs.r2jt.collections.List<ProgramExp>(\"ProgramExp\")] : ^( PARAMS (arg= program_expression )* ) ;
    public final RBuilder.program_function_argument_list_return program_function_argument_list() throws RecognitionException {
        RBuilder.program_function_argument_list_return retval = new RBuilder.program_function_argument_list_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        ColsAST _first_0 = null;
        ColsAST _last = null;

        ColsAST PARAMS174=null;
        RBuilder.program_expression_return arg = null;


        ColsAST PARAMS174_tree=null;

        try {
            // RBuilder.g:2748:5: ( ^( PARAMS (arg= program_expression )* ) )
            // RBuilder.g:2748:9: ^( PARAMS (arg= program_expression )* )
            {
            root_0 = (ColsAST)adaptor.nil();

            _last = (ColsAST)input.LT(1);
            {
            ColsAST _save_last_1 = _last;
            ColsAST _first_1 = null;
            ColsAST root_1 = (ColsAST)adaptor.nil();_last = (ColsAST)input.LT(1);
            PARAMS174=(ColsAST)match(input,PARAMS,FOLLOW_PARAMS_in_program_function_argument_list17647); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            PARAMS174_tree = (ColsAST)adaptor.dupNode(PARAMS174);

            root_1 = (ColsAST)adaptor.becomeRoot(PARAMS174_tree, root_1);
            }


            if ( input.LA(1)==Token.DOWN ) {
                match(input, Token.DOWN, null); if (state.failed) return retval;
                // RBuilder.g:2748:18: (arg= program_expression )*
                loop243:
                do {
                    int alt243=2;
                    int LA243_0 = input.LA(1);

                    if ( (LA243_0==EXPR) ) {
                        alt243=1;
                    }


                    switch (alt243) {
                	case 1 :
                	    // RBuilder.g:2748:19: arg= program_expression
                	    {
                	    _last = (ColsAST)input.LT(1);
                	    pushFollow(FOLLOW_program_expression_in_program_function_argument_list17652);
                	    arg=program_expression();

                	    state._fsp--;
                	    if (state.failed) return retval;
                	    if ( state.backtracking==0 ) 
                	    adaptor.addChild(root_1, arg.getTree());
                	    if ( state.backtracking==0 ) {
                	      retval.args.add((arg!=null?arg.exp:null)); 
                	    }

                	    if ( state.backtracking==0 ) {
                	    }
                	    }
                	    break;

                	default :
                	    break loop243;
                    }
                } while (true);


                match(input, Token.UP, null); if (state.failed) return retval;
            }adaptor.addChild(root_0, root_1);_last = _save_last_1;
            }


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "program_function_argument_list"

    public static class program_nested_expression_return extends TreeRuleReturnScope {
        public ProgramExp exp = null;
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "program_nested_expression"
    // RBuilder.g:2751:1: program_nested_expression returns [ProgramExp exp = null] : ^( NESTED exp1= program_expression ) ;
    public final RBuilder.program_nested_expression_return program_nested_expression() throws RecognitionException {
        RBuilder.program_nested_expression_return retval = new RBuilder.program_nested_expression_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        ColsAST _first_0 = null;
        ColsAST _last = null;

        ColsAST NESTED175=null;
        RBuilder.program_expression_return exp1 = null;


        ColsAST NESTED175_tree=null;

        try {
            // RBuilder.g:2752:5: ( ^( NESTED exp1= program_expression ) )
            // RBuilder.g:2752:9: ^( NESTED exp1= program_expression )
            {
            root_0 = (ColsAST)adaptor.nil();

            _last = (ColsAST)input.LT(1);
            {
            ColsAST _save_last_1 = _last;
            ColsAST _first_1 = null;
            ColsAST root_1 = (ColsAST)adaptor.nil();_last = (ColsAST)input.LT(1);
            NESTED175=(ColsAST)match(input,NESTED,FOLLOW_NESTED_in_program_nested_expression17681); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            NESTED175_tree = (ColsAST)adaptor.dupNode(NESTED175);

            root_1 = (ColsAST)adaptor.becomeRoot(NESTED175_tree, root_1);
            }


            match(input, Token.DOWN, null); if (state.failed) return retval;
            _last = (ColsAST)input.LT(1);
            pushFollow(FOLLOW_program_expression_in_program_nested_expression17685);
            exp1=program_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, exp1.getTree());

            match(input, Token.UP, null); if (state.failed) return retval;adaptor.addChild(root_0, root_1);_last = _save_last_1;
            }

            if ( state.backtracking==0 ) {
               retval.exp = (exp1!=null?exp1.exp:null); 
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "program_nested_expression"

    public static class program_literal_expression_return extends TreeRuleReturnScope {
        public ProgramExp exp = null;
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "program_literal_expression"
    // RBuilder.g:2755:1: program_literal_expression returns [ProgramExp exp = null] : ( NUMERIC_LITERAL | CHARACTER_LITERAL | STRING_LITERAL );
    public final RBuilder.program_literal_expression_return program_literal_expression() throws RecognitionException {
        RBuilder.program_literal_expression_return retval = new RBuilder.program_literal_expression_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        ColsAST _first_0 = null;
        ColsAST _last = null;

        ColsAST NUMERIC_LITERAL176=null;
        ColsAST CHARACTER_LITERAL177=null;
        ColsAST STRING_LITERAL178=null;

        ColsAST NUMERIC_LITERAL176_tree=null;
        ColsAST CHARACTER_LITERAL177_tree=null;
        ColsAST STRING_LITERAL178_tree=null;


            int ival = 0;
            double dval = 0.0;
            Character ch = null;
            String str = null;
            Exp mexp = null;

        try {
            // RBuilder.g:2763:5: ( NUMERIC_LITERAL | CHARACTER_LITERAL | STRING_LITERAL )
            int alt244=3;
            switch ( input.LA(1) ) {
            case NUMERIC_LITERAL:
                {
                alt244=1;
                }
                break;
            case CHARACTER_LITERAL:
                {
                alt244=2;
                }
                break;
            case STRING_LITERAL:
                {
                alt244=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 244, 0, input);

                throw nvae;
            }

            switch (alt244) {
                case 1 :
                    // RBuilder.g:2763:9: NUMERIC_LITERAL
                    {
                    root_0 = (ColsAST)adaptor.nil();

                    _last = (ColsAST)input.LT(1);
                    NUMERIC_LITERAL176=(ColsAST)match(input,NUMERIC_LITERAL,FOLLOW_NUMERIC_LITERAL_in_program_literal_expression17715); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NUMERIC_LITERAL176_tree = (ColsAST)adaptor.dupNode(NUMERIC_LITERAL176);

                    adaptor.addChild(root_0, NUMERIC_LITERAL176_tree);
                    }
                    if ( state.backtracking==0 ) {
                         str = NUMERIC_LITERAL176.getText();
                                  if (str.indexOf('.') == -1) { // a dot does not appear
                                      try {
                                          ival = (int)Integer.valueOf(str).intValue();
                                      } catch (Exception e) { ; } //FIX: add error here
                                      mexp = new IntegerExp(getLocation(NUMERIC_LITERAL176), null, ival);
                                      retval.exp = getProgramLiteral(mexp);
                                  } else {
                                      try {
                                          dval = (double)Double.valueOf(str).doubleValue();
                                      } catch (Exception e) { ; } //FIX: add error here
                                      mexp = new DoubleExp(getLocation(NUMERIC_LITERAL176), dval);
                                      retval.exp = getProgramLiteral(mexp);
                                  }
                              
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // RBuilder.g:2779:9: CHARACTER_LITERAL
                    {
                    root_0 = (ColsAST)adaptor.nil();

                    _last = (ColsAST)input.LT(1);
                    CHARACTER_LITERAL177=(ColsAST)match(input,CHARACTER_LITERAL,FOLLOW_CHARACTER_LITERAL_in_program_literal_expression17735); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    CHARACTER_LITERAL177_tree = (ColsAST)adaptor.dupNode(CHARACTER_LITERAL177);

                    adaptor.addChild(root_0, CHARACTER_LITERAL177_tree);
                    }
                    if ( state.backtracking==0 ) {
                         str = CHARACTER_LITERAL177.getText();
                                  ch = new Character(str.charAt(1));
                                  mexp = new CharExp(getLocation(CHARACTER_LITERAL177), ch);
                                  retval.exp = getProgramLiteral(mexp);
                              
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 3 :
                    // RBuilder.g:2785:9: STRING_LITERAL
                    {
                    root_0 = (ColsAST)adaptor.nil();

                    _last = (ColsAST)input.LT(1);
                    STRING_LITERAL178=(ColsAST)match(input,STRING_LITERAL,FOLLOW_STRING_LITERAL_in_program_literal_expression17755); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STRING_LITERAL178_tree = (ColsAST)adaptor.dupNode(STRING_LITERAL178);

                    adaptor.addChild(root_0, STRING_LITERAL178_tree);
                    }
                    if ( state.backtracking==0 ) {
                         str = STRING_LITERAL178.getText();
                                  mexp = new StringExp(getLocation(STRING_LITERAL178), str);
                                  retval.exp = getProgramLiteral(mexp);
                              
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }
            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "program_literal_expression"

    public static class variable_expression_return extends TreeRuleReturnScope {
        public VariableExp exp = null;
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "variable_expression"
    // RBuilder.g:2796:1: variable_expression returns [VariableExp exp = null] : (exp1= variable_array_expression | ^( VARDOT (seg= variable_array_expression )+ ) );
    public final RBuilder.variable_expression_return variable_expression() throws RecognitionException {
        RBuilder.variable_expression_return retval = new RBuilder.variable_expression_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        ColsAST _first_0 = null;
        ColsAST _last = null;

        ColsAST VARDOT179=null;
        RBuilder.variable_array_expression_return exp1 = null;

        RBuilder.variable_array_expression_return seg = null;


        ColsAST VARDOT179_tree=null;


            edu.clemson.cs.r2jt.collections.List<VariableExp> segs = new edu.clemson.cs.r2jt.collections.List<VariableExp>("VariableExp");
            VariableExp sem = null; //dummy

        try {
            // RBuilder.g:2801:5: (exp1= variable_array_expression | ^( VARDOT (seg= variable_array_expression )+ ) )
            int alt246=2;
            int LA246_0 = input.LA(1);

            if ( (LA246_0==IDENTIFIER||LA246_0==ARRAYFUNCTION) ) {
                alt246=1;
            }
            else if ( (LA246_0==VARDOT) ) {
                alt246=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 246, 0, input);

                throw nvae;
            }
            switch (alt246) {
                case 1 :
                    // RBuilder.g:2801:9: exp1= variable_array_expression
                    {
                    root_0 = (ColsAST)adaptor.nil();

                    _last = (ColsAST)input.LT(1);
                    pushFollow(FOLLOW_variable_array_expression_in_variable_expression17798);
                    exp1=variable_array_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, exp1.getTree());
                    if ( state.backtracking==0 ) {
                       retval.exp = (exp1!=null?exp1.exp:null); 
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // RBuilder.g:2803:9: ^( VARDOT (seg= variable_array_expression )+ )
                    {
                    root_0 = (ColsAST)adaptor.nil();

                    _last = (ColsAST)input.LT(1);
                    {
                    ColsAST _save_last_1 = _last;
                    ColsAST _first_1 = null;
                    ColsAST root_1 = (ColsAST)adaptor.nil();_last = (ColsAST)input.LT(1);
                    VARDOT179=(ColsAST)match(input,VARDOT,FOLLOW_VARDOT_in_variable_expression17819); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    VARDOT179_tree = (ColsAST)adaptor.dupNode(VARDOT179);

                    root_1 = (ColsAST)adaptor.becomeRoot(VARDOT179_tree, root_1);
                    }


                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    // RBuilder.g:2803:18: (seg= variable_array_expression )+
                    int cnt245=0;
                    loop245:
                    do {
                        int alt245=2;
                        int LA245_0 = input.LA(1);

                        if ( (LA245_0==IDENTIFIER||LA245_0==ARRAYFUNCTION) ) {
                            alt245=1;
                        }


                        switch (alt245) {
                    	case 1 :
                    	    // RBuilder.g:2803:19: seg= variable_array_expression
                    	    {
                    	    _last = (ColsAST)input.LT(1);
                    	    pushFollow(FOLLOW_variable_array_expression_in_variable_expression17824);
                    	    seg=variable_array_expression();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) 
                    	    adaptor.addChild(root_1, seg.getTree());
                    	    if ( state.backtracking==0 ) {
                    	       segs.add((seg!=null?seg.exp:null)); 
                    	    }

                    	    if ( state.backtracking==0 ) {
                    	    }
                    	    }
                    	    break;

                    	default :
                    	    if ( cnt245 >= 1 ) break loop245;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(245, input);
                                throw eee;
                        }
                        cnt245++;
                    } while (true);


                    match(input, Token.UP, null); if (state.failed) return retval;adaptor.addChild(root_0, root_1);_last = _save_last_1;
                    }

                    if ( state.backtracking==0 ) {
                       retval.exp = new VariableDotExp(getLocation(VARDOT179), segs, sem); 
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }
            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "variable_expression"

    public static class variable_array_expression_return extends TreeRuleReturnScope {
        public VariableExp exp = null;
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "variable_array_expression"
    // RBuilder.g:2807:1: variable_array_expression returns [VariableExp exp = null] : (name= ident | ^( ARRAYFUNCTION name= ident arg= variable_array_argument_list ) );
    public final RBuilder.variable_array_expression_return variable_array_expression() throws RecognitionException {
        RBuilder.variable_array_expression_return retval = new RBuilder.variable_array_expression_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        ColsAST _first_0 = null;
        ColsAST _last = null;

        ColsAST ARRAYFUNCTION180=null;
        RBuilder.ident_return name = null;

        RBuilder.variable_array_argument_list_return arg = null;


        ColsAST ARRAYFUNCTION180_tree=null;


            PosSymbol qual = null; //dummy

        try {
            // RBuilder.g:2811:5: (name= ident | ^( ARRAYFUNCTION name= ident arg= variable_array_argument_list ) )
            int alt247=2;
            int LA247_0 = input.LA(1);

            if ( (LA247_0==IDENTIFIER) ) {
                alt247=1;
            }
            else if ( (LA247_0==ARRAYFUNCTION) ) {
                alt247=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 247, 0, input);

                throw nvae;
            }
            switch (alt247) {
                case 1 :
                    // RBuilder.g:2811:9: name= ident
                    {
                    root_0 = (ColsAST)adaptor.nil();

                    _last = (ColsAST)input.LT(1);
                    pushFollow(FOLLOW_ident_in_variable_array_expression17868);
                    name=ident();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, name.getTree());
                    if ( state.backtracking==0 ) {
                       retval.exp = new VariableNameExp(getLocation((name!=null?((ColsAST)name.tree):null)), qual, (name!=null?name.ps:null)); 
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // RBuilder.g:2813:9: ^( ARRAYFUNCTION name= ident arg= variable_array_argument_list )
                    {
                    root_0 = (ColsAST)adaptor.nil();

                    _last = (ColsAST)input.LT(1);
                    {
                    ColsAST _save_last_1 = _last;
                    ColsAST _first_1 = null;
                    ColsAST root_1 = (ColsAST)adaptor.nil();_last = (ColsAST)input.LT(1);
                    ARRAYFUNCTION180=(ColsAST)match(input,ARRAYFUNCTION,FOLLOW_ARRAYFUNCTION_in_variable_array_expression17889); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ARRAYFUNCTION180_tree = (ColsAST)adaptor.dupNode(ARRAYFUNCTION180);

                    root_1 = (ColsAST)adaptor.becomeRoot(ARRAYFUNCTION180_tree, root_1);
                    }


                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    _last = (ColsAST)input.LT(1);
                    pushFollow(FOLLOW_ident_in_variable_array_expression17893);
                    name=ident();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, name.getTree());
                    _last = (ColsAST)input.LT(1);
                    pushFollow(FOLLOW_variable_array_argument_list_in_variable_array_expression17897);
                    arg=variable_array_argument_list();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, arg.getTree());

                    match(input, Token.UP, null); if (state.failed) return retval;adaptor.addChild(root_0, root_1);_last = _save_last_1;
                    }

                    if ( state.backtracking==0 ) {
                       retval.exp = new VariableArrayExp(getLocation(ARRAYFUNCTION180), qual, (name!=null?name.ps:null), (arg!=null?arg.exp:null)); 
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }
            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "variable_array_expression"

    public static class variable_array_argument_list_return extends TreeRuleReturnScope {
        public ProgramExp exp = null;
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "variable_array_argument_list"
    // RBuilder.g:2817:1: variable_array_argument_list returns [ProgramExp exp = null] : ^( PARAMS (exp1= program_expression )? ) ;
    public final RBuilder.variable_array_argument_list_return variable_array_argument_list() throws RecognitionException {
        RBuilder.variable_array_argument_list_return retval = new RBuilder.variable_array_argument_list_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        ColsAST _first_0 = null;
        ColsAST _last = null;

        ColsAST PARAMS181=null;
        RBuilder.program_expression_return exp1 = null;


        ColsAST PARAMS181_tree=null;

        try {
            // RBuilder.g:2818:5: ( ^( PARAMS (exp1= program_expression )? ) )
            // RBuilder.g:2818:9: ^( PARAMS (exp1= program_expression )? )
            {
            root_0 = (ColsAST)adaptor.nil();

            _last = (ColsAST)input.LT(1);
            {
            ColsAST _save_last_1 = _last;
            ColsAST _first_1 = null;
            ColsAST root_1 = (ColsAST)adaptor.nil();_last = (ColsAST)input.LT(1);
            PARAMS181=(ColsAST)match(input,PARAMS,FOLLOW_PARAMS_in_variable_array_argument_list17932); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            PARAMS181_tree = (ColsAST)adaptor.dupNode(PARAMS181);

            root_1 = (ColsAST)adaptor.becomeRoot(PARAMS181_tree, root_1);
            }


            if ( input.LA(1)==Token.DOWN ) {
                match(input, Token.DOWN, null); if (state.failed) return retval;
                // RBuilder.g:2818:18: (exp1= program_expression )?
                int alt248=2;
                int LA248_0 = input.LA(1);

                if ( (LA248_0==EXPR) ) {
                    alt248=1;
                }
                switch (alt248) {
                    case 1 :
                        // RBuilder.g:2818:19: exp1= program_expression
                        {
                        _last = (ColsAST)input.LT(1);
                        pushFollow(FOLLOW_program_expression_in_variable_array_argument_list17937);
                        exp1=program_expression();

                        state._fsp--;
                        if (state.failed) return retval;
                        if ( state.backtracking==0 ) 
                        adaptor.addChild(root_1, exp1.getTree());
                        if ( state.backtracking==0 ) {
                           retval.exp = (exp1!=null?exp1.exp:null); 
                        }

                        if ( state.backtracking==0 ) {
                        }
                        }
                        break;

                }


                match(input, Token.UP, null); if (state.failed) return retval;
            }adaptor.addChild(root_0, root_1);_last = _save_last_1;
            }


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "variable_array_argument_list"

    public static class certain_qualified_ident_return extends TreeRuleReturnScope {
        public VarExp exp = null;
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "certain_qualified_ident"
    // RBuilder.g:2825:1: certain_qualified_ident returns [VarExp exp = null] : ^( IDENT ps1= ident ps2= ident ) ;
    public final RBuilder.certain_qualified_ident_return certain_qualified_ident() throws RecognitionException {
        RBuilder.certain_qualified_ident_return retval = new RBuilder.certain_qualified_ident_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        ColsAST _first_0 = null;
        ColsAST _last = null;

        ColsAST IDENT182=null;
        RBuilder.ident_return ps1 = null;

        RBuilder.ident_return ps2 = null;


        ColsAST IDENT182_tree=null;

        try {
            // RBuilder.g:2826:5: ( ^( IDENT ps1= ident ps2= ident ) )
            // RBuilder.g:2826:9: ^( IDENT ps1= ident ps2= ident )
            {
            root_0 = (ColsAST)adaptor.nil();

            _last = (ColsAST)input.LT(1);
            {
            ColsAST _save_last_1 = _last;
            ColsAST _first_1 = null;
            ColsAST root_1 = (ColsAST)adaptor.nil();_last = (ColsAST)input.LT(1);
            IDENT182=(ColsAST)match(input,IDENT,FOLLOW_IDENT_in_certain_qualified_ident17970); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            IDENT182_tree = (ColsAST)adaptor.dupNode(IDENT182);

            root_1 = (ColsAST)adaptor.becomeRoot(IDENT182_tree, root_1);
            }


            match(input, Token.DOWN, null); if (state.failed) return retval;
            _last = (ColsAST)input.LT(1);
            pushFollow(FOLLOW_ident_in_certain_qualified_ident17974);
            ps1=ident();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, ps1.getTree());
            _last = (ColsAST)input.LT(1);
            pushFollow(FOLLOW_ident_in_certain_qualified_ident17978);
            ps2=ident();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, ps2.getTree());

            match(input, Token.UP, null); if (state.failed) return retval;adaptor.addChild(root_0, root_1);_last = _save_last_1;
            }

            if ( state.backtracking==0 ) {
               retval.exp = new VarExp(getLocation(IDENT182), (ps1!=null?ps1.ps:null), (ps2!=null?ps2.ps:null)); 
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "certain_qualified_ident"

    public static class qualified_ident_return extends TreeRuleReturnScope {
        public VarExp exp = null;
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "qualified_ident"
    // RBuilder.g:2830:1: qualified_ident returns [VarExp exp = null] : ^( IDENTIFIER ps1= ident (ps2= ident )? ) ;
    public final RBuilder.qualified_ident_return qualified_ident() throws RecognitionException {
        RBuilder.qualified_ident_return retval = new RBuilder.qualified_ident_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        ColsAST _first_0 = null;
        ColsAST _last = null;

        ColsAST IDENTIFIER183=null;
        RBuilder.ident_return ps1 = null;

        RBuilder.ident_return ps2 = null;


        ColsAST IDENTIFIER183_tree=null;


            boolean qualified = false;

        try {
            // RBuilder.g:2834:5: ( ^( IDENTIFIER ps1= ident (ps2= ident )? ) )
            // RBuilder.g:2834:9: ^( IDENTIFIER ps1= ident (ps2= ident )? )
            {
            root_0 = (ColsAST)adaptor.nil();

            _last = (ColsAST)input.LT(1);
            {
            ColsAST _save_last_1 = _last;
            ColsAST _first_1 = null;
            ColsAST root_1 = (ColsAST)adaptor.nil();_last = (ColsAST)input.LT(1);
            IDENTIFIER183=(ColsAST)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_qualified_ident18017); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            IDENTIFIER183_tree = (ColsAST)adaptor.dupNode(IDENTIFIER183);

            root_1 = (ColsAST)adaptor.becomeRoot(IDENTIFIER183_tree, root_1);
            }


            match(input, Token.DOWN, null); if (state.failed) return retval;
            _last = (ColsAST)input.LT(1);
            pushFollow(FOLLOW_ident_in_qualified_ident18021);
            ps1=ident();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, ps1.getTree());
            // RBuilder.g:2834:32: (ps2= ident )?
            int alt249=2;
            int LA249_0 = input.LA(1);

            if ( (LA249_0==IDENTIFIER) ) {
                alt249=1;
            }
            switch (alt249) {
                case 1 :
                    // RBuilder.g:2834:33: ps2= ident
                    {
                    _last = (ColsAST)input.LT(1);
                    pushFollow(FOLLOW_ident_in_qualified_ident18026);
                    ps2=ident();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, ps2.getTree());
                    if ( state.backtracking==0 ) {
                       qualified = true; 
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }


            match(input, Token.UP, null); if (state.failed) return retval;adaptor.addChild(root_0, root_1);_last = _save_last_1;
            }

            if ( state.backtracking==0 ) {
                 if (qualified) {
                              retval.exp = new VarExp(getLocation(IDENTIFIER183), (ps1!=null?ps1.ps:null), (ps2!=null?ps2.ps:null));
                          } else {
                              retval.exp = new VarExp(getLocation(IDENTIFIER183), null, (ps1!=null?ps1.ps:null));
                          }
                      
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "qualified_ident"

    public static class ident_return extends TreeRuleReturnScope {
        public PosSymbol ps = null;
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "ident"
    // RBuilder.g:2843:1: ident returns [PosSymbol ps = null] : id= IDENTIFIER ;
    public final RBuilder.ident_return ident() throws RecognitionException {
        RBuilder.ident_return retval = new RBuilder.ident_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        ColsAST _first_0 = null;
        ColsAST _last = null;

        ColsAST id=null;

        ColsAST id_tree=null;

        try {
            // RBuilder.g:2844:5: (id= IDENTIFIER )
            // RBuilder.g:2844:9: id= IDENTIFIER
            {
            root_0 = (ColsAST)adaptor.nil();

            _last = (ColsAST)input.LT(1);
            id=(ColsAST)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_ident18066); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            id_tree = (ColsAST)adaptor.dupNode(id);

            adaptor.addChild(root_0, id_tree);
            }
            if ( state.backtracking==0 ) {
               retval.ps = getPosSymbol(id); 
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "ident"

    public static class math_theorem_ident_return extends TreeRuleReturnScope {
        public PosSymbol ps = null;
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "math_theorem_ident"
    // RBuilder.g:2847:1: math_theorem_ident returns [PosSymbol ps = null] : (ps1= ident | ast= NUMERIC_LITERAL );
    public final RBuilder.math_theorem_ident_return math_theorem_ident() throws RecognitionException {
        RBuilder.math_theorem_ident_return retval = new RBuilder.math_theorem_ident_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        ColsAST _first_0 = null;
        ColsAST _last = null;

        ColsAST ast=null;
        RBuilder.ident_return ps1 = null;


        ColsAST ast_tree=null;

        try {
            // RBuilder.g:2848:5: (ps1= ident | ast= NUMERIC_LITERAL )
            int alt250=2;
            int LA250_0 = input.LA(1);

            if ( (LA250_0==IDENTIFIER) ) {
                alt250=1;
            }
            else if ( (LA250_0==NUMERIC_LITERAL) ) {
                alt250=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 250, 0, input);

                throw nvae;
            }
            switch (alt250) {
                case 1 :
                    // RBuilder.g:2848:9: ps1= ident
                    {
                    root_0 = (ColsAST)adaptor.nil();

                    _last = (ColsAST)input.LT(1);
                    pushFollow(FOLLOW_ident_in_math_theorem_ident18093);
                    ps1=ident();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, ps1.getTree());
                    if ( state.backtracking==0 ) {
                       retval.ps = (ps1!=null?ps1.ps:null); 
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // RBuilder.g:2849:9: ast= NUMERIC_LITERAL
                    {
                    root_0 = (ColsAST)adaptor.nil();

                    _last = (ColsAST)input.LT(1);
                    ast=(ColsAST)match(input,NUMERIC_LITERAL,FOLLOW_NUMERIC_LITERAL_in_math_theorem_ident18107); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ast_tree = (ColsAST)adaptor.dupNode(ast);

                    adaptor.addChild(root_0, ast_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.ps = getPosSymbol(ast); 
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }
            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "math_theorem_ident"

    public static class proof_module_return extends TreeRuleReturnScope {
        public ProofModuleDec pmd = null;
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "proof_module"
    // RBuilder.g:2856:1: proof_module returns [ProofModuleDec pmd = null] : ^( PROOFS_FOR moduleName= ident (pars= module_formal_param_section )? (uses= uses_list )? (decs= proof_module_body )? ident ) ;
    public final RBuilder.proof_module_return proof_module() throws RecognitionException {
        RBuilder.proof_module_return retval = new RBuilder.proof_module_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        ColsAST _first_0 = null;
        ColsAST _last = null;

        ColsAST PROOFS_FOR184=null;
        RBuilder.ident_return moduleName = null;

        RBuilder.module_formal_param_section_return pars = null;

        RBuilder.uses_list_return uses = null;

        RBuilder.proof_module_body_return decs = null;

        RBuilder.ident_return ident185 = null;


        ColsAST PROOFS_FOR184_tree=null;

        try {
            // RBuilder.g:2857:5: ( ^( PROOFS_FOR moduleName= ident (pars= module_formal_param_section )? (uses= uses_list )? (decs= proof_module_body )? ident ) )
            // RBuilder.g:2857:9: ^( PROOFS_FOR moduleName= ident (pars= module_formal_param_section )? (uses= uses_list )? (decs= proof_module_body )? ident )
            {
            root_0 = (ColsAST)adaptor.nil();

            _last = (ColsAST)input.LT(1);
            {
            ColsAST _save_last_1 = _last;
            ColsAST _first_1 = null;
            ColsAST root_1 = (ColsAST)adaptor.nil();_last = (ColsAST)input.LT(1);
            PROOFS_FOR184=(ColsAST)match(input,PROOFS_FOR,FOLLOW_PROOFS_FOR_in_proof_module18141); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            PROOFS_FOR184_tree = (ColsAST)adaptor.dupNode(PROOFS_FOR184);

            root_1 = (ColsAST)adaptor.becomeRoot(PROOFS_FOR184_tree, root_1);
            }


            match(input, Token.DOWN, null); if (state.failed) return retval;
            _last = (ColsAST)input.LT(1);
            pushFollow(FOLLOW_ident_in_proof_module18145);
            moduleName=ident();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, moduleName.getTree());
            // RBuilder.g:2858:9: (pars= module_formal_param_section )?
            int alt251=2;
            int LA251_0 = input.LA(1);

            if ( (LA251_0==PARAMS) ) {
                alt251=1;
            }
            switch (alt251) {
                case 1 :
                    // RBuilder.g:2858:10: pars= module_formal_param_section
                    {
                    _last = (ColsAST)input.LT(1);
                    pushFollow(FOLLOW_module_formal_param_section_in_proof_module18158);
                    pars=module_formal_param_section();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, pars.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }

            // RBuilder.g:2859:9: (uses= uses_list )?
            int alt252=2;
            int LA252_0 = input.LA(1);

            if ( (LA252_0==USES) ) {
                alt252=1;
            }
            switch (alt252) {
                case 1 :
                    // RBuilder.g:2859:10: uses= uses_list
                    {
                    _last = (ColsAST)input.LT(1);
                    pushFollow(FOLLOW_uses_list_in_proof_module18173);
                    uses=uses_list();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, uses.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }

            // RBuilder.g:2859:27: (decs= proof_module_body )?
            int alt253=2;
            int LA253_0 = input.LA(1);

            if ( (LA253_0==PROOFBODY) ) {
                alt253=1;
            }
            switch (alt253) {
                case 1 :
                    // RBuilder.g:2859:28: decs= proof_module_body
                    {
                    _last = (ColsAST)input.LT(1);
                    pushFollow(FOLLOW_proof_module_body_in_proof_module18180);
                    decs=proof_module_body();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, decs.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }

            _last = (ColsAST)input.LT(1);
            pushFollow(FOLLOW_ident_in_proof_module18184);
            ident185=ident();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, ident185.getTree());

            match(input, Token.UP, null); if (state.failed) return retval;adaptor.addChild(root_0, root_1);_last = _save_last_1;
            }

            if ( state.backtracking==0 ) {
               retval.pmd = new ProofModuleDec((moduleName!=null?moduleName.ps:null), (pars!=null?pars.pars:null), (uses!=null?uses.uses:null), (decs!=null?decs.decs:null)); 
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "proof_module"

    public static class proof_module_body_return extends TreeRuleReturnScope {
        public edu.clemson.cs.r2jt.collections.List<Dec> decs = new edu.clemson.cs.r2jt.collections.List<Dec>("Math Items");
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "proof_module_body"
    // RBuilder.g:2863:1: proof_module_body returns [edu.clemson.cs.r2jt.collections.List<Dec> decs = new edu.clemson.cs.r2jt.collections.List<Dec>(\"Math Items\")] : ^( PROOFBODY (mmdTemp= math_item_sequence | tempDec= proof )* ) ;
    public final RBuilder.proof_module_body_return proof_module_body() throws RecognitionException {
        RBuilder.proof_module_body_return retval = new RBuilder.proof_module_body_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        ColsAST _first_0 = null;
        ColsAST _last = null;

        ColsAST PROOFBODY186=null;
        RBuilder.math_item_sequence_return mmdTemp = null;

        RBuilder.proof_return tempDec = null;


        ColsAST PROOFBODY186_tree=null;

        try {
            // RBuilder.g:2864:5: ( ^( PROOFBODY (mmdTemp= math_item_sequence | tempDec= proof )* ) )
            // RBuilder.g:2864:9: ^( PROOFBODY (mmdTemp= math_item_sequence | tempDec= proof )* )
            {
            root_0 = (ColsAST)adaptor.nil();

            _last = (ColsAST)input.LT(1);
            {
            ColsAST _save_last_1 = _last;
            ColsAST _first_1 = null;
            ColsAST root_1 = (ColsAST)adaptor.nil();_last = (ColsAST)input.LT(1);
            PROOFBODY186=(ColsAST)match(input,PROOFBODY,FOLLOW_PROOFBODY_in_proof_module_body18223); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            PROOFBODY186_tree = (ColsAST)adaptor.dupNode(PROOFBODY186);

            root_1 = (ColsAST)adaptor.becomeRoot(PROOFBODY186_tree, root_1);
            }


            if ( input.LA(1)==Token.DOWN ) {
                match(input, Token.DOWN, null); if (state.failed) return retval;
                // RBuilder.g:2865:9: (mmdTemp= math_item_sequence | tempDec= proof )*
                loop254:
                do {
                    int alt254=3;
                    int LA254_0 = input.LA(1);

                    if ( (LA254_0==AXIOM||LA254_0==COMMUTATIVITY||LA254_0==COROLLARY||LA254_0==DEFINITION||LA254_0==LEMMA||LA254_0==PROPERTY||LA254_0==THEOREM||LA254_0==TYPE||LA254_0==CATEGORICAL_DEFINITION||LA254_0==IMPLICIT_DEF||LA254_0==INDUCTIVE_DEF) ) {
                        alt254=1;
                    }
                    else if ( (LA254_0==PROOF) ) {
                        alt254=2;
                    }


                    switch (alt254) {
                	case 1 :
                	    // RBuilder.g:2865:10: mmdTemp= math_item_sequence
                	    {
                	    _last = (ColsAST)input.LT(1);
                	    pushFollow(FOLLOW_math_item_sequence_in_proof_module_body18236);
                	    mmdTemp=math_item_sequence();

                	    state._fsp--;
                	    if (state.failed) return retval;
                	    if ( state.backtracking==0 ) 
                	    adaptor.addChild(root_1, mmdTemp.getTree());
                	    if ( state.backtracking==0 ) {
                	       retval.decs.addAllUnique((mmdTemp!=null?mmdTemp.dec:null).getDecs()); 
                	    }

                	    if ( state.backtracking==0 ) {
                	    }
                	    }
                	    break;
                	case 2 :
                	    // RBuilder.g:2866:11: tempDec= proof
                	    {
                	    _last = (ColsAST)input.LT(1);
                	    pushFollow(FOLLOW_proof_in_proof_module_body18252);
                	    tempDec=proof();

                	    state._fsp--;
                	    if (state.failed) return retval;
                	    if ( state.backtracking==0 ) 
                	    adaptor.addChild(root_1, tempDec.getTree());
                	    if ( state.backtracking==0 ) {
                	       retval.decs.add((tempDec!=null?tempDec.pd:null)); 
                	    }

                	    if ( state.backtracking==0 ) {
                	    }
                	    }
                	    break;

                	default :
                	    break loop254;
                    }
                } while (true);


                match(input, Token.UP, null); if (state.failed) return retval;
            }adaptor.addChild(root_0, root_1);_last = _save_last_1;
            }


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "proof_module_body"

    public static class proof_return extends TreeRuleReturnScope {
        public ProofDec pd = null;
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "proof"
    // RBuilder.g:2870:1: proof returns [ProofDec pd = null] : ^( PROOF pd1= math_item_reference ( ( ( ^( IDENTIFIER BASECASE ) )=>tempExp1= base_case_statement_head | ( BASECASE )=>tempExp2= base_case_statement_body | ( ^( IDENTIFIER INDUCTIVECASE ) )=>tempExp3= inductive_case_statement_head | ( INDUCTIVECASE )=>tempExp4= inductive_case_statement_body | ( IDENTIFIER )=>tempExp5= headed_proof_expression | tempExp6= proof_expression ) )* ) ;
    public final RBuilder.proof_return proof() throws RecognitionException {
        RBuilder.proof_return retval = new RBuilder.proof_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        ColsAST _first_0 = null;
        ColsAST _last = null;

        ColsAST PROOF187=null;
        RBuilder.math_item_reference_return pd1 = null;

        RBuilder.base_case_statement_head_return tempExp1 = null;

        RBuilder.base_case_statement_body_return tempExp2 = null;

        RBuilder.inductive_case_statement_head_return tempExp3 = null;

        RBuilder.inductive_case_statement_body_return tempExp4 = null;

        RBuilder.headed_proof_expression_return tempExp5 = null;

        RBuilder.proof_expression_return tempExp6 = null;


        ColsAST PROOF187_tree=null;


           // Relies on unique identifiers for theorems, lemmas, etc. right now!
           edu.clemson.cs.r2jt.collections.List<Exp> statements = new edu.clemson.cs.r2jt.collections.List<Exp>("Statements");
           edu.clemson.cs.r2jt.collections.List<Exp> baseCase = new edu.clemson.cs.r2jt.collections.List<Exp>("Base Case");
           edu.clemson.cs.r2jt.collections.List<Exp> inductiveCase = new edu.clemson.cs.r2jt.collections.List<Exp>("Inductive Case");
           Exp tempExp = null;
           boolean isBaseCase = false;
           boolean isInductiveCase = false;
           PosSymbol lineNum = null;

        try {
            // RBuilder.g:2881:1: ( ^( PROOF pd1= math_item_reference ( ( ( ^( IDENTIFIER BASECASE ) )=>tempExp1= base_case_statement_head | ( BASECASE )=>tempExp2= base_case_statement_body | ( ^( IDENTIFIER INDUCTIVECASE ) )=>tempExp3= inductive_case_statement_head | ( INDUCTIVECASE )=>tempExp4= inductive_case_statement_body | ( IDENTIFIER )=>tempExp5= headed_proof_expression | tempExp6= proof_expression ) )* ) )
            // RBuilder.g:2882:4: ^( PROOF pd1= math_item_reference ( ( ( ^( IDENTIFIER BASECASE ) )=>tempExp1= base_case_statement_head | ( BASECASE )=>tempExp2= base_case_statement_body | ( ^( IDENTIFIER INDUCTIVECASE ) )=>tempExp3= inductive_case_statement_head | ( INDUCTIVECASE )=>tempExp4= inductive_case_statement_body | ( IDENTIFIER )=>tempExp5= headed_proof_expression | tempExp6= proof_expression ) )* )
            {
            root_0 = (ColsAST)adaptor.nil();

            _last = (ColsAST)input.LT(1);
            {
            ColsAST _save_last_1 = _last;
            ColsAST _first_1 = null;
            ColsAST root_1 = (ColsAST)adaptor.nil();_last = (ColsAST)input.LT(1);
            PROOF187=(ColsAST)match(input,PROOF,FOLLOW_PROOF_in_proof18285); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            PROOF187_tree = (ColsAST)adaptor.dupNode(PROOF187);

            root_1 = (ColsAST)adaptor.becomeRoot(PROOF187_tree, root_1);
            }


            match(input, Token.DOWN, null); if (state.failed) return retval;
            _last = (ColsAST)input.LT(1);
            pushFollow(FOLLOW_math_item_reference_in_proof18289);
            pd1=math_item_reference();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, pd1.getTree());
            if ( state.backtracking==0 ) {
               retval.pd = (pd1!=null?pd1.pd:null); 
            }
            // RBuilder.g:2883:8: ( ( ( ^( IDENTIFIER BASECASE ) )=>tempExp1= base_case_statement_head | ( BASECASE )=>tempExp2= base_case_statement_body | ( ^( IDENTIFIER INDUCTIVECASE ) )=>tempExp3= inductive_case_statement_head | ( INDUCTIVECASE )=>tempExp4= inductive_case_statement_body | ( IDENTIFIER )=>tempExp5= headed_proof_expression | tempExp6= proof_expression ) )*
            loop256:
            do {
                int alt256=2;
                int LA256_0 = input.LA(1);

                if ( (LA256_0==BASECASE||LA256_0==DEFINITION||LA256_0==INDUCTIVECASE||LA256_0==IDENTIFIER||(LA256_0>=SUPDEDUC && LA256_0<=SIMPLIFICATION)||LA256_0==GOAL) ) {
                    alt256=1;
                }


                switch (alt256) {
            	case 1 :
            	    // RBuilder.g:2883:9: ( ( ^( IDENTIFIER BASECASE ) )=>tempExp1= base_case_statement_head | ( BASECASE )=>tempExp2= base_case_statement_body | ( ^( IDENTIFIER INDUCTIVECASE ) )=>tempExp3= inductive_case_statement_head | ( INDUCTIVECASE )=>tempExp4= inductive_case_statement_body | ( IDENTIFIER )=>tempExp5= headed_proof_expression | tempExp6= proof_expression )
            	    {
            	    // RBuilder.g:2883:9: ( ( ^( IDENTIFIER BASECASE ) )=>tempExp1= base_case_statement_head | ( BASECASE )=>tempExp2= base_case_statement_body | ( ^( IDENTIFIER INDUCTIVECASE ) )=>tempExp3= inductive_case_statement_head | ( INDUCTIVECASE )=>tempExp4= inductive_case_statement_body | ( IDENTIFIER )=>tempExp5= headed_proof_expression | tempExp6= proof_expression )
            	    int alt255=6;
            	    alt255 = dfa255.predict(input);
            	    switch (alt255) {
            	        case 1 :
            	            // RBuilder.g:2883:11: ( ^( IDENTIFIER BASECASE ) )=>tempExp1= base_case_statement_head
            	            {
            	            _last = (ColsAST)input.LT(1);
            	            pushFollow(FOLLOW_base_case_statement_head_in_proof18315);
            	            tempExp1=base_case_statement_head();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) 
            	            adaptor.addChild(root_1, tempExp1.getTree());
            	            if ( state.backtracking==0 ) {
            	               tempExp = (tempExp1!=null?tempExp1.exp:null); isBaseCase=true; isInductiveCase=false; 
            	            }

            	            if ( state.backtracking==0 ) {
            	            }
            	            }
            	            break;
            	        case 2 :
            	            // RBuilder.g:2885:10: ( BASECASE )=>tempExp2= base_case_statement_body
            	            {
            	            _last = (ColsAST)input.LT(1);
            	            pushFollow(FOLLOW_base_case_statement_body_in_proof18345);
            	            tempExp2=base_case_statement_body();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) 
            	            adaptor.addChild(root_1, tempExp2.getTree());
            	            if ( state.backtracking==0 ) {
            	               tempExp = (tempExp2!=null?tempExp2.exp:null); isBaseCase=true; isInductiveCase=false; 
            	            }

            	            if ( state.backtracking==0 ) {
            	            }
            	            }
            	            break;
            	        case 3 :
            	            // RBuilder.g:2887:10: ( ^( IDENTIFIER INDUCTIVECASE ) )=>tempExp3= inductive_case_statement_head
            	            {
            	            _last = (ColsAST)input.LT(1);
            	            pushFollow(FOLLOW_inductive_case_statement_head_in_proof18379);
            	            tempExp3=inductive_case_statement_head();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) 
            	            adaptor.addChild(root_1, tempExp3.getTree());
            	            if ( state.backtracking==0 ) {
            	               tempExp = (tempExp3!=null?tempExp3.exp:null); isInductiveCase=true; isBaseCase=false; 
            	            }

            	            if ( state.backtracking==0 ) {
            	            }
            	            }
            	            break;
            	        case 4 :
            	            // RBuilder.g:2889:10: ( INDUCTIVECASE )=>tempExp4= inductive_case_statement_body
            	            {
            	            _last = (ColsAST)input.LT(1);
            	            pushFollow(FOLLOW_inductive_case_statement_body_in_proof18409);
            	            tempExp4=inductive_case_statement_body();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) 
            	            adaptor.addChild(root_1, tempExp4.getTree());
            	            if ( state.backtracking==0 ) {
            	               tempExp = (tempExp4!=null?tempExp4.exp:null); isInductiveCase=true; isBaseCase=false; 
            	            }

            	            if ( state.backtracking==0 ) {
            	            }
            	            }
            	            break;
            	        case 5 :
            	            // RBuilder.g:2891:10: ( IDENTIFIER )=>tempExp5= headed_proof_expression
            	            {
            	            _last = (ColsAST)input.LT(1);
            	            pushFollow(FOLLOW_headed_proof_expression_in_proof18439);
            	            tempExp5=headed_proof_expression();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) 
            	            adaptor.addChild(root_1, tempExp5.getTree());
            	            if ( state.backtracking==0 ) {
            	               tempExp = (tempExp5!=null?tempExp5.exp:null); 
            	            }

            	            if ( state.backtracking==0 ) {
            	            }
            	            }
            	            break;
            	        case 6 :
            	            // RBuilder.g:2893:10: tempExp6= proof_expression
            	            {
            	            _last = (ColsAST)input.LT(1);
            	            pushFollow(FOLLOW_proof_expression_in_proof18463);
            	            tempExp6=proof_expression();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) 
            	            adaptor.addChild(root_1, tempExp6.getTree());
            	            if ( state.backtracking==0 ) {
            	               tempExp = (tempExp6!=null?tempExp6.exp:null); 
            	            }

            	            if ( state.backtracking==0 ) {
            	            }
            	            }
            	            break;

            	    }

            	    if ( state.backtracking==0 ) {
            	       if(isBaseCase) baseCase.add(tempExp);
            	              else if(isInductiveCase) inductiveCase.add(tempExp);
            	              else statements.add(tempExp);
            	             
            	    }

            	    if ( state.backtracking==0 ) {
            	    }
            	    }
            	    break;

            	default :
            	    break loop256;
                }
            } while (true);


            match(input, Token.UP, null); if (state.failed) return retval;adaptor.addChild(root_0, root_1);_last = _save_last_1;
            }

            if ( state.backtracking==0 ) {
               retval.pd.setStatements(statements);
                   retval.pd.setBaseCase(baseCase);
                   retval.pd.setInductiveCase(inductiveCase);
                 
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "proof"

    public static class base_case_statement_head_return extends TreeRuleReturnScope {
        public Exp exp = null;
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "base_case_statement_head"
    // RBuilder.g:2908:1: base_case_statement_head returns [Exp exp = null] : ^(id= IDENTIFIER exp1= base_case_statement_body ) ;
    public final RBuilder.base_case_statement_head_return base_case_statement_head() throws RecognitionException {
        RBuilder.base_case_statement_head_return retval = new RBuilder.base_case_statement_head_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        ColsAST _first_0 = null;
        ColsAST _last = null;

        ColsAST id=null;
        RBuilder.base_case_statement_body_return exp1 = null;


        ColsAST id_tree=null;


          PosSymbol lineNum = null;

        try {
            // RBuilder.g:2912:1: ( ^(id= IDENTIFIER exp1= base_case_statement_body ) )
            // RBuilder.g:2913:5: ^(id= IDENTIFIER exp1= base_case_statement_body )
            {
            root_0 = (ColsAST)adaptor.nil();

            _last = (ColsAST)input.LT(1);
            {
            ColsAST _save_last_1 = _last;
            ColsAST _first_1 = null;
            ColsAST root_1 = (ColsAST)adaptor.nil();_last = (ColsAST)input.LT(1);
            id=(ColsAST)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_base_case_statement_head18532); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            id_tree = (ColsAST)adaptor.dupNode(id);

            root_1 = (ColsAST)adaptor.becomeRoot(id_tree, root_1);
            }

            if ( state.backtracking==0 ) {
               lineNum=getPosSymbol(id); 
            }

            match(input, Token.DOWN, null); if (state.failed) return retval;
            _last = (ColsAST)input.LT(1);
            pushFollow(FOLLOW_base_case_statement_body_in_base_case_statement_head18542);
            exp1=base_case_statement_body();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, exp1.getTree());
            if ( state.backtracking==0 ) {
               if((exp1!=null?exp1.exp:null) instanceof SuppositionDeductionExp)
                      { retval.exp = (exp1!=null?exp1.exp:null); ((SuppositionDeductionExp)retval.exp).getSupposition().setLineNum(lineNum); }
                    else if((exp1!=null?exp1.exp:null) instanceof GoalExp)
                      { retval.exp = (exp1!=null?exp1.exp:null); ((GoalExp)retval.exp).setLineNum(lineNum); }
                    else if((exp1!=null?exp1.exp:null) instanceof ProofDefinitionExp)
                      { retval.exp = (exp1!=null?exp1.exp:null); ((ProofDefinitionExp)retval.exp).setLineNum(lineNum); }
                    else
                      { retval.exp = (exp1!=null?exp1.exp:null); ((JustifiedExp)retval.exp).setLineNum(lineNum); }
                  
            }

            match(input, Token.UP, null); if (state.failed) return retval;adaptor.addChild(root_0, root_1);_last = _save_last_1;
            }


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "base_case_statement_head"

    public static class inductive_case_statement_head_return extends TreeRuleReturnScope {
        public Exp exp = null;
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inductive_case_statement_head"
    // RBuilder.g:2926:1: inductive_case_statement_head returns [Exp exp = null] : ^(id= IDENTIFIER exp1= inductive_case_statement_body ) ;
    public final RBuilder.inductive_case_statement_head_return inductive_case_statement_head() throws RecognitionException {
        RBuilder.inductive_case_statement_head_return retval = new RBuilder.inductive_case_statement_head_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        ColsAST _first_0 = null;
        ColsAST _last = null;

        ColsAST id=null;
        RBuilder.inductive_case_statement_body_return exp1 = null;


        ColsAST id_tree=null;


          PosSymbol lineNum = null;

        try {
            // RBuilder.g:2930:1: ( ^(id= IDENTIFIER exp1= inductive_case_statement_body ) )
            // RBuilder.g:2931:5: ^(id= IDENTIFIER exp1= inductive_case_statement_body )
            {
            root_0 = (ColsAST)adaptor.nil();

            _last = (ColsAST)input.LT(1);
            {
            ColsAST _save_last_1 = _last;
            ColsAST _first_1 = null;
            ColsAST root_1 = (ColsAST)adaptor.nil();_last = (ColsAST)input.LT(1);
            id=(ColsAST)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_inductive_case_statement_head18578); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            id_tree = (ColsAST)adaptor.dupNode(id);

            root_1 = (ColsAST)adaptor.becomeRoot(id_tree, root_1);
            }

            if ( state.backtracking==0 ) {
               lineNum=getPosSymbol(id); 
            }

            match(input, Token.DOWN, null); if (state.failed) return retval;
            _last = (ColsAST)input.LT(1);
            pushFollow(FOLLOW_inductive_case_statement_body_in_inductive_case_statement_head18588);
            exp1=inductive_case_statement_body();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, exp1.getTree());
            if ( state.backtracking==0 ) {
               if((exp1!=null?exp1.exp:null) instanceof SuppositionDeductionExp)
                      { retval.exp = (exp1!=null?exp1.exp:null); ((SuppositionDeductionExp)retval.exp).getSupposition().setLineNum(lineNum); }
                    else if((exp1!=null?exp1.exp:null) instanceof GoalExp)
                      { retval.exp = (exp1!=null?exp1.exp:null); ((GoalExp)retval.exp).setLineNum(lineNum); }
                    else if((exp1!=null?exp1.exp:null) instanceof ProofDefinitionExp)
                      { retval.exp = (exp1!=null?exp1.exp:null); ((ProofDefinitionExp)retval.exp).setLineNum(lineNum); }
                    else
                      { retval.exp = (exp1!=null?exp1.exp:null); ((JustifiedExp)retval.exp).setLineNum(lineNum); }
                  
            }

            match(input, Token.UP, null); if (state.failed) return retval;adaptor.addChild(root_0, root_1);_last = _save_last_1;
            }


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "inductive_case_statement_head"

    public static class base_case_statement_body_return extends TreeRuleReturnScope {
        public Exp exp = null;
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "base_case_statement_body"
    // RBuilder.g:2944:1: base_case_statement_body returns [Exp exp = null] : ^( BASECASE exp1= proof_expression ) ;
    public final RBuilder.base_case_statement_body_return base_case_statement_body() throws RecognitionException {
        RBuilder.base_case_statement_body_return retval = new RBuilder.base_case_statement_body_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        ColsAST _first_0 = null;
        ColsAST _last = null;

        ColsAST BASECASE188=null;
        RBuilder.proof_expression_return exp1 = null;


        ColsAST BASECASE188_tree=null;

        try {
            // RBuilder.g:2945:5: ( ^( BASECASE exp1= proof_expression ) )
            // RBuilder.g:2945:9: ^( BASECASE exp1= proof_expression )
            {
            root_0 = (ColsAST)adaptor.nil();

            _last = (ColsAST)input.LT(1);
            {
            ColsAST _save_last_1 = _last;
            ColsAST _first_1 = null;
            ColsAST root_1 = (ColsAST)adaptor.nil();_last = (ColsAST)input.LT(1);
            BASECASE188=(ColsAST)match(input,BASECASE,FOLLOW_BASECASE_in_base_case_statement_body18616); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            BASECASE188_tree = (ColsAST)adaptor.dupNode(BASECASE188);

            root_1 = (ColsAST)adaptor.becomeRoot(BASECASE188_tree, root_1);
            }


            match(input, Token.DOWN, null); if (state.failed) return retval;
            _last = (ColsAST)input.LT(1);
            pushFollow(FOLLOW_proof_expression_in_base_case_statement_body18620);
            exp1=proof_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, exp1.getTree());

            match(input, Token.UP, null); if (state.failed) return retval;adaptor.addChild(root_0, root_1);_last = _save_last_1;
            }

            if ( state.backtracking==0 ) {
               retval.exp = (exp1!=null?exp1.exp:null); 
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "base_case_statement_body"

    public static class inductive_case_statement_body_return extends TreeRuleReturnScope {
        public Exp exp = null;
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inductive_case_statement_body"
    // RBuilder.g:2948:1: inductive_case_statement_body returns [Exp exp = null] : ^( INDUCTIVECASE exp1= proof_expression ) ;
    public final RBuilder.inductive_case_statement_body_return inductive_case_statement_body() throws RecognitionException {
        RBuilder.inductive_case_statement_body_return retval = new RBuilder.inductive_case_statement_body_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        ColsAST _first_0 = null;
        ColsAST _last = null;

        ColsAST INDUCTIVECASE189=null;
        RBuilder.proof_expression_return exp1 = null;


        ColsAST INDUCTIVECASE189_tree=null;

        try {
            // RBuilder.g:2949:5: ( ^( INDUCTIVECASE exp1= proof_expression ) )
            // RBuilder.g:2949:9: ^( INDUCTIVECASE exp1= proof_expression )
            {
            root_0 = (ColsAST)adaptor.nil();

            _last = (ColsAST)input.LT(1);
            {
            ColsAST _save_last_1 = _last;
            ColsAST _first_1 = null;
            ColsAST root_1 = (ColsAST)adaptor.nil();_last = (ColsAST)input.LT(1);
            INDUCTIVECASE189=(ColsAST)match(input,INDUCTIVECASE,FOLLOW_INDUCTIVECASE_in_inductive_case_statement_body18649); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            INDUCTIVECASE189_tree = (ColsAST)adaptor.dupNode(INDUCTIVECASE189);

            root_1 = (ColsAST)adaptor.becomeRoot(INDUCTIVECASE189_tree, root_1);
            }


            match(input, Token.DOWN, null); if (state.failed) return retval;
            _last = (ColsAST)input.LT(1);
            pushFollow(FOLLOW_proof_expression_in_inductive_case_statement_body18653);
            exp1=proof_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, exp1.getTree());

            match(input, Token.UP, null); if (state.failed) return retval;adaptor.addChild(root_0, root_1);_last = _save_last_1;
            }

            if ( state.backtracking==0 ) {
               retval.exp = (exp1!=null?exp1.exp:null); 
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "inductive_case_statement_body"

    public static class math_item_reference_return extends TreeRuleReturnScope {
        public ProofDec pd = null;
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "math_item_reference"
    // RBuilder.g:2952:1: math_item_reference returns [ProofDec pd = null] : ^( MATHITEMREF (name1= theorem_name | name2= lemma_name | name3= property_name | name4= corollary_name ) ) ;
    public final RBuilder.math_item_reference_return math_item_reference() throws RecognitionException {
        RBuilder.math_item_reference_return retval = new RBuilder.math_item_reference_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        ColsAST _first_0 = null;
        ColsAST _last = null;

        ColsAST MATHITEMREF190=null;
        RBuilder.theorem_name_return name1 = null;

        RBuilder.lemma_name_return name2 = null;

        RBuilder.property_name_return name3 = null;

        RBuilder.corollary_name_return name4 = null;


        ColsAST MATHITEMREF190_tree=null;


            int kind = 1;
            PosSymbol name = null;

        try {
            // RBuilder.g:2957:1: ( ^( MATHITEMREF (name1= theorem_name | name2= lemma_name | name3= property_name | name4= corollary_name ) ) )
            // RBuilder.g:2958:5: ^( MATHITEMREF (name1= theorem_name | name2= lemma_name | name3= property_name | name4= corollary_name ) )
            {
            root_0 = (ColsAST)adaptor.nil();

            _last = (ColsAST)input.LT(1);
            {
            ColsAST _save_last_1 = _last;
            ColsAST _first_1 = null;
            ColsAST root_1 = (ColsAST)adaptor.nil();_last = (ColsAST)input.LT(1);
            MATHITEMREF190=(ColsAST)match(input,MATHITEMREF,FOLLOW_MATHITEMREF_in_math_item_reference18682); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            MATHITEMREF190_tree = (ColsAST)adaptor.dupNode(MATHITEMREF190);

            root_1 = (ColsAST)adaptor.becomeRoot(MATHITEMREF190_tree, root_1);
            }


            match(input, Token.DOWN, null); if (state.failed) return retval;
            // RBuilder.g:2959:5: (name1= theorem_name | name2= lemma_name | name3= property_name | name4= corollary_name )
            int alt257=4;
            switch ( input.LA(1) ) {
            case THEOREM:
                {
                alt257=1;
                }
                break;
            case LEMMA:
                {
                alt257=2;
                }
                break;
            case PROPERTY:
                {
                alt257=3;
                }
                break;
            case COROLLARY:
                {
                alt257=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 257, 0, input);

                throw nvae;
            }

            switch (alt257) {
                case 1 :
                    // RBuilder.g:2959:9: name1= theorem_name
                    {
                    _last = (ColsAST)input.LT(1);
                    pushFollow(FOLLOW_theorem_name_in_math_item_reference18694);
                    name1=theorem_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, name1.getTree());
                    if ( state.backtracking==0 ) {
                       kind = ProofDec.THEOREM; name = (name1!=null?name1.name:null); 
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // RBuilder.g:2960:9: name2= lemma_name
                    {
                    _last = (ColsAST)input.LT(1);
                    pushFollow(FOLLOW_lemma_name_in_math_item_reference18708);
                    name2=lemma_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, name2.getTree());
                    if ( state.backtracking==0 ) {
                       kind = ProofDec.LEMMA; name = (name2!=null?name2.name:null); 
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 3 :
                    // RBuilder.g:2961:9: name3= property_name
                    {
                    _last = (ColsAST)input.LT(1);
                    pushFollow(FOLLOW_property_name_in_math_item_reference18722);
                    name3=property_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, name3.getTree());
                    if ( state.backtracking==0 ) {
                       kind = ProofDec.PROPERTY; name = (name3!=null?name3.name:null); 
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 4 :
                    // RBuilder.g:2962:9: name4= corollary_name
                    {
                    _last = (ColsAST)input.LT(1);
                    pushFollow(FOLLOW_corollary_name_in_math_item_reference18736);
                    name4=corollary_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, name4.getTree());
                    if ( state.backtracking==0 ) {
                       kind = ProofDec.COROLLARY; name = (name4!=null?name4.name:null); 
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }


            match(input, Token.UP, null); if (state.failed) return retval;adaptor.addChild(root_0, root_1);_last = _save_last_1;
            }

            if ( state.backtracking==0 ) {
               retval.pd = new ProofDec(kind, name, null, null, null); 
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "math_item_reference"

    public static class theorem_name_return extends TreeRuleReturnScope {
        public PosSymbol name = null;
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "theorem_name"
    // RBuilder.g:2967:1: theorem_name returns [PosSymbol name = null] : ^( THEOREM name1= ident ) ;
    public final RBuilder.theorem_name_return theorem_name() throws RecognitionException {
        RBuilder.theorem_name_return retval = new RBuilder.theorem_name_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        ColsAST _first_0 = null;
        ColsAST _last = null;

        ColsAST THEOREM191=null;
        RBuilder.ident_return name1 = null;


        ColsAST THEOREM191_tree=null;

        try {
            // RBuilder.g:2968:1: ( ^( THEOREM name1= ident ) )
            // RBuilder.g:2968:5: ^( THEOREM name1= ident )
            {
            root_0 = (ColsAST)adaptor.nil();

            _last = (ColsAST)input.LT(1);
            {
            ColsAST _save_last_1 = _last;
            ColsAST _first_1 = null;
            ColsAST root_1 = (ColsAST)adaptor.nil();_last = (ColsAST)input.LT(1);
            THEOREM191=(ColsAST)match(input,THEOREM,FOLLOW_THEOREM_in_theorem_name18768); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            THEOREM191_tree = (ColsAST)adaptor.dupNode(THEOREM191);

            root_1 = (ColsAST)adaptor.becomeRoot(THEOREM191_tree, root_1);
            }


            match(input, Token.DOWN, null); if (state.failed) return retval;
            _last = (ColsAST)input.LT(1);
            pushFollow(FOLLOW_ident_in_theorem_name18772);
            name1=ident();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, name1.getTree());

            match(input, Token.UP, null); if (state.failed) return retval;adaptor.addChild(root_0, root_1);_last = _save_last_1;
            }

            if ( state.backtracking==0 ) {
               retval.name = (name1!=null?name1.ps:null); 
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "theorem_name"

    public static class lemma_name_return extends TreeRuleReturnScope {
        public PosSymbol name = null;
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "lemma_name"
    // RBuilder.g:2971:1: lemma_name returns [PosSymbol name = null] : ^( LEMMA name1= ident ) ;
    public final RBuilder.lemma_name_return lemma_name() throws RecognitionException {
        RBuilder.lemma_name_return retval = new RBuilder.lemma_name_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        ColsAST _first_0 = null;
        ColsAST _last = null;

        ColsAST LEMMA192=null;
        RBuilder.ident_return name1 = null;


        ColsAST LEMMA192_tree=null;

        try {
            // RBuilder.g:2972:1: ( ^( LEMMA name1= ident ) )
            // RBuilder.g:2972:5: ^( LEMMA name1= ident )
            {
            root_0 = (ColsAST)adaptor.nil();

            _last = (ColsAST)input.LT(1);
            {
            ColsAST _save_last_1 = _last;
            ColsAST _first_1 = null;
            ColsAST root_1 = (ColsAST)adaptor.nil();_last = (ColsAST)input.LT(1);
            LEMMA192=(ColsAST)match(input,LEMMA,FOLLOW_LEMMA_in_lemma_name18791); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LEMMA192_tree = (ColsAST)adaptor.dupNode(LEMMA192);

            root_1 = (ColsAST)adaptor.becomeRoot(LEMMA192_tree, root_1);
            }


            match(input, Token.DOWN, null); if (state.failed) return retval;
            _last = (ColsAST)input.LT(1);
            pushFollow(FOLLOW_ident_in_lemma_name18795);
            name1=ident();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, name1.getTree());

            match(input, Token.UP, null); if (state.failed) return retval;adaptor.addChild(root_0, root_1);_last = _save_last_1;
            }

            if ( state.backtracking==0 ) {
               retval.name = (name1!=null?name1.ps:null); 
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "lemma_name"

    public static class property_name_return extends TreeRuleReturnScope {
        public PosSymbol name = null;
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "property_name"
    // RBuilder.g:2975:1: property_name returns [PosSymbol name = null] : ^( PROPERTY name1= ident ) ;
    public final RBuilder.property_name_return property_name() throws RecognitionException {
        RBuilder.property_name_return retval = new RBuilder.property_name_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        ColsAST _first_0 = null;
        ColsAST _last = null;

        ColsAST PROPERTY193=null;
        RBuilder.ident_return name1 = null;


        ColsAST PROPERTY193_tree=null;

        try {
            // RBuilder.g:2976:1: ( ^( PROPERTY name1= ident ) )
            // RBuilder.g:2976:5: ^( PROPERTY name1= ident )
            {
            root_0 = (ColsAST)adaptor.nil();

            _last = (ColsAST)input.LT(1);
            {
            ColsAST _save_last_1 = _last;
            ColsAST _first_1 = null;
            ColsAST root_1 = (ColsAST)adaptor.nil();_last = (ColsAST)input.LT(1);
            PROPERTY193=(ColsAST)match(input,PROPERTY,FOLLOW_PROPERTY_in_property_name18814); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            PROPERTY193_tree = (ColsAST)adaptor.dupNode(PROPERTY193);

            root_1 = (ColsAST)adaptor.becomeRoot(PROPERTY193_tree, root_1);
            }


            match(input, Token.DOWN, null); if (state.failed) return retval;
            _last = (ColsAST)input.LT(1);
            pushFollow(FOLLOW_ident_in_property_name18818);
            name1=ident();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, name1.getTree());

            match(input, Token.UP, null); if (state.failed) return retval;adaptor.addChild(root_0, root_1);_last = _save_last_1;
            }

            if ( state.backtracking==0 ) {
               retval.name = (name1!=null?name1.ps:null); 
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "property_name"

    public static class corollary_name_return extends TreeRuleReturnScope {
        public PosSymbol name = null;
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "corollary_name"
    // RBuilder.g:2979:1: corollary_name returns [PosSymbol name = null] : ^( COROLLARY name1= math_theorem_ident ) ;
    public final RBuilder.corollary_name_return corollary_name() throws RecognitionException {
        RBuilder.corollary_name_return retval = new RBuilder.corollary_name_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        ColsAST _first_0 = null;
        ColsAST _last = null;

        ColsAST COROLLARY194=null;
        RBuilder.math_theorem_ident_return name1 = null;


        ColsAST COROLLARY194_tree=null;

        try {
            // RBuilder.g:2980:1: ( ^( COROLLARY name1= math_theorem_ident ) )
            // RBuilder.g:2980:5: ^( COROLLARY name1= math_theorem_ident )
            {
            root_0 = (ColsAST)adaptor.nil();

            _last = (ColsAST)input.LT(1);
            {
            ColsAST _save_last_1 = _last;
            ColsAST _first_1 = null;
            ColsAST root_1 = (ColsAST)adaptor.nil();_last = (ColsAST)input.LT(1);
            COROLLARY194=(ColsAST)match(input,COROLLARY,FOLLOW_COROLLARY_in_corollary_name18837); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            COROLLARY194_tree = (ColsAST)adaptor.dupNode(COROLLARY194);

            root_1 = (ColsAST)adaptor.becomeRoot(COROLLARY194_tree, root_1);
            }


            match(input, Token.DOWN, null); if (state.failed) return retval;
            _last = (ColsAST)input.LT(1);
            pushFollow(FOLLOW_math_theorem_ident_in_corollary_name18841);
            name1=math_theorem_ident();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, name1.getTree());

            match(input, Token.UP, null); if (state.failed) return retval;adaptor.addChild(root_0, root_1);_last = _save_last_1;
            }

            if ( state.backtracking==0 ) {
               retval.name = (name1!=null?name1.ps:null); 
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "corollary_name"

    public static class proof_expression_list_return extends TreeRuleReturnScope {
        public edu.clemson.cs.r2jt.collections.List<Exp> list = new edu.clemson.cs.r2jt.collections.List<Exp>("Proof Expression edu.clemson.cs.r2jt.collections.List");
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "proof_expression_list"
    // RBuilder.g:2983:1: proof_expression_list returns [edu.clemson.cs.r2jt.collections.List<Exp> list = new edu.clemson.cs.r2jt.collections.List<Exp>(\"Proof Expression edu.clemson.cs.r2jt.collections.List\")] : ^( PROOFEXPRLIST ( ( IDENTIFIER )=>temp= headed_proof_expression | temp1= proof_expression )* ) ;
    public final RBuilder.proof_expression_list_return proof_expression_list() throws RecognitionException {
        RBuilder.proof_expression_list_return retval = new RBuilder.proof_expression_list_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        ColsAST _first_0 = null;
        ColsAST _last = null;

        ColsAST PROOFEXPRLIST195=null;
        RBuilder.headed_proof_expression_return temp = null;

        RBuilder.proof_expression_return temp1 = null;


        ColsAST PROOFEXPRLIST195_tree=null;

        try {
            // RBuilder.g:2984:1: ( ^( PROOFEXPRLIST ( ( IDENTIFIER )=>temp= headed_proof_expression | temp1= proof_expression )* ) )
            // RBuilder.g:2985:5: ^( PROOFEXPRLIST ( ( IDENTIFIER )=>temp= headed_proof_expression | temp1= proof_expression )* )
            {
            root_0 = (ColsAST)adaptor.nil();

            _last = (ColsAST)input.LT(1);
            {
            ColsAST _save_last_1 = _last;
            ColsAST _first_1 = null;
            ColsAST root_1 = (ColsAST)adaptor.nil();_last = (ColsAST)input.LT(1);
            PROOFEXPRLIST195=(ColsAST)match(input,PROOFEXPRLIST,FOLLOW_PROOFEXPRLIST_in_proof_expression_list18862); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            PROOFEXPRLIST195_tree = (ColsAST)adaptor.dupNode(PROOFEXPRLIST195);

            root_1 = (ColsAST)adaptor.becomeRoot(PROOFEXPRLIST195_tree, root_1);
            }


            if ( input.LA(1)==Token.DOWN ) {
                match(input, Token.DOWN, null); if (state.failed) return retval;
                // RBuilder.g:2986:5: ( ( IDENTIFIER )=>temp= headed_proof_expression | temp1= proof_expression )*
                loop258:
                do {
                    int alt258=3;
                    int LA258_0 = input.LA(1);

                    if ( (LA258_0==IDENTIFIER) && (synpred6_RBuilder())) {
                        alt258=1;
                    }
                    else if ( (LA258_0==DEFINITION||(LA258_0>=SUPDEDUC && LA258_0<=SIMPLIFICATION)||LA258_0==GOAL) ) {
                        alt258=2;
                    }


                    switch (alt258) {
                	case 1 :
                	    // RBuilder.g:2986:7: ( IDENTIFIER )=>temp= headed_proof_expression
                	    {
                	    _last = (ColsAST)input.LT(1);
                	    pushFollow(FOLLOW_headed_proof_expression_in_proof_expression_list18878);
                	    temp=headed_proof_expression();

                	    state._fsp--;
                	    if (state.failed) return retval;
                	    if ( state.backtracking==0 ) 
                	    adaptor.addChild(root_1, temp.getTree());
                	    if ( state.backtracking==0 ) {
                	       retval.list.add((temp!=null?temp.exp:null)); 
                	    }

                	    if ( state.backtracking==0 ) {
                	    }
                	    }
                	    break;
                	case 2 :
                	    // RBuilder.g:2987:7: temp1= proof_expression
                	    {
                	    _last = (ColsAST)input.LT(1);
                	    pushFollow(FOLLOW_proof_expression_in_proof_expression_list18890);
                	    temp1=proof_expression();

                	    state._fsp--;
                	    if (state.failed) return retval;
                	    if ( state.backtracking==0 ) 
                	    adaptor.addChild(root_1, temp1.getTree());
                	    if ( state.backtracking==0 ) {
                	       retval.list.add((temp1!=null?temp1.exp:null)); 
                	    }

                	    if ( state.backtracking==0 ) {
                	    }
                	    }
                	    break;

                	default :
                	    break loop258;
                    }
                } while (true);


                match(input, Token.UP, null); if (state.failed) return retval;
            }adaptor.addChild(root_0, root_1);_last = _save_last_1;
            }


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "proof_expression_list"

    public static class headed_proof_expression_return extends TreeRuleReturnScope {
        public Exp exp = null;
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "headed_proof_expression"
    // RBuilder.g:2991:1: headed_proof_expression returns [Exp exp = null] : ^(id= IDENTIFIER exp1= proof_expression ) ;
    public final RBuilder.headed_proof_expression_return headed_proof_expression() throws RecognitionException {
        RBuilder.headed_proof_expression_return retval = new RBuilder.headed_proof_expression_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        ColsAST _first_0 = null;
        ColsAST _last = null;

        ColsAST id=null;
        RBuilder.proof_expression_return exp1 = null;


        ColsAST id_tree=null;


          PosSymbol lineNum = null;

        try {
            // RBuilder.g:2995:1: ( ^(id= IDENTIFIER exp1= proof_expression ) )
            // RBuilder.g:2996:5: ^(id= IDENTIFIER exp1= proof_expression )
            {
            root_0 = (ColsAST)adaptor.nil();

            _last = (ColsAST)input.LT(1);
            {
            ColsAST _save_last_1 = _last;
            ColsAST _first_1 = null;
            ColsAST root_1 = (ColsAST)adaptor.nil();_last = (ColsAST)input.LT(1);
            id=(ColsAST)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_headed_proof_expression18925); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            id_tree = (ColsAST)adaptor.dupNode(id);

            root_1 = (ColsAST)adaptor.becomeRoot(id_tree, root_1);
            }

            if ( state.backtracking==0 ) {
               lineNum=getPosSymbol(id); 
            }

            match(input, Token.DOWN, null); if (state.failed) return retval;
            _last = (ColsAST)input.LT(1);
            pushFollow(FOLLOW_proof_expression_in_headed_proof_expression18931);
            exp1=proof_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, exp1.getTree());
            if ( state.backtracking==0 ) {
               if((exp1!=null?exp1.exp:null) instanceof SuppositionDeductionExp)
                      { retval.exp = (exp1!=null?exp1.exp:null); ((SuppositionDeductionExp)retval.exp).getSupposition().setLineNum(lineNum); }
                    else if((exp1!=null?exp1.exp:null) instanceof GoalExp)
                      { retval.exp = (exp1!=null?exp1.exp:null); ((GoalExp)retval.exp).setLineNum(lineNum); }
                    else if((exp1!=null?exp1.exp:null) instanceof ProofDefinitionExp)
                      { retval.exp = (exp1!=null?exp1.exp:null); ((ProofDefinitionExp)retval.exp).setLineNum(lineNum); }
                    else
                      { retval.exp = (exp1!=null?exp1.exp:null); ((JustifiedExp)retval.exp).setLineNum(lineNum); }
                  
            }

            match(input, Token.UP, null); if (state.failed) return retval;adaptor.addChild(root_0, root_1);_last = _save_last_1;
            }


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "headed_proof_expression"

    public static class proof_expression_return extends TreeRuleReturnScope {
        public Exp exp = null;
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "proof_expression"
    // RBuilder.g:3008:1: proof_expression returns [Exp exp = null] : (exp1= goal_declaration | tempDec= standard_definition_declaration | exp2= supposition_deduction_pair | exp3= justification_declaration ) ;
    public final RBuilder.proof_expression_return proof_expression() throws RecognitionException {
        RBuilder.proof_expression_return retval = new RBuilder.proof_expression_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        ColsAST _first_0 = null;
        ColsAST _last = null;

        RBuilder.goal_declaration_return exp1 = null;

        RBuilder.standard_definition_declaration_return tempDec = null;

        RBuilder.supposition_deduction_pair_return exp2 = null;

        RBuilder.justification_declaration_return exp3 = null;



        try {
            // RBuilder.g:3009:1: ( (exp1= goal_declaration | tempDec= standard_definition_declaration | exp2= supposition_deduction_pair | exp3= justification_declaration ) )
            // RBuilder.g:3010:5: (exp1= goal_declaration | tempDec= standard_definition_declaration | exp2= supposition_deduction_pair | exp3= justification_declaration )
            {
            root_0 = (ColsAST)adaptor.nil();

            // RBuilder.g:3010:5: (exp1= goal_declaration | tempDec= standard_definition_declaration | exp2= supposition_deduction_pair | exp3= justification_declaration )
            int alt259=4;
            switch ( input.LA(1) ) {
            case GOAL:
                {
                alt259=1;
                }
                break;
            case DEFINITION:
                {
                alt259=2;
                }
                break;
            case SUPDEDUC:
                {
                alt259=3;
                }
                break;
            case SIMPLIFICATION:
                {
                alt259=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 259, 0, input);

                throw nvae;
            }

            switch (alt259) {
                case 1 :
                    // RBuilder.g:3010:7: exp1= goal_declaration
                    {
                    _last = (ColsAST)input.LT(1);
                    pushFollow(FOLLOW_goal_declaration_in_proof_expression18960);
                    exp1=goal_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, exp1.getTree());
                    if ( state.backtracking==0 ) {
                       retval.exp = (exp1!=null?exp1.ge:null); 
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // RBuilder.g:3011:5: tempDec= standard_definition_declaration
                    {
                    _last = (ColsAST)input.LT(1);
                    pushFollow(FOLLOW_standard_definition_declaration_in_proof_expression18972);
                    tempDec=standard_definition_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, tempDec.getTree());
                    if ( state.backtracking==0 ) {
                       retval.exp = new ProofDefinitionExp(getLocation((ColsAST)tempDec.getTree()), null, (DefinitionDec)(tempDec!=null?tempDec.dec:null)); 
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 3 :
                    // RBuilder.g:3012:5: exp2= supposition_deduction_pair
                    {
                    _last = (ColsAST)input.LT(1);
                    pushFollow(FOLLOW_supposition_deduction_pair_in_proof_expression18984);
                    exp2=supposition_deduction_pair();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, exp2.getTree());
                    if ( state.backtracking==0 ) {
                       retval.exp = (exp2!=null?exp2.sde:null); 
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 4 :
                    // RBuilder.g:3013:5: exp3= justification_declaration
                    {
                    _last = (ColsAST)input.LT(1);
                    pushFollow(FOLLOW_justification_declaration_in_proof_expression18996);
                    exp3=justification_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, exp3.getTree());
                    if ( state.backtracking==0 ) {
                       retval.exp = (exp3!=null?exp3.je:null); 
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "proof_expression"

    public static class goal_declaration_return extends TreeRuleReturnScope {
        public GoalExp ge = null;
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "goal_declaration"
    // RBuilder.g:3016:1: goal_declaration returns [GoalExp ge = null] : ^( GOAL mathExp= math_expression ) ;
    public final RBuilder.goal_declaration_return goal_declaration() throws RecognitionException {
        RBuilder.goal_declaration_return retval = new RBuilder.goal_declaration_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        ColsAST _first_0 = null;
        ColsAST _last = null;

        ColsAST GOAL196=null;
        RBuilder.math_expression_return mathExp = null;


        ColsAST GOAL196_tree=null;

        try {
            // RBuilder.g:3017:1: ( ^( GOAL mathExp= math_expression ) )
            // RBuilder.g:3018:4: ^( GOAL mathExp= math_expression )
            {
            root_0 = (ColsAST)adaptor.nil();

            _last = (ColsAST)input.LT(1);
            {
            ColsAST _save_last_1 = _last;
            ColsAST _first_1 = null;
            ColsAST root_1 = (ColsAST)adaptor.nil();_last = (ColsAST)input.LT(1);
            GOAL196=(ColsAST)match(input,GOAL,FOLLOW_GOAL_in_goal_declaration19017); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            GOAL196_tree = (ColsAST)adaptor.dupNode(GOAL196);

            root_1 = (ColsAST)adaptor.becomeRoot(GOAL196_tree, root_1);
            }


            match(input, Token.DOWN, null); if (state.failed) return retval;
            _last = (ColsAST)input.LT(1);
            pushFollow(FOLLOW_math_expression_in_goal_declaration19021);
            mathExp=math_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, mathExp.getTree());

            match(input, Token.UP, null); if (state.failed) return retval;adaptor.addChild(root_0, root_1);_last = _save_last_1;
            }

            if ( state.backtracking==0 ) {
               retval.ge = new GoalExp(getLocation(GOAL196), null, (mathExp!=null?mathExp.exp:null)); 
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "goal_declaration"

    public static class supposition_deduction_pair_return extends TreeRuleReturnScope {
        public SuppositionDeductionExp sde = null;
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "supposition_deduction_pair"
    // RBuilder.g:3022:1: supposition_deduction_pair returns [SuppositionDeductionExp sde = null] : ^( SUPDEDUC supposition= supposition_declaration body= proof_expression_list (lineId= IDENTIFIER )? deduction= deduction_declaration ) ;
    public final RBuilder.supposition_deduction_pair_return supposition_deduction_pair() throws RecognitionException {
        RBuilder.supposition_deduction_pair_return retval = new RBuilder.supposition_deduction_pair_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        ColsAST _first_0 = null;
        ColsAST _last = null;

        ColsAST lineId=null;
        ColsAST SUPDEDUC197=null;
        RBuilder.supposition_declaration_return supposition = null;

        RBuilder.proof_expression_list_return body = null;

        RBuilder.deduction_declaration_return deduction = null;


        ColsAST lineId_tree=null;
        ColsAST SUPDEDUC197_tree=null;


           PosSymbol endLineNum = null;

        try {
            // RBuilder.g:3026:1: ( ^( SUPDEDUC supposition= supposition_declaration body= proof_expression_list (lineId= IDENTIFIER )? deduction= deduction_declaration ) )
            // RBuilder.g:3027:4: ^( SUPDEDUC supposition= supposition_declaration body= proof_expression_list (lineId= IDENTIFIER )? deduction= deduction_declaration )
            {
            root_0 = (ColsAST)adaptor.nil();

            _last = (ColsAST)input.LT(1);
            {
            ColsAST _save_last_1 = _last;
            ColsAST _first_1 = null;
            ColsAST root_1 = (ColsAST)adaptor.nil();_last = (ColsAST)input.LT(1);
            SUPDEDUC197=(ColsAST)match(input,SUPDEDUC,FOLLOW_SUPDEDUC_in_supposition_deduction_pair19048); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SUPDEDUC197_tree = (ColsAST)adaptor.dupNode(SUPDEDUC197);

            root_1 = (ColsAST)adaptor.becomeRoot(SUPDEDUC197_tree, root_1);
            }


            match(input, Token.DOWN, null); if (state.failed) return retval;
            _last = (ColsAST)input.LT(1);
            pushFollow(FOLLOW_supposition_declaration_in_supposition_deduction_pair19052);
            supposition=supposition_declaration();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, supposition.getTree());
            _last = (ColsAST)input.LT(1);
            pushFollow(FOLLOW_proof_expression_list_in_supposition_deduction_pair19061);
            body=proof_expression_list();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, body.getTree());
            // RBuilder.g:3029:6: (lineId= IDENTIFIER )?
            int alt260=2;
            int LA260_0 = input.LA(1);

            if ( (LA260_0==IDENTIFIER) ) {
                alt260=1;
            }
            switch (alt260) {
                case 1 :
                    // RBuilder.g:3029:7: lineId= IDENTIFIER
                    {
                    _last = (ColsAST)input.LT(1);
                    lineId=(ColsAST)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_supposition_deduction_pair19071); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    lineId_tree = (ColsAST)adaptor.dupNode(lineId);

                    adaptor.addChild(root_1, lineId_tree);
                    }
                    if ( state.backtracking==0 ) {
                       endLineNum = getPosSymbol(lineId); 
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }

            _last = (ColsAST)input.LT(1);
            pushFollow(FOLLOW_deduction_declaration_in_supposition_deduction_pair19084);
            deduction=deduction_declaration();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, deduction.getTree());
            if ( state.backtracking==0 ) {
               (deduction!=null?deduction.deduc:null).setLineNum(endLineNum); 
            }

            match(input, Token.UP, null); if (state.failed) return retval;adaptor.addChild(root_0, root_1);_last = _save_last_1;
            }

            if ( state.backtracking==0 ) {
               retval.sde = new SuppositionDeductionExp(getLocation(SUPDEDUC197), (supposition!=null?supposition.sup:null), (body!=null?body.list:null), (deduction!=null?deduction.deduc:null)); 
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "supposition_deduction_pair"

    public static class supposition_declaration_return extends TreeRuleReturnScope {
        public SuppositionExp sup = null;
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "supposition_declaration"
    // RBuilder.g:3035:1: supposition_declaration returns [SuppositionExp sup = null] : ^( SUPPOSITION ( (e= math_expression (decs= math_variable_declarations )? ) | (decs= math_variable_declarations (e= math_expression )? ) ) ) ;
    public final RBuilder.supposition_declaration_return supposition_declaration() throws RecognitionException {
        RBuilder.supposition_declaration_return retval = new RBuilder.supposition_declaration_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        ColsAST _first_0 = null;
        ColsAST _last = null;

        ColsAST SUPPOSITION198=null;
        RBuilder.math_expression_return e = null;

        RBuilder.math_variable_declarations_return decs = null;


        ColsAST SUPPOSITION198_tree=null;

        try {
            // RBuilder.g:3036:1: ( ^( SUPPOSITION ( (e= math_expression (decs= math_variable_declarations )? ) | (decs= math_variable_declarations (e= math_expression )? ) ) ) )
            // RBuilder.g:3037:4: ^( SUPPOSITION ( (e= math_expression (decs= math_variable_declarations )? ) | (decs= math_variable_declarations (e= math_expression )? ) ) )
            {
            root_0 = (ColsAST)adaptor.nil();

            _last = (ColsAST)input.LT(1);
            {
            ColsAST _save_last_1 = _last;
            ColsAST _first_1 = null;
            ColsAST root_1 = (ColsAST)adaptor.nil();_last = (ColsAST)input.LT(1);
            SUPPOSITION198=(ColsAST)match(input,SUPPOSITION,FOLLOW_SUPPOSITION_in_supposition_declaration19115); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SUPPOSITION198_tree = (ColsAST)adaptor.dupNode(SUPPOSITION198);

            root_1 = (ColsAST)adaptor.becomeRoot(SUPPOSITION198_tree, root_1);
            }


            match(input, Token.DOWN, null); if (state.failed) return retval;
            // RBuilder.g:3038:7: ( (e= math_expression (decs= math_variable_declarations )? ) | (decs= math_variable_declarations (e= math_expression )? ) )
            int alt263=2;
            int LA263_0 = input.LA(1);

            if ( (LA263_0==EXPR) ) {
                alt263=1;
            }
            else if ( (LA263_0==DECLARATIONS) ) {
                alt263=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 263, 0, input);

                throw nvae;
            }
            switch (alt263) {
                case 1 :
                    // RBuilder.g:3039:9: (e= math_expression (decs= math_variable_declarations )? )
                    {
                    // RBuilder.g:3039:9: (e= math_expression (decs= math_variable_declarations )? )
                    // RBuilder.g:3039:10: e= math_expression (decs= math_variable_declarations )?
                    {
                    _last = (ColsAST)input.LT(1);
                    pushFollow(FOLLOW_math_expression_in_supposition_declaration19136);
                    e=math_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, e.getTree());
                    // RBuilder.g:3039:28: (decs= math_variable_declarations )?
                    int alt261=2;
                    int LA261_0 = input.LA(1);

                    if ( (LA261_0==DECLARATIONS) ) {
                        alt261=1;
                    }
                    switch (alt261) {
                        case 1 :
                            // RBuilder.g:3039:29: decs= math_variable_declarations
                            {
                            _last = (ColsAST)input.LT(1);
                            pushFollow(FOLLOW_math_variable_declarations_in_supposition_declaration19141);
                            decs=math_variable_declarations();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) 
                            adaptor.addChild(root_1, decs.getTree());

                            if ( state.backtracking==0 ) {
                            }
                            }
                            break;

                    }


                    if ( state.backtracking==0 ) {
                    }
                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // RBuilder.g:3041:9: (decs= math_variable_declarations (e= math_expression )? )
                    {
                    // RBuilder.g:3041:9: (decs= math_variable_declarations (e= math_expression )? )
                    // RBuilder.g:3041:10: decs= math_variable_declarations (e= math_expression )?
                    {
                    _last = (ColsAST)input.LT(1);
                    pushFollow(FOLLOW_math_variable_declarations_in_supposition_declaration19168);
                    decs=math_variable_declarations();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, decs.getTree());
                    // RBuilder.g:3041:42: (e= math_expression )?
                    int alt262=2;
                    int LA262_0 = input.LA(1);

                    if ( (LA262_0==EXPR) ) {
                        alt262=1;
                    }
                    switch (alt262) {
                        case 1 :
                            // RBuilder.g:3041:43: e= math_expression
                            {
                            _last = (ColsAST)input.LT(1);
                            pushFollow(FOLLOW_math_expression_in_supposition_declaration19173);
                            e=math_expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) 
                            adaptor.addChild(root_1, e.getTree());

                            if ( state.backtracking==0 ) {
                            }
                            }
                            break;

                    }


                    if ( state.backtracking==0 ) {
                    }
                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }

            if ( state.backtracking==0 ) {
               retval.sup = new SuppositionExp(getLocation(SUPPOSITION198), null, (e!=null?e.exp:null), (decs!=null?decs.decs:null)); 
            }

            match(input, Token.UP, null); if (state.failed) return retval;adaptor.addChild(root_0, root_1);_last = _save_last_1;
            }


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "supposition_declaration"

    public static class math_variable_declarations_return extends TreeRuleReturnScope {
        public edu.clemson.cs.r2jt.collections.List<MathVarDec> decs = null;
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "math_variable_declarations"
    // RBuilder.g:3047:1: math_variable_declarations returns [edu.clemson.cs.r2jt.collections.List<MathVarDec> decs = null] : ^( DECLARATIONS (tempList= math_variable_declaration_group )+ ) ;
    public final RBuilder.math_variable_declarations_return math_variable_declarations() throws RecognitionException {
        RBuilder.math_variable_declarations_return retval = new RBuilder.math_variable_declarations_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        ColsAST _first_0 = null;
        ColsAST _last = null;

        ColsAST DECLARATIONS199=null;
        RBuilder.math_variable_declaration_group_return tempList = null;


        ColsAST DECLARATIONS199_tree=null;

        try {
            // RBuilder.g:3048:1: ( ^( DECLARATIONS (tempList= math_variable_declaration_group )+ ) )
            // RBuilder.g:3049:4: ^( DECLARATIONS (tempList= math_variable_declaration_group )+ )
            {
            root_0 = (ColsAST)adaptor.nil();

            _last = (ColsAST)input.LT(1);
            {
            ColsAST _save_last_1 = _last;
            ColsAST _first_1 = null;
            ColsAST root_1 = (ColsAST)adaptor.nil();_last = (ColsAST)input.LT(1);
            DECLARATIONS199=(ColsAST)match(input,DECLARATIONS,FOLLOW_DECLARATIONS_in_math_variable_declarations19216); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            DECLARATIONS199_tree = (ColsAST)adaptor.dupNode(DECLARATIONS199);

            root_1 = (ColsAST)adaptor.becomeRoot(DECLARATIONS199_tree, root_1);
            }


            match(input, Token.DOWN, null); if (state.failed) return retval;
            // RBuilder.g:3049:19: (tempList= math_variable_declaration_group )+
            int cnt264=0;
            loop264:
            do {
                int alt264=2;
                int LA264_0 = input.LA(1);

                if ( (LA264_0==IDENTIFIER) ) {
                    alt264=1;
                }


                switch (alt264) {
            	case 1 :
            	    // RBuilder.g:3049:20: tempList= math_variable_declaration_group
            	    {
            	    _last = (ColsAST)input.LT(1);
            	    pushFollow(FOLLOW_math_variable_declaration_group_in_math_variable_declarations19221);
            	    tempList=math_variable_declaration_group();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) 
            	    adaptor.addChild(root_1, tempList.getTree());
            	    if ( state.backtracking==0 ) {
            	       retval.decs.addAll((tempList!=null?tempList.vars:null)); 
            	    }

            	    if ( state.backtracking==0 ) {
            	    }
            	    }
            	    break;

            	default :
            	    if ( cnt264 >= 1 ) break loop264;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(264, input);
                        throw eee;
                }
                cnt264++;
            } while (true);


            match(input, Token.UP, null); if (state.failed) return retval;adaptor.addChild(root_0, root_1);_last = _save_last_1;
            }


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "math_variable_declarations"

    public static class deduction_declaration_return extends TreeRuleReturnScope {
        public DeductionExp deduc = null;
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "deduction_declaration"
    // RBuilder.g:3052:1: deduction_declaration returns [DeductionExp deduc = null] : ^( DEDUCTION e= math_expression ) ;
    public final RBuilder.deduction_declaration_return deduction_declaration() throws RecognitionException {
        RBuilder.deduction_declaration_return retval = new RBuilder.deduction_declaration_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        ColsAST _first_0 = null;
        ColsAST _last = null;

        ColsAST DEDUCTION200=null;
        RBuilder.math_expression_return e = null;


        ColsAST DEDUCTION200_tree=null;

        try {
            // RBuilder.g:3053:1: ( ^( DEDUCTION e= math_expression ) )
            // RBuilder.g:3054:4: ^( DEDUCTION e= math_expression )
            {
            root_0 = (ColsAST)adaptor.nil();

            _last = (ColsAST)input.LT(1);
            {
            ColsAST _save_last_1 = _last;
            ColsAST _first_1 = null;
            ColsAST root_1 = (ColsAST)adaptor.nil();_last = (ColsAST)input.LT(1);
            DEDUCTION200=(ColsAST)match(input,DEDUCTION,FOLLOW_DEDUCTION_in_deduction_declaration19245); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            DEDUCTION200_tree = (ColsAST)adaptor.dupNode(DEDUCTION200);

            root_1 = (ColsAST)adaptor.becomeRoot(DEDUCTION200_tree, root_1);
            }


            match(input, Token.DOWN, null); if (state.failed) return retval;
            _last = (ColsAST)input.LT(1);
            pushFollow(FOLLOW_math_expression_in_deduction_declaration19249);
            e=math_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, e.getTree());

            match(input, Token.UP, null); if (state.failed) return retval;adaptor.addChild(root_0, root_1);_last = _save_last_1;
            }

            if ( state.backtracking==0 ) {
               retval.deduc = new DeductionExp(getLocation(DEDUCTION200), null, (e!=null?e.exp:null)); 
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "deduction_declaration"

    public static class justification_declaration_return extends TreeRuleReturnScope {
        public JustifiedExp je = null;
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "justification_declaration"
    // RBuilder.g:3057:1: justification_declaration returns [JustifiedExp je = null] : ^( SIMPLIFICATION exp= math_expression by= justification ) ;
    public final RBuilder.justification_declaration_return justification_declaration() throws RecognitionException {
        RBuilder.justification_declaration_return retval = new RBuilder.justification_declaration_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        ColsAST _first_0 = null;
        ColsAST _last = null;

        ColsAST SIMPLIFICATION201=null;
        RBuilder.math_expression_return exp = null;

        RBuilder.justification_return by = null;


        ColsAST SIMPLIFICATION201_tree=null;

        try {
            // RBuilder.g:3058:1: ( ^( SIMPLIFICATION exp= math_expression by= justification ) )
            // RBuilder.g:3059:4: ^( SIMPLIFICATION exp= math_expression by= justification )
            {
            root_0 = (ColsAST)adaptor.nil();

            _last = (ColsAST)input.LT(1);
            {
            ColsAST _save_last_1 = _last;
            ColsAST _first_1 = null;
            ColsAST root_1 = (ColsAST)adaptor.nil();_last = (ColsAST)input.LT(1);
            SIMPLIFICATION201=(ColsAST)match(input,SIMPLIFICATION,FOLLOW_SIMPLIFICATION_in_justification_declaration19269); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SIMPLIFICATION201_tree = (ColsAST)adaptor.dupNode(SIMPLIFICATION201);

            root_1 = (ColsAST)adaptor.becomeRoot(SIMPLIFICATION201_tree, root_1);
            }


            match(input, Token.DOWN, null); if (state.failed) return retval;
            _last = (ColsAST)input.LT(1);
            pushFollow(FOLLOW_math_expression_in_justification_declaration19273);
            exp=math_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, exp.getTree());
            _last = (ColsAST)input.LT(1);
            pushFollow(FOLLOW_justification_in_justification_declaration19277);
            by=justification();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, by.getTree());

            match(input, Token.UP, null); if (state.failed) return retval;adaptor.addChild(root_0, root_1);_last = _save_last_1;
            }

            if ( state.backtracking==0 ) {
               retval.je = new JustifiedExp(getLocation(SIMPLIFICATION201), null, (exp!=null?exp.exp:null), (by!=null?by.je:null)); 
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "justification_declaration"

    public static class justification_return extends TreeRuleReturnScope {
        public JustificationExp je = null;
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "justification"
    // RBuilder.g:3063:1: justification returns [JustificationExp je = null] : ^( BY ( ( hyp_desig hyp_desig )=>je1= double_hyp_rule_justification | ( hyp_desig rules_set_1 )=>je2= single_hyp_rule_justification | ( hyp_desig rules_set_2 )=>je2= single_hyp_rule_justification | ( hyp_desig DEFINITION )=>je2= single_hyp_rule_justification | ( hyp_desig )=>he= hyp_desig | je3= simple_justification | ( DEFINITION )=>je4= def_justification | ( INDEXED_DEFINITION )=>je5= indexed_def_justification ) ) ;
    public final RBuilder.justification_return justification() throws RecognitionException {
        RBuilder.justification_return retval = new RBuilder.justification_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        ColsAST _first_0 = null;
        ColsAST _last = null;

        ColsAST BY202=null;
        RBuilder.double_hyp_rule_justification_return je1 = null;

        RBuilder.single_hyp_rule_justification_return je2 = null;

        RBuilder.hyp_desig_return he = null;

        RBuilder.simple_justification_return je3 = null;

        RBuilder.def_justification_return je4 = null;

        RBuilder.indexed_def_justification_return je5 = null;


        ColsAST BY202_tree=null;

        try {
            // RBuilder.g:3064:1: ( ^( BY ( ( hyp_desig hyp_desig )=>je1= double_hyp_rule_justification | ( hyp_desig rules_set_1 )=>je2= single_hyp_rule_justification | ( hyp_desig rules_set_2 )=>je2= single_hyp_rule_justification | ( hyp_desig DEFINITION )=>je2= single_hyp_rule_justification | ( hyp_desig )=>he= hyp_desig | je3= simple_justification | ( DEFINITION )=>je4= def_justification | ( INDEXED_DEFINITION )=>je5= indexed_def_justification ) ) )
            // RBuilder.g:3065:3: ^( BY ( ( hyp_desig hyp_desig )=>je1= double_hyp_rule_justification | ( hyp_desig rules_set_1 )=>je2= single_hyp_rule_justification | ( hyp_desig rules_set_2 )=>je2= single_hyp_rule_justification | ( hyp_desig DEFINITION )=>je2= single_hyp_rule_justification | ( hyp_desig )=>he= hyp_desig | je3= simple_justification | ( DEFINITION )=>je4= def_justification | ( INDEXED_DEFINITION )=>je5= indexed_def_justification ) )
            {
            root_0 = (ColsAST)adaptor.nil();

            _last = (ColsAST)input.LT(1);
            {
            ColsAST _save_last_1 = _last;
            ColsAST _first_1 = null;
            ColsAST root_1 = (ColsAST)adaptor.nil();_last = (ColsAST)input.LT(1);
            BY202=(ColsAST)match(input,BY,FOLLOW_BY_in_justification19299); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            BY202_tree = (ColsAST)adaptor.dupNode(BY202);

            root_1 = (ColsAST)adaptor.becomeRoot(BY202_tree, root_1);
            }


            match(input, Token.DOWN, null); if (state.failed) return retval;
            // RBuilder.g:3066:3: ( ( hyp_desig hyp_desig )=>je1= double_hyp_rule_justification | ( hyp_desig rules_set_1 )=>je2= single_hyp_rule_justification | ( hyp_desig rules_set_2 )=>je2= single_hyp_rule_justification | ( hyp_desig DEFINITION )=>je2= single_hyp_rule_justification | ( hyp_desig )=>he= hyp_desig | je3= simple_justification | ( DEFINITION )=>je4= def_justification | ( INDEXED_DEFINITION )=>je5= indexed_def_justification )
            int alt265=8;
            alt265 = dfa265.predict(input);
            switch (alt265) {
                case 1 :
                    // RBuilder.g:3066:5: ( hyp_desig hyp_desig )=>je1= double_hyp_rule_justification
                    {
                    _last = (ColsAST)input.LT(1);
                    pushFollow(FOLLOW_double_hyp_rule_justification_in_justification19315);
                    je1=double_hyp_rule_justification();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, je1.getTree());
                    if ( state.backtracking==0 ) {
                       retval.je = (je1!=null?je1.je:null); 
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // RBuilder.g:3067:5: ( hyp_desig rules_set_1 )=>je2= single_hyp_rule_justification
                    {
                    _last = (ColsAST)input.LT(1);
                    pushFollow(FOLLOW_single_hyp_rule_justification_in_justification19333);
                    je2=single_hyp_rule_justification();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, je2.getTree());
                    if ( state.backtracking==0 ) {
                       retval.je = (je2!=null?je2.je:null); 
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 3 :
                    // RBuilder.g:3068:5: ( hyp_desig rules_set_2 )=>je2= single_hyp_rule_justification
                    {
                    _last = (ColsAST)input.LT(1);
                    pushFollow(FOLLOW_single_hyp_rule_justification_in_justification19351);
                    je2=single_hyp_rule_justification();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, je2.getTree());
                    if ( state.backtracking==0 ) {
                       retval.je = (je2!=null?je2.je:null); 
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 4 :
                    // RBuilder.g:3069:5: ( hyp_desig DEFINITION )=>je2= single_hyp_rule_justification
                    {
                    _last = (ColsAST)input.LT(1);
                    pushFollow(FOLLOW_single_hyp_rule_justification_in_justification19369);
                    je2=single_hyp_rule_justification();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, je2.getTree());
                    if ( state.backtracking==0 ) {
                       retval.je = (je2!=null?je2.je:null); 
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 5 :
                    // RBuilder.g:3070:5: ( hyp_desig )=>he= hyp_desig
                    {
                    _last = (ColsAST)input.LT(1);
                    pushFollow(FOLLOW_hyp_desig_in_justification19385);
                    he=hyp_desig();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, he.getTree());
                    if ( state.backtracking==0 ) {
                       retval.je = new JustificationExp(getLocation(BY202), (he!=null?he.hde:null), null, null, false); 
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 6 :
                    // RBuilder.g:3071:5: je3= simple_justification
                    {
                    _last = (ColsAST)input.LT(1);
                    pushFollow(FOLLOW_simple_justification_in_justification19395);
                    je3=simple_justification();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, je3.getTree());
                    if ( state.backtracking==0 ) {
                       retval.je = (je3!=null?je3.je:null); 
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 7 :
                    // RBuilder.g:3072:5: ( DEFINITION )=>je4= def_justification
                    {
                    _last = (ColsAST)input.LT(1);
                    pushFollow(FOLLOW_def_justification_in_justification19411);
                    je4=def_justification();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, je4.getTree());
                    if ( state.backtracking==0 ) {
                       retval.je = (je4!=null?je4.je:null); 
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 8 :
                    // RBuilder.g:3073:5: ( INDEXED_DEFINITION )=>je5= indexed_def_justification
                    {
                    _last = (ColsAST)input.LT(1);
                    pushFollow(FOLLOW_indexed_def_justification_in_justification19428);
                    je5=indexed_def_justification();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, je5.getTree());
                    if ( state.backtracking==0 ) {
                       retval.je = (je5!=null?je5.je:null); 
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }


            match(input, Token.UP, null); if (state.failed) return retval;adaptor.addChild(root_0, root_1);_last = _save_last_1;
            }


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "justification"

    public static class double_hyp_rule_justification_return extends TreeRuleReturnScope {
        public JustificationExp je = null;
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "double_hyp_rule_justification"
    // RBuilder.g:3076:1: double_hyp_rule_justification returns [JustificationExp je = null] : hypDesig1= hyp_desig hypDesig2= hyp_desig (rule= rules_set_1 )? ;
    public final RBuilder.double_hyp_rule_justification_return double_hyp_rule_justification() throws RecognitionException {
        RBuilder.double_hyp_rule_justification_return retval = new RBuilder.double_hyp_rule_justification_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        ColsAST _first_0 = null;
        ColsAST _last = null;

        RBuilder.hyp_desig_return hypDesig1 = null;

        RBuilder.hyp_desig_return hypDesig2 = null;

        RBuilder.rules_set_1_return rule = null;



        try {
            // RBuilder.g:3077:1: (hypDesig1= hyp_desig hypDesig2= hyp_desig (rule= rules_set_1 )? )
            // RBuilder.g:3078:3: hypDesig1= hyp_desig hypDesig2= hyp_desig (rule= rules_set_1 )?
            {
            root_0 = (ColsAST)adaptor.nil();

            _last = (ColsAST)input.LT(1);
            pushFollow(FOLLOW_hyp_desig_in_double_hyp_rule_justification19449);
            hypDesig1=hyp_desig();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, hypDesig1.getTree());
            _last = (ColsAST)input.LT(1);
            pushFollow(FOLLOW_hyp_desig_in_double_hyp_rule_justification19453);
            hypDesig2=hyp_desig();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, hypDesig2.getTree());
            // RBuilder.g:3078:43: (rule= rules_set_1 )?
            int alt266=2;
            int LA266_0 = input.LA(1);

            if ( (LA266_0==RULE1) ) {
                alt266=1;
            }
            switch (alt266) {
                case 1 :
                    // RBuilder.g:3078:44: rule= rules_set_1
                    {
                    _last = (ColsAST)input.LT(1);
                    pushFollow(FOLLOW_rules_set_1_in_double_hyp_rule_justification19458);
                    rule=rules_set_1();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, rule.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }

            if ( state.backtracking==0 ) {
               retval.je = new JustificationExp(getLocation((ColsAST)hypDesig1.getTree()), (hypDesig1!=null?hypDesig1.hde:null), (hypDesig2!=null?hypDesig2.hde:null), (rule!=null?rule.rule:null), false); 
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "double_hyp_rule_justification"

    public static class single_hyp_rule_justification_return extends TreeRuleReturnScope {
        public JustificationExp je = null;
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "single_hyp_rule_justification"
    // RBuilder.g:3082:1: single_hyp_rule_justification returns [JustificationExp je = null] : hypDesig1= hyp_desig ( ( RULE1 )=>rule1= rules_set_1 | ( RULE2 )=>rule2= rules_set_2 | je1= def_justification ) ;
    public final RBuilder.single_hyp_rule_justification_return single_hyp_rule_justification() throws RecognitionException {
        RBuilder.single_hyp_rule_justification_return retval = new RBuilder.single_hyp_rule_justification_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        ColsAST _first_0 = null;
        ColsAST _last = null;

        RBuilder.hyp_desig_return hypDesig1 = null;

        RBuilder.rules_set_1_return rule1 = null;

        RBuilder.rules_set_2_return rule2 = null;

        RBuilder.def_justification_return je1 = null;



        try {
            // RBuilder.g:3083:1: (hypDesig1= hyp_desig ( ( RULE1 )=>rule1= rules_set_1 | ( RULE2 )=>rule2= rules_set_2 | je1= def_justification ) )
            // RBuilder.g:3084:3: hypDesig1= hyp_desig ( ( RULE1 )=>rule1= rules_set_1 | ( RULE2 )=>rule2= rules_set_2 | je1= def_justification )
            {
            root_0 = (ColsAST)adaptor.nil();

            _last = (ColsAST)input.LT(1);
            pushFollow(FOLLOW_hyp_desig_in_single_hyp_rule_justification19481);
            hypDesig1=hyp_desig();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, hypDesig1.getTree());
            // RBuilder.g:3085:3: ( ( RULE1 )=>rule1= rules_set_1 | ( RULE2 )=>rule2= rules_set_2 | je1= def_justification )
            int alt267=3;
            int LA267_0 = input.LA(1);

            if ( (LA267_0==RULE1) && (synpred14_RBuilder())) {
                alt267=1;
            }
            else if ( (LA267_0==RULE2) && (synpred15_RBuilder())) {
                alt267=2;
            }
            else if ( (LA267_0==DEFINITION) ) {
                alt267=3;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 267, 0, input);

                throw nvae;
            }
            switch (alt267) {
                case 1 :
                    // RBuilder.g:3085:5: ( RULE1 )=>rule1= rules_set_1
                    {
                    _last = (ColsAST)input.LT(1);
                    pushFollow(FOLLOW_rules_set_1_in_single_hyp_rule_justification19495);
                    rule1=rules_set_1();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, rule1.getTree());
                    if ( state.backtracking==0 ) {
                       retval.je = new JustificationExp(getLocation((ColsAST)rule1.getTree()),(hypDesig1!=null?hypDesig1.hde:null), null, (rule1!=null?rule1.rule:null), false); 
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // RBuilder.g:3086:7: ( RULE2 )=>rule2= rules_set_2
                    {
                    _last = (ColsAST)input.LT(1);
                    pushFollow(FOLLOW_rules_set_2_in_single_hyp_rule_justification19513);
                    rule2=rules_set_2();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, rule2.getTree());
                    if ( state.backtracking==0 ) {
                       retval.je = new JustificationExp(getLocation((ColsAST)rule2.getTree()),(hypDesig1!=null?hypDesig1.hde:null), null, (rule2!=null?rule2.rule:null), false); 
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 3 :
                    // RBuilder.g:3087:5: je1= def_justification
                    {
                    _last = (ColsAST)input.LT(1);
                    pushFollow(FOLLOW_def_justification_in_single_hyp_rule_justification19523);
                    je1=def_justification();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, je1.getTree());
                    if ( state.backtracking==0 ) {
                       retval.je = (je1!=null?je1.je:null); retval.je.setHypDesig1((hypDesig1!=null?hypDesig1.hde:null)); 
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "single_hyp_rule_justification"

    public static class def_justification_return extends TreeRuleReturnScope {
        public JustificationExp je = null;
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "def_justification"
    // RBuilder.g:3090:1: def_justification returns [JustificationExp je = null] : ^( DEFINITION ( ( UNIQUE )=> (id= UNIQUE ) | (rule1= fn_name ) ) ) ;
    public final RBuilder.def_justification_return def_justification() throws RecognitionException {
        RBuilder.def_justification_return retval = new RBuilder.def_justification_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        ColsAST _first_0 = null;
        ColsAST _last = null;

        ColsAST id=null;
        ColsAST DEFINITION203=null;
        RBuilder.fn_name_return rule1 = null;


        ColsAST id_tree=null;
        ColsAST DEFINITION203_tree=null;


          PosSymbol rule = null;

        try {
            // RBuilder.g:3094:1: ( ^( DEFINITION ( ( UNIQUE )=> (id= UNIQUE ) | (rule1= fn_name ) ) ) )
            // RBuilder.g:3095:3: ^( DEFINITION ( ( UNIQUE )=> (id= UNIQUE ) | (rule1= fn_name ) ) )
            {
            root_0 = (ColsAST)adaptor.nil();

            _last = (ColsAST)input.LT(1);
            {
            ColsAST _save_last_1 = _last;
            ColsAST _first_1 = null;
            ColsAST root_1 = (ColsAST)adaptor.nil();_last = (ColsAST)input.LT(1);
            DEFINITION203=(ColsAST)match(input,DEFINITION,FOLLOW_DEFINITION_in_def_justification19547); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            DEFINITION203_tree = (ColsAST)adaptor.dupNode(DEFINITION203);

            root_1 = (ColsAST)adaptor.becomeRoot(DEFINITION203_tree, root_1);
            }


            match(input, Token.DOWN, null); if (state.failed) return retval;
            // RBuilder.g:3096:3: ( ( UNIQUE )=> (id= UNIQUE ) | (rule1= fn_name ) )
            int alt268=2;
            alt268 = dfa268.predict(input);
            switch (alt268) {
                case 1 :
                    // RBuilder.g:3096:4: ( UNIQUE )=> (id= UNIQUE )
                    {
                    // RBuilder.g:3096:16: (id= UNIQUE )
                    // RBuilder.g:3096:17: id= UNIQUE
                    {
                    _last = (ColsAST)input.LT(1);
                    id=(ColsAST)match(input,UNIQUE,FOLLOW_UNIQUE_in_def_justification19561); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    id_tree = (ColsAST)adaptor.dupNode(id);

                    adaptor.addChild(root_1, id_tree);
                    }
                    if ( state.backtracking==0 ) {
                       rule = new PosSymbol(getLocation(DEFINITION203), Symbol.symbol("ThereExistsUnique")); 
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // RBuilder.g:3097:5: (rule1= fn_name )
                    {
                    // RBuilder.g:3097:5: (rule1= fn_name )
                    // RBuilder.g:3097:6: rule1= fn_name
                    {
                    _last = (ColsAST)input.LT(1);
                    pushFollow(FOLLOW_fn_name_in_def_justification19574);
                    rule1=fn_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, rule1.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }

                    if ( state.backtracking==0 ) {
                       rule = (rule1!=null?rule1.name:null); 
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }


            match(input, Token.UP, null); if (state.failed) return retval;adaptor.addChild(root_0, root_1);_last = _save_last_1;
            }

            if ( state.backtracking==0 ) {
               retval.je = new JustificationExp(null, null, null, rule, true); 
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "def_justification"

    public static class indexed_def_justification_return extends TreeRuleReturnScope {
        public JustificationExp je = null;
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "indexed_def_justification"
    // RBuilder.g:3101:1: indexed_def_justification returns [JustificationExp je = null] : ^( INDEXED_DEFINITION (index= ident ) (definitionName= fn_name ) (sourceModuleName= ident )? ) ;
    public final RBuilder.indexed_def_justification_return indexed_def_justification() throws RecognitionException {
        RBuilder.indexed_def_justification_return retval = new RBuilder.indexed_def_justification_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        ColsAST _first_0 = null;
        ColsAST _last = null;

        ColsAST INDEXED_DEFINITION204=null;
        RBuilder.ident_return index = null;

        RBuilder.fn_name_return definitionName = null;

        RBuilder.ident_return sourceModuleName = null;


        ColsAST INDEXED_DEFINITION204_tree=null;

        try {
            // RBuilder.g:3102:1: ( ^( INDEXED_DEFINITION (index= ident ) (definitionName= fn_name ) (sourceModuleName= ident )? ) )
            // RBuilder.g:3103:3: ^( INDEXED_DEFINITION (index= ident ) (definitionName= fn_name ) (sourceModuleName= ident )? )
            {
            root_0 = (ColsAST)adaptor.nil();

            _last = (ColsAST)input.LT(1);
            {
            ColsAST _save_last_1 = _last;
            ColsAST _first_1 = null;
            ColsAST root_1 = (ColsAST)adaptor.nil();_last = (ColsAST)input.LT(1);
            INDEXED_DEFINITION204=(ColsAST)match(input,INDEXED_DEFINITION,FOLLOW_INDEXED_DEFINITION_in_indexed_def_justification19600); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            INDEXED_DEFINITION204_tree = (ColsAST)adaptor.dupNode(INDEXED_DEFINITION204);

            root_1 = (ColsAST)adaptor.becomeRoot(INDEXED_DEFINITION204_tree, root_1);
            }


            match(input, Token.DOWN, null); if (state.failed) return retval;
            // RBuilder.g:3103:24: (index= ident )
            // RBuilder.g:3103:25: index= ident
            {
            _last = (ColsAST)input.LT(1);
            pushFollow(FOLLOW_ident_in_indexed_def_justification19605);
            index=ident();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, index.getTree());

            if ( state.backtracking==0 ) {
            }
            }

            // RBuilder.g:3103:38: (definitionName= fn_name )
            // RBuilder.g:3103:39: definitionName= fn_name
            {
            _last = (ColsAST)input.LT(1);
            pushFollow(FOLLOW_fn_name_in_indexed_def_justification19611);
            definitionName=fn_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, definitionName.getTree());

            if ( state.backtracking==0 ) {
            }
            }

            // RBuilder.g:3104:5: (sourceModuleName= ident )?
            int alt269=2;
            int LA269_0 = input.LA(1);

            if ( (LA269_0==IDENTIFIER) ) {
                alt269=1;
            }
            switch (alt269) {
                case 1 :
                    // RBuilder.g:3104:6: sourceModuleName= ident
                    {
                    _last = (ColsAST)input.LT(1);
                    pushFollow(FOLLOW_ident_in_indexed_def_justification19621);
                    sourceModuleName=ident();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, sourceModuleName.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }


            match(input, Token.UP, null); if (state.failed) return retval;adaptor.addChild(root_0, root_1);_last = _save_last_1;
            }

            if ( state.backtracking==0 ) {
               retval.je = new JustificationExp(null, null, null, (definitionName!=null?definitionName.name:null), (index!=null?index.ps:null), 
                  (sourceModuleName!=null?sourceModuleName.ps:null), true); 
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "indexed_def_justification"

    public static class simple_justification_return extends TreeRuleReturnScope {
        public JustificationExp je = null;
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "simple_justification"
    // RBuilder.g:3109:1: simple_justification returns [JustificationExp je = null] : ( ( RULE3 )=>rule1= rules_set_3 | rule2= rules_set_2 ) ;
    public final RBuilder.simple_justification_return simple_justification() throws RecognitionException {
        RBuilder.simple_justification_return retval = new RBuilder.simple_justification_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        ColsAST _first_0 = null;
        ColsAST _last = null;

        RBuilder.rules_set_3_return rule1 = null;

        RBuilder.rules_set_2_return rule2 = null;




          PosSymbol rule = null;

        try {
            // RBuilder.g:3113:1: ( ( ( RULE3 )=>rule1= rules_set_3 | rule2= rules_set_2 ) )
            // RBuilder.g:3114:3: ( ( RULE3 )=>rule1= rules_set_3 | rule2= rules_set_2 )
            {
            root_0 = (ColsAST)adaptor.nil();

            // RBuilder.g:3114:3: ( ( RULE3 )=>rule1= rules_set_3 | rule2= rules_set_2 )
            int alt270=2;
            int LA270_0 = input.LA(1);

            if ( (LA270_0==RULE3) && (synpred17_RBuilder())) {
                alt270=1;
            }
            else if ( (LA270_0==RULE2) ) {
                alt270=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 270, 0, input);

                throw nvae;
            }
            switch (alt270) {
                case 1 :
                    // RBuilder.g:3114:5: ( RULE3 )=>rule1= rules_set_3
                    {
                    _last = (ColsAST)input.LT(1);
                    pushFollow(FOLLOW_rules_set_3_in_simple_justification19658);
                    rule1=rules_set_3();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, rule1.getTree());
                    if ( state.backtracking==0 ) {
                       rule = (rule1!=null?rule1.rule:null); 
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // RBuilder.g:3114:60: rule2= rules_set_2
                    {
                    _last = (ColsAST)input.LT(1);
                    pushFollow(FOLLOW_rules_set_2_in_simple_justification19666);
                    rule2=rules_set_2();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, rule2.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }

            if ( state.backtracking==0 ) {
               rule = (rule2!=null?rule2.rule:null); 
            }
            if ( state.backtracking==0 ) {
               retval.je = new JustificationExp(null, null, null, rule, false); 
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "simple_justification"

    public static class rules_set_1_return extends TreeRuleReturnScope {
        public PosSymbol rule = null;
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rules_set_1"
    // RBuilder.g:3118:1: rules_set_1 returns [PosSymbol rule = null] : ^( RULE1 (id1= MODUS_PONENS | id2= AND_RULE | id3= CONTRADICTION | id4= EQUALITY | id5= ALTERNATIVE_ELIMINATION | id6= COMMON_CONCLUSION ) ) ;
    public final RBuilder.rules_set_1_return rules_set_1() throws RecognitionException {
        RBuilder.rules_set_1_return retval = new RBuilder.rules_set_1_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        ColsAST _first_0 = null;
        ColsAST _last = null;

        ColsAST id1=null;
        ColsAST id2=null;
        ColsAST id3=null;
        ColsAST id4=null;
        ColsAST id5=null;
        ColsAST id6=null;
        ColsAST RULE1205=null;

        ColsAST id1_tree=null;
        ColsAST id2_tree=null;
        ColsAST id3_tree=null;
        ColsAST id4_tree=null;
        ColsAST id5_tree=null;
        ColsAST id6_tree=null;
        ColsAST RULE1205_tree=null;


          PosSymbol temp = null;

        try {
            // RBuilder.g:3122:1: ( ^( RULE1 (id1= MODUS_PONENS | id2= AND_RULE | id3= CONTRADICTION | id4= EQUALITY | id5= ALTERNATIVE_ELIMINATION | id6= COMMON_CONCLUSION ) ) )
            // RBuilder.g:3123:3: ^( RULE1 (id1= MODUS_PONENS | id2= AND_RULE | id3= CONTRADICTION | id4= EQUALITY | id5= ALTERNATIVE_ELIMINATION | id6= COMMON_CONCLUSION ) )
            {
            root_0 = (ColsAST)adaptor.nil();

            _last = (ColsAST)input.LT(1);
            {
            ColsAST _save_last_1 = _last;
            ColsAST _first_1 = null;
            ColsAST root_1 = (ColsAST)adaptor.nil();_last = (ColsAST)input.LT(1);
            RULE1205=(ColsAST)match(input,RULE1,FOLLOW_RULE1_in_rules_set_119694); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RULE1205_tree = (ColsAST)adaptor.dupNode(RULE1205);

            root_1 = (ColsAST)adaptor.becomeRoot(RULE1205_tree, root_1);
            }


            match(input, Token.DOWN, null); if (state.failed) return retval;
            // RBuilder.g:3124:3: (id1= MODUS_PONENS | id2= AND_RULE | id3= CONTRADICTION | id4= EQUALITY | id5= ALTERNATIVE_ELIMINATION | id6= COMMON_CONCLUSION )
            int alt271=6;
            switch ( input.LA(1) ) {
            case MODUS_PONENS:
                {
                alt271=1;
                }
                break;
            case AND_RULE:
                {
                alt271=2;
                }
                break;
            case CONTRADICTION:
                {
                alt271=3;
                }
                break;
            case EQUALITY:
                {
                alt271=4;
                }
                break;
            case ALTERNATIVE_ELIMINATION:
                {
                alt271=5;
                }
                break;
            case COMMON_CONCLUSION:
                {
                alt271=6;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 271, 0, input);

                throw nvae;
            }

            switch (alt271) {
                case 1 :
                    // RBuilder.g:3124:4: id1= MODUS_PONENS
                    {
                    _last = (ColsAST)input.LT(1);
                    id1=(ColsAST)match(input,MODUS_PONENS,FOLLOW_MODUS_PONENS_in_rules_set_119701); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    id1_tree = (ColsAST)adaptor.dupNode(id1);

                    adaptor.addChild(root_1, id1_tree);
                    }
                    if ( state.backtracking==0 ) {
                       temp = new PosSymbol(getLocation(root_0), Symbol.symbol("ModusPonens")); 
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // RBuilder.g:3125:3: id2= AND_RULE
                    {
                    _last = (ColsAST)input.LT(1);
                    id2=(ColsAST)match(input,AND_RULE,FOLLOW_AND_RULE_in_rules_set_119722); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    id2_tree = (ColsAST)adaptor.dupNode(id2);

                    adaptor.addChild(root_1, id2_tree);
                    }
                    if ( state.backtracking==0 ) {
                       temp = new PosSymbol(getLocation(root_0), Symbol.symbol("AndRule")); 
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 3 :
                    // RBuilder.g:3126:3: id3= CONTRADICTION
                    {
                    _last = (ColsAST)input.LT(1);
                    id3=(ColsAST)match(input,CONTRADICTION,FOLLOW_CONTRADICTION_in_rules_set_119746); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    id3_tree = (ColsAST)adaptor.dupNode(id3);

                    adaptor.addChild(root_1, id3_tree);
                    }
                    if ( state.backtracking==0 ) {
                       temp = new PosSymbol(getLocation(root_0), Symbol.symbol("Contradiction")); 
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 4 :
                    // RBuilder.g:3127:3: id4= EQUALITY
                    {
                    _last = (ColsAST)input.LT(1);
                    id4=(ColsAST)match(input,EQUALITY,FOLLOW_EQUALITY_in_rules_set_119765); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    id4_tree = (ColsAST)adaptor.dupNode(id4);

                    adaptor.addChild(root_1, id4_tree);
                    }
                    if ( state.backtracking==0 ) {
                       temp = new PosSymbol(getLocation(root_0), Symbol.symbol("Equality")); 
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 5 :
                    // RBuilder.g:3128:3: id5= ALTERNATIVE_ELIMINATION
                    {
                    _last = (ColsAST)input.LT(1);
                    id5=(ColsAST)match(input,ALTERNATIVE_ELIMINATION,FOLLOW_ALTERNATIVE_ELIMINATION_in_rules_set_119790); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    id5_tree = (ColsAST)adaptor.dupNode(id5);

                    adaptor.addChild(root_1, id5_tree);
                    }
                    if ( state.backtracking==0 ) {
                       temp = new PosSymbol(getLocation(root_0), Symbol.symbol("AlternativeElimination")); 
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 6 :
                    // RBuilder.g:3129:3: id6= COMMON_CONCLUSION
                    {
                    _last = (ColsAST)input.LT(1);
                    id6=(ColsAST)match(input,COMMON_CONCLUSION,FOLLOW_COMMON_CONCLUSION_in_rules_set_119800); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    id6_tree = (ColsAST)adaptor.dupNode(id6);

                    adaptor.addChild(root_1, id6_tree);
                    }
                    if ( state.backtracking==0 ) {
                       temp = new PosSymbol(getLocation(root_0), Symbol.symbol("CommonConclusion")); 
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }


            match(input, Token.UP, null); if (state.failed) return retval;adaptor.addChild(root_0, root_1);_last = _save_last_1;
            }

            if ( state.backtracking==0 ) {
               retval.rule = temp; 
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "rules_set_1"

    public static class rules_set_2_return extends TreeRuleReturnScope {
        public PosSymbol rule = null;
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rules_set_2"
    // RBuilder.g:3133:1: rules_set_2 returns [PosSymbol rule = null] : ^( RULE2 (id1= REDUCTIO_AD_ABSURDUM | id2= UNIVERSAL_GENERALIZATION | id3= EXISTENTIAL_GENERALIZATION | id4= OR_RULE | id5= CONJUNCT_ELIMINATION | id6= QUANTIFIER_DISTRIBUTION | id7= UNIVERSAL_INSTANTIATION | id8= EXISTENTIAL_INSTANTIATION ) ) ;
    public final RBuilder.rules_set_2_return rules_set_2() throws RecognitionException {
        RBuilder.rules_set_2_return retval = new RBuilder.rules_set_2_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        ColsAST _first_0 = null;
        ColsAST _last = null;

        ColsAST id1=null;
        ColsAST id2=null;
        ColsAST id3=null;
        ColsAST id4=null;
        ColsAST id5=null;
        ColsAST id6=null;
        ColsAST id7=null;
        ColsAST id8=null;
        ColsAST RULE2206=null;

        ColsAST id1_tree=null;
        ColsAST id2_tree=null;
        ColsAST id3_tree=null;
        ColsAST id4_tree=null;
        ColsAST id5_tree=null;
        ColsAST id6_tree=null;
        ColsAST id7_tree=null;
        ColsAST id8_tree=null;
        ColsAST RULE2206_tree=null;


          PosSymbol temp = null;

        try {
            // RBuilder.g:3137:1: ( ^( RULE2 (id1= REDUCTIO_AD_ABSURDUM | id2= UNIVERSAL_GENERALIZATION | id3= EXISTENTIAL_GENERALIZATION | id4= OR_RULE | id5= CONJUNCT_ELIMINATION | id6= QUANTIFIER_DISTRIBUTION | id7= UNIVERSAL_INSTANTIATION | id8= EXISTENTIAL_INSTANTIATION ) ) )
            // RBuilder.g:3138:3: ^( RULE2 (id1= REDUCTIO_AD_ABSURDUM | id2= UNIVERSAL_GENERALIZATION | id3= EXISTENTIAL_GENERALIZATION | id4= OR_RULE | id5= CONJUNCT_ELIMINATION | id6= QUANTIFIER_DISTRIBUTION | id7= UNIVERSAL_INSTANTIATION | id8= EXISTENTIAL_INSTANTIATION ) )
            {
            root_0 = (ColsAST)adaptor.nil();

            _last = (ColsAST)input.LT(1);
            {
            ColsAST _save_last_1 = _last;
            ColsAST _first_1 = null;
            ColsAST root_1 = (ColsAST)adaptor.nil();_last = (ColsAST)input.LT(1);
            RULE2206=(ColsAST)match(input,RULE2,FOLLOW_RULE2_in_rules_set_219830); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RULE2206_tree = (ColsAST)adaptor.dupNode(RULE2206);

            root_1 = (ColsAST)adaptor.becomeRoot(RULE2206_tree, root_1);
            }


            match(input, Token.DOWN, null); if (state.failed) return retval;
            // RBuilder.g:3139:3: (id1= REDUCTIO_AD_ABSURDUM | id2= UNIVERSAL_GENERALIZATION | id3= EXISTENTIAL_GENERALIZATION | id4= OR_RULE | id5= CONJUNCT_ELIMINATION | id6= QUANTIFIER_DISTRIBUTION | id7= UNIVERSAL_INSTANTIATION | id8= EXISTENTIAL_INSTANTIATION )
            int alt272=8;
            switch ( input.LA(1) ) {
            case REDUCTIO_AD_ABSURDUM:
                {
                alt272=1;
                }
                break;
            case UNIVERSAL_GENERALIZATION:
                {
                alt272=2;
                }
                break;
            case EXISTENTIAL_GENERALIZATION:
                {
                alt272=3;
                }
                break;
            case OR_RULE:
                {
                alt272=4;
                }
                break;
            case CONJUNCT_ELIMINATION:
                {
                alt272=5;
                }
                break;
            case QUANTIFIER_DISTRIBUTION:
                {
                alt272=6;
                }
                break;
            case UNIVERSAL_INSTANTIATION:
                {
                alt272=7;
                }
                break;
            case EXISTENTIAL_INSTANTIATION:
                {
                alt272=8;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 272, 0, input);

                throw nvae;
            }

            switch (alt272) {
                case 1 :
                    // RBuilder.g:3139:4: id1= REDUCTIO_AD_ABSURDUM
                    {
                    _last = (ColsAST)input.LT(1);
                    id1=(ColsAST)match(input,REDUCTIO_AD_ABSURDUM,FOLLOW_REDUCTIO_AD_ABSURDUM_in_rules_set_219837); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    id1_tree = (ColsAST)adaptor.dupNode(id1);

                    adaptor.addChild(root_1, id1_tree);
                    }
                    if ( state.backtracking==0 ) {
                       temp = new PosSymbol(getLocation(root_0), Symbol.symbol("ReductioAdAbsurdum")); 
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // RBuilder.g:3140:3: id2= UNIVERSAL_GENERALIZATION
                    {
                    _last = (ColsAST)input.LT(1);
                    id2=(ColsAST)match(input,UNIVERSAL_GENERALIZATION,FOLLOW_UNIVERSAL_GENERALIZATION_in_rules_set_219853); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    id2_tree = (ColsAST)adaptor.dupNode(id2);

                    adaptor.addChild(root_1, id2_tree);
                    }
                    if ( state.backtracking==0 ) {
                       temp = new PosSymbol(getLocation(root_0), Symbol.symbol("UniversalGeneralization")); 
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 3 :
                    // RBuilder.g:3141:3: id3= EXISTENTIAL_GENERALIZATION
                    {
                    _last = (ColsAST)input.LT(1);
                    id3=(ColsAST)match(input,EXISTENTIAL_GENERALIZATION,FOLLOW_EXISTENTIAL_GENERALIZATION_in_rules_set_219865); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    id3_tree = (ColsAST)adaptor.dupNode(id3);

                    adaptor.addChild(root_1, id3_tree);
                    }
                    if ( state.backtracking==0 ) {
                       temp = new PosSymbol(getLocation(root_0), Symbol.symbol("ExistentialGeneralization")); 
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 4 :
                    // RBuilder.g:3142:3: id4= OR_RULE
                    {
                    _last = (ColsAST)input.LT(1);
                    id4=(ColsAST)match(input,OR_RULE,FOLLOW_OR_RULE_in_rules_set_219875); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    id4_tree = (ColsAST)adaptor.dupNode(id4);

                    adaptor.addChild(root_1, id4_tree);
                    }
                    if ( state.backtracking==0 ) {
                       temp = new PosSymbol(getLocation(root_0), Symbol.symbol("OrRule")); 
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 5 :
                    // RBuilder.g:3143:3: id5= CONJUNCT_ELIMINATION
                    {
                    _last = (ColsAST)input.LT(1);
                    id5=(ColsAST)match(input,CONJUNCT_ELIMINATION,FOLLOW_CONJUNCT_ELIMINATION_in_rules_set_219905); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    id5_tree = (ColsAST)adaptor.dupNode(id5);

                    adaptor.addChild(root_1, id5_tree);
                    }
                    if ( state.backtracking==0 ) {
                       temp = new PosSymbol(getLocation(root_0), Symbol.symbol("ConjunctElimination")); 
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 6 :
                    // RBuilder.g:3144:3: id6= QUANTIFIER_DISTRIBUTION
                    {
                    _last = (ColsAST)input.LT(1);
                    id6=(ColsAST)match(input,QUANTIFIER_DISTRIBUTION,FOLLOW_QUANTIFIER_DISTRIBUTION_in_rules_set_219921); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    id6_tree = (ColsAST)adaptor.dupNode(id6);

                    adaptor.addChild(root_1, id6_tree);
                    }
                    if ( state.backtracking==0 ) {
                       temp = new PosSymbol(getLocation(root_0), Symbol.symbol("QuantifierDistribution")); 
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 7 :
                    // RBuilder.g:3145:3: id7= UNIVERSAL_INSTANTIATION
                    {
                    _last = (ColsAST)input.LT(1);
                    id7=(ColsAST)match(input,UNIVERSAL_INSTANTIATION,FOLLOW_UNIVERSAL_INSTANTIATION_in_rules_set_219935); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    id7_tree = (ColsAST)adaptor.dupNode(id7);

                    adaptor.addChild(root_1, id7_tree);
                    }
                    if ( state.backtracking==0 ) {
                       temp = new PosSymbol(getLocation(root_0), Symbol.symbol("UniversalInstantiation")); 
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 8 :
                    // RBuilder.g:3146:3: id8= EXISTENTIAL_INSTANTIATION
                    {
                    _last = (ColsAST)input.LT(1);
                    id8=(ColsAST)match(input,EXISTENTIAL_INSTANTIATION,FOLLOW_EXISTENTIAL_INSTANTIATION_in_rules_set_219949); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    id8_tree = (ColsAST)adaptor.dupNode(id8);

                    adaptor.addChild(root_1, id8_tree);
                    }
                    if ( state.backtracking==0 ) {
                       temp = new PosSymbol(getLocation(root_0), Symbol.symbol("ExistentialInstantiation")); 
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }


            match(input, Token.UP, null); if (state.failed) return retval;adaptor.addChild(root_0, root_1);_last = _save_last_1;
            }

            if ( state.backtracking==0 ) {
               retval.rule = temp; 
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "rules_set_2"

    public static class rules_set_3_return extends TreeRuleReturnScope {
        public PosSymbol rule = null;
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rules_set_3"
    // RBuilder.g:3150:1: rules_set_3 returns [PosSymbol rule = null] : ^( RULE3 id= EXCLUDED_MIDDLE ) ;
    public final RBuilder.rules_set_3_return rules_set_3() throws RecognitionException {
        RBuilder.rules_set_3_return retval = new RBuilder.rules_set_3_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        ColsAST _first_0 = null;
        ColsAST _last = null;

        ColsAST id=null;
        ColsAST RULE3207=null;

        ColsAST id_tree=null;
        ColsAST RULE3207_tree=null;

        try {
            // RBuilder.g:3151:1: ( ^( RULE3 id= EXCLUDED_MIDDLE ) )
            // RBuilder.g:3152:5: ^( RULE3 id= EXCLUDED_MIDDLE )
            {
            root_0 = (ColsAST)adaptor.nil();

            _last = (ColsAST)input.LT(1);
            {
            ColsAST _save_last_1 = _last;
            ColsAST _first_1 = null;
            ColsAST root_1 = (ColsAST)adaptor.nil();_last = (ColsAST)input.LT(1);
            RULE3207=(ColsAST)match(input,RULE3,FOLLOW_RULE3_in_rules_set_319977); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RULE3207_tree = (ColsAST)adaptor.dupNode(RULE3207);

            root_1 = (ColsAST)adaptor.becomeRoot(RULE3207_tree, root_1);
            }


            match(input, Token.DOWN, null); if (state.failed) return retval;
            _last = (ColsAST)input.LT(1);
            id=(ColsAST)match(input,EXCLUDED_MIDDLE,FOLLOW_EXCLUDED_MIDDLE_in_rules_set_319981); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            id_tree = (ColsAST)adaptor.dupNode(id);

            adaptor.addChild(root_1, id_tree);
            }

            match(input, Token.UP, null); if (state.failed) return retval;adaptor.addChild(root_0, root_1);_last = _save_last_1;
            }

            if ( state.backtracking==0 ) {
               retval.rule = new PosSymbol(getLocation(root_0), Symbol.symbol("ExcludedMiddle")); 
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "rules_set_3"

    public static class hyp_desig_return extends TreeRuleReturnScope {
        public HypDesigExp hde = null;
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "hyp_desig"
    // RBuilder.g:3156:1: hyp_desig returns [HypDesigExp hde = null] : ^( HYPDESIG ( SELF | mre1= lemma_call | ps= corollary_name | mre2= theorem_call | mre3= supposition_call | mre4= definition_call | mre5= reference_marker_call ) ) ;
    public final RBuilder.hyp_desig_return hyp_desig() throws RecognitionException {
        RBuilder.hyp_desig_return retval = new RBuilder.hyp_desig_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        ColsAST _first_0 = null;
        ColsAST _last = null;

        ColsAST HYPDESIG208=null;
        ColsAST SELF209=null;
        RBuilder.lemma_call_return mre1 = null;

        RBuilder.corollary_name_return ps = null;

        RBuilder.theorem_call_return mre2 = null;

        RBuilder.supposition_call_return mre3 = null;

        RBuilder.definition_call_return mre4 = null;

        RBuilder.reference_marker_call_return mre5 = null;


        ColsAST HYPDESIG208_tree=null;
        ColsAST SELF209_tree=null;


            boolean self = false;
            MathRefExp mre = null;

        try {
            // RBuilder.g:3161:1: ( ^( HYPDESIG ( SELF | mre1= lemma_call | ps= corollary_name | mre2= theorem_call | mre3= supposition_call | mre4= definition_call | mre5= reference_marker_call ) ) )
            // RBuilder.g:3162:3: ^( HYPDESIG ( SELF | mre1= lemma_call | ps= corollary_name | mre2= theorem_call | mre3= supposition_call | mre4= definition_call | mre5= reference_marker_call ) )
            {
            root_0 = (ColsAST)adaptor.nil();

            _last = (ColsAST)input.LT(1);
            {
            ColsAST _save_last_1 = _last;
            ColsAST _first_1 = null;
            ColsAST root_1 = (ColsAST)adaptor.nil();_last = (ColsAST)input.LT(1);
            HYPDESIG208=(ColsAST)match(input,HYPDESIG,FOLLOW_HYPDESIG_in_hyp_desig20008); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            HYPDESIG208_tree = (ColsAST)adaptor.dupNode(HYPDESIG208);

            root_1 = (ColsAST)adaptor.becomeRoot(HYPDESIG208_tree, root_1);
            }


            match(input, Token.DOWN, null); if (state.failed) return retval;
            // RBuilder.g:3162:14: ( SELF | mre1= lemma_call | ps= corollary_name | mre2= theorem_call | mre3= supposition_call | mre4= definition_call | mre5= reference_marker_call )
            int alt273=7;
            switch ( input.LA(1) ) {
            case SELF:
                {
                alt273=1;
                }
                break;
            case LEMMA:
                {
                alt273=2;
                }
                break;
            case COROLLARY:
                {
                alt273=3;
                }
                break;
            case THEOREM:
                {
                alt273=4;
                }
                break;
            case SUPPOSITION:
                {
                alt273=5;
                }
                break;
            case DEFINITION:
                {
                alt273=6;
                }
                break;
            case REFCALL:
                {
                alt273=7;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 273, 0, input);

                throw nvae;
            }

            switch (alt273) {
                case 1 :
                    // RBuilder.g:3162:16: SELF
                    {
                    _last = (ColsAST)input.LT(1);
                    SELF209=(ColsAST)match(input,SELF,FOLLOW_SELF_in_hyp_desig20012); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SELF209_tree = (ColsAST)adaptor.dupNode(SELF209);

                    adaptor.addChild(root_1, SELF209_tree);
                    }
                    if ( state.backtracking==0 ) {
                       self=true; 
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // RBuilder.g:3163:5: mre1= lemma_call
                    {
                    _last = (ColsAST)input.LT(1);
                    pushFollow(FOLLOW_lemma_call_in_hyp_desig20024);
                    mre1=lemma_call();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, mre1.getTree());
                    if ( state.backtracking==0 ) {
                       mre = (mre1!=null?mre1.mre:null); 
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 3 :
                    // RBuilder.g:3164:5: ps= corollary_name
                    {
                    _last = (ColsAST)input.LT(1);
                    pushFollow(FOLLOW_corollary_name_in_hyp_desig20036);
                    ps=corollary_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, ps.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 4 :
                    // RBuilder.g:3165:5: mre2= theorem_call
                    {
                    _last = (ColsAST)input.LT(1);
                    pushFollow(FOLLOW_theorem_call_in_hyp_desig20052);
                    mre2=theorem_call();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, mre2.getTree());
                    if ( state.backtracking==0 ) {
                       mre = (mre2!=null?mre2.mre:null); 
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 5 :
                    // RBuilder.g:3166:5: mre3= supposition_call
                    {
                    _last = (ColsAST)input.LT(1);
                    pushFollow(FOLLOW_supposition_call_in_hyp_desig20071);
                    mre3=supposition_call();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, mre3.getTree());
                    if ( state.backtracking==0 ) {
                       mre = (mre3!=null?mre3.mre:null); 
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 6 :
                    // RBuilder.g:3167:5: mre4= definition_call
                    {
                    _last = (ColsAST)input.LT(1);
                    pushFollow(FOLLOW_definition_call_in_hyp_desig20088);
                    mre4=definition_call();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, mre4.getTree());
                    if ( state.backtracking==0 ) {
                       mre = (mre4!=null?mre4.mre:null); 
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 7 :
                    // RBuilder.g:3168:5: mre5= reference_marker_call
                    {
                    _last = (ColsAST)input.LT(1);
                    pushFollow(FOLLOW_reference_marker_call_in_hyp_desig20106);
                    mre5=reference_marker_call();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, mre5.getTree());
                    if ( state.backtracking==0 ) {
                       mre = (mre5!=null?mre5.mre:null); 
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }


            match(input, Token.UP, null); if (state.failed) return retval;adaptor.addChild(root_0, root_1);_last = _save_last_1;
            }

            if ( state.backtracking==0 ) {
               if(self)
                      { mre = new MathRefExp(getLocation(root_0), MathRefExp.SELF, null); }
                    else if((ps!=null?ps.name:null) != null)
                      { mre = new MathRefExp(getLocation(root_0), MathRefExp.COROLLARY, (ps!=null?ps.name:null)); }
                    retval.hde = new HypDesigExp(getLocation(root_0), mre); 
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "hyp_desig"

    public static class lemma_call_return extends TreeRuleReturnScope {
        public MathRefExp mre = null;
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "lemma_call"
    // RBuilder.g:3176:1: lemma_call returns [MathRefExp mre = null] : ^( LEMMA id= ident ) ;
    public final RBuilder.lemma_call_return lemma_call() throws RecognitionException {
        RBuilder.lemma_call_return retval = new RBuilder.lemma_call_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        ColsAST _first_0 = null;
        ColsAST _last = null;

        ColsAST LEMMA210=null;
        RBuilder.ident_return id = null;


        ColsAST LEMMA210_tree=null;

        try {
            // RBuilder.g:3177:1: ( ^( LEMMA id= ident ) )
            // RBuilder.g:3178:5: ^( LEMMA id= ident )
            {
            root_0 = (ColsAST)adaptor.nil();

            _last = (ColsAST)input.LT(1);
            {
            ColsAST _save_last_1 = _last;
            ColsAST _first_1 = null;
            ColsAST root_1 = (ColsAST)adaptor.nil();_last = (ColsAST)input.LT(1);
            LEMMA210=(ColsAST)match(input,LEMMA,FOLLOW_LEMMA_in_lemma_call20138); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LEMMA210_tree = (ColsAST)adaptor.dupNode(LEMMA210);

            root_1 = (ColsAST)adaptor.becomeRoot(LEMMA210_tree, root_1);
            }


            match(input, Token.DOWN, null); if (state.failed) return retval;
            _last = (ColsAST)input.LT(1);
            pushFollow(FOLLOW_ident_in_lemma_call20142);
            id=ident();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, id.getTree());

            match(input, Token.UP, null); if (state.failed) return retval;adaptor.addChild(root_0, root_1);_last = _save_last_1;
            }

            if ( state.backtracking==0 ) {
               retval.mre = new MathRefExp(getLocation(root_0), 4, (id!=null?id.ps:null)); 
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "lemma_call"

    public static class theorem_call_return extends TreeRuleReturnScope {
        public MathRefExp mre = null;
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "theorem_call"
    // RBuilder.g:3182:1: theorem_call returns [MathRefExp mre = null] : ^( THEOREM id= ident ) ;
    public final RBuilder.theorem_call_return theorem_call() throws RecognitionException {
        RBuilder.theorem_call_return retval = new RBuilder.theorem_call_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        ColsAST _first_0 = null;
        ColsAST _last = null;

        ColsAST THEOREM211=null;
        RBuilder.ident_return id = null;


        ColsAST THEOREM211_tree=null;

        try {
            // RBuilder.g:3183:1: ( ^( THEOREM id= ident ) )
            // RBuilder.g:3184:5: ^( THEOREM id= ident )
            {
            root_0 = (ColsAST)adaptor.nil();

            _last = (ColsAST)input.LT(1);
            {
            ColsAST _save_last_1 = _last;
            ColsAST _first_1 = null;
            ColsAST root_1 = (ColsAST)adaptor.nil();_last = (ColsAST)input.LT(1);
            THEOREM211=(ColsAST)match(input,THEOREM,FOLLOW_THEOREM_in_theorem_call20167); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            THEOREM211_tree = (ColsAST)adaptor.dupNode(THEOREM211);

            root_1 = (ColsAST)adaptor.becomeRoot(THEOREM211_tree, root_1);
            }


            match(input, Token.DOWN, null); if (state.failed) return retval;
            _last = (ColsAST)input.LT(1);
            pushFollow(FOLLOW_ident_in_theorem_call20171);
            id=ident();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, id.getTree());

            match(input, Token.UP, null); if (state.failed) return retval;adaptor.addChild(root_0, root_1);_last = _save_last_1;
            }

            if ( state.backtracking==0 ) {
               retval.mre = new MathRefExp(getLocation(root_0), 2, (id!=null?id.ps:null)); 
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "theorem_call"

    public static class supposition_call_return extends TreeRuleReturnScope {
        public MathRefExp mre = null;
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "supposition_call"
    // RBuilder.g:3188:1: supposition_call returns [MathRefExp mre = null] : SUPPOSITION ;
    public final RBuilder.supposition_call_return supposition_call() throws RecognitionException {
        RBuilder.supposition_call_return retval = new RBuilder.supposition_call_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        ColsAST _first_0 = null;
        ColsAST _last = null;

        ColsAST SUPPOSITION212=null;

        ColsAST SUPPOSITION212_tree=null;

        try {
            // RBuilder.g:3189:1: ( SUPPOSITION )
            // RBuilder.g:3190:5: SUPPOSITION
            {
            root_0 = (ColsAST)adaptor.nil();

            _last = (ColsAST)input.LT(1);
            SUPPOSITION212=(ColsAST)match(input,SUPPOSITION,FOLLOW_SUPPOSITION_in_supposition_call20195); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SUPPOSITION212_tree = (ColsAST)adaptor.dupNode(SUPPOSITION212);

            adaptor.addChild(root_0, SUPPOSITION212_tree);
            }
            if ( state.backtracking==0 ) {
               retval.mre = new MathRefExp(getLocation(root_0), 6, null); 
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "supposition_call"

    public static class definition_call_return extends TreeRuleReturnScope {
        public MathRefExp mre = null;
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "definition_call"
    // RBuilder.g:3194:1: definition_call returns [MathRefExp mre = null] : ^( DEFINITION ( LPAREN index= ident )? id= fn_name vars= definition_params (sourceModule= ident )? ) ;
    public final RBuilder.definition_call_return definition_call() throws RecognitionException {
        RBuilder.definition_call_return retval = new RBuilder.definition_call_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        ColsAST _first_0 = null;
        ColsAST _last = null;

        ColsAST DEFINITION213=null;
        ColsAST LPAREN214=null;
        RBuilder.ident_return index = null;

        RBuilder.fn_name_return id = null;

        RBuilder.definition_params_return vars = null;

        RBuilder.ident_return sourceModule = null;


        ColsAST DEFINITION213_tree=null;
        ColsAST LPAREN214_tree=null;

        try {
            // RBuilder.g:3195:1: ( ^( DEFINITION ( LPAREN index= ident )? id= fn_name vars= definition_params (sourceModule= ident )? ) )
            // RBuilder.g:3196:5: ^( DEFINITION ( LPAREN index= ident )? id= fn_name vars= definition_params (sourceModule= ident )? )
            {
            root_0 = (ColsAST)adaptor.nil();

            _last = (ColsAST)input.LT(1);
            {
            ColsAST _save_last_1 = _last;
            ColsAST _first_1 = null;
            ColsAST root_1 = (ColsAST)adaptor.nil();_last = (ColsAST)input.LT(1);
            DEFINITION213=(ColsAST)match(input,DEFINITION,FOLLOW_DEFINITION_in_definition_call20219); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            DEFINITION213_tree = (ColsAST)adaptor.dupNode(DEFINITION213);

            root_1 = (ColsAST)adaptor.becomeRoot(DEFINITION213_tree, root_1);
            }


            match(input, Token.DOWN, null); if (state.failed) return retval;
            // RBuilder.g:3196:18: ( LPAREN index= ident )?
            int alt274=2;
            int LA274_0 = input.LA(1);

            if ( (LA274_0==LPAREN) ) {
                alt274=1;
            }
            switch (alt274) {
                case 1 :
                    // RBuilder.g:3196:19: LPAREN index= ident
                    {
                    _last = (ColsAST)input.LT(1);
                    LPAREN214=(ColsAST)match(input,LPAREN,FOLLOW_LPAREN_in_definition_call20222); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LPAREN214_tree = (ColsAST)adaptor.dupNode(LPAREN214);

                    adaptor.addChild(root_1, LPAREN214_tree);
                    }
                    _last = (ColsAST)input.LT(1);
                    pushFollow(FOLLOW_ident_in_definition_call20226);
                    index=ident();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, index.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }

            _last = (ColsAST)input.LT(1);
            pushFollow(FOLLOW_fn_name_in_definition_call20232);
            id=fn_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, id.getTree());
            _last = (ColsAST)input.LT(1);
            pushFollow(FOLLOW_definition_params_in_definition_call20236);
            vars=definition_params();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, vars.getTree());
            // RBuilder.g:3197:7: (sourceModule= ident )?
            int alt275=2;
            int LA275_0 = input.LA(1);

            if ( (LA275_0==IDENTIFIER) ) {
                alt275=1;
            }
            switch (alt275) {
                case 1 :
                    // RBuilder.g:3197:8: sourceModule= ident
                    {
                    _last = (ColsAST)input.LT(1);
                    pushFollow(FOLLOW_ident_in_definition_call20247);
                    sourceModule=ident();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, sourceModule.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }


            match(input, Token.UP, null); if (state.failed) return retval;adaptor.addChild(root_0, root_1);_last = _save_last_1;
            }

            if ( state.backtracking==0 ) {
               retval.mre = new MathRefExp(getLocation(root_0), 8, (id!=null?id.name:null), (index!=null?index.ps:null), (sourceModule!=null?sourceModule.ps:null), (vars!=null?vars.vars:null)); 
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "definition_call"

    public static class definition_params_return extends TreeRuleReturnScope {
        public edu.clemson.cs.r2jt.collections.List<VarExp> vars = null;
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "definition_params"
    // RBuilder.g:3201:1: definition_params returns [edu.clemson.cs.r2jt.collections.List<VarExp> vars = null] : (temp= qualified_ident )* ;
    public final RBuilder.definition_params_return definition_params() throws RecognitionException {
        RBuilder.definition_params_return retval = new RBuilder.definition_params_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        ColsAST _first_0 = null;
        ColsAST _last = null;

        RBuilder.qualified_ident_return temp = null;



        try {
            // RBuilder.g:3202:1: ( (temp= qualified_ident )* )
            // RBuilder.g:3203:5: (temp= qualified_ident )*
            {
            root_0 = (ColsAST)adaptor.nil();

            // RBuilder.g:3203:5: (temp= qualified_ident )*
            loop276:
            do {
                int alt276=2;
                int LA276_0 = input.LA(1);

                if ( (LA276_0==IDENTIFIER) ) {
                    alt276=1;
                }


                switch (alt276) {
            	case 1 :
            	    // RBuilder.g:3203:6: temp= qualified_ident
            	    {
            	    _last = (ColsAST)input.LT(1);
            	    pushFollow(FOLLOW_qualified_ident_in_definition_params20276);
            	    temp=qualified_ident();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) 
            	    adaptor.addChild(root_0, temp.getTree());
            	    if ( state.backtracking==0 ) {
            	       retval.vars.add((temp!=null?temp.exp:null)); 
            	    }

            	    if ( state.backtracking==0 ) {
            	    }
            	    }
            	    break;

            	default :
            	    break loop276;
                }
            } while (true);


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "definition_params"

    public static class reference_marker_call_return extends TreeRuleReturnScope {
        public MathRefExp mre = null;
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "reference_marker_call"
    // RBuilder.g:3206:1: reference_marker_call returns [MathRefExp mre = null] : ^( REFCALL id2= ident ) ;
    public final RBuilder.reference_marker_call_return reference_marker_call() throws RecognitionException {
        RBuilder.reference_marker_call_return retval = new RBuilder.reference_marker_call_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        ColsAST _first_0 = null;
        ColsAST _last = null;

        ColsAST REFCALL215=null;
        RBuilder.ident_return id2 = null;


        ColsAST REFCALL215_tree=null;


            PosSymbol id = null;

        try {
            // RBuilder.g:3210:1: ( ^( REFCALL id2= ident ) )
            // RBuilder.g:3211:5: ^( REFCALL id2= ident )
            {
            root_0 = (ColsAST)adaptor.nil();

            _last = (ColsAST)input.LT(1);
            {
            ColsAST _save_last_1 = _last;
            ColsAST _first_1 = null;
            ColsAST root_1 = (ColsAST)adaptor.nil();_last = (ColsAST)input.LT(1);
            REFCALL215=(ColsAST)match(input,REFCALL,FOLLOW_REFCALL_in_reference_marker_call20302); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REFCALL215_tree = (ColsAST)adaptor.dupNode(REFCALL215);

            root_1 = (ColsAST)adaptor.becomeRoot(REFCALL215_tree, root_1);
            }


            match(input, Token.DOWN, null); if (state.failed) return retval;
            _last = (ColsAST)input.LT(1);
            pushFollow(FOLLOW_ident_in_reference_marker_call20306);
            id2=ident();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, id2.getTree());

            match(input, Token.UP, null); if (state.failed) return retval;adaptor.addChild(root_0, root_1);_last = _save_last_1;
            }

            if ( state.backtracking==0 ) {
               id = getPosSymbol((ColsAST)id2.getTree()); retval.mre = new MathRefExp(getLocation((ColsAST)id2.getTree()), 7, id); 
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "reference_marker_call"

    public static class fn_name_return extends TreeRuleReturnScope {
        public PosSymbol name = null;
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "fn_name"
    // RBuilder.g:3215:1: fn_name returns [PosSymbol name = null] : (id1= infix_symbol | id2= prefix_symbol );
    public final RBuilder.fn_name_return fn_name() throws RecognitionException {
        RBuilder.fn_name_return retval = new RBuilder.fn_name_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        ColsAST _first_0 = null;
        ColsAST _last = null;

        RBuilder.infix_symbol_return id1 = null;

        RBuilder.prefix_symbol_return id2 = null;



        try {
            // RBuilder.g:3216:1: (id1= infix_symbol | id2= prefix_symbol )
            int alt277=2;
            alt277 = dfa277.predict(input);
            switch (alt277) {
                case 1 :
                    // RBuilder.g:3217:3: id1= infix_symbol
                    {
                    root_0 = (ColsAST)adaptor.nil();

                    _last = (ColsAST)input.LT(1);
                    pushFollow(FOLLOW_infix_symbol_in_fn_name20330);
                    id1=infix_symbol();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, id1.getTree());
                    if ( state.backtracking==0 ) {
                       retval.name =getPosSymbol((ColsAST)id1.getTree()); 
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // RBuilder.g:3218:5: id2= prefix_symbol
                    {
                    root_0 = (ColsAST)adaptor.nil();

                    _last = (ColsAST)input.LT(1);
                    pushFollow(FOLLOW_prefix_symbol_in_fn_name20340);
                    id2=prefix_symbol();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, id2.getTree());
                    if ( state.backtracking==0 ) {
                       retval.name =getPosSymbol((ColsAST)id2.getTree()); 
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }
            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "fn_name"

    // $ANTLR start synpred1_RBuilder
    public final void synpred1_RBuilder_fragment() throws RecognitionException {   
        // RBuilder.g:2883:11: ( ^( IDENTIFIER BASECASE ) )
        // RBuilder.g:2883:12: ^( IDENTIFIER BASECASE )
        {
        match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_synpred1_RBuilder18305); if (state.failed) return ;

        match(input, Token.DOWN, null); if (state.failed) return ;
        match(input,BASECASE,FOLLOW_BASECASE_in_synpred1_RBuilder18307); if (state.failed) return ;

        match(input, Token.UP, null); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred1_RBuilder

    // $ANTLR start synpred2_RBuilder
    public final void synpred2_RBuilder_fragment() throws RecognitionException {   
        // RBuilder.g:2885:10: ( BASECASE )
        // RBuilder.g:2885:11: BASECASE
        {
        match(input,BASECASE,FOLLOW_BASECASE_in_synpred2_RBuilder18338); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred2_RBuilder

    // $ANTLR start synpred3_RBuilder
    public final void synpred3_RBuilder_fragment() throws RecognitionException {   
        // RBuilder.g:2887:10: ( ^( IDENTIFIER INDUCTIVECASE ) )
        // RBuilder.g:2887:11: ^( IDENTIFIER INDUCTIVECASE )
        {
        match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_synpred3_RBuilder18369); if (state.failed) return ;

        match(input, Token.DOWN, null); if (state.failed) return ;
        match(input,INDUCTIVECASE,FOLLOW_INDUCTIVECASE_in_synpred3_RBuilder18371); if (state.failed) return ;

        match(input, Token.UP, null); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred3_RBuilder

    // $ANTLR start synpred4_RBuilder
    public final void synpred4_RBuilder_fragment() throws RecognitionException {   
        // RBuilder.g:2889:10: ( INDUCTIVECASE )
        // RBuilder.g:2889:11: INDUCTIVECASE
        {
        match(input,INDUCTIVECASE,FOLLOW_INDUCTIVECASE_in_synpred4_RBuilder18402); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred4_RBuilder

    // $ANTLR start synpred5_RBuilder
    public final void synpred5_RBuilder_fragment() throws RecognitionException {   
        // RBuilder.g:2891:10: ( IDENTIFIER )
        // RBuilder.g:2891:11: IDENTIFIER
        {
        match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_synpred5_RBuilder18432); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred5_RBuilder

    // $ANTLR start synpred6_RBuilder
    public final void synpred6_RBuilder_fragment() throws RecognitionException {   
        // RBuilder.g:2986:7: ( IDENTIFIER )
        // RBuilder.g:2986:8: IDENTIFIER
        {
        match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_synpred6_RBuilder18871); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred6_RBuilder

    // $ANTLR start synpred7_RBuilder
    public final void synpred7_RBuilder_fragment() throws RecognitionException {   
        // RBuilder.g:3066:5: ( hyp_desig hyp_desig )
        // RBuilder.g:3066:6: hyp_desig hyp_desig
        {
        pushFollow(FOLLOW_hyp_desig_in_synpred7_RBuilder19306);
        hyp_desig();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_hyp_desig_in_synpred7_RBuilder19308);
        hyp_desig();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred7_RBuilder

    // $ANTLR start synpred8_RBuilder
    public final void synpred8_RBuilder_fragment() throws RecognitionException {   
        // RBuilder.g:3067:5: ( hyp_desig rules_set_1 )
        // RBuilder.g:3067:6: hyp_desig rules_set_1
        {
        pushFollow(FOLLOW_hyp_desig_in_synpred8_RBuilder19324);
        hyp_desig();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_rules_set_1_in_synpred8_RBuilder19326);
        rules_set_1();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred8_RBuilder

    // $ANTLR start synpred9_RBuilder
    public final void synpred9_RBuilder_fragment() throws RecognitionException {   
        // RBuilder.g:3068:5: ( hyp_desig rules_set_2 )
        // RBuilder.g:3068:6: hyp_desig rules_set_2
        {
        pushFollow(FOLLOW_hyp_desig_in_synpred9_RBuilder19342);
        hyp_desig();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_rules_set_2_in_synpred9_RBuilder19344);
        rules_set_2();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred9_RBuilder

    // $ANTLR start synpred10_RBuilder
    public final void synpred10_RBuilder_fragment() throws RecognitionException {   
        // RBuilder.g:3069:5: ( hyp_desig DEFINITION )
        // RBuilder.g:3069:6: hyp_desig DEFINITION
        {
        pushFollow(FOLLOW_hyp_desig_in_synpred10_RBuilder19360);
        hyp_desig();

        state._fsp--;
        if (state.failed) return ;
        match(input,DEFINITION,FOLLOW_DEFINITION_in_synpred10_RBuilder19362); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred10_RBuilder

    // $ANTLR start synpred11_RBuilder
    public final void synpred11_RBuilder_fragment() throws RecognitionException {   
        // RBuilder.g:3070:5: ( hyp_desig )
        // RBuilder.g:3070:6: hyp_desig
        {
        pushFollow(FOLLOW_hyp_desig_in_synpred11_RBuilder19378);
        hyp_desig();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred11_RBuilder

    // $ANTLR start synpred12_RBuilder
    public final void synpred12_RBuilder_fragment() throws RecognitionException {   
        // RBuilder.g:3072:5: ( DEFINITION )
        // RBuilder.g:3072:6: DEFINITION
        {
        match(input,DEFINITION,FOLLOW_DEFINITION_in_synpred12_RBuilder19404); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred12_RBuilder

    // $ANTLR start synpred13_RBuilder
    public final void synpred13_RBuilder_fragment() throws RecognitionException {   
        // RBuilder.g:3073:5: ( INDEXED_DEFINITION )
        // RBuilder.g:3073:6: INDEXED_DEFINITION
        {
        match(input,INDEXED_DEFINITION,FOLLOW_INDEXED_DEFINITION_in_synpred13_RBuilder19421); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred13_RBuilder

    // $ANTLR start synpred14_RBuilder
    public final void synpred14_RBuilder_fragment() throws RecognitionException {   
        // RBuilder.g:3085:5: ( RULE1 )
        // RBuilder.g:3085:6: RULE1
        {
        match(input,RULE1,FOLLOW_RULE1_in_synpred14_RBuilder19488); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred14_RBuilder

    // $ANTLR start synpred15_RBuilder
    public final void synpred15_RBuilder_fragment() throws RecognitionException {   
        // RBuilder.g:3086:7: ( RULE2 )
        // RBuilder.g:3086:8: RULE2
        {
        match(input,RULE2,FOLLOW_RULE2_in_synpred15_RBuilder19506); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred15_RBuilder

    // $ANTLR start synpred16_RBuilder
    public final void synpred16_RBuilder_fragment() throws RecognitionException {   
        // RBuilder.g:3096:4: ( UNIQUE )
        // RBuilder.g:3096:5: UNIQUE
        {
        match(input,UNIQUE,FOLLOW_UNIQUE_in_synpred16_RBuilder19553); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred16_RBuilder

    // $ANTLR start synpred17_RBuilder
    public final void synpred17_RBuilder_fragment() throws RecognitionException {   
        // RBuilder.g:3114:5: ( RULE3 )
        // RBuilder.g:3114:6: RULE3
        {
        match(input,RULE3,FOLLOW_RULE3_in_synpred17_RBuilder19651); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred17_RBuilder

    // Delegated rules

    public final boolean synpred8_RBuilder() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred8_RBuilder_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred16_RBuilder() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred16_RBuilder_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred13_RBuilder() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred13_RBuilder_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred1_RBuilder() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred1_RBuilder_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred10_RBuilder() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred10_RBuilder_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred11_RBuilder() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred11_RBuilder_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred12_RBuilder() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred12_RBuilder_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred15_RBuilder() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred15_RBuilder_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred3_RBuilder() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred3_RBuilder_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred17_RBuilder() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred17_RBuilder_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred7_RBuilder() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred7_RBuilder_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred14_RBuilder() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred14_RBuilder_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred4_RBuilder() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred4_RBuilder_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred9_RBuilder() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred9_RBuilder_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred2_RBuilder() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred2_RBuilder_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred5_RBuilder() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred5_RBuilder_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred6_RBuilder() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred6_RBuilder_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }


    protected DFA5 dfa5 = new DFA5(this);
    protected DFA10 dfa10 = new DFA10(this);
    protected DFA16 dfa16 = new DFA16(this);
    protected DFA33 dfa33 = new DFA33(this);
    protected DFA42 dfa42 = new DFA42(this);
    protected DFA76 dfa76 = new DFA76(this);
    protected DFA158 dfa158 = new DFA158(this);
    protected DFA159 dfa159 = new DFA159(this);
    protected DFA182 dfa182 = new DFA182(this);
    protected DFA194 dfa194 = new DFA194(this);
    protected DFA210 dfa210 = new DFA210(this);
    protected DFA218 dfa218 = new DFA218(this);
    protected DFA255 dfa255 = new DFA255(this);
    protected DFA265 dfa265 = new DFA265(this);
    protected DFA268 dfa268 = new DFA268(this);
    protected DFA277 dfa277 = new DFA277(this);
    static final String DFA5_eotS =
        "\16\uffff";
    static final String DFA5_eofS =
        "\16\uffff";
    static final String DFA5_minS =
        "\1\3\15\uffff";
    static final String DFA5_maxS =
        "\1\u00ef\15\uffff";
    static final String DFA5_acceptS =
        "\1\uffff\1\5\3\1\1\2\6\3\1\4\1\uffff";
    static final String DFA5_specialS =
        "\16\uffff}>";
    static final String[] DFA5_transitionS = {
            "\1\1\15\uffff\1\6\12\uffff\1\13\10\uffff\1\12\4\uffff\1\4\61"+
            "\uffff\1\11\24\uffff\1\1\1\uffff\1\10\33\uffff\1\7\3\uffff\1"+
            "\14\111\uffff\1\5\17\uffff\1\2\1\uffff\1\3",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA5_eot = DFA.unpackEncodedString(DFA5_eotS);
    static final short[] DFA5_eof = DFA.unpackEncodedString(DFA5_eofS);
    static final char[] DFA5_min = DFA.unpackEncodedStringToUnsignedChars(DFA5_minS);
    static final char[] DFA5_max = DFA.unpackEncodedStringToUnsignedChars(DFA5_maxS);
    static final short[] DFA5_accept = DFA.unpackEncodedString(DFA5_acceptS);
    static final short[] DFA5_special = DFA.unpackEncodedString(DFA5_specialS);
    static final short[][] DFA5_transition;

    static {
        int numStates = DFA5_transitionS.length;
        DFA5_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA5_transition[i] = DFA.unpackEncodedString(DFA5_transitionS[i]);
        }
    }

    class DFA5 extends DFA {

        public DFA5(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 5;
            this.eot = DFA5_eot;
            this.eof = DFA5_eof;
            this.min = DFA5_min;
            this.max = DFA5_max;
            this.accept = DFA5_accept;
            this.special = DFA5_special;
            this.transition = DFA5_transition;
        }
        public String getDescription() {
            return "()+ loopback of 388:9: (dec4= definition_declaration | dec5= categorical_definition_declaration | dec6= math_assertion_declaration | dec8= type_theorem_declaration )+";
        }
    }
    static final String DFA10_eotS =
        "\13\uffff";
    static final String DFA10_eofS =
        "\13\uffff";
    static final String DFA10_minS =
        "\1\3\12\uffff";
    static final String DFA10_maxS =
        "\1\u00ef\12\uffff";
    static final String DFA10_acceptS =
        "\1\uffff\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12";
    static final String DFA10_specialS =
        "\13\uffff}>";
    static final String[] DFA10_transitionS = {
            "\1\12\36\uffff\1\3\6\uffff\1\11\1\10\24\uffff\1\5\1\4\47\uffff"+
            "\1\7\53\uffff\1\6\6\uffff\1\2\104\uffff\1\1\14\uffff\1\10\1"+
            "\uffff\1\10",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA10_eot = DFA.unpackEncodedString(DFA10_eotS);
    static final short[] DFA10_eof = DFA.unpackEncodedString(DFA10_eofS);
    static final char[] DFA10_min = DFA.unpackEncodedStringToUnsignedChars(DFA10_minS);
    static final char[] DFA10_max = DFA.unpackEncodedStringToUnsignedChars(DFA10_maxS);
    static final short[] DFA10_accept = DFA.unpackEncodedString(DFA10_acceptS);
    static final short[] DFA10_special = DFA.unpackEncodedString(DFA10_specialS);
    static final short[][] DFA10_transition;

    static {
        int numStates = DFA10_transitionS.length;
        DFA10_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA10_transition[i] = DFA.unpackEncodedString(DFA10_transitionS[i]);
        }
    }

    class DFA10 extends DFA {

        public DFA10(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 10;
            this.eot = DFA10_eot;
            this.eof = DFA10_eof;
            this.min = DFA10_min;
            this.max = DFA10_max;
            this.accept = DFA10_accept;
            this.special = DFA10_special;
            this.transition = DFA10_transition;
        }
        public String getDescription() {
            return "()+ loopback of 442:9: (dec2= confirm_math_type_declaration | decs2= concept_state_variable_declaration | exp2= constraint_clause | init= module_concept_init_declaration | fin= module_concept_final_declaration | dec3= type_declaration | dec4= operation_declaration | dec5= definition_declaration | dec6= defines_declaration )+";
        }
    }
    static final String DFA16_eotS =
        "\15\uffff";
    static final String DFA16_eofS =
        "\15\uffff";
    static final String DFA16_minS =
        "\1\3\14\uffff";
    static final String DFA16_maxS =
        "\1\u00ef\14\uffff";
    static final String DFA16_acceptS =
        "\1\uffff\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14";
    static final String DFA16_specialS =
        "\15\uffff}>";
    static final String[] DFA16_transitionS = {
            "\1\14\36\uffff\1\3\6\uffff\1\13\1\12\24\uffff\1\7\1\6\47\uffff"+
            "\1\11\2\uffff\1\5\1\4\47\uffff\1\10\6\uffff\1\2\104\uffff\1"+
            "\1\14\uffff\1\12\1\uffff\1\12",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA16_eot = DFA.unpackEncodedString(DFA16_eotS);
    static final short[] DFA16_eof = DFA.unpackEncodedString(DFA16_eofS);
    static final char[] DFA16_min = DFA.unpackEncodedStringToUnsignedChars(DFA16_minS);
    static final char[] DFA16_max = DFA.unpackEncodedStringToUnsignedChars(DFA16_maxS);
    static final short[] DFA16_accept = DFA.unpackEncodedString(DFA16_acceptS);
    static final short[] DFA16_special = DFA.unpackEncodedString(DFA16_specialS);
    static final short[][] DFA16_transition;

    static {
        int numStates = DFA16_transitionS.length;
        DFA16_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA16_transition[i] = DFA.unpackEncodedString(DFA16_transitionS[i]);
        }
    }

    class DFA16 extends DFA {

        public DFA16(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 16;
            this.eot = DFA16_eot;
            this.eof = DFA16_eof;
            this.min = DFA16_min;
            this.max = DFA16_max;
            this.accept = DFA16_accept;
            this.special = DFA16_special;
            this.transition = DFA16_transition;
        }
        public String getDescription() {
            return "()+ loopback of 518:9: (dec2= confirm_math_type_declaration | decs2= concept_state_variable_declaration | exp2= constraint_clause | perfInit= performance_module_init_declaration | perfFinal= performance_module_final_declaration | init= module_concept_init_declaration | fin= module_concept_final_declaration | dec3= performance_type_declaration | dec4= performance_operation_declaration | dec5= definition_declaration | dec6= defines_declaration )+";
        }
    }
    static final String DFA33_eotS =
        "\17\uffff";
    static final String DFA33_eofS =
        "\17\uffff";
    static final String DFA33_minS =
        "\1\3\16\uffff";
    static final String DFA33_maxS =
        "\1\u00fa\16\uffff";
    static final String DFA33_acceptS =
        "\1\uffff\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1"+
        "\15\1\16";
    static final String DFA33_specialS =
        "\17\uffff}>";
    static final String[] DFA33_transitionS = {
            "\1\16\40\uffff\1\2\1\uffff\1\3\3\uffff\1\14\23\uffff\1\15\1"+
            "\5\1\4\47\uffff\1\10\6\uffff\1\12\43\uffff\1\6\7\uffff\1\1\76"+
            "\uffff\1\11\22\uffff\1\14\1\uffff\1\14\11\uffff\1\7\1\13",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA33_eot = DFA.unpackEncodedString(DFA33_eotS);
    static final short[] DFA33_eof = DFA.unpackEncodedString(DFA33_eofS);
    static final char[] DFA33_min = DFA.unpackEncodedStringToUnsignedChars(DFA33_minS);
    static final char[] DFA33_max = DFA.unpackEncodedStringToUnsignedChars(DFA33_maxS);
    static final short[] DFA33_accept = DFA.unpackEncodedString(DFA33_acceptS);
    static final short[] DFA33_special = DFA.unpackEncodedString(DFA33_specialS);
    static final short[][] DFA33_transition;

    static {
        int numStates = DFA33_transitionS.length;
        DFA33_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA33_transition[i] = DFA.unpackEncodedString(DFA33_transitionS[i]);
        }
    }

    class DFA33 extends DFA {

        public DFA33(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 33;
            this.eot = DFA33_eot;
            this.eof = DFA33_eof;
            this.min = DFA33_min;
            this.max = DFA33_max;
            this.accept = DFA33_accept;
            this.special = DFA33_special;
            this.transition = DFA33_transition;
        }
        public String getDescription() {
            return "()+ loopback of 708:9: (decs2= state_variable_declaration | exp1= convention_clause | exp2= correspondence_clause | init= module_body_init_declaration | fin= module_body_final_declaration | dec1= type_representation_declaration | dec3= operation_recursive_procedure_declaration | dec2= operation_procedure_declaration | dec4= aux_operation_declaration | dec5= procedure_declaration | dec6= recursive_procedure_declaration | dec7= definition_declaration | dec8= facility_declaration )+";
        }
    }
    static final String DFA42_eotS =
        "\12\uffff";
    static final String DFA42_eofS =
        "\12\uffff";
    static final String DFA42_minS =
        "\1\3\11\uffff";
    static final String DFA42_maxS =
        "\1\u00f9\11\uffff";
    static final String DFA42_acceptS =
        "\1\uffff\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11";
    static final String DFA42_specialS =
        "\12\uffff}>";
    static final String[] DFA42_transitionS = {
            "\1\11\46\uffff\1\7\23\uffff\1\10\1\3\1\2\47\uffff\1\6\52\uffff"+
            "\1\4\7\uffff\1\1\121\uffff\1\7\1\uffff\1\7\11\uffff\1\5",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA42_eot = DFA.unpackEncodedString(DFA42_eotS);
    static final short[] DFA42_eof = DFA.unpackEncodedString(DFA42_eofS);
    static final char[] DFA42_min = DFA.unpackEncodedStringToUnsignedChars(DFA42_minS);
    static final char[] DFA42_max = DFA.unpackEncodedStringToUnsignedChars(DFA42_maxS);
    static final short[] DFA42_accept = DFA.unpackEncodedString(DFA42_acceptS);
    static final short[] DFA42_special = DFA.unpackEncodedString(DFA42_specialS);
    static final short[][] DFA42_transition;

    static {
        int numStates = DFA42_transitionS.length;
        DFA42_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA42_transition[i] = DFA.unpackEncodedString(DFA42_transitionS[i]);
        }
    }

    class DFA42 extends DFA {

        public DFA42(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 42;
            this.eot = DFA42_eot;
            this.eof = DFA42_eof;
            this.min = DFA42_min;
            this.max = DFA42_max;
            this.accept = DFA42_accept;
            this.special = DFA42_special;
            this.transition = DFA42_transition;
        }
        public String getDescription() {
            return "()+ loopback of 794:9: (decs2= state_variable_declaration | init= module_facility_init_declaration | fin= module_facility_final_declaration | dec1= facility_type_declaration | dec2= operation_recursive_procedure_declaration | dec3= operation_procedure_declaration | dec4= definition_declaration | dec5= facility_declaration )+";
        }
    }
    static final String DFA76_eotS =
        "\44\uffff";
    static final String DFA76_eofS =
        "\44\uffff";
    static final String DFA76_minS =
        "\1\12\43\uffff";
    static final String DFA76_maxS =
        "\1\u0117\43\uffff";
    static final String DFA76_acceptS =
        "\1\uffff\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1"+
        "\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
        "\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43";
    static final String DFA76_specialS =
        "\44\uffff}>";
    static final String[] DFA76_transitionS = {
            "\1\21\22\uffff\1\26\16\uffff\1\16\33\uffff\1\20\1\uffff\1\17"+
            "\4\uffff\1\33\2\uffff\1\27\1\30\1\40\1\37\1\43\1\36\1\35\1\42"+
            "\10\uffff\1\14\3\uffff\1\41\2\uffff\1\22\24\uffff\1\15\26\uffff"+
            "\1\32\12\uffff\1\34\31\uffff\1\7\1\10\1\uffff\1\11\1\12\1\13"+
            "\1\31\1\2\1\6\1\5\1\1\1\3\1\4\116\uffff\1\23\1\24\1\25",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA76_eot = DFA.unpackEncodedString(DFA76_eotS);
    static final short[] DFA76_eof = DFA.unpackEncodedString(DFA76_eofS);
    static final char[] DFA76_min = DFA.unpackEncodedStringToUnsignedChars(DFA76_minS);
    static final char[] DFA76_max = DFA.unpackEncodedStringToUnsignedChars(DFA76_maxS);
    static final short[] DFA76_accept = DFA.unpackEncodedString(DFA76_acceptS);
    static final short[] DFA76_special = DFA.unpackEncodedString(DFA76_specialS);
    static final short[][] DFA76_transition;

    static {
        int numStates = DFA76_transitionS.length;
        DFA76_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA76_transition[i] = DFA.unpackEncodedString(DFA76_transitionS[i]);
        }
    }

    class DFA76 extends DFA {

        public DFA76(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 76;
            this.eot = DFA76_eot;
            this.eof = DFA76_eof;
            this.min = DFA76_min;
            this.max = DFA76_max;
            this.accept = DFA76_accept;
            this.special = DFA76_special;
            this.transition = DFA76_transition;
        }
        public String getDescription() {
            return "1282:9: (sym= EQL | sym= NOT_EQL | sym= LT | sym= GT | sym= LT_EQL | sym= GT_EQL | sym= PLUS | sym= MINUS | sym= MULTIPLY | sym= DIVIDE | sym= EXP | sym= MOD | sym= REM | sym= DIV | sym= IMPLIES | sym= IFF | sym= AND | sym= OR | sym= XOR | sym= ANDTHEN | sym= ORELSE | sym= COMPLEMENT | sym= IN | sym= NOT_IN | sym= RANGE | sym= UNION | sym= INTERSECT | sym= WITHOUT | sym= SUBSET | sym= PROP_SUBSET | sym= NOT_SUBSET | sym= NOT_PROP_SUBSET | sym= CAT | sym= SUBSTR | sym= NOT_SUBSTR )";
        }
    }
    static final String DFA158_eotS =
        "\15\uffff";
    static final String DFA158_eofS =
        "\15\uffff";
    static final String DFA158_minS =
        "\1\14\14\uffff";
    static final String DFA158_maxS =
        "\1\u00eb\14\uffff";
    static final String DFA158_acceptS =
        "\1\uffff\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14";
    static final String DFA158_specialS =
        "\15\uffff}>";
    static final String[] DFA158_transitionS = {
            "\1\13\1\14\11\uffff\1\7\10\uffff\1\12\44\uffff\1\2\1\uffff\1"+
            "\3\22\uffff\1\4\44\uffff\1\6\37\uffff\1\11\54\uffff\1\10\1\1"+
            "\35\uffff\1\5",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA158_eot = DFA.unpackEncodedString(DFA158_eotS);
    static final short[] DFA158_eof = DFA.unpackEncodedString(DFA158_eofS);
    static final char[] DFA158_min = DFA.unpackEncodedStringToUnsignedChars(DFA158_minS);
    static final char[] DFA158_max = DFA.unpackEncodedStringToUnsignedChars(DFA158_maxS);
    static final short[] DFA158_accept = DFA.unpackEncodedString(DFA158_acceptS);
    static final short[] DFA158_special = DFA.unpackEncodedString(DFA158_specialS);
    static final short[][] DFA158_transition;

    static {
        int numStates = DFA158_transitionS.length;
        DFA158_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA158_transition[i] = DFA.unpackEncodedString(DFA158_transitionS[i]);
        }
    }

    class DFA158 extends DFA {

        public DFA158(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 158;
            this.eot = DFA158_eot;
            this.eof = DFA158_eof;
            this.min = DFA158_min;
            this.max = DFA158_max;
            this.accept = DFA158_accept;
            this.special = DFA158_special;
            this.transition = DFA158_transition;
        }
        public String getDescription() {
            return "1741:13: (stmt1= function_assignment | stmt2= forget_statement | stmt3= if_statement | stmt4= iterate_loop_statement | stmt5= procedure_operation_call | stmt6= remember_statement | stmt7= selection_statement | stmt8= swap_statement | stmt9= while_loop_statement | stmt10= confirm_statement | stmt11= assume_statement | stmt12= aux_code_statement )";
        }
    }
    static final String DFA159_eotS =
        "\14\uffff";
    static final String DFA159_eofS =
        "\14\uffff";
    static final String DFA159_minS =
        "\1\14\13\uffff";
    static final String DFA159_maxS =
        "\1\u00cd\13\uffff";
    static final String DFA159_acceptS =
        "\1\uffff\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13";
    static final String DFA159_specialS =
        "\14\uffff}>";
    static final String[] DFA159_transitionS = {
            "\1\12\1\13\11\uffff\1\6\10\uffff\1\11\44\uffff\1\2\1\uffff\1"+
            "\3\22\uffff\1\4\44\uffff\1\5\37\uffff\1\10\54\uffff\1\7\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA159_eot = DFA.unpackEncodedString(DFA159_eotS);
    static final short[] DFA159_eof = DFA.unpackEncodedString(DFA159_eofS);
    static final char[] DFA159_min = DFA.unpackEncodedStringToUnsignedChars(DFA159_minS);
    static final char[] DFA159_max = DFA.unpackEncodedStringToUnsignedChars(DFA159_maxS);
    static final short[] DFA159_accept = DFA.unpackEncodedString(DFA159_acceptS);
    static final short[] DFA159_special = DFA.unpackEncodedString(DFA159_specialS);
    static final short[][] DFA159_transition;

    static {
        int numStates = DFA159_transitionS.length;
        DFA159_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA159_transition[i] = DFA.unpackEncodedString(DFA159_transitionS[i]);
        }
    }

    class DFA159 extends DFA {

        public DFA159(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 159;
            this.eot = DFA159_eot;
            this.eof = DFA159_eof;
            this.min = DFA159_min;
            this.max = DFA159_max;
            this.accept = DFA159_accept;
            this.special = DFA159_special;
            this.transition = DFA159_transition;
        }
        public String getDescription() {
            return "1759:13: (stmt1= function_assignment | stmt2= forget_statement | stmt3= if_statement | stmt4= iterate_loop_statement | stmt6= remember_statement | stmt7= selection_statement | stmt8= swap_statement | stmt9= while_loop_statement | stmt10= confirm_statement | stmt11= assume_statement | stmt12= aux_code_statement )";
        }
    }
    static final String DFA182_eotS =
        "\77\uffff";
    static final String DFA182_eofS =
        "\77\uffff";
    static final String DFA182_minS =
        "\1\12\76\uffff";
    static final String DFA182_maxS =
        "\1\u0114\76\uffff";
    static final String DFA182_acceptS =
        "\1\uffff\1\1\1\2\74\uffff";
    static final String DFA182_specialS =
        "\77\uffff}>";
    static final String[] DFA182_transitionS = {
            "\1\2\7\uffff\1\2\2\uffff\1\2\7\uffff\1\2\16\uffff\1\2\17\uffff"+
            "\1\2\12\uffff\2\2\1\uffff\1\2\4\uffff\1\2\2\uffff\10\2\1\uffff"+
            "\1\2\6\uffff\1\2\2\uffff\2\2\2\uffff\1\2\24\uffff\1\2\26\uffff"+
            "\1\2\12\uffff\1\2\3\uffff\1\2\5\uffff\1\2\1\uffff\1\2\1\uffff"+
            "\1\2\3\uffff\1\2\1\uffff\1\2\3\uffff\1\2\1\uffff\2\2\1\uffff"+
            "\12\2\2\uffff\1\2\4\uffff\2\2\2\uffff\1\2\1\uffff\1\2\4\uffff"+
            "\1\2\2\uffff\1\2\6\uffff\1\2\4\uffff\1\2\1\uffff\2\2\5\uffff"+
            "\1\1\3\uffff\1\2\13\uffff\1\2\2\uffff\1\2\16\uffff\2\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA182_eot = DFA.unpackEncodedString(DFA182_eotS);
    static final short[] DFA182_eof = DFA.unpackEncodedString(DFA182_eofS);
    static final char[] DFA182_min = DFA.unpackEncodedStringToUnsignedChars(DFA182_minS);
    static final char[] DFA182_max = DFA.unpackEncodedStringToUnsignedChars(DFA182_maxS);
    static final short[] DFA182_accept = DFA.unpackEncodedString(DFA182_acceptS);
    static final short[] DFA182_special = DFA.unpackEncodedString(DFA182_specialS);
    static final short[][] DFA182_transition;

    static {
        int numStates = DFA182_transitionS.length;
        DFA182_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA182_transition[i] = DFA.unpackEncodedString(DFA182_transitionS[i]);
        }
    }

    class DFA182 extends DFA {

        public DFA182(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 182;
            this.eot = DFA182_eot;
            this.eof = DFA182_eof;
            this.min = DFA182_min;
            this.max = DFA182_max;
            this.accept = DFA182_accept;
            this.special = DFA182_special;
            this.transition = DFA182_transition;
        }
        public String getDescription() {
            return "2159:13: (exp1= iterated_construct | exp2= quantified_expression )";
        }
    }
    static final String DFA194_eotS =
        "\13\uffff";
    static final String DFA194_eofS =
        "\13\uffff";
    static final String DFA194_minS =
        "\1\124\12\uffff";
    static final String DFA194_maxS =
        "\1\u00c6\12\uffff";
    static final String DFA194_acceptS =
        "\1\uffff\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12";
    static final String DFA194_specialS =
        "\13\uffff}>";
    static final String[] DFA194_transitionS = {
            "\1\10\1\6\1\12\1\7\1\5\1\11\150\uffff\1\4\1\2\1\uffff\1\1\1"+
            "\3",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA194_eot = DFA.unpackEncodedString(DFA194_eotS);
    static final short[] DFA194_eof = DFA.unpackEncodedString(DFA194_eofS);
    static final char[] DFA194_min = DFA.unpackEncodedStringToUnsignedChars(DFA194_minS);
    static final char[] DFA194_max = DFA.unpackEncodedStringToUnsignedChars(DFA194_maxS);
    static final short[] DFA194_accept = DFA.unpackEncodedString(DFA194_acceptS);
    static final short[] DFA194_special = DFA.unpackEncodedString(DFA194_specialS);
    static final short[][] DFA194_transition;

    static {
        int numStates = DFA194_transitionS.length;
        DFA194_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA194_transition[i] = DFA.unpackEncodedString(DFA194_transitionS[i]);
        }
    }

    class DFA194 extends DFA {

        public DFA194(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 194;
            this.eot = DFA194_eot;
            this.eof = DFA194_eof;
            this.min = DFA194_min;
            this.max = DFA194_max;
            this.accept = DFA194_accept;
            this.special = DFA194_special;
            this.transition = DFA194_transition;
        }
        public String getDescription() {
            return "2227:9: ( ^(id= LT lf= infix_expression rt= infix_expression ) | ^(id= LT_EQL lf= infix_expression rt= infix_expression ) | ^(id= GT lf= infix_expression rt= infix_expression ) | ^(id= GT_EQL lf= infix_expression rt= infix_expression ) | ^(id= SUBSET lf= infix_expression rt= infix_expression ) | ^(id= NOT_SUBSET lf= infix_expression rt= infix_expression ) | ^(id= PROP_SUBSET lf= infix_expression rt= infix_expression ) | ^(id= NOT_PROP_SUBSET lf= infix_expression rt= infix_expression ) | ^(id= SUBSTR lf= infix_expression rt= infix_expression ) | ^(id= NOT_SUBSTR lf= infix_expression rt= infix_expression ) )";
        }
    }
    static final String DFA210_eotS =
        "\13\uffff";
    static final String DFA210_eofS =
        "\13\uffff";
    static final String DFA210_minS =
        "\1\25\12\uffff";
    static final String DFA210_maxS =
        "\1\u0113\12\uffff";
    static final String DFA210_acceptS =
        "\1\uffff\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12";
    static final String DFA210_specialS =
        "\13\uffff}>";
    static final String[] DFA210_transitionS = {
            "\1\12\105\uffff\1\3\110\uffff\1\2\5\uffff\1\2\1\uffff\1\4\1"+
            "\uffff\1\4\3\uffff\1\6\1\uffff\1\1\3\uffff\1\2\25\uffff\2\5"+
            "\2\uffff\1\4\6\uffff\1\5\11\uffff\1\5\7\uffff\1\2\5\uffff\1"+
            "\11\3\uffff\1\10\13\uffff\1\7\21\uffff\1\4",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA210_eot = DFA.unpackEncodedString(DFA210_eotS);
    static final short[] DFA210_eof = DFA.unpackEncodedString(DFA210_eofS);
    static final char[] DFA210_min = DFA.unpackEncodedStringToUnsignedChars(DFA210_minS);
    static final char[] DFA210_max = DFA.unpackEncodedStringToUnsignedChars(DFA210_maxS);
    static final short[] DFA210_accept = DFA.unpackEncodedString(DFA210_acceptS);
    static final short[] DFA210_special = DFA.unpackEncodedString(DFA210_specialS);
    static final short[][] DFA210_transition;

    static {
        int numStates = DFA210_transitionS.length;
        DFA210_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA210_transition[i] = DFA.unpackEncodedString(DFA210_transitionS[i]);
        }
    }

    class DFA210 extends DFA {

        public DFA210(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 210;
            this.eot = DFA210_eot;
            this.eof = DFA210_eof;
            this.min = DFA210_min;
            this.max = DFA210_max;
            this.accept = DFA210_accept;
            this.special = DFA210_special;
            this.transition = DFA210_transition;
        }
        public String getDescription() {
            return "2356:1: primitive_expression returns [Exp exp = null] : (exp1= alternative_expression | exp2= dot_expression | exp3= lambda_expression | exp4= literal_expression | exp5= outfix_expression | exp6= set_constructor | exp7= tuple_expression | exp8= nested_expression | exp9= iterated_construct | exp10= tagged_cartesian_product_type_expression );";
        }
    }
    static final String DFA218_eotS =
        "\43\uffff";
    static final String DFA218_eofS =
        "\43\uffff";
    static final String DFA218_minS =
        "\1\25\42\uffff";
    static final String DFA218_maxS =
        "\1\u0113\42\uffff";
    static final String DFA218_acceptS =
        "\1\uffff\1\1\1\2\40\uffff";
    static final String DFA218_specialS =
        "\43\uffff}>";
    static final String[] DFA218_transitionS = {
            "\1\2\7\uffff\1\2\16\uffff\1\2\42\uffff\1\2\13\uffff\1\2\6\uffff"+
            "\1\2\2\uffff\2\2\27\uffff\1\2\26\uffff\1\2\12\uffff\1\2\3\uffff"+
            "\1\1\5\uffff\1\2\1\uffff\1\2\1\uffff\1\2\3\uffff\1\2\1\uffff"+
            "\1\2\3\uffff\1\2\1\uffff\2\2\1\uffff\3\2\16\uffff\2\2\2\uffff"+
            "\1\2\6\uffff\1\2\11\uffff\1\2\7\uffff\1\2\5\uffff\1\2\3\uffff"+
            "\1\2\13\uffff\1\2\2\uffff\1\2\16\uffff\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA218_eot = DFA.unpackEncodedString(DFA218_eotS);
    static final short[] DFA218_eof = DFA.unpackEncodedString(DFA218_eofS);
    static final char[] DFA218_min = DFA.unpackEncodedStringToUnsignedChars(DFA218_minS);
    static final char[] DFA218_max = DFA.unpackEncodedStringToUnsignedChars(DFA218_maxS);
    static final short[] DFA218_accept = DFA.unpackEncodedString(DFA218_acceptS);
    static final short[] DFA218_special = DFA.unpackEncodedString(DFA218_specialS);
    static final short[][] DFA218_transition;

    static {
        int numStates = DFA218_transitionS.length;
        DFA218_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA218_transition[i] = DFA.unpackEncodedString(DFA218_transitionS[i]);
        }
    }

    class DFA218 extends DFA {

        public DFA218(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 218;
            this.eot = DFA218_eot;
            this.eof = DFA218_eof;
            this.min = DFA218_min;
            this.max = DFA218_max;
            this.accept = DFA218_accept;
            this.special = DFA218_special;
            this.transition = DFA218_transition;
        }
        public String getDescription() {
            return "2421:17: (exp1= qualified_ident | exp2= adding_expression )";
        }
    }
    static final String DFA255_eotS =
        "\13\uffff";
    static final String DFA255_eofS =
        "\13\uffff";
    static final String DFA255_minS =
        "\1\23\1\0\11\uffff";
    static final String DFA255_maxS =
        "\1\u0121\1\0\11\uffff";
    static final String DFA255_acceptS =
        "\2\uffff\1\2\1\4\1\6\3\uffff\1\1\1\3\1\5";
    static final String DFA255_specialS =
        "\1\0\1\1\11\uffff}>";
    static final String[] DFA255_transitionS = {
            "\1\2\26\uffff\1\4\41\uffff\1\3\127\uffff\1\1\146\uffff\2\4\24"+
            "\uffff\1\4",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA255_eot = DFA.unpackEncodedString(DFA255_eotS);
    static final short[] DFA255_eof = DFA.unpackEncodedString(DFA255_eofS);
    static final char[] DFA255_min = DFA.unpackEncodedStringToUnsignedChars(DFA255_minS);
    static final char[] DFA255_max = DFA.unpackEncodedStringToUnsignedChars(DFA255_maxS);
    static final short[] DFA255_accept = DFA.unpackEncodedString(DFA255_acceptS);
    static final short[] DFA255_special = DFA.unpackEncodedString(DFA255_specialS);
    static final short[][] DFA255_transition;

    static {
        int numStates = DFA255_transitionS.length;
        DFA255_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA255_transition[i] = DFA.unpackEncodedString(DFA255_transitionS[i]);
        }
    }

    class DFA255 extends DFA {

        public DFA255(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 255;
            this.eot = DFA255_eot;
            this.eof = DFA255_eof;
            this.min = DFA255_min;
            this.max = DFA255_max;
            this.accept = DFA255_accept;
            this.special = DFA255_special;
            this.transition = DFA255_transition;
        }
        public String getDescription() {
            return "2883:9: ( ( ^( IDENTIFIER BASECASE ) )=>tempExp1= base_case_statement_head | ( BASECASE )=>tempExp2= base_case_statement_body | ( ^( IDENTIFIER INDUCTIVECASE ) )=>tempExp3= inductive_case_statement_head | ( INDUCTIVECASE )=>tempExp4= inductive_case_statement_body | ( IDENTIFIER )=>tempExp5= headed_proof_expression | tempExp6= proof_expression )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TreeNodeStream input = (TreeNodeStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA255_0 = input.LA(1);

                         
                        int index255_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA255_0==IDENTIFIER) ) {s = 1;}

                        else if ( (LA255_0==BASECASE) && (synpred2_RBuilder())) {s = 2;}

                        else if ( (LA255_0==INDUCTIVECASE) && (synpred4_RBuilder())) {s = 3;}

                        else if ( (LA255_0==DEFINITION||(LA255_0>=SUPDEDUC && LA255_0<=SIMPLIFICATION)||LA255_0==GOAL) ) {s = 4;}

                         
                        input.seek(index255_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA255_1 = input.LA(1);

                         
                        int index255_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred1_RBuilder()) ) {s = 8;}

                        else if ( (synpred3_RBuilder()) ) {s = 9;}

                        else if ( (synpred5_RBuilder()) ) {s = 10;}

                         
                        input.seek(index255_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 255, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA265_eotS =
        "\13\uffff";
    static final String DFA265_eofS =
        "\13\uffff";
    static final String DFA265_minS =
        "\1\52\1\0\11\uffff";
    static final String DFA265_maxS =
        "\1\u0110\1\0\11\uffff";
    static final String DFA265_acceptS =
        "\2\uffff\1\6\1\uffff\1\7\1\10\1\1\1\2\1\3\1\4\1\5";
    static final String DFA265_specialS =
        "\1\0\1\1\11\uffff}>";
    static final String[] DFA265_transitionS = {
            "\1\4\u00c3\uffff\1\5\37\uffff\2\2\1\1",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA265_eot = DFA.unpackEncodedString(DFA265_eotS);
    static final short[] DFA265_eof = DFA.unpackEncodedString(DFA265_eofS);
    static final char[] DFA265_min = DFA.unpackEncodedStringToUnsignedChars(DFA265_minS);
    static final char[] DFA265_max = DFA.unpackEncodedStringToUnsignedChars(DFA265_maxS);
    static final short[] DFA265_accept = DFA.unpackEncodedString(DFA265_acceptS);
    static final short[] DFA265_special = DFA.unpackEncodedString(DFA265_specialS);
    static final short[][] DFA265_transition;

    static {
        int numStates = DFA265_transitionS.length;
        DFA265_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA265_transition[i] = DFA.unpackEncodedString(DFA265_transitionS[i]);
        }
    }

    class DFA265 extends DFA {

        public DFA265(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 265;
            this.eot = DFA265_eot;
            this.eof = DFA265_eof;
            this.min = DFA265_min;
            this.max = DFA265_max;
            this.accept = DFA265_accept;
            this.special = DFA265_special;
            this.transition = DFA265_transition;
        }
        public String getDescription() {
            return "3066:3: ( ( hyp_desig hyp_desig )=>je1= double_hyp_rule_justification | ( hyp_desig rules_set_1 )=>je2= single_hyp_rule_justification | ( hyp_desig rules_set_2 )=>je2= single_hyp_rule_justification | ( hyp_desig DEFINITION )=>je2= single_hyp_rule_justification | ( hyp_desig )=>he= hyp_desig | je3= simple_justification | ( DEFINITION )=>je4= def_justification | ( INDEXED_DEFINITION )=>je5= indexed_def_justification )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TreeNodeStream input = (TreeNodeStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA265_0 = input.LA(1);

                         
                        int index265_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA265_0==HYPDESIG) ) {s = 1;}

                        else if ( ((LA265_0>=RULE2 && LA265_0<=RULE3)) ) {s = 2;}

                        else if ( (LA265_0==DEFINITION) && (synpred12_RBuilder())) {s = 4;}

                        else if ( (LA265_0==INDEXED_DEFINITION) && (synpred13_RBuilder())) {s = 5;}

                         
                        input.seek(index265_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA265_1 = input.LA(1);

                         
                        int index265_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_RBuilder()) ) {s = 6;}

                        else if ( (synpred8_RBuilder()) ) {s = 7;}

                        else if ( (synpred9_RBuilder()) ) {s = 8;}

                        else if ( (synpred10_RBuilder()) ) {s = 9;}

                        else if ( (synpred11_RBuilder()) ) {s = 10;}

                         
                        input.seek(index265_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 265, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA268_eotS =
        "\47\uffff";
    static final String DFA268_eofS =
        "\47\uffff";
    static final String DFA268_minS =
        "\1\4\46\uffff";
    static final String DFA268_maxS =
        "\1\u0117\46\uffff";
    static final String DFA268_acceptS =
        "\1\uffff\1\1\1\2\44\uffff";
    static final String DFA268_specialS =
        "\1\0\46\uffff}>";
    static final String[] DFA268_transitionS = {
            "\1\2\5\uffff\1\2\22\uffff\1\2\16\uffff\1\2\33\uffff\1\2\1\uffff"+
            "\1\2\4\uffff\1\2\2\uffff\10\2\10\uffff\1\2\2\uffff\2\2\2\uffff"+
            "\1\2\24\uffff\1\2\26\uffff\1\2\1\1\11\uffff\1\2\31\uffff\2\2"+
            "\1\uffff\12\2\116\uffff\3\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA268_eot = DFA.unpackEncodedString(DFA268_eotS);
    static final short[] DFA268_eof = DFA.unpackEncodedString(DFA268_eofS);
    static final char[] DFA268_min = DFA.unpackEncodedStringToUnsignedChars(DFA268_minS);
    static final char[] DFA268_max = DFA.unpackEncodedStringToUnsignedChars(DFA268_maxS);
    static final short[] DFA268_accept = DFA.unpackEncodedString(DFA268_acceptS);
    static final short[] DFA268_special = DFA.unpackEncodedString(DFA268_specialS);
    static final short[][] DFA268_transition;

    static {
        int numStates = DFA268_transitionS.length;
        DFA268_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA268_transition[i] = DFA.unpackEncodedString(DFA268_transitionS[i]);
        }
    }

    class DFA268 extends DFA {

        public DFA268(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 268;
            this.eot = DFA268_eot;
            this.eof = DFA268_eof;
            this.min = DFA268_min;
            this.max = DFA268_max;
            this.accept = DFA268_accept;
            this.special = DFA268_special;
            this.transition = DFA268_transition;
        }
        public String getDescription() {
            return "3096:3: ( ( UNIQUE )=> (id= UNIQUE ) | (rule1= fn_name ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TreeNodeStream input = (TreeNodeStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA268_0 = input.LA(1);

                         
                        int index268_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA268_0==UNIQUE) && (synpred16_RBuilder())) {s = 1;}

                        else if ( (LA268_0==ABS||LA268_0==AND||LA268_0==COMPLEMENT||LA268_0==DIV||LA268_0==IFF||LA268_0==IMPLIES||LA268_0==INTERSECT||(LA268_0>=IN && LA268_0<=SUBSTR)||LA268_0==MOD||(LA268_0>=NOT && LA268_0<=CAT)||LA268_0==OR||LA268_0==REM||LA268_0==UNION||LA268_0==WITHOUT||(LA268_0>=PLUS && LA268_0<=MINUS)||(LA268_0>=MULTIPLY && LA268_0<=GT)||(LA268_0>=XOR && LA268_0<=ORELSE)) ) {s = 2;}

                         
                        input.seek(index268_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 268, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA277_eotS =
        "\46\uffff";
    static final String DFA277_eofS =
        "\46\uffff";
    static final String DFA277_minS =
        "\1\4\45\uffff";
    static final String DFA277_maxS =
        "\1\u0117\45\uffff";
    static final String DFA277_acceptS =
        "\1\uffff\1\1\5\uffff\2\1\15\uffff\1\1\15\uffff\1\2\1\uffff";
    static final String DFA277_specialS =
        "\46\uffff}>";
    static final String[] DFA277_transitionS = {
            "\1\44\5\uffff\1\10\22\uffff\1\26\16\uffff\1\10\33\uffff\1\10"+
            "\1\uffff\1\10\4\uffff\1\26\2\uffff\10\26\10\uffff\1\10\2\uffff"+
            "\1\44\1\26\2\uffff\1\10\24\uffff\1\10\26\uffff\1\26\12\uffff"+
            "\1\26\31\uffff\1\7\1\10\1\uffff\3\10\1\26\6\1\116\uffff\3\10",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA277_eot = DFA.unpackEncodedString(DFA277_eotS);
    static final short[] DFA277_eof = DFA.unpackEncodedString(DFA277_eofS);
    static final char[] DFA277_min = DFA.unpackEncodedStringToUnsignedChars(DFA277_minS);
    static final char[] DFA277_max = DFA.unpackEncodedStringToUnsignedChars(DFA277_maxS);
    static final short[] DFA277_accept = DFA.unpackEncodedString(DFA277_acceptS);
    static final short[] DFA277_special = DFA.unpackEncodedString(DFA277_specialS);
    static final short[][] DFA277_transition;

    static {
        int numStates = DFA277_transitionS.length;
        DFA277_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA277_transition[i] = DFA.unpackEncodedString(DFA277_transitionS[i]);
        }
    }

    class DFA277 extends DFA {

        public DFA277(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 277;
            this.eot = DFA277_eot;
            this.eof = DFA277_eof;
            this.min = DFA277_min;
            this.max = DFA277_max;
            this.accept = DFA277_accept;
            this.special = DFA277_special;
            this.transition = DFA277_transition;
        }
        public String getDescription() {
            return "3215:1: fn_name returns [PosSymbol name = null] : (id1= infix_symbol | id2= prefix_symbol );";
        }
    }
 

    public static final BitSet FOLLOW_proof_module_in_module137 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_theory_module_in_module174 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_conceptual_module_in_module211 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_realization_body_module_in_module251 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_enhancement_module_in_module284 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_facility_module_in_module320 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_performance_module_in_module356 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_THEORY_in_theory_module415 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_ident_in_theory_module419 = new BitSet(new long[]{0x0000042010020008L,0x0008000010000000L,0x0000000004088000L,0x0080A00020000000L});
    public static final BitSet FOLLOW_module_formal_param_section_in_theory_module436 = new BitSet(new long[]{0x0000042010020008L,0x0008000010000000L,0x0000000004088000L,0x0000A00020000000L});
    public static final BitSet FOLLOW_uses_list_in_theory_module455 = new BitSet(new long[]{0x0000042010020008L,0x0008000010000000L,0x0000000000088000L,0x0000A00020000000L});
    public static final BitSet FOLLOW_math_item_sequence_in_theory_module474 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_definition_declaration_in_math_item_sequence539 = new BitSet(new long[]{0x0000042010020002L,0x0008000010000000L,0x0000000000088000L,0x0000A00020000000L});
    public static final BitSet FOLLOW_categorical_definition_declaration_in_math_item_sequence557 = new BitSet(new long[]{0x0000042010020002L,0x0008000010000000L,0x0000000000088000L,0x0000A00020000000L});
    public static final BitSet FOLLOW_math_assertion_declaration_in_math_item_sequence575 = new BitSet(new long[]{0x0000042010020002L,0x0008000010000000L,0x0000000000088000L,0x0000A00020000000L});
    public static final BitSet FOLLOW_type_theorem_declaration_in_math_item_sequence593 = new BitSet(new long[]{0x0000042010020002L,0x0008000010000000L,0x0000000000088000L,0x0000A00020000000L});
    public static final BitSet FOLLOW_MODULE_CONCEPT_in_conceptual_module650 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_ident_in_conceptual_module654 = new BitSet(new long[]{0x8000060400000008L,0x0000010000000001L,0x000000000C100008L,0x0080A00100000000L});
    public static final BitSet FOLLOW_module_formal_param_section_in_conceptual_module671 = new BitSet(new long[]{0x8000060400000008L,0x0000010000000001L,0x000000000C100008L,0x0000A00100000000L});
    public static final BitSet FOLLOW_uses_list_in_conceptual_module690 = new BitSet(new long[]{0x8000060400000008L,0x0000010000000001L,0x0000000008100008L,0x0000A00100000000L});
    public static final BitSet FOLLOW_requires_clause_in_conceptual_module709 = new BitSet(new long[]{0x8000060400000008L,0x0000010000000001L,0x0000000008100000L,0x0000A00100000000L});
    public static final BitSet FOLLOW_concept_item_sequence_in_conceptual_module728 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_confirm_math_type_declaration_in_concept_item_sequence793 = new BitSet(new long[]{0x8000060400000002L,0x0000010000000001L,0x0000000008100000L,0x0000A00100000000L});
    public static final BitSet FOLLOW_concept_state_variable_declaration_in_concept_item_sequence811 = new BitSet(new long[]{0x8000060400000002L,0x0000010000000001L,0x0000000008100000L,0x0000A00100000000L});
    public static final BitSet FOLLOW_constraint_clause_in_concept_item_sequence829 = new BitSet(new long[]{0x8000060400000002L,0x0000010000000001L,0x0000000008100000L,0x0000A00100000000L});
    public static final BitSet FOLLOW_module_concept_init_declaration_in_concept_item_sequence847 = new BitSet(new long[]{0x8000060400000002L,0x0000010000000001L,0x0000000008100000L,0x0000A00100000000L});
    public static final BitSet FOLLOW_module_concept_final_declaration_in_concept_item_sequence863 = new BitSet(new long[]{0x8000060400000002L,0x0000010000000001L,0x0000000008100000L,0x0000A00100000000L});
    public static final BitSet FOLLOW_type_declaration_in_concept_item_sequence879 = new BitSet(new long[]{0x8000060400000002L,0x0000010000000001L,0x0000000008100000L,0x0000A00100000000L});
    public static final BitSet FOLLOW_operation_declaration_in_concept_item_sequence897 = new BitSet(new long[]{0x8000060400000002L,0x0000010000000001L,0x0000000008100000L,0x0000A00100000000L});
    public static final BitSet FOLLOW_definition_declaration_in_concept_item_sequence915 = new BitSet(new long[]{0x8000060400000002L,0x0000010000000001L,0x0000000008100000L,0x0000A00100000000L});
    public static final BitSet FOLLOW_defines_declaration_in_concept_item_sequence933 = new BitSet(new long[]{0x8000060400000002L,0x0000010000000001L,0x0000000008100000L,0x0000A00100000000L});
    public static final BitSet FOLLOW_MODULE_PROFILE_in_performance_module990 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_ident_in_performance_module994 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_module_formal_param_section_in_performance_module1011 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_ident_in_performance_module1030 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_ident_in_performance_module1047 = new BitSet(new long[]{0x8000060400000008L,0x0000190000000001L,0x000000100C100008L,0x0080A00100000000L});
    public static final BitSet FOLLOW_ident_in_performance_module1065 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_ident_in_performance_module1069 = new BitSet(new long[]{0x8000060400000008L,0x0000190000000001L,0x000000000C100008L,0x0000A00100000000L});
    public static final BitSet FOLLOW_uses_list_in_performance_module1088 = new BitSet(new long[]{0x8000060400000008L,0x0000190000000001L,0x0000000008100008L,0x0000A00100000000L});
    public static final BitSet FOLLOW_requires_clause_in_performance_module1107 = new BitSet(new long[]{0x8000060400000008L,0x0000190000000001L,0x0000000008100000L,0x0000A00100000000L});
    public static final BitSet FOLLOW_performance_item_sequence_in_performance_module1126 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_confirm_math_type_declaration_in_performance_item_sequence1189 = new BitSet(new long[]{0x8000060400000002L,0x0000190000000001L,0x0000000008100000L,0x0000A00100000000L});
    public static final BitSet FOLLOW_concept_state_variable_declaration_in_performance_item_sequence1207 = new BitSet(new long[]{0x8000060400000002L,0x0000190000000001L,0x0000000008100000L,0x0000A00100000000L});
    public static final BitSet FOLLOW_constraint_clause_in_performance_item_sequence1225 = new BitSet(new long[]{0x8000060400000002L,0x0000190000000001L,0x0000000008100000L,0x0000A00100000000L});
    public static final BitSet FOLLOW_performance_module_init_declaration_in_performance_item_sequence1243 = new BitSet(new long[]{0x8000060400000002L,0x0000190000000001L,0x0000000008100000L,0x0000A00100000000L});
    public static final BitSet FOLLOW_performance_module_final_declaration_in_performance_item_sequence1259 = new BitSet(new long[]{0x8000060400000002L,0x0000190000000001L,0x0000000008100000L,0x0000A00100000000L});
    public static final BitSet FOLLOW_module_concept_init_declaration_in_performance_item_sequence1275 = new BitSet(new long[]{0x8000060400000002L,0x0000190000000001L,0x0000000008100000L,0x0000A00100000000L});
    public static final BitSet FOLLOW_module_concept_final_declaration_in_performance_item_sequence1291 = new BitSet(new long[]{0x8000060400000002L,0x0000190000000001L,0x0000000008100000L,0x0000A00100000000L});
    public static final BitSet FOLLOW_performance_type_declaration_in_performance_item_sequence1307 = new BitSet(new long[]{0x8000060400000002L,0x0000190000000001L,0x0000000008100000L,0x0000A00100000000L});
    public static final BitSet FOLLOW_performance_operation_declaration_in_performance_item_sequence1325 = new BitSet(new long[]{0x8000060400000002L,0x0000190000000001L,0x0000000008100000L,0x0000A00100000000L});
    public static final BitSet FOLLOW_definition_declaration_in_performance_item_sequence1343 = new BitSet(new long[]{0x8000060400000002L,0x0000190000000001L,0x0000000008100000L,0x0000A00100000000L});
    public static final BitSet FOLLOW_defines_declaration_in_performance_item_sequence1361 = new BitSet(new long[]{0x8000060400000002L,0x0000190000000001L,0x0000000008100000L,0x0000A00100000000L});
    public static final BitSet FOLLOW_MODULE_ENHANCEMENT_in_enhancement_module1426 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_ident_in_enhancement_module1430 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_module_formal_param_section_in_enhancement_module1447 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_ident_in_enhancement_module1465 = new BitSet(new long[]{0x8000060400000008L,0x0000010000000001L,0x000000000C100008L,0x0000A00100000000L});
    public static final BitSet FOLLOW_uses_list_in_enhancement_module1482 = new BitSet(new long[]{0x8000060400000008L,0x0000010000000001L,0x0000000008100008L,0x0000A00100000000L});
    public static final BitSet FOLLOW_requires_clause_in_enhancement_module1501 = new BitSet(new long[]{0x8000060400000008L,0x0000010000000001L,0x0000000008100000L,0x0000A00100000000L});
    public static final BitSet FOLLOW_enhancement_item_sequence_in_enhancement_module1520 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_concept_state_variable_declaration_in_enhancement_item_sequence1585 = new BitSet(new long[]{0x8000060400000002L,0x0000010000000001L,0x0000000008100000L,0x0000A00100000000L});
    public static final BitSet FOLLOW_type_declaration_in_enhancement_item_sequence1603 = new BitSet(new long[]{0x8000060400000002L,0x0000010000000001L,0x0000000008100000L,0x0000A00100000000L});
    public static final BitSet FOLLOW_operation_declaration_in_enhancement_item_sequence1621 = new BitSet(new long[]{0x8000060400000002L,0x0000010000000001L,0x0000000008100000L,0x0000A00100000000L});
    public static final BitSet FOLLOW_definition_declaration_in_enhancement_item_sequence1639 = new BitSet(new long[]{0x8000060400000002L,0x0000010000000001L,0x0000000008100000L,0x0000A00100000000L});
    public static final BitSet FOLLOW_defines_declaration_in_enhancement_item_sequence1657 = new BitSet(new long[]{0x8000060400000002L,0x0000010000000001L,0x0000000008100000L,0x0000A00100000000L});
    public static final BitSet FOLLOW_MODULE_REALIZATION_in_realization_body_module1714 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_ident_in_realization_body_module1718 = new BitSet(new long[]{0x0010000040000000L,0x0000000000000000L,0x0000000200000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_WITH_PROFILE_in_realization_body_module1733 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_ident_in_realization_body_module1737 = new BitSet(new long[]{0x0010000040000000L,0x0000000000000000L,0x0000000200000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_module_formal_param_section_in_realization_body_module1744 = new BitSet(new long[]{0x0010000040000000L,0x0000000000000000L,0x0000000200000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_body_concept_section_in_realization_body_module1766 = new BitSet(new long[]{0xC000045000000008L,0x0000810000000001L,0x000000000C080008L,0x0600A00004000000L});
    public static final BitSet FOLLOW_body_enhancement_section_in_realization_body_module1786 = new BitSet(new long[]{0xC000045000000008L,0x0000810000000001L,0x000000000C080008L,0x0600A00004000000L});
    public static final BitSet FOLLOW_uses_list_in_realization_body_module1817 = new BitSet(new long[]{0xC000045000000008L,0x0000810000000001L,0x0000000008080008L,0x0600A00004000000L});
    public static final BitSet FOLLOW_requires_clause_in_realization_body_module1836 = new BitSet(new long[]{0xC000045000000008L,0x0000810000000001L,0x0000000008080000L,0x0600A00004000000L});
    public static final BitSet FOLLOW_body_item_sequence_in_realization_body_module1855 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_CONCEPT_in_body_concept_section1905 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_ident_in_body_concept_section1909 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000001000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_ident_in_body_concept_section1914 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000001000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_ENHANCEMENT_in_body_enhancement_section1968 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_ident_in_body_enhancement_section1972 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_ident_in_body_enhancement_section1976 = new BitSet(new long[]{0x0008000000000008L});
    public static final BitSet FOLLOW_added_enhancement_section_in_body_enhancement_section1993 = new BitSet(new long[]{0x0008000000000008L});
    public static final BitSet FOLLOW_ENHANCED_in_added_enhancement_section2047 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_ident_in_added_enhancement_section2051 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_module_argument_section_in_added_enhancement_section2056 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_REALIZED_in_added_enhancement_section2072 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_ident_in_added_enhancement_section2076 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000200000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_WITH_PROFILE_in_added_enhancement_section2079 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_ident_in_added_enhancement_section2083 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_module_argument_section_in_added_enhancement_section2090 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_state_variable_declaration_in_body_item_sequence2155 = new BitSet(new long[]{0xC000045000000002L,0x0000810000000001L,0x0000000008080000L,0x0600A00004000000L});
    public static final BitSet FOLLOW_convention_clause_in_body_item_sequence2173 = new BitSet(new long[]{0xC000045000000002L,0x0000810000000001L,0x0000000008080000L,0x0600A00004000000L});
    public static final BitSet FOLLOW_correspondence_clause_in_body_item_sequence2191 = new BitSet(new long[]{0xC000045000000002L,0x0000810000000001L,0x0000000008080000L,0x0600A00004000000L});
    public static final BitSet FOLLOW_module_body_init_declaration_in_body_item_sequence2209 = new BitSet(new long[]{0xC000045000000002L,0x0000810000000001L,0x0000000008080000L,0x0600A00004000000L});
    public static final BitSet FOLLOW_module_body_final_declaration_in_body_item_sequence2225 = new BitSet(new long[]{0xC000045000000002L,0x0000810000000001L,0x0000000008080000L,0x0600A00004000000L});
    public static final BitSet FOLLOW_type_representation_declaration_in_body_item_sequence2241 = new BitSet(new long[]{0xC000045000000002L,0x0000810000000001L,0x0000000008080000L,0x0600A00004000000L});
    public static final BitSet FOLLOW_operation_recursive_procedure_declaration_in_body_item_sequence2259 = new BitSet(new long[]{0xC000045000000002L,0x0000810000000001L,0x0000000008080000L,0x0600A00004000000L});
    public static final BitSet FOLLOW_operation_procedure_declaration_in_body_item_sequence2277 = new BitSet(new long[]{0xC000045000000002L,0x0000810000000001L,0x0000000008080000L,0x0600A00004000000L});
    public static final BitSet FOLLOW_aux_operation_declaration_in_body_item_sequence2295 = new BitSet(new long[]{0xC000045000000002L,0x0000810000000001L,0x0000000008080000L,0x0600A00004000000L});
    public static final BitSet FOLLOW_procedure_declaration_in_body_item_sequence2313 = new BitSet(new long[]{0xC000045000000002L,0x0000810000000001L,0x0000000008080000L,0x0600A00004000000L});
    public static final BitSet FOLLOW_recursive_procedure_declaration_in_body_item_sequence2331 = new BitSet(new long[]{0xC000045000000002L,0x0000810000000001L,0x0000000008080000L,0x0600A00004000000L});
    public static final BitSet FOLLOW_definition_declaration_in_body_item_sequence2349 = new BitSet(new long[]{0xC000045000000002L,0x0000810000000001L,0x0000000008080000L,0x0600A00004000000L});
    public static final BitSet FOLLOW_facility_declaration_in_body_item_sequence2367 = new BitSet(new long[]{0xC000045000000002L,0x0000810000000001L,0x0000000008080000L,0x0600A00004000000L});
    public static final BitSet FOLLOW_FACILITY_in_facility_module2424 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_ident_in_facility_module2428 = new BitSet(new long[]{0xC000045000000008L,0x0000810000000001L,0x000000100C080000L,0x0680A00004000000L});
    public static final BitSet FOLLOW_short_facility_section_in_facility_module2448 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_uses_list_in_facility_module2453 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_uses_list_in_facility_module2476 = new BitSet(new long[]{0xC000045000000008L,0x0000810000000001L,0x0000000008080000L,0x0600A00004000000L});
    public static final BitSet FOLLOW_facility_item_sequence_in_facility_module2483 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_ident_in_short_facility_section2549 = new BitSet(new long[]{0x0008000000000000L,0x0000000000000000L,0x0000001000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_module_argument_section_in_short_facility_section2554 = new BitSet(new long[]{0x0008000000000000L,0x0000000000000000L,0x0000001000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_facility_enhancement_in_short_facility_section2569 = new BitSet(new long[]{0x0008000000000000L,0x0000000000000000L,0x0000001000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_ident_in_short_facility_section2585 = new BitSet(new long[]{0x0008000000000002L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_module_argument_section_in_short_facility_section2590 = new BitSet(new long[]{0x0008000000000002L});
    public static final BitSet FOLLOW_facility_body_enhancement_in_short_facility_section2605 = new BitSet(new long[]{0x0008000000000002L});
    public static final BitSet FOLLOW_state_variable_declaration_in_facility_item_sequence2662 = new BitSet(new long[]{0xC000045000000002L,0x0000810000000001L,0x0000000008080000L,0x0600A00004000000L});
    public static final BitSet FOLLOW_module_facility_init_declaration_in_facility_item_sequence2680 = new BitSet(new long[]{0xC000045000000002L,0x0000810000000001L,0x0000000008080000L,0x0600A00004000000L});
    public static final BitSet FOLLOW_module_facility_final_declaration_in_facility_item_sequence2696 = new BitSet(new long[]{0xC000045000000002L,0x0000810000000001L,0x0000000008080000L,0x0600A00004000000L});
    public static final BitSet FOLLOW_facility_type_declaration_in_facility_item_sequence2712 = new BitSet(new long[]{0xC000045000000002L,0x0000810000000001L,0x0000000008080000L,0x0600A00004000000L});
    public static final BitSet FOLLOW_operation_recursive_procedure_declaration_in_facility_item_sequence2730 = new BitSet(new long[]{0xC000045000000002L,0x0000810000000001L,0x0000000008080000L,0x0600A00004000000L});
    public static final BitSet FOLLOW_operation_procedure_declaration_in_facility_item_sequence2748 = new BitSet(new long[]{0xC000045000000002L,0x0000810000000001L,0x0000000008080000L,0x0600A00004000000L});
    public static final BitSet FOLLOW_definition_declaration_in_facility_item_sequence2766 = new BitSet(new long[]{0xC000045000000002L,0x0000810000000001L,0x0000000008080000L,0x0600A00004000000L});
    public static final BitSet FOLLOW_facility_declaration_in_facility_item_sequence2784 = new BitSet(new long[]{0xC000045000000002L,0x0000810000000001L,0x0000000008080000L,0x0600A00004000000L});
    public static final BitSet FOLLOW_PARAMS_in_module_formal_param_section2843 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_module_parameter_in_module_formal_param_section2848 = new BitSet(new long[]{0x0100040000000008L,0x0040010000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_definition_parameter_in_module_parameter2882 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_constant_parameter_in_module_parameter2896 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_concept_type_parameter_in_module_parameter2910 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_operation_parameter_in_module_parameter2924 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_concept_realization_parameter_in_module_parameter2938 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DEFINITION_in_definition_parameter2968 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_definition_signature_in_definition_parameter2972 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_EVALUATES_in_constant_parameter3011 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_variable_declaration_group_in_constant_parameter3015 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_TYPE_in_concept_type_parameter3054 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_ident_in_concept_type_parameter3058 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_operation_declaration_in_operation_parameter3094 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REALIZATION_in_concept_realization_parameter3132 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_ident_in_concept_realization_parameter3136 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_ident_in_concept_realization_parameter3140 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_uses_clause_in_uses_list3185 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_USES_in_uses_clause3217 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_ident_in_uses_clause3222 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000001000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_ident_in_qualified_type3264 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_DOT_in_qualified_type3266 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_ident_in_qualified_type3271 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CONFIRM_TYPE_in_confirm_math_type_declaration3302 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_math_variable_declaration_in_confirm_math_type_declaration3306 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_AXIOM_in_math_assertion_declaration3362 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_math_theorem_ident_in_math_assertion_declaration3367 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_math_expression_in_math_assertion_declaration3373 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_THEOREM_in_math_assertion_declaration3403 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_math_theorem_ident_in_math_assertion_declaration3408 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_math_expression_in_math_assertion_declaration3414 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_PROPERTY_in_math_assertion_declaration3444 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_math_theorem_ident_in_math_assertion_declaration3449 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_math_expression_in_math_assertion_declaration3455 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_LEMMA_in_math_assertion_declaration3485 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_math_theorem_ident_in_math_assertion_declaration3490 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_math_expression_in_math_assertion_declaration3496 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_COROLLARY_in_math_assertion_declaration3526 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_math_theorem_ident_in_math_assertion_declaration3531 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_math_expression_in_math_assertion_declaration3537 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_COMMUTATIVITY_in_math_assertion_declaration3566 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000101000000000L,0x0080020000000000L});
    public static final BitSet FOLLOW_math_theorem_ident_in_math_assertion_declaration3571 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_math_expression_in_math_assertion_declaration3577 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CONSTRAINT_in_constraint_clause3635 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_math_expression_in_constraint_clause3639 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_CORR_in_correspondence_clause3674 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_math_expression_in_correspondence_clause3678 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_CONVENTION_in_convention_clause3713 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_math_expression_in_convention_clause3717 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_TYPE_in_type_theorem_declaration3756 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_math_theorem_ident_in_type_theorem_declaration3761 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_COLON_in_type_theorem_declaration3765 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_FOR_in_type_theorem_declaration3777 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_math_variable_declaration_group_in_type_theorem_declaration3781 = new BitSet(new long[]{0x0000100020240400L,0x400002640BFC8590L,0xED14541100200000L,0x00A208081214C27FL,0x0000000000180012L});
    public static final BitSet FOLLOW_implies_expression_in_type_theorem_declaration3798 = new BitSet(new long[]{0x0000100020240000L,0x4000006408008000L,0xED14541100200000L,0x00A208080214C201L,0x0000000000180012L});
    public static final BitSet FOLLOW_math_type_expression_in_type_theorem_declaration3811 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_VAR_in_concept_state_variable_declaration3860 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_math_variable_declaration_group_in_concept_state_variable_declaration3864 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_VAR_in_state_variable_declaration3908 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_variable_declaration_group_in_state_variable_declaration3912 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_AUX_VAR_in_state_aux_variable_declaration3955 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_variable_declaration_group_in_state_aux_variable_declaration3957 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FACILITY_in_facility_declaration3991 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_ident_in_facility_declaration3995 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_ident_in_facility_declaration4011 = new BitSet(new long[]{0x0008000000000000L,0x0100000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_module_argument_section_in_facility_declaration4016 = new BitSet(new long[]{0x0008000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_facility_enhancement_in_facility_declaration4035 = new BitSet(new long[]{0x0008000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_REALIZED_in_facility_declaration4053 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_ident_in_facility_declaration4057 = new BitSet(new long[]{0x0008000000000008L,0x0000000000000000L,0x0000000200000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_WITH_PROFILE_in_facility_declaration4060 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_ident_in_facility_declaration4064 = new BitSet(new long[]{0x0008000000000008L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_module_argument_section_in_facility_declaration4071 = new BitSet(new long[]{0x0008000000000008L});
    public static final BitSet FOLLOW_facility_body_enhancement_in_facility_declaration4090 = new BitSet(new long[]{0x0008000000000008L});
    public static final BitSet FOLLOW_ENHANCED_in_facility_enhancement4142 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_ident_in_facility_enhancement4146 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_module_argument_section_in_facility_enhancement4151 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_ENHANCED_in_facility_body_enhancement4194 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_ident_in_facility_body_enhancement4198 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_module_argument_section_in_facility_body_enhancement4203 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_REALIZED_in_facility_body_enhancement4219 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_ident_in_facility_body_enhancement4223 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000200000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_WITH_PROFILE_in_facility_body_enhancement4226 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_ident_in_facility_body_enhancement4230 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_module_argument_section_in_facility_body_enhancement4237 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_PARAMS_in_module_argument_section4287 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_module_argument_in_module_argument_section4292 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000001000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_qualified_ident_in_module_argument4330 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_program_expression_in_module_argument4361 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DEFINES_in_defines_declaration4413 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_definition_signature_in_defines_declaration4417 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_implicit_definition_declaration_in_definition_declaration4456 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inductive_definition_declaration_in_definition_declaration4470 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_standard_definition_declaration_in_definition_declaration4484 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IMPLICIT_DEF_in_implicit_definition_declaration4523 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_definition_signature_in_implicit_definition_declaration4527 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_math_expression_in_implicit_definition_declaration4531 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_INDUCTIVE_DEF_in_inductive_definition_declaration4575 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_definition_signature_in_inductive_definition_declaration4579 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_indexed_expression_in_inductive_definition_declaration4595 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_indexed_expression_in_inductive_definition_declaration4599 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_DEFINITION_in_standard_definition_declaration4650 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_definition_signature_in_standard_definition_declaration4654 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_math_expression_in_standard_definition_declaration4659 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_CATEGORICAL_DEFINITION_in_categorical_definition_declaration4703 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_categorical_definition_construct_in_categorical_definition_declaration4707 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_RELATED_BY_in_categorical_definition_declaration4710 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_math_expression_in_categorical_definition_declaration4714 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_infix_definition_construct_in_definition_signature4763 = new BitSet(new long[]{0x0000100020240000L,0x4000006408008000L,0xED14541100200000L,0x00A208080214C201L,0x0000000000180012L});
    public static final BitSet FOLLOW_outfix_definition_construct_in_definition_signature4801 = new BitSet(new long[]{0x0000100020240000L,0x4000006408008000L,0xED14541100200000L,0x00A208080214C201L,0x0000000000180012L});
    public static final BitSet FOLLOW_standard_definition_construct_in_definition_signature4839 = new BitSet(new long[]{0x0000100020240000L,0x4000006408008000L,0xED14541100200000L,0x00A208080214C201L,0x0000000000180012L});
    public static final BitSet FOLLOW_math_type_expression_in_definition_signature4887 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_singleton_definition_parameter_in_infix_definition_construct4939 = new BitSet(new long[]{0x0000100020000400L,0x4000024403FC8500L,0xEC00001100200000L,0x008000000000007FL,0x0000000000E00000L});
    public static final BitSet FOLLOW_ident_in_infix_definition_construct4954 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_infix_symbol_in_infix_definition_construct4961 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_singleton_definition_parameter_in_infix_definition_construct4976 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BAR_in_outfix_definition_construct5019 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_singleton_definition_parameter_in_outfix_definition_construct5023 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DBL_BAR_in_outfix_definition_construct5051 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_singleton_definition_parameter_in_outfix_definition_construct5055 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LT_in_outfix_definition_construct5083 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_singleton_definition_parameter_in_outfix_definition_construct5087 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LL_in_outfix_definition_construct5115 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_singleton_definition_parameter_in_outfix_definition_construct5119 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ident_in_standard_definition_construct5186 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_prefix_symbol_in_standard_definition_construct5204 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_NUMERIC_LITERAL_in_standard_definition_construct5220 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_definition_formal_param_section_in_standard_definition_construct5245 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DEFINITION_in_categorical_definition_construct5282 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_definition_signature_in_categorical_definition_construct5286 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_math_expression_in_indexed_expression5325 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PARAMS_in_singleton_definition_parameter5359 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_math_variable_declaration_in_singleton_definition_parameter5363 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_PARAMS_in_definition_formal_param_section5400 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_math_variable_declaration_group_in_definition_formal_param_section5417 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000001000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_EQL_in_infix_symbol5460 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NOT_EQL_in_infix_symbol5466 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LT_in_infix_symbol5472 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_GT_in_infix_symbol5478 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LT_EQL_in_infix_symbol5484 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_GT_EQL_in_infix_symbol5490 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PLUS_in_infix_symbol5504 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MINUS_in_infix_symbol5510 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MULTIPLY_in_infix_symbol5516 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DIVIDE_in_infix_symbol5522 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EXP_in_infix_symbol5528 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MOD_in_infix_symbol5542 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REM_in_infix_symbol5548 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DIV_in_infix_symbol5554 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IMPLIES_in_infix_symbol5560 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IFF_in_infix_symbol5566 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AND_in_infix_symbol5572 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OR_in_infix_symbol5586 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_XOR_in_infix_symbol5592 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ANDTHEN_in_infix_symbol5598 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ORELSE_in_infix_symbol5604 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COMPLEMENT_in_infix_symbol5610 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IN_in_infix_symbol5616 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NOT_IN_in_infix_symbol5630 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RANGE_in_infix_symbol5636 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_UNION_in_infix_symbol5642 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INTERSECT_in_infix_symbol5648 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WITHOUT_in_infix_symbol5654 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SUBSET_in_infix_symbol5668 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PROP_SUBSET_in_infix_symbol5674 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NOT_SUBSET_in_infix_symbol5680 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NOT_PROP_SUBSET_in_infix_symbol5686 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CAT_in_infix_symbol5700 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SUBSTR_in_infix_symbol5706 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NOT_SUBSTR_in_infix_symbol5712 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PLUS_in_prefix_symbol5756 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MINUS_in_prefix_symbol5762 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NOT_in_prefix_symbol5768 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ABS_in_prefix_symbol5774 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COMPLEMENT_in_prefix_symbol5780 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_quant_symbol0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OPERATION_in_operation_procedure_declaration5854 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_ident_in_operation_procedure_declaration5858 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_operation_formal_param_section_in_operation_procedure_declaration5874 = new BitSet(new long[]{0xC04004D000004800L,0x0000810000000001L,0x0000000008080008L,0x0600A00004800000L,0x0000000000000005L});
    public static final BitSet FOLLOW_program_type_expression_in_operation_procedure_declaration5891 = new BitSet(new long[]{0xC04004D000004800L,0x0000810000000001L,0x0000000008080008L,0x0600A00004800000L,0x0000000000000005L});
    public static final BitSet FOLLOW_affects_clause_in_operation_procedure_declaration5910 = new BitSet(new long[]{0xC04004D000004800L,0x0000810000000001L,0x0000000008080008L,0x0600A00004800000L,0x0000000000000005L});
    public static final BitSet FOLLOW_requires_clause_in_operation_procedure_declaration5931 = new BitSet(new long[]{0xC04004D000004800L,0x0000810000000001L,0x0000000008080008L,0x0600A00004800000L,0x0000000000000005L});
    public static final BitSet FOLLOW_ensures_clause_in_operation_procedure_declaration5950 = new BitSet(new long[]{0xC04004D000004800L,0x0000810000000001L,0x0000000008080008L,0x0600A00004800000L,0x0000000000000005L});
    public static final BitSet FOLLOW_decreasing_clause_in_operation_procedure_declaration5969 = new BitSet(new long[]{0xC04004D000004800L,0x0000810000000001L,0x0000000008080008L,0x0600A00004800000L,0x0000000000000005L});
    public static final BitSet FOLLOW_facility_declaration_in_operation_procedure_declaration5988 = new BitSet(new long[]{0xC04004D000004800L,0x0000810000000001L,0x0000000008080008L,0x0600A00004800000L,0x0000000000000005L});
    public static final BitSet FOLLOW_variable_declaration_in_operation_procedure_declaration6009 = new BitSet(new long[]{0xC04004D000004800L,0x0000810000000001L,0x0000000008080008L,0x0600A00004800000L,0x0000000000000005L});
    public static final BitSet FOLLOW_aux_variable_declaration_in_operation_procedure_declaration6030 = new BitSet(new long[]{0xC04004D000004800L,0x0000810000000001L,0x0000000008080008L,0x0600A00004800000L,0x0000000000000005L});
    public static final BitSet FOLLOW_statement_sequence_in_operation_procedure_declaration6051 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_RECURSIVE_OPERATION_PROCEDURE_in_operation_recursive_procedure_declaration6106 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_ident_in_operation_recursive_procedure_declaration6110 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_operation_formal_param_section_in_operation_recursive_procedure_declaration6126 = new BitSet(new long[]{0x0040008000000800L,0x0000000000000000L,0x0000000000000008L,0x0000000000800000L,0x0000000000000004L});
    public static final BitSet FOLLOW_program_type_expression_in_operation_recursive_procedure_declaration6143 = new BitSet(new long[]{0x0040008000000000L,0x0000000000000000L,0x0000000000000008L,0x0000000000800000L});
    public static final BitSet FOLLOW_affects_clause_in_operation_recursive_procedure_declaration6162 = new BitSet(new long[]{0x0040008000000000L,0x0000000000000000L,0x0000000000000008L,0x0000000000800000L});
    public static final BitSet FOLLOW_requires_clause_in_operation_recursive_procedure_declaration6183 = new BitSet(new long[]{0x0040008000000000L});
    public static final BitSet FOLLOW_ensures_clause_in_operation_recursive_procedure_declaration6202 = new BitSet(new long[]{0x0000008000000000L});
    public static final BitSet FOLLOW_decreasing_clause_in_operation_recursive_procedure_declaration6220 = new BitSet(new long[]{0xC04004D000004800L,0x0000810000000001L,0x0000000008080008L,0x0600A00004800000L,0x0000000000000005L});
    public static final BitSet FOLLOW_facility_declaration_in_operation_recursive_procedure_declaration6237 = new BitSet(new long[]{0xC04004D000004800L,0x0000810000000001L,0x0000000008080008L,0x0600A00004800000L,0x0000000000000005L});
    public static final BitSet FOLLOW_variable_declaration_in_operation_recursive_procedure_declaration6258 = new BitSet(new long[]{0xC04004D000004800L,0x0000810000000001L,0x0000000008080008L,0x0600A00004800000L,0x0000000000000005L});
    public static final BitSet FOLLOW_aux_variable_declaration_in_operation_recursive_procedure_declaration6279 = new BitSet(new long[]{0xC04004D000004800L,0x0000810000000001L,0x0000000008080008L,0x0600A00004800000L,0x0000000000000005L});
    public static final BitSet FOLLOW_statement_sequence_in_operation_recursive_procedure_declaration6300 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_OPERATION_in_operation_declaration6351 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_ident_in_operation_declaration6355 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_operation_formal_param_section_in_operation_declaration6371 = new BitSet(new long[]{0x0040000000000808L,0x0000000000000000L,0x0000000000000008L,0x0000000000800000L,0x0000000000000004L});
    public static final BitSet FOLLOW_program_type_expression_in_operation_declaration6388 = new BitSet(new long[]{0x0040000000000008L,0x0000000000000000L,0x0000000000000008L,0x0000000000800000L});
    public static final BitSet FOLLOW_affects_clause_in_operation_declaration6407 = new BitSet(new long[]{0x0040000000000008L,0x0000000000000000L,0x0000000000000008L,0x0000000000800000L});
    public static final BitSet FOLLOW_requires_clause_in_operation_declaration6428 = new BitSet(new long[]{0x0040000000000008L});
    public static final BitSet FOLLOW_ensures_clause_in_operation_declaration6447 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_OPERATION_in_performance_operation_declaration6503 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_ident_in_performance_operation_declaration6507 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_operation_formal_param_section_in_performance_operation_declaration6523 = new BitSet(new long[]{0x0040400000000808L,0x0000000040000000L,0x0000000000000008L,0x0000000000800000L,0x0000000000000004L});
    public static final BitSet FOLLOW_program_type_expression_in_performance_operation_declaration6540 = new BitSet(new long[]{0x0040400000000008L,0x0000000040000000L,0x0000000000000008L,0x0000000000800000L});
    public static final BitSet FOLLOW_affects_clause_in_performance_operation_declaration6559 = new BitSet(new long[]{0x0040400000000008L,0x0000000040000000L,0x0000000000000008L,0x0000000000800000L});
    public static final BitSet FOLLOW_requires_clause_in_performance_operation_declaration6580 = new BitSet(new long[]{0x0040400000000008L,0x0000000040000000L});
    public static final BitSet FOLLOW_ensures_clause_in_performance_operation_declaration6599 = new BitSet(new long[]{0x0000400000000008L,0x0000000040000000L});
    public static final BitSet FOLLOW_duration_clause_in_performance_operation_declaration6618 = new BitSet(new long[]{0x0000000000000008L,0x0000000040000000L});
    public static final BitSet FOLLOW_mainp_disp_clause_in_performance_operation_declaration6637 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_AUX_OPERATION_in_aux_operation_declaration6689 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_ident_in_aux_operation_declaration6693 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_operation_formal_param_section_in_aux_operation_declaration6709 = new BitSet(new long[]{0x0040000000000808L,0x0000000000000000L,0x0000000000000008L,0x0000000000800000L,0x0000000000000004L});
    public static final BitSet FOLLOW_program_type_expression_in_aux_operation_declaration6726 = new BitSet(new long[]{0x0040000000000008L,0x0000000000000000L,0x0000000000000008L,0x0000000000800000L});
    public static final BitSet FOLLOW_affects_clause_in_aux_operation_declaration6745 = new BitSet(new long[]{0x0040000000000008L,0x0000000000000000L,0x0000000000000008L,0x0000000000800000L});
    public static final BitSet FOLLOW_requires_clause_in_aux_operation_declaration6766 = new BitSet(new long[]{0x0040000000000008L});
    public static final BitSet FOLLOW_ensures_clause_in_aux_operation_declaration6785 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_PROCEDURE_in_procedure_declaration6837 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_ident_in_procedure_declaration6841 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_operation_formal_param_section_in_procedure_declaration6857 = new BitSet(new long[]{0xC04004D000004800L,0x0000810000000001L,0x0000000008080008L,0x0600A00004800000L,0x0000000000000005L});
    public static final BitSet FOLLOW_program_type_expression_in_procedure_declaration6874 = new BitSet(new long[]{0xC04004D000004800L,0x0000810000000001L,0x0000000008080008L,0x0600A00004800000L,0x0000000000000005L});
    public static final BitSet FOLLOW_affects_clause_in_procedure_declaration6893 = new BitSet(new long[]{0xC04004D000004800L,0x0000810000000001L,0x0000000008080008L,0x0600A00004800000L,0x0000000000000005L});
    public static final BitSet FOLLOW_decreasing_clause_in_procedure_declaration6914 = new BitSet(new long[]{0xC04004D000004800L,0x0000810000000001L,0x0000000008080008L,0x0600A00004800000L,0x0000000000000005L});
    public static final BitSet FOLLOW_facility_declaration_in_procedure_declaration6933 = new BitSet(new long[]{0xC04004D000004800L,0x0000810000000001L,0x0000000008080008L,0x0600A00004800000L,0x0000000000000005L});
    public static final BitSet FOLLOW_variable_declaration_in_procedure_declaration6954 = new BitSet(new long[]{0xC04004D000004800L,0x0000810000000001L,0x0000000008080008L,0x0600A00004800000L,0x0000000000000005L});
    public static final BitSet FOLLOW_aux_variable_declaration_in_procedure_declaration6975 = new BitSet(new long[]{0xC04004D000004800L,0x0000810000000001L,0x0000000008080008L,0x0600A00004800000L,0x0000000000000005L});
    public static final BitSet FOLLOW_statement_sequence_in_procedure_declaration6996 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_RECURSIVE_PROCEDURE_in_recursive_procedure_declaration7051 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_ident_in_recursive_procedure_declaration7055 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_operation_formal_param_section_in_recursive_procedure_declaration7071 = new BitSet(new long[]{0xC04004D000004800L,0x0000810000000001L,0x0000000008080008L,0x0600A00004800000L,0x0000000000000005L});
    public static final BitSet FOLLOW_program_type_expression_in_recursive_procedure_declaration7088 = new BitSet(new long[]{0xC04004D000004800L,0x0000810000000001L,0x0000000008080008L,0x0600A00004800000L,0x0000000000000005L});
    public static final BitSet FOLLOW_affects_clause_in_recursive_procedure_declaration7107 = new BitSet(new long[]{0xC04004D000004800L,0x0000810000000001L,0x0000000008080008L,0x0600A00004800000L,0x0000000000000005L});
    public static final BitSet FOLLOW_decreasing_clause_in_recursive_procedure_declaration7128 = new BitSet(new long[]{0xC04004D000004800L,0x0000810000000001L,0x0000000008080008L,0x0600A00004800000L,0x0000000000000005L});
    public static final BitSet FOLLOW_facility_declaration_in_recursive_procedure_declaration7147 = new BitSet(new long[]{0xC04004D000004800L,0x0000810000000001L,0x0000000008080008L,0x0600A00004800000L,0x0000000000000005L});
    public static final BitSet FOLLOW_variable_declaration_in_recursive_procedure_declaration7168 = new BitSet(new long[]{0xC04004D000004800L,0x0000810000000001L,0x0000000008080008L,0x0600A00004800000L,0x0000000000000005L});
    public static final BitSet FOLLOW_aux_variable_declaration_in_recursive_procedure_declaration7189 = new BitSet(new long[]{0xC04004D000004800L,0x0000810000000001L,0x0000000008080008L,0x0600A00004800000L,0x0000000000000005L});
    public static final BitSet FOLLOW_statement_sequence_in_recursive_procedure_declaration7210 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_PARAMS_in_operation_formal_param_section7255 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_operation_formal_param_group_in_operation_formal_param_section7260 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_VAR_in_operation_formal_param_group7289 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_abstract_mode_in_operation_formal_param_group7293 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_variable_declaration_group_in_operation_formal_param_group7297 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_VAR_in_variable_declaration7332 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_variable_declaration_group_in_variable_declaration7336 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_AUX_VAR_in_aux_variable_declaration7375 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_aux_variable_declaration_group_in_aux_variable_declaration7379 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_AFFECTS_in_affects_clause7420 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_abstract_mode_in_affects_clause7424 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_qualified_ident_in_affects_clause7444 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_COMMA_in_affects_clause7494 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_qualified_ident_in_affects_clause7498 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_ALTERS_in_abstract_mode7564 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CLEARS_in_abstract_mode7576 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EVALUATES_in_abstract_mode7588 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PRESERVES_in_abstract_mode7600 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REPLACES_in_abstract_mode7612 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RESTORES_in_abstract_mode7624 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_UPDATES_in_abstract_mode7636 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REASSIGNS_in_abstract_mode7648 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REQUIRES_in_requires_clause7674 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_math_expression_in_requires_clause7678 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_ENSURES_in_ensures_clause7713 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_math_expression_in_ensures_clause7717 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_DURATION_in_duration_clause7752 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_math_expression_in_duration_clause7756 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_MAINP_DISP_in_mainp_disp_clause7791 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_math_expression_in_mainp_disp_clause7795 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_TYPE_FAMILY_in_type_declaration7836 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_ident_in_type_declaration7840 = new BitSet(new long[]{0x0000100020240000L,0x4000006408008000L,0xED14541100200000L,0x00A208080214C201L,0x0000000000180012L});
    public static final BitSet FOLLOW_math_type_expression_in_type_declaration7856 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_ident_in_type_declaration7872 = new BitSet(new long[]{0x0000000400000008L,0x0000000000002004L});
    public static final BitSet FOLLOW_constraint_clause_in_type_declaration7889 = new BitSet(new long[]{0x0000000000000008L,0x0000000000002004L});
    public static final BitSet FOLLOW_type_concept_init_declaration_in_type_declaration7908 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000004L});
    public static final BitSet FOLLOW_type_concept_final_declaration_in_type_declaration7927 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_TYPE_FAMILY_in_performance_type_declaration7975 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_ident_in_performance_type_declaration7979 = new BitSet(new long[]{0x0000100020240000L,0x4000006408008000L,0xED14541100200000L,0x00A208080214C201L,0x0000000000180012L});
    public static final BitSet FOLLOW_math_type_expression_in_performance_type_declaration7995 = new BitSet(new long[]{0x0000000400000008L,0x0000000000002004L});
    public static final BitSet FOLLOW_constraint_clause_in_performance_type_declaration8012 = new BitSet(new long[]{0x0000000000000008L,0x0000000000002004L});
    public static final BitSet FOLLOW_performance_type_init_declaration_in_performance_type_declaration8031 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000004L});
    public static final BitSet FOLLOW_performance_type_final_declaration_in_performance_type_declaration8050 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_TYPE_in_type_representation_declaration8098 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_ident_in_type_representation_declaration8102 = new BitSet(new long[]{0x0000000000000800L,0x0400000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_structural_program_type_expression_in_type_representation_declaration8118 = new BitSet(new long[]{0x0000005000000008L,0x0000000000002004L});
    public static final BitSet FOLLOW_convention_clause_in_type_representation_declaration8135 = new BitSet(new long[]{0x0000004000000008L,0x0000000000002004L});
    public static final BitSet FOLLOW_correspondence_clause_in_type_representation_declaration8154 = new BitSet(new long[]{0x0000000000000008L,0x0000000000002004L});
    public static final BitSet FOLLOW_type_body_init_declaration_in_type_representation_declaration8173 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000004L});
    public static final BitSet FOLLOW_type_body_final_declaration_in_type_representation_declaration8192 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_TYPE_in_facility_type_declaration8240 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_ident_in_facility_type_declaration8244 = new BitSet(new long[]{0x0000000000000800L,0x0400000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_structural_program_type_expression_in_facility_type_declaration8260 = new BitSet(new long[]{0x0000001000000008L,0x0000000000002004L});
    public static final BitSet FOLLOW_convention_clause_in_facility_type_declaration8277 = new BitSet(new long[]{0x0000000000000008L,0x0000000000002004L});
    public static final BitSet FOLLOW_type_facility_init_declaration_in_facility_type_declaration8296 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000004L});
    public static final BitSet FOLLOW_type_facility_final_declaration_in_facility_type_declaration8316 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_FAC_INIT_in_module_concept_init_declaration8368 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_concept_init_final_section_in_module_concept_init_declaration8372 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_FAC_FINAL_in_module_concept_final_declaration8407 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_concept_init_final_section_in_module_concept_final_declaration8411 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_PERF_INIT_in_performance_module_init_declaration8446 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_performance_init_section_in_performance_module_init_declaration8450 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_PERF_FINAL_in_performance_module_final_declaration8485 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_performance_final_section_in_performance_module_final_declaration8489 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_FAC_INIT_in_module_body_init_declaration8524 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_body_init_final_section_in_module_body_init_declaration8528 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_FAC_FINAL_in_module_body_final_declaration8563 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_body_init_final_section_in_module_body_final_declaration8567 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_FAC_INIT_in_module_facility_init_declaration8602 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_facility_init_final_section_in_module_facility_init_declaration8606 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_FAC_FINAL_in_module_facility_final_declaration8641 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_facility_init_final_section_in_module_facility_final_declaration8645 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_INITIALIZATION_in_type_concept_init_declaration8682 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_concept_init_final_section_in_type_concept_init_declaration8686 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_FINALIZATION_in_type_concept_final_declaration8721 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_concept_init_final_section_in_type_concept_final_declaration8725 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_INITIALIZATION_in_performance_type_init_declaration8761 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_performance_init_section_in_performance_type_init_declaration8765 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_FINALIZATION_in_performance_type_final_declaration8800 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_performance_final_section_in_performance_type_final_declaration8805 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_INITIALIZATION_in_type_body_init_declaration8840 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_body_init_final_section_in_type_body_init_declaration8844 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_FINALIZATION_in_type_body_final_declaration8879 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_body_init_final_section_in_type_body_final_declaration8883 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_INITIALIZATION_in_type_facility_init_declaration8918 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_facility_init_final_section_in_type_facility_init_declaration8922 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_FINALIZATION_in_type_facility_final_declaration8957 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_facility_init_final_section_in_type_facility_final_declaration8961 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_affects_clause_in_concept_init_final_section9004 = new BitSet(new long[]{0x0040000000000002L,0x0000000000000000L,0x0000000000000008L,0x0000000000800000L});
    public static final BitSet FOLLOW_requires_clause_in_concept_init_final_section9021 = new BitSet(new long[]{0x0040000000000002L});
    public static final BitSet FOLLOW_ensures_clause_in_concept_init_final_section9036 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_affects_clause_in_performance_init_section9078 = new BitSet(new long[]{0x0040400000000002L,0x0000000040000000L,0x0000000000000008L,0x0000000000800000L});
    public static final BitSet FOLLOW_requires_clause_in_performance_init_section9095 = new BitSet(new long[]{0x0040400000000002L,0x0000000040000000L});
    public static final BitSet FOLLOW_ensures_clause_in_performance_init_section9110 = new BitSet(new long[]{0x0000400000000002L,0x0000000040000000L});
    public static final BitSet FOLLOW_duration_clause_in_performance_init_section9125 = new BitSet(new long[]{0x0000000000000002L,0x0000000040000000L});
    public static final BitSet FOLLOW_mainp_disp_clause_in_performance_init_section9140 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_affects_clause_in_performance_final_section9182 = new BitSet(new long[]{0x0040400000000002L,0x0000000040000000L,0x0000000000000008L,0x0000000000800000L});
    public static final BitSet FOLLOW_requires_clause_in_performance_final_section9199 = new BitSet(new long[]{0x0040400000000002L,0x0000000040000000L});
    public static final BitSet FOLLOW_ensures_clause_in_performance_final_section9214 = new BitSet(new long[]{0x0000400000000002L,0x0000000040000000L});
    public static final BitSet FOLLOW_duration_clause_in_performance_final_section9229 = new BitSet(new long[]{0x0000000000000002L,0x0000000040000000L});
    public static final BitSet FOLLOW_mainp_disp_clause_in_performance_final_section9244 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_affects_clause_in_body_init_final_section9286 = new BitSet(new long[]{0xC04004D000004800L,0x0000810000000001L,0x0000000008080008L,0x0600A00004800000L,0x0000000000000005L});
    public static final BitSet FOLLOW_facility_declaration_in_body_init_final_section9303 = new BitSet(new long[]{0xC04004D000004800L,0x0000810000000001L,0x0000000008080008L,0x0600A00004800000L,0x0000000000000005L});
    public static final BitSet FOLLOW_variable_declaration_in_body_init_final_section9320 = new BitSet(new long[]{0xC04004D000004800L,0x0000810000000001L,0x0000000008080008L,0x0600A00004800000L,0x0000000000000005L});
    public static final BitSet FOLLOW_aux_variable_declaration_in_body_init_final_section9337 = new BitSet(new long[]{0xC04004D000004800L,0x0000810000000001L,0x0000000008080008L,0x0600A00004800000L,0x0000000000000005L});
    public static final BitSet FOLLOW_statement_sequence_in_body_init_final_section9354 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_affects_clause_in_facility_init_final_section9395 = new BitSet(new long[]{0xC04004D000004800L,0x0000810000000001L,0x0000000008080008L,0x0600A00004800000L,0x0000000000000005L});
    public static final BitSet FOLLOW_requires_clause_in_facility_init_final_section9412 = new BitSet(new long[]{0xC04004D000004800L,0x0000810000000001L,0x0000000008080008L,0x0600A00004800000L,0x0000000000000005L});
    public static final BitSet FOLLOW_ensures_clause_in_facility_init_final_section9427 = new BitSet(new long[]{0xC04004D000004800L,0x0000810000000001L,0x0000000008080008L,0x0600A00004800000L,0x0000000000000005L});
    public static final BitSet FOLLOW_facility_declaration_in_facility_init_final_section9442 = new BitSet(new long[]{0xC04004D000004800L,0x0000810000000001L,0x0000000008080008L,0x0600A00004800000L,0x0000000000000005L});
    public static final BitSet FOLLOW_variable_declaration_in_facility_init_final_section9459 = new BitSet(new long[]{0xC04004D000004800L,0x0000810000000001L,0x0000000008080008L,0x0600A00004800000L,0x0000000000000005L});
    public static final BitSet FOLLOW_aux_variable_declaration_in_facility_init_final_section9476 = new BitSet(new long[]{0xC04004D000004800L,0x0000810000000001L,0x0000000008080008L,0x0600A00004800000L,0x0000000000000005L});
    public static final BitSet FOLLOW_statement_sequence_in_facility_init_final_section9493 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STATEMENT_in_statement9534 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_function_assignment_in_statement9554 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_forget_statement_in_statement9576 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_if_statement_in_statement9598 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_iterate_loop_statement_in_statement9620 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_procedure_operation_call_in_statement9642 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_remember_statement_in_statement9664 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_selection_statement_in_statement9686 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_swap_statement_in_statement9708 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_while_loop_statement_in_statement9730 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_confirm_statement_in_statement9752 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_assume_statement_in_statement9774 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_aux_code_statement_in_statement9796 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_STATEMENT_in_in_aux_statement9852 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_function_assignment_in_in_aux_statement9872 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_forget_statement_in_in_aux_statement9894 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_if_statement_in_in_aux_statement9916 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_iterate_loop_statement_in_in_aux_statement9938 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_remember_statement_in_in_aux_statement9973 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_selection_statement_in_in_aux_statement9995 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_swap_statement_in_in_aux_statement10017 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_while_loop_statement_in_in_aux_statement10039 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_confirm_statement_in_in_aux_statement10061 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_assume_statement_in_in_aux_statement10083 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_aux_code_statement_in_in_aux_statement10105 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_STATEMENT_SEQUENCE_in_statement_sequence10155 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_statement_in_statement_sequence10160 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_STATEMENT_SEQUENCE_in_in_aux_statement_sequence10193 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_in_aux_statement_in_in_aux_statement_sequence10198 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_AUX_CODE_in_aux_code_statement10231 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_in_aux_statement_sequence_in_aux_code_statement10235 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_ASSIGN_OP_in_function_assignment10282 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_variable_expression_in_function_assignment10286 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000001000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_program_expression_in_function_assignment10290 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_FORGET_in_forget_statement10331 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REMEMBER_in_remember_statement10356 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IF_in_if_statement10395 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_condition_in_if_statement10399 = new BitSet(new long[]{0xC04004D000004800L,0x0000810000000001L,0x0000000008080008L,0x0600A00004800000L,0x0000000000000005L});
    public static final BitSet FOLLOW_statement_sequence_in_if_statement10403 = new BitSet(new long[]{0x0001000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_elsif_item_in_if_statement10420 = new BitSet(new long[]{0x0001000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_else_part_in_if_statement10441 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_ELSIF_in_elsif_item10487 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_condition_in_elsif_item10491 = new BitSet(new long[]{0xC04004D000004800L,0x0000810000000001L,0x0000000008080008L,0x0600A00004800000L,0x0000000000000005L});
    public static final BitSet FOLLOW_statement_sequence_in_elsif_item10495 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_ELSE_in_else_part10530 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_statement_sequence_in_else_part10534 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_program_expression_in_condition10562 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ITERATE_in_iterate_loop_statement10592 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_changing_clause_in_iterate_loop_statement10597 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_maintaining_clause_in_iterate_loop_statement10615 = new BitSet(new long[]{0x0000008000000008L,0x0000000000000000L,0x0000000000000000L,0x8001000000000000L});
    public static final BitSet FOLLOW_decreasing_clause_in_iterate_loop_statement10620 = new BitSet(new long[]{0x0000008000000008L,0x0000000000000000L,0x0000000000000000L,0x8001000000000000L});
    public static final BitSet FOLLOW_iterate_item_sequence_in_iterate_loop_statement10638 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_iterate_item_in_iterate_item_sequence10684 = new BitSet(new long[]{0x000000800000000AL,0x0000000000000000L,0x0000000000000000L,0x8001000000000000L});
    public static final BitSet FOLLOW_statement_in_iterate_item10713 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_iterate_exit_statement_in_iterate_item10727 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ITERATE_EXIT_in_iterate_exit_statement10753 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_condition_in_iterate_exit_statement10757 = new BitSet(new long[]{0xC04004D000004800L,0x0000810000000001L,0x0000000008080008L,0x0600A00004800000L,0x0000000000000005L});
    public static final BitSet FOLLOW_statement_sequence_in_iterate_exit_statement10761 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_FUNCTION_in_procedure_operation_call10807 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_qualified_ident_in_procedure_operation_call10811 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_operation_argument_section_in_procedure_operation_call10815 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_PARAMS_in_operation_argument_section10850 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_program_expression_in_operation_argument_section10855 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000001000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_CASE_in_selection_statement10888 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_program_expression_in_selection_statement10892 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_selection_alternative_sequence_in_selection_statement10908 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_default_alternative_in_selection_statement10925 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_selection_alternative_in_selection_alternative_sequence10973 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_WHEN_in_selection_alternative11001 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_choices_in_selection_alternative11005 = new BitSet(new long[]{0xC04004D000004800L,0x0000810000000001L,0x0000000008080008L,0x0600A00004800000L,0x0000000000000005L});
    public static final BitSet FOLLOW_statement_sequence_in_selection_alternative11009 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_DEFAULT_in_default_alternative11044 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_statement_sequence_in_default_alternative11048 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_program_expression_in_choice11076 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CHOICES_in_choices11102 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_choice_in_choices11107 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000001000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_SWAP_OP_in_swap_statement11138 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_variable_expression_in_swap_statement11142 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L,0x0080000008000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_variable_expression_in_swap_statement11146 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_CONFIRM_in_confirm_statement11192 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_math_expression_in_confirm_statement11196 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_ASSUME_in_assume_statement11233 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_math_expression_in_assume_statement11237 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_WHILE_in_while_loop_statement11276 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_condition_in_while_loop_statement11280 = new BitSet(new long[]{0xC04084D001004800L,0x0000810080000001L,0x0000000008080008L,0x0600A00004800000L,0x0000000000000005L});
    public static final BitSet FOLLOW_changing_clause_in_while_loop_statement11285 = new BitSet(new long[]{0xC04084D000004800L,0x0000810080000001L,0x0000000008080008L,0x0600A00004800000L,0x0000000000000005L});
    public static final BitSet FOLLOW_maintaining_clause_in_while_loop_statement11308 = new BitSet(new long[]{0xC04084D000004800L,0x0000810000000001L,0x0000000008080008L,0x0600A00004800000L,0x0000000000000005L});
    public static final BitSet FOLLOW_decreasing_clause_in_while_loop_statement11315 = new BitSet(new long[]{0xC04084D000004800L,0x0000810000000001L,0x0000000008080008L,0x0600A00004800000L,0x0000000000000005L});
    public static final BitSet FOLLOW_elapsed_time_clause_in_while_loop_statement11334 = new BitSet(new long[]{0xC04004D000004800L,0x0000810000000001L,0x0000000008080008L,0x0600A00004800000L,0x0000000000000005L});
    public static final BitSet FOLLOW_statement_sequence_in_while_loop_statement11352 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_MAINTAINING_in_maintaining_clause11396 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_math_expression_in_maintaining_clause11400 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_DECREASING_in_decreasing_clause11427 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_adding_expression_in_decreasing_clause11431 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_ELAPSED_TIME_in_elapsed_time_clause11458 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_math_expression_in_elapsed_time_clause11462 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_CHANGING_in_changing_clause11489 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_variable_expression_in_changing_clause11494 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000001000000000L,0x0080000008000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_TYPEX_in_program_type_expression11531 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_qualified_ident_in_program_type_expression11535 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_ARRAY_in_program_type_expression11575 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_array_range_in_program_type_expression11579 = new BitSet(new long[]{0x0000000000000800L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_program_type_expression_in_program_type_expression11583 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_RECORD_in_structural_program_type_expression11632 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_record_variable_declaration_group_in_structural_program_type_expression11649 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_program_type_expression_in_structural_program_type_expression11685 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_VAR_in_record_variable_declaration_group11711 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_variable_id_list_in_record_variable_declaration_group11715 = new BitSet(new long[]{0x0000000000000800L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_program_type_expression_in_record_variable_declaration_group11719 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_AUX_VAR_in_record_aux_variable_declaration_group11758 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_variable_id_list_in_record_aux_variable_declaration_group11762 = new BitSet(new long[]{0x0000000000000800L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_program_type_expression_in_record_aux_variable_declaration_group11766 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_RANGE_in_array_range11801 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_program_expression_in_array_range11805 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000001000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_program_expression_in_array_range11809 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_variable_id_list_in_variable_declaration_group11845 = new BitSet(new long[]{0x0000000000000800L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_program_type_expression_in_variable_declaration_group11849 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variable_id_list_in_aux_variable_declaration_group11892 = new BitSet(new long[]{0x0000000000000800L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_program_type_expression_in_aux_variable_declaration_group11896 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ident_in_variable_id_list11932 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000001000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_infix_expression_in_math_type_expression11975 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PARAMS_in_type_expression_argument_list12011 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_math_type_expression_in_type_expression_argument_list12016 = new BitSet(new long[]{0x0000100020240008L,0x4000006408008000L,0xED14541100200000L,0x00A208080214C201L,0x0000000000180012L});
    public static final BitSet FOLLOW_VAR_in_cartprod_variable_declaration_group12045 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_math_variable_declaration_group_in_cartprod_variable_declaration_group12049 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_variable_id_list_in_structural_math_variable_declaration_group12075 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_COLON_in_structural_math_variable_declaration_group12077 = new BitSet(new long[]{0x0000100020240000L,0x4000006408008000L,0xED14541100200000L,0x00A208080214C201L,0x0000000000180012L});
    public static final BitSet FOLLOW_math_type_expression_in_structural_math_variable_declaration_group12079 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variable_id_list_in_math_variable_declaration_group12104 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_COLON_in_math_variable_declaration_group12106 = new BitSet(new long[]{0x0000100020240000L,0x4000006408008000L,0xED14541100200000L,0x00A208080214C201L,0x0000000000180012L});
    public static final BitSet FOLLOW_math_type_expression_in_math_variable_declaration_group12110 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ident_in_math_variable_declaration12146 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_COLON_in_math_variable_declaration12148 = new BitSet(new long[]{0x0000100020240000L,0x4000006408008000L,0xED14541100200000L,0x00A208080214C201L,0x0000000000180012L});
    public static final BitSet FOLLOW_math_type_expression_in_math_variable_declaration12152 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ident_in_implicit_type_parameter_group12195 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_math_expression_in_implicit_type_parameter_group12199 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EXPR_in_math_expression12269 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_iterated_construct_in_math_expression12289 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_quantified_expression_in_math_expression12311 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_implies_expression_in_quantified_expression12366 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FORALL_in_quantified_expression12387 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_math_variable_declaration_group_in_quantified_expression12391 = new BitSet(new long[]{0x1000100020240400L,0x400002640BFC8580L,0xED14541140200000L,0x00A20D081214C27FL,0x0000000000180012L});
    public static final BitSet FOLLOW_where_clause_in_quantified_expression12412 = new BitSet(new long[]{0x1000100020240400L,0x400002640BFC8580L,0xED14541140200000L,0x00A20D081214C27FL,0x0000000000180012L});
    public static final BitSet FOLLOW_quantified_expression_in_quantified_expression12434 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_EXISTS_in_quantified_expression12468 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_math_variable_declaration_group_in_quantified_expression12472 = new BitSet(new long[]{0x1000100020240400L,0x400002640BFC8580L,0xED14541140200000L,0x00A20D081214C27FL,0x0000000000180012L});
    public static final BitSet FOLLOW_where_clause_in_quantified_expression12493 = new BitSet(new long[]{0x1000100020240400L,0x400002640BFC8580L,0xED14541140200000L,0x00A20D081214C27FL,0x0000000000180012L});
    public static final BitSet FOLLOW_quantified_expression_in_quantified_expression12515 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_EXISTS_UNIQUE_in_quantified_expression12549 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_math_variable_declaration_group_in_quantified_expression12553 = new BitSet(new long[]{0x1000100020240400L,0x400002640BFC8580L,0xED14541140200000L,0x00A20D081214C27FL,0x0000000000180012L});
    public static final BitSet FOLLOW_where_clause_in_quantified_expression12574 = new BitSet(new long[]{0x1000100020240400L,0x400002640BFC8580L,0xED14541140200000L,0x00A20D081214C27FL,0x0000000000180012L});
    public static final BitSet FOLLOW_quantified_expression_in_quantified_expression12596 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_logical_expression_in_implies_expression12656 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IMPLIES_in_implies_expression12675 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_logical_expression_in_implies_expression12679 = new BitSet(new long[]{0x0000100020240400L,0x400002640BFC8000L,0xED14541100200000L,0x00A208081214C27FL,0x0000000000180012L});
    public static final BitSet FOLLOW_logical_expression_in_implies_expression12683 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_IFF_in_implies_expression12701 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_logical_expression_in_implies_expression12705 = new BitSet(new long[]{0x0000100020240400L,0x400002640BFC8000L,0xED14541100200000L,0x00A208081214C27FL,0x0000000000180012L});
    public static final BitSet FOLLOW_logical_expression_in_implies_expression12709 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_IF_in_implies_expression12743 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_logical_expression_in_implies_expression12747 = new BitSet(new long[]{0x0000100020240400L,0x400002640BFC8000L,0xED14541100200000L,0x00A208081214C27FL,0x0000000000180012L});
    public static final BitSet FOLLOW_logical_expression_in_implies_expression12751 = new BitSet(new long[]{0x0000100020240408L,0x400002640BFC8000L,0xED14541100200000L,0x00A208081214C27FL,0x0000000000180012L});
    public static final BitSet FOLLOW_logical_expression_in_implies_expression12768 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_relational_expression_in_logical_expression12815 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AND_in_logical_expression12834 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_logical_expression_in_logical_expression12838 = new BitSet(new long[]{0x0000100020240000L,0x400000640BFC8000L,0xED14541100200000L,0x00A208081214C27FL,0x0000000000180012L});
    public static final BitSet FOLLOW_relational_expression_in_logical_expression12842 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_OR_in_logical_expression12860 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_logical_expression_in_logical_expression12864 = new BitSet(new long[]{0x0000100020240000L,0x400000640BFC8000L,0xED14541100200000L,0x00A208081214C27FL,0x0000000000180012L});
    public static final BitSet FOLLOW_relational_expression_in_logical_expression12868 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_infix_expression_in_relational_expression12928 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_between_expression_in_relational_expression12942 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EQL_in_relational_expression12981 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_infix_expression_in_relational_expression12985 = new BitSet(new long[]{0x0000100020240000L,0x4000006408008000L,0xED14541100200000L,0x00A208080214C201L,0x0000000000180012L});
    public static final BitSet FOLLOW_infix_expression_in_relational_expression12989 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_NOT_EQL_in_relational_expression13021 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_infix_expression_in_relational_expression13025 = new BitSet(new long[]{0x0000100020240000L,0x4000006408008000L,0xED14541100200000L,0x00A208080214C201L,0x0000000000180012L});
    public static final BitSet FOLLOW_infix_expression_in_relational_expression13029 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_LT_in_relational_expression13082 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_infix_expression_in_relational_expression13086 = new BitSet(new long[]{0x0000100020240000L,0x4000006408008000L,0xED14541100200000L,0x00A208080214C201L,0x0000000000180012L});
    public static final BitSet FOLLOW_infix_expression_in_relational_expression13090 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_LT_EQL_in_relational_expression13108 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_infix_expression_in_relational_expression13112 = new BitSet(new long[]{0x0000100020240000L,0x4000006408008000L,0xED14541100200000L,0x00A208080214C201L,0x0000000000180012L});
    public static final BitSet FOLLOW_infix_expression_in_relational_expression13116 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_GT_in_relational_expression13134 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_infix_expression_in_relational_expression13138 = new BitSet(new long[]{0x0000100020240000L,0x4000006408008000L,0xED14541100200000L,0x00A208080214C201L,0x0000000000180012L});
    public static final BitSet FOLLOW_infix_expression_in_relational_expression13142 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_GT_EQL_in_relational_expression13160 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_infix_expression_in_relational_expression13164 = new BitSet(new long[]{0x0000100020240000L,0x4000006408008000L,0xED14541100200000L,0x00A208080214C201L,0x0000000000180012L});
    public static final BitSet FOLLOW_infix_expression_in_relational_expression13168 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_SUBSET_in_relational_expression13204 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_infix_expression_in_relational_expression13208 = new BitSet(new long[]{0x0000100020240000L,0x4000006408008000L,0xED14541100200000L,0x00A208080214C201L,0x0000000000180012L});
    public static final BitSet FOLLOW_infix_expression_in_relational_expression13212 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_NOT_SUBSET_in_relational_expression13230 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_infix_expression_in_relational_expression13234 = new BitSet(new long[]{0x0000100020240000L,0x4000006408008000L,0xED14541100200000L,0x00A208080214C201L,0x0000000000180012L});
    public static final BitSet FOLLOW_infix_expression_in_relational_expression13238 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_PROP_SUBSET_in_relational_expression13256 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_infix_expression_in_relational_expression13260 = new BitSet(new long[]{0x0000100020240000L,0x4000006408008000L,0xED14541100200000L,0x00A208080214C201L,0x0000000000180012L});
    public static final BitSet FOLLOW_infix_expression_in_relational_expression13264 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_NOT_PROP_SUBSET_in_relational_expression13282 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_infix_expression_in_relational_expression13286 = new BitSet(new long[]{0x0000100020240000L,0x4000006408008000L,0xED14541100200000L,0x00A208080214C201L,0x0000000000180012L});
    public static final BitSet FOLLOW_infix_expression_in_relational_expression13290 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_SUBSTR_in_relational_expression13308 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_infix_expression_in_relational_expression13312 = new BitSet(new long[]{0x0000100020240000L,0x4000006408008000L,0xED14541100200000L,0x00A208080214C201L,0x0000000000180012L});
    public static final BitSet FOLLOW_infix_expression_in_relational_expression13316 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_NOT_SUBSTR_in_relational_expression13334 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_infix_expression_in_relational_expression13338 = new BitSet(new long[]{0x0000100020240000L,0x4000006408008000L,0xED14541100200000L,0x00A208080214C201L,0x0000000000180012L});
    public static final BitSet FOLLOW_infix_expression_in_relational_expression13342 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_IN_in_relational_expression13380 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_infix_expression_in_relational_expression13384 = new BitSet(new long[]{0x0000100020240000L,0x4000006408008000L,0xED14541100200000L,0x00A208080214C201L,0x0000000000180012L});
    public static final BitSet FOLLOW_infix_expression_in_relational_expression13388 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_NOT_IN_in_relational_expression13420 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_infix_expression_in_relational_expression13424 = new BitSet(new long[]{0x0000100020240000L,0x4000006408008000L,0xED14541100200000L,0x00A208080214C201L,0x0000000000180012L});
    public static final BitSet FOLLOW_infix_expression_in_relational_expression13428 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_BETWEEN_EXPR_in_between_expression13511 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_infix_expression_in_between_expression13516 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000028L});
    public static final BitSet FOLLOW_LT_in_between_expression13549 = new BitSet(new long[]{0x0000100020240000L,0x4000006408008000L,0xED14541100200000L,0x00A208080214C201L,0x0000000000180012L});
    public static final BitSet FOLLOW_LT_EQL_in_between_expression13555 = new BitSet(new long[]{0x0000100020240000L,0x4000006408008000L,0xED14541100200000L,0x00A208080214C201L,0x0000000000180012L});
    public static final BitSet FOLLOW_infix_expression_in_between_expression13572 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000028L});
    public static final BitSet FOLLOW_LOCALVAREXP_in_infix_expression13687 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_math_variable_declarations_in_infix_expression13691 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_math_expression_in_infix_expression13695 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_function_type_expression_in_infix_expression13717 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RANGE_in_infix_expression13736 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_function_type_expression_in_infix_expression13740 = new BitSet(new long[]{0x0000100020200000L,0x4000006408008000L,0xED14541100200000L,0x00A208080204C200L,0x0000000000080012L});
    public static final BitSet FOLLOW_function_type_expression_in_infix_expression13744 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_FREE_OPERATOR_in_infix_expression13762 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_function_type_expression_in_infix_expression13766 = new BitSet(new long[]{0x0000100020200000L,0x4000006408008000L,0xED14541100200000L,0x00A208080204C200L,0x0000000000080012L});
    public static final BitSet FOLLOW_function_type_expression_in_infix_expression13770 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_BOOLEAN_in_infix_expression13813 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_adding_expression_in_function_type_expression13839 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FUNCARROW_in_function_type_expression13853 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_adding_expression_in_function_type_expression13857 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0100001000000000L,0x0080080000000000L});
    public static final BitSet FOLLOW_function_expression_in_function_type_expression13861 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_multiplying_expression_in_adding_expression13898 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PLUS_in_adding_expression13918 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_adding_expression_in_adding_expression13922 = new BitSet(new long[]{0x0000100020200000L,0x4000002408000000L,0xE114541000000000L,0x00A208080204C000L,0x0000000000080012L});
    public static final BitSet FOLLOW_multiplying_expression_in_adding_expression13926 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_MINUS_in_adding_expression13944 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_adding_expression_in_adding_expression13948 = new BitSet(new long[]{0x0000100020200000L,0x4000002408000000L,0xE114541000000000L,0x00A208080204C000L,0x0000000000080012L});
    public static final BitSet FOLLOW_multiplying_expression_in_adding_expression13952 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_CAT_in_adding_expression13970 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_adding_expression_in_adding_expression13974 = new BitSet(new long[]{0x0000100020200000L,0x4000002408000000L,0xE114541000000000L,0x00A208080204C000L,0x0000000000080012L});
    public static final BitSet FOLLOW_multiplying_expression_in_adding_expression13978 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_UNION_in_adding_expression13996 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_adding_expression_in_adding_expression14000 = new BitSet(new long[]{0x0000100020200000L,0x4000002408000000L,0xE114541000000000L,0x00A208080204C000L,0x0000000000080012L});
    public static final BitSet FOLLOW_multiplying_expression_in_adding_expression14004 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_INTERSECT_in_adding_expression14022 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_adding_expression_in_adding_expression14026 = new BitSet(new long[]{0x0000100020200000L,0x4000002408000000L,0xE114541000000000L,0x00A208080204C000L,0x0000000000080012L});
    public static final BitSet FOLLOW_multiplying_expression_in_adding_expression14030 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_WITHOUT_in_adding_expression14048 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_adding_expression_in_adding_expression14052 = new BitSet(new long[]{0x0000100020200000L,0x4000002408000000L,0xE114541000000000L,0x00A208080204C000L,0x0000000000080012L});
    public static final BitSet FOLLOW_multiplying_expression_in_adding_expression14056 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_exponential_expression_in_multiplying_expression14102 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MULTIPLY_in_multiplying_expression14121 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_multiplying_expression_in_multiplying_expression14125 = new BitSet(new long[]{0x0000000020200000L,0x0000002008000000L,0x8114541000000000L,0x00A208080204C000L,0x0000000000080012L});
    public static final BitSet FOLLOW_exponential_expression_in_multiplying_expression14129 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_DIVIDE_in_multiplying_expression14147 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_multiplying_expression_in_multiplying_expression14151 = new BitSet(new long[]{0x0000000020200000L,0x0000002008000000L,0x8114541000000000L,0x00A208080204C000L,0x0000000000080012L});
    public static final BitSet FOLLOW_exponential_expression_in_multiplying_expression14155 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_MOD_in_multiplying_expression14173 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_multiplying_expression_in_multiplying_expression14177 = new BitSet(new long[]{0x0000000020200000L,0x0000002008000000L,0x8114541000000000L,0x00A208080204C000L,0x0000000000080012L});
    public static final BitSet FOLLOW_exponential_expression_in_multiplying_expression14181 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_REM_in_multiplying_expression14199 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_multiplying_expression_in_multiplying_expression14203 = new BitSet(new long[]{0x0000000020200000L,0x0000002008000000L,0x8114541000000000L,0x00A208080204C000L,0x0000000000080012L});
    public static final BitSet FOLLOW_exponential_expression_in_multiplying_expression14207 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_DIV_in_multiplying_expression14225 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_multiplying_expression_in_multiplying_expression14229 = new BitSet(new long[]{0x0000000020200000L,0x0000002008000000L,0x8114541000000000L,0x00A208080204C000L,0x0000000000080012L});
    public static final BitSet FOLLOW_exponential_expression_in_multiplying_expression14233 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_prefix_expression_in_exponential_expression14279 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EXP_in_exponential_expression14293 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_prefix_expression_in_exponential_expression14297 = new BitSet(new long[]{0x0000000020200000L,0x0000002008000000L,0x8114541000000000L,0x00A208080204C000L,0x0000000000080012L});
    public static final BitSet FOLLOW_exponential_expression_in_exponential_expression14301 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_unary_expression_in_prefix_expression14337 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_primitive_expression_in_unary_expression14360 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NOT_in_unary_expression14379 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_unary_expression_in_unary_expression14383 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_COMPLEMENT_in_unary_expression14415 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_unary_expression_in_unary_expression14419 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_UNARY_MINUS_in_unary_expression14451 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_unary_expression_in_unary_expression14455 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_alternative_expression_in_primitive_expression14518 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_dot_expression_in_primitive_expression14532 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lambda_expression_in_primitive_expression14546 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_literal_expression_in_primitive_expression14560 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_outfix_expression_in_primitive_expression14574 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_constructor_in_primitive_expression14588 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_tuple_expression_in_primitive_expression14602 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nested_expression_in_primitive_expression14616 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_iterated_construct_in_primitive_expression14630 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_tagged_cartesian_product_type_expression_in_primitive_expression14644 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CARTPROD_in_tagged_cartesian_product_type_expression14681 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_cartprod_variable_declaration_group_in_tagged_cartesian_product_type_expression14698 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_SEMICOLON_in_tagged_cartesian_product_type_expression14700 = new BitSet(new long[]{0x0004000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_END_in_tagged_cartesian_product_type_expression14736 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_function_expression_in_dot_expression14765 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOT_in_dot_expression14778 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_function_expression_in_dot_expression14783 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000001000000000L,0x0080080000000000L});
    public static final BitSet FOLLOW_clean_function_expression_in_dot_expression14798 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000001000000000L,0x0080080000000000L});
    public static final BitSet FOLLOW_clean_function_expression_in_function_expression14837 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_HASH_in_function_expression14850 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_clean_function_expression_in_function_expression14854 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_ident_in_clean_function_expression14894 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FUNCTION_in_clean_function_expression14915 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_ident_in_clean_function_expression14919 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0200000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_hat_expression_in_clean_function_expression14924 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0200000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_function_argument_list_in_clean_function_expression14939 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0200000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_CARAT_in_hat_expression14978 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_qualified_ident_in_hat_expression14983 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_adding_expression_in_hat_expression14997 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_PARAMS_in_function_argument_list15029 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_math_expression_in_function_argument_list15034 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_DBL_LBRACE_in_alternative_expression15081 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_alternative_expression_item_in_alternative_expression15086 = new BitSet(new long[]{0x0000000000000008L,0x0000040000000080L});
    public static final BitSet FOLLOW_IF_in_alternative_expression_item15131 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_adding_expression_in_alternative_expression_item15135 = new BitSet(new long[]{0x0000100020240000L,0x400000640BFC8000L,0xED14541100200000L,0x00A208081214C27FL,0x0000000000180012L});
    public static final BitSet FOLLOW_relational_expression_in_alternative_expression_item15139 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_OTHERWISE_in_alternative_expression_item15157 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_adding_expression_in_alternative_expression_item15161 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_ITERATION_in_iterated_construct15212 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_ident_in_iterated_construct15216 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_ident_in_iterated_construct15220 = new BitSet(new long[]{0x0000100020240000L,0x4000006408008000L,0xED14541100200000L,0x00A208080214C201L,0x0000000000180012L});
    public static final BitSet FOLLOW_math_type_expression_in_iterated_construct15236 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000040000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_where_clause_in_iterated_construct15254 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_math_expression_in_iterated_construct15272 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_LAMBDA_in_lambda_expression15325 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_ident_in_lambda_expression15329 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L,0x0080100000000000L});
    public static final BitSet FOLLOW_certain_qualified_ident_in_lambda_expression15349 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_ident_in_lambda_expression15387 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_math_expression_in_lambda_expression15419 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_qualified_numeric_literal_in_literal_expression15468 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NUMERIC_LITERAL_in_literal_expression15478 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CHARACTER_LITERAL_in_literal_expression15498 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRING_LITERAL_in_literal_expression15518 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NUMERIC_LITERAL_in_numeric_lit15559 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_QUALNUM_in_qualified_numeric_literal15597 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_ident_in_qualified_numeric_literal15601 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_numeric_lit_in_qualified_numeric_literal15605 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_NESTED_in_nested_expression15649 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_math_expression_in_nested_expression15653 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_ANGLE_in_outfix_expression15698 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_infix_expression_in_outfix_expression15704 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_DBL_ANGLE_in_outfix_expression15724 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_math_expression_in_outfix_expression15730 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_BAR_in_outfix_expression15750 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_math_expression_in_outfix_expression15756 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_DBL_BAR_in_outfix_expression15776 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_math_expression_in_outfix_expression15782 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_math_expression_in_parenthesized_expression15830 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LBRACE_in_set_constructor15862 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_ident_in_set_constructor15866 = new BitSet(new long[]{0x0000100020240000L,0x4000006408008000L,0xED14541100200000L,0x00A208080214C201L,0x0000000000180012L});
    public static final BitSet FOLLOW_math_type_expression_in_set_constructor15870 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000040000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_where_clause_in_set_constructor15887 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_math_expression_in_set_constructor15893 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_TUPLE_in_tuple_expression15941 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_math_expression_in_tuple_expression15946 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_WHERE_in_where_clause15985 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_math_expression_in_where_clause15989 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_EXPR_in_program_expression16020 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_program_logical_expression_in_program_expression16024 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_program_relational_expression_in_program_logical_expression16056 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AND_in_program_logical_expression16077 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_program_logical_expression_in_program_logical_expression16099 = new BitSet(new long[]{0x0000100000000000L,0x4000002400000000L,0xEC00501000000000L,0x20A008000804007EL,0x0000000000000090L});
    public static final BitSet FOLLOW_program_relational_expression_in_program_logical_expression16119 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_OR_in_program_logical_expression16139 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_program_logical_expression_in_program_logical_expression16161 = new BitSet(new long[]{0x0000100000000000L,0x4000002400000000L,0xEC00501000000000L,0x20A008000804007EL,0x0000000000000090L});
    public static final BitSet FOLLOW_program_relational_expression_in_program_logical_expression16181 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_program_adding_expression_in_program_relational_expression16231 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EQL_in_program_relational_expression16252 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_program_relational_expression_in_program_relational_expression16274 = new BitSet(new long[]{0x0000100000000000L,0x4000002400000000L,0xEC00501000000000L,0x20A0080008040000L,0x0000000000000090L});
    public static final BitSet FOLLOW_program_adding_expression_in_program_relational_expression16294 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_NOT_EQL_in_program_relational_expression16314 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_program_relational_expression_in_program_relational_expression16336 = new BitSet(new long[]{0x0000100000000000L,0x4000002400000000L,0xEC00501000000000L,0x20A0080008040000L,0x0000000000000090L});
    public static final BitSet FOLLOW_program_adding_expression_in_program_relational_expression16356 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_LT_in_program_relational_expression16376 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_program_relational_expression_in_program_relational_expression16399 = new BitSet(new long[]{0x0000100000000000L,0x4000002400000000L,0xEC00501000000000L,0x20A0080008040000L,0x0000000000000090L});
    public static final BitSet FOLLOW_program_adding_expression_in_program_relational_expression16419 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_LT_EQL_in_program_relational_expression16439 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_program_relational_expression_in_program_relational_expression16462 = new BitSet(new long[]{0x0000100000000000L,0x4000002400000000L,0xEC00501000000000L,0x20A0080008040000L,0x0000000000000090L});
    public static final BitSet FOLLOW_program_adding_expression_in_program_relational_expression16482 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_GT_in_program_relational_expression16502 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_program_relational_expression_in_program_relational_expression16525 = new BitSet(new long[]{0x0000100000000000L,0x4000002400000000L,0xEC00501000000000L,0x20A0080008040000L,0x0000000000000090L});
    public static final BitSet FOLLOW_program_adding_expression_in_program_relational_expression16545 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_GT_EQL_in_program_relational_expression16565 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_program_relational_expression_in_program_relational_expression16587 = new BitSet(new long[]{0x0000100000000000L,0x4000002400000000L,0xEC00501000000000L,0x20A0080008040000L,0x0000000000000090L});
    public static final BitSet FOLLOW_program_adding_expression_in_program_relational_expression16607 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_program_multiplying_expression_in_program_adding_expression16657 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PLUS_in_program_adding_expression16678 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_program_adding_expression_in_program_adding_expression16700 = new BitSet(new long[]{0x0000100000000000L,0x4000002400000000L,0xE000501000000000L,0x20A0080008040000L,0x0000000000000090L});
    public static final BitSet FOLLOW_program_multiplying_expression_in_program_adding_expression16720 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_MINUS_in_program_adding_expression16740 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_program_adding_expression_in_program_adding_expression16762 = new BitSet(new long[]{0x0000100000000000L,0x4000002400000000L,0xE000501000000000L,0x20A0080008040000L,0x0000000000000090L});
    public static final BitSet FOLLOW_program_multiplying_expression_in_program_adding_expression16782 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_program_exponential_expression_in_program_multiplying_expression16832 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MULTIPLY_in_program_multiplying_expression16853 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_program_multiplying_expression_in_program_multiplying_expression16875 = new BitSet(new long[]{0x0000000000000000L,0x0000002000000000L,0x8000501000000000L,0x20A0080008040000L,0x0000000000000090L});
    public static final BitSet FOLLOW_program_exponential_expression_in_program_multiplying_expression16895 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_DIVIDE_in_program_multiplying_expression16915 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_program_multiplying_expression_in_program_multiplying_expression16937 = new BitSet(new long[]{0x0000000000000000L,0x0000002000000000L,0x8000501000000000L,0x20A0080008040000L,0x0000000000000090L});
    public static final BitSet FOLLOW_program_exponential_expression_in_program_multiplying_expression16957 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_MOD_in_program_multiplying_expression16977 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_program_multiplying_expression_in_program_multiplying_expression16999 = new BitSet(new long[]{0x0000000000000000L,0x0000002000000000L,0x8000501000000000L,0x20A0080008040000L,0x0000000000000090L});
    public static final BitSet FOLLOW_program_exponential_expression_in_program_multiplying_expression17019 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_REM_in_program_multiplying_expression17039 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_program_multiplying_expression_in_program_multiplying_expression17061 = new BitSet(new long[]{0x0000000000000000L,0x0000002000000000L,0x8000501000000000L,0x20A0080008040000L,0x0000000000000090L});
    public static final BitSet FOLLOW_program_exponential_expression_in_program_multiplying_expression17081 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_DIV_in_program_multiplying_expression17101 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_program_multiplying_expression_in_program_multiplying_expression17123 = new BitSet(new long[]{0x0000000000000000L,0x0000002000000000L,0x8000501000000000L,0x20A0080008040000L,0x0000000000000090L});
    public static final BitSet FOLLOW_program_exponential_expression_in_program_multiplying_expression17143 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_program_unary_expression_in_program_exponential_expression17193 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EXP_in_program_exponential_expression17208 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_program_unary_expression_in_program_exponential_expression17226 = new BitSet(new long[]{0x0000000000000000L,0x0000002000000000L,0x8000501000000000L,0x20A0080008040000L,0x0000000000000090L});
    public static final BitSet FOLLOW_program_exponential_expression_in_program_exponential_expression17242 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_program_primitive_expression_in_program_unary_expression17282 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NOT_in_program_unary_expression17303 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_program_unary_expression_in_program_unary_expression17325 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_UNARY_MINUS_in_program_unary_expression17345 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_program_unary_expression_in_program_unary_expression17367 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_program_literal_expression_in_program_primitive_expression17413 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_program_variable_expression_in_program_primitive_expression17427 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_program_nested_expression_in_program_primitive_expression17441 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_program_dot_expression_in_program_variable_expression17468 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variable_expression_in_program_variable_expression17482 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_program_function_expression_in_program_dot_expression17513 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PROGDOT_in_program_dot_expression17526 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_ident_in_program_dot_expression17530 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_program_function_expression_in_program_dot_expression17549 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_FUNCTION_in_program_function_expression17604 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_ident_in_program_function_expression17608 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_program_function_argument_list_in_program_function_expression17612 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_PARAMS_in_program_function_argument_list17647 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_program_expression_in_program_function_argument_list17652 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000001000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_NESTED_in_program_nested_expression17681 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_program_expression_in_program_nested_expression17685 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_NUMERIC_LITERAL_in_program_literal_expression17715 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CHARACTER_LITERAL_in_program_literal_expression17735 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRING_LITERAL_in_program_literal_expression17755 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variable_array_expression_in_variable_expression17798 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_VARDOT_in_variable_expression17819 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_variable_array_expression_in_variable_expression17824 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000001000000000L,0x0080000008000000L});
    public static final BitSet FOLLOW_ident_in_variable_array_expression17868 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ARRAYFUNCTION_in_variable_array_expression17889 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_ident_in_variable_array_expression17893 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_variable_array_argument_list_in_variable_array_expression17897 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_PARAMS_in_variable_array_argument_list17932 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_program_expression_in_variable_array_argument_list17937 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_IDENT_in_certain_qualified_ident17970 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_ident_in_certain_qualified_ident17974 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_ident_in_certain_qualified_ident17978 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_IDENTIFIER_in_qualified_ident18017 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_ident_in_qualified_ident18021 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000001000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_ident_in_qualified_ident18026 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_IDENTIFIER_in_ident18066 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ident_in_math_theorem_ident18093 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NUMERIC_LITERAL_in_math_theorem_ident18107 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PROOFS_FOR_in_proof_module18141 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_ident_in_proof_module18145 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001004000000L,0x0080000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_module_formal_param_section_in_proof_module18158 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001004000000L,0x0080000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_uses_list_in_proof_module18173 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L,0x0080000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_proof_module_body_in_proof_module18180 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_ident_in_proof_module18184 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_PROOFBODY_in_proof_module_body18223 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_math_item_sequence_in_proof_module_body18236 = new BitSet(new long[]{0x0000042010020008L,0x000A000010000000L,0x0000000000088000L,0x0000A00020000000L});
    public static final BitSet FOLLOW_proof_in_proof_module_body18252 = new BitSet(new long[]{0x0000042010020008L,0x000A000010000000L,0x0000000000088000L,0x0000A00020000000L});
    public static final BitSet FOLLOW_PROOF_in_proof18285 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_math_item_reference_in_proof18289 = new BitSet(new long[]{0x0000040000080008L,0x0000000000001000L,0x0000001000000000L,0x0000A00000000000L,0x0000000200001800L});
    public static final BitSet FOLLOW_base_case_statement_head_in_proof18315 = new BitSet(new long[]{0x0000040000080008L,0x0000000000001000L,0x0000001000000000L,0x0000A00000000000L,0x0000000200001800L});
    public static final BitSet FOLLOW_base_case_statement_body_in_proof18345 = new BitSet(new long[]{0x0000040000080008L,0x0000000000001000L,0x0000001000000000L,0x0000A00000000000L,0x0000000200001800L});
    public static final BitSet FOLLOW_inductive_case_statement_head_in_proof18379 = new BitSet(new long[]{0x0000040000080008L,0x0000000000001000L,0x0000001000000000L,0x0000A00000000000L,0x0000000200001800L});
    public static final BitSet FOLLOW_inductive_case_statement_body_in_proof18409 = new BitSet(new long[]{0x0000040000080008L,0x0000000000001000L,0x0000001000000000L,0x0000A00000000000L,0x0000000200001800L});
    public static final BitSet FOLLOW_headed_proof_expression_in_proof18439 = new BitSet(new long[]{0x0000040000080008L,0x0000000000001000L,0x0000001000000000L,0x0000A00000000000L,0x0000000200001800L});
    public static final BitSet FOLLOW_proof_expression_in_proof18463 = new BitSet(new long[]{0x0000040000080008L,0x0000000000001000L,0x0000001000000000L,0x0000A00000000000L,0x0000000200001800L});
    public static final BitSet FOLLOW_IDENTIFIER_in_base_case_statement_head18532 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_base_case_statement_body_in_base_case_statement_head18542 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_IDENTIFIER_in_inductive_case_statement_head18578 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_inductive_case_statement_body_in_inductive_case_statement_head18588 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_BASECASE_in_base_case_statement_body18616 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_proof_expression_in_base_case_statement_body18620 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_INDUCTIVECASE_in_inductive_case_statement_body18649 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_proof_expression_in_inductive_case_statement_body18653 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_MATHITEMREF_in_math_item_reference18682 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_theorem_name_in_math_item_reference18694 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_lemma_name_in_math_item_reference18708 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_property_name_in_math_item_reference18722 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_corollary_name_in_math_item_reference18736 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_THEOREM_in_theorem_name18768 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_ident_in_theorem_name18772 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_LEMMA_in_lemma_name18791 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_ident_in_lemma_name18795 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_PROPERTY_in_property_name18814 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_ident_in_property_name18818 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_COROLLARY_in_corollary_name18837 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_math_theorem_ident_in_corollary_name18841 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_PROOFEXPRLIST_in_proof_expression_list18862 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_headed_proof_expression_in_proof_expression_list18878 = new BitSet(new long[]{0x0000040000080008L,0x0000000000001000L,0x0000001000000000L,0x0000A00000000000L,0x0000000200001800L});
    public static final BitSet FOLLOW_proof_expression_in_proof_expression_list18890 = new BitSet(new long[]{0x0000040000080008L,0x0000000000001000L,0x0000001000000000L,0x0000A00000000000L,0x0000000200001800L});
    public static final BitSet FOLLOW_IDENTIFIER_in_headed_proof_expression18925 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_proof_expression_in_headed_proof_expression18931 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_goal_declaration_in_proof_expression18960 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_standard_definition_declaration_in_proof_expression18972 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_supposition_deduction_pair_in_proof_expression18984 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_justification_declaration_in_proof_expression18996 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_GOAL_in_goal_declaration19017 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_math_expression_in_goal_declaration19021 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_SUPDEDUC_in_supposition_deduction_pair19048 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_supposition_declaration_in_supposition_deduction_pair19052 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_proof_expression_list_in_supposition_deduction_pair19061 = new BitSet(new long[]{0x0000010000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_supposition_deduction_pair19071 = new BitSet(new long[]{0x0000010000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_deduction_declaration_in_supposition_deduction_pair19084 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_SUPPOSITION_in_supposition_declaration19115 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_math_expression_in_supposition_declaration19136 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_math_variable_declarations_in_supposition_declaration19141 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_math_variable_declarations_in_supposition_declaration19168 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_math_expression_in_supposition_declaration19173 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_DECLARATIONS_in_math_variable_declarations19216 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_math_variable_declaration_group_in_math_variable_declarations19221 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000001000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_DEDUCTION_in_deduction_declaration19245 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_math_expression_in_deduction_declaration19249 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_SIMPLIFICATION_in_justification_declaration19269 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_math_expression_in_justification_declaration19273 = new BitSet(new long[]{0x0000000000100000L});
    public static final BitSet FOLLOW_justification_in_justification_declaration19277 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_BY_in_justification19299 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_double_hyp_rule_justification_in_justification19315 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_single_hyp_rule_justification_in_justification19333 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_single_hyp_rule_justification_in_justification19351 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_single_hyp_rule_justification_in_justification19369 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_hyp_desig_in_justification19385 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_simple_justification_in_justification19395 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_def_justification_in_justification19411 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_indexed_def_justification_in_justification19428 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_hyp_desig_in_double_hyp_rule_justification19449 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_hyp_desig_in_double_hyp_rule_justification19453 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_rules_set_1_in_double_hyp_rule_justification19458 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_hyp_desig_in_single_hyp_rule_justification19481 = new BitSet(new long[]{0x0000040000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000006000L});
    public static final BitSet FOLLOW_rules_set_1_in_single_hyp_rule_justification19495 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rules_set_2_in_single_hyp_rule_justification19513 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_def_justification_in_single_hyp_rule_justification19523 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DEFINITION_in_def_justification19547 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_UNIQUE_in_def_justification19561 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_fn_name_in_def_justification19574 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_INDEXED_DEFINITION_in_indexed_def_justification19600 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_ident_in_indexed_def_justification19605 = new BitSet(new long[]{0x0000100020000410L,0x4000026403FC8500L,0xEC00001100200000L,0x008000000000007FL,0x0000000000E00000L});
    public static final BitSet FOLLOW_fn_name_in_indexed_def_justification19611 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000001000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_ident_in_indexed_def_justification19621 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_rules_set_3_in_simple_justification19658 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rules_set_2_in_simple_justification19666 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RULE1_in_rules_set_119694 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_MODUS_PONENS_in_rules_set_119701 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_AND_RULE_in_rules_set_119722 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_CONTRADICTION_in_rules_set_119746 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_EQUALITY_in_rules_set_119765 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_ALTERNATIVE_ELIMINATION_in_rules_set_119790 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_COMMON_CONCLUSION_in_rules_set_119800 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_RULE2_in_rules_set_219830 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_REDUCTIO_AD_ABSURDUM_in_rules_set_219837 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_UNIVERSAL_GENERALIZATION_in_rules_set_219853 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_EXISTENTIAL_GENERALIZATION_in_rules_set_219865 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_OR_RULE_in_rules_set_219875 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_CONJUNCT_ELIMINATION_in_rules_set_219905 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_QUANTIFIER_DISTRIBUTION_in_rules_set_219921 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_UNIVERSAL_INSTANTIATION_in_rules_set_219935 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_EXISTENTIAL_INSTANTIATION_in_rules_set_219949 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_RULE3_in_rules_set_319977 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_EXCLUDED_MIDDLE_in_rules_set_319981 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_HYPDESIG_in_hyp_desig20008 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_SELF_in_hyp_desig20012 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_lemma_call_in_hyp_desig20024 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_corollary_name_in_hyp_desig20036 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_theorem_call_in_hyp_desig20052 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_supposition_call_in_hyp_desig20071 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_definition_call_in_hyp_desig20088 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_reference_marker_call_in_hyp_desig20106 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_LEMMA_in_lemma_call20138 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_ident_in_lemma_call20142 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_THEOREM_in_theorem_call20167 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_ident_in_theorem_call20171 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_SUPPOSITION_in_supposition_call20195 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DEFINITION_in_definition_call20219 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_LPAREN_in_definition_call20222 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_ident_in_definition_call20226 = new BitSet(new long[]{0x0000100020000410L,0x4000026403FC8500L,0xEC00001100200000L,0x008000000000007FL,0x0000000000E00000L});
    public static final BitSet FOLLOW_fn_name_in_definition_call20232 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000001000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_definition_params_in_definition_call20236 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000001000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_ident_in_definition_call20247 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_qualified_ident_in_definition_params20276 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_REFCALL_in_reference_marker_call20302 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_ident_in_reference_marker_call20306 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_infix_symbol_in_fn_name20330 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_prefix_symbol_in_fn_name20340 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENTIFIER_in_synpred1_RBuilder18305 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_BASECASE_in_synpred1_RBuilder18307 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_BASECASE_in_synpred2_RBuilder18338 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENTIFIER_in_synpred3_RBuilder18369 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_INDUCTIVECASE_in_synpred3_RBuilder18371 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_INDUCTIVECASE_in_synpred4_RBuilder18402 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENTIFIER_in_synpred5_RBuilder18432 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENTIFIER_in_synpred6_RBuilder18871 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_hyp_desig_in_synpred7_RBuilder19306 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_hyp_desig_in_synpred7_RBuilder19308 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_hyp_desig_in_synpred8_RBuilder19324 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_rules_set_1_in_synpred8_RBuilder19326 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_hyp_desig_in_synpred9_RBuilder19342 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_rules_set_2_in_synpred9_RBuilder19344 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_hyp_desig_in_synpred10_RBuilder19360 = new BitSet(new long[]{0x0000040000000000L});
    public static final BitSet FOLLOW_DEFINITION_in_synpred10_RBuilder19362 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_hyp_desig_in_synpred11_RBuilder19378 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DEFINITION_in_synpred12_RBuilder19404 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INDEXED_DEFINITION_in_synpred13_RBuilder19421 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RULE1_in_synpred14_RBuilder19488 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RULE2_in_synpred15_RBuilder19506 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_UNIQUE_in_synpred16_RBuilder19553 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RULE3_in_synpred17_RBuilder19651 = new BitSet(new long[]{0x0000000000000002L});

}