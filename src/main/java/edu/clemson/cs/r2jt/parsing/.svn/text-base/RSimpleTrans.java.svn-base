// $ANTLR 3.3 Nov 30, 2010 12:50:56 RSimpleTrans.g 2012-03-09 16:38:51

    package edu.clemson.cs.r2jt.parsing;
    
    import edu.clemson.cs.r2jt.errors.ErrorHandler;
    import edu.clemson.cs.r2jt.utilities.Flag;
		import java.io.FileOutputStream;
		import java.io.IOException;
		import java.io.OutputStream;
		import java.util.regex.*;
		import java.util.Arrays;


import org.antlr.runtime.*;
import org.antlr.runtime.tree.*;import java.util.Stack;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import org.antlr.stringtemplate.*;
import org.antlr.stringtemplate.language.*;
import java.util.HashMap;
public class RSimpleTrans extends TreeParser {
    public static final String[] tokenNames = new String[] {
        "<invalid>", "<EOR>", "<DOWN>", "<UP>", "ABS", "AD", "ABSURDUM", "ALL", "ALTERS", "ALTERNATIVE", "AND", "ARRAY", "ASSUME", "AUX_CODE", "AUX_VAR", "AUX_VARS", "AUXILIARY", "AXIOM", "BOOLEAN", "BASECASE", "BY", "CARTPROD", "CATEGORICAL", "CASE", "CHANGING", "CLEARS", "COMMON", "CONCLUSION", "COMMUTATIVITY", "COMPLEMENT", "CONCEPT", "MODULE_CONCEPT", "CONFIRM", "CONJUNCT", "CONSTRAINT", "CONTRADICTION", "CONVENTION", "COROLLARY", "CORR", "DECREASING", "DEDUCTION", "DEFINES", "DEFINITION", "DISTRIBUTION", "DIV", "DO", "DURATION", "ELAPSED_TIME", "ELSE", "ELIMINATION", "END", "ENHANCED", "ENHANCEMENT", "MODULE_ENHANCEMENT", "ENSURES", "EQUALITY", "EVALUATES", "EXCLUDED", "EXEMPLAR", "EXISTENTIAL", "EXISTS", "EXIT", "FACILITY", "FAC_FINAL", "FAC_INIT", "FAMILY", "FINALIZATION", "FROM", "FOR", "FORGET", "GENERALIZATION", "IF", "IFF", "IMPLICIT", "IMPLIES", "INDUCTIVE", "INDUCTIVECASE", "INITIALIZATION", "INSTANTIATION", "INTERSECT", "INTRODUCES", "IS", "IN", "NOT_IN", "NOT_PROP_SUBSET", "NOT_SUBSET", "NOT_SUBSTR", "PROP_SUBSET", "SUBSET", "SUBSTR", "ITERATE", "LAMBDA", "LEMMA", "LOCAL", "MAINP_DISP", "MAINTAINING", "MATH", "MIDDLE", "MOD", "MODELED", "MODUS", "NOT", "CAT", "OF", "OPERATION", "OR", "OTHERWISE", "PERF_FINAL", "PERF_INIT", "PONENS", "PRESERVES", "PROCEDURE", "MODULE_PROFILE", "PROOF", "PROOFS_FOR", "PROPERTY", "QED", "QUANTIFIER", "REALIZATION", "MODULE_REALIZATION", "REALIZED", "REASSIGNS", "RECORD", "RECURSIVE", "REDUCTIO", "RELATED", "REM", "REMEMBER", "REPEAT", "REPLACES", "REPRESENTED", "REQUIRES", "RESPECTS", "RESTORES", "RULE", "SELF", "SHORT_FOR", "SSET", "STATIC", "SUBTYPE", "SUCH", "SUPPOSITION", "THAT", "THEN", "THEOREM", "THEORY", "THERE", "TIMES", "TYPE", "TYPE_FAMILY", "UNION", "UNIQUE", "UNIT", "UNIVERSAL", "UPDATES", "USES", "VAR", "VARIABLES", "WHEN", "WHERE", "WHILE", "WITHOUT", "WITH_PROFILE", "LETTER", "ALPHABETIC", "IDENTIFIER", "WS", "SL_COMMENT", "ML_COMMENT", "DIGIT", "DIGITS", "DOT", "REAL", "NUMERIC_LITERAL", "ESC", "CHARACTER_LITERAL", "COMMA", "LPAREN", "RPAREN", "LBRACE", "RBRACE", "DBL_LBRACE", "DBL_RBRACE", "LSQBRACK", "RSQBRACK", "HASH", "CARAT", "PLUS", "MINUS", "AMPERSAND", "MULTIPLY", "DIVIDE", "EXP", "RANGE", "NOT_EQL", "GT_EQL", "LT_EQL", "EQL", "LT", "GT", "LL", "GG", "FUNCARROW", "COLON", "SEMICOLON", "SWAP_OP", "ASSIGN_OP", "BAR", "DBL_BAR", "DQUOTE", "TILDE", "STRING_LITERAL", "USABLE", "FREE_OPERATOR", "REQUIRED_SYMBOLIC", "AND_RULE", "AFFECTS", "ALTERNATIVE_ELIMINATION", "ANGLE", "AUX_OPERATION", "ARRAYFUNCTION", "BETWEEN_EXPR", "CATEGORICAL_DEFINITION", "CHOICES", "COMMON_CONCLUSION", "CONFIRM_TYPE", "CONJUNCT_ELIMINATION", "DECLARATIONS", "DBL_ANGLE", "ENHANCED_BY", "EXCLUDED_MIDDLE", "EXISTENTIAL_GENERALIZATION", "EXISTENTIAL_INSTANTIATION", "EXISTS_UNIQUE", "EXPR", "FORALL", "FUNCTION", "IDENT", "IMPLICIT_DEF", "INDEXED_DEFINITION", "INDUCTIVE_DEF", "ITERATE_EXIT", "ITERATION", "LOCAL_MATH_TYPE", "MATH_TYPE", "MODUS_PONENS", "NESTED", "OR_RULE", "PARAMS", "QUANTIFIER_DISTRIBUTION", "RECURSIVE_OPERATION_PROCEDURE", "RECURSIVE_PROCEDURE", "REDUCTIO_AD_ABSURDUM", "RELATED_BY", "PROGDOT", "SET_EXPR", "STATEMENT", "STATEMENT_SEQUENCE", "TUPLE", "TYPEX", "UNARY_FREE_OP", "UNARY_MINUS", "UNIVERSAL_GENERALIZATION", "UNIVERSAL_INSTANTIATION", "VARDOT", "PROOFBODY", "MATHITEMREF", "PROOFEXPR", "SUPDEDUC", "SIMPLIFICATION", "RULE1", "RULE2", "RULE3", "HYPDESIG", "PROOFEXPRLIST", "REFCALL", "QUALNUM", "LOCALVAREXP", "XOR", "ANDTHEN", "ORELSE", "BIG_UNION", "BIG_INTERSECT", "BIG_SUM", "BIG_PRODUCT", "BIG_CONCAT", "ELSIF", "DEFAULT", "PROP_SUBSTR", "NOT_PROP_SUBSTR", "GOAL", "MATH_SUBTYPE", "DBL_", "POWERSET", "UNARY_FREE_OPERATOR"
    };
    public static final int EOF=-1;
    public static final int ABS=4;
    public static final int AD=5;
    public static final int ABSURDUM=6;
    public static final int ALL=7;
    public static final int ALTERS=8;
    public static final int ALTERNATIVE=9;
    public static final int AND=10;
    public static final int ARRAY=11;
    public static final int ASSUME=12;
    public static final int AUX_CODE=13;
    public static final int AUX_VAR=14;
    public static final int AUX_VARS=15;
    public static final int AUXILIARY=16;
    public static final int AXIOM=17;
    public static final int BOOLEAN=18;
    public static final int BASECASE=19;
    public static final int BY=20;
    public static final int CARTPROD=21;
    public static final int CATEGORICAL=22;
    public static final int CASE=23;
    public static final int CHANGING=24;
    public static final int CLEARS=25;
    public static final int COMMON=26;
    public static final int CONCLUSION=27;
    public static final int COMMUTATIVITY=28;
    public static final int COMPLEMENT=29;
    public static final int CONCEPT=30;
    public static final int MODULE_CONCEPT=31;
    public static final int CONFIRM=32;
    public static final int CONJUNCT=33;
    public static final int CONSTRAINT=34;
    public static final int CONTRADICTION=35;
    public static final int CONVENTION=36;
    public static final int COROLLARY=37;
    public static final int CORR=38;
    public static final int DECREASING=39;
    public static final int DEDUCTION=40;
    public static final int DEFINES=41;
    public static final int DEFINITION=42;
    public static final int DISTRIBUTION=43;
    public static final int DIV=44;
    public static final int DO=45;
    public static final int DURATION=46;
    public static final int ELAPSED_TIME=47;
    public static final int ELSE=48;
    public static final int ELIMINATION=49;
    public static final int END=50;
    public static final int ENHANCED=51;
    public static final int ENHANCEMENT=52;
    public static final int MODULE_ENHANCEMENT=53;
    public static final int ENSURES=54;
    public static final int EQUALITY=55;
    public static final int EVALUATES=56;
    public static final int EXCLUDED=57;
    public static final int EXEMPLAR=58;
    public static final int EXISTENTIAL=59;
    public static final int EXISTS=60;
    public static final int EXIT=61;
    public static final int FACILITY=62;
    public static final int FAC_FINAL=63;
    public static final int FAC_INIT=64;
    public static final int FAMILY=65;
    public static final int FINALIZATION=66;
    public static final int FROM=67;
    public static final int FOR=68;
    public static final int FORGET=69;
    public static final int GENERALIZATION=70;
    public static final int IF=71;
    public static final int IFF=72;
    public static final int IMPLICIT=73;
    public static final int IMPLIES=74;
    public static final int INDUCTIVE=75;
    public static final int INDUCTIVECASE=76;
    public static final int INITIALIZATION=77;
    public static final int INSTANTIATION=78;
    public static final int INTERSECT=79;
    public static final int INTRODUCES=80;
    public static final int IS=81;
    public static final int IN=82;
    public static final int NOT_IN=83;
    public static final int NOT_PROP_SUBSET=84;
    public static final int NOT_SUBSET=85;
    public static final int NOT_SUBSTR=86;
    public static final int PROP_SUBSET=87;
    public static final int SUBSET=88;
    public static final int SUBSTR=89;
    public static final int ITERATE=90;
    public static final int LAMBDA=91;
    public static final int LEMMA=92;
    public static final int LOCAL=93;
    public static final int MAINP_DISP=94;
    public static final int MAINTAINING=95;
    public static final int MATH=96;
    public static final int MIDDLE=97;
    public static final int MOD=98;
    public static final int MODELED=99;
    public static final int MODUS=100;
    public static final int NOT=101;
    public static final int CAT=102;
    public static final int OF=103;
    public static final int OPERATION=104;
    public static final int OR=105;
    public static final int OTHERWISE=106;
    public static final int PERF_FINAL=107;
    public static final int PERF_INIT=108;
    public static final int PONENS=109;
    public static final int PRESERVES=110;
    public static final int PROCEDURE=111;
    public static final int MODULE_PROFILE=112;
    public static final int PROOF=113;
    public static final int PROOFS_FOR=114;
    public static final int PROPERTY=115;
    public static final int QED=116;
    public static final int QUANTIFIER=117;
    public static final int REALIZATION=118;
    public static final int MODULE_REALIZATION=119;
    public static final int REALIZED=120;
    public static final int REASSIGNS=121;
    public static final int RECORD=122;
    public static final int RECURSIVE=123;
    public static final int REDUCTIO=124;
    public static final int RELATED=125;
    public static final int REM=126;
    public static final int REMEMBER=127;
    public static final int REPEAT=128;
    public static final int REPLACES=129;
    public static final int REPRESENTED=130;
    public static final int REQUIRES=131;
    public static final int RESPECTS=132;
    public static final int RESTORES=133;
    public static final int RULE=134;
    public static final int SELF=135;
    public static final int SHORT_FOR=136;
    public static final int SSET=137;
    public static final int STATIC=138;
    public static final int SUBTYPE=139;
    public static final int SUCH=140;
    public static final int SUPPOSITION=141;
    public static final int THAT=142;
    public static final int THEN=143;
    public static final int THEOREM=144;
    public static final int THEORY=145;
    public static final int THERE=146;
    public static final int TIMES=147;
    public static final int TYPE=148;
    public static final int TYPE_FAMILY=149;
    public static final int UNION=150;
    public static final int UNIQUE=151;
    public static final int UNIT=152;
    public static final int UNIVERSAL=153;
    public static final int UPDATES=154;
    public static final int USES=155;
    public static final int VAR=156;
    public static final int VARIABLES=157;
    public static final int WHEN=158;
    public static final int WHERE=159;
    public static final int WHILE=160;
    public static final int WITHOUT=161;
    public static final int WITH_PROFILE=162;
    public static final int LETTER=163;
    public static final int ALPHABETIC=164;
    public static final int IDENTIFIER=165;
    public static final int WS=166;
    public static final int SL_COMMENT=167;
    public static final int ML_COMMENT=168;
    public static final int DIGIT=169;
    public static final int DIGITS=170;
    public static final int DOT=171;
    public static final int REAL=172;
    public static final int NUMERIC_LITERAL=173;
    public static final int ESC=174;
    public static final int CHARACTER_LITERAL=175;
    public static final int COMMA=176;
    public static final int LPAREN=177;
    public static final int RPAREN=178;
    public static final int LBRACE=179;
    public static final int RBRACE=180;
    public static final int DBL_LBRACE=181;
    public static final int DBL_RBRACE=182;
    public static final int LSQBRACK=183;
    public static final int RSQBRACK=184;
    public static final int HASH=185;
    public static final int CARAT=186;
    public static final int PLUS=187;
    public static final int MINUS=188;
    public static final int AMPERSAND=189;
    public static final int MULTIPLY=190;
    public static final int DIVIDE=191;
    public static final int EXP=192;
    public static final int RANGE=193;
    public static final int NOT_EQL=194;
    public static final int GT_EQL=195;
    public static final int LT_EQL=196;
    public static final int EQL=197;
    public static final int LT=198;
    public static final int GT=199;
    public static final int LL=200;
    public static final int GG=201;
    public static final int FUNCARROW=202;
    public static final int COLON=203;
    public static final int SEMICOLON=204;
    public static final int SWAP_OP=205;
    public static final int ASSIGN_OP=206;
    public static final int BAR=207;
    public static final int DBL_BAR=208;
    public static final int DQUOTE=209;
    public static final int TILDE=210;
    public static final int STRING_LITERAL=211;
    public static final int USABLE=212;
    public static final int FREE_OPERATOR=213;
    public static final int REQUIRED_SYMBOLIC=214;
    public static final int AND_RULE=215;
    public static final int AFFECTS=216;
    public static final int ALTERNATIVE_ELIMINATION=217;
    public static final int ANGLE=218;
    public static final int AUX_OPERATION=219;
    public static final int ARRAYFUNCTION=220;
    public static final int BETWEEN_EXPR=221;
    public static final int CATEGORICAL_DEFINITION=222;
    public static final int CHOICES=223;
    public static final int COMMON_CONCLUSION=224;
    public static final int CONFIRM_TYPE=225;
    public static final int CONJUNCT_ELIMINATION=226;
    public static final int DECLARATIONS=227;
    public static final int DBL_ANGLE=228;
    public static final int ENHANCED_BY=229;
    public static final int EXCLUDED_MIDDLE=230;
    public static final int EXISTENTIAL_GENERALIZATION=231;
    public static final int EXISTENTIAL_INSTANTIATION=232;
    public static final int EXISTS_UNIQUE=233;
    public static final int EXPR=234;
    public static final int FORALL=235;
    public static final int FUNCTION=236;
    public static final int IDENT=237;
    public static final int IMPLICIT_DEF=238;
    public static final int INDEXED_DEFINITION=239;
    public static final int INDUCTIVE_DEF=240;
    public static final int ITERATE_EXIT=241;
    public static final int ITERATION=242;
    public static final int LOCAL_MATH_TYPE=243;
    public static final int MATH_TYPE=244;
    public static final int MODUS_PONENS=245;
    public static final int NESTED=246;
    public static final int OR_RULE=247;
    public static final int PARAMS=248;
    public static final int QUANTIFIER_DISTRIBUTION=249;
    public static final int RECURSIVE_OPERATION_PROCEDURE=250;
    public static final int RECURSIVE_PROCEDURE=251;
    public static final int REDUCTIO_AD_ABSURDUM=252;
    public static final int RELATED_BY=253;
    public static final int PROGDOT=254;
    public static final int SET_EXPR=255;
    public static final int STATEMENT=256;
    public static final int STATEMENT_SEQUENCE=257;
    public static final int TUPLE=258;
    public static final int TYPEX=259;
    public static final int UNARY_FREE_OP=260;
    public static final int UNARY_MINUS=261;
    public static final int UNIVERSAL_GENERALIZATION=262;
    public static final int UNIVERSAL_INSTANTIATION=263;
    public static final int VARDOT=264;
    public static final int PROOFBODY=265;
    public static final int MATHITEMREF=266;
    public static final int PROOFEXPR=267;
    public static final int SUPDEDUC=268;
    public static final int SIMPLIFICATION=269;
    public static final int RULE1=270;
    public static final int RULE2=271;
    public static final int RULE3=272;
    public static final int HYPDESIG=273;
    public static final int PROOFEXPRLIST=274;
    public static final int REFCALL=275;
    public static final int QUALNUM=276;
    public static final int LOCALVAREXP=277;
    public static final int XOR=278;
    public static final int ANDTHEN=279;
    public static final int ORELSE=280;
    public static final int BIG_UNION=281;
    public static final int BIG_INTERSECT=282;
    public static final int BIG_SUM=283;
    public static final int BIG_PRODUCT=284;
    public static final int BIG_CONCAT=285;
    public static final int ELSIF=286;
    public static final int DEFAULT=287;
    public static final int PROP_SUBSTR=288;
    public static final int NOT_PROP_SUBSTR=289;
    public static final int GOAL=290;
    public static final int MATH_SUBTYPE=291;
    public static final int DBL_=292;
    public static final int POWERSET=293;
    public static final int UNARY_FREE_OPERATOR=294;

    // delegates
    // delegators


        public RSimpleTrans(TreeNodeStream input) {
            this(input, new RecognizerSharedState());
        }
        public RSimpleTrans(TreeNodeStream input, RecognizerSharedState state) {
            super(input, state);
             
        }
        
    protected StringTemplateGroup templateLib =
      new StringTemplateGroup("RSimpleTransTemplates", AngleBracketTemplateLexer.class);

    public void setTemplateLib(StringTemplateGroup templateLib) {
      this.templateLib = templateLib;
    }
    public StringTemplateGroup getTemplateLib() {
      return templateLib;
    }
    /** allows convenient multi-value initialization:
     *  "new STAttrMap().put(...).put(...)"
     */
    public static class STAttrMap extends HashMap {
      public STAttrMap put(String attrName, Object value) {
        super.put(attrName, value);
        return this;
      }
      public STAttrMap put(String attrName, int value) {
        super.put(attrName, new Integer(value));
        return this;
      }
    }

    public String[] getTokenNames() { return RSimpleTrans.tokenNames; }
    public String getGrammarFileName() { return "RSimpleTrans.g"; }


        private static final String FLAG_SECTION_NAME = "SimpleTranslation";
              
        private static final String FLAG_DESC_TRANSLATE = 
                      "Translate RESOLVE file to simple Java source file. (no imports)";
        public static final Flag FLAG_SIMPLE_TRANSLATE = 
                      new Flag(FLAG_SECTION_NAME, "translateSimple", FLAG_DESC_TRANSLATE);
                      
        public static final void setUpFlags(){
              }
              
        private ErrorHandler err;
        
        private int currLine = 1;
        private int indentLevel = 0;
        
        private String[] standardTypes = {
          "Boolean",
          "Integer",
          "Character",
          "Char_Str",
          "Stack",
          "Queue"
        };
        
        public String getErrorMessage(RecognitionException e,
            String[] tokenNames)
            {
              List stack = (List)getRuleInvocationStack(e, this.getClass().getName());
              String msg = null;
              if ( e instanceof NoViableAltException ) {
                NoViableAltException nvae = (NoViableAltException)e;
                msg = " no viable alt; token="+e.token+
                " (decision="+nvae.decisionNumber+
                " state "+nvae.stateNumber+")"+
                " input "+nvae.input+")"+
                " decision=<<"+nvae.grammarDecisionDescription+">>";
              }
              if( e instanceof MismatchedTokenException ) {
                MismatchedTokenException mte = (MismatchedTokenException)e;
                String exp = null;
                if(mte.expecting == Token.EOF){
                  exp = "EOF";
                }
                else{
                  exp = tokenNames[mte.expecting];
                }
                msg = "expecting " + exp + ", found '" + mte.token.getText() + "'";
              }
              else {
                msg = super.getErrorMessage(e, tokenNames);
              }
              
              // For debugging changes to the grammar change this to return
              // both the stack (lists the rules visited) and the msg
              return msg;
              //return "Parser: "+stack + " " + msg;
        }
        
        private String[] adjustLine(CommonTree token){
            String[] ret = {"",""};
            String nl = "";
            String indent = "";
            int line = token.getLine();
            //int pos = token.getCharPositionInLine();
            if(line > currLine) {
              //System.err.println("token: " + token + " CurrLine: "+currLine+" myLine: "+line);
              int i = 0;
    	        for(i = currLine; i < line; i++){
    	            nl += "\n";
    	            currLine++;
    	        }
              ret[1] = getIndent();
    	        //int newPos = pos / 4 + 1;
    	        //for(i = 0; i < pos; i++){
    	            //indent += " ";
    	        //}
              //System.err.println("token: " + token + " indent: "+i);
            }
            ret[0] = nl;
            //ret[1] = indent;
            return ret;
        }
        
        private void incIndent(){
          indentLevel = indentLevel + 1;
        }
        
        private void decIndent(){
          indentLevel = indentLevel - 1;
        }
        
        private void incLine(){
          currLine++;
        }
        
        private String getIndent(){
          String indent = "";
          for(int i = 0; i < indentLevel; i++){
            indent += "    ";
          }
          return indent;
        }
        
        public void outputAsFile(String fileName, String fileContents) {
    					String[] temp = fileName.split("\\.");
    					fileName = temp[0] + ".java";
    					  if (fileContents != null && fileContents.length() > 0) {
    					      try {   
    					          byte buf[] = fileContents.getBytes();
    					          OutputStream outFile = new FileOutputStream(fileName);
    					          outFile.write(buf);
    					          //System.out.println("Writing file: "+fileName);
    					      } catch (IOException ex) {
    					          //FIX: Something should be done with this exception
    					          ;
    					      }
    					  } else {
    					      //System.out.println("No translation available for " + fileName);
    					  }
        }
        
        private String templatePrepend(StringTemplate st, String inject){
              String orig = st.toString();
              String trimmed = orig.trim();
              char c = trimmed.charAt(0);
              int index = orig.indexOf(c);
              String ret = orig.substring(0,index);
              ret += inject;
              ret += orig.substring(index,orig.length());
              //System.err.println(ret);
              return ret;
        }
            
        private String templateAppend(StringTemplate st, String inject){
              String orig = st.toString();
              String trimmed = orig.trim();
              char c = trimmed.charAt(trimmed.length());
              int index = orig.indexOf(c);
              String ret = orig.substring(0,index);
              ret += inject;
              ret += orig.substring(index,orig.length());
              //System.err.println(ret);
              return ret;
        }


    public static class module_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "module"
    // RSimpleTrans.g:176:1: module[ErrorHandler err] : ( proof_module | theory_module | conceptual_module | performance_module | realization_body_module | enhancement_module | fm+= facility_module -> template(dec6=$fm) \"<dec6>\") ;
    public final RSimpleTrans.module_return module(ErrorHandler err) throws RecognitionException {
        RSimpleTrans.module_return retval = new RSimpleTrans.module_return();
        retval.start = input.LT(1);

        List list_fm=null;
        RuleReturnScope fm = null;

        this.err = err;

        try {
            // RSimpleTrans.g:180:5: ( ( proof_module | theory_module | conceptual_module | performance_module | realization_body_module | enhancement_module | fm+= facility_module -> template(dec6=$fm) \"<dec6>\") )
            // RSimpleTrans.g:180:9: ( proof_module | theory_module | conceptual_module | performance_module | realization_body_module | enhancement_module | fm+= facility_module -> template(dec6=$fm) \"<dec6>\")
            {
            // RSimpleTrans.g:180:9: ( proof_module | theory_module | conceptual_module | performance_module | realization_body_module | enhancement_module | fm+= facility_module -> template(dec6=$fm) \"<dec6>\")
            int alt1=7;
            switch ( input.LA(1) ) {
            case PROOFS_FOR:
                {
                alt1=1;
                }
                break;
            case THEORY:
                {
                alt1=2;
                }
                break;
            case MODULE_CONCEPT:
                {
                alt1=3;
                }
                break;
            case MODULE_PROFILE:
                {
                alt1=4;
                }
                break;
            case MODULE_REALIZATION:
                {
                alt1=5;
                }
                break;
            case MODULE_ENHANCEMENT:
                {
                alt1=6;
                }
                break;
            case FACILITY:
                {
                alt1=7;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 1, 0, input);

                throw nvae;
            }

            switch (alt1) {
                case 1 :
                    // RSimpleTrans.g:180:13: proof_module
                    {
                    pushFollow(FOLLOW_proof_module_in_module98);
                    proof_module();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // RSimpleTrans.g:181:13: theory_module
                    {
                    pushFollow(FOLLOW_theory_module_in_module112);
                    theory_module();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;
                case 3 :
                    // RSimpleTrans.g:182:13: conceptual_module
                    {
                    pushFollow(FOLLOW_conceptual_module_in_module126);
                    conceptual_module();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;
                case 4 :
                    // RSimpleTrans.g:183:13: performance_module
                    {
                    pushFollow(FOLLOW_performance_module_in_module140);
                    performance_module();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;
                case 5 :
                    // RSimpleTrans.g:184:13: realization_body_module
                    {
                    pushFollow(FOLLOW_realization_body_module_in_module155);
                    realization_body_module();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;
                case 6 :
                    // RSimpleTrans.g:185:13: enhancement_module
                    {
                    pushFollow(FOLLOW_enhancement_module_in_module169);
                    enhancement_module();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;
                case 7 :
                    // RSimpleTrans.g:186:13: fm+= facility_module
                    {
                    pushFollow(FOLLOW_facility_module_in_module185);
                    fm=facility_module();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_fm==null) list_fm=new ArrayList();
                    list_fm.add(fm.getTemplate());



                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 186:33: -> template(dec6=$fm) \"<dec6>\"
                      {
                          retval.st = new StringTemplate(templateLib, "<dec6>",
                        new STAttrMap().put("dec6", list_fm));
                      }

                    }
                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "module"

    public static class theory_module_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "theory_module"
    // RSimpleTrans.g:195:1: theory_module : ^( THEORY ident ( module_formal_param_section )? ( uses_list )? ( math_item_sequence )? ) ;
    public final RSimpleTrans.theory_module_return theory_module() throws RecognitionException {
        RSimpleTrans.theory_module_return retval = new RSimpleTrans.theory_module_return();
        retval.start = input.LT(1);

        try {
            // RSimpleTrans.g:196:5: ( ^( THEORY ident ( module_formal_param_section )? ( uses_list )? ( math_item_sequence )? ) )
            // RSimpleTrans.g:196:9: ^( THEORY ident ( module_formal_param_section )? ( uses_list )? ( math_item_sequence )? )
            {
            match(input,THEORY,FOLLOW_THEORY_in_theory_module239); if (state.failed) return retval;

            match(input, Token.DOWN, null); if (state.failed) return retval;
            pushFollow(FOLLOW_ident_in_theory_module241);
            ident();

            state._fsp--;
            if (state.failed) return retval;
            // RSimpleTrans.g:197:9: ( module_formal_param_section )?
            int alt2=2;
            int LA2_0 = input.LA(1);

            if ( (LA2_0==PARAMS) ) {
                alt2=1;
            }
            switch (alt2) {
                case 1 :
                    // RSimpleTrans.g:197:10: module_formal_param_section
                    {
                    pushFollow(FOLLOW_module_formal_param_section_in_theory_module252);
                    module_formal_param_section();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }

            // RSimpleTrans.g:198:9: ( uses_list )?
            int alt3=2;
            int LA3_0 = input.LA(1);

            if ( (LA3_0==USES) ) {
                alt3=1;
            }
            switch (alt3) {
                case 1 :
                    // RSimpleTrans.g:198:10: uses_list
                    {
                    pushFollow(FOLLOW_uses_list_in_theory_module265);
                    uses_list();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }

            // RSimpleTrans.g:199:9: ( math_item_sequence )?
            int alt4=2;
            int LA4_0 = input.LA(1);

            if ( (LA4_0==AXIOM||LA4_0==COMMUTATIVITY||LA4_0==COROLLARY||LA4_0==DEFINITION||LA4_0==LEMMA||LA4_0==PROPERTY||LA4_0==THEOREM||LA4_0==CATEGORICAL_DEFINITION||LA4_0==IMPLICIT_DEF||LA4_0==INDUCTIVE_DEF||(LA4_0>=LOCAL_MATH_TYPE && LA4_0<=MATH_TYPE)||LA4_0==MATH_SUBTYPE) ) {
                alt4=1;
            }
            switch (alt4) {
                case 1 :
                    // RSimpleTrans.g:199:10: math_item_sequence
                    {
                    pushFollow(FOLLOW_math_item_sequence_in_theory_module278);
                    math_item_sequence();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            match(input, Token.UP, null); if (state.failed) return retval;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "theory_module"

    public static class math_item_sequence_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "math_item_sequence"
    // RSimpleTrans.g:204:1: math_item_sequence : ( math_item )+ ;
    public final RSimpleTrans.math_item_sequence_return math_item_sequence() throws RecognitionException {
        RSimpleTrans.math_item_sequence_return retval = new RSimpleTrans.math_item_sequence_return();
        retval.start = input.LT(1);

        try {
            // RSimpleTrans.g:205:5: ( ( math_item )+ )
            // RSimpleTrans.g:205:9: ( math_item )+
            {
            // RSimpleTrans.g:205:9: ( math_item )+
            int cnt5=0;
            loop5:
            do {
                int alt5=2;
                int LA5_0 = input.LA(1);

                if ( (LA5_0==AXIOM||LA5_0==COMMUTATIVITY||LA5_0==COROLLARY||LA5_0==DEFINITION||LA5_0==LEMMA||LA5_0==PROPERTY||LA5_0==THEOREM||LA5_0==CATEGORICAL_DEFINITION||LA5_0==IMPLICIT_DEF||LA5_0==INDUCTIVE_DEF||(LA5_0>=LOCAL_MATH_TYPE && LA5_0<=MATH_TYPE)||LA5_0==MATH_SUBTYPE) ) {
                    alt5=1;
                }


                switch (alt5) {
            	case 1 :
            	    // RSimpleTrans.g:205:10: math_item
            	    {
            	    pushFollow(FOLLOW_math_item_in_math_item_sequence311);
            	    math_item();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }
            	    break;

            	default :
            	    if ( cnt5 >= 1 ) break loop5;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(5, input);
                        throw eee;
                }
                cnt5++;
            } while (true);


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "math_item_sequence"

    public static class math_item_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "math_item"
    // RSimpleTrans.g:208:1: math_item : ( formal_type_declaration | math_type_declaration | definition_declaration | categorical_definition_declaration | math_assertion_declaration | subtype_declaration );
    public final RSimpleTrans.math_item_return math_item() throws RecognitionException {
        RSimpleTrans.math_item_return retval = new RSimpleTrans.math_item_return();
        retval.start = input.LT(1);

        try {
            // RSimpleTrans.g:209:5: ( formal_type_declaration | math_type_declaration | definition_declaration | categorical_definition_declaration | math_assertion_declaration | subtype_declaration )
            int alt6=6;
            switch ( input.LA(1) ) {
            case LOCAL_MATH_TYPE:
                {
                alt6=1;
                }
                break;
            case MATH_TYPE:
                {
                alt6=2;
                }
                break;
            case DEFINITION:
            case IMPLICIT_DEF:
            case INDUCTIVE_DEF:
                {
                alt6=3;
                }
                break;
            case CATEGORICAL_DEFINITION:
                {
                alt6=4;
                }
                break;
            case AXIOM:
            case COMMUTATIVITY:
            case COROLLARY:
            case LEMMA:
            case PROPERTY:
            case THEOREM:
                {
                alt6=5;
                }
                break;
            case MATH_SUBTYPE:
                {
                alt6=6;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 6, 0, input);

                throw nvae;
            }

            switch (alt6) {
                case 1 :
                    // RSimpleTrans.g:209:9: formal_type_declaration
                    {
                    pushFollow(FOLLOW_formal_type_declaration_in_math_item332);
                    formal_type_declaration();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // RSimpleTrans.g:210:9: math_type_declaration
                    {
                    pushFollow(FOLLOW_math_type_declaration_in_math_item342);
                    math_type_declaration();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;
                case 3 :
                    // RSimpleTrans.g:211:9: definition_declaration
                    {
                    pushFollow(FOLLOW_definition_declaration_in_math_item352);
                    definition_declaration();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;
                case 4 :
                    // RSimpleTrans.g:212:9: categorical_definition_declaration
                    {
                    pushFollow(FOLLOW_categorical_definition_declaration_in_math_item362);
                    categorical_definition_declaration();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;
                case 5 :
                    // RSimpleTrans.g:213:9: math_assertion_declaration
                    {
                    pushFollow(FOLLOW_math_assertion_declaration_in_math_item372);
                    math_assertion_declaration();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;
                case 6 :
                    // RSimpleTrans.g:214:9: subtype_declaration
                    {
                    pushFollow(FOLLOW_subtype_declaration_in_math_item382);
                    subtype_declaration();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "math_item"

    public static class conceptual_module_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "conceptual_module"
    // RSimpleTrans.g:221:1: conceptual_module : ^( MODULE_CONCEPT id1= ident ( module_formal_param_section )? ( uses_list )? ( requires_clause )? ( concept_item_sequence )? ) ;
    public final RSimpleTrans.conceptual_module_return conceptual_module() throws RecognitionException {
        RSimpleTrans.conceptual_module_return retval = new RSimpleTrans.conceptual_module_return();
        retval.start = input.LT(1);

        RSimpleTrans.ident_return id1 = null;


        try {
            // RSimpleTrans.g:222:5: ( ^( MODULE_CONCEPT id1= ident ( module_formal_param_section )? ( uses_list )? ( requires_clause )? ( concept_item_sequence )? ) )
            // RSimpleTrans.g:222:9: ^( MODULE_CONCEPT id1= ident ( module_formal_param_section )? ( uses_list )? ( requires_clause )? ( concept_item_sequence )? )
            {
            match(input,MODULE_CONCEPT,FOLLOW_MODULE_CONCEPT_in_conceptual_module406); if (state.failed) return retval;

            match(input, Token.DOWN, null); if (state.failed) return retval;
            pushFollow(FOLLOW_ident_in_conceptual_module410);
            id1=ident();

            state._fsp--;
            if (state.failed) return retval;
            // RSimpleTrans.g:223:9: ( module_formal_param_section )?
            int alt7=2;
            int LA7_0 = input.LA(1);

            if ( (LA7_0==PARAMS) ) {
                alt7=1;
            }
            switch (alt7) {
                case 1 :
                    // RSimpleTrans.g:223:10: module_formal_param_section
                    {
                    pushFollow(FOLLOW_module_formal_param_section_in_conceptual_module422);
                    module_formal_param_section();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }

            // RSimpleTrans.g:224:9: ( uses_list )?
            int alt8=2;
            int LA8_0 = input.LA(1);

            if ( (LA8_0==USES) ) {
                alt8=1;
            }
            switch (alt8) {
                case 1 :
                    // RSimpleTrans.g:224:10: uses_list
                    {
                    pushFollow(FOLLOW_uses_list_in_conceptual_module436);
                    uses_list();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }

            // RSimpleTrans.g:225:9: ( requires_clause )?
            int alt9=2;
            int LA9_0 = input.LA(1);

            if ( (LA9_0==REQUIRES) ) {
                alt9=1;
            }
            switch (alt9) {
                case 1 :
                    // RSimpleTrans.g:225:10: requires_clause
                    {
                    pushFollow(FOLLOW_requires_clause_in_conceptual_module449);
                    requires_clause();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }

            // RSimpleTrans.g:226:9: ( concept_item_sequence )?
            int alt10=2;
            int LA10_0 = input.LA(1);

            if ( (LA10_0==CONSTRAINT||(LA10_0>=DEFINES && LA10_0<=DEFINITION)||(LA10_0>=FAC_FINAL && LA10_0<=FAC_INIT)||LA10_0==OPERATION||LA10_0==TYPE_FAMILY||LA10_0==VAR||LA10_0==CONFIRM_TYPE||LA10_0==IMPLICIT_DEF||LA10_0==INDUCTIVE_DEF) ) {
                alt10=1;
            }
            switch (alt10) {
                case 1 :
                    // RSimpleTrans.g:226:10: concept_item_sequence
                    {
                    pushFollow(FOLLOW_concept_item_sequence_in_conceptual_module462);
                    concept_item_sequence();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            match(input, Token.UP, null); if (state.failed) return retval;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "conceptual_module"

    public static class concept_item_sequence_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "concept_item_sequence"
    // RSimpleTrans.g:230:1: concept_item_sequence : ( concept_item )+ ;
    public final RSimpleTrans.concept_item_sequence_return concept_item_sequence() throws RecognitionException {
        RSimpleTrans.concept_item_sequence_return retval = new RSimpleTrans.concept_item_sequence_return();
        retval.start = input.LT(1);

        try {
            // RSimpleTrans.g:231:5: ( ( concept_item )+ )
            // RSimpleTrans.g:231:9: ( concept_item )+
            {
            // RSimpleTrans.g:231:9: ( concept_item )+
            int cnt11=0;
            loop11:
            do {
                int alt11=2;
                int LA11_0 = input.LA(1);

                if ( (LA11_0==CONSTRAINT||(LA11_0>=DEFINES && LA11_0<=DEFINITION)||(LA11_0>=FAC_FINAL && LA11_0<=FAC_INIT)||LA11_0==OPERATION||LA11_0==TYPE_FAMILY||LA11_0==VAR||LA11_0==CONFIRM_TYPE||LA11_0==IMPLICIT_DEF||LA11_0==INDUCTIVE_DEF) ) {
                    alt11=1;
                }


                switch (alt11) {
            	case 1 :
            	    // RSimpleTrans.g:231:10: concept_item
            	    {
            	    pushFollow(FOLLOW_concept_item_in_concept_item_sequence494);
            	    concept_item();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }
            	    break;

            	default :
            	    if ( cnt11 >= 1 ) break loop11;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(11, input);
                        throw eee;
                }
                cnt11++;
            } while (true);


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "concept_item_sequence"

    public static class concept_item_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "concept_item"
    // RSimpleTrans.g:234:1: concept_item : ( confirm_math_type_declaration | concept_state_variable_declaration | constraint_clause | module_concept_init_declaration | module_concept_final_declaration | type_declaration | operation_declaration | definition_declaration | defines_declaration );
    public final RSimpleTrans.concept_item_return concept_item() throws RecognitionException {
        RSimpleTrans.concept_item_return retval = new RSimpleTrans.concept_item_return();
        retval.start = input.LT(1);

        try {
            // RSimpleTrans.g:235:5: ( confirm_math_type_declaration | concept_state_variable_declaration | constraint_clause | module_concept_init_declaration | module_concept_final_declaration | type_declaration | operation_declaration | definition_declaration | defines_declaration )
            int alt12=9;
            switch ( input.LA(1) ) {
            case CONFIRM_TYPE:
                {
                alt12=1;
                }
                break;
            case VAR:
                {
                alt12=2;
                }
                break;
            case CONSTRAINT:
                {
                alt12=3;
                }
                break;
            case FAC_INIT:
                {
                alt12=4;
                }
                break;
            case FAC_FINAL:
                {
                alt12=5;
                }
                break;
            case TYPE_FAMILY:
                {
                alt12=6;
                }
                break;
            case OPERATION:
                {
                alt12=7;
                }
                break;
            case DEFINITION:
            case IMPLICIT_DEF:
            case INDUCTIVE_DEF:
                {
                alt12=8;
                }
                break;
            case DEFINES:
                {
                alt12=9;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 12, 0, input);

                throw nvae;
            }

            switch (alt12) {
                case 1 :
                    // RSimpleTrans.g:236:5: confirm_math_type_declaration
                    {
                    pushFollow(FOLLOW_confirm_math_type_declaration_in_concept_item517);
                    confirm_math_type_declaration();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // RSimpleTrans.g:237:9: concept_state_variable_declaration
                    {
                    pushFollow(FOLLOW_concept_state_variable_declaration_in_concept_item527);
                    concept_state_variable_declaration();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;
                case 3 :
                    // RSimpleTrans.g:238:9: constraint_clause
                    {
                    pushFollow(FOLLOW_constraint_clause_in_concept_item537);
                    constraint_clause();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;
                case 4 :
                    // RSimpleTrans.g:239:9: module_concept_init_declaration
                    {
                    pushFollow(FOLLOW_module_concept_init_declaration_in_concept_item547);
                    module_concept_init_declaration();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;
                case 5 :
                    // RSimpleTrans.g:240:9: module_concept_final_declaration
                    {
                    pushFollow(FOLLOW_module_concept_final_declaration_in_concept_item557);
                    module_concept_final_declaration();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;
                case 6 :
                    // RSimpleTrans.g:241:9: type_declaration
                    {
                    pushFollow(FOLLOW_type_declaration_in_concept_item567);
                    type_declaration();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;
                case 7 :
                    // RSimpleTrans.g:242:9: operation_declaration
                    {
                    pushFollow(FOLLOW_operation_declaration_in_concept_item577);
                    operation_declaration();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;
                case 8 :
                    // RSimpleTrans.g:243:9: definition_declaration
                    {
                    pushFollow(FOLLOW_definition_declaration_in_concept_item587);
                    definition_declaration();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;
                case 9 :
                    // RSimpleTrans.g:244:9: defines_declaration
                    {
                    pushFollow(FOLLOW_defines_declaration_in_concept_item597);
                    defines_declaration();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "concept_item"

    public static class performance_module_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "performance_module"
    // RSimpleTrans.g:251:1: performance_module : ^( MODULE_PROFILE id1= ident ( module_formal_param_section )? ident ident ( ident ident )? ( uses_list )? ( requires_clause )? ( performance_item_sequence )? ) ;
    public final RSimpleTrans.performance_module_return performance_module() throws RecognitionException {
        RSimpleTrans.performance_module_return retval = new RSimpleTrans.performance_module_return();
        retval.start = input.LT(1);

        RSimpleTrans.ident_return id1 = null;


        try {
            // RSimpleTrans.g:252:5: ( ^( MODULE_PROFILE id1= ident ( module_formal_param_section )? ident ident ( ident ident )? ( uses_list )? ( requires_clause )? ( performance_item_sequence )? ) )
            // RSimpleTrans.g:253:9: ^( MODULE_PROFILE id1= ident ( module_formal_param_section )? ident ident ( ident ident )? ( uses_list )? ( requires_clause )? ( performance_item_sequence )? )
            {
            match(input,MODULE_PROFILE,FOLLOW_MODULE_PROFILE_in_performance_module633); if (state.failed) return retval;

            match(input, Token.DOWN, null); if (state.failed) return retval;
            pushFollow(FOLLOW_ident_in_performance_module637);
            id1=ident();

            state._fsp--;
            if (state.failed) return retval;
            // RSimpleTrans.g:254:9: ( module_formal_param_section )?
            int alt13=2;
            int LA13_0 = input.LA(1);

            if ( (LA13_0==PARAMS) ) {
                alt13=1;
            }
            switch (alt13) {
                case 1 :
                    // RSimpleTrans.g:254:10: module_formal_param_section
                    {
                    pushFollow(FOLLOW_module_formal_param_section_in_performance_module648);
                    module_formal_param_section();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }

            pushFollow(FOLLOW_ident_in_performance_module660);
            ident();

            state._fsp--;
            if (state.failed) return retval;
            pushFollow(FOLLOW_ident_in_performance_module662);
            ident();

            state._fsp--;
            if (state.failed) return retval;
            // RSimpleTrans.g:255:21: ( ident ident )?
            int alt14=2;
            int LA14_0 = input.LA(1);

            if ( (LA14_0==IDENTIFIER) ) {
                alt14=1;
            }
            switch (alt14) {
                case 1 :
                    // RSimpleTrans.g:255:22: ident ident
                    {
                    pushFollow(FOLLOW_ident_in_performance_module665);
                    ident();

                    state._fsp--;
                    if (state.failed) return retval;
                    pushFollow(FOLLOW_ident_in_performance_module667);
                    ident();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }

            // RSimpleTrans.g:256:9: ( uses_list )?
            int alt15=2;
            int LA15_0 = input.LA(1);

            if ( (LA15_0==USES) ) {
                alt15=1;
            }
            switch (alt15) {
                case 1 :
                    // RSimpleTrans.g:256:10: uses_list
                    {
                    pushFollow(FOLLOW_uses_list_in_performance_module680);
                    uses_list();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }

            // RSimpleTrans.g:257:9: ( requires_clause )?
            int alt16=2;
            int LA16_0 = input.LA(1);

            if ( (LA16_0==REQUIRES) ) {
                alt16=1;
            }
            switch (alt16) {
                case 1 :
                    // RSimpleTrans.g:257:10: requires_clause
                    {
                    pushFollow(FOLLOW_requires_clause_in_performance_module693);
                    requires_clause();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }

            // RSimpleTrans.g:258:9: ( performance_item_sequence )?
            int alt17=2;
            int LA17_0 = input.LA(1);

            if ( (LA17_0==CONSTRAINT||(LA17_0>=DEFINES && LA17_0<=DEFINITION)||LA17_0==OPERATION||(LA17_0>=PERF_FINAL && LA17_0<=PERF_INIT)||LA17_0==TYPE_FAMILY||LA17_0==VAR||LA17_0==CONFIRM_TYPE||LA17_0==IMPLICIT_DEF||LA17_0==INDUCTIVE_DEF) ) {
                alt17=1;
            }
            switch (alt17) {
                case 1 :
                    // RSimpleTrans.g:258:10: performance_item_sequence
                    {
                    pushFollow(FOLLOW_performance_item_sequence_in_performance_module706);
                    performance_item_sequence();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            match(input, Token.UP, null); if (state.failed) return retval;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "performance_module"

    public static class performance_item_sequence_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "performance_item_sequence"
    // RSimpleTrans.g:261:1: performance_item_sequence : ( performance_item )+ ;
    public final RSimpleTrans.performance_item_sequence_return performance_item_sequence() throws RecognitionException {
        RSimpleTrans.performance_item_sequence_return retval = new RSimpleTrans.performance_item_sequence_return();
        retval.start = input.LT(1);

        try {
            // RSimpleTrans.g:262:5: ( ( performance_item )+ )
            // RSimpleTrans.g:262:9: ( performance_item )+
            {
            // RSimpleTrans.g:262:9: ( performance_item )+
            int cnt18=0;
            loop18:
            do {
                int alt18=2;
                int LA18_0 = input.LA(1);

                if ( (LA18_0==CONSTRAINT||(LA18_0>=DEFINES && LA18_0<=DEFINITION)||LA18_0==OPERATION||(LA18_0>=PERF_FINAL && LA18_0<=PERF_INIT)||LA18_0==TYPE_FAMILY||LA18_0==VAR||LA18_0==CONFIRM_TYPE||LA18_0==IMPLICIT_DEF||LA18_0==INDUCTIVE_DEF) ) {
                    alt18=1;
                }


                switch (alt18) {
            	case 1 :
            	    // RSimpleTrans.g:262:10: performance_item
            	    {
            	    pushFollow(FOLLOW_performance_item_in_performance_item_sequence729);
            	    performance_item();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }
            	    break;

            	default :
            	    if ( cnt18 >= 1 ) break loop18;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(18, input);
                        throw eee;
                }
                cnt18++;
            } while (true);


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "performance_item_sequence"

    public static class performance_item_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "performance_item"
    // RSimpleTrans.g:265:1: performance_item : ( confirm_math_type_declaration | concept_state_variable_declaration | constraint_clause | performance_module_init_declaration | performance_module_final_declaration | performance_type_declaration | performance_operation_declaration | definition_declaration | defines_declaration );
    public final RSimpleTrans.performance_item_return performance_item() throws RecognitionException {
        RSimpleTrans.performance_item_return retval = new RSimpleTrans.performance_item_return();
        retval.start = input.LT(1);

        try {
            // RSimpleTrans.g:266:5: ( confirm_math_type_declaration | concept_state_variable_declaration | constraint_clause | performance_module_init_declaration | performance_module_final_declaration | performance_type_declaration | performance_operation_declaration | definition_declaration | defines_declaration )
            int alt19=9;
            switch ( input.LA(1) ) {
            case CONFIRM_TYPE:
                {
                alt19=1;
                }
                break;
            case VAR:
                {
                alt19=2;
                }
                break;
            case CONSTRAINT:
                {
                alt19=3;
                }
                break;
            case PERF_INIT:
                {
                alt19=4;
                }
                break;
            case PERF_FINAL:
                {
                alt19=5;
                }
                break;
            case TYPE_FAMILY:
                {
                alt19=6;
                }
                break;
            case OPERATION:
                {
                alt19=7;
                }
                break;
            case DEFINITION:
            case IMPLICIT_DEF:
            case INDUCTIVE_DEF:
                {
                alt19=8;
                }
                break;
            case DEFINES:
                {
                alt19=9;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 19, 0, input);

                throw nvae;
            }

            switch (alt19) {
                case 1 :
                    // RSimpleTrans.g:267:5: confirm_math_type_declaration
                    {
                    pushFollow(FOLLOW_confirm_math_type_declaration_in_performance_item752);
                    confirm_math_type_declaration();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // RSimpleTrans.g:268:9: concept_state_variable_declaration
                    {
                    pushFollow(FOLLOW_concept_state_variable_declaration_in_performance_item762);
                    concept_state_variable_declaration();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;
                case 3 :
                    // RSimpleTrans.g:269:9: constraint_clause
                    {
                    pushFollow(FOLLOW_constraint_clause_in_performance_item772);
                    constraint_clause();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;
                case 4 :
                    // RSimpleTrans.g:270:9: performance_module_init_declaration
                    {
                    pushFollow(FOLLOW_performance_module_init_declaration_in_performance_item782);
                    performance_module_init_declaration();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;
                case 5 :
                    // RSimpleTrans.g:271:9: performance_module_final_declaration
                    {
                    pushFollow(FOLLOW_performance_module_final_declaration_in_performance_item792);
                    performance_module_final_declaration();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;
                case 6 :
                    // RSimpleTrans.g:272:9: performance_type_declaration
                    {
                    pushFollow(FOLLOW_performance_type_declaration_in_performance_item802);
                    performance_type_declaration();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;
                case 7 :
                    // RSimpleTrans.g:273:9: performance_operation_declaration
                    {
                    pushFollow(FOLLOW_performance_operation_declaration_in_performance_item812);
                    performance_operation_declaration();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;
                case 8 :
                    // RSimpleTrans.g:274:9: definition_declaration
                    {
                    pushFollow(FOLLOW_definition_declaration_in_performance_item822);
                    definition_declaration();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;
                case 9 :
                    // RSimpleTrans.g:275:9: defines_declaration
                    {
                    pushFollow(FOLLOW_defines_declaration_in_performance_item832);
                    defines_declaration();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "performance_item"

    public static class enhancement_module_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "enhancement_module"
    // RSimpleTrans.g:282:1: enhancement_module : ^( MODULE_ENHANCEMENT id1= ident ( module_formal_param_section )? ident ( uses_list )? ( requires_clause )? ( enhancement_item_sequence )? ) ;
    public final RSimpleTrans.enhancement_module_return enhancement_module() throws RecognitionException {
        RSimpleTrans.enhancement_module_return retval = new RSimpleTrans.enhancement_module_return();
        retval.start = input.LT(1);

        RSimpleTrans.ident_return id1 = null;


        try {
            // RSimpleTrans.g:283:5: ( ^( MODULE_ENHANCEMENT id1= ident ( module_formal_param_section )? ident ( uses_list )? ( requires_clause )? ( enhancement_item_sequence )? ) )
            // RSimpleTrans.g:283:9: ^( MODULE_ENHANCEMENT id1= ident ( module_formal_param_section )? ident ( uses_list )? ( requires_clause )? ( enhancement_item_sequence )? )
            {
            match(input,MODULE_ENHANCEMENT,FOLLOW_MODULE_ENHANCEMENT_in_enhancement_module856); if (state.failed) return retval;

            match(input, Token.DOWN, null); if (state.failed) return retval;
            pushFollow(FOLLOW_ident_in_enhancement_module860);
            id1=ident();

            state._fsp--;
            if (state.failed) return retval;
            // RSimpleTrans.g:284:9: ( module_formal_param_section )?
            int alt20=2;
            int LA20_0 = input.LA(1);

            if ( (LA20_0==PARAMS) ) {
                alt20=1;
            }
            switch (alt20) {
                case 1 :
                    // RSimpleTrans.g:284:10: module_formal_param_section
                    {
                    pushFollow(FOLLOW_module_formal_param_section_in_enhancement_module872);
                    module_formal_param_section();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }

            pushFollow(FOLLOW_ident_in_enhancement_module885);
            ident();

            state._fsp--;
            if (state.failed) return retval;
            // RSimpleTrans.g:286:9: ( uses_list )?
            int alt21=2;
            int LA21_0 = input.LA(1);

            if ( (LA21_0==USES) ) {
                alt21=1;
            }
            switch (alt21) {
                case 1 :
                    // RSimpleTrans.g:286:10: uses_list
                    {
                    pushFollow(FOLLOW_uses_list_in_enhancement_module897);
                    uses_list();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }

            // RSimpleTrans.g:287:9: ( requires_clause )?
            int alt22=2;
            int LA22_0 = input.LA(1);

            if ( (LA22_0==REQUIRES) ) {
                alt22=1;
            }
            switch (alt22) {
                case 1 :
                    // RSimpleTrans.g:287:10: requires_clause
                    {
                    pushFollow(FOLLOW_requires_clause_in_enhancement_module910);
                    requires_clause();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }

            // RSimpleTrans.g:288:9: ( enhancement_item_sequence )?
            int alt23=2;
            int LA23_0 = input.LA(1);

            if ( ((LA23_0>=DEFINES && LA23_0<=DEFINITION)||LA23_0==OPERATION||LA23_0==TYPE_FAMILY||LA23_0==VAR||LA23_0==IMPLICIT_DEF||LA23_0==INDUCTIVE_DEF) ) {
                alt23=1;
            }
            switch (alt23) {
                case 1 :
                    // RSimpleTrans.g:288:10: enhancement_item_sequence
                    {
                    pushFollow(FOLLOW_enhancement_item_sequence_in_enhancement_module923);
                    enhancement_item_sequence();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            match(input, Token.UP, null); if (state.failed) return retval;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "enhancement_module"

    public static class enhancement_item_sequence_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "enhancement_item_sequence"
    // RSimpleTrans.g:291:1: enhancement_item_sequence : ( enhancement_item )+ ;
    public final RSimpleTrans.enhancement_item_sequence_return enhancement_item_sequence() throws RecognitionException {
        RSimpleTrans.enhancement_item_sequence_return retval = new RSimpleTrans.enhancement_item_sequence_return();
        retval.start = input.LT(1);

        try {
            // RSimpleTrans.g:292:5: ( ( enhancement_item )+ )
            // RSimpleTrans.g:292:9: ( enhancement_item )+
            {
            // RSimpleTrans.g:292:9: ( enhancement_item )+
            int cnt24=0;
            loop24:
            do {
                int alt24=2;
                int LA24_0 = input.LA(1);

                if ( ((LA24_0>=DEFINES && LA24_0<=DEFINITION)||LA24_0==OPERATION||LA24_0==TYPE_FAMILY||LA24_0==VAR||LA24_0==IMPLICIT_DEF||LA24_0==INDUCTIVE_DEF) ) {
                    alt24=1;
                }


                switch (alt24) {
            	case 1 :
            	    // RSimpleTrans.g:292:10: enhancement_item
            	    {
            	    pushFollow(FOLLOW_enhancement_item_in_enhancement_item_sequence946);
            	    enhancement_item();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }
            	    break;

            	default :
            	    if ( cnt24 >= 1 ) break loop24;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(24, input);
                        throw eee;
                }
                cnt24++;
            } while (true);


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "enhancement_item_sequence"

    public static class enhancement_item_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "enhancement_item"
    // RSimpleTrans.g:295:1: enhancement_item : ( concept_state_variable_declaration | type_declaration | operation_declaration | definition_declaration | defines_declaration );
    public final RSimpleTrans.enhancement_item_return enhancement_item() throws RecognitionException {
        RSimpleTrans.enhancement_item_return retval = new RSimpleTrans.enhancement_item_return();
        retval.start = input.LT(1);

        try {
            // RSimpleTrans.g:296:5: ( concept_state_variable_declaration | type_declaration | operation_declaration | definition_declaration | defines_declaration )
            int alt25=5;
            switch ( input.LA(1) ) {
            case VAR:
                {
                alt25=1;
                }
                break;
            case TYPE_FAMILY:
                {
                alt25=2;
                }
                break;
            case OPERATION:
                {
                alt25=3;
                }
                break;
            case DEFINITION:
            case IMPLICIT_DEF:
            case INDUCTIVE_DEF:
                {
                alt25=4;
                }
                break;
            case DEFINES:
                {
                alt25=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 25, 0, input);

                throw nvae;
            }

            switch (alt25) {
                case 1 :
                    // RSimpleTrans.g:296:9: concept_state_variable_declaration
                    {
                    pushFollow(FOLLOW_concept_state_variable_declaration_in_enhancement_item967);
                    concept_state_variable_declaration();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // RSimpleTrans.g:297:9: type_declaration
                    {
                    pushFollow(FOLLOW_type_declaration_in_enhancement_item977);
                    type_declaration();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;
                case 3 :
                    // RSimpleTrans.g:298:9: operation_declaration
                    {
                    pushFollow(FOLLOW_operation_declaration_in_enhancement_item987);
                    operation_declaration();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;
                case 4 :
                    // RSimpleTrans.g:299:9: definition_declaration
                    {
                    pushFollow(FOLLOW_definition_declaration_in_enhancement_item997);
                    definition_declaration();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;
                case 5 :
                    // RSimpleTrans.g:300:9: defines_declaration
                    {
                    pushFollow(FOLLOW_defines_declaration_in_enhancement_item1007);
                    defines_declaration();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "enhancement_item"

    public static class realization_body_module_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "realization_body_module"
    // RSimpleTrans.g:307:1: realization_body_module : ^( MODULE_REALIZATION id1= ident ( WITH_PROFILE ident )? ( module_formal_param_section )? ( ( ident OF )=> body_enhancement_section | body_concept_section ) ( uses_list )? ( requires_clause )? ( body_item_sequence )? ) ;
    public final RSimpleTrans.realization_body_module_return realization_body_module() throws RecognitionException {
        RSimpleTrans.realization_body_module_return retval = new RSimpleTrans.realization_body_module_return();
        retval.start = input.LT(1);

        RSimpleTrans.ident_return id1 = null;


        try {
            // RSimpleTrans.g:308:5: ( ^( MODULE_REALIZATION id1= ident ( WITH_PROFILE ident )? ( module_formal_param_section )? ( ( ident OF )=> body_enhancement_section | body_concept_section ) ( uses_list )? ( requires_clause )? ( body_item_sequence )? ) )
            // RSimpleTrans.g:308:9: ^( MODULE_REALIZATION id1= ident ( WITH_PROFILE ident )? ( module_formal_param_section )? ( ( ident OF )=> body_enhancement_section | body_concept_section ) ( uses_list )? ( requires_clause )? ( body_item_sequence )? )
            {
            match(input,MODULE_REALIZATION,FOLLOW_MODULE_REALIZATION_in_realization_body_module1031); if (state.failed) return retval;

            match(input, Token.DOWN, null); if (state.failed) return retval;
            pushFollow(FOLLOW_ident_in_realization_body_module1035);
            id1=ident();

            state._fsp--;
            if (state.failed) return retval;
            // RSimpleTrans.g:309:9: ( WITH_PROFILE ident )?
            int alt26=2;
            int LA26_0 = input.LA(1);

            if ( (LA26_0==WITH_PROFILE) ) {
                alt26=1;
            }
            switch (alt26) {
                case 1 :
                    // RSimpleTrans.g:309:10: WITH_PROFILE ident
                    {
                    match(input,WITH_PROFILE,FOLLOW_WITH_PROFILE_in_realization_body_module1047); if (state.failed) return retval;
                    pushFollow(FOLLOW_ident_in_realization_body_module1049);
                    ident();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }

            // RSimpleTrans.g:309:31: ( module_formal_param_section )?
            int alt27=2;
            int LA27_0 = input.LA(1);

            if ( (LA27_0==PARAMS) ) {
                alt27=1;
            }
            switch (alt27) {
                case 1 :
                    // RSimpleTrans.g:309:32: module_formal_param_section
                    {
                    pushFollow(FOLLOW_module_formal_param_section_in_realization_body_module1054);
                    module_formal_param_section();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }

            // RSimpleTrans.g:310:9: ( ( ident OF )=> body_enhancement_section | body_concept_section )
            int alt28=2;
            int LA28_0 = input.LA(1);

            if ( (LA28_0==ENHANCEMENT) && (synpred1_RSimpleTrans())) {
                alt28=1;
            }
            else if ( (LA28_0==CONCEPT) ) {
                alt28=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 28, 0, input);

                throw nvae;
            }
            switch (alt28) {
                case 1 :
                    // RSimpleTrans.g:310:13: ( ident OF )=> body_enhancement_section
                    {
                    pushFollow(FOLLOW_body_enhancement_section_in_realization_body_module1078);
                    body_enhancement_section();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // RSimpleTrans.g:311:13: body_concept_section
                    {
                    pushFollow(FOLLOW_body_concept_section_in_realization_body_module1092);
                    body_concept_section();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }

            // RSimpleTrans.g:313:9: ( uses_list )?
            int alt29=2;
            int LA29_0 = input.LA(1);

            if ( (LA29_0==USES) ) {
                alt29=1;
            }
            switch (alt29) {
                case 1 :
                    // RSimpleTrans.g:313:10: uses_list
                    {
                    pushFollow(FOLLOW_uses_list_in_realization_body_module1114);
                    uses_list();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }

            // RSimpleTrans.g:314:9: ( requires_clause )?
            int alt30=2;
            int LA30_0 = input.LA(1);

            if ( (LA30_0==REQUIRES) ) {
                alt30=1;
            }
            switch (alt30) {
                case 1 :
                    // RSimpleTrans.g:314:10: requires_clause
                    {
                    pushFollow(FOLLOW_requires_clause_in_realization_body_module1127);
                    requires_clause();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }

            // RSimpleTrans.g:315:9: ( body_item_sequence )?
            int alt31=2;
            int LA31_0 = input.LA(1);

            if ( (LA31_0==CONVENTION||LA31_0==CORR||LA31_0==DEFINITION||(LA31_0>=FACILITY && LA31_0<=FAC_INIT)||LA31_0==OPERATION||LA31_0==PROCEDURE||LA31_0==TYPE||LA31_0==VAR||LA31_0==AUX_OPERATION||LA31_0==IMPLICIT_DEF||LA31_0==INDUCTIVE_DEF||(LA31_0>=RECURSIVE_OPERATION_PROCEDURE && LA31_0<=RECURSIVE_PROCEDURE)) ) {
                alt31=1;
            }
            switch (alt31) {
                case 1 :
                    // RSimpleTrans.g:315:10: body_item_sequence
                    {
                    pushFollow(FOLLOW_body_item_sequence_in_realization_body_module1140);
                    body_item_sequence();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            match(input, Token.UP, null); if (state.failed) return retval;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "realization_body_module"

    public static class body_concept_section_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "body_concept_section"
    // RSimpleTrans.g:318:1: body_concept_section : ^( CONCEPT ident ( ident )* ) ;
    public final RSimpleTrans.body_concept_section_return body_concept_section() throws RecognitionException {
        RSimpleTrans.body_concept_section_return retval = new RSimpleTrans.body_concept_section_return();
        retval.start = input.LT(1);

        try {
            // RSimpleTrans.g:319:5: ( ^( CONCEPT ident ( ident )* ) )
            // RSimpleTrans.g:319:9: ^( CONCEPT ident ( ident )* )
            {
            match(input,CONCEPT,FOLLOW_CONCEPT_in_body_concept_section1163); if (state.failed) return retval;

            match(input, Token.DOWN, null); if (state.failed) return retval;
            pushFollow(FOLLOW_ident_in_body_concept_section1165);
            ident();

            state._fsp--;
            if (state.failed) return retval;
            // RSimpleTrans.g:319:25: ( ident )*
            loop32:
            do {
                int alt32=2;
                int LA32_0 = input.LA(1);

                if ( (LA32_0==IDENTIFIER) ) {
                    alt32=1;
                }


                switch (alt32) {
            	case 1 :
            	    // RSimpleTrans.g:319:26: ident
            	    {
            	    pushFollow(FOLLOW_ident_in_body_concept_section1168);
            	    ident();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }
            	    break;

            	default :
            	    break loop32;
                }
            } while (true);


            match(input, Token.UP, null); if (state.failed) return retval;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "body_concept_section"

    public static class body_enhancement_section_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "body_enhancement_section"
    // RSimpleTrans.g:322:1: body_enhancement_section : ^( ENHANCEMENT ident ident ( added_enhancement_section )* ) ;
    public final RSimpleTrans.body_enhancement_section_return body_enhancement_section() throws RecognitionException {
        RSimpleTrans.body_enhancement_section_return retval = new RSimpleTrans.body_enhancement_section_return();
        retval.start = input.LT(1);

        try {
            // RSimpleTrans.g:323:5: ( ^( ENHANCEMENT ident ident ( added_enhancement_section )* ) )
            // RSimpleTrans.g:323:9: ^( ENHANCEMENT ident ident ( added_enhancement_section )* )
            {
            match(input,ENHANCEMENT,FOLLOW_ENHANCEMENT_in_body_enhancement_section1191); if (state.failed) return retval;

            match(input, Token.DOWN, null); if (state.failed) return retval;
            pushFollow(FOLLOW_ident_in_body_enhancement_section1193);
            ident();

            state._fsp--;
            if (state.failed) return retval;
            pushFollow(FOLLOW_ident_in_body_enhancement_section1195);
            ident();

            state._fsp--;
            if (state.failed) return retval;
            // RSimpleTrans.g:323:35: ( added_enhancement_section )*
            loop33:
            do {
                int alt33=2;
                int LA33_0 = input.LA(1);

                if ( (LA33_0==ENHANCED) ) {
                    alt33=1;
                }


                switch (alt33) {
            	case 1 :
            	    // RSimpleTrans.g:323:36: added_enhancement_section
            	    {
            	    pushFollow(FOLLOW_added_enhancement_section_in_body_enhancement_section1198);
            	    added_enhancement_section();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }
            	    break;

            	default :
            	    break loop33;
                }
            } while (true);


            match(input, Token.UP, null); if (state.failed) return retval;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "body_enhancement_section"

    public static class added_enhancement_section_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "added_enhancement_section"
    // RSimpleTrans.g:326:1: added_enhancement_section : ( ^( ENHANCED ident module_argument_section REALIZED ident ( WITH_PROFILE ident )? ( module_argument_section )? ) | ^( ENHANCED ident REALIZED ident ( WITH_PROFILE ident )? ( module_argument_section )? ) );
    public final RSimpleTrans.added_enhancement_section_return added_enhancement_section() throws RecognitionException {
        RSimpleTrans.added_enhancement_section_return retval = new RSimpleTrans.added_enhancement_section_return();
        retval.start = input.LT(1);

        try {
            // RSimpleTrans.g:327:5: ( ^( ENHANCED ident module_argument_section REALIZED ident ( WITH_PROFILE ident )? ( module_argument_section )? ) | ^( ENHANCED ident REALIZED ident ( WITH_PROFILE ident )? ( module_argument_section )? ) )
            int alt38=2;
            int LA38_0 = input.LA(1);

            if ( (LA38_0==ENHANCED) ) {
                int LA38_1 = input.LA(2);

                if ( (LA38_1==DOWN) ) {
                    int LA38_2 = input.LA(3);

                    if ( (LA38_2==IDENTIFIER) ) {
                        int LA38_3 = input.LA(4);

                        if ( (LA38_3==PARAMS) ) {
                            alt38=1;
                        }
                        else if ( (LA38_3==REALIZED) ) {
                            alt38=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 38, 3, input);

                            throw nvae;
                        }
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 38, 2, input);

                        throw nvae;
                    }
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 38, 1, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 38, 0, input);

                throw nvae;
            }
            switch (alt38) {
                case 1 :
                    // RSimpleTrans.g:327:9: ^( ENHANCED ident module_argument_section REALIZED ident ( WITH_PROFILE ident )? ( module_argument_section )? )
                    {
                    match(input,ENHANCED,FOLLOW_ENHANCED_in_added_enhancement_section1221); if (state.failed) return retval;

                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    pushFollow(FOLLOW_ident_in_added_enhancement_section1223);
                    ident();

                    state._fsp--;
                    if (state.failed) return retval;
                    pushFollow(FOLLOW_module_argument_section_in_added_enhancement_section1233);
                    module_argument_section();

                    state._fsp--;
                    if (state.failed) return retval;
                    match(input,REALIZED,FOLLOW_REALIZED_in_added_enhancement_section1243); if (state.failed) return retval;
                    pushFollow(FOLLOW_ident_in_added_enhancement_section1245);
                    ident();

                    state._fsp--;
                    if (state.failed) return retval;
                    // RSimpleTrans.g:330:9: ( WITH_PROFILE ident )?
                    int alt34=2;
                    int LA34_0 = input.LA(1);

                    if ( (LA34_0==WITH_PROFILE) ) {
                        alt34=1;
                    }
                    switch (alt34) {
                        case 1 :
                            // RSimpleTrans.g:330:10: WITH_PROFILE ident
                            {
                            match(input,WITH_PROFILE,FOLLOW_WITH_PROFILE_in_added_enhancement_section1256); if (state.failed) return retval;
                            pushFollow(FOLLOW_ident_in_added_enhancement_section1258);
                            ident();

                            state._fsp--;
                            if (state.failed) return retval;

                            }
                            break;

                    }

                    // RSimpleTrans.g:330:31: ( module_argument_section )?
                    int alt35=2;
                    int LA35_0 = input.LA(1);

                    if ( (LA35_0==PARAMS) ) {
                        alt35=1;
                    }
                    switch (alt35) {
                        case 1 :
                            // RSimpleTrans.g:330:31: module_argument_section
                            {
                            pushFollow(FOLLOW_module_argument_section_in_added_enhancement_section1262);
                            module_argument_section();

                            state._fsp--;
                            if (state.failed) return retval;

                            }
                            break;

                    }


                    match(input, Token.UP, null); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // RSimpleTrans.g:331:9: ^( ENHANCED ident REALIZED ident ( WITH_PROFILE ident )? ( module_argument_section )? )
                    {
                    match(input,ENHANCED,FOLLOW_ENHANCED_in_added_enhancement_section1275); if (state.failed) return retval;

                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    pushFollow(FOLLOW_ident_in_added_enhancement_section1277);
                    ident();

                    state._fsp--;
                    if (state.failed) return retval;
                    match(input,REALIZED,FOLLOW_REALIZED_in_added_enhancement_section1287); if (state.failed) return retval;
                    pushFollow(FOLLOW_ident_in_added_enhancement_section1289);
                    ident();

                    state._fsp--;
                    if (state.failed) return retval;
                    // RSimpleTrans.g:333:9: ( WITH_PROFILE ident )?
                    int alt36=2;
                    int LA36_0 = input.LA(1);

                    if ( (LA36_0==WITH_PROFILE) ) {
                        alt36=1;
                    }
                    switch (alt36) {
                        case 1 :
                            // RSimpleTrans.g:333:10: WITH_PROFILE ident
                            {
                            match(input,WITH_PROFILE,FOLLOW_WITH_PROFILE_in_added_enhancement_section1300); if (state.failed) return retval;
                            pushFollow(FOLLOW_ident_in_added_enhancement_section1302);
                            ident();

                            state._fsp--;
                            if (state.failed) return retval;

                            }
                            break;

                    }

                    // RSimpleTrans.g:333:31: ( module_argument_section )?
                    int alt37=2;
                    int LA37_0 = input.LA(1);

                    if ( (LA37_0==PARAMS) ) {
                        alt37=1;
                    }
                    switch (alt37) {
                        case 1 :
                            // RSimpleTrans.g:333:31: module_argument_section
                            {
                            pushFollow(FOLLOW_module_argument_section_in_added_enhancement_section1306);
                            module_argument_section();

                            state._fsp--;
                            if (state.failed) return retval;

                            }
                            break;

                    }


                    match(input, Token.UP, null); if (state.failed) return retval;

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "added_enhancement_section"

    public static class body_item_sequence_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "body_item_sequence"
    // RSimpleTrans.g:336:1: body_item_sequence : ( body_item )+ ;
    public final RSimpleTrans.body_item_sequence_return body_item_sequence() throws RecognitionException {
        RSimpleTrans.body_item_sequence_return retval = new RSimpleTrans.body_item_sequence_return();
        retval.start = input.LT(1);

        try {
            // RSimpleTrans.g:337:5: ( ( body_item )+ )
            // RSimpleTrans.g:337:9: ( body_item )+
            {
            // RSimpleTrans.g:337:9: ( body_item )+
            int cnt39=0;
            loop39:
            do {
                int alt39=2;
                int LA39_0 = input.LA(1);

                if ( (LA39_0==CONVENTION||LA39_0==CORR||LA39_0==DEFINITION||(LA39_0>=FACILITY && LA39_0<=FAC_INIT)||LA39_0==OPERATION||LA39_0==PROCEDURE||LA39_0==TYPE||LA39_0==VAR||LA39_0==AUX_OPERATION||LA39_0==IMPLICIT_DEF||LA39_0==INDUCTIVE_DEF||(LA39_0>=RECURSIVE_OPERATION_PROCEDURE && LA39_0<=RECURSIVE_PROCEDURE)) ) {
                    alt39=1;
                }


                switch (alt39) {
            	case 1 :
            	    // RSimpleTrans.g:337:10: body_item
            	    {
            	    pushFollow(FOLLOW_body_item_in_body_item_sequence1328);
            	    body_item();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }
            	    break;

            	default :
            	    if ( cnt39 >= 1 ) break loop39;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(39, input);
                        throw eee;
                }
                cnt39++;
            } while (true);


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "body_item_sequence"

    public static class body_item_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "body_item"
    // RSimpleTrans.g:340:1: body_item : ( state_variable_declaration | correspondence_clause | convention_clause | module_body_init_declaration | module_body_final_declaration | type_representation_declaration | operation_procedure_declaration | operation_recursive_procedure_declaration | aux_operation_declaration | procedure_declaration | recursive_procedure_declaration | definition_declaration | facility_declaration );
    public final RSimpleTrans.body_item_return body_item() throws RecognitionException {
        RSimpleTrans.body_item_return retval = new RSimpleTrans.body_item_return();
        retval.start = input.LT(1);

        try {
            // RSimpleTrans.g:341:5: ( state_variable_declaration | correspondence_clause | convention_clause | module_body_init_declaration | module_body_final_declaration | type_representation_declaration | operation_procedure_declaration | operation_recursive_procedure_declaration | aux_operation_declaration | procedure_declaration | recursive_procedure_declaration | definition_declaration | facility_declaration )
            int alt40=13;
            switch ( input.LA(1) ) {
            case VAR:
                {
                alt40=1;
                }
                break;
            case CORR:
                {
                alt40=2;
                }
                break;
            case CONVENTION:
                {
                alt40=3;
                }
                break;
            case FAC_INIT:
                {
                alt40=4;
                }
                break;
            case FAC_FINAL:
                {
                alt40=5;
                }
                break;
            case TYPE:
                {
                alt40=6;
                }
                break;
            case OPERATION:
                {
                alt40=7;
                }
                break;
            case RECURSIVE_OPERATION_PROCEDURE:
                {
                alt40=8;
                }
                break;
            case AUX_OPERATION:
                {
                alt40=9;
                }
                break;
            case PROCEDURE:
                {
                alt40=10;
                }
                break;
            case RECURSIVE_PROCEDURE:
                {
                alt40=11;
                }
                break;
            case DEFINITION:
            case IMPLICIT_DEF:
            case INDUCTIVE_DEF:
                {
                alt40=12;
                }
                break;
            case FACILITY:
                {
                alt40=13;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 40, 0, input);

                throw nvae;
            }

            switch (alt40) {
                case 1 :
                    // RSimpleTrans.g:341:9: state_variable_declaration
                    {
                    pushFollow(FOLLOW_state_variable_declaration_in_body_item1349);
                    state_variable_declaration();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // RSimpleTrans.g:342:9: correspondence_clause
                    {
                    pushFollow(FOLLOW_correspondence_clause_in_body_item1359);
                    correspondence_clause();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;
                case 3 :
                    // RSimpleTrans.g:343:9: convention_clause
                    {
                    pushFollow(FOLLOW_convention_clause_in_body_item1369);
                    convention_clause();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;
                case 4 :
                    // RSimpleTrans.g:344:9: module_body_init_declaration
                    {
                    pushFollow(FOLLOW_module_body_init_declaration_in_body_item1379);
                    module_body_init_declaration();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;
                case 5 :
                    // RSimpleTrans.g:345:9: module_body_final_declaration
                    {
                    pushFollow(FOLLOW_module_body_final_declaration_in_body_item1389);
                    module_body_final_declaration();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;
                case 6 :
                    // RSimpleTrans.g:346:9: type_representation_declaration
                    {
                    pushFollow(FOLLOW_type_representation_declaration_in_body_item1399);
                    type_representation_declaration();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;
                case 7 :
                    // RSimpleTrans.g:347:9: operation_procedure_declaration
                    {
                    pushFollow(FOLLOW_operation_procedure_declaration_in_body_item1409);
                    operation_procedure_declaration();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;
                case 8 :
                    // RSimpleTrans.g:348:9: operation_recursive_procedure_declaration
                    {
                    pushFollow(FOLLOW_operation_recursive_procedure_declaration_in_body_item1419);
                    operation_recursive_procedure_declaration();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;
                case 9 :
                    // RSimpleTrans.g:349:9: aux_operation_declaration
                    {
                    pushFollow(FOLLOW_aux_operation_declaration_in_body_item1429);
                    aux_operation_declaration();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;
                case 10 :
                    // RSimpleTrans.g:350:9: procedure_declaration
                    {
                    pushFollow(FOLLOW_procedure_declaration_in_body_item1439);
                    procedure_declaration();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;
                case 11 :
                    // RSimpleTrans.g:351:9: recursive_procedure_declaration
                    {
                    pushFollow(FOLLOW_recursive_procedure_declaration_in_body_item1449);
                    recursive_procedure_declaration();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;
                case 12 :
                    // RSimpleTrans.g:352:9: definition_declaration
                    {
                    pushFollow(FOLLOW_definition_declaration_in_body_item1459);
                    definition_declaration();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;
                case 13 :
                    // RSimpleTrans.g:353:9: facility_declaration
                    {
                    pushFollow(FOLLOW_facility_declaration_in_body_item1473);
                    facility_declaration();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "body_item"

    protected static class facility_module_scope {
        boolean isFacility;
    }
    protected Stack facility_module_stack = new Stack();

    public static class facility_module_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "facility_module"
    // RSimpleTrans.g:360:1: facility_module : ( ^( FACILITY id= ident short_facility_section ( uses_list )? ) | ^( FACILITY ident (ul+= uses_list )? (fis+= facility_item_sequence )? ) -> template(name=$ident.textuses=$ulitems=$fisln=adj[0]in=adj[1]) \"<ln><in>public class <name> {<uses> <items><\\n>}\");
    public final RSimpleTrans.facility_module_return facility_module() throws RecognitionException {
        facility_module_stack.push(new facility_module_scope());
        RSimpleTrans.facility_module_return retval = new RSimpleTrans.facility_module_return();
        retval.start = input.LT(1);

        CommonTree FACILITY1=null;
        List list_ul=null;
        List list_fis=null;
        RSimpleTrans.ident_return id = null;

        RSimpleTrans.ident_return ident2 = null;

        RuleReturnScope ul = null;
        RuleReturnScope fis = null;

        String[] adj = {"",""};
        String preIndent = "";
        String postIndent = "";

        try {
            // RSimpleTrans.g:370:5: ( ^( FACILITY id= ident short_facility_section ( uses_list )? ) | ^( FACILITY ident (ul+= uses_list )? (fis+= facility_item_sequence )? ) -> template(name=$ident.textuses=$ulitems=$fisln=adj[0]in=adj[1]) \"<ln><in>public class <name> {<uses> <items><\\n>}\")
            int alt44=2;
            int LA44_0 = input.LA(1);

            if ( (LA44_0==FACILITY) ) {
                int LA44_1 = input.LA(2);

                if ( (LA44_1==DOWN) ) {
                    int LA44_2 = input.LA(3);

                    if ( (LA44_2==IDENTIFIER) ) {
                        int LA44_3 = input.LA(4);

                        if ( (LA44_3==IDENTIFIER) ) {
                            alt44=1;
                        }
                        else if ( (LA44_3==UP||LA44_3==DEFINITION||(LA44_3>=FACILITY && LA44_3<=FAC_INIT)||LA44_3==OPERATION||LA44_3==TYPE||(LA44_3>=USES && LA44_3<=VAR)||LA44_3==IMPLICIT_DEF||LA44_3==INDUCTIVE_DEF||LA44_3==RECURSIVE_OPERATION_PROCEDURE) ) {
                            alt44=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 44, 3, input);

                            throw nvae;
                        }
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 44, 2, input);

                        throw nvae;
                    }
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 44, 1, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 44, 0, input);

                throw nvae;
            }
            switch (alt44) {
                case 1 :
                    // RSimpleTrans.g:370:9: ^( FACILITY id= ident short_facility_section ( uses_list )? )
                    {
                    match(input,FACILITY,FOLLOW_FACILITY_in_facility_module1505); if (state.failed) return retval;

                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    pushFollow(FOLLOW_ident_in_facility_module1509);
                    id=ident();

                    state._fsp--;
                    if (state.failed) return retval;
                    pushFollow(FOLLOW_short_facility_section_in_facility_module1511);
                    short_facility_section();

                    state._fsp--;
                    if (state.failed) return retval;
                    // RSimpleTrans.g:370:52: ( uses_list )?
                    int alt41=2;
                    int LA41_0 = input.LA(1);

                    if ( (LA41_0==USES) ) {
                        alt41=1;
                    }
                    switch (alt41) {
                        case 1 :
                            // RSimpleTrans.g:370:53: uses_list
                            {
                            pushFollow(FOLLOW_uses_list_in_facility_module1514);
                            uses_list();

                            state._fsp--;
                            if (state.failed) return retval;

                            }
                            break;

                    }


                    match(input, Token.UP, null); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // RSimpleTrans.g:372:9: ^( FACILITY ident (ul+= uses_list )? (fis+= facility_item_sequence )? )
                    {
                    FACILITY1=(CommonTree)match(input,FACILITY,FOLLOW_FACILITY_in_facility_module1533); if (state.failed) return retval;

                    if ( state.backtracking==0 ) {
                      adj = adjustLine(FACILITY1); incIndent();
                    }

                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    pushFollow(FOLLOW_ident_in_facility_module1537);
                    ident2=ident();

                    state._fsp--;
                    if (state.failed) return retval;
                    // RSimpleTrans.g:372:70: (ul+= uses_list )?
                    int alt42=2;
                    int LA42_0 = input.LA(1);

                    if ( (LA42_0==USES) ) {
                        alt42=1;
                    }
                    switch (alt42) {
                        case 1 :
                            // RSimpleTrans.g:372:71: ul+= uses_list
                            {
                            pushFollow(FOLLOW_uses_list_in_facility_module1542);
                            ul=uses_list();

                            state._fsp--;
                            if (state.failed) return retval;
                            if (list_ul==null) list_ul=new ArrayList();
                            list_ul.add(ul.getTemplate());


                            }
                            break;

                    }

                    // RSimpleTrans.g:372:87: (fis+= facility_item_sequence )?
                    int alt43=2;
                    int LA43_0 = input.LA(1);

                    if ( (LA43_0==DEFINITION||(LA43_0>=FACILITY && LA43_0<=FAC_INIT)||LA43_0==OPERATION||LA43_0==TYPE||LA43_0==VAR||LA43_0==IMPLICIT_DEF||LA43_0==INDUCTIVE_DEF||LA43_0==RECURSIVE_OPERATION_PROCEDURE) ) {
                        alt43=1;
                    }
                    switch (alt43) {
                        case 1 :
                            // RSimpleTrans.g:372:88: fis+= facility_item_sequence
                            {
                            pushFollow(FOLLOW_facility_item_sequence_in_facility_module1549);
                            fis=facility_item_sequence();

                            state._fsp--;
                            if (state.failed) return retval;
                            if (list_fis==null) list_fis=new ArrayList();
                            list_fis.add(fis.getTemplate());


                            }
                            break;

                    }

                    if ( state.backtracking==0 ) {
                      decIndent();
                    }

                    match(input, Token.UP, null); if (state.failed) return retval;


                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 373:9: -> template(name=$ident.textuses=$ulitems=$fisln=adj[0]in=adj[1]) \"<ln><in>public class <name> {<uses> <items><\\n>}\"
                      {
                          retval.st = new StringTemplate(templateLib, "<ln><in>public class <name> {<uses> <items><\\n>}",
                        new STAttrMap().put("name", (ident2!=null?(input.getTokenStream().toString(
                        input.getTreeAdaptor().getTokenStartIndex(ident2.start),
                        input.getTreeAdaptor().getTokenStopIndex(ident2.start))):null)).put("uses", list_ul).put("items", list_fis).put("ln", adj[0]).put("in", adj[1]));
                      }

                    }
                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            facility_module_stack.pop();
        }
        return retval;
    }
    // $ANTLR end "facility_module"

    public static class short_facility_section_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "short_facility_section"
    // RSimpleTrans.g:380:1: short_facility_section : ident ( module_argument_section )? ( facility_enhancement )* ident ( module_argument_section )? ( facility_body_enhancement )* ;
    public final RSimpleTrans.short_facility_section_return short_facility_section() throws RecognitionException {
        RSimpleTrans.short_facility_section_return retval = new RSimpleTrans.short_facility_section_return();
        retval.start = input.LT(1);

        try {
            // RSimpleTrans.g:381:5: ( ident ( module_argument_section )? ( facility_enhancement )* ident ( module_argument_section )? ( facility_body_enhancement )* )
            // RSimpleTrans.g:381:10: ident ( module_argument_section )? ( facility_enhancement )* ident ( module_argument_section )? ( facility_body_enhancement )*
            {
            pushFollow(FOLLOW_ident_in_short_facility_section1692);
            ident();

            state._fsp--;
            if (state.failed) return retval;
            // RSimpleTrans.g:382:9: ( module_argument_section )?
            int alt45=2;
            int LA45_0 = input.LA(1);

            if ( (LA45_0==PARAMS) ) {
                alt45=1;
            }
            switch (alt45) {
                case 1 :
                    // RSimpleTrans.g:382:9: module_argument_section
                    {
                    pushFollow(FOLLOW_module_argument_section_in_short_facility_section1702);
                    module_argument_section();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }

            // RSimpleTrans.g:383:9: ( facility_enhancement )*
            loop46:
            do {
                int alt46=2;
                int LA46_0 = input.LA(1);

                if ( (LA46_0==ENHANCED) ) {
                    alt46=1;
                }


                switch (alt46) {
            	case 1 :
            	    // RSimpleTrans.g:383:9: facility_enhancement
            	    {
            	    pushFollow(FOLLOW_facility_enhancement_in_short_facility_section1713);
            	    facility_enhancement();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }
            	    break;

            	default :
            	    break loop46;
                }
            } while (true);

            pushFollow(FOLLOW_ident_in_short_facility_section1726);
            ident();

            state._fsp--;
            if (state.failed) return retval;
            // RSimpleTrans.g:385:9: ( module_argument_section )?
            int alt47=2;
            int LA47_0 = input.LA(1);

            if ( (LA47_0==PARAMS) ) {
                alt47=1;
            }
            switch (alt47) {
                case 1 :
                    // RSimpleTrans.g:385:9: module_argument_section
                    {
                    pushFollow(FOLLOW_module_argument_section_in_short_facility_section1736);
                    module_argument_section();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }

            // RSimpleTrans.g:386:9: ( facility_body_enhancement )*
            loop48:
            do {
                int alt48=2;
                int LA48_0 = input.LA(1);

                if ( (LA48_0==ENHANCED) ) {
                    alt48=1;
                }


                switch (alt48) {
            	case 1 :
            	    // RSimpleTrans.g:386:9: facility_body_enhancement
            	    {
            	    pushFollow(FOLLOW_facility_body_enhancement_in_short_facility_section1747);
            	    facility_body_enhancement();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }
            	    break;

            	default :
            	    break loop48;
                }
            } while (true);


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "short_facility_section"

    public static class facility_item_sequence_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "facility_item_sequence"
    // RSimpleTrans.g:390:1: facility_item_sequence : (fi+= facility_item )+ -> template(item=$fi) \"<item>\";
    public final RSimpleTrans.facility_item_sequence_return facility_item_sequence() throws RecognitionException {
        RSimpleTrans.facility_item_sequence_return retval = new RSimpleTrans.facility_item_sequence_return();
        retval.start = input.LT(1);

        List list_fi=null;
        RuleReturnScope fi = null;
        try {
            // RSimpleTrans.g:391:5: ( (fi+= facility_item )+ -> template(item=$fi) \"<item>\")
            // RSimpleTrans.g:391:9: (fi+= facility_item )+
            {
            // RSimpleTrans.g:391:11: (fi+= facility_item )+
            int cnt49=0;
            loop49:
            do {
                int alt49=2;
                int LA49_0 = input.LA(1);

                if ( (LA49_0==DEFINITION||(LA49_0>=FACILITY && LA49_0<=FAC_INIT)||LA49_0==OPERATION||LA49_0==TYPE||LA49_0==VAR||LA49_0==IMPLICIT_DEF||LA49_0==INDUCTIVE_DEF||LA49_0==RECURSIVE_OPERATION_PROCEDURE) ) {
                    alt49=1;
                }


                switch (alt49) {
            	case 1 :
            	    // RSimpleTrans.g:391:11: fi+= facility_item
            	    {
            	    pushFollow(FOLLOW_facility_item_in_facility_item_sequence1778);
            	    fi=facility_item();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if (list_fi==null) list_fi=new ArrayList();
            	    list_fi.add(fi.getTemplate());


            	    }
            	    break;

            	default :
            	    if ( cnt49 >= 1 ) break loop49;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(49, input);
                        throw eee;
                }
                cnt49++;
            } while (true);



            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 392:9: -> template(item=$fi) \"<item>\"
              {
                  retval.st = new StringTemplate(templateLib, "<item>",
                new STAttrMap().put("item", list_fi));
              }

            }
            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "facility_item_sequence"

    public static class facility_item_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "facility_item"
    // RSimpleTrans.g:395:1: facility_item : ( state_variable_declaration -> template(svd=$state_variable_declaration.text) \"<svd>\" | module_facility_init_declaration -> template(mfid=$module_facility_init_declaration.text) \"<mfid>\" | module_facility_final_declaration -> template(mffd=$module_facility_final_declaration.text) \"<mffd>\" | ftd+= facility_type_declaration -> template(ftd=$ftd) \"<ftd>\" | operation_recursive_procedure_declaration -> template(orpd=$operation_recursive_procedure_declaration.text) \"<orpd>\" | opd+= operation_procedure_declaration -> template(opd=$opd) \"<opd>\" | dd+= definition_declaration -> template(dd=$dd) \"<dd>\" | fd+= facility_declaration -> template(fd=$fd) \"<fd>\");
    public final RSimpleTrans.facility_item_return facility_item() throws RecognitionException {
        RSimpleTrans.facility_item_return retval = new RSimpleTrans.facility_item_return();
        retval.start = input.LT(1);

        List list_ftd=null;
        List list_opd=null;
        List list_dd=null;
        List list_fd=null;
        RSimpleTrans.state_variable_declaration_return state_variable_declaration3 = null;

        RSimpleTrans.module_facility_init_declaration_return module_facility_init_declaration4 = null;

        RSimpleTrans.module_facility_final_declaration_return module_facility_final_declaration5 = null;

        RSimpleTrans.operation_recursive_procedure_declaration_return operation_recursive_procedure_declaration6 = null;

        RuleReturnScope ftd = null;
        RuleReturnScope opd = null;
        RuleReturnScope dd = null;
        RuleReturnScope fd = null;
        try {
            // RSimpleTrans.g:396:5: ( state_variable_declaration -> template(svd=$state_variable_declaration.text) \"<svd>\" | module_facility_init_declaration -> template(mfid=$module_facility_init_declaration.text) \"<mfid>\" | module_facility_final_declaration -> template(mffd=$module_facility_final_declaration.text) \"<mffd>\" | ftd+= facility_type_declaration -> template(ftd=$ftd) \"<ftd>\" | operation_recursive_procedure_declaration -> template(orpd=$operation_recursive_procedure_declaration.text) \"<orpd>\" | opd+= operation_procedure_declaration -> template(opd=$opd) \"<opd>\" | dd+= definition_declaration -> template(dd=$dd) \"<dd>\" | fd+= facility_declaration -> template(fd=$fd) \"<fd>\")
            int alt50=8;
            switch ( input.LA(1) ) {
            case VAR:
                {
                alt50=1;
                }
                break;
            case FAC_INIT:
                {
                alt50=2;
                }
                break;
            case FAC_FINAL:
                {
                alt50=3;
                }
                break;
            case TYPE:
                {
                alt50=4;
                }
                break;
            case RECURSIVE_OPERATION_PROCEDURE:
                {
                alt50=5;
                }
                break;
            case OPERATION:
                {
                alt50=6;
                }
                break;
            case DEFINITION:
            case IMPLICIT_DEF:
            case INDUCTIVE_DEF:
                {
                alt50=7;
                }
                break;
            case FACILITY:
                {
                alt50=8;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 50, 0, input);

                throw nvae;
            }

            switch (alt50) {
                case 1 :
                    // RSimpleTrans.g:396:9: state_variable_declaration
                    {
                    pushFollow(FOLLOW_state_variable_declaration_in_facility_item1816);
                    state_variable_declaration3=state_variable_declaration();

                    state._fsp--;
                    if (state.failed) return retval;


                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 397:9: -> template(svd=$state_variable_declaration.text) \"<svd>\"
                      {
                          retval.st = new StringTemplate(templateLib, "<svd>",
                        new STAttrMap().put("svd", (state_variable_declaration3!=null?(input.getTokenStream().toString(
                        input.getTreeAdaptor().getTokenStartIndex(state_variable_declaration3.start),
                        input.getTreeAdaptor().getTokenStopIndex(state_variable_declaration3.start))):null)));
                      }

                    }
                    }
                    break;
                case 2 :
                    // RSimpleTrans.g:398:9: module_facility_init_declaration
                    {
                    pushFollow(FOLLOW_module_facility_init_declaration_in_facility_item1844);
                    module_facility_init_declaration4=module_facility_init_declaration();

                    state._fsp--;
                    if (state.failed) return retval;


                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 399:9: -> template(mfid=$module_facility_init_declaration.text) \"<mfid>\"
                      {
                          retval.st = new StringTemplate(templateLib, "<mfid>",
                        new STAttrMap().put("mfid", (module_facility_init_declaration4!=null?(input.getTokenStream().toString(
                        input.getTreeAdaptor().getTokenStartIndex(module_facility_init_declaration4.start),
                        input.getTreeAdaptor().getTokenStopIndex(module_facility_init_declaration4.start))):null)));
                      }

                    }
                    }
                    break;
                case 3 :
                    // RSimpleTrans.g:400:9: module_facility_final_declaration
                    {
                    pushFollow(FOLLOW_module_facility_final_declaration_in_facility_item1872);
                    module_facility_final_declaration5=module_facility_final_declaration();

                    state._fsp--;
                    if (state.failed) return retval;


                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 401:9: -> template(mffd=$module_facility_final_declaration.text) \"<mffd>\"
                      {
                          retval.st = new StringTemplate(templateLib, "<mffd>",
                        new STAttrMap().put("mffd", (module_facility_final_declaration5!=null?(input.getTokenStream().toString(
                        input.getTreeAdaptor().getTokenStartIndex(module_facility_final_declaration5.start),
                        input.getTreeAdaptor().getTokenStopIndex(module_facility_final_declaration5.start))):null)));
                      }

                    }
                    }
                    break;
                case 4 :
                    // RSimpleTrans.g:402:9: ftd+= facility_type_declaration
                    {
                    pushFollow(FOLLOW_facility_type_declaration_in_facility_item1902);
                    ftd=facility_type_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_ftd==null) list_ftd=new ArrayList();
                    list_ftd.add(ftd.getTemplate());



                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 405:9: -> template(ftd=$ftd) \"<ftd>\"
                      {
                          retval.st = new StringTemplate(templateLib, "<ftd>",
                        new STAttrMap().put("ftd", list_ftd));
                      }

                    }
                    }
                    break;
                case 5 :
                    // RSimpleTrans.g:406:9: operation_recursive_procedure_declaration
                    {
                    pushFollow(FOLLOW_operation_recursive_procedure_declaration_in_facility_item1948);
                    operation_recursive_procedure_declaration6=operation_recursive_procedure_declaration();

                    state._fsp--;
                    if (state.failed) return retval;


                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 407:9: -> template(orpd=$operation_recursive_procedure_declaration.text) \"<orpd>\"
                      {
                          retval.st = new StringTemplate(templateLib, "<orpd>",
                        new STAttrMap().put("orpd", (operation_recursive_procedure_declaration6!=null?(input.getTokenStream().toString(
                        input.getTreeAdaptor().getTokenStartIndex(operation_recursive_procedure_declaration6.start),
                        input.getTreeAdaptor().getTokenStopIndex(operation_recursive_procedure_declaration6.start))):null)));
                      }

                    }
                    }
                    break;
                case 6 :
                    // RSimpleTrans.g:408:9: opd+= operation_procedure_declaration
                    {
                    pushFollow(FOLLOW_operation_procedure_declaration_in_facility_item1978);
                    opd=operation_procedure_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_opd==null) list_opd=new ArrayList();
                    list_opd.add(opd.getTemplate());



                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 410:9: -> template(opd=$opd) \"<opd>\"
                      {
                          retval.st = new StringTemplate(templateLib, "<opd>",
                        new STAttrMap().put("opd", list_opd));
                      }

                    }
                    }
                    break;
                case 7 :
                    // RSimpleTrans.g:411:9: dd+= definition_declaration
                    {
                    pushFollow(FOLLOW_definition_declaration_in_facility_item2017);
                    dd=definition_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_dd==null) list_dd=new ArrayList();
                    list_dd.add(dd.getTemplate());



                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 412:9: -> template(dd=$dd) \"<dd>\"
                      {
                          retval.st = new StringTemplate(templateLib, "<dd>",
                        new STAttrMap().put("dd", list_dd));
                      }

                    }
                    }
                    break;
                case 8 :
                    // RSimpleTrans.g:413:9: fd+= facility_declaration
                    {
                    pushFollow(FOLLOW_facility_declaration_in_facility_item2047);
                    fd=facility_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_fd==null) list_fd=new ArrayList();
                    list_fd.add(fd.getTemplate());



                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 414:9: -> template(fd=$fd) \"<fd>\"
                      {
                          retval.st = new StringTemplate(templateLib, "<fd>",
                        new STAttrMap().put("fd", list_fd));
                      }

                    }
                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "facility_item"

    public static class module_formal_param_section_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "module_formal_param_section"
    // RSimpleTrans.g:425:1: module_formal_param_section : ^( PARAMS module_parameter ( module_parameter )* ) ;
    public final RSimpleTrans.module_formal_param_section_return module_formal_param_section() throws RecognitionException {
        RSimpleTrans.module_formal_param_section_return retval = new RSimpleTrans.module_formal_param_section_return();
        retval.start = input.LT(1);

        try {
            // RSimpleTrans.g:426:5: ( ^( PARAMS module_parameter ( module_parameter )* ) )
            // RSimpleTrans.g:426:9: ^( PARAMS module_parameter ( module_parameter )* )
            {
            match(input,PARAMS,FOLLOW_PARAMS_in_module_formal_param_section2093); if (state.failed) return retval;

            match(input, Token.DOWN, null); if (state.failed) return retval;
            pushFollow(FOLLOW_module_parameter_in_module_formal_param_section2095);
            module_parameter();

            state._fsp--;
            if (state.failed) return retval;
            // RSimpleTrans.g:426:35: ( module_parameter )*
            loop51:
            do {
                int alt51=2;
                int LA51_0 = input.LA(1);

                if ( (LA51_0==DEFINITION||LA51_0==EVALUATES||LA51_0==OPERATION||LA51_0==REALIZATION||LA51_0==TYPE) ) {
                    alt51=1;
                }


                switch (alt51) {
            	case 1 :
            	    // RSimpleTrans.g:426:36: module_parameter
            	    {
            	    pushFollow(FOLLOW_module_parameter_in_module_formal_param_section2098);
            	    module_parameter();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }
            	    break;

            	default :
            	    break loop51;
                }
            } while (true);


            match(input, Token.UP, null); if (state.failed) return retval;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "module_formal_param_section"

    public static class module_parameter_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "module_parameter"
    // RSimpleTrans.g:429:1: module_parameter : ( definition_parameter | constant_parameter | concept_type_parameter | operation_parameter | concept_realization_parameter );
    public final RSimpleTrans.module_parameter_return module_parameter() throws RecognitionException {
        RSimpleTrans.module_parameter_return retval = new RSimpleTrans.module_parameter_return();
        retval.start = input.LT(1);

        try {
            // RSimpleTrans.g:430:5: ( definition_parameter | constant_parameter | concept_type_parameter | operation_parameter | concept_realization_parameter )
            int alt52=5;
            switch ( input.LA(1) ) {
            case DEFINITION:
                {
                alt52=1;
                }
                break;
            case EVALUATES:
                {
                alt52=2;
                }
                break;
            case TYPE:
                {
                alt52=3;
                }
                break;
            case OPERATION:
                {
                alt52=4;
                }
                break;
            case REALIZATION:
                {
                alt52=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 52, 0, input);

                throw nvae;
            }

            switch (alt52) {
                case 1 :
                    // RSimpleTrans.g:430:9: definition_parameter
                    {
                    pushFollow(FOLLOW_definition_parameter_in_module_parameter2120);
                    definition_parameter();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // RSimpleTrans.g:432:9: constant_parameter
                    {
                    pushFollow(FOLLOW_constant_parameter_in_module_parameter2139);
                    constant_parameter();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;
                case 3 :
                    // RSimpleTrans.g:433:9: concept_type_parameter
                    {
                    pushFollow(FOLLOW_concept_type_parameter_in_module_parameter2149);
                    concept_type_parameter();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;
                case 4 :
                    // RSimpleTrans.g:434:9: operation_parameter
                    {
                    pushFollow(FOLLOW_operation_parameter_in_module_parameter2159);
                    operation_parameter();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;
                case 5 :
                    // RSimpleTrans.g:435:9: concept_realization_parameter
                    {
                    pushFollow(FOLLOW_concept_realization_parameter_in_module_parameter2169);
                    concept_realization_parameter();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "module_parameter"

    public static class definition_parameter_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "definition_parameter"
    // RSimpleTrans.g:438:1: definition_parameter : ^( DEFINITION definition_signature ) ;
    public final RSimpleTrans.definition_parameter_return definition_parameter() throws RecognitionException {
        RSimpleTrans.definition_parameter_return retval = new RSimpleTrans.definition_parameter_return();
        retval.start = input.LT(1);

        try {
            // RSimpleTrans.g:439:5: ( ^( DEFINITION definition_signature ) )
            // RSimpleTrans.g:439:9: ^( DEFINITION definition_signature )
            {
            match(input,DEFINITION,FOLLOW_DEFINITION_in_definition_parameter2189); if (state.failed) return retval;

            match(input, Token.DOWN, null); if (state.failed) return retval;
            pushFollow(FOLLOW_definition_signature_in_definition_parameter2191);
            definition_signature();

            state._fsp--;
            if (state.failed) return retval;

            match(input, Token.UP, null); if (state.failed) return retval;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "definition_parameter"

    public static class constant_parameter_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "constant_parameter"
    // RSimpleTrans.g:442:1: constant_parameter : ^( EVALUATES variable_declaration_group ) ;
    public final RSimpleTrans.constant_parameter_return constant_parameter() throws RecognitionException {
        RSimpleTrans.constant_parameter_return retval = new RSimpleTrans.constant_parameter_return();
        retval.start = input.LT(1);

        try {
            // RSimpleTrans.g:443:5: ( ^( EVALUATES variable_declaration_group ) )
            // RSimpleTrans.g:443:9: ^( EVALUATES variable_declaration_group )
            {
            match(input,EVALUATES,FOLLOW_EVALUATES_in_constant_parameter2212); if (state.failed) return retval;

            match(input, Token.DOWN, null); if (state.failed) return retval;
            pushFollow(FOLLOW_variable_declaration_group_in_constant_parameter2214);
            variable_declaration_group();

            state._fsp--;
            if (state.failed) return retval;

            match(input, Token.UP, null); if (state.failed) return retval;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "constant_parameter"

    public static class concept_type_parameter_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "concept_type_parameter"
    // RSimpleTrans.g:446:1: concept_type_parameter : ^( TYPE ident ) ;
    public final RSimpleTrans.concept_type_parameter_return concept_type_parameter() throws RecognitionException {
        RSimpleTrans.concept_type_parameter_return retval = new RSimpleTrans.concept_type_parameter_return();
        retval.start = input.LT(1);

        try {
            // RSimpleTrans.g:447:5: ( ^( TYPE ident ) )
            // RSimpleTrans.g:447:9: ^( TYPE ident )
            {
            match(input,TYPE,FOLLOW_TYPE_in_concept_type_parameter2235); if (state.failed) return retval;

            match(input, Token.DOWN, null); if (state.failed) return retval;
            pushFollow(FOLLOW_ident_in_concept_type_parameter2237);
            ident();

            state._fsp--;
            if (state.failed) return retval;

            match(input, Token.UP, null); if (state.failed) return retval;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "concept_type_parameter"

    public static class operation_parameter_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "operation_parameter"
    // RSimpleTrans.g:450:1: operation_parameter : operation_declaration ;
    public final RSimpleTrans.operation_parameter_return operation_parameter() throws RecognitionException {
        RSimpleTrans.operation_parameter_return retval = new RSimpleTrans.operation_parameter_return();
        retval.start = input.LT(1);

        try {
            // RSimpleTrans.g:451:5: ( operation_declaration )
            // RSimpleTrans.g:451:9: operation_declaration
            {
            pushFollow(FOLLOW_operation_declaration_in_operation_parameter2257);
            operation_declaration();

            state._fsp--;
            if (state.failed) return retval;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "operation_parameter"

    public static class concept_realization_parameter_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "concept_realization_parameter"
    // RSimpleTrans.g:454:1: concept_realization_parameter : ^( REALIZATION ident ident ) ;
    public final RSimpleTrans.concept_realization_parameter_return concept_realization_parameter() throws RecognitionException {
        RSimpleTrans.concept_realization_parameter_return retval = new RSimpleTrans.concept_realization_parameter_return();
        retval.start = input.LT(1);

        try {
            // RSimpleTrans.g:455:5: ( ^( REALIZATION ident ident ) )
            // RSimpleTrans.g:455:9: ^( REALIZATION ident ident )
            {
            match(input,REALIZATION,FOLLOW_REALIZATION_in_concept_realization_parameter2277); if (state.failed) return retval;

            match(input, Token.DOWN, null); if (state.failed) return retval;
            pushFollow(FOLLOW_ident_in_concept_realization_parameter2279);
            ident();

            state._fsp--;
            if (state.failed) return retval;
            pushFollow(FOLLOW_ident_in_concept_realization_parameter2289);
            ident();

            state._fsp--;
            if (state.failed) return retval;

            match(input, Token.UP, null); if (state.failed) return retval;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "concept_realization_parameter"

    public static class uses_list_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "uses_list"
    // RSimpleTrans.g:463:1: uses_list : (uc+= uses_clause )+ -> template(uses=$uc) \"<uses>\";
    public final RSimpleTrans.uses_list_return uses_list() throws RecognitionException {
        RSimpleTrans.uses_list_return retval = new RSimpleTrans.uses_list_return();
        retval.start = input.LT(1);

        List list_uc=null;
        RuleReturnScope uc = null;

        //if(parentLine > currLine) currLine = parentLine;
        String[] adj = {"",""};

        try {
            // RSimpleTrans.g:468:5: ( (uc+= uses_clause )+ -> template(uses=$uc) \"<uses>\")
            // RSimpleTrans.g:468:9: (uc+= uses_clause )+
            {
            // RSimpleTrans.g:468:9: (uc+= uses_clause )+
            int cnt53=0;
            loop53:
            do {
                int alt53=2;
                int LA53_0 = input.LA(1);

                if ( (LA53_0==USES) ) {
                    alt53=1;
                }


                switch (alt53) {
            	case 1 :
            	    // RSimpleTrans.g:468:10: uc+= uses_clause
            	    {
            	    pushFollow(FOLLOW_uses_clause_in_uses_list2320);
            	    uc=uses_clause();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if (list_uc==null) list_uc=new ArrayList();
            	    list_uc.add(uc.getTemplate());


            	    }
            	    break;

            	default :
            	    if ( cnt53 >= 1 ) break loop53;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(53, input);
                        throw eee;
                }
                cnt53++;
            } while (true);



            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 471:9: -> template(uses=$uc) \"<uses>\"
              {
                  retval.st = new StringTemplate(templateLib, "<uses>",
                new STAttrMap().put("uses", list_uc));
              }

            }
            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "uses_list"

    public static class uses_clause_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "uses_clause"
    // RSimpleTrans.g:474:1: uses_clause : ^( USES (id+= ident )+ ) -> template(u=$USES.textuses=$idln=adj[0]in=adj[1]) \"<ln><in>/*@ <u> <uses; separator=\", \"> */\";
    public final RSimpleTrans.uses_clause_return uses_clause() throws RecognitionException {
        RSimpleTrans.uses_clause_return retval = new RSimpleTrans.uses_clause_return();
        retval.start = input.LT(1);

        CommonTree USES7=null;
        List list_id=null;
        RuleReturnScope id = null;

        //if(parentLine > currLine) currLine = parentLine;
        String[] adj = {"",""};

        try {
            // RSimpleTrans.g:479:5: ( ^( USES (id+= ident )+ ) -> template(u=$USES.textuses=$idln=adj[0]in=adj[1]) \"<ln><in>/*@ <u> <uses; separator=\", \"> */\")
            // RSimpleTrans.g:479:9: ^( USES (id+= ident )+ )
            {
            USES7=(CommonTree)match(input,USES,FOLLOW_USES_in_uses_clause2384); if (state.failed) return retval;

            if ( state.backtracking==0 ) {
              adj = adjustLine(USES7);
            }

            match(input, Token.DOWN, null); if (state.failed) return retval;
            // RSimpleTrans.g:479:45: (id+= ident )+
            int cnt54=0;
            loop54:
            do {
                int alt54=2;
                int LA54_0 = input.LA(1);

                if ( (LA54_0==IDENTIFIER) ) {
                    alt54=1;
                }


                switch (alt54) {
            	case 1 :
            	    // RSimpleTrans.g:479:45: id+= ident
            	    {
            	    pushFollow(FOLLOW_ident_in_uses_clause2390);
            	    id=ident();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if (list_id==null) list_id=new ArrayList();
            	    list_id.add(id.getTemplate());


            	    }
            	    break;

            	default :
            	    if ( cnt54 >= 1 ) break loop54;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(54, input);
                        throw eee;
                }
                cnt54++;
            } while (true);


            match(input, Token.UP, null); if (state.failed) return retval;


            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 480:9: -> template(u=$USES.textuses=$idln=adj[0]in=adj[1]) \"<ln><in>/*@ <u> <uses; separator=\", \"> */\"
              {
                  retval.st = new StringTemplate(templateLib, "<ln><in>/*@ <u> <uses; separator=\", \"> */",
                new STAttrMap().put("u", (USES7!=null?USES7.getText():null)).put("uses", list_id).put("ln", adj[0]).put("in", adj[1]));
              }

            }
            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "uses_clause"

    public static class formal_type_declaration_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "formal_type_declaration"
    // RSimpleTrans.g:492:1: formal_type_declaration : ^( LOCAL_MATH_TYPE ident ) ;
    public final RSimpleTrans.formal_type_declaration_return formal_type_declaration() throws RecognitionException {
        RSimpleTrans.formal_type_declaration_return retval = new RSimpleTrans.formal_type_declaration_return();
        retval.start = input.LT(1);

        try {
            // RSimpleTrans.g:493:5: ( ^( LOCAL_MATH_TYPE ident ) )
            // RSimpleTrans.g:493:9: ^( LOCAL_MATH_TYPE ident )
            {
            match(input,LOCAL_MATH_TYPE,FOLLOW_LOCAL_MATH_TYPE_in_formal_type_declaration2460); if (state.failed) return retval;

            match(input, Token.DOWN, null); if (state.failed) return retval;
            pushFollow(FOLLOW_ident_in_formal_type_declaration2462);
            ident();

            state._fsp--;
            if (state.failed) return retval;

            match(input, Token.UP, null); if (state.failed) return retval;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "formal_type_declaration"

    public static class subtype_declaration_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "subtype_declaration"
    // RSimpleTrans.g:496:1: subtype_declaration : ^( MATH_SUBTYPE ( ( ident DOT )=> qualified_type | ident ) ( ( ident DOT )=> qualified_type | ident ) ) ;
    public final RSimpleTrans.subtype_declaration_return subtype_declaration() throws RecognitionException {
        RSimpleTrans.subtype_declaration_return retval = new RSimpleTrans.subtype_declaration_return();
        retval.start = input.LT(1);

        try {
            // RSimpleTrans.g:497:5: ( ^( MATH_SUBTYPE ( ( ident DOT )=> qualified_type | ident ) ( ( ident DOT )=> qualified_type | ident ) ) )
            // RSimpleTrans.g:497:9: ^( MATH_SUBTYPE ( ( ident DOT )=> qualified_type | ident ) ( ( ident DOT )=> qualified_type | ident ) )
            {
            match(input,MATH_SUBTYPE,FOLLOW_MATH_SUBTYPE_in_subtype_declaration2488); if (state.failed) return retval;

            match(input, Token.DOWN, null); if (state.failed) return retval;
            // RSimpleTrans.g:497:24: ( ( ident DOT )=> qualified_type | ident )
            int alt55=2;
            int LA55_0 = input.LA(1);

            if ( (LA55_0==DOT) && (synpred2_RSimpleTrans())) {
                alt55=1;
            }
            else if ( (LA55_0==IDENTIFIER) ) {
                alt55=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 55, 0, input);

                throw nvae;
            }
            switch (alt55) {
                case 1 :
                    // RSimpleTrans.g:497:25: ( ident DOT )=> qualified_type
                    {
                    pushFollow(FOLLOW_qualified_type_in_subtype_declaration2499);
                    qualified_type();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // RSimpleTrans.g:497:57: ident
                    {
                    pushFollow(FOLLOW_ident_in_subtype_declaration2503);
                    ident();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }

            // RSimpleTrans.g:498:9: ( ( ident DOT )=> qualified_type | ident )
            int alt56=2;
            int LA56_0 = input.LA(1);

            if ( (LA56_0==DOT) && (synpred3_RSimpleTrans())) {
                alt56=1;
            }
            else if ( (LA56_0==IDENTIFIER) ) {
                alt56=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 56, 0, input);

                throw nvae;
            }
            switch (alt56) {
                case 1 :
                    // RSimpleTrans.g:498:10: ( ident DOT )=> qualified_type
                    {
                    pushFollow(FOLLOW_qualified_type_in_subtype_declaration2524);
                    qualified_type();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // RSimpleTrans.g:498:42: ident
                    {
                    pushFollow(FOLLOW_ident_in_subtype_declaration2528);
                    ident();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            match(input, Token.UP, null); if (state.failed) return retval;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "subtype_declaration"

    public static class qualified_type_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "qualified_type"
    // RSimpleTrans.g:501:1: qualified_type : ^( DOT ident ident ) ;
    public final RSimpleTrans.qualified_type_return qualified_type() throws RecognitionException {
        RSimpleTrans.qualified_type_return retval = new RSimpleTrans.qualified_type_return();
        retval.start = input.LT(1);

        try {
            // RSimpleTrans.g:503:5: ( ^( DOT ident ident ) )
            // RSimpleTrans.g:503:9: ^( DOT ident ident )
            {
            match(input,DOT,FOLLOW_DOT_in_qualified_type2559); if (state.failed) return retval;

            match(input, Token.DOWN, null); if (state.failed) return retval;
            pushFollow(FOLLOW_ident_in_qualified_type2561);
            ident();

            state._fsp--;
            if (state.failed) return retval;
            pushFollow(FOLLOW_ident_in_qualified_type2563);
            ident();

            state._fsp--;
            if (state.failed) return retval;

            match(input, Token.UP, null); if (state.failed) return retval;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "qualified_type"

    public static class math_type_declaration_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "math_type_declaration"
    // RSimpleTrans.g:506:1: math_type_declaration : ^( MATH_TYPE ident math_type_expression ) ;
    public final RSimpleTrans.math_type_declaration_return math_type_declaration() throws RecognitionException {
        RSimpleTrans.math_type_declaration_return retval = new RSimpleTrans.math_type_declaration_return();
        retval.start = input.LT(1);

        try {
            // RSimpleTrans.g:507:5: ( ^( MATH_TYPE ident math_type_expression ) )
            // RSimpleTrans.g:507:9: ^( MATH_TYPE ident math_type_expression )
            {
            match(input,MATH_TYPE,FOLLOW_MATH_TYPE_in_math_type_declaration2584); if (state.failed) return retval;

            match(input, Token.DOWN, null); if (state.failed) return retval;
            pushFollow(FOLLOW_ident_in_math_type_declaration2586);
            ident();

            state._fsp--;
            if (state.failed) return retval;
            pushFollow(FOLLOW_math_type_expression_in_math_type_declaration2596);
            math_type_expression();

            state._fsp--;
            if (state.failed) return retval;

            match(input, Token.UP, null); if (state.failed) return retval;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "math_type_declaration"

    public static class confirm_math_type_declaration_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "confirm_math_type_declaration"
    // RSimpleTrans.g:511:1: confirm_math_type_declaration : ^( CONFIRM_TYPE math_variable_declaration ) ;
    public final RSimpleTrans.confirm_math_type_declaration_return confirm_math_type_declaration() throws RecognitionException {
        RSimpleTrans.confirm_math_type_declaration_return retval = new RSimpleTrans.confirm_math_type_declaration_return();
        retval.start = input.LT(1);

        try {
            // RSimpleTrans.g:512:5: ( ^( CONFIRM_TYPE math_variable_declaration ) )
            // RSimpleTrans.g:512:9: ^( CONFIRM_TYPE math_variable_declaration )
            {
            match(input,CONFIRM_TYPE,FOLLOW_CONFIRM_TYPE_in_confirm_math_type_declaration2617); if (state.failed) return retval;

            match(input, Token.DOWN, null); if (state.failed) return retval;
            pushFollow(FOLLOW_math_variable_declaration_in_confirm_math_type_declaration2619);
            math_variable_declaration();

            state._fsp--;
            if (state.failed) return retval;

            match(input, Token.UP, null); if (state.failed) return retval;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "confirm_math_type_declaration"

    public static class sset_type_expression_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "sset_type_expression"
    // RSimpleTrans.g:515:1: sset_type_expression : ^( TYPEX sset_function_type_expression ) ;
    public final RSimpleTrans.sset_type_expression_return sset_type_expression() throws RecognitionException {
        RSimpleTrans.sset_type_expression_return retval = new RSimpleTrans.sset_type_expression_return();
        retval.start = input.LT(1);

        try {
            // RSimpleTrans.g:516:5: ( ^( TYPEX sset_function_type_expression ) )
            // RSimpleTrans.g:516:9: ^( TYPEX sset_function_type_expression )
            {
            match(input,TYPEX,FOLLOW_TYPEX_in_sset_type_expression2640); if (state.failed) return retval;

            match(input, Token.DOWN, null); if (state.failed) return retval;
            pushFollow(FOLLOW_sset_function_type_expression_in_sset_type_expression2642);
            sset_function_type_expression();

            state._fsp--;
            if (state.failed) return retval;

            match(input, Token.UP, null); if (state.failed) return retval;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "sset_type_expression"

    public static class sset_function_type_expression_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "sset_function_type_expression"
    // RSimpleTrans.g:519:1: sset_function_type_expression : ( ( FUNCARROW sset_domain_expression )=> FUNCARROW sset_domain_expression SSET | SSET );
    public final RSimpleTrans.sset_function_type_expression_return sset_function_type_expression() throws RecognitionException {
        RSimpleTrans.sset_function_type_expression_return retval = new RSimpleTrans.sset_function_type_expression_return();
        retval.start = input.LT(1);

        try {
            // RSimpleTrans.g:522:5: ( ( FUNCARROW sset_domain_expression )=> FUNCARROW sset_domain_expression SSET | SSET )
            int alt57=2;
            int LA57_0 = input.LA(1);

            if ( (LA57_0==FUNCARROW) && (synpred4_RSimpleTrans())) {
                alt57=1;
            }
            else if ( (LA57_0==SSET) ) {
                alt57=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 57, 0, input);

                throw nvae;
            }
            switch (alt57) {
                case 1 :
                    // RSimpleTrans.g:522:9: ( FUNCARROW sset_domain_expression )=> FUNCARROW sset_domain_expression SSET
                    {
                    match(input,FUNCARROW,FOLLOW_FUNCARROW_in_sset_function_type_expression2688); if (state.failed) return retval;
                    pushFollow(FOLLOW_sset_domain_expression_in_sset_function_type_expression2690);
                    sset_domain_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    match(input,SSET,FOLLOW_SSET_in_sset_function_type_expression2692); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // RSimpleTrans.g:524:9: SSET
                    {
                    match(input,SSET,FOLLOW_SSET_in_sset_function_type_expression2702); if (state.failed) return retval;

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "sset_function_type_expression"

    public static class sset_domain_expression_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "sset_domain_expression"
    // RSimpleTrans.g:527:1: sset_domain_expression : ( ^( TIMES ( SSET )+ ) | SSET );
    public final RSimpleTrans.sset_domain_expression_return sset_domain_expression() throws RecognitionException {
        RSimpleTrans.sset_domain_expression_return retval = new RSimpleTrans.sset_domain_expression_return();
        retval.start = input.LT(1);

        try {
            // RSimpleTrans.g:528:5: ( ^( TIMES ( SSET )+ ) | SSET )
            int alt59=2;
            int LA59_0 = input.LA(1);

            if ( (LA59_0==TIMES) ) {
                alt59=1;
            }
            else if ( (LA59_0==SSET) ) {
                alt59=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 59, 0, input);

                throw nvae;
            }
            switch (alt59) {
                case 1 :
                    // RSimpleTrans.g:528:9: ^( TIMES ( SSET )+ )
                    {
                    match(input,TIMES,FOLLOW_TIMES_in_sset_domain_expression2722); if (state.failed) return retval;

                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    // RSimpleTrans.g:528:17: ( SSET )+
                    int cnt58=0;
                    loop58:
                    do {
                        int alt58=2;
                        int LA58_0 = input.LA(1);

                        if ( (LA58_0==SSET) ) {
                            alt58=1;
                        }


                        switch (alt58) {
                    	case 1 :
                    	    // RSimpleTrans.g:528:17: SSET
                    	    {
                    	    match(input,SSET,FOLLOW_SSET_in_sset_domain_expression2724); if (state.failed) return retval;

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt58 >= 1 ) break loop58;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(58, input);
                                throw eee;
                        }
                        cnt58++;
                    } while (true);


                    match(input, Token.UP, null); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // RSimpleTrans.g:529:9: SSET
                    {
                    match(input,SSET,FOLLOW_SSET_in_sset_domain_expression2736); if (state.failed) return retval;

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "sset_domain_expression"

    public static class math_assertion_declaration_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "math_assertion_declaration"
    // RSimpleTrans.g:536:1: math_assertion_declaration : ( ^( AXIOM (ps= math_theorem_ident )? exp= math_expression ) | ^( THEOREM (ps= math_theorem_ident )? exp= math_expression ) | ^( PROPERTY (ps= math_theorem_ident )? exp= math_expression ) | ^( LEMMA (ps= math_theorem_ident )? exp= math_expression ) | ^( COROLLARY (ps= math_theorem_ident )? exp= math_expression ) | COMMUTATIVITY (ps= math_theorem_ident )? exp= math_expression ) ;
    public final RSimpleTrans.math_assertion_declaration_return math_assertion_declaration() throws RecognitionException {
        RSimpleTrans.math_assertion_declaration_return retval = new RSimpleTrans.math_assertion_declaration_return();
        retval.start = input.LT(1);

        RSimpleTrans.math_theorem_ident_return ps = null;

        RSimpleTrans.math_expression_return exp = null;


        try {
            // RSimpleTrans.g:537:5: ( ( ^( AXIOM (ps= math_theorem_ident )? exp= math_expression ) | ^( THEOREM (ps= math_theorem_ident )? exp= math_expression ) | ^( PROPERTY (ps= math_theorem_ident )? exp= math_expression ) | ^( LEMMA (ps= math_theorem_ident )? exp= math_expression ) | ^( COROLLARY (ps= math_theorem_ident )? exp= math_expression ) | COMMUTATIVITY (ps= math_theorem_ident )? exp= math_expression ) )
            // RSimpleTrans.g:537:9: ( ^( AXIOM (ps= math_theorem_ident )? exp= math_expression ) | ^( THEOREM (ps= math_theorem_ident )? exp= math_expression ) | ^( PROPERTY (ps= math_theorem_ident )? exp= math_expression ) | ^( LEMMA (ps= math_theorem_ident )? exp= math_expression ) | ^( COROLLARY (ps= math_theorem_ident )? exp= math_expression ) | COMMUTATIVITY (ps= math_theorem_ident )? exp= math_expression )
            {
            // RSimpleTrans.g:537:9: ( ^( AXIOM (ps= math_theorem_ident )? exp= math_expression ) | ^( THEOREM (ps= math_theorem_ident )? exp= math_expression ) | ^( PROPERTY (ps= math_theorem_ident )? exp= math_expression ) | ^( LEMMA (ps= math_theorem_ident )? exp= math_expression ) | ^( COROLLARY (ps= math_theorem_ident )? exp= math_expression ) | COMMUTATIVITY (ps= math_theorem_ident )? exp= math_expression )
            int alt66=6;
            switch ( input.LA(1) ) {
            case AXIOM:
                {
                alt66=1;
                }
                break;
            case THEOREM:
                {
                alt66=2;
                }
                break;
            case PROPERTY:
                {
                alt66=3;
                }
                break;
            case LEMMA:
                {
                alt66=4;
                }
                break;
            case COROLLARY:
                {
                alt66=5;
                }
                break;
            case COMMUTATIVITY:
                {
                alt66=6;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 66, 0, input);

                throw nvae;
            }

            switch (alt66) {
                case 1 :
                    // RSimpleTrans.g:537:13: ^( AXIOM (ps= math_theorem_ident )? exp= math_expression )
                    {
                    match(input,AXIOM,FOLLOW_AXIOM_in_math_assertion_declaration2764); if (state.failed) return retval;

                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    // RSimpleTrans.g:537:21: (ps= math_theorem_ident )?
                    int alt60=2;
                    int LA60_0 = input.LA(1);

                    if ( (LA60_0==IDENTIFIER||LA60_0==NUMERIC_LITERAL) ) {
                        alt60=1;
                    }
                    switch (alt60) {
                        case 1 :
                            // RSimpleTrans.g:537:22: ps= math_theorem_ident
                            {
                            pushFollow(FOLLOW_math_theorem_ident_in_math_assertion_declaration2769);
                            ps=math_theorem_ident();

                            state._fsp--;
                            if (state.failed) return retval;

                            }
                            break;

                    }

                    pushFollow(FOLLOW_math_expression_in_math_assertion_declaration2775);
                    exp=math_expression();

                    state._fsp--;
                    if (state.failed) return retval;

                    match(input, Token.UP, null); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // RSimpleTrans.g:538:13: ^( THEOREM (ps= math_theorem_ident )? exp= math_expression )
                    {
                    match(input,THEOREM,FOLLOW_THEOREM_in_math_assertion_declaration2791); if (state.failed) return retval;

                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    // RSimpleTrans.g:538:23: (ps= math_theorem_ident )?
                    int alt61=2;
                    int LA61_0 = input.LA(1);

                    if ( (LA61_0==IDENTIFIER||LA61_0==NUMERIC_LITERAL) ) {
                        alt61=1;
                    }
                    switch (alt61) {
                        case 1 :
                            // RSimpleTrans.g:538:24: ps= math_theorem_ident
                            {
                            pushFollow(FOLLOW_math_theorem_ident_in_math_assertion_declaration2796);
                            ps=math_theorem_ident();

                            state._fsp--;
                            if (state.failed) return retval;

                            }
                            break;

                    }

                    pushFollow(FOLLOW_math_expression_in_math_assertion_declaration2802);
                    exp=math_expression();

                    state._fsp--;
                    if (state.failed) return retval;

                    match(input, Token.UP, null); if (state.failed) return retval;

                    }
                    break;
                case 3 :
                    // RSimpleTrans.g:539:13: ^( PROPERTY (ps= math_theorem_ident )? exp= math_expression )
                    {
                    match(input,PROPERTY,FOLLOW_PROPERTY_in_math_assertion_declaration2818); if (state.failed) return retval;

                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    // RSimpleTrans.g:539:24: (ps= math_theorem_ident )?
                    int alt62=2;
                    int LA62_0 = input.LA(1);

                    if ( (LA62_0==IDENTIFIER||LA62_0==NUMERIC_LITERAL) ) {
                        alt62=1;
                    }
                    switch (alt62) {
                        case 1 :
                            // RSimpleTrans.g:539:25: ps= math_theorem_ident
                            {
                            pushFollow(FOLLOW_math_theorem_ident_in_math_assertion_declaration2823);
                            ps=math_theorem_ident();

                            state._fsp--;
                            if (state.failed) return retval;

                            }
                            break;

                    }

                    pushFollow(FOLLOW_math_expression_in_math_assertion_declaration2829);
                    exp=math_expression();

                    state._fsp--;
                    if (state.failed) return retval;

                    match(input, Token.UP, null); if (state.failed) return retval;

                    }
                    break;
                case 4 :
                    // RSimpleTrans.g:540:13: ^( LEMMA (ps= math_theorem_ident )? exp= math_expression )
                    {
                    match(input,LEMMA,FOLLOW_LEMMA_in_math_assertion_declaration2845); if (state.failed) return retval;

                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    // RSimpleTrans.g:540:21: (ps= math_theorem_ident )?
                    int alt63=2;
                    int LA63_0 = input.LA(1);

                    if ( (LA63_0==IDENTIFIER||LA63_0==NUMERIC_LITERAL) ) {
                        alt63=1;
                    }
                    switch (alt63) {
                        case 1 :
                            // RSimpleTrans.g:540:22: ps= math_theorem_ident
                            {
                            pushFollow(FOLLOW_math_theorem_ident_in_math_assertion_declaration2850);
                            ps=math_theorem_ident();

                            state._fsp--;
                            if (state.failed) return retval;

                            }
                            break;

                    }

                    pushFollow(FOLLOW_math_expression_in_math_assertion_declaration2856);
                    exp=math_expression();

                    state._fsp--;
                    if (state.failed) return retval;

                    match(input, Token.UP, null); if (state.failed) return retval;

                    }
                    break;
                case 5 :
                    // RSimpleTrans.g:541:13: ^( COROLLARY (ps= math_theorem_ident )? exp= math_expression )
                    {
                    match(input,COROLLARY,FOLLOW_COROLLARY_in_math_assertion_declaration2872); if (state.failed) return retval;

                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    // RSimpleTrans.g:541:25: (ps= math_theorem_ident )?
                    int alt64=2;
                    int LA64_0 = input.LA(1);

                    if ( (LA64_0==IDENTIFIER||LA64_0==NUMERIC_LITERAL) ) {
                        alt64=1;
                    }
                    switch (alt64) {
                        case 1 :
                            // RSimpleTrans.g:541:26: ps= math_theorem_ident
                            {
                            pushFollow(FOLLOW_math_theorem_ident_in_math_assertion_declaration2877);
                            ps=math_theorem_ident();

                            state._fsp--;
                            if (state.failed) return retval;

                            }
                            break;

                    }

                    pushFollow(FOLLOW_math_expression_in_math_assertion_declaration2883);
                    exp=math_expression();

                    state._fsp--;
                    if (state.failed) return retval;

                    match(input, Token.UP, null); if (state.failed) return retval;

                    }
                    break;
                case 6 :
                    // RSimpleTrans.g:542:13: COMMUTATIVITY (ps= math_theorem_ident )? exp= math_expression
                    {
                    match(input,COMMUTATIVITY,FOLLOW_COMMUTATIVITY_in_math_assertion_declaration2898); if (state.failed) return retval;
                    // RSimpleTrans.g:542:27: (ps= math_theorem_ident )?
                    int alt65=2;
                    int LA65_0 = input.LA(1);

                    if ( (LA65_0==IDENTIFIER||LA65_0==NUMERIC_LITERAL) ) {
                        alt65=1;
                    }
                    switch (alt65) {
                        case 1 :
                            // RSimpleTrans.g:542:28: ps= math_theorem_ident
                            {
                            pushFollow(FOLLOW_math_theorem_ident_in_math_assertion_declaration2903);
                            ps=math_theorem_ident();

                            state._fsp--;
                            if (state.failed) return retval;

                            }
                            break;

                    }

                    pushFollow(FOLLOW_math_expression_in_math_assertion_declaration2909);
                    exp=math_expression();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "math_assertion_declaration"

    public static class constraint_clause_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "constraint_clause"
    // RSimpleTrans.g:546:1: constraint_clause : ^( CONSTRAINT math_expression ) ;
    public final RSimpleTrans.constraint_clause_return constraint_clause() throws RecognitionException {
        RSimpleTrans.constraint_clause_return retval = new RSimpleTrans.constraint_clause_return();
        retval.start = input.LT(1);

        try {
            // RSimpleTrans.g:547:5: ( ^( CONSTRAINT math_expression ) )
            // RSimpleTrans.g:547:9: ^( CONSTRAINT math_expression )
            {
            match(input,CONSTRAINT,FOLLOW_CONSTRAINT_in_constraint_clause2939); if (state.failed) return retval;

            match(input, Token.DOWN, null); if (state.failed) return retval;
            pushFollow(FOLLOW_math_expression_in_constraint_clause2941);
            math_expression();

            state._fsp--;
            if (state.failed) return retval;

            match(input, Token.UP, null); if (state.failed) return retval;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "constraint_clause"

    public static class correspondence_clause_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "correspondence_clause"
    // RSimpleTrans.g:550:1: correspondence_clause : ^( CORR math_expression ) ;
    public final RSimpleTrans.correspondence_clause_return correspondence_clause() throws RecognitionException {
        RSimpleTrans.correspondence_clause_return retval = new RSimpleTrans.correspondence_clause_return();
        retval.start = input.LT(1);

        try {
            // RSimpleTrans.g:551:5: ( ^( CORR math_expression ) )
            // RSimpleTrans.g:551:9: ^( CORR math_expression )
            {
            match(input,CORR,FOLLOW_CORR_in_correspondence_clause2963); if (state.failed) return retval;

            match(input, Token.DOWN, null); if (state.failed) return retval;
            pushFollow(FOLLOW_math_expression_in_correspondence_clause2965);
            math_expression();

            state._fsp--;
            if (state.failed) return retval;

            match(input, Token.UP, null); if (state.failed) return retval;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "correspondence_clause"

    public static class convention_clause_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "convention_clause"
    // RSimpleTrans.g:554:1: convention_clause : ^( CONVENTION math_expression ) ;
    public final RSimpleTrans.convention_clause_return convention_clause() throws RecognitionException {
        RSimpleTrans.convention_clause_return retval = new RSimpleTrans.convention_clause_return();
        retval.start = input.LT(1);

        try {
            // RSimpleTrans.g:555:5: ( ^( CONVENTION math_expression ) )
            // RSimpleTrans.g:555:9: ^( CONVENTION math_expression )
            {
            match(input,CONVENTION,FOLLOW_CONVENTION_in_convention_clause2987); if (state.failed) return retval;

            match(input, Token.DOWN, null); if (state.failed) return retval;
            pushFollow(FOLLOW_math_expression_in_convention_clause2989);
            math_expression();

            state._fsp--;
            if (state.failed) return retval;

            match(input, Token.UP, null); if (state.failed) return retval;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "convention_clause"

    public static class concept_state_variable_declaration_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "concept_state_variable_declaration"
    // RSimpleTrans.g:562:1: concept_state_variable_declaration : ^( VAR math_variable_declaration_group ) ;
    public final RSimpleTrans.concept_state_variable_declaration_return concept_state_variable_declaration() throws RecognitionException {
        RSimpleTrans.concept_state_variable_declaration_return retval = new RSimpleTrans.concept_state_variable_declaration_return();
        retval.start = input.LT(1);

        try {
            // RSimpleTrans.g:563:5: ( ^( VAR math_variable_declaration_group ) )
            // RSimpleTrans.g:563:9: ^( VAR math_variable_declaration_group )
            {
            match(input,VAR,FOLLOW_VAR_in_concept_state_variable_declaration3015); if (state.failed) return retval;

            match(input, Token.DOWN, null); if (state.failed) return retval;
            pushFollow(FOLLOW_math_variable_declaration_group_in_concept_state_variable_declaration3017);
            math_variable_declaration_group();

            state._fsp--;
            if (state.failed) return retval;

            match(input, Token.UP, null); if (state.failed) return retval;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "concept_state_variable_declaration"

    public static class state_variable_declaration_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "state_variable_declaration"
    // RSimpleTrans.g:566:1: state_variable_declaration : ^( VAR variable_declaration_group ) ;
    public final RSimpleTrans.state_variable_declaration_return state_variable_declaration() throws RecognitionException {
        RSimpleTrans.state_variable_declaration_return retval = new RSimpleTrans.state_variable_declaration_return();
        retval.start = input.LT(1);

        try {
            // RSimpleTrans.g:567:5: ( ^( VAR variable_declaration_group ) )
            // RSimpleTrans.g:567:9: ^( VAR variable_declaration_group )
            {
            match(input,VAR,FOLLOW_VAR_in_state_variable_declaration3038); if (state.failed) return retval;

            match(input, Token.DOWN, null); if (state.failed) return retval;
            pushFollow(FOLLOW_variable_declaration_group_in_state_variable_declaration3040);
            variable_declaration_group();

            state._fsp--;
            if (state.failed) return retval;

            match(input, Token.UP, null); if (state.failed) return retval;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "state_variable_declaration"

    public static class state_aux_variable_declaration_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "state_aux_variable_declaration"
    // RSimpleTrans.g:570:1: state_aux_variable_declaration : ^( AUX_VAR variable_declaration_group ) ;
    public final RSimpleTrans.state_aux_variable_declaration_return state_aux_variable_declaration() throws RecognitionException {
        RSimpleTrans.state_aux_variable_declaration_return retval = new RSimpleTrans.state_aux_variable_declaration_return();
        retval.start = input.LT(1);

        try {
            // RSimpleTrans.g:571:5: ( ^( AUX_VAR variable_declaration_group ) )
            // RSimpleTrans.g:571:9: ^( AUX_VAR variable_declaration_group )
            {
            match(input,AUX_VAR,FOLLOW_AUX_VAR_in_state_aux_variable_declaration3066); if (state.failed) return retval;

            match(input, Token.DOWN, null); if (state.failed) return retval;
            pushFollow(FOLLOW_variable_declaration_group_in_state_aux_variable_declaration3068);
            variable_declaration_group();

            state._fsp--;
            if (state.failed) return retval;

            match(input, Token.UP, null); if (state.failed) return retval;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "state_aux_variable_declaration"

    public static class facility_declaration_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "facility_declaration"
    // RSimpleTrans.g:578:1: facility_declaration : ^( FACILITY varIdent+= ident conIdent+= ident (con_mas+= module_argument_section )? (fe+= facility_enhancement )* REALIZED realizIdent+= ident ( WITH_PROFILE ident )? (realiz_mas+= module_argument_section )? (fbe+= facility_body_enhancement )* ) -> template(ln=adj[0]in=adj[1]varIdent=$varIdentconIdent=$conIdentcon_type=conceptEntryTypecon_mas=newConceptParamsln2=adj2[0]in2=adj2[1]realizIdent=newRealizrealiz_mas=$realiz_masfbe=$fbe) \"<ln><in>private <conIdent><con_type> <varIdent> = <ln2><in2><realizIdent><con_type>(<con_mas>);<fbe>\";
    public final RSimpleTrans.facility_declaration_return facility_declaration() throws RecognitionException {
        RSimpleTrans.facility_declaration_return retval = new RSimpleTrans.facility_declaration_return();
        retval.start = input.LT(1);

        CommonTree FACILITY8=null;
        CommonTree REALIZED9=null;
        List list_varIdent=null;
        List list_conIdent=null;
        List list_con_mas=null;
        List list_fe=null;
        List list_realizIdent=null;
        List list_realiz_mas=null;
        List list_fbe=null;
        RuleReturnScope varIdent = null;
        RuleReturnScope conIdent = null;
        RuleReturnScope con_mas = null;
        RuleReturnScope fe = null;
        RuleReturnScope realizIdent = null;
        RuleReturnScope realiz_mas = null;
        RuleReturnScope fbe = null;

        String[] adj = {"",""};
        String[] adj2 = {"",""};
        String newRealiz = "";
        String conceptEntryType = "";
        String newConceptParams = "";

        try {
            // RSimpleTrans.g:586:5: ( ^( FACILITY varIdent+= ident conIdent+= ident (con_mas+= module_argument_section )? (fe+= facility_enhancement )* REALIZED realizIdent+= ident ( WITH_PROFILE ident )? (realiz_mas+= module_argument_section )? (fbe+= facility_body_enhancement )* ) -> template(ln=adj[0]in=adj[1]varIdent=$varIdentconIdent=$conIdentcon_type=conceptEntryTypecon_mas=newConceptParamsln2=adj2[0]in2=adj2[1]realizIdent=newRealizrealiz_mas=$realiz_masfbe=$fbe) \"<ln><in>private <conIdent><con_type> <varIdent> = <ln2><in2><realizIdent><con_type>(<con_mas>);<fbe>\")
            // RSimpleTrans.g:586:9: ^( FACILITY varIdent+= ident conIdent+= ident (con_mas+= module_argument_section )? (fe+= facility_enhancement )* REALIZED realizIdent+= ident ( WITH_PROFILE ident )? (realiz_mas+= module_argument_section )? (fbe+= facility_body_enhancement )* )
            {
            FACILITY8=(CommonTree)match(input,FACILITY,FOLLOW_FACILITY_in_facility_declaration3098); if (state.failed) return retval;

            if ( state.backtracking==0 ) {
              adj = adjustLine(FACILITY8);incIndent();
            }

            match(input, Token.DOWN, null); if (state.failed) return retval;
            pushFollow(FOLLOW_ident_in_facility_declaration3104);
            varIdent=ident();

            state._fsp--;
            if (state.failed) return retval;
            if (list_varIdent==null) list_varIdent=new ArrayList();
            list_varIdent.add(varIdent.getTemplate());

            pushFollow(FOLLOW_ident_in_facility_declaration3116);
            conIdent=ident();

            state._fsp--;
            if (state.failed) return retval;
            if (list_conIdent==null) list_conIdent=new ArrayList();
            list_conIdent.add(conIdent.getTemplate());

            // RSimpleTrans.g:588:16: (con_mas+= module_argument_section )?
            int alt67=2;
            int LA67_0 = input.LA(1);

            if ( (LA67_0==PARAMS) ) {
                alt67=1;
            }
            switch (alt67) {
                case 1 :
                    // RSimpleTrans.g:588:16: con_mas+= module_argument_section
                    {
                    pushFollow(FOLLOW_module_argument_section_in_facility_declaration3128);
                    con_mas=module_argument_section();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_con_mas==null) list_con_mas=new ArrayList();
                    list_con_mas.add(con_mas.getTemplate());


                    }
                    break;

            }

            if ( state.backtracking==0 ) {

                        if(list_con_mas != null){
              	          String args = ((StringTemplate)list_con_mas.get(0)).toString();
              	          String[] params = args.split(",");
              	          for(int i = 0; i < params.length; i++){
              	           if(Arrays.asList(standardTypes).contains(params[i])){
                             conceptEntryType = "<" + params[i] + ">";
                             params[i] = null;
                             break;
                           }
              	          }
                          for(int i = 0; i < params.length; i++){
                           if(params[i] != null){
                             params[i] = params[i].trim();
                             newConceptParams += params[i];
                             if(i < params.length - 1){
                              newConceptParams += ", ";
                             }
                           }
                          }
                        }
                      
            }
            // RSimpleTrans.g:611:11: (fe+= facility_enhancement )*
            loop68:
            do {
                int alt68=2;
                int LA68_0 = input.LA(1);

                if ( (LA68_0==ENHANCED) ) {
                    alt68=1;
                }


                switch (alt68) {
            	case 1 :
            	    // RSimpleTrans.g:611:11: fe+= facility_enhancement
            	    {
            	    pushFollow(FOLLOW_facility_enhancement_in_facility_declaration3151);
            	    fe=facility_enhancement();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if (list_fe==null) list_fe=new ArrayList();
            	    list_fe.add(fe.getTemplate());


            	    }
            	    break;

            	default :
            	    break loop68;
                }
            } while (true);

            REALIZED9=(CommonTree)match(input,REALIZED,FOLLOW_REALIZED_in_facility_declaration3162); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              adj2 = adjustLine(REALIZED9);
            }
            pushFollow(FOLLOW_ident_in_facility_declaration3176);
            realizIdent=ident();

            state._fsp--;
            if (state.failed) return retval;
            if (list_realizIdent==null) list_realizIdent=new ArrayList();
            list_realizIdent.add(realizIdent.getTemplate());

            if ( state.backtracking==0 ) {
              newRealiz = templatePrepend((StringTemplate)list_realizIdent.get(0),"new ");
            }
            // RSimpleTrans.g:615:9: ( WITH_PROFILE ident )?
            int alt69=2;
            int LA69_0 = input.LA(1);

            if ( (LA69_0==WITH_PROFILE) ) {
                alt69=1;
            }
            switch (alt69) {
                case 1 :
                    // RSimpleTrans.g:615:10: WITH_PROFILE ident
                    {
                    match(input,WITH_PROFILE,FOLLOW_WITH_PROFILE_in_facility_declaration3197); if (state.failed) return retval;
                    pushFollow(FOLLOW_ident_in_facility_declaration3199);
                    ident();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }

            // RSimpleTrans.g:615:41: (realiz_mas+= module_argument_section )?
            int alt70=2;
            int LA70_0 = input.LA(1);

            if ( (LA70_0==PARAMS) ) {
                alt70=1;
            }
            switch (alt70) {
                case 1 :
                    // RSimpleTrans.g:615:41: realiz_mas+= module_argument_section
                    {
                    pushFollow(FOLLOW_module_argument_section_in_facility_declaration3205);
                    realiz_mas=module_argument_section();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_realiz_mas==null) list_realiz_mas=new ArrayList();
                    list_realiz_mas.add(realiz_mas.getTemplate());


                    }
                    break;

            }

            // RSimpleTrans.g:616:12: (fbe+= facility_body_enhancement )*
            loop71:
            do {
                int alt71=2;
                int LA71_0 = input.LA(1);

                if ( (LA71_0==ENHANCED) ) {
                    alt71=1;
                }


                switch (alt71) {
            	case 1 :
            	    // RSimpleTrans.g:616:12: fbe+= facility_body_enhancement
            	    {
            	    pushFollow(FOLLOW_facility_body_enhancement_in_facility_declaration3218);
            	    fbe=facility_body_enhancement();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if (list_fbe==null) list_fbe=new ArrayList();
            	    list_fbe.add(fbe.getTemplate());


            	    }
            	    break;

            	default :
            	    break loop71;
                }
            } while (true);


            match(input, Token.UP, null); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              decIndent();
            }


            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 617:9: -> template(ln=adj[0]in=adj[1]varIdent=$varIdentconIdent=$conIdentcon_type=conceptEntryTypecon_mas=newConceptParamsln2=adj2[0]in2=adj2[1]realizIdent=newRealizrealiz_mas=$realiz_masfbe=$fbe) \"<ln><in>private <conIdent><con_type> <varIdent> = <ln2><in2><realizIdent><con_type>(<con_mas>);<fbe>\"
              {
                  retval.st = new StringTemplate(templateLib, "<ln><in>private <conIdent><con_type> <varIdent> = <ln2><in2><realizIdent><con_type>(<con_mas>);<fbe>",
                new STAttrMap().put("ln", adj[0]).put("in", adj[1]).put("varIdent", list_varIdent).put("conIdent", list_conIdent).put("con_type", conceptEntryType).put("con_mas", newConceptParams).put("ln2", adj2[0]).put("in2", adj2[1]).put("realizIdent", newRealiz).put("realiz_mas", list_realiz_mas).put("fbe", list_fbe));
              }

            }
            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "facility_declaration"

    public static class facility_enhancement_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "facility_enhancement"
    // RSimpleTrans.g:629:1: facility_enhancement : ^( ENHANCED ident ( module_argument_section )? ) ;
    public final RSimpleTrans.facility_enhancement_return facility_enhancement() throws RecognitionException {
        RSimpleTrans.facility_enhancement_return retval = new RSimpleTrans.facility_enhancement_return();
        retval.start = input.LT(1);

        CommonTree ENHANCED10=null;


        String[] adj = {"",""};

        try {
            // RSimpleTrans.g:633:5: ( ^( ENHANCED ident ( module_argument_section )? ) )
            // RSimpleTrans.g:633:9: ^( ENHANCED ident ( module_argument_section )? )
            {
            ENHANCED10=(CommonTree)match(input,ENHANCED,FOLLOW_ENHANCED_in_facility_enhancement3492); if (state.failed) return retval;

            if ( state.backtracking==0 ) {
              adj = adjustLine(ENHANCED10);
            }

            match(input, Token.DOWN, null); if (state.failed) return retval;
            pushFollow(FOLLOW_ident_in_facility_enhancement3496);
            ident();

            state._fsp--;
            if (state.failed) return retval;
            // RSimpleTrans.g:634:9: ( module_argument_section )?
            int alt72=2;
            int LA72_0 = input.LA(1);

            if ( (LA72_0==PARAMS) ) {
                alt72=1;
            }
            switch (alt72) {
                case 1 :
                    // RSimpleTrans.g:634:9: module_argument_section
                    {
                    pushFollow(FOLLOW_module_argument_section_in_facility_enhancement3506);
                    module_argument_section();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            match(input, Token.UP, null); if (state.failed) return retval;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "facility_enhancement"

    public static class facility_body_enhancement_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "facility_body_enhancement"
    // RSimpleTrans.g:637:1: facility_body_enhancement : ( ^( ENHANCED id+= ident mas+= module_argument_section REALIZED id2+= ident ( WITH_PROFILE ident )? (mas2+= module_argument_section )? ) -> template(ln=adj[0]in=adj[1]id=$idmas=$masln2=adj2[0]in2=adj2[1]id2=$id2mas2=$mas2) \"<ln><in>/*@ enhanced by <id>(<mas>)<ln2><in2> realized by <id2>(<mas2>); */\" | ^( ENHANCED id+= ident REALIZED id2+= ident ( WITH_PROFILE ident )? (mas2+= module_argument_section )? ) -> template(ln=adj[0]in=adj[1]id=$idln2=adj2[0]in2=adj2[1]id2=$id2mas2=$mas2) \"<ln><in>/*@ enhanced by <id><ln2><in2> realized by <id2>(<mas2>); */\");
    public final RSimpleTrans.facility_body_enhancement_return facility_body_enhancement() throws RecognitionException {
        RSimpleTrans.facility_body_enhancement_return retval = new RSimpleTrans.facility_body_enhancement_return();
        retval.start = input.LT(1);

        CommonTree ENHANCED11=null;
        CommonTree REALIZED12=null;
        CommonTree ENHANCED13=null;
        CommonTree REALIZED14=null;
        List list_id=null;
        List list_mas=null;
        List list_id2=null;
        List list_mas2=null;
        RuleReturnScope id = null;
        RuleReturnScope mas = null;
        RuleReturnScope id2 = null;
        RuleReturnScope mas2 = null;

        String[] adj = {"",""};
        String[] adj2 = {"",""};

        try {
            // RSimpleTrans.g:642:5: ( ^( ENHANCED id+= ident mas+= module_argument_section REALIZED id2+= ident ( WITH_PROFILE ident )? (mas2+= module_argument_section )? ) -> template(ln=adj[0]in=adj[1]id=$idmas=$masln2=adj2[0]in2=adj2[1]id2=$id2mas2=$mas2) \"<ln><in>/*@ enhanced by <id>(<mas>)<ln2><in2> realized by <id2>(<mas2>); */\" | ^( ENHANCED id+= ident REALIZED id2+= ident ( WITH_PROFILE ident )? (mas2+= module_argument_section )? ) -> template(ln=adj[0]in=adj[1]id=$idln2=adj2[0]in2=adj2[1]id2=$id2mas2=$mas2) \"<ln><in>/*@ enhanced by <id><ln2><in2> realized by <id2>(<mas2>); */\")
            int alt77=2;
            int LA77_0 = input.LA(1);

            if ( (LA77_0==ENHANCED) ) {
                int LA77_1 = input.LA(2);

                if ( (LA77_1==DOWN) ) {
                    int LA77_2 = input.LA(3);

                    if ( (LA77_2==IDENTIFIER) ) {
                        int LA77_3 = input.LA(4);

                        if ( (LA77_3==PARAMS) ) {
                            alt77=1;
                        }
                        else if ( (LA77_3==REALIZED) ) {
                            alt77=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 77, 3, input);

                            throw nvae;
                        }
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 77, 2, input);

                        throw nvae;
                    }
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 77, 1, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 77, 0, input);

                throw nvae;
            }
            switch (alt77) {
                case 1 :
                    // RSimpleTrans.g:642:9: ^( ENHANCED id+= ident mas+= module_argument_section REALIZED id2+= ident ( WITH_PROFILE ident )? (mas2+= module_argument_section )? )
                    {
                    ENHANCED11=(CommonTree)match(input,ENHANCED,FOLLOW_ENHANCED_in_facility_body_enhancement3532); if (state.failed) return retval;

                    if ( state.backtracking==0 ) {
                      adj = adjustLine(ENHANCED11);
                    }

                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    pushFollow(FOLLOW_ident_in_facility_body_enhancement3538);
                    id=ident();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_id==null) list_id=new ArrayList();
                    list_id.add(id.getTemplate());

                    pushFollow(FOLLOW_module_argument_section_in_facility_body_enhancement3550);
                    mas=module_argument_section();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_mas==null) list_mas=new ArrayList();
                    list_mas.add(mas.getTemplate());

                    REALIZED12=(CommonTree)match(input,REALIZED,FOLLOW_REALIZED_in_facility_body_enhancement3560); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      adj2 = adjustLine(REALIZED12);
                    }
                    pushFollow(FOLLOW_ident_in_facility_body_enhancement3566);
                    id2=ident();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_id2==null) list_id2=new ArrayList();
                    list_id2.add(id2.getTemplate());

                    // RSimpleTrans.g:645:9: ( WITH_PROFILE ident )?
                    int alt73=2;
                    int LA73_0 = input.LA(1);

                    if ( (LA73_0==WITH_PROFILE) ) {
                        alt73=1;
                    }
                    switch (alt73) {
                        case 1 :
                            // RSimpleTrans.g:645:10: WITH_PROFILE ident
                            {
                            match(input,WITH_PROFILE,FOLLOW_WITH_PROFILE_in_facility_body_enhancement3577); if (state.failed) return retval;
                            pushFollow(FOLLOW_ident_in_facility_body_enhancement3579);
                            ident();

                            state._fsp--;
                            if (state.failed) return retval;

                            }
                            break;

                    }

                    // RSimpleTrans.g:645:35: (mas2+= module_argument_section )?
                    int alt74=2;
                    int LA74_0 = input.LA(1);

                    if ( (LA74_0==PARAMS) ) {
                        alt74=1;
                    }
                    switch (alt74) {
                        case 1 :
                            // RSimpleTrans.g:645:35: mas2+= module_argument_section
                            {
                            pushFollow(FOLLOW_module_argument_section_in_facility_body_enhancement3585);
                            mas2=module_argument_section();

                            state._fsp--;
                            if (state.failed) return retval;
                            if (list_mas2==null) list_mas2=new ArrayList();
                            list_mas2.add(mas2.getTemplate());


                            }
                            break;

                    }


                    match(input, Token.UP, null); if (state.failed) return retval;


                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 646:9: -> template(ln=adj[0]in=adj[1]id=$idmas=$masln2=adj2[0]in2=adj2[1]id2=$id2mas2=$mas2) \"<ln><in>/*@ enhanced by <id>(<mas>)<ln2><in2> realized by <id2>(<mas2>); */\"
                      {
                          retval.st = new StringTemplate(templateLib, "<ln><in>/*@ enhanced by <id>(<mas>)<ln2><in2> realized by <id2>(<mas2>); */",
                        new STAttrMap().put("ln", adj[0]).put("in", adj[1]).put("id", list_id).put("mas", list_mas).put("ln2", adj2[0]).put("in2", adj2[1]).put("id2", list_id2).put("mas2", list_mas2));
                      }

                    }
                    }
                    break;
                case 2 :
                    // RSimpleTrans.g:651:9: ^( ENHANCED id+= ident REALIZED id2+= ident ( WITH_PROFILE ident )? (mas2+= module_argument_section )? )
                    {
                    ENHANCED13=(CommonTree)match(input,ENHANCED,FOLLOW_ENHANCED_in_facility_body_enhancement3728); if (state.failed) return retval;

                    if ( state.backtracking==0 ) {
                      adj = adjustLine(ENHANCED13);
                    }

                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    pushFollow(FOLLOW_ident_in_facility_body_enhancement3734);
                    id=ident();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_id==null) list_id=new ArrayList();
                    list_id.add(id.getTemplate());

                    REALIZED14=(CommonTree)match(input,REALIZED,FOLLOW_REALIZED_in_facility_body_enhancement3744); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      adj2 = adjustLine(REALIZED14);
                    }
                    pushFollow(FOLLOW_ident_in_facility_body_enhancement3750);
                    id2=ident();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_id2==null) list_id2=new ArrayList();
                    list_id2.add(id2.getTemplate());

                    // RSimpleTrans.g:653:9: ( WITH_PROFILE ident )?
                    int alt75=2;
                    int LA75_0 = input.LA(1);

                    if ( (LA75_0==WITH_PROFILE) ) {
                        alt75=1;
                    }
                    switch (alt75) {
                        case 1 :
                            // RSimpleTrans.g:653:10: WITH_PROFILE ident
                            {
                            match(input,WITH_PROFILE,FOLLOW_WITH_PROFILE_in_facility_body_enhancement3761); if (state.failed) return retval;
                            pushFollow(FOLLOW_ident_in_facility_body_enhancement3763);
                            ident();

                            state._fsp--;
                            if (state.failed) return retval;

                            }
                            break;

                    }

                    // RSimpleTrans.g:653:35: (mas2+= module_argument_section )?
                    int alt76=2;
                    int LA76_0 = input.LA(1);

                    if ( (LA76_0==PARAMS) ) {
                        alt76=1;
                    }
                    switch (alt76) {
                        case 1 :
                            // RSimpleTrans.g:653:35: mas2+= module_argument_section
                            {
                            pushFollow(FOLLOW_module_argument_section_in_facility_body_enhancement3769);
                            mas2=module_argument_section();

                            state._fsp--;
                            if (state.failed) return retval;
                            if (list_mas2==null) list_mas2=new ArrayList();
                            list_mas2.add(mas2.getTemplate());


                            }
                            break;

                    }


                    match(input, Token.UP, null); if (state.failed) return retval;


                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 654:9: -> template(ln=adj[0]in=adj[1]id=$idln2=adj2[0]in2=adj2[1]id2=$id2mas2=$mas2) \"<ln><in>/*@ enhanced by <id><ln2><in2> realized by <id2>(<mas2>); */\"
                      {
                          retval.st = new StringTemplate(templateLib, "<ln><in>/*@ enhanced by <id><ln2><in2> realized by <id2>(<mas2>); */",
                        new STAttrMap().put("ln", adj[0]).put("in", adj[1]).put("id", list_id).put("ln2", adj2[0]).put("in2", adj2[1]).put("id2", list_id2).put("mas2", list_mas2));
                      }

                    }
                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "facility_body_enhancement"

    public static class module_argument_section_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "module_argument_section"
    // RSimpleTrans.g:661:1: module_argument_section : ^( PARAMS (ma+= module_argument )+ ) -> template(ln=adj[0]in=adj[1]ma=$ma) \"<ma; separator=\", \">\";
    public final RSimpleTrans.module_argument_section_return module_argument_section() throws RecognitionException {
        RSimpleTrans.module_argument_section_return retval = new RSimpleTrans.module_argument_section_return();
        retval.start = input.LT(1);

        CommonTree PARAMS15=null;
        List list_ma=null;
        RuleReturnScope ma = null;

        String[] adj = {"",""};

        try {
            // RSimpleTrans.g:665:5: ( ^( PARAMS (ma+= module_argument )+ ) -> template(ln=adj[0]in=adj[1]ma=$ma) \"<ma; separator=\", \">\")
            // RSimpleTrans.g:665:9: ^( PARAMS (ma+= module_argument )+ )
            {
            PARAMS15=(CommonTree)match(input,PARAMS,FOLLOW_PARAMS_in_module_argument_section3921); if (state.failed) return retval;

            if ( state.backtracking==0 ) {
              adj = adjustLine(PARAMS15);
            }

            match(input, Token.DOWN, null); if (state.failed) return retval;
            // RSimpleTrans.g:665:49: (ma+= module_argument )+
            int cnt78=0;
            loop78:
            do {
                int alt78=2;
                int LA78_0 = input.LA(1);

                if ( (LA78_0==IDENTIFIER||LA78_0==EXPR) ) {
                    alt78=1;
                }


                switch (alt78) {
            	case 1 :
            	    // RSimpleTrans.g:665:49: ma+= module_argument
            	    {
            	    pushFollow(FOLLOW_module_argument_in_module_argument_section3927);
            	    ma=module_argument();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if (list_ma==null) list_ma=new ArrayList();
            	    list_ma.add(ma.getTemplate());


            	    }
            	    break;

            	default :
            	    if ( cnt78 >= 1 ) break loop78;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(78, input);
                        throw eee;
                }
                cnt78++;
            } while (true);


            match(input, Token.UP, null); if (state.failed) return retval;


            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 666:9: -> template(ln=adj[0]in=adj[1]ma=$ma) \"<ma; separator=\", \">\"
              {
                  retval.st = new StringTemplate(templateLib, "<ma; separator=\", \">",
                new STAttrMap().put("ln", adj[0]).put("in", adj[1]).put("ma", list_ma));
              }

            }
            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "module_argument_section"

    public static class module_argument_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "module_argument"
    // RSimpleTrans.g:669:1: module_argument : ( ( qualified_ident )=>qi+= qualified_ident -> template(qi=$qi) \"<qi>\" | pe+= program_expression -> template(pe=$pe) \"<pe>\");
    public final RSimpleTrans.module_argument_return module_argument() throws RecognitionException {
        RSimpleTrans.module_argument_return retval = new RSimpleTrans.module_argument_return();
        retval.start = input.LT(1);

        List list_qi=null;
        List list_pe=null;
        RuleReturnScope qi = null;
        RuleReturnScope pe = null;
        try {
            // RSimpleTrans.g:670:5: ( ( qualified_ident )=>qi+= qualified_ident -> template(qi=$qi) \"<qi>\" | pe+= program_expression -> template(pe=$pe) \"<pe>\")
            int alt79=2;
            int LA79_0 = input.LA(1);

            if ( (LA79_0==IDENTIFIER) && (synpred5_RSimpleTrans())) {
                alt79=1;
            }
            else if ( (LA79_0==EXPR) ) {
                alt79=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 79, 0, input);

                throw nvae;
            }
            switch (alt79) {
                case 1 :
                    // RSimpleTrans.g:670:9: ( qualified_ident )=>qi+= qualified_ident
                    {
                    pushFollow(FOLLOW_qualified_ident_in_module_argument3981);
                    qi=qualified_ident();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_qi==null) list_qi=new ArrayList();
                    list_qi.add(qi.getTemplate());



                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 670:49: -> template(qi=$qi) \"<qi>\"
                      {
                          retval.st = new StringTemplate(templateLib, "<qi>",
                        new STAttrMap().put("qi", list_qi));
                      }

                    }
                    }
                    break;
                case 2 :
                    // RSimpleTrans.g:671:9: pe+= program_expression
                    {
                    pushFollow(FOLLOW_program_expression_in_module_argument4003);
                    pe=program_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_pe==null) list_pe=new ArrayList();
                    list_pe.add(pe.getTemplate());



                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 671:32: -> template(pe=$pe) \"<pe>\"
                      {
                          retval.st = new StringTemplate(templateLib, "<pe>",
                        new STAttrMap().put("pe", list_pe));
                      }

                    }
                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "module_argument"

    public static class defines_declaration_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "defines_declaration"
    // RSimpleTrans.g:678:1: defines_declaration : ^( DEFINES definition_signature ) ;
    public final RSimpleTrans.defines_declaration_return defines_declaration() throws RecognitionException {
        RSimpleTrans.defines_declaration_return retval = new RSimpleTrans.defines_declaration_return();
        retval.start = input.LT(1);

        try {
            // RSimpleTrans.g:679:5: ( ^( DEFINES definition_signature ) )
            // RSimpleTrans.g:679:9: ^( DEFINES definition_signature )
            {
            match(input,DEFINES,FOLLOW_DEFINES_in_defines_declaration4037); if (state.failed) return retval;

            match(input, Token.DOWN, null); if (state.failed) return retval;
            pushFollow(FOLLOW_definition_signature_in_defines_declaration4039);
            definition_signature();

            state._fsp--;
            if (state.failed) return retval;

            match(input, Token.UP, null); if (state.failed) return retval;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "defines_declaration"

    public static class definition_declaration_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "definition_declaration"
    // RSimpleTrans.g:682:1: definition_declaration : ( implicit_definition_declaration | inductive_definition_declaration | sdd+= standard_definition_declaration -> template(sdd=$sdd) \"<sdd>\");
    public final RSimpleTrans.definition_declaration_return definition_declaration() throws RecognitionException {
        RSimpleTrans.definition_declaration_return retval = new RSimpleTrans.definition_declaration_return();
        retval.start = input.LT(1);

        List list_sdd=null;
        RuleReturnScope sdd = null;
        try {
            // RSimpleTrans.g:683:5: ( implicit_definition_declaration | inductive_definition_declaration | sdd+= standard_definition_declaration -> template(sdd=$sdd) \"<sdd>\")
            int alt80=3;
            switch ( input.LA(1) ) {
            case IMPLICIT_DEF:
                {
                alt80=1;
                }
                break;
            case INDUCTIVE_DEF:
                {
                alt80=2;
                }
                break;
            case DEFINITION:
                {
                alt80=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 80, 0, input);

                throw nvae;
            }

            switch (alt80) {
                case 1 :
                    // RSimpleTrans.g:683:9: implicit_definition_declaration
                    {
                    pushFollow(FOLLOW_implicit_definition_declaration_in_definition_declaration4060);
                    implicit_definition_declaration();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // RSimpleTrans.g:684:9: inductive_definition_declaration
                    {
                    pushFollow(FOLLOW_inductive_definition_declaration_in_definition_declaration4070);
                    inductive_definition_declaration();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;
                case 3 :
                    // RSimpleTrans.g:685:9: sdd+= standard_definition_declaration
                    {
                    pushFollow(FOLLOW_standard_definition_declaration_in_definition_declaration4082);
                    sdd=standard_definition_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_sdd==null) list_sdd=new ArrayList();
                    list_sdd.add(sdd.getTemplate());



                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 685:46: -> template(sdd=$sdd) \"<sdd>\"
                      {
                          retval.st = new StringTemplate(templateLib, "<sdd>",
                        new STAttrMap().put("sdd", list_sdd));
                      }

                    }
                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "definition_declaration"

    public static class implicit_definition_declaration_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "implicit_definition_declaration"
    // RSimpleTrans.g:689:1: implicit_definition_declaration : ^( IMPLICIT_DEF definition_signature math_expression ) ;
    public final RSimpleTrans.implicit_definition_declaration_return implicit_definition_declaration() throws RecognitionException {
        RSimpleTrans.implicit_definition_declaration_return retval = new RSimpleTrans.implicit_definition_declaration_return();
        retval.start = input.LT(1);

        try {
            // RSimpleTrans.g:690:5: ( ^( IMPLICIT_DEF definition_signature math_expression ) )
            // RSimpleTrans.g:690:9: ^( IMPLICIT_DEF definition_signature math_expression )
            {
            match(input,IMPLICIT_DEF,FOLLOW_IMPLICIT_DEF_in_implicit_definition_declaration4117); if (state.failed) return retval;

            match(input, Token.DOWN, null); if (state.failed) return retval;
            pushFollow(FOLLOW_definition_signature_in_implicit_definition_declaration4119);
            definition_signature();

            state._fsp--;
            if (state.failed) return retval;
            pushFollow(FOLLOW_math_expression_in_implicit_definition_declaration4129);
            math_expression();

            state._fsp--;
            if (state.failed) return retval;

            match(input, Token.UP, null); if (state.failed) return retval;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "implicit_definition_declaration"

    public static class inductive_definition_declaration_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "inductive_definition_declaration"
    // RSimpleTrans.g:694:1: inductive_definition_declaration : ^( INDUCTIVE_DEF definition_signature indexed_expression indexed_expression ) ;
    public final RSimpleTrans.inductive_definition_declaration_return inductive_definition_declaration() throws RecognitionException {
        RSimpleTrans.inductive_definition_declaration_return retval = new RSimpleTrans.inductive_definition_declaration_return();
        retval.start = input.LT(1);

        try {
            // RSimpleTrans.g:695:5: ( ^( INDUCTIVE_DEF definition_signature indexed_expression indexed_expression ) )
            // RSimpleTrans.g:695:9: ^( INDUCTIVE_DEF definition_signature indexed_expression indexed_expression )
            {
            match(input,INDUCTIVE_DEF,FOLLOW_INDUCTIVE_DEF_in_inductive_definition_declaration4150); if (state.failed) return retval;

            match(input, Token.DOWN, null); if (state.failed) return retval;
            pushFollow(FOLLOW_definition_signature_in_inductive_definition_declaration4152);
            definition_signature();

            state._fsp--;
            if (state.failed) return retval;
            pushFollow(FOLLOW_indexed_expression_in_inductive_definition_declaration4162);
            indexed_expression();

            state._fsp--;
            if (state.failed) return retval;
            pushFollow(FOLLOW_indexed_expression_in_inductive_definition_declaration4164);
            indexed_expression();

            state._fsp--;
            if (state.failed) return retval;

            match(input, Token.UP, null); if (state.failed) return retval;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "inductive_definition_declaration"

    public static class standard_definition_declaration_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "standard_definition_declaration"
    // RSimpleTrans.g:699:1: standard_definition_declaration : ^( DEFINITION ds= definition_signature (me= math_expression )? ) -> template(ln=adj[0]in=adj[1]def=$DEFINITION.textds=$ds.textme=$me.text) \"<ln><in>/*@ <def> <ds> <me> */\";
    public final RSimpleTrans.standard_definition_declaration_return standard_definition_declaration() throws RecognitionException {
        RSimpleTrans.standard_definition_declaration_return retval = new RSimpleTrans.standard_definition_declaration_return();
        retval.start = input.LT(1);

        CommonTree DEFINITION16=null;
        RSimpleTrans.definition_signature_return ds = null;

        RSimpleTrans.math_expression_return me = null;



        String[] adj = {"",""};

        try {
            // RSimpleTrans.g:703:5: ( ^( DEFINITION ds= definition_signature (me= math_expression )? ) -> template(ln=adj[0]in=adj[1]def=$DEFINITION.textds=$ds.textme=$me.text) \"<ln><in>/*@ <def> <ds> <me> */\")
            // RSimpleTrans.g:703:9: ^( DEFINITION ds= definition_signature (me= math_expression )? )
            {
            DEFINITION16=(CommonTree)match(input,DEFINITION,FOLLOW_DEFINITION_in_standard_definition_declaration4189); if (state.failed) return retval;

            if ( state.backtracking==0 ) {
              adj = adjustLine(DEFINITION16);
            }

            match(input, Token.DOWN, null); if (state.failed) return retval;
            pushFollow(FOLLOW_definition_signature_in_standard_definition_declaration4195);
            ds=definition_signature();

            state._fsp--;
            if (state.failed) return retval;
            // RSimpleTrans.g:704:9: (me= math_expression )?
            int alt81=2;
            int LA81_0 = input.LA(1);

            if ( (LA81_0==EXPR) ) {
                alt81=1;
            }
            switch (alt81) {
                case 1 :
                    // RSimpleTrans.g:704:11: me= math_expression
                    {
                    pushFollow(FOLLOW_math_expression_in_standard_definition_declaration4209);
                    me=math_expression();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            match(input, Token.UP, null); if (state.failed) return retval;


            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 705:9: -> template(ln=adj[0]in=adj[1]def=$DEFINITION.textds=$ds.textme=$me.text) \"<ln><in>/*@ <def> <ds> <me> */\"
              {
                  retval.st = new StringTemplate(templateLib, "<ln><in>/*@ <def> <ds> <me> */",
                new STAttrMap().put("ln", adj[0]).put("in", adj[1]).put("def", (DEFINITION16!=null?DEFINITION16.getText():null)).put("ds", (ds!=null?(input.getTokenStream().toString(
                input.getTreeAdaptor().getTokenStartIndex(ds.start),
                input.getTreeAdaptor().getTokenStopIndex(ds.start))):null)).put("me", (me!=null?(input.getTokenStream().toString(
                input.getTreeAdaptor().getTokenStartIndex(me.start),
                input.getTreeAdaptor().getTokenStopIndex(me.start))):null)));
              }

            }
            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "standard_definition_declaration"

    public static class categorical_definition_declaration_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "categorical_definition_declaration"
    // RSimpleTrans.g:711:1: categorical_definition_declaration : ^( CATEGORICAL_DEFINITION categorical_definition_construct ^( RELATED_BY math_expression ) ) ;
    public final RSimpleTrans.categorical_definition_declaration_return categorical_definition_declaration() throws RecognitionException {
        RSimpleTrans.categorical_definition_declaration_return retval = new RSimpleTrans.categorical_definition_declaration_return();
        retval.start = input.LT(1);

        try {
            // RSimpleTrans.g:712:5: ( ^( CATEGORICAL_DEFINITION categorical_definition_construct ^( RELATED_BY math_expression ) ) )
            // RSimpleTrans.g:712:9: ^( CATEGORICAL_DEFINITION categorical_definition_construct ^( RELATED_BY math_expression ) )
            {
            match(input,CATEGORICAL_DEFINITION,FOLLOW_CATEGORICAL_DEFINITION_in_categorical_definition_declaration4321); if (state.failed) return retval;

            match(input, Token.DOWN, null); if (state.failed) return retval;
            pushFollow(FOLLOW_categorical_definition_construct_in_categorical_definition_declaration4323);
            categorical_definition_construct();

            state._fsp--;
            if (state.failed) return retval;
            match(input,RELATED_BY,FOLLOW_RELATED_BY_in_categorical_definition_declaration4326); if (state.failed) return retval;

            match(input, Token.DOWN, null); if (state.failed) return retval;
            pushFollow(FOLLOW_math_expression_in_categorical_definition_declaration4328);
            math_expression();

            state._fsp--;
            if (state.failed) return retval;

            match(input, Token.UP, null); if (state.failed) return retval;

            match(input, Token.UP, null); if (state.failed) return retval;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "categorical_definition_declaration"

    public static class definition_signature_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "definition_signature"
    // RSimpleTrans.g:715:1: definition_signature : ( infix_definition_construct | outfix_definition_construct | sdc+= standard_definition_construct -> template(sdc=$sdc) \"<sdc>\") math_type_expression ;
    public final RSimpleTrans.definition_signature_return definition_signature() throws RecognitionException {
        RSimpleTrans.definition_signature_return retval = new RSimpleTrans.definition_signature_return();
        retval.start = input.LT(1);

        List list_sdc=null;
        RuleReturnScope sdc = null;
        try {
            // RSimpleTrans.g:716:5: ( ( infix_definition_construct | outfix_definition_construct | sdc+= standard_definition_construct -> template(sdc=$sdc) \"<sdc>\") math_type_expression )
            // RSimpleTrans.g:716:9: ( infix_definition_construct | outfix_definition_construct | sdc+= standard_definition_construct -> template(sdc=$sdc) \"<sdc>\") math_type_expression
            {
            // RSimpleTrans.g:716:9: ( infix_definition_construct | outfix_definition_construct | sdc+= standard_definition_construct -> template(sdc=$sdc) \"<sdc>\")
            int alt82=3;
            switch ( input.LA(1) ) {
            case PARAMS:
                {
                alt82=1;
                }
                break;
            case LT:
            case LL:
            case BAR:
            case DBL_BAR:
                {
                alt82=2;
                }
                break;
            case ABS:
            case COMPLEMENT:
            case NOT:
            case IDENTIFIER:
            case NUMERIC_LITERAL:
            case PLUS:
            case MINUS:
            case BIG_UNION:
            case BIG_INTERSECT:
            case BIG_SUM:
            case BIG_PRODUCT:
            case BIG_CONCAT:
                {
                alt82=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 82, 0, input);

                throw nvae;
            }

            switch (alt82) {
                case 1 :
                    // RSimpleTrans.g:716:13: infix_definition_construct
                    {
                    pushFollow(FOLLOW_infix_definition_construct_in_definition_signature4353);
                    infix_definition_construct();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // RSimpleTrans.g:717:13: outfix_definition_construct
                    {
                    pushFollow(FOLLOW_outfix_definition_construct_in_definition_signature4367);
                    outfix_definition_construct();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;
                case 3 :
                    // RSimpleTrans.g:718:13: sdc+= standard_definition_construct
                    {
                    pushFollow(FOLLOW_standard_definition_construct_in_definition_signature4383);
                    sdc=standard_definition_construct();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_sdc==null) list_sdc=new ArrayList();
                    list_sdc.add(sdc.getTemplate());



                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 718:48: -> template(sdc=$sdc) \"<sdc>\"
                      {
                          retval.st = new StringTemplate(templateLib, "<sdc>",
                        new STAttrMap().put("sdc", list_sdc));
                      }

                    }
                    }
                    break;

            }

            pushFollow(FOLLOW_math_type_expression_in_definition_signature4414);
            math_type_expression();

            state._fsp--;
            if (state.failed) return retval;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "definition_signature"

    public static class infix_definition_construct_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "infix_definition_construct"
    // RSimpleTrans.g:723:1: infix_definition_construct : singleton_definition_parameter ( ident | infix_symbol ) singleton_definition_parameter ;
    public final RSimpleTrans.infix_definition_construct_return infix_definition_construct() throws RecognitionException {
        RSimpleTrans.infix_definition_construct_return retval = new RSimpleTrans.infix_definition_construct_return();
        retval.start = input.LT(1);

        try {
            // RSimpleTrans.g:724:5: ( singleton_definition_parameter ( ident | infix_symbol ) singleton_definition_parameter )
            // RSimpleTrans.g:724:9: singleton_definition_parameter ( ident | infix_symbol ) singleton_definition_parameter
            {
            pushFollow(FOLLOW_singleton_definition_parameter_in_infix_definition_construct4433);
            singleton_definition_parameter();

            state._fsp--;
            if (state.failed) return retval;
            // RSimpleTrans.g:725:9: ( ident | infix_symbol )
            int alt83=2;
            int LA83_0 = input.LA(1);

            if ( (LA83_0==IDENTIFIER) ) {
                alt83=1;
            }
            else if ( (LA83_0==AND||LA83_0==COMPLEMENT||LA83_0==DIV||LA83_0==IFF||LA83_0==IMPLIES||LA83_0==INTERSECT||(LA83_0>=IN && LA83_0<=SUBSTR)||LA83_0==MOD||LA83_0==CAT||LA83_0==OR||LA83_0==REM||LA83_0==UNION||LA83_0==WITHOUT||(LA83_0>=PLUS && LA83_0<=MINUS)||(LA83_0>=MULTIPLY && LA83_0<=GT)||(LA83_0>=XOR && LA83_0<=ORELSE)) ) {
                alt83=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 83, 0, input);

                throw nvae;
            }
            switch (alt83) {
                case 1 :
                    // RSimpleTrans.g:725:10: ident
                    {
                    pushFollow(FOLLOW_ident_in_infix_definition_construct4444);
                    ident();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // RSimpleTrans.g:725:18: infix_symbol
                    {
                    pushFollow(FOLLOW_infix_symbol_in_infix_definition_construct4448);
                    infix_symbol();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }

            pushFollow(FOLLOW_singleton_definition_parameter_in_infix_definition_construct4459);
            singleton_definition_parameter();

            state._fsp--;
            if (state.failed) return retval;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "infix_definition_construct"

    public static class outfix_definition_construct_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "outfix_definition_construct"
    // RSimpleTrans.g:729:1: outfix_definition_construct : ( BAR singleton_definition_parameter | DBL_BAR singleton_definition_parameter DBL_ | LT singleton_definition_parameter | LL singleton_definition_parameter );
    public final RSimpleTrans.outfix_definition_construct_return outfix_definition_construct() throws RecognitionException {
        RSimpleTrans.outfix_definition_construct_return retval = new RSimpleTrans.outfix_definition_construct_return();
        retval.start = input.LT(1);

        try {
            // RSimpleTrans.g:730:5: ( BAR singleton_definition_parameter | DBL_BAR singleton_definition_parameter DBL_ | LT singleton_definition_parameter | LL singleton_definition_parameter )
            int alt84=4;
            switch ( input.LA(1) ) {
            case BAR:
                {
                alt84=1;
                }
                break;
            case DBL_BAR:
                {
                alt84=2;
                }
                break;
            case LT:
                {
                alt84=3;
                }
                break;
            case LL:
                {
                alt84=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 84, 0, input);

                throw nvae;
            }

            switch (alt84) {
                case 1 :
                    // RSimpleTrans.g:730:9: BAR singleton_definition_parameter
                    {
                    match(input,BAR,FOLLOW_BAR_in_outfix_definition_construct4478); if (state.failed) return retval;
                    pushFollow(FOLLOW_singleton_definition_parameter_in_outfix_definition_construct4480);
                    singleton_definition_parameter();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // RSimpleTrans.g:731:9: DBL_BAR singleton_definition_parameter DBL_
                    {
                    match(input,DBL_BAR,FOLLOW_DBL_BAR_in_outfix_definition_construct4491); if (state.failed) return retval;
                    pushFollow(FOLLOW_singleton_definition_parameter_in_outfix_definition_construct4493);
                    singleton_definition_parameter();

                    state._fsp--;
                    if (state.failed) return retval;
                    match(input,DBL_,FOLLOW_DBL__in_outfix_definition_construct4495); if (state.failed) return retval;

                    }
                    break;
                case 3 :
                    // RSimpleTrans.g:732:9: LT singleton_definition_parameter
                    {
                    match(input,LT,FOLLOW_LT_in_outfix_definition_construct4505); if (state.failed) return retval;
                    pushFollow(FOLLOW_singleton_definition_parameter_in_outfix_definition_construct4507);
                    singleton_definition_parameter();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;
                case 4 :
                    // RSimpleTrans.g:733:9: LL singleton_definition_parameter
                    {
                    match(input,LL,FOLLOW_LL_in_outfix_definition_construct4518); if (state.failed) return retval;
                    pushFollow(FOLLOW_singleton_definition_parameter_in_outfix_definition_construct4520);
                    singleton_definition_parameter();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "outfix_definition_construct"

    public static class standard_definition_construct_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "standard_definition_construct"
    // RSimpleTrans.g:736:1: standard_definition_construct : (id+= ident | prefix_symbol | quant_symbol | NUMERIC_LITERAL ) (dfps+= definition_formal_param_section )? -> template(id=$iddfps=$dfps) \"<id><dfps>\";
    public final RSimpleTrans.standard_definition_construct_return standard_definition_construct() throws RecognitionException {
        RSimpleTrans.standard_definition_construct_return retval = new RSimpleTrans.standard_definition_construct_return();
        retval.start = input.LT(1);

        List list_id=null;
        List list_dfps=null;
        RuleReturnScope id = null;
        RuleReturnScope dfps = null;
        try {
            // RSimpleTrans.g:737:5: ( (id+= ident | prefix_symbol | quant_symbol | NUMERIC_LITERAL ) (dfps+= definition_formal_param_section )? -> template(id=$iddfps=$dfps) \"<id><dfps>\")
            // RSimpleTrans.g:737:9: (id+= ident | prefix_symbol | quant_symbol | NUMERIC_LITERAL ) (dfps+= definition_formal_param_section )?
            {
            // RSimpleTrans.g:737:9: (id+= ident | prefix_symbol | quant_symbol | NUMERIC_LITERAL )
            int alt85=4;
            switch ( input.LA(1) ) {
            case IDENTIFIER:
                {
                alt85=1;
                }
                break;
            case ABS:
            case COMPLEMENT:
            case NOT:
            case PLUS:
            case MINUS:
                {
                alt85=2;
                }
                break;
            case BIG_UNION:
            case BIG_INTERSECT:
            case BIG_SUM:
            case BIG_PRODUCT:
            case BIG_CONCAT:
                {
                alt85=3;
                }
                break;
            case NUMERIC_LITERAL:
                {
                alt85=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 85, 0, input);

                throw nvae;
            }

            switch (alt85) {
                case 1 :
                    // RSimpleTrans.g:737:10: id+= ident
                    {
                    pushFollow(FOLLOW_ident_in_standard_definition_construct4543);
                    id=ident();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_id==null) list_id=new ArrayList();
                    list_id.add(id.getTemplate());


                    }
                    break;
                case 2 :
                    // RSimpleTrans.g:737:22: prefix_symbol
                    {
                    pushFollow(FOLLOW_prefix_symbol_in_standard_definition_construct4547);
                    prefix_symbol();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;
                case 3 :
                    // RSimpleTrans.g:737:38: quant_symbol
                    {
                    pushFollow(FOLLOW_quant_symbol_in_standard_definition_construct4551);
                    quant_symbol();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;
                case 4 :
                    // RSimpleTrans.g:737:53: NUMERIC_LITERAL
                    {
                    match(input,NUMERIC_LITERAL,FOLLOW_NUMERIC_LITERAL_in_standard_definition_construct4555); if (state.failed) return retval;

                    }
                    break;

            }

            // RSimpleTrans.g:738:9: (dfps+= definition_formal_param_section )?
            int alt86=2;
            int LA86_0 = input.LA(1);

            if ( (LA86_0==PARAMS) ) {
                alt86=1;
            }
            switch (alt86) {
                case 1 :
                    // RSimpleTrans.g:738:10: dfps+= definition_formal_param_section
                    {
                    pushFollow(FOLLOW_definition_formal_param_section_in_standard_definition_construct4569);
                    dfps=definition_formal_param_section();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_dfps==null) list_dfps=new ArrayList();
                    list_dfps.add(dfps.getTemplate());


                    }
                    break;

            }



            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 739:9: -> template(id=$iddfps=$dfps) \"<id><dfps>\"
              {
                  retval.st = new StringTemplate(templateLib, "<id><dfps>",
                new STAttrMap().put("id", list_id).put("dfps", list_dfps));
              }

            }
            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "standard_definition_construct"

    public static class categorical_definition_construct_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "categorical_definition_construct"
    // RSimpleTrans.g:742:1: categorical_definition_construct : ^( DEFINITION definition_signature ( DEFINITION definition_signature )* ) ;
    public final RSimpleTrans.categorical_definition_construct_return categorical_definition_construct() throws RecognitionException {
        RSimpleTrans.categorical_definition_construct_return retval = new RSimpleTrans.categorical_definition_construct_return();
        retval.start = input.LT(1);

        try {
            // RSimpleTrans.g:743:5: ( ^( DEFINITION definition_signature ( DEFINITION definition_signature )* ) )
            // RSimpleTrans.g:743:9: ^( DEFINITION definition_signature ( DEFINITION definition_signature )* )
            {
            match(input,DEFINITION,FOLLOW_DEFINITION_in_categorical_definition_construct4613); if (state.failed) return retval;

            match(input, Token.DOWN, null); if (state.failed) return retval;
            pushFollow(FOLLOW_definition_signature_in_categorical_definition_construct4615);
            definition_signature();

            state._fsp--;
            if (state.failed) return retval;
            // RSimpleTrans.g:743:43: ( DEFINITION definition_signature )*
            loop87:
            do {
                int alt87=2;
                int LA87_0 = input.LA(1);

                if ( (LA87_0==DEFINITION) ) {
                    alt87=1;
                }


                switch (alt87) {
            	case 1 :
            	    // RSimpleTrans.g:743:44: DEFINITION definition_signature
            	    {
            	    match(input,DEFINITION,FOLLOW_DEFINITION_in_categorical_definition_construct4618); if (state.failed) return retval;
            	    pushFollow(FOLLOW_definition_signature_in_categorical_definition_construct4620);
            	    definition_signature();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }
            	    break;

            	default :
            	    break loop87;
                }
            } while (true);


            match(input, Token.UP, null); if (state.failed) return retval;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "categorical_definition_construct"

    public static class indexed_expression_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "indexed_expression"
    // RSimpleTrans.g:748:1: indexed_expression : math_expression ;
    public final RSimpleTrans.indexed_expression_return indexed_expression() throws RecognitionException {
        RSimpleTrans.indexed_expression_return retval = new RSimpleTrans.indexed_expression_return();
        retval.start = input.LT(1);

        try {
            // RSimpleTrans.g:749:5: ( math_expression )
            // RSimpleTrans.g:749:9: math_expression
            {
            pushFollow(FOLLOW_math_expression_in_indexed_expression4644);
            math_expression();

            state._fsp--;
            if (state.failed) return retval;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "indexed_expression"

    public static class singleton_definition_parameter_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "singleton_definition_parameter"
    // RSimpleTrans.g:753:1: singleton_definition_parameter : ^( PARAMS math_variable_declaration ) ;
    public final RSimpleTrans.singleton_definition_parameter_return singleton_definition_parameter() throws RecognitionException {
        RSimpleTrans.singleton_definition_parameter_return retval = new RSimpleTrans.singleton_definition_parameter_return();
        retval.start = input.LT(1);

        try {
            // RSimpleTrans.g:754:5: ( ^( PARAMS math_variable_declaration ) )
            // RSimpleTrans.g:754:9: ^( PARAMS math_variable_declaration )
            {
            match(input,PARAMS,FOLLOW_PARAMS_in_singleton_definition_parameter4673); if (state.failed) return retval;

            match(input, Token.DOWN, null); if (state.failed) return retval;
            pushFollow(FOLLOW_math_variable_declaration_in_singleton_definition_parameter4675);
            math_variable_declaration();

            state._fsp--;
            if (state.failed) return retval;

            match(input, Token.UP, null); if (state.failed) return retval;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "singleton_definition_parameter"

    public static class definition_formal_param_section_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "definition_formal_param_section"
    // RSimpleTrans.g:757:1: definition_formal_param_section : ^( PARAMS ( math_variable_declaration_group )+ ) ;
    public final RSimpleTrans.definition_formal_param_section_return definition_formal_param_section() throws RecognitionException {
        RSimpleTrans.definition_formal_param_section_return retval = new RSimpleTrans.definition_formal_param_section_return();
        retval.start = input.LT(1);

        try {
            // RSimpleTrans.g:758:5: ( ^( PARAMS ( math_variable_declaration_group )+ ) )
            // RSimpleTrans.g:758:9: ^( PARAMS ( math_variable_declaration_group )+ )
            {
            match(input,PARAMS,FOLLOW_PARAMS_in_definition_formal_param_section4696); if (state.failed) return retval;

            match(input, Token.DOWN, null); if (state.failed) return retval;
            // RSimpleTrans.g:758:18: ( math_variable_declaration_group )+
            int cnt88=0;
            loop88:
            do {
                int alt88=2;
                int LA88_0 = input.LA(1);

                if ( (LA88_0==IDENTIFIER) ) {
                    alt88=1;
                }


                switch (alt88) {
            	case 1 :
            	    // RSimpleTrans.g:758:18: math_variable_declaration_group
            	    {
            	    pushFollow(FOLLOW_math_variable_declaration_group_in_definition_formal_param_section4698);
            	    math_variable_declaration_group();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }
            	    break;

            	default :
            	    if ( cnt88 >= 1 ) break loop88;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(88, input);
                        throw eee;
                }
                cnt88++;
            } while (true);


            match(input, Token.UP, null); if (state.failed) return retval;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "definition_formal_param_section"

    public static class infix_symbol_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "infix_symbol"
    // RSimpleTrans.g:761:1: infix_symbol : ( EQL | NOT_EQL | LT | GT | LT_EQL | GT_EQL | PLUS | MINUS | MULTIPLY | DIVIDE | EXP | MOD | REM | DIV | IMPLIES | IFF | AND | OR | XOR | ANDTHEN | ORELSE | COMPLEMENT | IN | NOT_IN | RANGE | UNION | INTERSECT | WITHOUT | SUBSET | PROP_SUBSET | NOT_SUBSET | NOT_PROP_SUBSET | CAT | SUBSTR | NOT_SUBSTR );
    public final RSimpleTrans.infix_symbol_return infix_symbol() throws RecognitionException {
        RSimpleTrans.infix_symbol_return retval = new RSimpleTrans.infix_symbol_return();
        retval.start = input.LT(1);

        try {
            // RSimpleTrans.g:762:5: ( EQL | NOT_EQL | LT | GT | LT_EQL | GT_EQL | PLUS | MINUS | MULTIPLY | DIVIDE | EXP | MOD | REM | DIV | IMPLIES | IFF | AND | OR | XOR | ANDTHEN | ORELSE | COMPLEMENT | IN | NOT_IN | RANGE | UNION | INTERSECT | WITHOUT | SUBSET | PROP_SUBSET | NOT_SUBSET | NOT_PROP_SUBSET | CAT | SUBSTR | NOT_SUBSTR )
            // RSimpleTrans.g:
            {
            if ( input.LA(1)==AND||input.LA(1)==COMPLEMENT||input.LA(1)==DIV||input.LA(1)==IFF||input.LA(1)==IMPLIES||input.LA(1)==INTERSECT||(input.LA(1)>=IN && input.LA(1)<=SUBSTR)||input.LA(1)==MOD||input.LA(1)==CAT||input.LA(1)==OR||input.LA(1)==REM||input.LA(1)==UNION||input.LA(1)==WITHOUT||(input.LA(1)>=PLUS && input.LA(1)<=MINUS)||(input.LA(1)>=MULTIPLY && input.LA(1)<=GT)||(input.LA(1)>=XOR && input.LA(1)<=ORELSE) ) {
                input.consume();
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "infix_symbol"

    public static class prefix_symbol_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "prefix_symbol"
    // RSimpleTrans.g:769:1: prefix_symbol : ( PLUS | MINUS | NOT | ABS | COMPLEMENT );
    public final RSimpleTrans.prefix_symbol_return prefix_symbol() throws RecognitionException {
        RSimpleTrans.prefix_symbol_return retval = new RSimpleTrans.prefix_symbol_return();
        retval.start = input.LT(1);

        try {
            // RSimpleTrans.g:770:5: ( PLUS | MINUS | NOT | ABS | COMPLEMENT )
            // RSimpleTrans.g:
            {
            if ( input.LA(1)==ABS||input.LA(1)==COMPLEMENT||input.LA(1)==NOT||(input.LA(1)>=PLUS && input.LA(1)<=MINUS) ) {
                input.consume();
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "prefix_symbol"

    public static class quant_symbol_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "quant_symbol"
    // RSimpleTrans.g:773:1: quant_symbol : ( BIG_UNION | BIG_INTERSECT | BIG_SUM | BIG_PRODUCT | BIG_CONCAT );
    public final RSimpleTrans.quant_symbol_return quant_symbol() throws RecognitionException {
        RSimpleTrans.quant_symbol_return retval = new RSimpleTrans.quant_symbol_return();
        retval.start = input.LT(1);

        try {
            // RSimpleTrans.g:774:5: ( BIG_UNION | BIG_INTERSECT | BIG_SUM | BIG_PRODUCT | BIG_CONCAT )
            // RSimpleTrans.g:
            {
            if ( (input.LA(1)>=BIG_UNION && input.LA(1)<=BIG_CONCAT) ) {
                input.consume();
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "quant_symbol"

    public static class operation_procedure_declaration_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "operation_procedure_declaration"
    // RSimpleTrans.g:781:1: operation_procedure_declaration : ^( OPERATION id+= ident ofps+= operation_formal_param_section (pte+= program_type_expression )? (ac+= affects_clause )* (rc+= requires_clause )? (ec+= ensures_clause )? (dc+= decreasing_clause )? (fd+= facility_declaration )* (vd+= variable_declaration )* (avd+= aux_variable_declaration )* ss+= statement_sequence ) -> template(ln=adj[0]in=adj[1]ident=sigparams=$ofpsretDec=returnVarDecpte=$pteac=$acac=$acrc=$rcec=$ecdc=$dcfd=$fdvd=$vdavd=$avdss=statementSequenceretStmt=returnStmt) \"<ln><in><ident> (<params>) { <retDec> <ac> <rc> <ec> <dc> <fd> <vd> <avd> <ss><\\n><in><retStmt>}\";
    public final RSimpleTrans.operation_procedure_declaration_return operation_procedure_declaration() throws RecognitionException {
        RSimpleTrans.operation_procedure_declaration_return retval = new RSimpleTrans.operation_procedure_declaration_return();
        retval.start = input.LT(1);

        CommonTree OPERATION17=null;
        List list_id=null;
        List list_ofps=null;
        List list_pte=null;
        List list_ac=null;
        List list_rc=null;
        List list_ec=null;
        List list_dc=null;
        List list_fd=null;
        List list_vd=null;
        List list_avd=null;
        List list_ss=null;
        RuleReturnScope id = null;
        RuleReturnScope ofps = null;
        RuleReturnScope pte = null;
        RuleReturnScope ac = null;
        RuleReturnScope rc = null;
        RuleReturnScope ec = null;
        RuleReturnScope dc = null;
        RuleReturnScope fd = null;
        RuleReturnScope vd = null;
        RuleReturnScope avd = null;
        RuleReturnScope ss = null;

        String[] adj = {"",""};
        String modifier = "private";
        String returnType = "void";
        String sig = "";
        String returnVarDec = "";
        String returnStmt = "";
        String statementSequence = "";

        try {
            // RSimpleTrans.g:791:5: ( ^( OPERATION id+= ident ofps+= operation_formal_param_section (pte+= program_type_expression )? (ac+= affects_clause )* (rc+= requires_clause )? (ec+= ensures_clause )? (dc+= decreasing_clause )? (fd+= facility_declaration )* (vd+= variable_declaration )* (avd+= aux_variable_declaration )* ss+= statement_sequence ) -> template(ln=adj[0]in=adj[1]ident=sigparams=$ofpsretDec=returnVarDecpte=$pteac=$acac=$acrc=$rcec=$ecdc=$dcfd=$fdvd=$vdavd=$avdss=statementSequenceretStmt=returnStmt) \"<ln><in><ident> (<params>) { <retDec> <ac> <rc> <ec> <dc> <fd> <vd> <avd> <ss><\\n><in><retStmt>}\")
            // RSimpleTrans.g:791:9: ^( OPERATION id+= ident ofps+= operation_formal_param_section (pte+= program_type_expression )? (ac+= affects_clause )* (rc+= requires_clause )? (ec+= ensures_clause )? (dc+= decreasing_clause )? (fd+= facility_declaration )* (vd+= variable_declaration )* (avd+= aux_variable_declaration )* ss+= statement_sequence )
            {
            OPERATION17=(CommonTree)match(input,OPERATION,FOLLOW_OPERATION_in_operation_procedure_declaration4964); if (state.failed) return retval;

            if ( state.backtracking==0 ) {
              adj = adjustLine(OPERATION17);incIndent();
            }

            match(input, Token.DOWN, null); if (state.failed) return retval;
            pushFollow(FOLLOW_ident_in_operation_procedure_declaration4970);
            id=ident();

            state._fsp--;
            if (state.failed) return retval;
            if (list_id==null) list_id=new ArrayList();
            list_id.add(id.getTemplate());

            pushFollow(FOLLOW_operation_formal_param_section_in_operation_procedure_declaration4982);
            ofps=operation_formal_param_section();

            state._fsp--;
            if (state.failed) return retval;
            if (list_ofps==null) list_ofps=new ArrayList();
            list_ofps.add(ofps.getTemplate());

            // RSimpleTrans.g:793:12: (pte+= program_type_expression )?
            int alt89=2;
            int LA89_0 = input.LA(1);

            if ( (LA89_0==ARRAY||LA89_0==TYPEX) ) {
                alt89=1;
            }
            switch (alt89) {
                case 1 :
                    // RSimpleTrans.g:793:12: pte+= program_type_expression
                    {
                    pushFollow(FOLLOW_program_type_expression_in_operation_procedure_declaration4994);
                    pte=program_type_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_pte==null) list_pte=new ArrayList();
                    list_pte.add(pte.getTemplate());


                    }
                    break;

            }

            // RSimpleTrans.g:794:11: (ac+= affects_clause )*
            loop90:
            do {
                int alt90=2;
                int LA90_0 = input.LA(1);

                if ( (LA90_0==AFFECTS) ) {
                    alt90=1;
                }


                switch (alt90) {
            	case 1 :
            	    // RSimpleTrans.g:794:11: ac+= affects_clause
            	    {
            	    pushFollow(FOLLOW_affects_clause_in_operation_procedure_declaration5008);
            	    ac=affects_clause();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if (list_ac==null) list_ac=new ArrayList();
            	    list_ac.add(ac.getTemplate());


            	    }
            	    break;

            	default :
            	    break loop90;
                }
            } while (true);

            // RSimpleTrans.g:795:11: (rc+= requires_clause )?
            int alt91=2;
            int LA91_0 = input.LA(1);

            if ( (LA91_0==REQUIRES) ) {
                alt91=1;
            }
            switch (alt91) {
                case 1 :
                    // RSimpleTrans.g:795:11: rc+= requires_clause
                    {
                    pushFollow(FOLLOW_requires_clause_in_operation_procedure_declaration5021);
                    rc=requires_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_rc==null) list_rc=new ArrayList();
                    list_rc.add(rc.getTemplate());


                    }
                    break;

            }

            // RSimpleTrans.g:796:11: (ec+= ensures_clause )?
            int alt92=2;
            int LA92_0 = input.LA(1);

            if ( (LA92_0==ENSURES) ) {
                alt92=1;
            }
            switch (alt92) {
                case 1 :
                    // RSimpleTrans.g:796:11: ec+= ensures_clause
                    {
                    pushFollow(FOLLOW_ensures_clause_in_operation_procedure_declaration5034);
                    ec=ensures_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_ec==null) list_ec=new ArrayList();
                    list_ec.add(ec.getTemplate());


                    }
                    break;

            }

            // RSimpleTrans.g:798:11: (dc+= decreasing_clause )?
            int alt93=2;
            int LA93_0 = input.LA(1);

            if ( (LA93_0==DECREASING) ) {
                alt93=1;
            }
            switch (alt93) {
                case 1 :
                    // RSimpleTrans.g:798:11: dc+= decreasing_clause
                    {
                    pushFollow(FOLLOW_decreasing_clause_in_operation_procedure_declaration5056);
                    dc=decreasing_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_dc==null) list_dc=new ArrayList();
                    list_dc.add(dc.getTemplate());


                    }
                    break;

            }

            // RSimpleTrans.g:799:11: (fd+= facility_declaration )*
            loop94:
            do {
                int alt94=2;
                int LA94_0 = input.LA(1);

                if ( (LA94_0==FACILITY) ) {
                    alt94=1;
                }


                switch (alt94) {
            	case 1 :
            	    // RSimpleTrans.g:799:11: fd+= facility_declaration
            	    {
            	    pushFollow(FOLLOW_facility_declaration_in_operation_procedure_declaration5069);
            	    fd=facility_declaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if (list_fd==null) list_fd=new ArrayList();
            	    list_fd.add(fd.getTemplate());


            	    }
            	    break;

            	default :
            	    break loop94;
                }
            } while (true);

            // RSimpleTrans.g:800:11: (vd+= variable_declaration )*
            loop95:
            do {
                int alt95=2;
                int LA95_0 = input.LA(1);

                if ( (LA95_0==VAR) ) {
                    alt95=1;
                }


                switch (alt95) {
            	case 1 :
            	    // RSimpleTrans.g:800:11: vd+= variable_declaration
            	    {
            	    pushFollow(FOLLOW_variable_declaration_in_operation_procedure_declaration5082);
            	    vd=variable_declaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if (list_vd==null) list_vd=new ArrayList();
            	    list_vd.add(vd.getTemplate());


            	    }
            	    break;

            	default :
            	    break loop95;
                }
            } while (true);

            // RSimpleTrans.g:801:12: (avd+= aux_variable_declaration )*
            loop96:
            do {
                int alt96=2;
                int LA96_0 = input.LA(1);

                if ( (LA96_0==AUX_VAR) ) {
                    alt96=1;
                }


                switch (alt96) {
            	case 1 :
            	    // RSimpleTrans.g:801:12: avd+= aux_variable_declaration
            	    {
            	    pushFollow(FOLLOW_aux_variable_declaration_in_operation_procedure_declaration5095);
            	    avd=aux_variable_declaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if (list_avd==null) list_avd=new ArrayList();
            	    list_avd.add(avd.getTemplate());


            	    }
            	    break;

            	default :
            	    break loop96;
                }
            } while (true);

            pushFollow(FOLLOW_statement_sequence_in_operation_procedure_declaration5108);
            ss=statement_sequence();

            state._fsp--;
            if (state.failed) return retval;
            if (list_ss==null) list_ss=new ArrayList();
            list_ss.add(ss.getTemplate());


            match(input, Token.UP, null); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

                        if(((StringTemplate)list_id.get(0)).toString().trim().equals("main")){
                          modifier = "public static";
                        }
                        if(list_pte != null){
                          returnType = ((StringTemplate)list_pte.get(0)).toString().trim();
                          returnVarDec = returnType + " _ret;";
                          returnStmt = "return _ret; ";
                          String name = ((StringTemplate)list_id.get(0)).toString().trim();
                          for(Object s: list_ss)
                          {
                            statementSequence += s.toString().replace(name,"_ret");
                          }
                        }
                        else{
                          for(Object s: list_ss)
                          {
                            statementSequence += s.toString();
                          }
                        }
                        sig = modifier + " " + returnType + " ";
                        sig = templatePrepend((StringTemplate)list_id.get(0),sig);
                      
            }
            if ( state.backtracking==0 ) {
              decIndent();incLine();
            }


            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 828:9: -> template(ln=adj[0]in=adj[1]ident=sigparams=$ofpsretDec=returnVarDecpte=$pteac=$acac=$acrc=$rcec=$ecdc=$dcfd=$fdvd=$vdavd=$avdss=statementSequenceretStmt=returnStmt) \"<ln><in><ident> (<params>) { <retDec> <ac> <rc> <ec> <dc> <fd> <vd> <avd> <ss><\\n><in><retStmt>}\"
              {
                  retval.st = new StringTemplate(templateLib, "<ln><in><ident> (<params>) { <retDec> <ac> <rc> <ec> <dc> <fd> <vd> <avd> <ss><\\n><in><retStmt>}",
                new STAttrMap().put("ln", adj[0]).put("in", adj[1]).put("ident", sig).put("params", list_ofps).put("retDec", returnVarDec).put("pte", list_pte).put("ac", list_ac).put("ac", list_ac).put("rc", list_rc).put("ec", list_ec).put("dc", list_dc).put("fd", list_fd).put("vd", list_vd).put("avd", list_avd).put("ss", statementSequence).put("retStmt", returnStmt));
              }

            }
            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "operation_procedure_declaration"

    public static class operation_recursive_procedure_declaration_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "operation_recursive_procedure_declaration"
    // RSimpleTrans.g:841:1: operation_recursive_procedure_declaration : ^( RECURSIVE_OPERATION_PROCEDURE id1= ident operation_formal_param_section ( program_type_expression )? ( affects_clause )* ( requires_clause )? ( ensures_clause )? decreasing_clause ( facility_declaration )* ( variable_declaration )* ( aux_variable_declaration )* statement_sequence ) ;
    public final RSimpleTrans.operation_recursive_procedure_declaration_return operation_recursive_procedure_declaration() throws RecognitionException {
        RSimpleTrans.operation_recursive_procedure_declaration_return retval = new RSimpleTrans.operation_recursive_procedure_declaration_return();
        retval.start = input.LT(1);

        RSimpleTrans.ident_return id1 = null;


        try {
            // RSimpleTrans.g:842:5: ( ^( RECURSIVE_OPERATION_PROCEDURE id1= ident operation_formal_param_section ( program_type_expression )? ( affects_clause )* ( requires_clause )? ( ensures_clause )? decreasing_clause ( facility_declaration )* ( variable_declaration )* ( aux_variable_declaration )* statement_sequence ) )
            // RSimpleTrans.g:842:9: ^( RECURSIVE_OPERATION_PROCEDURE id1= ident operation_formal_param_section ( program_type_expression )? ( affects_clause )* ( requires_clause )? ( ensures_clause )? decreasing_clause ( facility_declaration )* ( variable_declaration )* ( aux_variable_declaration )* statement_sequence )
            {
            match(input,RECURSIVE_OPERATION_PROCEDURE,FOLLOW_RECURSIVE_OPERATION_PROCEDURE_in_operation_recursive_procedure_declaration5439); if (state.failed) return retval;

            match(input, Token.DOWN, null); if (state.failed) return retval;
            pushFollow(FOLLOW_ident_in_operation_recursive_procedure_declaration5443);
            id1=ident();

            state._fsp--;
            if (state.failed) return retval;
            pushFollow(FOLLOW_operation_formal_param_section_in_operation_recursive_procedure_declaration5453);
            operation_formal_param_section();

            state._fsp--;
            if (state.failed) return retval;
            // RSimpleTrans.g:844:9: ( program_type_expression )?
            int alt97=2;
            int LA97_0 = input.LA(1);

            if ( (LA97_0==ARRAY||LA97_0==TYPEX) ) {
                alt97=1;
            }
            switch (alt97) {
                case 1 :
                    // RSimpleTrans.g:844:11: program_type_expression
                    {
                    pushFollow(FOLLOW_program_type_expression_in_operation_recursive_procedure_declaration5465);
                    program_type_expression();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }

            // RSimpleTrans.g:845:9: ( affects_clause )*
            loop98:
            do {
                int alt98=2;
                int LA98_0 = input.LA(1);

                if ( (LA98_0==AFFECTS) ) {
                    alt98=1;
                }


                switch (alt98) {
            	case 1 :
            	    // RSimpleTrans.g:845:9: affects_clause
            	    {
            	    pushFollow(FOLLOW_affects_clause_in_operation_recursive_procedure_declaration5478);
            	    affects_clause();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }
            	    break;

            	default :
            	    break loop98;
                }
            } while (true);

            // RSimpleTrans.g:846:9: ( requires_clause )?
            int alt99=2;
            int LA99_0 = input.LA(1);

            if ( (LA99_0==REQUIRES) ) {
                alt99=1;
            }
            switch (alt99) {
                case 1 :
                    // RSimpleTrans.g:846:9: requires_clause
                    {
                    pushFollow(FOLLOW_requires_clause_in_operation_recursive_procedure_declaration5489);
                    requires_clause();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }

            // RSimpleTrans.g:847:9: ( ensures_clause )?
            int alt100=2;
            int LA100_0 = input.LA(1);

            if ( (LA100_0==ENSURES) ) {
                alt100=1;
            }
            switch (alt100) {
                case 1 :
                    // RSimpleTrans.g:847:9: ensures_clause
                    {
                    pushFollow(FOLLOW_ensures_clause_in_operation_recursive_procedure_declaration5500);
                    ensures_clause();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }

            pushFollow(FOLLOW_decreasing_clause_in_operation_recursive_procedure_declaration5511);
            decreasing_clause();

            state._fsp--;
            if (state.failed) return retval;
            // RSimpleTrans.g:849:9: ( facility_declaration )*
            loop101:
            do {
                int alt101=2;
                int LA101_0 = input.LA(1);

                if ( (LA101_0==FACILITY) ) {
                    alt101=1;
                }


                switch (alt101) {
            	case 1 :
            	    // RSimpleTrans.g:849:9: facility_declaration
            	    {
            	    pushFollow(FOLLOW_facility_declaration_in_operation_recursive_procedure_declaration5521);
            	    facility_declaration();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }
            	    break;

            	default :
            	    break loop101;
                }
            } while (true);

            // RSimpleTrans.g:850:9: ( variable_declaration )*
            loop102:
            do {
                int alt102=2;
                int LA102_0 = input.LA(1);

                if ( (LA102_0==VAR) ) {
                    alt102=1;
                }


                switch (alt102) {
            	case 1 :
            	    // RSimpleTrans.g:850:9: variable_declaration
            	    {
            	    pushFollow(FOLLOW_variable_declaration_in_operation_recursive_procedure_declaration5532);
            	    variable_declaration();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }
            	    break;

            	default :
            	    break loop102;
                }
            } while (true);

            // RSimpleTrans.g:851:9: ( aux_variable_declaration )*
            loop103:
            do {
                int alt103=2;
                int LA103_0 = input.LA(1);

                if ( (LA103_0==AUX_VAR) ) {
                    alt103=1;
                }


                switch (alt103) {
            	case 1 :
            	    // RSimpleTrans.g:851:9: aux_variable_declaration
            	    {
            	    pushFollow(FOLLOW_aux_variable_declaration_in_operation_recursive_procedure_declaration5543);
            	    aux_variable_declaration();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }
            	    break;

            	default :
            	    break loop103;
                }
            } while (true);

            pushFollow(FOLLOW_statement_sequence_in_operation_recursive_procedure_declaration5554);
            statement_sequence();

            state._fsp--;
            if (state.failed) return retval;

            match(input, Token.UP, null); if (state.failed) return retval;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "operation_recursive_procedure_declaration"

    public static class operation_declaration_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "operation_declaration"
    // RSimpleTrans.g:855:1: operation_declaration : ^( OPERATION ident ( operation_formal_param_section ) ( program_type_expression )? ( affects_clause )* ( requires_clause )? ( ensures_clause )? ) ;
    public final RSimpleTrans.operation_declaration_return operation_declaration() throws RecognitionException {
        RSimpleTrans.operation_declaration_return retval = new RSimpleTrans.operation_declaration_return();
        retval.start = input.LT(1);

        try {
            // RSimpleTrans.g:856:5: ( ^( OPERATION ident ( operation_formal_param_section ) ( program_type_expression )? ( affects_clause )* ( requires_clause )? ( ensures_clause )? ) )
            // RSimpleTrans.g:856:9: ^( OPERATION ident ( operation_formal_param_section ) ( program_type_expression )? ( affects_clause )* ( requires_clause )? ( ensures_clause )? )
            {
            match(input,OPERATION,FOLLOW_OPERATION_in_operation_declaration5575); if (state.failed) return retval;

            match(input, Token.DOWN, null); if (state.failed) return retval;
            pushFollow(FOLLOW_ident_in_operation_declaration5577);
            ident();

            state._fsp--;
            if (state.failed) return retval;
            // RSimpleTrans.g:857:9: ( operation_formal_param_section )
            // RSimpleTrans.g:857:10: operation_formal_param_section
            {
            pushFollow(FOLLOW_operation_formal_param_section_in_operation_declaration5588);
            operation_formal_param_section();

            state._fsp--;
            if (state.failed) return retval;

            }

            // RSimpleTrans.g:858:9: ( program_type_expression )?
            int alt104=2;
            int LA104_0 = input.LA(1);

            if ( (LA104_0==ARRAY||LA104_0==TYPEX) ) {
                alt104=1;
            }
            switch (alt104) {
                case 1 :
                    // RSimpleTrans.g:858:11: program_type_expression
                    {
                    pushFollow(FOLLOW_program_type_expression_in_operation_declaration5601);
                    program_type_expression();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }

            // RSimpleTrans.g:859:9: ( affects_clause )*
            loop105:
            do {
                int alt105=2;
                int LA105_0 = input.LA(1);

                if ( (LA105_0==AFFECTS) ) {
                    alt105=1;
                }


                switch (alt105) {
            	case 1 :
            	    // RSimpleTrans.g:859:10: affects_clause
            	    {
            	    pushFollow(FOLLOW_affects_clause_in_operation_declaration5615);
            	    affects_clause();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }
            	    break;

            	default :
            	    break loop105;
                }
            } while (true);

            // RSimpleTrans.g:860:9: ( requires_clause )?
            int alt106=2;
            int LA106_0 = input.LA(1);

            if ( (LA106_0==REQUIRES) ) {
                alt106=1;
            }
            switch (alt106) {
                case 1 :
                    // RSimpleTrans.g:860:10: requires_clause
                    {
                    pushFollow(FOLLOW_requires_clause_in_operation_declaration5628);
                    requires_clause();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }

            // RSimpleTrans.g:861:9: ( ensures_clause )?
            int alt107=2;
            int LA107_0 = input.LA(1);

            if ( (LA107_0==ENSURES) ) {
                alt107=1;
            }
            switch (alt107) {
                case 1 :
                    // RSimpleTrans.g:861:10: ensures_clause
                    {
                    pushFollow(FOLLOW_ensures_clause_in_operation_declaration5641);
                    ensures_clause();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            match(input, Token.UP, null); if (state.failed) return retval;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "operation_declaration"

    public static class performance_operation_declaration_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "performance_operation_declaration"
    // RSimpleTrans.g:864:1: performance_operation_declaration : ^( OPERATION ident ( operation_formal_param_section ) ( program_type_expression )? ( ensures_clause )* ( duration_clause )? ( mainp_disp_clause )? ) ;
    public final RSimpleTrans.performance_operation_declaration_return performance_operation_declaration() throws RecognitionException {
        RSimpleTrans.performance_operation_declaration_return retval = new RSimpleTrans.performance_operation_declaration_return();
        retval.start = input.LT(1);

        try {
            // RSimpleTrans.g:865:5: ( ^( OPERATION ident ( operation_formal_param_section ) ( program_type_expression )? ( ensures_clause )* ( duration_clause )? ( mainp_disp_clause )? ) )
            // RSimpleTrans.g:865:9: ^( OPERATION ident ( operation_formal_param_section ) ( program_type_expression )? ( ensures_clause )* ( duration_clause )? ( mainp_disp_clause )? )
            {
            match(input,OPERATION,FOLLOW_OPERATION_in_performance_operation_declaration5668); if (state.failed) return retval;

            match(input, Token.DOWN, null); if (state.failed) return retval;
            pushFollow(FOLLOW_ident_in_performance_operation_declaration5670);
            ident();

            state._fsp--;
            if (state.failed) return retval;
            // RSimpleTrans.g:866:9: ( operation_formal_param_section )
            // RSimpleTrans.g:866:10: operation_formal_param_section
            {
            pushFollow(FOLLOW_operation_formal_param_section_in_performance_operation_declaration5681);
            operation_formal_param_section();

            state._fsp--;
            if (state.failed) return retval;

            }

            // RSimpleTrans.g:867:9: ( program_type_expression )?
            int alt108=2;
            int LA108_0 = input.LA(1);

            if ( (LA108_0==ARRAY||LA108_0==TYPEX) ) {
                alt108=1;
            }
            switch (alt108) {
                case 1 :
                    // RSimpleTrans.g:867:10: program_type_expression
                    {
                    pushFollow(FOLLOW_program_type_expression_in_performance_operation_declaration5693);
                    program_type_expression();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }

            // RSimpleTrans.g:868:9: ( ensures_clause )*
            loop109:
            do {
                int alt109=2;
                int LA109_0 = input.LA(1);

                if ( (LA109_0==ENSURES) ) {
                    alt109=1;
                }


                switch (alt109) {
            	case 1 :
            	    // RSimpleTrans.g:868:10: ensures_clause
            	    {
            	    pushFollow(FOLLOW_ensures_clause_in_performance_operation_declaration5706);
            	    ensures_clause();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }
            	    break;

            	default :
            	    break loop109;
                }
            } while (true);

            // RSimpleTrans.g:869:9: ( duration_clause )?
            int alt110=2;
            int LA110_0 = input.LA(1);

            if ( (LA110_0==DURATION) ) {
                alt110=1;
            }
            switch (alt110) {
                case 1 :
                    // RSimpleTrans.g:869:10: duration_clause
                    {
                    pushFollow(FOLLOW_duration_clause_in_performance_operation_declaration5719);
                    duration_clause();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }

            // RSimpleTrans.g:870:9: ( mainp_disp_clause )?
            int alt111=2;
            int LA111_0 = input.LA(1);

            if ( (LA111_0==MAINP_DISP) ) {
                alt111=1;
            }
            switch (alt111) {
                case 1 :
                    // RSimpleTrans.g:870:10: mainp_disp_clause
                    {
                    pushFollow(FOLLOW_mainp_disp_clause_in_performance_operation_declaration5732);
                    mainp_disp_clause();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            match(input, Token.UP, null); if (state.failed) return retval;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "performance_operation_declaration"

    public static class aux_operation_declaration_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "aux_operation_declaration"
    // RSimpleTrans.g:873:1: aux_operation_declaration : ^( AUX_OPERATION ident operation_formal_param_section ( program_type_expression )? ( affects_clause )* ( requires_clause )? ( ensures_clause )? ) ;
    public final RSimpleTrans.aux_operation_declaration_return aux_operation_declaration() throws RecognitionException {
        RSimpleTrans.aux_operation_declaration_return retval = new RSimpleTrans.aux_operation_declaration_return();
        retval.start = input.LT(1);

        try {
            // RSimpleTrans.g:874:5: ( ^( AUX_OPERATION ident operation_formal_param_section ( program_type_expression )? ( affects_clause )* ( requires_clause )? ( ensures_clause )? ) )
            // RSimpleTrans.g:874:9: ^( AUX_OPERATION ident operation_formal_param_section ( program_type_expression )? ( affects_clause )* ( requires_clause )? ( ensures_clause )? )
            {
            match(input,AUX_OPERATION,FOLLOW_AUX_OPERATION_in_aux_operation_declaration5759); if (state.failed) return retval;

            match(input, Token.DOWN, null); if (state.failed) return retval;
            pushFollow(FOLLOW_ident_in_aux_operation_declaration5761);
            ident();

            state._fsp--;
            if (state.failed) return retval;
            pushFollow(FOLLOW_operation_formal_param_section_in_aux_operation_declaration5771);
            operation_formal_param_section();

            state._fsp--;
            if (state.failed) return retval;
            // RSimpleTrans.g:876:9: ( program_type_expression )?
            int alt112=2;
            int LA112_0 = input.LA(1);

            if ( (LA112_0==ARRAY||LA112_0==TYPEX) ) {
                alt112=1;
            }
            switch (alt112) {
                case 1 :
                    // RSimpleTrans.g:876:9: program_type_expression
                    {
                    pushFollow(FOLLOW_program_type_expression_in_aux_operation_declaration5781);
                    program_type_expression();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }

            // RSimpleTrans.g:877:9: ( affects_clause )*
            loop113:
            do {
                int alt113=2;
                int LA113_0 = input.LA(1);

                if ( (LA113_0==AFFECTS) ) {
                    alt113=1;
                }


                switch (alt113) {
            	case 1 :
            	    // RSimpleTrans.g:877:9: affects_clause
            	    {
            	    pushFollow(FOLLOW_affects_clause_in_aux_operation_declaration5792);
            	    affects_clause();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }
            	    break;

            	default :
            	    break loop113;
                }
            } while (true);

            // RSimpleTrans.g:878:9: ( requires_clause )?
            int alt114=2;
            int LA114_0 = input.LA(1);

            if ( (LA114_0==REQUIRES) ) {
                alt114=1;
            }
            switch (alt114) {
                case 1 :
                    // RSimpleTrans.g:878:9: requires_clause
                    {
                    pushFollow(FOLLOW_requires_clause_in_aux_operation_declaration5803);
                    requires_clause();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }

            // RSimpleTrans.g:879:9: ( ensures_clause )?
            int alt115=2;
            int LA115_0 = input.LA(1);

            if ( (LA115_0==ENSURES) ) {
                alt115=1;
            }
            switch (alt115) {
                case 1 :
                    // RSimpleTrans.g:879:9: ensures_clause
                    {
                    pushFollow(FOLLOW_ensures_clause_in_aux_operation_declaration5814);
                    ensures_clause();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            match(input, Token.UP, null); if (state.failed) return retval;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "aux_operation_declaration"

    public static class procedure_declaration_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "procedure_declaration"
    // RSimpleTrans.g:882:1: procedure_declaration : ^( PROCEDURE id1= ident ( operation_formal_param_section ) ( program_type_expression )? ( affects_clause )* ( decreasing_clause )? ( facility_declaration )* ( variable_declaration )* ( aux_variable_declaration )* statement_sequence ) ;
    public final RSimpleTrans.procedure_declaration_return procedure_declaration() throws RecognitionException {
        RSimpleTrans.procedure_declaration_return retval = new RSimpleTrans.procedure_declaration_return();
        retval.start = input.LT(1);

        RSimpleTrans.ident_return id1 = null;


        try {
            // RSimpleTrans.g:883:5: ( ^( PROCEDURE id1= ident ( operation_formal_param_section ) ( program_type_expression )? ( affects_clause )* ( decreasing_clause )? ( facility_declaration )* ( variable_declaration )* ( aux_variable_declaration )* statement_sequence ) )
            // RSimpleTrans.g:883:9: ^( PROCEDURE id1= ident ( operation_formal_param_section ) ( program_type_expression )? ( affects_clause )* ( decreasing_clause )? ( facility_declaration )* ( variable_declaration )* ( aux_variable_declaration )* statement_sequence )
            {
            match(input,PROCEDURE,FOLLOW_PROCEDURE_in_procedure_declaration5836); if (state.failed) return retval;

            match(input, Token.DOWN, null); if (state.failed) return retval;
            pushFollow(FOLLOW_ident_in_procedure_declaration5840);
            id1=ident();

            state._fsp--;
            if (state.failed) return retval;
            // RSimpleTrans.g:884:9: ( operation_formal_param_section )
            // RSimpleTrans.g:884:10: operation_formal_param_section
            {
            pushFollow(FOLLOW_operation_formal_param_section_in_procedure_declaration5851);
            operation_formal_param_section();

            state._fsp--;
            if (state.failed) return retval;

            }

            // RSimpleTrans.g:885:9: ( program_type_expression )?
            int alt116=2;
            int LA116_0 = input.LA(1);

            if ( (LA116_0==ARRAY||LA116_0==TYPEX) ) {
                alt116=1;
            }
            switch (alt116) {
                case 1 :
                    // RSimpleTrans.g:885:11: program_type_expression
                    {
                    pushFollow(FOLLOW_program_type_expression_in_procedure_declaration5864);
                    program_type_expression();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }

            // RSimpleTrans.g:886:9: ( affects_clause )*
            loop117:
            do {
                int alt117=2;
                int LA117_0 = input.LA(1);

                if ( (LA117_0==AFFECTS) ) {
                    alt117=1;
                }


                switch (alt117) {
            	case 1 :
            	    // RSimpleTrans.g:886:10: affects_clause
            	    {
            	    pushFollow(FOLLOW_affects_clause_in_procedure_declaration5878);
            	    affects_clause();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }
            	    break;

            	default :
            	    break loop117;
                }
            } while (true);

            // RSimpleTrans.g:887:9: ( decreasing_clause )?
            int alt118=2;
            int LA118_0 = input.LA(1);

            if ( (LA118_0==DECREASING) ) {
                alt118=1;
            }
            switch (alt118) {
                case 1 :
                    // RSimpleTrans.g:887:10: decreasing_clause
                    {
                    pushFollow(FOLLOW_decreasing_clause_in_procedure_declaration5891);
                    decreasing_clause();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }

            // RSimpleTrans.g:888:9: ( facility_declaration )*
            loop119:
            do {
                int alt119=2;
                int LA119_0 = input.LA(1);

                if ( (LA119_0==FACILITY) ) {
                    alt119=1;
                }


                switch (alt119) {
            	case 1 :
            	    // RSimpleTrans.g:888:10: facility_declaration
            	    {
            	    pushFollow(FOLLOW_facility_declaration_in_procedure_declaration5904);
            	    facility_declaration();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }
            	    break;

            	default :
            	    break loop119;
                }
            } while (true);

            // RSimpleTrans.g:889:9: ( variable_declaration )*
            loop120:
            do {
                int alt120=2;
                int LA120_0 = input.LA(1);

                if ( (LA120_0==VAR) ) {
                    alt120=1;
                }


                switch (alt120) {
            	case 1 :
            	    // RSimpleTrans.g:889:10: variable_declaration
            	    {
            	    pushFollow(FOLLOW_variable_declaration_in_procedure_declaration5917);
            	    variable_declaration();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }
            	    break;

            	default :
            	    break loop120;
                }
            } while (true);

            // RSimpleTrans.g:890:9: ( aux_variable_declaration )*
            loop121:
            do {
                int alt121=2;
                int LA121_0 = input.LA(1);

                if ( (LA121_0==AUX_VAR) ) {
                    alt121=1;
                }


                switch (alt121) {
            	case 1 :
            	    // RSimpleTrans.g:890:10: aux_variable_declaration
            	    {
            	    pushFollow(FOLLOW_aux_variable_declaration_in_procedure_declaration5930);
            	    aux_variable_declaration();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }
            	    break;

            	default :
            	    break loop121;
                }
            } while (true);

            pushFollow(FOLLOW_statement_sequence_in_procedure_declaration5942);
            statement_sequence();

            state._fsp--;
            if (state.failed) return retval;

            match(input, Token.UP, null); if (state.failed) return retval;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "procedure_declaration"

    public static class recursive_procedure_declaration_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "recursive_procedure_declaration"
    // RSimpleTrans.g:894:1: recursive_procedure_declaration : ^( RECURSIVE_PROCEDURE ident operation_formal_param_section ( program_type_expression )? ( affects_clause )* ( decreasing_clause )? ( facility_declaration )* ( variable_declaration )* ( aux_variable_declaration )* statement_sequence ) ;
    public final RSimpleTrans.recursive_procedure_declaration_return recursive_procedure_declaration() throws RecognitionException {
        RSimpleTrans.recursive_procedure_declaration_return retval = new RSimpleTrans.recursive_procedure_declaration_return();
        retval.start = input.LT(1);

        try {
            // RSimpleTrans.g:895:5: ( ^( RECURSIVE_PROCEDURE ident operation_formal_param_section ( program_type_expression )? ( affects_clause )* ( decreasing_clause )? ( facility_declaration )* ( variable_declaration )* ( aux_variable_declaration )* statement_sequence ) )
            // RSimpleTrans.g:895:9: ^( RECURSIVE_PROCEDURE ident operation_formal_param_section ( program_type_expression )? ( affects_clause )* ( decreasing_clause )? ( facility_declaration )* ( variable_declaration )* ( aux_variable_declaration )* statement_sequence )
            {
            match(input,RECURSIVE_PROCEDURE,FOLLOW_RECURSIVE_PROCEDURE_in_recursive_procedure_declaration5967); if (state.failed) return retval;

            match(input, Token.DOWN, null); if (state.failed) return retval;
            pushFollow(FOLLOW_ident_in_recursive_procedure_declaration5969);
            ident();

            state._fsp--;
            if (state.failed) return retval;
            pushFollow(FOLLOW_operation_formal_param_section_in_recursive_procedure_declaration5979);
            operation_formal_param_section();

            state._fsp--;
            if (state.failed) return retval;
            // RSimpleTrans.g:897:9: ( program_type_expression )?
            int alt122=2;
            int LA122_0 = input.LA(1);

            if ( (LA122_0==ARRAY||LA122_0==TYPEX) ) {
                alt122=1;
            }
            switch (alt122) {
                case 1 :
                    // RSimpleTrans.g:897:9: program_type_expression
                    {
                    pushFollow(FOLLOW_program_type_expression_in_recursive_procedure_declaration5989);
                    program_type_expression();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }

            // RSimpleTrans.g:898:9: ( affects_clause )*
            loop123:
            do {
                int alt123=2;
                int LA123_0 = input.LA(1);

                if ( (LA123_0==AFFECTS) ) {
                    alt123=1;
                }


                switch (alt123) {
            	case 1 :
            	    // RSimpleTrans.g:898:9: affects_clause
            	    {
            	    pushFollow(FOLLOW_affects_clause_in_recursive_procedure_declaration6000);
            	    affects_clause();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }
            	    break;

            	default :
            	    break loop123;
                }
            } while (true);

            // RSimpleTrans.g:899:9: ( decreasing_clause )?
            int alt124=2;
            int LA124_0 = input.LA(1);

            if ( (LA124_0==DECREASING) ) {
                alt124=1;
            }
            switch (alt124) {
                case 1 :
                    // RSimpleTrans.g:899:9: decreasing_clause
                    {
                    pushFollow(FOLLOW_decreasing_clause_in_recursive_procedure_declaration6011);
                    decreasing_clause();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }

            // RSimpleTrans.g:900:9: ( facility_declaration )*
            loop125:
            do {
                int alt125=2;
                int LA125_0 = input.LA(1);

                if ( (LA125_0==FACILITY) ) {
                    alt125=1;
                }


                switch (alt125) {
            	case 1 :
            	    // RSimpleTrans.g:900:9: facility_declaration
            	    {
            	    pushFollow(FOLLOW_facility_declaration_in_recursive_procedure_declaration6022);
            	    facility_declaration();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }
            	    break;

            	default :
            	    break loop125;
                }
            } while (true);

            // RSimpleTrans.g:901:9: ( variable_declaration )*
            loop126:
            do {
                int alt126=2;
                int LA126_0 = input.LA(1);

                if ( (LA126_0==VAR) ) {
                    alt126=1;
                }


                switch (alt126) {
            	case 1 :
            	    // RSimpleTrans.g:901:9: variable_declaration
            	    {
            	    pushFollow(FOLLOW_variable_declaration_in_recursive_procedure_declaration6033);
            	    variable_declaration();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }
            	    break;

            	default :
            	    break loop126;
                }
            } while (true);

            // RSimpleTrans.g:902:9: ( aux_variable_declaration )*
            loop127:
            do {
                int alt127=2;
                int LA127_0 = input.LA(1);

                if ( (LA127_0==AUX_VAR) ) {
                    alt127=1;
                }


                switch (alt127) {
            	case 1 :
            	    // RSimpleTrans.g:902:9: aux_variable_declaration
            	    {
            	    pushFollow(FOLLOW_aux_variable_declaration_in_recursive_procedure_declaration6044);
            	    aux_variable_declaration();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }
            	    break;

            	default :
            	    break loop127;
                }
            } while (true);

            pushFollow(FOLLOW_statement_sequence_in_recursive_procedure_declaration6062);
            statement_sequence();

            state._fsp--;
            if (state.failed) return retval;

            match(input, Token.UP, null); if (state.failed) return retval;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "recursive_procedure_declaration"

    public static class operation_formal_param_section_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "operation_formal_param_section"
    // RSimpleTrans.g:906:1: operation_formal_param_section : ^( PARAMS (ofpg+= operation_formal_param_group )* ) -> template(ofpg=$ofpg) \"<ofpg; separator=\", \">\";
    public final RSimpleTrans.operation_formal_param_section_return operation_formal_param_section() throws RecognitionException {
        RSimpleTrans.operation_formal_param_section_return retval = new RSimpleTrans.operation_formal_param_section_return();
        retval.start = input.LT(1);

        List list_ofpg=null;
        RuleReturnScope ofpg = null;
        try {
            // RSimpleTrans.g:907:5: ( ^( PARAMS (ofpg+= operation_formal_param_group )* ) -> template(ofpg=$ofpg) \"<ofpg; separator=\", \">\")
            // RSimpleTrans.g:907:9: ^( PARAMS (ofpg+= operation_formal_param_group )* )
            {
            match(input,PARAMS,FOLLOW_PARAMS_in_operation_formal_param_section6083); if (state.failed) return retval;

            if ( input.LA(1)==Token.DOWN ) {
                match(input, Token.DOWN, null); if (state.failed) return retval;
                // RSimpleTrans.g:907:22: (ofpg+= operation_formal_param_group )*
                loop128:
                do {
                    int alt128=2;
                    int LA128_0 = input.LA(1);

                    if ( (LA128_0==VAR) ) {
                        alt128=1;
                    }


                    switch (alt128) {
                	case 1 :
                	    // RSimpleTrans.g:907:22: ofpg+= operation_formal_param_group
                	    {
                	    pushFollow(FOLLOW_operation_formal_param_group_in_operation_formal_param_section6087);
                	    ofpg=operation_formal_param_group();

                	    state._fsp--;
                	    if (state.failed) return retval;
                	    if (list_ofpg==null) list_ofpg=new ArrayList();
                	    list_ofpg.add(ofpg.getTemplate());


                	    }
                	    break;

                	default :
                	    break loop128;
                    }
                } while (true);


                match(input, Token.UP, null); if (state.failed) return retval;
            }


            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 907:55: -> template(ofpg=$ofpg) \"<ofpg; separator=\", \">\"
              {
                  retval.st = new StringTemplate(templateLib, "<ofpg; separator=\", \">",
                new STAttrMap().put("ofpg", list_ofpg));
              }

            }
            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "operation_formal_param_section"

    public static class operation_formal_param_group_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "operation_formal_param_group"
    // RSimpleTrans.g:910:1: operation_formal_param_group : ^( VAR abstract_mode vdg+= variable_declaration_group ) -> template(ln=adj[0]in=adj[1]vdg=$vdg) \"<ln><in><vdg>\";
    public final RSimpleTrans.operation_formal_param_group_return operation_formal_param_group() throws RecognitionException {
        RSimpleTrans.operation_formal_param_group_return retval = new RSimpleTrans.operation_formal_param_group_return();
        retval.start = input.LT(1);

        CommonTree VAR18=null;
        List list_vdg=null;
        RuleReturnScope vdg = null;

        String[] adj = {"",""};

        try {
            // RSimpleTrans.g:914:5: ( ^( VAR abstract_mode vdg+= variable_declaration_group ) -> template(ln=adj[0]in=adj[1]vdg=$vdg) \"<ln><in><vdg>\")
            // RSimpleTrans.g:914:9: ^( VAR abstract_mode vdg+= variable_declaration_group )
            {
            VAR18=(CommonTree)match(input,VAR,FOLLOW_VAR_in_operation_formal_param_group6123); if (state.failed) return retval;

            if ( state.backtracking==0 ) {
              adj = adjustLine(VAR18);
            }

            match(input, Token.DOWN, null); if (state.failed) return retval;
            pushFollow(FOLLOW_abstract_mode_in_operation_formal_param_group6127);
            abstract_mode();

            state._fsp--;
            if (state.failed) return retval;
            pushFollow(FOLLOW_variable_declaration_group_in_operation_formal_param_group6131);
            vdg=variable_declaration_group();

            state._fsp--;
            if (state.failed) return retval;
            if (list_vdg==null) list_vdg=new ArrayList();
            list_vdg.add(vdg.getTemplate());


            match(input, Token.UP, null); if (state.failed) return retval;


            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 915:9: -> template(ln=adj[0]in=adj[1]vdg=$vdg) \"<ln><in><vdg>\"
              {
                  retval.st = new StringTemplate(templateLib, "<ln><in><vdg>",
                new STAttrMap().put("ln", adj[0]).put("in", adj[1]).put("vdg", list_vdg));
              }

            }
            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "operation_formal_param_group"

    public static class variable_declaration_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "variable_declaration"
    // RSimpleTrans.g:919:1: variable_declaration : ^( VAR vdg+= variable_declaration_group ) -> template(ln=adj[0]in=adj[1]vdg=$vdg) \"<ln><in><vdg>;\";
    public final RSimpleTrans.variable_declaration_return variable_declaration() throws RecognitionException {
        RSimpleTrans.variable_declaration_return retval = new RSimpleTrans.variable_declaration_return();
        retval.start = input.LT(1);

        CommonTree VAR19=null;
        List list_vdg=null;
        RuleReturnScope vdg = null;

        String[] adj = {"",""};

        try {
            // RSimpleTrans.g:923:5: ( ^( VAR vdg+= variable_declaration_group ) -> template(ln=adj[0]in=adj[1]vdg=$vdg) \"<ln><in><vdg>;\")
            // RSimpleTrans.g:923:9: ^( VAR vdg+= variable_declaration_group )
            {
            VAR19=(CommonTree)match(input,VAR,FOLLOW_VAR_in_variable_declaration6190); if (state.failed) return retval;

            if ( state.backtracking==0 ) {
              adj = adjustLine(VAR19);
            }

            match(input, Token.DOWN, null); if (state.failed) return retval;
            pushFollow(FOLLOW_variable_declaration_group_in_variable_declaration6196);
            vdg=variable_declaration_group();

            state._fsp--;
            if (state.failed) return retval;
            if (list_vdg==null) list_vdg=new ArrayList();
            list_vdg.add(vdg.getTemplate());


            match(input, Token.UP, null); if (state.failed) return retval;


            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 924:9: -> template(ln=adj[0]in=adj[1]vdg=$vdg) \"<ln><in><vdg>;\"
              {
                  retval.st = new StringTemplate(templateLib, "<ln><in><vdg>;",
                new STAttrMap().put("ln", adj[0]).put("in", adj[1]).put("vdg", list_vdg));
              }

            }
            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "variable_declaration"

    public static class aux_variable_declaration_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "aux_variable_declaration"
    // RSimpleTrans.g:927:1: aux_variable_declaration : ^( AUX_VAR aux_variable_declaration_group ) ;
    public final RSimpleTrans.aux_variable_declaration_return aux_variable_declaration() throws RecognitionException {
        RSimpleTrans.aux_variable_declaration_return retval = new RSimpleTrans.aux_variable_declaration_return();
        retval.start = input.LT(1);

        try {
            // RSimpleTrans.g:928:5: ( ^( AUX_VAR aux_variable_declaration_group ) )
            // RSimpleTrans.g:928:9: ^( AUX_VAR aux_variable_declaration_group )
            {
            match(input,AUX_VAR,FOLLOW_AUX_VAR_in_aux_variable_declaration6247); if (state.failed) return retval;

            match(input, Token.DOWN, null); if (state.failed) return retval;
            pushFollow(FOLLOW_aux_variable_declaration_group_in_aux_variable_declaration6249);
            aux_variable_declaration_group();

            state._fsp--;
            if (state.failed) return retval;

            match(input, Token.UP, null); if (state.failed) return retval;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "aux_variable_declaration"

    public static class abstract_mode_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "abstract_mode"
    // RSimpleTrans.g:931:1: abstract_mode : ( ALTERS | CLEARS | EVALUATES | PRESERVES | REPLACES | RESTORES | UPDATES | REASSIGNS );
    public final RSimpleTrans.abstract_mode_return abstract_mode() throws RecognitionException {
        RSimpleTrans.abstract_mode_return retval = new RSimpleTrans.abstract_mode_return();
        retval.start = input.LT(1);

        try {
            // RSimpleTrans.g:932:5: ( ALTERS | CLEARS | EVALUATES | PRESERVES | REPLACES | RESTORES | UPDATES | REASSIGNS )
            // RSimpleTrans.g:
            {
            if ( input.LA(1)==ALTERS||input.LA(1)==CLEARS||input.LA(1)==EVALUATES||input.LA(1)==PRESERVES||input.LA(1)==REASSIGNS||input.LA(1)==REPLACES||input.LA(1)==RESTORES||input.LA(1)==UPDATES ) {
                input.consume();
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "abstract_mode"

    public static class affects_clause_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "affects_clause"
    // RSimpleTrans.g:942:1: affects_clause : ^( AFFECTS am= abstract_mode qi1+= qualified_ident ( COMMA qi2+= qualified_ident )* ) -> template(ln=adj[0]in=adj[1]clause=$AFFECTS.textam=$am.textqi1=$qi1qi2=$qi2) \"<ln><in>/*@ <clause><am> <qi1>, <qi2> */\";
    public final RSimpleTrans.affects_clause_return affects_clause() throws RecognitionException {
        RSimpleTrans.affects_clause_return retval = new RSimpleTrans.affects_clause_return();
        retval.start = input.LT(1);

        CommonTree AFFECTS20=null;
        List list_qi1=null;
        List list_qi2=null;
        RSimpleTrans.abstract_mode_return am = null;

        RuleReturnScope qi1 = null;
        RuleReturnScope qi2 = null;

        String[] adj = {"",""};

        try {
            // RSimpleTrans.g:946:5: ( ^( AFFECTS am= abstract_mode qi1+= qualified_ident ( COMMA qi2+= qualified_ident )* ) -> template(ln=adj[0]in=adj[1]clause=$AFFECTS.textam=$am.textqi1=$qi1qi2=$qi2) \"<ln><in>/*@ <clause><am> <qi1>, <qi2> */\")
            // RSimpleTrans.g:946:9: ^( AFFECTS am= abstract_mode qi1+= qualified_ident ( COMMA qi2+= qualified_ident )* )
            {
            AFFECTS20=(CommonTree)match(input,AFFECTS,FOLLOW_AFFECTS_in_affects_clause6372); if (state.failed) return retval;

            if ( state.backtracking==0 ) {
              adj = adjustLine(AFFECTS20);
            }

            match(input, Token.DOWN, null); if (state.failed) return retval;
            pushFollow(FOLLOW_abstract_mode_in_affects_clause6378);
            am=abstract_mode();

            state._fsp--;
            if (state.failed) return retval;
            pushFollow(FOLLOW_qualified_ident_in_affects_clause6382);
            qi1=qualified_ident();

            state._fsp--;
            if (state.failed) return retval;
            if (list_qi1==null) list_qi1=new ArrayList();
            list_qi1.add(qi1.getTemplate());

            // RSimpleTrans.g:946:87: ( COMMA qi2+= qualified_ident )*
            loop129:
            do {
                int alt129=2;
                int LA129_0 = input.LA(1);

                if ( (LA129_0==COMMA) ) {
                    alt129=1;
                }


                switch (alt129) {
            	case 1 :
            	    // RSimpleTrans.g:946:88: COMMA qi2+= qualified_ident
            	    {
            	    match(input,COMMA,FOLLOW_COMMA_in_affects_clause6385); if (state.failed) return retval;
            	    pushFollow(FOLLOW_qualified_ident_in_affects_clause6389);
            	    qi2=qualified_ident();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if (list_qi2==null) list_qi2=new ArrayList();
            	    list_qi2.add(qi2.getTemplate());


            	    }
            	    break;

            	default :
            	    break loop129;
                }
            } while (true);


            match(input, Token.UP, null); if (state.failed) return retval;


            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 947:9: -> template(ln=adj[0]in=adj[1]clause=$AFFECTS.textam=$am.textqi1=$qi1qi2=$qi2) \"<ln><in>/*@ <clause><am> <qi1>, <qi2> */\"
              {
                  retval.st = new StringTemplate(templateLib, "<ln><in>/*@ <clause><am> <qi1>, <qi2> */",
                new STAttrMap().put("ln", adj[0]).put("in", adj[1]).put("clause", (AFFECTS20!=null?AFFECTS20.getText():null)).put("am", (am!=null?(input.getTokenStream().toString(
                input.getTreeAdaptor().getTokenStartIndex(am.start),
                input.getTreeAdaptor().getTokenStopIndex(am.start))):null)).put("qi1", list_qi1).put("qi2", list_qi2));
              }

            }
            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "affects_clause"

    public static class requires_clause_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "requires_clause"
    // RSimpleTrans.g:951:1: requires_clause : ^( REQUIRES me= math_expression ) -> template(ln=adj[0]in=adj[1]clause=$REQUIRESme=$me.text) \"<ln><in>/*@ <clause><am> <me> */\";
    public final RSimpleTrans.requires_clause_return requires_clause() throws RecognitionException {
        RSimpleTrans.requires_clause_return retval = new RSimpleTrans.requires_clause_return();
        retval.start = input.LT(1);

        CommonTree REQUIRES21=null;
        RSimpleTrans.math_expression_return me = null;



        String[] adj = {"",""};

        try {
            // RSimpleTrans.g:955:5: ( ^( REQUIRES me= math_expression ) -> template(ln=adj[0]in=adj[1]clause=$REQUIRESme=$me.text) \"<ln><in>/*@ <clause><am> <me> */\")
            // RSimpleTrans.g:955:9: ^( REQUIRES me= math_expression )
            {
            REQUIRES21=(CommonTree)match(input,REQUIRES,FOLLOW_REQUIRES_in_requires_clause6476); if (state.failed) return retval;

            if ( state.backtracking==0 ) {
              adj = adjustLine(REQUIRES21);
            }

            match(input, Token.DOWN, null); if (state.failed) return retval;
            pushFollow(FOLLOW_math_expression_in_requires_clause6482);
            me=math_expression();

            state._fsp--;
            if (state.failed) return retval;

            match(input, Token.UP, null); if (state.failed) return retval;


            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 956:9: -> template(ln=adj[0]in=adj[1]clause=$REQUIRESme=$me.text) \"<ln><in>/*@ <clause><am> <me> */\"
              {
                  retval.st = new StringTemplate(templateLib, "<ln><in>/*@ <clause><am> <me> */",
                new STAttrMap().put("ln", adj[0]).put("in", adj[1]).put("clause", REQUIRES21).put("me", (me!=null?(input.getTokenStream().toString(
                input.getTreeAdaptor().getTokenStartIndex(me.start),
                input.getTreeAdaptor().getTokenStopIndex(me.start))):null)));
              }

            }
            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "requires_clause"

    public static class ensures_clause_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "ensures_clause"
    // RSimpleTrans.g:959:1: ensures_clause : ^( ENSURES me= math_expression ) -> template(ln=adj[0]in=adj[1]clause=$ENSURES.textme=$me.text) \"<ln><in>/*@ <clause><am> <me> */\";
    public final RSimpleTrans.ensures_clause_return ensures_clause() throws RecognitionException {
        RSimpleTrans.ensures_clause_return retval = new RSimpleTrans.ensures_clause_return();
        retval.start = input.LT(1);

        CommonTree ENSURES22=null;
        RSimpleTrans.math_expression_return me = null;



        String[] adj = {"",""};

        try {
            // RSimpleTrans.g:963:5: ( ^( ENSURES me= math_expression ) -> template(ln=adj[0]in=adj[1]clause=$ENSURES.textme=$me.text) \"<ln><in>/*@ <clause><am> <me> */\")
            // RSimpleTrans.g:963:9: ^( ENSURES me= math_expression )
            {
            ENSURES22=(CommonTree)match(input,ENSURES,FOLLOW_ENSURES_in_ensures_clause6540); if (state.failed) return retval;

            if ( state.backtracking==0 ) {
              adj = adjustLine(ENSURES22);
            }

            match(input, Token.DOWN, null); if (state.failed) return retval;
            pushFollow(FOLLOW_math_expression_in_ensures_clause6546);
            me=math_expression();

            state._fsp--;
            if (state.failed) return retval;

            match(input, Token.UP, null); if (state.failed) return retval;


            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 964:9: -> template(ln=adj[0]in=adj[1]clause=$ENSURES.textme=$me.text) \"<ln><in>/*@ <clause><am> <me> */\"
              {
                  retval.st = new StringTemplate(templateLib, "<ln><in>/*@ <clause><am> <me> */",
                new STAttrMap().put("ln", adj[0]).put("in", adj[1]).put("clause", (ENSURES22!=null?ENSURES22.getText():null)).put("me", (me!=null?(input.getTokenStream().toString(
                input.getTreeAdaptor().getTokenStartIndex(me.start),
                input.getTreeAdaptor().getTokenStopIndex(me.start))):null)));
              }

            }
            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "ensures_clause"

    public static class duration_clause_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "duration_clause"
    // RSimpleTrans.g:967:1: duration_clause : ^( DURATION math_expression ) ;
    public final RSimpleTrans.duration_clause_return duration_clause() throws RecognitionException {
        RSimpleTrans.duration_clause_return retval = new RSimpleTrans.duration_clause_return();
        retval.start = input.LT(1);

        try {
            // RSimpleTrans.g:968:5: ( ^( DURATION math_expression ) )
            // RSimpleTrans.g:968:9: ^( DURATION math_expression )
            {
            match(input,DURATION,FOLLOW_DURATION_in_duration_clause6600); if (state.failed) return retval;

            match(input, Token.DOWN, null); if (state.failed) return retval;
            pushFollow(FOLLOW_math_expression_in_duration_clause6602);
            math_expression();

            state._fsp--;
            if (state.failed) return retval;

            match(input, Token.UP, null); if (state.failed) return retval;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "duration_clause"

    public static class mainp_disp_clause_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "mainp_disp_clause"
    // RSimpleTrans.g:971:1: mainp_disp_clause : ^( MAINP_DISP math_expression ) ;
    public final RSimpleTrans.mainp_disp_clause_return mainp_disp_clause() throws RecognitionException {
        RSimpleTrans.mainp_disp_clause_return retval = new RSimpleTrans.mainp_disp_clause_return();
        retval.start = input.LT(1);

        try {
            // RSimpleTrans.g:972:5: ( ^( MAINP_DISP math_expression ) )
            // RSimpleTrans.g:972:9: ^( MAINP_DISP math_expression )
            {
            match(input,MAINP_DISP,FOLLOW_MAINP_DISP_in_mainp_disp_clause6623); if (state.failed) return retval;

            match(input, Token.DOWN, null); if (state.failed) return retval;
            pushFollow(FOLLOW_math_expression_in_mainp_disp_clause6625);
            math_expression();

            state._fsp--;
            if (state.failed) return retval;

            match(input, Token.UP, null); if (state.failed) return retval;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "mainp_disp_clause"

    public static class type_declaration_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "type_declaration"
    // RSimpleTrans.g:979:1: type_declaration : ^( TYPE_FAMILY ident structural_math_type_expression ident ( constraint_clause )? ( type_concept_init_declaration )? ( type_concept_final_declaration )? ) ;
    public final RSimpleTrans.type_declaration_return type_declaration() throws RecognitionException {
        RSimpleTrans.type_declaration_return retval = new RSimpleTrans.type_declaration_return();
        retval.start = input.LT(1);

        try {
            // RSimpleTrans.g:980:5: ( ^( TYPE_FAMILY ident structural_math_type_expression ident ( constraint_clause )? ( type_concept_init_declaration )? ( type_concept_final_declaration )? ) )
            // RSimpleTrans.g:980:9: ^( TYPE_FAMILY ident structural_math_type_expression ident ( constraint_clause )? ( type_concept_init_declaration )? ( type_concept_final_declaration )? )
            {
            match(input,TYPE_FAMILY,FOLLOW_TYPE_FAMILY_in_type_declaration6652); if (state.failed) return retval;

            match(input, Token.DOWN, null); if (state.failed) return retval;
            pushFollow(FOLLOW_ident_in_type_declaration6654);
            ident();

            state._fsp--;
            if (state.failed) return retval;
            pushFollow(FOLLOW_structural_math_type_expression_in_type_declaration6668);
            structural_math_type_expression();

            state._fsp--;
            if (state.failed) return retval;
            pushFollow(FOLLOW_ident_in_type_declaration6682);
            ident();

            state._fsp--;
            if (state.failed) return retval;
            // RSimpleTrans.g:983:13: ( constraint_clause )?
            int alt130=2;
            int LA130_0 = input.LA(1);

            if ( (LA130_0==CONSTRAINT) ) {
                alt130=1;
            }
            switch (alt130) {
                case 1 :
                    // RSimpleTrans.g:983:14: constraint_clause
                    {
                    pushFollow(FOLLOW_constraint_clause_in_type_declaration6697);
                    constraint_clause();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }

            // RSimpleTrans.g:984:13: ( type_concept_init_declaration )?
            int alt131=2;
            int LA131_0 = input.LA(1);

            if ( (LA131_0==INITIALIZATION) ) {
                alt131=1;
            }
            switch (alt131) {
                case 1 :
                    // RSimpleTrans.g:984:14: type_concept_init_declaration
                    {
                    pushFollow(FOLLOW_type_concept_init_declaration_in_type_declaration6714);
                    type_concept_init_declaration();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }

            // RSimpleTrans.g:985:13: ( type_concept_final_declaration )?
            int alt132=2;
            int LA132_0 = input.LA(1);

            if ( (LA132_0==FINALIZATION) ) {
                alt132=1;
            }
            switch (alt132) {
                case 1 :
                    // RSimpleTrans.g:985:14: type_concept_final_declaration
                    {
                    pushFollow(FOLLOW_type_concept_final_declaration_in_type_declaration6731);
                    type_concept_final_declaration();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            match(input, Token.UP, null); if (state.failed) return retval;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "type_declaration"

    public static class performance_type_declaration_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "performance_type_declaration"
    // RSimpleTrans.g:989:1: performance_type_declaration : ^( TYPE_FAMILY ident math_type_expression ( constraint_clause )? ( performance_type_init_declaration )? ( performance_type_final_declaration )? ) ;
    public final RSimpleTrans.performance_type_declaration_return performance_type_declaration() throws RecognitionException {
        RSimpleTrans.performance_type_declaration_return retval = new RSimpleTrans.performance_type_declaration_return();
        retval.start = input.LT(1);

        try {
            // RSimpleTrans.g:990:3: ( ^( TYPE_FAMILY ident math_type_expression ( constraint_clause )? ( performance_type_init_declaration )? ( performance_type_final_declaration )? ) )
            // RSimpleTrans.g:990:7: ^( TYPE_FAMILY ident math_type_expression ( constraint_clause )? ( performance_type_init_declaration )? ( performance_type_final_declaration )? )
            {
            match(input,TYPE_FAMILY,FOLLOW_TYPE_FAMILY_in_performance_type_declaration6765); if (state.failed) return retval;

            match(input, Token.DOWN, null); if (state.failed) return retval;
            pushFollow(FOLLOW_ident_in_performance_type_declaration6767);
            ident();

            state._fsp--;
            if (state.failed) return retval;
            pushFollow(FOLLOW_math_type_expression_in_performance_type_declaration6769);
            math_type_expression();

            state._fsp--;
            if (state.failed) return retval;
            // RSimpleTrans.g:991:11: ( constraint_clause )?
            int alt133=2;
            int LA133_0 = input.LA(1);

            if ( (LA133_0==CONSTRAINT) ) {
                alt133=1;
            }
            switch (alt133) {
                case 1 :
                    // RSimpleTrans.g:991:11: constraint_clause
                    {
                    pushFollow(FOLLOW_constraint_clause_in_performance_type_declaration6781);
                    constraint_clause();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }

            // RSimpleTrans.g:992:11: ( performance_type_init_declaration )?
            int alt134=2;
            int LA134_0 = input.LA(1);

            if ( (LA134_0==INITIALIZATION) ) {
                alt134=1;
            }
            switch (alt134) {
                case 1 :
                    // RSimpleTrans.g:992:11: performance_type_init_declaration
                    {
                    pushFollow(FOLLOW_performance_type_init_declaration_in_performance_type_declaration6794);
                    performance_type_init_declaration();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }

            // RSimpleTrans.g:993:11: ( performance_type_final_declaration )?
            int alt135=2;
            int LA135_0 = input.LA(1);

            if ( (LA135_0==FINALIZATION) ) {
                alt135=1;
            }
            switch (alt135) {
                case 1 :
                    // RSimpleTrans.g:993:11: performance_type_final_declaration
                    {
                    pushFollow(FOLLOW_performance_type_final_declaration_in_performance_type_declaration6807);
                    performance_type_final_declaration();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            match(input, Token.UP, null); if (state.failed) return retval;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "performance_type_declaration"

    public static class type_representation_declaration_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "type_representation_declaration"
    // RSimpleTrans.g:996:1: type_representation_declaration : ^( TYPE ident structural_program_type_expression ( convention_clause )? ( correspondence_clause )? ( type_body_init_declaration )? ( type_body_final_declaration )? ) ;
    public final RSimpleTrans.type_representation_declaration_return type_representation_declaration() throws RecognitionException {
        RSimpleTrans.type_representation_declaration_return retval = new RSimpleTrans.type_representation_declaration_return();
        retval.start = input.LT(1);

        try {
            // RSimpleTrans.g:997:5: ( ^( TYPE ident structural_program_type_expression ( convention_clause )? ( correspondence_clause )? ( type_body_init_declaration )? ( type_body_final_declaration )? ) )
            // RSimpleTrans.g:997:9: ^( TYPE ident structural_program_type_expression ( convention_clause )? ( correspondence_clause )? ( type_body_init_declaration )? ( type_body_final_declaration )? )
            {
            match(input,TYPE,FOLLOW_TYPE_in_type_representation_declaration6827); if (state.failed) return retval;

            match(input, Token.DOWN, null); if (state.failed) return retval;
            pushFollow(FOLLOW_ident_in_type_representation_declaration6829);
            ident();

            state._fsp--;
            if (state.failed) return retval;
            pushFollow(FOLLOW_structural_program_type_expression_in_type_representation_declaration6839);
            structural_program_type_expression();

            state._fsp--;
            if (state.failed) return retval;
            // RSimpleTrans.g:999:9: ( convention_clause )?
            int alt136=2;
            int LA136_0 = input.LA(1);

            if ( (LA136_0==CONVENTION) ) {
                alt136=1;
            }
            switch (alt136) {
                case 1 :
                    // RSimpleTrans.g:999:10: convention_clause
                    {
                    pushFollow(FOLLOW_convention_clause_in_type_representation_declaration6851);
                    convention_clause();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }

            // RSimpleTrans.g:1000:9: ( correspondence_clause )?
            int alt137=2;
            int LA137_0 = input.LA(1);

            if ( (LA137_0==CORR) ) {
                alt137=1;
            }
            switch (alt137) {
                case 1 :
                    // RSimpleTrans.g:1000:10: correspondence_clause
                    {
                    pushFollow(FOLLOW_correspondence_clause_in_type_representation_declaration6864);
                    correspondence_clause();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }

            // RSimpleTrans.g:1001:9: ( type_body_init_declaration )?
            int alt138=2;
            int LA138_0 = input.LA(1);

            if ( (LA138_0==INITIALIZATION) ) {
                alt138=1;
            }
            switch (alt138) {
                case 1 :
                    // RSimpleTrans.g:1001:10: type_body_init_declaration
                    {
                    pushFollow(FOLLOW_type_body_init_declaration_in_type_representation_declaration6877);
                    type_body_init_declaration();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }

            // RSimpleTrans.g:1002:9: ( type_body_final_declaration )?
            int alt139=2;
            int LA139_0 = input.LA(1);

            if ( (LA139_0==FINALIZATION) ) {
                alt139=1;
            }
            switch (alt139) {
                case 1 :
                    // RSimpleTrans.g:1002:10: type_body_final_declaration
                    {
                    pushFollow(FOLLOW_type_body_final_declaration_in_type_representation_declaration6890);
                    type_body_final_declaration();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            match(input, Token.UP, null); if (state.failed) return retval;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "type_representation_declaration"

    public static class facility_type_declaration_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "facility_type_declaration"
    // RSimpleTrans.g:1005:1: facility_type_declaration : ^( TYPE id+= ident spte+= structural_program_type_expression (cc= convention_clause )? (tfid= type_facility_init_declaration )? (tffd= type_facility_final_declaration )? ) -> template(ln=adj[0]in=adj[1]id=$idspte=$sptecc=$cc.texttfid=$tfid.texttffd=$tffd.text) \"<ln><in>private class <id> { <spte> <cc> <tfid> <tffd> }\";
    public final RSimpleTrans.facility_type_declaration_return facility_type_declaration() throws RecognitionException {
        RSimpleTrans.facility_type_declaration_return retval = new RSimpleTrans.facility_type_declaration_return();
        retval.start = input.LT(1);

        CommonTree TYPE23=null;
        List list_id=null;
        List list_spte=null;
        RSimpleTrans.convention_clause_return cc = null;

        RSimpleTrans.type_facility_init_declaration_return tfid = null;

        RSimpleTrans.type_facility_final_declaration_return tffd = null;

        RuleReturnScope id = null;
        RuleReturnScope spte = null;

        String[] adj = {"",""};

        try {
            // RSimpleTrans.g:1009:5: ( ^( TYPE id+= ident spte+= structural_program_type_expression (cc= convention_clause )? (tfid= type_facility_init_declaration )? (tffd= type_facility_final_declaration )? ) -> template(ln=adj[0]in=adj[1]id=$idspte=$sptecc=$cc.texttfid=$tfid.texttffd=$tffd.text) \"<ln><in>private class <id> { <spte> <cc> <tfid> <tffd> }\")
            // RSimpleTrans.g:1009:9: ^( TYPE id+= ident spte+= structural_program_type_expression (cc= convention_clause )? (tfid= type_facility_init_declaration )? (tffd= type_facility_final_declaration )? )
            {
            TYPE23=(CommonTree)match(input,TYPE,FOLLOW_TYPE_in_facility_type_declaration6917); if (state.failed) return retval;

            if ( state.backtracking==0 ) {
              adj = adjustLine(TYPE23);
            }

            match(input, Token.DOWN, null); if (state.failed) return retval;
            pushFollow(FOLLOW_ident_in_facility_type_declaration6923);
            id=ident();

            state._fsp--;
            if (state.failed) return retval;
            if (list_id==null) list_id=new ArrayList();
            list_id.add(id.getTemplate());

            pushFollow(FOLLOW_structural_program_type_expression_in_facility_type_declaration6935);
            spte=structural_program_type_expression();

            state._fsp--;
            if (state.failed) return retval;
            if (list_spte==null) list_spte=new ArrayList();
            list_spte.add(spte.getTemplate());

            // RSimpleTrans.g:1011:9: (cc= convention_clause )?
            int alt140=2;
            int LA140_0 = input.LA(1);

            if ( (LA140_0==CONVENTION) ) {
                alt140=1;
            }
            switch (alt140) {
                case 1 :
                    // RSimpleTrans.g:1011:10: cc= convention_clause
                    {
                    pushFollow(FOLLOW_convention_clause_in_facility_type_declaration6949);
                    cc=convention_clause();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }

            // RSimpleTrans.g:1012:9: (tfid= type_facility_init_declaration )?
            int alt141=2;
            int LA141_0 = input.LA(1);

            if ( (LA141_0==INITIALIZATION) ) {
                alt141=1;
            }
            switch (alt141) {
                case 1 :
                    // RSimpleTrans.g:1012:10: tfid= type_facility_init_declaration
                    {
                    pushFollow(FOLLOW_type_facility_init_declaration_in_facility_type_declaration6964);
                    tfid=type_facility_init_declaration();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }

            // RSimpleTrans.g:1013:9: (tffd= type_facility_final_declaration )?
            int alt142=2;
            int LA142_0 = input.LA(1);

            if ( (LA142_0==FINALIZATION) ) {
                alt142=1;
            }
            switch (alt142) {
                case 1 :
                    // RSimpleTrans.g:1013:10: tffd= type_facility_final_declaration
                    {
                    pushFollow(FOLLOW_type_facility_final_declaration_in_facility_type_declaration6980);
                    tffd=type_facility_final_declaration();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            match(input, Token.UP, null); if (state.failed) return retval;


            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 1015:9: -> template(ln=adj[0]in=adj[1]id=$idspte=$sptecc=$cc.texttfid=$tfid.texttffd=$tffd.text) \"<ln><in>private class <id> { <spte> <cc> <tfid> <tffd> }\"
              {
                  retval.st = new StringTemplate(templateLib, "<ln><in>private class <id> { <spte> <cc> <tfid> <tffd> }",
                new STAttrMap().put("ln", adj[0]).put("in", adj[1]).put("id", list_id).put("spte", list_spte).put("cc", (cc!=null?(input.getTokenStream().toString(
                input.getTreeAdaptor().getTokenStartIndex(cc.start),
                input.getTreeAdaptor().getTokenStopIndex(cc.start))):null)).put("tfid", (tfid!=null?(input.getTokenStream().toString(
                input.getTreeAdaptor().getTokenStartIndex(tfid.start),
                input.getTreeAdaptor().getTokenStopIndex(tfid.start))):null)).put("tffd", (tffd!=null?(input.getTokenStream().toString(
                input.getTreeAdaptor().getTokenStartIndex(tffd.start),
                input.getTreeAdaptor().getTokenStopIndex(tffd.start))):null)));
              }

            }
            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "facility_type_declaration"

    public static class module_concept_init_declaration_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "module_concept_init_declaration"
    // RSimpleTrans.g:1030:1: module_concept_init_declaration : ^( FAC_INIT concept_init_final_section ) ;
    public final RSimpleTrans.module_concept_init_declaration_return module_concept_init_declaration() throws RecognitionException {
        RSimpleTrans.module_concept_init_declaration_return retval = new RSimpleTrans.module_concept_init_declaration_return();
        retval.start = input.LT(1);

        try {
            // RSimpleTrans.g:1031:5: ( ^( FAC_INIT concept_init_final_section ) )
            // RSimpleTrans.g:1031:9: ^( FAC_INIT concept_init_final_section )
            {
            match(input,FAC_INIT,FOLLOW_FAC_INIT_in_module_concept_init_declaration7166); if (state.failed) return retval;

            if ( input.LA(1)==Token.DOWN ) {
                match(input, Token.DOWN, null); if (state.failed) return retval;
                pushFollow(FOLLOW_concept_init_final_section_in_module_concept_init_declaration7168);
                concept_init_final_section();

                state._fsp--;
                if (state.failed) return retval;

                match(input, Token.UP, null); if (state.failed) return retval;
            }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "module_concept_init_declaration"

    public static class module_concept_final_declaration_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "module_concept_final_declaration"
    // RSimpleTrans.g:1035:1: module_concept_final_declaration : ^( FAC_FINAL concept_init_final_section ) ;
    public final RSimpleTrans.module_concept_final_declaration_return module_concept_final_declaration() throws RecognitionException {
        RSimpleTrans.module_concept_final_declaration_return retval = new RSimpleTrans.module_concept_final_declaration_return();
        retval.start = input.LT(1);

        try {
            // RSimpleTrans.g:1036:5: ( ^( FAC_FINAL concept_init_final_section ) )
            // RSimpleTrans.g:1036:9: ^( FAC_FINAL concept_init_final_section )
            {
            match(input,FAC_FINAL,FOLLOW_FAC_FINAL_in_module_concept_final_declaration7198); if (state.failed) return retval;

            if ( input.LA(1)==Token.DOWN ) {
                match(input, Token.DOWN, null); if (state.failed) return retval;
                pushFollow(FOLLOW_concept_init_final_section_in_module_concept_final_declaration7200);
                concept_init_final_section();

                state._fsp--;
                if (state.failed) return retval;

                match(input, Token.UP, null); if (state.failed) return retval;
            }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "module_concept_final_declaration"

    public static class performance_module_init_declaration_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "performance_module_init_declaration"
    // RSimpleTrans.g:1040:1: performance_module_init_declaration : ^( PERF_INIT performance_init_section ) ;
    public final RSimpleTrans.performance_module_init_declaration_return performance_module_init_declaration() throws RecognitionException {
        RSimpleTrans.performance_module_init_declaration_return retval = new RSimpleTrans.performance_module_init_declaration_return();
        retval.start = input.LT(1);

        try {
            // RSimpleTrans.g:1041:5: ( ^( PERF_INIT performance_init_section ) )
            // RSimpleTrans.g:1041:9: ^( PERF_INIT performance_init_section )
            {
            match(input,PERF_INIT,FOLLOW_PERF_INIT_in_performance_module_init_declaration7230); if (state.failed) return retval;

            if ( input.LA(1)==Token.DOWN ) {
                match(input, Token.DOWN, null); if (state.failed) return retval;
                pushFollow(FOLLOW_performance_init_section_in_performance_module_init_declaration7232);
                performance_init_section();

                state._fsp--;
                if (state.failed) return retval;

                match(input, Token.UP, null); if (state.failed) return retval;
            }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "performance_module_init_declaration"

    public static class performance_module_final_declaration_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "performance_module_final_declaration"
    // RSimpleTrans.g:1044:1: performance_module_final_declaration : ^( PERF_FINAL performance_final_section ) ;
    public final RSimpleTrans.performance_module_final_declaration_return performance_module_final_declaration() throws RecognitionException {
        RSimpleTrans.performance_module_final_declaration_return retval = new RSimpleTrans.performance_module_final_declaration_return();
        retval.start = input.LT(1);

        try {
            // RSimpleTrans.g:1045:5: ( ^( PERF_FINAL performance_final_section ) )
            // RSimpleTrans.g:1045:9: ^( PERF_FINAL performance_final_section )
            {
            match(input,PERF_FINAL,FOLLOW_PERF_FINAL_in_performance_module_final_declaration7253); if (state.failed) return retval;

            if ( input.LA(1)==Token.DOWN ) {
                match(input, Token.DOWN, null); if (state.failed) return retval;
                pushFollow(FOLLOW_performance_final_section_in_performance_module_final_declaration7255);
                performance_final_section();

                state._fsp--;
                if (state.failed) return retval;

                match(input, Token.UP, null); if (state.failed) return retval;
            }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "performance_module_final_declaration"

    public static class module_body_init_declaration_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "module_body_init_declaration"
    // RSimpleTrans.g:1048:1: module_body_init_declaration : ^( FAC_INIT body_init_final_section ) ;
    public final RSimpleTrans.module_body_init_declaration_return module_body_init_declaration() throws RecognitionException {
        RSimpleTrans.module_body_init_declaration_return retval = new RSimpleTrans.module_body_init_declaration_return();
        retval.start = input.LT(1);

        try {
            // RSimpleTrans.g:1049:5: ( ^( FAC_INIT body_init_final_section ) )
            // RSimpleTrans.g:1049:9: ^( FAC_INIT body_init_final_section )
            {
            match(input,FAC_INIT,FOLLOW_FAC_INIT_in_module_body_init_declaration7276); if (state.failed) return retval;

            match(input, Token.DOWN, null); if (state.failed) return retval;
            pushFollow(FOLLOW_body_init_final_section_in_module_body_init_declaration7278);
            body_init_final_section();

            state._fsp--;
            if (state.failed) return retval;

            match(input, Token.UP, null); if (state.failed) return retval;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "module_body_init_declaration"

    public static class module_body_final_declaration_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "module_body_final_declaration"
    // RSimpleTrans.g:1053:1: module_body_final_declaration : ^( FAC_FINAL body_init_final_section ) ;
    public final RSimpleTrans.module_body_final_declaration_return module_body_final_declaration() throws RecognitionException {
        RSimpleTrans.module_body_final_declaration_return retval = new RSimpleTrans.module_body_final_declaration_return();
        retval.start = input.LT(1);

        try {
            // RSimpleTrans.g:1054:5: ( ^( FAC_FINAL body_init_final_section ) )
            // RSimpleTrans.g:1054:9: ^( FAC_FINAL body_init_final_section )
            {
            match(input,FAC_FINAL,FOLLOW_FAC_FINAL_in_module_body_final_declaration7308); if (state.failed) return retval;

            match(input, Token.DOWN, null); if (state.failed) return retval;
            pushFollow(FOLLOW_body_init_final_section_in_module_body_final_declaration7310);
            body_init_final_section();

            state._fsp--;
            if (state.failed) return retval;

            match(input, Token.UP, null); if (state.failed) return retval;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "module_body_final_declaration"

    public static class module_facility_init_declaration_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "module_facility_init_declaration"
    // RSimpleTrans.g:1058:1: module_facility_init_declaration : ^( FAC_INIT facility_init_final_section ) ;
    public final RSimpleTrans.module_facility_init_declaration_return module_facility_init_declaration() throws RecognitionException {
        RSimpleTrans.module_facility_init_declaration_return retval = new RSimpleTrans.module_facility_init_declaration_return();
        retval.start = input.LT(1);

        try {
            // RSimpleTrans.g:1059:5: ( ^( FAC_INIT facility_init_final_section ) )
            // RSimpleTrans.g:1059:9: ^( FAC_INIT facility_init_final_section )
            {
            match(input,FAC_INIT,FOLLOW_FAC_INIT_in_module_facility_init_declaration7340); if (state.failed) return retval;

            match(input, Token.DOWN, null); if (state.failed) return retval;
            pushFollow(FOLLOW_facility_init_final_section_in_module_facility_init_declaration7342);
            facility_init_final_section();

            state._fsp--;
            if (state.failed) return retval;

            match(input, Token.UP, null); if (state.failed) return retval;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "module_facility_init_declaration"

    public static class module_facility_final_declaration_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "module_facility_final_declaration"
    // RSimpleTrans.g:1063:1: module_facility_final_declaration : ^( FAC_FINAL facility_init_final_section ) ;
    public final RSimpleTrans.module_facility_final_declaration_return module_facility_final_declaration() throws RecognitionException {
        RSimpleTrans.module_facility_final_declaration_return retval = new RSimpleTrans.module_facility_final_declaration_return();
        retval.start = input.LT(1);

        try {
            // RSimpleTrans.g:1064:5: ( ^( FAC_FINAL facility_init_final_section ) )
            // RSimpleTrans.g:1064:9: ^( FAC_FINAL facility_init_final_section )
            {
            match(input,FAC_FINAL,FOLLOW_FAC_FINAL_in_module_facility_final_declaration7372); if (state.failed) return retval;

            match(input, Token.DOWN, null); if (state.failed) return retval;
            pushFollow(FOLLOW_facility_init_final_section_in_module_facility_final_declaration7374);
            facility_init_final_section();

            state._fsp--;
            if (state.failed) return retval;

            match(input, Token.UP, null); if (state.failed) return retval;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "module_facility_final_declaration"

    public static class type_concept_init_declaration_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "type_concept_init_declaration"
    // RSimpleTrans.g:1070:1: type_concept_init_declaration : ^( INITIALIZATION concept_init_final_section ) ;
    public final RSimpleTrans.type_concept_init_declaration_return type_concept_init_declaration() throws RecognitionException {
        RSimpleTrans.type_concept_init_declaration_return retval = new RSimpleTrans.type_concept_init_declaration_return();
        retval.start = input.LT(1);

        try {
            // RSimpleTrans.g:1071:5: ( ^( INITIALIZATION concept_init_final_section ) )
            // RSimpleTrans.g:1071:9: ^( INITIALIZATION concept_init_final_section )
            {
            match(input,INITIALIZATION,FOLLOW_INITIALIZATION_in_type_concept_init_declaration7406); if (state.failed) return retval;

            if ( input.LA(1)==Token.DOWN ) {
                match(input, Token.DOWN, null); if (state.failed) return retval;
                pushFollow(FOLLOW_concept_init_final_section_in_type_concept_init_declaration7408);
                concept_init_final_section();

                state._fsp--;
                if (state.failed) return retval;

                match(input, Token.UP, null); if (state.failed) return retval;
            }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "type_concept_init_declaration"

    public static class type_concept_final_declaration_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "type_concept_final_declaration"
    // RSimpleTrans.g:1074:1: type_concept_final_declaration : ^( FINALIZATION concept_init_final_section ) ;
    public final RSimpleTrans.type_concept_final_declaration_return type_concept_final_declaration() throws RecognitionException {
        RSimpleTrans.type_concept_final_declaration_return retval = new RSimpleTrans.type_concept_final_declaration_return();
        retval.start = input.LT(1);

        try {
            // RSimpleTrans.g:1075:5: ( ^( FINALIZATION concept_init_final_section ) )
            // RSimpleTrans.g:1075:9: ^( FINALIZATION concept_init_final_section )
            {
            match(input,FINALIZATION,FOLLOW_FINALIZATION_in_type_concept_final_declaration7429); if (state.failed) return retval;

            if ( input.LA(1)==Token.DOWN ) {
                match(input, Token.DOWN, null); if (state.failed) return retval;
                pushFollow(FOLLOW_concept_init_final_section_in_type_concept_final_declaration7431);
                concept_init_final_section();

                state._fsp--;
                if (state.failed) return retval;

                match(input, Token.UP, null); if (state.failed) return retval;
            }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "type_concept_final_declaration"

    public static class performance_type_init_declaration_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "performance_type_init_declaration"
    // RSimpleTrans.g:1078:1: performance_type_init_declaration : ^( INITIALIZATION performance_init_section ) ;
    public final RSimpleTrans.performance_type_init_declaration_return performance_type_init_declaration() throws RecognitionException {
        RSimpleTrans.performance_type_init_declaration_return retval = new RSimpleTrans.performance_type_init_declaration_return();
        retval.start = input.LT(1);

        try {
            // RSimpleTrans.g:1079:5: ( ^( INITIALIZATION performance_init_section ) )
            // RSimpleTrans.g:1079:9: ^( INITIALIZATION performance_init_section )
            {
            match(input,INITIALIZATION,FOLLOW_INITIALIZATION_in_performance_type_init_declaration7452); if (state.failed) return retval;

            if ( input.LA(1)==Token.DOWN ) {
                match(input, Token.DOWN, null); if (state.failed) return retval;
                pushFollow(FOLLOW_performance_init_section_in_performance_type_init_declaration7454);
                performance_init_section();

                state._fsp--;
                if (state.failed) return retval;

                match(input, Token.UP, null); if (state.failed) return retval;
            }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "performance_type_init_declaration"

    public static class performance_type_final_declaration_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "performance_type_final_declaration"
    // RSimpleTrans.g:1082:1: performance_type_final_declaration : ^( FINALIZATION performance_final_section ) ;
    public final RSimpleTrans.performance_type_final_declaration_return performance_type_final_declaration() throws RecognitionException {
        RSimpleTrans.performance_type_final_declaration_return retval = new RSimpleTrans.performance_type_final_declaration_return();
        retval.start = input.LT(1);

        try {
            // RSimpleTrans.g:1083:5: ( ^( FINALIZATION performance_final_section ) )
            // RSimpleTrans.g:1083:9: ^( FINALIZATION performance_final_section )
            {
            match(input,FINALIZATION,FOLLOW_FINALIZATION_in_performance_type_final_declaration7475); if (state.failed) return retval;

            if ( input.LA(1)==Token.DOWN ) {
                match(input, Token.DOWN, null); if (state.failed) return retval;
                pushFollow(FOLLOW_performance_final_section_in_performance_type_final_declaration7477);
                performance_final_section();

                state._fsp--;
                if (state.failed) return retval;

                match(input, Token.UP, null); if (state.failed) return retval;
            }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "performance_type_final_declaration"

    public static class type_body_init_declaration_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "type_body_init_declaration"
    // RSimpleTrans.g:1086:1: type_body_init_declaration : ^( INITIALIZATION body_init_final_section ) ;
    public final RSimpleTrans.type_body_init_declaration_return type_body_init_declaration() throws RecognitionException {
        RSimpleTrans.type_body_init_declaration_return retval = new RSimpleTrans.type_body_init_declaration_return();
        retval.start = input.LT(1);

        try {
            // RSimpleTrans.g:1087:5: ( ^( INITIALIZATION body_init_final_section ) )
            // RSimpleTrans.g:1087:9: ^( INITIALIZATION body_init_final_section )
            {
            match(input,INITIALIZATION,FOLLOW_INITIALIZATION_in_type_body_init_declaration7498); if (state.failed) return retval;

            match(input, Token.DOWN, null); if (state.failed) return retval;
            pushFollow(FOLLOW_body_init_final_section_in_type_body_init_declaration7500);
            body_init_final_section();

            state._fsp--;
            if (state.failed) return retval;

            match(input, Token.UP, null); if (state.failed) return retval;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "type_body_init_declaration"

    public static class type_body_final_declaration_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "type_body_final_declaration"
    // RSimpleTrans.g:1090:1: type_body_final_declaration : ^( FINALIZATION body_init_final_section ) ;
    public final RSimpleTrans.type_body_final_declaration_return type_body_final_declaration() throws RecognitionException {
        RSimpleTrans.type_body_final_declaration_return retval = new RSimpleTrans.type_body_final_declaration_return();
        retval.start = input.LT(1);

        try {
            // RSimpleTrans.g:1091:5: ( ^( FINALIZATION body_init_final_section ) )
            // RSimpleTrans.g:1091:9: ^( FINALIZATION body_init_final_section )
            {
            match(input,FINALIZATION,FOLLOW_FINALIZATION_in_type_body_final_declaration7521); if (state.failed) return retval;

            match(input, Token.DOWN, null); if (state.failed) return retval;
            pushFollow(FOLLOW_body_init_final_section_in_type_body_final_declaration7523);
            body_init_final_section();

            state._fsp--;
            if (state.failed) return retval;

            match(input, Token.UP, null); if (state.failed) return retval;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "type_body_final_declaration"

    public static class type_facility_init_declaration_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "type_facility_init_declaration"
    // RSimpleTrans.g:1094:1: type_facility_init_declaration : ^( INITIALIZATION facility_init_final_section ) ;
    public final RSimpleTrans.type_facility_init_declaration_return type_facility_init_declaration() throws RecognitionException {
        RSimpleTrans.type_facility_init_declaration_return retval = new RSimpleTrans.type_facility_init_declaration_return();
        retval.start = input.LT(1);

        try {
            // RSimpleTrans.g:1095:5: ( ^( INITIALIZATION facility_init_final_section ) )
            // RSimpleTrans.g:1095:9: ^( INITIALIZATION facility_init_final_section )
            {
            match(input,INITIALIZATION,FOLLOW_INITIALIZATION_in_type_facility_init_declaration7544); if (state.failed) return retval;

            match(input, Token.DOWN, null); if (state.failed) return retval;
            pushFollow(FOLLOW_facility_init_final_section_in_type_facility_init_declaration7546);
            facility_init_final_section();

            state._fsp--;
            if (state.failed) return retval;

            match(input, Token.UP, null); if (state.failed) return retval;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "type_facility_init_declaration"

    public static class type_facility_final_declaration_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "type_facility_final_declaration"
    // RSimpleTrans.g:1098:1: type_facility_final_declaration : ^( FINALIZATION facility_init_final_section ) ;
    public final RSimpleTrans.type_facility_final_declaration_return type_facility_final_declaration() throws RecognitionException {
        RSimpleTrans.type_facility_final_declaration_return retval = new RSimpleTrans.type_facility_final_declaration_return();
        retval.start = input.LT(1);

        try {
            // RSimpleTrans.g:1099:5: ( ^( FINALIZATION facility_init_final_section ) )
            // RSimpleTrans.g:1099:9: ^( FINALIZATION facility_init_final_section )
            {
            match(input,FINALIZATION,FOLLOW_FINALIZATION_in_type_facility_final_declaration7567); if (state.failed) return retval;

            match(input, Token.DOWN, null); if (state.failed) return retval;
            pushFollow(FOLLOW_facility_init_final_section_in_type_facility_final_declaration7569);
            facility_init_final_section();

            state._fsp--;
            if (state.failed) return retval;

            match(input, Token.UP, null); if (state.failed) return retval;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "type_facility_final_declaration"

    public static class concept_init_final_section_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "concept_init_final_section"
    // RSimpleTrans.g:1104:1: concept_init_final_section : ( affects_clause )* ( requires_clause )? ( ensures_clause )? ;
    public final RSimpleTrans.concept_init_final_section_return concept_init_final_section() throws RecognitionException {
        RSimpleTrans.concept_init_final_section_return retval = new RSimpleTrans.concept_init_final_section_return();
        retval.start = input.LT(1);

        try {
            // RSimpleTrans.g:1105:5: ( ( affects_clause )* ( requires_clause )? ( ensures_clause )? )
            // RSimpleTrans.g:1105:9: ( affects_clause )* ( requires_clause )? ( ensures_clause )?
            {
            // RSimpleTrans.g:1105:9: ( affects_clause )*
            loop143:
            do {
                int alt143=2;
                int LA143_0 = input.LA(1);

                if ( (LA143_0==AFFECTS) ) {
                    alt143=1;
                }


                switch (alt143) {
            	case 1 :
            	    // RSimpleTrans.g:1105:10: affects_clause
            	    {
            	    pushFollow(FOLLOW_affects_clause_in_concept_init_final_section7592);
            	    affects_clause();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }
            	    break;

            	default :
            	    break loop143;
                }
            } while (true);

            // RSimpleTrans.g:1106:9: ( requires_clause )?
            int alt144=2;
            int LA144_0 = input.LA(1);

            if ( (LA144_0==REQUIRES) ) {
                alt144=1;
            }
            switch (alt144) {
                case 1 :
                    // RSimpleTrans.g:1106:10: requires_clause
                    {
                    pushFollow(FOLLOW_requires_clause_in_concept_init_final_section7605);
                    requires_clause();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }

            // RSimpleTrans.g:1107:9: ( ensures_clause )?
            int alt145=2;
            int LA145_0 = input.LA(1);

            if ( (LA145_0==ENSURES) ) {
                alt145=1;
            }
            switch (alt145) {
                case 1 :
                    // RSimpleTrans.g:1107:10: ensures_clause
                    {
                    pushFollow(FOLLOW_ensures_clause_in_concept_init_final_section7618);
                    ensures_clause();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "concept_init_final_section"

    public static class performance_init_section_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "performance_init_section"
    // RSimpleTrans.g:1110:1: performance_init_section : ( duration_clause )? ( mainp_disp_clause )? ;
    public final RSimpleTrans.performance_init_section_return performance_init_section() throws RecognitionException {
        RSimpleTrans.performance_init_section_return retval = new RSimpleTrans.performance_init_section_return();
        retval.start = input.LT(1);

        try {
            // RSimpleTrans.g:1111:5: ( ( duration_clause )? ( mainp_disp_clause )? )
            // RSimpleTrans.g:1111:9: ( duration_clause )? ( mainp_disp_clause )?
            {
            // RSimpleTrans.g:1111:9: ( duration_clause )?
            int alt146=2;
            int LA146_0 = input.LA(1);

            if ( (LA146_0==DURATION) ) {
                alt146=1;
            }
            switch (alt146) {
                case 1 :
                    // RSimpleTrans.g:1111:10: duration_clause
                    {
                    pushFollow(FOLLOW_duration_clause_in_performance_init_section7640);
                    duration_clause();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }

            // RSimpleTrans.g:1112:9: ( mainp_disp_clause )?
            int alt147=2;
            int LA147_0 = input.LA(1);

            if ( (LA147_0==MAINP_DISP) ) {
                alt147=1;
            }
            switch (alt147) {
                case 1 :
                    // RSimpleTrans.g:1112:10: mainp_disp_clause
                    {
                    pushFollow(FOLLOW_mainp_disp_clause_in_performance_init_section7653);
                    mainp_disp_clause();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "performance_init_section"

    public static class performance_final_section_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "performance_final_section"
    // RSimpleTrans.g:1115:1: performance_final_section : ( duration_clause )? ( mainp_disp_clause )? ;
    public final RSimpleTrans.performance_final_section_return performance_final_section() throws RecognitionException {
        RSimpleTrans.performance_final_section_return retval = new RSimpleTrans.performance_final_section_return();
        retval.start = input.LT(1);

        try {
            // RSimpleTrans.g:1116:5: ( ( duration_clause )? ( mainp_disp_clause )? )
            // RSimpleTrans.g:1116:9: ( duration_clause )? ( mainp_disp_clause )?
            {
            // RSimpleTrans.g:1116:9: ( duration_clause )?
            int alt148=2;
            int LA148_0 = input.LA(1);

            if ( (LA148_0==DURATION) ) {
                alt148=1;
            }
            switch (alt148) {
                case 1 :
                    // RSimpleTrans.g:1116:10: duration_clause
                    {
                    pushFollow(FOLLOW_duration_clause_in_performance_final_section7675);
                    duration_clause();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }

            // RSimpleTrans.g:1117:9: ( mainp_disp_clause )?
            int alt149=2;
            int LA149_0 = input.LA(1);

            if ( (LA149_0==MAINP_DISP) ) {
                alt149=1;
            }
            switch (alt149) {
                case 1 :
                    // RSimpleTrans.g:1117:10: mainp_disp_clause
                    {
                    pushFollow(FOLLOW_mainp_disp_clause_in_performance_final_section7688);
                    mainp_disp_clause();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "performance_final_section"

    public static class body_init_final_section_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "body_init_final_section"
    // RSimpleTrans.g:1120:1: body_init_final_section : ( affects_clause )* ( facility_declaration )* ( variable_declaration )* ( aux_variable_declaration )* statement_sequence ;
    public final RSimpleTrans.body_init_final_section_return body_init_final_section() throws RecognitionException {
        RSimpleTrans.body_init_final_section_return retval = new RSimpleTrans.body_init_final_section_return();
        retval.start = input.LT(1);

        try {
            // RSimpleTrans.g:1121:5: ( ( affects_clause )* ( facility_declaration )* ( variable_declaration )* ( aux_variable_declaration )* statement_sequence )
            // RSimpleTrans.g:1121:9: ( affects_clause )* ( facility_declaration )* ( variable_declaration )* ( aux_variable_declaration )* statement_sequence
            {
            // RSimpleTrans.g:1121:9: ( affects_clause )*
            loop150:
            do {
                int alt150=2;
                int LA150_0 = input.LA(1);

                if ( (LA150_0==AFFECTS) ) {
                    alt150=1;
                }


                switch (alt150) {
            	case 1 :
            	    // RSimpleTrans.g:1121:10: affects_clause
            	    {
            	    pushFollow(FOLLOW_affects_clause_in_body_init_final_section7710);
            	    affects_clause();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }
            	    break;

            	default :
            	    break loop150;
                }
            } while (true);

            // RSimpleTrans.g:1122:9: ( facility_declaration )*
            loop151:
            do {
                int alt151=2;
                int LA151_0 = input.LA(1);

                if ( (LA151_0==FACILITY) ) {
                    alt151=1;
                }


                switch (alt151) {
            	case 1 :
            	    // RSimpleTrans.g:1122:10: facility_declaration
            	    {
            	    pushFollow(FOLLOW_facility_declaration_in_body_init_final_section7723);
            	    facility_declaration();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }
            	    break;

            	default :
            	    break loop151;
                }
            } while (true);

            // RSimpleTrans.g:1123:9: ( variable_declaration )*
            loop152:
            do {
                int alt152=2;
                int LA152_0 = input.LA(1);

                if ( (LA152_0==VAR) ) {
                    alt152=1;
                }


                switch (alt152) {
            	case 1 :
            	    // RSimpleTrans.g:1123:10: variable_declaration
            	    {
            	    pushFollow(FOLLOW_variable_declaration_in_body_init_final_section7736);
            	    variable_declaration();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }
            	    break;

            	default :
            	    break loop152;
                }
            } while (true);

            // RSimpleTrans.g:1124:9: ( aux_variable_declaration )*
            loop153:
            do {
                int alt153=2;
                int LA153_0 = input.LA(1);

                if ( (LA153_0==AUX_VAR) ) {
                    alt153=1;
                }


                switch (alt153) {
            	case 1 :
            	    // RSimpleTrans.g:1124:10: aux_variable_declaration
            	    {
            	    pushFollow(FOLLOW_aux_variable_declaration_in_body_init_final_section7749);
            	    aux_variable_declaration();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }
            	    break;

            	default :
            	    break loop153;
                }
            } while (true);

            pushFollow(FOLLOW_statement_sequence_in_body_init_final_section7761);
            statement_sequence();

            state._fsp--;
            if (state.failed) return retval;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "body_init_final_section"

    public static class facility_init_final_section_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "facility_init_final_section"
    // RSimpleTrans.g:1128:1: facility_init_final_section : ( affects_clause )* ( requires_clause )? ( ensures_clause )? ( facility_declaration )* ( variable_declaration )* ( aux_variable_declaration )* statement_sequence ;
    public final RSimpleTrans.facility_init_final_section_return facility_init_final_section() throws RecognitionException {
        RSimpleTrans.facility_init_final_section_return retval = new RSimpleTrans.facility_init_final_section_return();
        retval.start = input.LT(1);

        try {
            // RSimpleTrans.g:1129:5: ( ( affects_clause )* ( requires_clause )? ( ensures_clause )? ( facility_declaration )* ( variable_declaration )* ( aux_variable_declaration )* statement_sequence )
            // RSimpleTrans.g:1129:9: ( affects_clause )* ( requires_clause )? ( ensures_clause )? ( facility_declaration )* ( variable_declaration )* ( aux_variable_declaration )* statement_sequence
            {
            // RSimpleTrans.g:1129:9: ( affects_clause )*
            loop154:
            do {
                int alt154=2;
                int LA154_0 = input.LA(1);

                if ( (LA154_0==AFFECTS) ) {
                    alt154=1;
                }


                switch (alt154) {
            	case 1 :
            	    // RSimpleTrans.g:1129:10: affects_clause
            	    {
            	    pushFollow(FOLLOW_affects_clause_in_facility_init_final_section7781);
            	    affects_clause();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }
            	    break;

            	default :
            	    break loop154;
                }
            } while (true);

            // RSimpleTrans.g:1130:9: ( requires_clause )?
            int alt155=2;
            int LA155_0 = input.LA(1);

            if ( (LA155_0==REQUIRES) ) {
                alt155=1;
            }
            switch (alt155) {
                case 1 :
                    // RSimpleTrans.g:1130:10: requires_clause
                    {
                    pushFollow(FOLLOW_requires_clause_in_facility_init_final_section7794);
                    requires_clause();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }

            // RSimpleTrans.g:1131:9: ( ensures_clause )?
            int alt156=2;
            int LA156_0 = input.LA(1);

            if ( (LA156_0==ENSURES) ) {
                alt156=1;
            }
            switch (alt156) {
                case 1 :
                    // RSimpleTrans.g:1131:10: ensures_clause
                    {
                    pushFollow(FOLLOW_ensures_clause_in_facility_init_final_section7807);
                    ensures_clause();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }

            // RSimpleTrans.g:1132:9: ( facility_declaration )*
            loop157:
            do {
                int alt157=2;
                int LA157_0 = input.LA(1);

                if ( (LA157_0==FACILITY) ) {
                    alt157=1;
                }


                switch (alt157) {
            	case 1 :
            	    // RSimpleTrans.g:1132:10: facility_declaration
            	    {
            	    pushFollow(FOLLOW_facility_declaration_in_facility_init_final_section7820);
            	    facility_declaration();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }
            	    break;

            	default :
            	    break loop157;
                }
            } while (true);

            // RSimpleTrans.g:1133:9: ( variable_declaration )*
            loop158:
            do {
                int alt158=2;
                int LA158_0 = input.LA(1);

                if ( (LA158_0==VAR) ) {
                    alt158=1;
                }


                switch (alt158) {
            	case 1 :
            	    // RSimpleTrans.g:1133:10: variable_declaration
            	    {
            	    pushFollow(FOLLOW_variable_declaration_in_facility_init_final_section7833);
            	    variable_declaration();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }
            	    break;

            	default :
            	    break loop158;
                }
            } while (true);

            // RSimpleTrans.g:1134:9: ( aux_variable_declaration )*
            loop159:
            do {
                int alt159=2;
                int LA159_0 = input.LA(1);

                if ( (LA159_0==AUX_VAR) ) {
                    alt159=1;
                }


                switch (alt159) {
            	case 1 :
            	    // RSimpleTrans.g:1134:10: aux_variable_declaration
            	    {
            	    pushFollow(FOLLOW_aux_variable_declaration_in_facility_init_final_section7846);
            	    aux_variable_declaration();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }
            	    break;

            	default :
            	    break loop159;
                }
            } while (true);

            pushFollow(FOLLOW_statement_sequence_in_facility_init_final_section7858);
            statement_sequence();

            state._fsp--;
            if (state.failed) return retval;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "facility_init_final_section"

    public static class statement_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "statement"
    // RSimpleTrans.g:1142:1: statement : ( ^( STATEMENT is+= if_statement ) -> template(is=$is) \"<is>\" | ^( STATEMENT selection_statement ) | ^( STATEMENT wls+= while_loop_statement ) -> template(wls=$wls) \"<wls>\" | ^( STATEMENT iterate_loop_statement ) | ^( STATEMENT ss+= swap_statement ) -> template(ss=$ss) \"<ss>\" | ^( STATEMENT fa+= function_assignment ) -> template(fa=$fa) \"<fa>\" | ^( STATEMENT poc+= procedure_operation_call ) -> template(poc=$poc) \"<poc>\" | ^( STATEMENT remember_statement ) | ^( STATEMENT forget_statement ) | ^( STATEMENT confirm_statement ) | ^( STATEMENT assume_statement ) | ^( STATEMENT aux_code_statement ) ) ;
    public final RSimpleTrans.statement_return statement() throws RecognitionException {
        RSimpleTrans.statement_return retval = new RSimpleTrans.statement_return();
        retval.start = input.LT(1);

        List list_is=null;
        List list_wls=null;
        List list_ss=null;
        List list_fa=null;
        List list_poc=null;
        RuleReturnScope is = null;
        RuleReturnScope wls = null;
        RuleReturnScope ss = null;
        RuleReturnScope fa = null;
        RuleReturnScope poc = null;
        try {
            // RSimpleTrans.g:1143:5: ( ( ^( STATEMENT is+= if_statement ) -> template(is=$is) \"<is>\" | ^( STATEMENT selection_statement ) | ^( STATEMENT wls+= while_loop_statement ) -> template(wls=$wls) \"<wls>\" | ^( STATEMENT iterate_loop_statement ) | ^( STATEMENT ss+= swap_statement ) -> template(ss=$ss) \"<ss>\" | ^( STATEMENT fa+= function_assignment ) -> template(fa=$fa) \"<fa>\" | ^( STATEMENT poc+= procedure_operation_call ) -> template(poc=$poc) \"<poc>\" | ^( STATEMENT remember_statement ) | ^( STATEMENT forget_statement ) | ^( STATEMENT confirm_statement ) | ^( STATEMENT assume_statement ) | ^( STATEMENT aux_code_statement ) ) )
            // RSimpleTrans.g:1143:9: ( ^( STATEMENT is+= if_statement ) -> template(is=$is) \"<is>\" | ^( STATEMENT selection_statement ) | ^( STATEMENT wls+= while_loop_statement ) -> template(wls=$wls) \"<wls>\" | ^( STATEMENT iterate_loop_statement ) | ^( STATEMENT ss+= swap_statement ) -> template(ss=$ss) \"<ss>\" | ^( STATEMENT fa+= function_assignment ) -> template(fa=$fa) \"<fa>\" | ^( STATEMENT poc+= procedure_operation_call ) -> template(poc=$poc) \"<poc>\" | ^( STATEMENT remember_statement ) | ^( STATEMENT forget_statement ) | ^( STATEMENT confirm_statement ) | ^( STATEMENT assume_statement ) | ^( STATEMENT aux_code_statement ) )
            {
            // RSimpleTrans.g:1143:9: ( ^( STATEMENT is+= if_statement ) -> template(is=$is) \"<is>\" | ^( STATEMENT selection_statement ) | ^( STATEMENT wls+= while_loop_statement ) -> template(wls=$wls) \"<wls>\" | ^( STATEMENT iterate_loop_statement ) | ^( STATEMENT ss+= swap_statement ) -> template(ss=$ss) \"<ss>\" | ^( STATEMENT fa+= function_assignment ) -> template(fa=$fa) \"<fa>\" | ^( STATEMENT poc+= procedure_operation_call ) -> template(poc=$poc) \"<poc>\" | ^( STATEMENT remember_statement ) | ^( STATEMENT forget_statement ) | ^( STATEMENT confirm_statement ) | ^( STATEMENT assume_statement ) | ^( STATEMENT aux_code_statement ) )
            int alt160=12;
            alt160 = dfa160.predict(input);
            switch (alt160) {
                case 1 :
                    // RSimpleTrans.g:1143:13: ^( STATEMENT is+= if_statement )
                    {
                    match(input,STATEMENT,FOLLOW_STATEMENT_in_statement7886); if (state.failed) return retval;

                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    pushFollow(FOLLOW_if_statement_in_statement7890);
                    is=if_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_is==null) list_is=new ArrayList();
                    list_is.add(is.getTemplate());


                    match(input, Token.UP, null); if (state.failed) return retval;


                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1144:13: -> template(is=$is) \"<is>\"
                      {
                          retval.st = new StringTemplate(templateLib, "<is>",
                        new STAttrMap().put("is", list_is));
                      }

                    }
                    }
                    break;
                case 2 :
                    // RSimpleTrans.g:1145:13: ^( STATEMENT selection_statement )
                    {
                    match(input,STATEMENT,FOLLOW_STATEMENT_in_statement7928); if (state.failed) return retval;

                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    pushFollow(FOLLOW_selection_statement_in_statement7930);
                    selection_statement();

                    state._fsp--;
                    if (state.failed) return retval;

                    match(input, Token.UP, null); if (state.failed) return retval;

                    }
                    break;
                case 3 :
                    // RSimpleTrans.g:1146:13: ^( STATEMENT wls+= while_loop_statement )
                    {
                    match(input,STATEMENT,FOLLOW_STATEMENT_in_statement7946); if (state.failed) return retval;

                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    pushFollow(FOLLOW_while_loop_statement_in_statement7950);
                    wls=while_loop_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_wls==null) list_wls=new ArrayList();
                    list_wls.add(wls.getTemplate());


                    match(input, Token.UP, null); if (state.failed) return retval;


                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1147:13: -> template(wls=$wls) \"<wls>\"
                      {
                          retval.st = new StringTemplate(templateLib, "<wls>",
                        new STAttrMap().put("wls", list_wls));
                      }

                    }
                    }
                    break;
                case 4 :
                    // RSimpleTrans.g:1148:13: ^( STATEMENT iterate_loop_statement )
                    {
                    match(input,STATEMENT,FOLLOW_STATEMENT_in_statement7988); if (state.failed) return retval;

                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    pushFollow(FOLLOW_iterate_loop_statement_in_statement7990);
                    iterate_loop_statement();

                    state._fsp--;
                    if (state.failed) return retval;

                    match(input, Token.UP, null); if (state.failed) return retval;

                    }
                    break;
                case 5 :
                    // RSimpleTrans.g:1149:13: ^( STATEMENT ss+= swap_statement )
                    {
                    match(input,STATEMENT,FOLLOW_STATEMENT_in_statement8006); if (state.failed) return retval;

                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    pushFollow(FOLLOW_swap_statement_in_statement8010);
                    ss=swap_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_ss==null) list_ss=new ArrayList();
                    list_ss.add(ss.getTemplate());


                    match(input, Token.UP, null); if (state.failed) return retval;


                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1150:13: -> template(ss=$ss) \"<ss>\"
                      {
                          retval.st = new StringTemplate(templateLib, "<ss>",
                        new STAttrMap().put("ss", list_ss));
                      }

                    }
                    }
                    break;
                case 6 :
                    // RSimpleTrans.g:1151:13: ^( STATEMENT fa+= function_assignment )
                    {
                    match(input,STATEMENT,FOLLOW_STATEMENT_in_statement8048); if (state.failed) return retval;

                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    pushFollow(FOLLOW_function_assignment_in_statement8052);
                    fa=function_assignment();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_fa==null) list_fa=new ArrayList();
                    list_fa.add(fa.getTemplate());


                    match(input, Token.UP, null); if (state.failed) return retval;


                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1152:13: -> template(fa=$fa) \"<fa>\"
                      {
                          retval.st = new StringTemplate(templateLib, "<fa>",
                        new STAttrMap().put("fa", list_fa));
                      }

                    }
                    }
                    break;
                case 7 :
                    // RSimpleTrans.g:1153:13: ^( STATEMENT poc+= procedure_operation_call )
                    {
                    match(input,STATEMENT,FOLLOW_STATEMENT_in_statement8090); if (state.failed) return retval;

                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    pushFollow(FOLLOW_procedure_operation_call_in_statement8094);
                    poc=procedure_operation_call();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_poc==null) list_poc=new ArrayList();
                    list_poc.add(poc.getTemplate());


                    match(input, Token.UP, null); if (state.failed) return retval;


                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1154:13: -> template(poc=$poc) \"<poc>\"
                      {
                          retval.st = new StringTemplate(templateLib, "<poc>",
                        new STAttrMap().put("poc", list_poc));
                      }

                    }
                    }
                    break;
                case 8 :
                    // RSimpleTrans.g:1155:13: ^( STATEMENT remember_statement )
                    {
                    match(input,STATEMENT,FOLLOW_STATEMENT_in_statement8132); if (state.failed) return retval;

                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    pushFollow(FOLLOW_remember_statement_in_statement8134);
                    remember_statement();

                    state._fsp--;
                    if (state.failed) return retval;

                    match(input, Token.UP, null); if (state.failed) return retval;

                    }
                    break;
                case 9 :
                    // RSimpleTrans.g:1156:13: ^( STATEMENT forget_statement )
                    {
                    match(input,STATEMENT,FOLLOW_STATEMENT_in_statement8150); if (state.failed) return retval;

                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    pushFollow(FOLLOW_forget_statement_in_statement8152);
                    forget_statement();

                    state._fsp--;
                    if (state.failed) return retval;

                    match(input, Token.UP, null); if (state.failed) return retval;

                    }
                    break;
                case 10 :
                    // RSimpleTrans.g:1157:13: ^( STATEMENT confirm_statement )
                    {
                    match(input,STATEMENT,FOLLOW_STATEMENT_in_statement8168); if (state.failed) return retval;

                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    pushFollow(FOLLOW_confirm_statement_in_statement8170);
                    confirm_statement();

                    state._fsp--;
                    if (state.failed) return retval;

                    match(input, Token.UP, null); if (state.failed) return retval;

                    }
                    break;
                case 11 :
                    // RSimpleTrans.g:1158:13: ^( STATEMENT assume_statement )
                    {
                    match(input,STATEMENT,FOLLOW_STATEMENT_in_statement8186); if (state.failed) return retval;

                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    pushFollow(FOLLOW_assume_statement_in_statement8188);
                    assume_statement();

                    state._fsp--;
                    if (state.failed) return retval;

                    match(input, Token.UP, null); if (state.failed) return retval;

                    }
                    break;
                case 12 :
                    // RSimpleTrans.g:1159:13: ^( STATEMENT aux_code_statement )
                    {
                    match(input,STATEMENT,FOLLOW_STATEMENT_in_statement8204); if (state.failed) return retval;

                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    pushFollow(FOLLOW_aux_code_statement_in_statement8206);
                    aux_code_statement();

                    state._fsp--;
                    if (state.failed) return retval;

                    match(input, Token.UP, null); if (state.failed) return retval;

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "statement"

    public static class in_aux_statement_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "in_aux_statement"
    // RSimpleTrans.g:1163:1: in_aux_statement : ( ^( STATEMENT if_statement ) | ^( STATEMENT selection_statement ) | ^( STATEMENT while_loop_statement ) | ^( STATEMENT iterate_loop_statement ) | ^( STATEMENT swap_statement ) | ^( STATEMENT function_assignment ) | ^( STATEMENT procedure_operation_call ) | ^( STATEMENT remember_statement ) | ^( STATEMENT forget_statement ) | ^( STATEMENT confirm_statement ) | ^( STATEMENT assume_statement ) | ^( STATEMENT aux_code_statement ) ) ;
    public final RSimpleTrans.in_aux_statement_return in_aux_statement() throws RecognitionException {
        RSimpleTrans.in_aux_statement_return retval = new RSimpleTrans.in_aux_statement_return();
        retval.start = input.LT(1);

        try {
            // RSimpleTrans.g:1164:5: ( ( ^( STATEMENT if_statement ) | ^( STATEMENT selection_statement ) | ^( STATEMENT while_loop_statement ) | ^( STATEMENT iterate_loop_statement ) | ^( STATEMENT swap_statement ) | ^( STATEMENT function_assignment ) | ^( STATEMENT procedure_operation_call ) | ^( STATEMENT remember_statement ) | ^( STATEMENT forget_statement ) | ^( STATEMENT confirm_statement ) | ^( STATEMENT assume_statement ) | ^( STATEMENT aux_code_statement ) ) )
            // RSimpleTrans.g:1164:9: ( ^( STATEMENT if_statement ) | ^( STATEMENT selection_statement ) | ^( STATEMENT while_loop_statement ) | ^( STATEMENT iterate_loop_statement ) | ^( STATEMENT swap_statement ) | ^( STATEMENT function_assignment ) | ^( STATEMENT procedure_operation_call ) | ^( STATEMENT remember_statement ) | ^( STATEMENT forget_statement ) | ^( STATEMENT confirm_statement ) | ^( STATEMENT assume_statement ) | ^( STATEMENT aux_code_statement ) )
            {
            // RSimpleTrans.g:1164:9: ( ^( STATEMENT if_statement ) | ^( STATEMENT selection_statement ) | ^( STATEMENT while_loop_statement ) | ^( STATEMENT iterate_loop_statement ) | ^( STATEMENT swap_statement ) | ^( STATEMENT function_assignment ) | ^( STATEMENT procedure_operation_call ) | ^( STATEMENT remember_statement ) | ^( STATEMENT forget_statement ) | ^( STATEMENT confirm_statement ) | ^( STATEMENT assume_statement ) | ^( STATEMENT aux_code_statement ) )
            int alt161=12;
            alt161 = dfa161.predict(input);
            switch (alt161) {
                case 1 :
                    // RSimpleTrans.g:1164:13: ^( STATEMENT if_statement )
                    {
                    match(input,STATEMENT,FOLLOW_STATEMENT_in_in_aux_statement8241); if (state.failed) return retval;

                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    pushFollow(FOLLOW_if_statement_in_in_aux_statement8243);
                    if_statement();

                    state._fsp--;
                    if (state.failed) return retval;

                    match(input, Token.UP, null); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // RSimpleTrans.g:1165:13: ^( STATEMENT selection_statement )
                    {
                    match(input,STATEMENT,FOLLOW_STATEMENT_in_in_aux_statement8259); if (state.failed) return retval;

                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    pushFollow(FOLLOW_selection_statement_in_in_aux_statement8261);
                    selection_statement();

                    state._fsp--;
                    if (state.failed) return retval;

                    match(input, Token.UP, null); if (state.failed) return retval;

                    }
                    break;
                case 3 :
                    // RSimpleTrans.g:1166:13: ^( STATEMENT while_loop_statement )
                    {
                    match(input,STATEMENT,FOLLOW_STATEMENT_in_in_aux_statement8277); if (state.failed) return retval;

                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    pushFollow(FOLLOW_while_loop_statement_in_in_aux_statement8279);
                    while_loop_statement();

                    state._fsp--;
                    if (state.failed) return retval;

                    match(input, Token.UP, null); if (state.failed) return retval;

                    }
                    break;
                case 4 :
                    // RSimpleTrans.g:1167:13: ^( STATEMENT iterate_loop_statement )
                    {
                    match(input,STATEMENT,FOLLOW_STATEMENT_in_in_aux_statement8295); if (state.failed) return retval;

                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    pushFollow(FOLLOW_iterate_loop_statement_in_in_aux_statement8297);
                    iterate_loop_statement();

                    state._fsp--;
                    if (state.failed) return retval;

                    match(input, Token.UP, null); if (state.failed) return retval;

                    }
                    break;
                case 5 :
                    // RSimpleTrans.g:1168:13: ^( STATEMENT swap_statement )
                    {
                    match(input,STATEMENT,FOLLOW_STATEMENT_in_in_aux_statement8313); if (state.failed) return retval;

                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    pushFollow(FOLLOW_swap_statement_in_in_aux_statement8315);
                    swap_statement();

                    state._fsp--;
                    if (state.failed) return retval;

                    match(input, Token.UP, null); if (state.failed) return retval;

                    }
                    break;
                case 6 :
                    // RSimpleTrans.g:1169:13: ^( STATEMENT function_assignment )
                    {
                    match(input,STATEMENT,FOLLOW_STATEMENT_in_in_aux_statement8331); if (state.failed) return retval;

                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    pushFollow(FOLLOW_function_assignment_in_in_aux_statement8333);
                    function_assignment();

                    state._fsp--;
                    if (state.failed) return retval;

                    match(input, Token.UP, null); if (state.failed) return retval;

                    }
                    break;
                case 7 :
                    // RSimpleTrans.g:1170:13: ^( STATEMENT procedure_operation_call )
                    {
                    match(input,STATEMENT,FOLLOW_STATEMENT_in_in_aux_statement8349); if (state.failed) return retval;

                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    pushFollow(FOLLOW_procedure_operation_call_in_in_aux_statement8351);
                    procedure_operation_call();

                    state._fsp--;
                    if (state.failed) return retval;

                    match(input, Token.UP, null); if (state.failed) return retval;

                    }
                    break;
                case 8 :
                    // RSimpleTrans.g:1171:13: ^( STATEMENT remember_statement )
                    {
                    match(input,STATEMENT,FOLLOW_STATEMENT_in_in_aux_statement8367); if (state.failed) return retval;

                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    pushFollow(FOLLOW_remember_statement_in_in_aux_statement8369);
                    remember_statement();

                    state._fsp--;
                    if (state.failed) return retval;

                    match(input, Token.UP, null); if (state.failed) return retval;

                    }
                    break;
                case 9 :
                    // RSimpleTrans.g:1172:13: ^( STATEMENT forget_statement )
                    {
                    match(input,STATEMENT,FOLLOW_STATEMENT_in_in_aux_statement8385); if (state.failed) return retval;

                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    pushFollow(FOLLOW_forget_statement_in_in_aux_statement8387);
                    forget_statement();

                    state._fsp--;
                    if (state.failed) return retval;

                    match(input, Token.UP, null); if (state.failed) return retval;

                    }
                    break;
                case 10 :
                    // RSimpleTrans.g:1173:13: ^( STATEMENT confirm_statement )
                    {
                    match(input,STATEMENT,FOLLOW_STATEMENT_in_in_aux_statement8403); if (state.failed) return retval;

                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    pushFollow(FOLLOW_confirm_statement_in_in_aux_statement8405);
                    confirm_statement();

                    state._fsp--;
                    if (state.failed) return retval;

                    match(input, Token.UP, null); if (state.failed) return retval;

                    }
                    break;
                case 11 :
                    // RSimpleTrans.g:1174:13: ^( STATEMENT assume_statement )
                    {
                    match(input,STATEMENT,FOLLOW_STATEMENT_in_in_aux_statement8421); if (state.failed) return retval;

                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    pushFollow(FOLLOW_assume_statement_in_in_aux_statement8423);
                    assume_statement();

                    state._fsp--;
                    if (state.failed) return retval;

                    match(input, Token.UP, null); if (state.failed) return retval;

                    }
                    break;
                case 12 :
                    // RSimpleTrans.g:1175:13: ^( STATEMENT aux_code_statement )
                    {
                    match(input,STATEMENT,FOLLOW_STATEMENT_in_in_aux_statement8439); if (state.failed) return retval;

                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    pushFollow(FOLLOW_aux_code_statement_in_in_aux_statement8441);
                    aux_code_statement();

                    state._fsp--;
                    if (state.failed) return retval;

                    match(input, Token.UP, null); if (state.failed) return retval;

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "in_aux_statement"

    public static class statement_sequence_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "statement_sequence"
    // RSimpleTrans.g:1180:1: statement_sequence : ^( STATEMENT_SEQUENCE (stmts+= statement )* ) -> template(stmts=$stmts) \"<stmts>\";
    public final RSimpleTrans.statement_sequence_return statement_sequence() throws RecognitionException {
        RSimpleTrans.statement_sequence_return retval = new RSimpleTrans.statement_sequence_return();
        retval.start = input.LT(1);

        List list_stmts=null;
        RuleReturnScope stmts = null;
        try {
            // RSimpleTrans.g:1181:5: ( ^( STATEMENT_SEQUENCE (stmts+= statement )* ) -> template(stmts=$stmts) \"<stmts>\")
            // RSimpleTrans.g:1181:9: ^( STATEMENT_SEQUENCE (stmts+= statement )* )
            {
            match(input,STATEMENT_SEQUENCE,FOLLOW_STATEMENT_SEQUENCE_in_statement_sequence8473); if (state.failed) return retval;

            if ( input.LA(1)==Token.DOWN ) {
                match(input, Token.DOWN, null); if (state.failed) return retval;
                // RSimpleTrans.g:1181:35: (stmts+= statement )*
                loop162:
                do {
                    int alt162=2;
                    int LA162_0 = input.LA(1);

                    if ( (LA162_0==STATEMENT) ) {
                        alt162=1;
                    }


                    switch (alt162) {
                	case 1 :
                	    // RSimpleTrans.g:1181:35: stmts+= statement
                	    {
                	    pushFollow(FOLLOW_statement_in_statement_sequence8477);
                	    stmts=statement();

                	    state._fsp--;
                	    if (state.failed) return retval;
                	    if (list_stmts==null) list_stmts=new ArrayList();
                	    list_stmts.add(stmts.getTemplate());


                	    }
                	    break;

                	default :
                	    break loop162;
                    }
                } while (true);


                match(input, Token.UP, null); if (state.failed) return retval;
            }


            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 1182:9: -> template(stmts=$stmts) \"<stmts>\"
              {
                  retval.st = new StringTemplate(templateLib, "<stmts>",
                new STAttrMap().put("stmts", list_stmts));
              }

            }
            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "statement_sequence"

    public static class in_aux_statement_sequence_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "in_aux_statement_sequence"
    // RSimpleTrans.g:1185:1: in_aux_statement_sequence : ^( STATEMENT_SEQUENCE ( in_aux_statement )* ) ;
    public final RSimpleTrans.in_aux_statement_sequence_return in_aux_statement_sequence() throws RecognitionException {
        RSimpleTrans.in_aux_statement_sequence_return retval = new RSimpleTrans.in_aux_statement_sequence_return();
        retval.start = input.LT(1);

        try {
            // RSimpleTrans.g:1186:5: ( ^( STATEMENT_SEQUENCE ( in_aux_statement )* ) )
            // RSimpleTrans.g:1186:9: ^( STATEMENT_SEQUENCE ( in_aux_statement )* )
            {
            match(input,STATEMENT_SEQUENCE,FOLLOW_STATEMENT_SEQUENCE_in_in_aux_statement_sequence8521); if (state.failed) return retval;

            if ( input.LA(1)==Token.DOWN ) {
                match(input, Token.DOWN, null); if (state.failed) return retval;
                // RSimpleTrans.g:1186:30: ( in_aux_statement )*
                loop163:
                do {
                    int alt163=2;
                    int LA163_0 = input.LA(1);

                    if ( (LA163_0==STATEMENT) ) {
                        alt163=1;
                    }


                    switch (alt163) {
                	case 1 :
                	    // RSimpleTrans.g:1186:30: in_aux_statement
                	    {
                	    pushFollow(FOLLOW_in_aux_statement_in_in_aux_statement_sequence8523);
                	    in_aux_statement();

                	    state._fsp--;
                	    if (state.failed) return retval;

                	    }
                	    break;

                	default :
                	    break loop163;
                    }
                } while (true);


                match(input, Token.UP, null); if (state.failed) return retval;
            }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "in_aux_statement_sequence"

    public static class function_assignment_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "function_assignment"
    // RSimpleTrans.g:1191:1: function_assignment : ^( ASSIGN_OP lhs+= variable_expression rhs+= program_expression ) -> template(lhs=$lhsrhs=$rhs) \"<lhs> = <rhs>;\";
    public final RSimpleTrans.function_assignment_return function_assignment() throws RecognitionException {
        RSimpleTrans.function_assignment_return retval = new RSimpleTrans.function_assignment_return();
        retval.start = input.LT(1);

        List list_lhs=null;
        List list_rhs=null;
        RuleReturnScope lhs = null;
        RuleReturnScope rhs = null;
        try {
            // RSimpleTrans.g:1193:5: ( ^( ASSIGN_OP lhs+= variable_expression rhs+= program_expression ) -> template(lhs=$lhsrhs=$rhs) \"<lhs> = <rhs>;\")
            // RSimpleTrans.g:1193:9: ^( ASSIGN_OP lhs+= variable_expression rhs+= program_expression )
            {
            match(input,ASSIGN_OP,FOLLOW_ASSIGN_OP_in_function_assignment8552); if (state.failed) return retval;

            match(input, Token.DOWN, null); if (state.failed) return retval;
            pushFollow(FOLLOW_variable_expression_in_function_assignment8556);
            lhs=variable_expression();

            state._fsp--;
            if (state.failed) return retval;
            if (list_lhs==null) list_lhs=new ArrayList();
            list_lhs.add(lhs.getTemplate());

            pushFollow(FOLLOW_program_expression_in_function_assignment8560);
            rhs=program_expression();

            state._fsp--;
            if (state.failed) return retval;
            if (list_rhs==null) list_rhs=new ArrayList();
            list_rhs.add(rhs.getTemplate());


            match(input, Token.UP, null); if (state.failed) return retval;


            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 1194:9: -> template(lhs=$lhsrhs=$rhs) \"<lhs> = <rhs>;\"
              {
                  retval.st = new StringTemplate(templateLib, "<lhs> = <rhs>;",
                new STAttrMap().put("lhs", list_lhs).put("rhs", list_rhs));
              }

            }
            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "function_assignment"

    public static class forget_statement_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "forget_statement"
    // RSimpleTrans.g:1199:1: forget_statement : FORGET ;
    public final RSimpleTrans.forget_statement_return forget_statement() throws RecognitionException {
        RSimpleTrans.forget_statement_return retval = new RSimpleTrans.forget_statement_return();
        retval.start = input.LT(1);

        try {
            // RSimpleTrans.g:1200:5: ( FORGET )
            // RSimpleTrans.g:1200:9: FORGET
            {
            match(input,FORGET,FOLLOW_FORGET_in_forget_statement8604); if (state.failed) return retval;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "forget_statement"

    public static class remember_statement_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "remember_statement"
    // RSimpleTrans.g:1203:1: remember_statement : REMEMBER ;
    public final RSimpleTrans.remember_statement_return remember_statement() throws RecognitionException {
        RSimpleTrans.remember_statement_return retval = new RSimpleTrans.remember_statement_return();
        retval.start = input.LT(1);

        try {
            // RSimpleTrans.g:1204:5: ( REMEMBER )
            // RSimpleTrans.g:1204:9: REMEMBER
            {
            match(input,REMEMBER,FOLLOW_REMEMBER_in_remember_statement8623); if (state.failed) return retval;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "remember_statement"

    public static class if_statement_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "if_statement"
    // RSimpleTrans.g:1209:1: if_statement : ^( IF c+= condition ss+= statement_sequence (ei+= elsif_item )* (ep+= else_part )? ) -> template(ln=adj[0]in=adj[1]c=$css=$ssei=$eiep=$ep) \"<ln><in>if(<c>){<ss><ei><ep><\\n><in>}\";
    public final RSimpleTrans.if_statement_return if_statement() throws RecognitionException {
        RSimpleTrans.if_statement_return retval = new RSimpleTrans.if_statement_return();
        retval.start = input.LT(1);

        CommonTree IF24=null;
        List list_c=null;
        List list_ss=null;
        List list_ei=null;
        List list_ep=null;
        RuleReturnScope c = null;
        RuleReturnScope ss = null;
        RuleReturnScope ei = null;
        RuleReturnScope ep = null;

        String[] adj = {"",""};

        try {
            // RSimpleTrans.g:1213:5: ( ^( IF c+= condition ss+= statement_sequence (ei+= elsif_item )* (ep+= else_part )? ) -> template(ln=adj[0]in=adj[1]c=$css=$ssei=$eiep=$ep) \"<ln><in>if(<c>){<ss><ei><ep><\\n><in>}\")
            // RSimpleTrans.g:1213:9: ^( IF c+= condition ss+= statement_sequence (ei+= elsif_item )* (ep+= else_part )? )
            {
            IF24=(CommonTree)match(input,IF,FOLLOW_IF_in_if_statement8649); if (state.failed) return retval;

            if ( state.backtracking==0 ) {
              adj = adjustLine(IF24);
            }

            match(input, Token.DOWN, null); if (state.failed) return retval;
            pushFollow(FOLLOW_condition_in_if_statement8655);
            c=condition();

            state._fsp--;
            if (state.failed) return retval;
            if (list_c==null) list_c=new ArrayList();
            list_c.add(c.getTemplate());

            if ( state.backtracking==0 ) {
              incIndent();
            }
            pushFollow(FOLLOW_statement_sequence_in_if_statement8670);
            ss=statement_sequence();

            state._fsp--;
            if (state.failed) return retval;
            if (list_ss==null) list_ss=new ArrayList();
            list_ss.add(ss.getTemplate());

            // RSimpleTrans.g:1215:9: (ei+= elsif_item )*
            loop164:
            do {
                int alt164=2;
                int LA164_0 = input.LA(1);

                if ( (LA164_0==ELSIF) ) {
                    alt164=1;
                }


                switch (alt164) {
            	case 1 :
            	    // RSimpleTrans.g:1215:10: ei+= elsif_item
            	    {
            	    pushFollow(FOLLOW_elsif_item_in_if_statement8683);
            	    ei=elsif_item();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if (list_ei==null) list_ei=new ArrayList();
            	    list_ei.add(ei.getTemplate());


            	    }
            	    break;

            	default :
            	    break loop164;
                }
            } while (true);

            // RSimpleTrans.g:1216:9: (ep+= else_part )?
            int alt165=2;
            int LA165_0 = input.LA(1);

            if ( (LA165_0==ELSE) ) {
                alt165=1;
            }
            switch (alt165) {
                case 1 :
                    // RSimpleTrans.g:1216:10: ep+= else_part
                    {
                    pushFollow(FOLLOW_else_part_in_if_statement8698);
                    ep=else_part();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_ep==null) list_ep=new ArrayList();
                    list_ep.add(ep.getTemplate());


                    }
                    break;

            }


            match(input, Token.UP, null); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              decIndent();incLine();
            }


            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 1217:9: -> template(ln=adj[0]in=adj[1]c=$css=$ssei=$eiep=$ep) \"<ln><in>if(<c>){<ss><ei><ep><\\n><in>}\"
              {
                  retval.st = new StringTemplate(templateLib, "<ln><in>if(<c>){<ss><ei><ep><\\n><in>}",
                new STAttrMap().put("ln", adj[0]).put("in", adj[1]).put("c", list_c).put("ss", list_ss).put("ei", list_ei).put("ep", list_ep));
              }

            }
            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "if_statement"

    public static class elsif_item_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "elsif_item"
    // RSimpleTrans.g:1226:1: elsif_item : ^( ELSIF condition statement_sequence ) ;
    public final RSimpleTrans.elsif_item_return elsif_item() throws RecognitionException {
        RSimpleTrans.elsif_item_return retval = new RSimpleTrans.elsif_item_return();
        retval.start = input.LT(1);

        try {
            // RSimpleTrans.g:1227:5: ( ^( ELSIF condition statement_sequence ) )
            // RSimpleTrans.g:1227:9: ^( ELSIF condition statement_sequence )
            {
            match(input,ELSIF,FOLLOW_ELSIF_in_elsif_item8876); if (state.failed) return retval;

            match(input, Token.DOWN, null); if (state.failed) return retval;
            pushFollow(FOLLOW_condition_in_elsif_item8878);
            condition();

            state._fsp--;
            if (state.failed) return retval;
            pushFollow(FOLLOW_statement_sequence_in_elsif_item8889);
            statement_sequence();

            state._fsp--;
            if (state.failed) return retval;

            match(input, Token.UP, null); if (state.failed) return retval;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "elsif_item"

    public static class else_part_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "else_part"
    // RSimpleTrans.g:1231:1: else_part : ^( ELSE statement_sequence ) ;
    public final RSimpleTrans.else_part_return else_part() throws RecognitionException {
        RSimpleTrans.else_part_return retval = new RSimpleTrans.else_part_return();
        retval.start = input.LT(1);

        try {
            // RSimpleTrans.g:1232:5: ( ^( ELSE statement_sequence ) )
            // RSimpleTrans.g:1232:9: ^( ELSE statement_sequence )
            {
            match(input,ELSE,FOLLOW_ELSE_in_else_part8910); if (state.failed) return retval;

            match(input, Token.DOWN, null); if (state.failed) return retval;
            pushFollow(FOLLOW_statement_sequence_in_else_part8912);
            statement_sequence();

            state._fsp--;
            if (state.failed) return retval;

            match(input, Token.UP, null); if (state.failed) return retval;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "else_part"

    public static class condition_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "condition"
    // RSimpleTrans.g:1235:1: condition : pe+= program_expression -> template(pe=$pe) \"<pe>\";
    public final RSimpleTrans.condition_return condition() throws RecognitionException {
        RSimpleTrans.condition_return retval = new RSimpleTrans.condition_return();
        retval.start = input.LT(1);

        List list_pe=null;
        RuleReturnScope pe = null;
        try {
            // RSimpleTrans.g:1236:5: (pe+= program_expression -> template(pe=$pe) \"<pe>\")
            // RSimpleTrans.g:1236:9: pe+= program_expression
            {
            pushFollow(FOLLOW_program_expression_in_condition8934);
            pe=program_expression();

            state._fsp--;
            if (state.failed) return retval;
            if (list_pe==null) list_pe=new ArrayList();
            list_pe.add(pe.getTemplate());



            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 1236:32: -> template(pe=$pe) \"<pe>\"
              {
                  retval.st = new StringTemplate(templateLib, "<pe>",
                new STAttrMap().put("pe", list_pe));
              }

            }
            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "condition"

    public static class aux_code_statement_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "aux_code_statement"
    // RSimpleTrans.g:1240:1: aux_code_statement : ^( AUX_CODE in_aux_statement_sequence ) ;
    public final RSimpleTrans.aux_code_statement_return aux_code_statement() throws RecognitionException {
        RSimpleTrans.aux_code_statement_return retval = new RSimpleTrans.aux_code_statement_return();
        retval.start = input.LT(1);

        try {
            // RSimpleTrans.g:1241:5: ( ^( AUX_CODE in_aux_statement_sequence ) )
            // RSimpleTrans.g:1241:9: ^( AUX_CODE in_aux_statement_sequence )
            {
            match(input,AUX_CODE,FOLLOW_AUX_CODE_in_aux_code_statement8965); if (state.failed) return retval;

            match(input, Token.DOWN, null); if (state.failed) return retval;
            pushFollow(FOLLOW_in_aux_statement_sequence_in_aux_code_statement8975);
            in_aux_statement_sequence();

            state._fsp--;
            if (state.failed) return retval;

            match(input, Token.UP, null); if (state.failed) return retval;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "aux_code_statement"

    public static class iterate_loop_statement_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "iterate_loop_statement"
    // RSimpleTrans.g:1248:1: iterate_loop_statement : ^( ITERATE ( changing_clause )? maintaining_clause ( decreasing_clause )? iterate_item_sequence ) ;
    public final RSimpleTrans.iterate_loop_statement_return iterate_loop_statement() throws RecognitionException {
        RSimpleTrans.iterate_loop_statement_return retval = new RSimpleTrans.iterate_loop_statement_return();
        retval.start = input.LT(1);

        try {
            // RSimpleTrans.g:1249:5: ( ^( ITERATE ( changing_clause )? maintaining_clause ( decreasing_clause )? iterate_item_sequence ) )
            // RSimpleTrans.g:1249:9: ^( ITERATE ( changing_clause )? maintaining_clause ( decreasing_clause )? iterate_item_sequence )
            {
            match(input,ITERATE,FOLLOW_ITERATE_in_iterate_loop_statement9000); if (state.failed) return retval;

            match(input, Token.DOWN, null); if (state.failed) return retval;
            // RSimpleTrans.g:1250:9: ( changing_clause )?
            int alt166=2;
            int LA166_0 = input.LA(1);

            if ( (LA166_0==CHANGING) ) {
                alt166=1;
            }
            switch (alt166) {
                case 1 :
                    // RSimpleTrans.g:1250:10: changing_clause
                    {
                    pushFollow(FOLLOW_changing_clause_in_iterate_loop_statement9011);
                    changing_clause();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }

            pushFollow(FOLLOW_maintaining_clause_in_iterate_loop_statement9027);
            maintaining_clause();

            state._fsp--;
            if (state.failed) return retval;
            // RSimpleTrans.g:1252:9: ( decreasing_clause )?
            int alt167=2;
            int LA167_0 = input.LA(1);

            if ( (LA167_0==DECREASING) ) {
                alt167=1;
            }
            switch (alt167) {
                case 1 :
                    // RSimpleTrans.g:1252:10: decreasing_clause
                    {
                    pushFollow(FOLLOW_decreasing_clause_in_iterate_loop_statement9038);
                    decreasing_clause();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }

            pushFollow(FOLLOW_iterate_item_sequence_in_iterate_loop_statement9050);
            iterate_item_sequence();

            state._fsp--;
            if (state.failed) return retval;

            match(input, Token.UP, null); if (state.failed) return retval;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "iterate_loop_statement"

    public static class iterate_item_sequence_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "iterate_item_sequence"
    // RSimpleTrans.g:1256:1: iterate_item_sequence : ( iterate_item )+ ;
    public final RSimpleTrans.iterate_item_sequence_return iterate_item_sequence() throws RecognitionException {
        RSimpleTrans.iterate_item_sequence_return retval = new RSimpleTrans.iterate_item_sequence_return();
        retval.start = input.LT(1);

        try {
            // RSimpleTrans.g:1257:5: ( ( iterate_item )+ )
            // RSimpleTrans.g:1257:9: ( iterate_item )+
            {
            // RSimpleTrans.g:1257:9: ( iterate_item )+
            int cnt168=0;
            loop168:
            do {
                int alt168=2;
                int LA168_0 = input.LA(1);

                if ( (LA168_0==WHEN||LA168_0==STATEMENT) ) {
                    alt168=1;
                }


                switch (alt168) {
            	case 1 :
            	    // RSimpleTrans.g:1257:10: iterate_item
            	    {
            	    pushFollow(FOLLOW_iterate_item_in_iterate_item_sequence9072);
            	    iterate_item();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }
            	    break;

            	default :
            	    if ( cnt168 >= 1 ) break loop168;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(168, input);
                        throw eee;
                }
                cnt168++;
            } while (true);


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "iterate_item_sequence"

    public static class iterate_item_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "iterate_item"
    // RSimpleTrans.g:1260:1: iterate_item : ( statement | iterate_exit_statement );
    public final RSimpleTrans.iterate_item_return iterate_item() throws RecognitionException {
        RSimpleTrans.iterate_item_return retval = new RSimpleTrans.iterate_item_return();
        retval.start = input.LT(1);

        try {
            // RSimpleTrans.g:1261:5: ( statement | iterate_exit_statement )
            int alt169=2;
            int LA169_0 = input.LA(1);

            if ( (LA169_0==STATEMENT) ) {
                alt169=1;
            }
            else if ( (LA169_0==WHEN) ) {
                alt169=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 169, 0, input);

                throw nvae;
            }
            switch (alt169) {
                case 1 :
                    // RSimpleTrans.g:1261:9: statement
                    {
                    pushFollow(FOLLOW_statement_in_iterate_item9094);
                    statement();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // RSimpleTrans.g:1262:9: iterate_exit_statement
                    {
                    pushFollow(FOLLOW_iterate_exit_statement_in_iterate_item9104);
                    iterate_exit_statement();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "iterate_item"

    public static class iterate_exit_statement_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "iterate_exit_statement"
    // RSimpleTrans.g:1265:1: iterate_exit_statement : ^( WHEN condition statement_sequence ) ;
    public final RSimpleTrans.iterate_exit_statement_return iterate_exit_statement() throws RecognitionException {
        RSimpleTrans.iterate_exit_statement_return retval = new RSimpleTrans.iterate_exit_statement_return();
        retval.start = input.LT(1);

        try {
            // RSimpleTrans.g:1266:5: ( ^( WHEN condition statement_sequence ) )
            // RSimpleTrans.g:1266:9: ^( WHEN condition statement_sequence )
            {
            match(input,WHEN,FOLLOW_WHEN_in_iterate_exit_statement9124); if (state.failed) return retval;

            match(input, Token.DOWN, null); if (state.failed) return retval;
            pushFollow(FOLLOW_condition_in_iterate_exit_statement9127);
            condition();

            state._fsp--;
            if (state.failed) return retval;
            pushFollow(FOLLOW_statement_sequence_in_iterate_exit_statement9138);
            statement_sequence();

            state._fsp--;
            if (state.failed) return retval;

            match(input, Token.UP, null); if (state.failed) return retval;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "iterate_exit_statement"

    public static class procedure_operation_call_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "procedure_operation_call"
    // RSimpleTrans.g:1272:1: procedure_operation_call : ^( FUNCTION qi+= qualified_ident oas+= operation_argument_section[$qi] ) -> template(qi=$qioas=$oasln=adj[0]in=adj[1]) \"<ln><in><oas>\";
    public final RSimpleTrans.procedure_operation_call_return procedure_operation_call() throws RecognitionException {
        RSimpleTrans.procedure_operation_call_return retval = new RSimpleTrans.procedure_operation_call_return();
        retval.start = input.LT(1);

        CommonTree FUNCTION25=null;
        List list_qi=null;
        List list_oas=null;
        RuleReturnScope qi = null;
        RuleReturnScope oas = null;

        String[] adj = {"",""};

        try {
            // RSimpleTrans.g:1276:5: ( ^( FUNCTION qi+= qualified_ident oas+= operation_argument_section[$qi] ) -> template(qi=$qioas=$oasln=adj[0]in=adj[1]) \"<ln><in><oas>\")
            // RSimpleTrans.g:1276:9: ^( FUNCTION qi+= qualified_ident oas+= operation_argument_section[$qi] )
            {
            FUNCTION25=(CommonTree)match(input,FUNCTION,FOLLOW_FUNCTION_in_procedure_operation_call9171); if (state.failed) return retval;

            if ( state.backtracking==0 ) {
              adj = adjustLine(FUNCTION25);
            }

            match(input, Token.DOWN, null); if (state.failed) return retval;
            pushFollow(FOLLOW_qualified_ident_in_procedure_operation_call9176);
            qi=qualified_ident();

            state._fsp--;
            if (state.failed) return retval;
            if (list_qi==null) list_qi=new ArrayList();
            list_qi.add(qi.getTemplate());

            pushFollow(FOLLOW_operation_argument_section_in_procedure_operation_call9180);
            oas=operation_argument_section(list_qi);

            state._fsp--;
            if (state.failed) return retval;
            if (list_oas==null) list_oas=new ArrayList();
            list_oas.add(oas.getTemplate());


            match(input, Token.UP, null); if (state.failed) return retval;


            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 1277:9: -> template(qi=$qioas=$oasln=adj[0]in=adj[1]) \"<ln><in><oas>\"
              {
                  retval.st = new StringTemplate(templateLib, "<ln><in><oas>",
                new STAttrMap().put("qi", list_qi).put("oas", list_oas).put("ln", adj[0]).put("in", adj[1]));
              }

            }
            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "procedure_operation_call"

    public static class operation_argument_section_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "operation_argument_section"
    // RSimpleTrans.g:1280:1: operation_argument_section[List opName] : ^( PARAMS (params+= program_expression )* ) -> template(params=$paramsopName=$opNamecaller=callerln=adj[0]in=adj[1]) \"<caller><opName>(<ln><in><params; separator=\", \">);\";
    public final RSimpleTrans.operation_argument_section_return operation_argument_section(List opName) throws RecognitionException {
        RSimpleTrans.operation_argument_section_return retval = new RSimpleTrans.operation_argument_section_return();
        retval.start = input.LT(1);

        CommonTree PARAMS26=null;
        List list_params=null;
        RuleReturnScope params = null;

        String[] adj = {"",""};
        String caller = "";

        try {
            // RSimpleTrans.g:1285:5: ( ^( PARAMS (params+= program_expression )* ) -> template(params=$paramsopName=$opNamecaller=callerln=adj[0]in=adj[1]) \"<caller><opName>(<ln><in><params; separator=\", \">);\")
            // RSimpleTrans.g:1285:9: ^( PARAMS (params+= program_expression )* )
            {
            PARAMS26=(CommonTree)match(input,PARAMS,FOLLOW_PARAMS_in_operation_argument_section9238); if (state.failed) return retval;

            if ( state.backtracking==0 ) {
              adj = adjustLine(PARAMS26);
            }

            if ( input.LA(1)==Token.DOWN ) {
                match(input, Token.DOWN, null); if (state.failed) return retval;
                // RSimpleTrans.g:1285:53: (params+= program_expression )*
                loop170:
                do {
                    int alt170=2;
                    int LA170_0 = input.LA(1);

                    if ( (LA170_0==EXPR) ) {
                        alt170=1;
                    }


                    switch (alt170) {
                	case 1 :
                	    // RSimpleTrans.g:1285:53: params+= program_expression
                	    {
                	    pushFollow(FOLLOW_program_expression_in_operation_argument_section9244);
                	    params=program_expression();

                	    state._fsp--;
                	    if (state.failed) return retval;
                	    if (list_params==null) list_params=new ArrayList();
                	    list_params.add(params.getTemplate());


                	    }
                	    break;

                	default :
                	    break loop170;
                    }
                } while (true);


                match(input, Token.UP, null); if (state.failed) return retval;
            }
            if ( state.backtracking==0 ) {

                        if(list_params != null){
                          String name = opName.toString();
                          if(!name.contains(".")){
                            caller = (StringTemplate)list_params.remove(list_params.size()-1)+".";
                          }
                        }
                      
            }


            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 1294:9: -> template(params=$paramsopName=$opNamecaller=callerln=adj[0]in=adj[1]) \"<caller><opName>(<ln><in><params; separator=\", \">);\"
              {
                  retval.st = new StringTemplate(templateLib, "<caller><opName>(<ln><in><params; separator=\", \">);",
                new STAttrMap().put("params", list_params).put("opName", opName).put("caller", caller).put("ln", adj[0]).put("in", adj[1]));
              }

            }
            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "operation_argument_section"

    public static class selection_statement_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "selection_statement"
    // RSimpleTrans.g:1302:1: selection_statement : ^( CASE program_expression selection_alternative_sequence ( default_alternative )? ) ;
    public final RSimpleTrans.selection_statement_return selection_statement() throws RecognitionException {
        RSimpleTrans.selection_statement_return retval = new RSimpleTrans.selection_statement_return();
        retval.start = input.LT(1);

        try {
            // RSimpleTrans.g:1303:5: ( ^( CASE program_expression selection_alternative_sequence ( default_alternative )? ) )
            // RSimpleTrans.g:1303:9: ^( CASE program_expression selection_alternative_sequence ( default_alternative )? )
            {
            match(input,CASE,FOLLOW_CASE_in_selection_statement9363); if (state.failed) return retval;

            match(input, Token.DOWN, null); if (state.failed) return retval;
            pushFollow(FOLLOW_program_expression_in_selection_statement9365);
            program_expression();

            state._fsp--;
            if (state.failed) return retval;
            pushFollow(FOLLOW_selection_alternative_sequence_in_selection_statement9376);
            selection_alternative_sequence();

            state._fsp--;
            if (state.failed) return retval;
            // RSimpleTrans.g:1305:9: ( default_alternative )?
            int alt171=2;
            int LA171_0 = input.LA(1);

            if ( (LA171_0==DEFAULT) ) {
                alt171=1;
            }
            switch (alt171) {
                case 1 :
                    // RSimpleTrans.g:1305:10: default_alternative
                    {
                    pushFollow(FOLLOW_default_alternative_in_selection_statement9387);
                    default_alternative();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            match(input, Token.UP, null); if (state.failed) return retval;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "selection_statement"

    public static class selection_alternative_sequence_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "selection_alternative_sequence"
    // RSimpleTrans.g:1308:1: selection_alternative_sequence : ( selection_alternative )+ ;
    public final RSimpleTrans.selection_alternative_sequence_return selection_alternative_sequence() throws RecognitionException {
        RSimpleTrans.selection_alternative_sequence_return retval = new RSimpleTrans.selection_alternative_sequence_return();
        retval.start = input.LT(1);

        try {
            // RSimpleTrans.g:1309:5: ( ( selection_alternative )+ )
            // RSimpleTrans.g:1309:9: ( selection_alternative )+
            {
            // RSimpleTrans.g:1309:9: ( selection_alternative )+
            int cnt172=0;
            loop172:
            do {
                int alt172=2;
                int LA172_0 = input.LA(1);

                if ( (LA172_0==WHEN) ) {
                    alt172=1;
                }


                switch (alt172) {
            	case 1 :
            	    // RSimpleTrans.g:1309:10: selection_alternative
            	    {
            	    pushFollow(FOLLOW_selection_alternative_in_selection_alternative_sequence9410);
            	    selection_alternative();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }
            	    break;

            	default :
            	    if ( cnt172 >= 1 ) break loop172;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(172, input);
                        throw eee;
                }
                cnt172++;
            } while (true);


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "selection_alternative_sequence"

    public static class selection_alternative_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "selection_alternative"
    // RSimpleTrans.g:1312:1: selection_alternative : ^( WHEN choices statement_sequence ) ;
    public final RSimpleTrans.selection_alternative_return selection_alternative() throws RecognitionException {
        RSimpleTrans.selection_alternative_return retval = new RSimpleTrans.selection_alternative_return();
        retval.start = input.LT(1);

        try {
            // RSimpleTrans.g:1313:5: ( ^( WHEN choices statement_sequence ) )
            // RSimpleTrans.g:1313:9: ^( WHEN choices statement_sequence )
            {
            match(input,WHEN,FOLLOW_WHEN_in_selection_alternative9432); if (state.failed) return retval;

            match(input, Token.DOWN, null); if (state.failed) return retval;
            pushFollow(FOLLOW_choices_in_selection_alternative9434);
            choices();

            state._fsp--;
            if (state.failed) return retval;
            pushFollow(FOLLOW_statement_sequence_in_selection_alternative9445);
            statement_sequence();

            state._fsp--;
            if (state.failed) return retval;

            match(input, Token.UP, null); if (state.failed) return retval;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "selection_alternative"

    public static class default_alternative_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "default_alternative"
    // RSimpleTrans.g:1317:1: default_alternative : ^( DEFAULT statement_sequence ) ;
    public final RSimpleTrans.default_alternative_return default_alternative() throws RecognitionException {
        RSimpleTrans.default_alternative_return retval = new RSimpleTrans.default_alternative_return();
        retval.start = input.LT(1);

        try {
            // RSimpleTrans.g:1318:5: ( ^( DEFAULT statement_sequence ) )
            // RSimpleTrans.g:1318:9: ^( DEFAULT statement_sequence )
            {
            match(input,DEFAULT,FOLLOW_DEFAULT_in_default_alternative9466); if (state.failed) return retval;

            match(input, Token.DOWN, null); if (state.failed) return retval;
            pushFollow(FOLLOW_statement_sequence_in_default_alternative9468);
            statement_sequence();

            state._fsp--;
            if (state.failed) return retval;

            match(input, Token.UP, null); if (state.failed) return retval;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "default_alternative"

    public static class choice_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "choice"
    // RSimpleTrans.g:1321:1: choice : program_expression ;
    public final RSimpleTrans.choice_return choice() throws RecognitionException {
        RSimpleTrans.choice_return retval = new RSimpleTrans.choice_return();
        retval.start = input.LT(1);

        try {
            // RSimpleTrans.g:1322:5: ( program_expression )
            // RSimpleTrans.g:1322:9: program_expression
            {
            pushFollow(FOLLOW_program_expression_in_choice9488);
            program_expression();

            state._fsp--;
            if (state.failed) return retval;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "choice"

    public static class choices_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "choices"
    // RSimpleTrans.g:1325:1: choices : ^( CHOICES ( choice )+ ) ;
    public final RSimpleTrans.choices_return choices() throws RecognitionException {
        RSimpleTrans.choices_return retval = new RSimpleTrans.choices_return();
        retval.start = input.LT(1);

        try {
            // RSimpleTrans.g:1326:5: ( ^( CHOICES ( choice )+ ) )
            // RSimpleTrans.g:1326:9: ^( CHOICES ( choice )+ )
            {
            match(input,CHOICES,FOLLOW_CHOICES_in_choices9508); if (state.failed) return retval;

            match(input, Token.DOWN, null); if (state.failed) return retval;
            // RSimpleTrans.g:1326:19: ( choice )+
            int cnt173=0;
            loop173:
            do {
                int alt173=2;
                int LA173_0 = input.LA(1);

                if ( (LA173_0==EXPR) ) {
                    alt173=1;
                }


                switch (alt173) {
            	case 1 :
            	    // RSimpleTrans.g:1326:19: choice
            	    {
            	    pushFollow(FOLLOW_choice_in_choices9510);
            	    choice();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }
            	    break;

            	default :
            	    if ( cnt173 >= 1 ) break loop173;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(173, input);
                        throw eee;
                }
                cnt173++;
            } while (true);


            match(input, Token.UP, null); if (state.failed) return retval;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "choices"

    public static class swap_statement_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "swap_statement"
    // RSimpleTrans.g:1331:1: swap_statement : ^( SWAP_OP lhs+= variable_expression rhs= variable_expression ) -> template(lhs=newLhsrhs=$rhs.text) \"<lhs>, <rhs>);\";
    public final RSimpleTrans.swap_statement_return swap_statement() throws RecognitionException {
        RSimpleTrans.swap_statement_return retval = new RSimpleTrans.swap_statement_return();
        retval.start = input.LT(1);

        List list_lhs=null;
        RSimpleTrans.variable_expression_return rhs = null;

        RuleReturnScope lhs = null;

        String[] adj = {"",""};
        String newLhs = "";

        try {
            // RSimpleTrans.g:1336:5: ( ^( SWAP_OP lhs+= variable_expression rhs= variable_expression ) -> template(lhs=newLhsrhs=$rhs.text) \"<lhs>, <rhs>);\")
            // RSimpleTrans.g:1336:9: ^( SWAP_OP lhs+= variable_expression rhs= variable_expression )
            {
            match(input,SWAP_OP,FOLLOW_SWAP_OP_in_swap_statement9538); if (state.failed) return retval;

            match(input, Token.DOWN, null); if (state.failed) return retval;
            pushFollow(FOLLOW_variable_expression_in_swap_statement9542);
            lhs=variable_expression();

            state._fsp--;
            if (state.failed) return retval;
            if (list_lhs==null) list_lhs=new ArrayList();
            list_lhs.add(lhs.getTemplate());

            pushFollow(FOLLOW_variable_expression_in_swap_statement9546);
            rhs=variable_expression();

            state._fsp--;
            if (state.failed) return retval;

            match(input, Token.UP, null); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

                        newLhs = templatePrepend((StringTemplate)list_lhs.get(0), "Swap(");
                      
            }


            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 1340:9: -> template(lhs=newLhsrhs=$rhs.text) \"<lhs>, <rhs>);\"
              {
                  retval.st = new StringTemplate(templateLib, "<lhs>, <rhs>);",
                new STAttrMap().put("lhs", newLhs).put("rhs", (rhs!=null?(input.getTokenStream().toString(
                input.getTreeAdaptor().getTokenStartIndex(rhs.start),
                input.getTreeAdaptor().getTokenStopIndex(rhs.start))):null)));
              }

            }
            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "swap_statement"

    public static class confirm_statement_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "confirm_statement"
    // RSimpleTrans.g:1345:1: confirm_statement : ^( CONFIRM math_expression ) ;
    public final RSimpleTrans.confirm_statement_return confirm_statement() throws RecognitionException {
        RSimpleTrans.confirm_statement_return retval = new RSimpleTrans.confirm_statement_return();
        retval.start = input.LT(1);

        try {
            // RSimpleTrans.g:1346:5: ( ^( CONFIRM math_expression ) )
            // RSimpleTrans.g:1346:9: ^( CONFIRM math_expression )
            {
            match(input,CONFIRM,FOLLOW_CONFIRM_in_confirm_statement9605); if (state.failed) return retval;

            match(input, Token.DOWN, null); if (state.failed) return retval;
            pushFollow(FOLLOW_math_expression_in_confirm_statement9607);
            math_expression();

            state._fsp--;
            if (state.failed) return retval;

            match(input, Token.UP, null); if (state.failed) return retval;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "confirm_statement"

    public static class assume_statement_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "assume_statement"
    // RSimpleTrans.g:1351:1: assume_statement : ^( ASSUME math_expression ) ;
    public final RSimpleTrans.assume_statement_return assume_statement() throws RecognitionException {
        RSimpleTrans.assume_statement_return retval = new RSimpleTrans.assume_statement_return();
        retval.start = input.LT(1);

        try {
            // RSimpleTrans.g:1352:5: ( ^( ASSUME math_expression ) )
            // RSimpleTrans.g:1352:9: ^( ASSUME math_expression )
            {
            match(input,ASSUME,FOLLOW_ASSUME_in_assume_statement9634); if (state.failed) return retval;

            match(input, Token.DOWN, null); if (state.failed) return retval;
            pushFollow(FOLLOW_math_expression_in_assume_statement9636);
            math_expression();

            state._fsp--;
            if (state.failed) return retval;

            match(input, Token.UP, null); if (state.failed) return retval;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "assume_statement"

    public static class while_loop_statement_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "while_loop_statement"
    // RSimpleTrans.g:1357:1: while_loop_statement : ^( WHILE c+= condition (cc+= changing_clause )? (mc+= maintaining_clause )? (dc+= decreasing_clause )? ss+= statement_sequence ) -> template(ln=adj[0]in=adj[1]c=$ccc=$ccmc=$mcdc=$dcss=$ss) \"<ln><in>while(<c>){<cc><mc><dc><ss><\\n><in>}\";
    public final RSimpleTrans.while_loop_statement_return while_loop_statement() throws RecognitionException {
        RSimpleTrans.while_loop_statement_return retval = new RSimpleTrans.while_loop_statement_return();
        retval.start = input.LT(1);

        CommonTree WHILE27=null;
        List list_c=null;
        List list_cc=null;
        List list_mc=null;
        List list_dc=null;
        List list_ss=null;
        RuleReturnScope c = null;
        RuleReturnScope cc = null;
        RuleReturnScope mc = null;
        RuleReturnScope dc = null;
        RuleReturnScope ss = null;

        String[] adj = {"",""};

        try {
            // RSimpleTrans.g:1361:5: ( ^( WHILE c+= condition (cc+= changing_clause )? (mc+= maintaining_clause )? (dc+= decreasing_clause )? ss+= statement_sequence ) -> template(ln=adj[0]in=adj[1]c=$ccc=$ccmc=$mcdc=$dcss=$ss) \"<ln><in>while(<c>){<cc><mc><dc><ss><\\n><in>}\")
            // RSimpleTrans.g:1361:9: ^( WHILE c+= condition (cc+= changing_clause )? (mc+= maintaining_clause )? (dc+= decreasing_clause )? ss+= statement_sequence )
            {
            WHILE27=(CommonTree)match(input,WHILE,FOLLOW_WHILE_in_while_loop_statement9663); if (state.failed) return retval;

            if ( state.backtracking==0 ) {
              adj = adjustLine(WHILE27);
            }

            match(input, Token.DOWN, null); if (state.failed) return retval;
            pushFollow(FOLLOW_condition_in_while_loop_statement9669);
            c=condition();

            state._fsp--;
            if (state.failed) return retval;
            if (list_c==null) list_c=new ArrayList();
            list_c.add(c.getTemplate());

            if ( state.backtracking==0 ) {
              incIndent();
            }
            // RSimpleTrans.g:1362:11: (cc+= changing_clause )?
            int alt174=2;
            int LA174_0 = input.LA(1);

            if ( (LA174_0==CHANGING) ) {
                alt174=1;
            }
            switch (alt174) {
                case 1 :
                    // RSimpleTrans.g:1362:11: cc+= changing_clause
                    {
                    pushFollow(FOLLOW_changing_clause_in_while_loop_statement9683);
                    cc=changing_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_cc==null) list_cc=new ArrayList();
                    list_cc.add(cc.getTemplate());


                    }
                    break;

            }

            // RSimpleTrans.g:1363:11: (mc+= maintaining_clause )?
            int alt175=2;
            int LA175_0 = input.LA(1);

            if ( (LA175_0==MAINTAINING) ) {
                alt175=1;
            }
            switch (alt175) {
                case 1 :
                    // RSimpleTrans.g:1363:11: mc+= maintaining_clause
                    {
                    pushFollow(FOLLOW_maintaining_clause_in_while_loop_statement9700);
                    mc=maintaining_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_mc==null) list_mc=new ArrayList();
                    list_mc.add(mc.getTemplate());


                    }
                    break;

            }

            // RSimpleTrans.g:1364:11: (dc+= decreasing_clause )?
            int alt176=2;
            int LA176_0 = input.LA(1);

            if ( (LA176_0==DECREASING) ) {
                alt176=1;
            }
            switch (alt176) {
                case 1 :
                    // RSimpleTrans.g:1364:11: dc+= decreasing_clause
                    {
                    pushFollow(FOLLOW_decreasing_clause_in_while_loop_statement9713);
                    dc=decreasing_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_dc==null) list_dc=new ArrayList();
                    list_dc.add(dc.getTemplate());


                    }
                    break;

            }

            pushFollow(FOLLOW_statement_sequence_in_while_loop_statement9726);
            ss=statement_sequence();

            state._fsp--;
            if (state.failed) return retval;
            if (list_ss==null) list_ss=new ArrayList();
            list_ss.add(ss.getTemplate());


            match(input, Token.UP, null); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              decIndent();incLine();
            }


            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 1366:10: -> template(ln=adj[0]in=adj[1]c=$ccc=$ccmc=$mcdc=$dcss=$ss) \"<ln><in>while(<c>){<cc><mc><dc><ss><\\n><in>}\"
              {
                  retval.st = new StringTemplate(templateLib, "<ln><in>while(<c>){<cc><mc><dc><ss><\\n><in>}",
                new STAttrMap().put("ln", adj[0]).put("in", adj[1]).put("c", list_c).put("cc", list_cc).put("mc", list_mc).put("dc", list_dc).put("ss", list_ss));
              }

            }
            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "while_loop_statement"

    public static class maintaining_clause_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "maintaining_clause"
    // RSimpleTrans.g:1376:1: maintaining_clause : ^( MAINTAINING me= math_expression ) -> template(ln=adj[0]in=adj[1]m=$MAINTAINING.textme=$me.text) \"<ln><in>/*@ <m> <me> */\";
    public final RSimpleTrans.maintaining_clause_return maintaining_clause() throws RecognitionException {
        RSimpleTrans.maintaining_clause_return retval = new RSimpleTrans.maintaining_clause_return();
        retval.start = input.LT(1);

        CommonTree MAINTAINING28=null;
        RSimpleTrans.math_expression_return me = null;



        String[] adj = {"",""};

        try {
            // RSimpleTrans.g:1380:5: ( ^( MAINTAINING me= math_expression ) -> template(ln=adj[0]in=adj[1]m=$MAINTAINING.textme=$me.text) \"<ln><in>/*@ <m> <me> */\")
            // RSimpleTrans.g:1380:9: ^( MAINTAINING me= math_expression )
            {
            MAINTAINING28=(CommonTree)match(input,MAINTAINING,FOLLOW_MAINTAINING_in_maintaining_clause9938); if (state.failed) return retval;

            if ( state.backtracking==0 ) {
              adj = adjustLine(MAINTAINING28);
            }

            match(input, Token.DOWN, null); if (state.failed) return retval;
            pushFollow(FOLLOW_math_expression_in_maintaining_clause9944);
            me=math_expression();

            state._fsp--;
            if (state.failed) return retval;

            match(input, Token.UP, null); if (state.failed) return retval;


            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 1381:9: -> template(ln=adj[0]in=adj[1]m=$MAINTAINING.textme=$me.text) \"<ln><in>/*@ <m> <me> */\"
              {
                  retval.st = new StringTemplate(templateLib, "<ln><in>/*@ <m> <me> */",
                new STAttrMap().put("ln", adj[0]).put("in", adj[1]).put("m", (MAINTAINING28!=null?MAINTAINING28.getText():null)).put("me", (me!=null?(input.getTokenStream().toString(
                input.getTreeAdaptor().getTokenStartIndex(me.start),
                input.getTreeAdaptor().getTokenStopIndex(me.start))):null)));
              }

            }
            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "maintaining_clause"

    public static class decreasing_clause_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "decreasing_clause"
    // RSimpleTrans.g:1388:1: decreasing_clause : ^( DECREASING ae= adding_expression ) -> template(ln=adj[0]in=adj[1]d=$DECREASING.textae=$ae.text) \"<ln><in>/*@ <d> <ae> */\";
    public final RSimpleTrans.decreasing_clause_return decreasing_clause() throws RecognitionException {
        RSimpleTrans.decreasing_clause_return retval = new RSimpleTrans.decreasing_clause_return();
        retval.start = input.LT(1);

        CommonTree DECREASING29=null;
        RSimpleTrans.adding_expression_return ae = null;



        String[] adj = {"",""};

        try {
            // RSimpleTrans.g:1392:5: ( ^( DECREASING ae= adding_expression ) -> template(ln=adj[0]in=adj[1]d=$DECREASING.textae=$ae.text) \"<ln><in>/*@ <d> <ae> */\")
            // RSimpleTrans.g:1392:9: ^( DECREASING ae= adding_expression )
            {
            DECREASING29=(CommonTree)match(input,DECREASING,FOLLOW_DECREASING_in_decreasing_clause10059); if (state.failed) return retval;

            if ( state.backtracking==0 ) {
              adj = adjustLine(DECREASING29);
            }

            match(input, Token.DOWN, null); if (state.failed) return retval;
            pushFollow(FOLLOW_adding_expression_in_decreasing_clause10065);
            ae=adding_expression();

            state._fsp--;
            if (state.failed) return retval;

            match(input, Token.UP, null); if (state.failed) return retval;


            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 1393:9: -> template(ln=adj[0]in=adj[1]d=$DECREASING.textae=$ae.text) \"<ln><in>/*@ <d> <ae> */\"
              {
                  retval.st = new StringTemplate(templateLib, "<ln><in>/*@ <d> <ae> */",
                new STAttrMap().put("ln", adj[0]).put("in", adj[1]).put("d", (DECREASING29!=null?DECREASING29.getText():null)).put("ae", (ae!=null?(input.getTokenStream().toString(
                input.getTreeAdaptor().getTokenStartIndex(ae.start),
                input.getTreeAdaptor().getTokenStopIndex(ae.start))):null)));
              }

            }
            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "decreasing_clause"

    public static class changing_clause_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "changing_clause"
    // RSimpleTrans.g:1399:1: changing_clause : ^( CHANGING (ve+= variable_expression )+ ) -> template(ln=adj[0]in=adj[1]c=$CHANGINGve=$ve) \"<ln><in>/*@ <c> <ve; separator=\", \"> */\";
    public final RSimpleTrans.changing_clause_return changing_clause() throws RecognitionException {
        RSimpleTrans.changing_clause_return retval = new RSimpleTrans.changing_clause_return();
        retval.start = input.LT(1);

        CommonTree CHANGING30=null;
        List list_ve=null;
        RuleReturnScope ve = null;

        String[] adj = {"",""};

        try {
            // RSimpleTrans.g:1403:5: ( ^( CHANGING (ve+= variable_expression )+ ) -> template(ln=adj[0]in=adj[1]c=$CHANGINGve=$ve) \"<ln><in>/*@ <c> <ve; separator=\", \"> */\")
            // RSimpleTrans.g:1403:9: ^( CHANGING (ve+= variable_expression )+ )
            {
            CHANGING30=(CommonTree)match(input,CHANGING,FOLLOW_CHANGING_in_changing_clause10172); if (state.failed) return retval;

            if ( state.backtracking==0 ) {
              adj = adjustLine(CHANGING30);
            }

            match(input, Token.DOWN, null); if (state.failed) return retval;
            // RSimpleTrans.g:1403:53: (ve+= variable_expression )+
            int cnt177=0;
            loop177:
            do {
                int alt177=2;
                int LA177_0 = input.LA(1);

                if ( (LA177_0==IDENTIFIER||LA177_0==ARRAYFUNCTION||LA177_0==VARDOT) ) {
                    alt177=1;
                }


                switch (alt177) {
            	case 1 :
            	    // RSimpleTrans.g:1403:53: ve+= variable_expression
            	    {
            	    pushFollow(FOLLOW_variable_expression_in_changing_clause10178);
            	    ve=variable_expression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if (list_ve==null) list_ve=new ArrayList();
            	    list_ve.add(ve.getTemplate());


            	    }
            	    break;

            	default :
            	    if ( cnt177 >= 1 ) break loop177;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(177, input);
                        throw eee;
                }
                cnt177++;
            } while (true);


            match(input, Token.UP, null); if (state.failed) return retval;


            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 1404:9: -> template(ln=adj[0]in=adj[1]c=$CHANGINGve=$ve) \"<ln><in>/*@ <c> <ve; separator=\", \"> */\"
              {
                  retval.st = new StringTemplate(templateLib, "<ln><in>/*@ <c> <ve; separator=\", \"> */",
                new STAttrMap().put("ln", adj[0]).put("in", adj[1]).put("c", CHANGING30).put("ve", list_ve));
              }

            }
            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "changing_clause"

    public static class program_type_expression_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "program_type_expression"
    // RSimpleTrans.g:1414:1: program_type_expression : ( ( ^( TYPEX qi+= qualified_ident ) ) -> template(qi=$qi) \"<qi>\" | ^( ARRAY array_range program_type_expression ) );
    public final RSimpleTrans.program_type_expression_return program_type_expression() throws RecognitionException {
        RSimpleTrans.program_type_expression_return retval = new RSimpleTrans.program_type_expression_return();
        retval.start = input.LT(1);

        List list_qi=null;
        RuleReturnScope qi = null;
        try {
            // RSimpleTrans.g:1415:5: ( ( ^( TYPEX qi+= qualified_ident ) ) -> template(qi=$qi) \"<qi>\" | ^( ARRAY array_range program_type_expression ) )
            int alt178=2;
            int LA178_0 = input.LA(1);

            if ( (LA178_0==TYPEX) ) {
                alt178=1;
            }
            else if ( (LA178_0==ARRAY) ) {
                alt178=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 178, 0, input);

                throw nvae;
            }
            switch (alt178) {
                case 1 :
                    // RSimpleTrans.g:1415:9: ( ^( TYPEX qi+= qualified_ident ) )
                    {
                    // RSimpleTrans.g:1415:9: ( ^( TYPEX qi+= qualified_ident ) )
                    // RSimpleTrans.g:1415:13: ^( TYPEX qi+= qualified_ident )
                    {
                    match(input,TYPEX,FOLLOW_TYPEX_in_program_type_expression10289); if (state.failed) return retval;

                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    pushFollow(FOLLOW_qualified_ident_in_program_type_expression10293);
                    qi=qualified_ident();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_qi==null) list_qi=new ArrayList();
                    list_qi.add(qi.getTemplate());


                    match(input, Token.UP, null); if (state.failed) return retval;

                    }



                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1416:13: -> template(qi=$qi) \"<qi>\"
                      {
                          retval.st = new StringTemplate(templateLib, "<qi>",
                        new STAttrMap().put("qi", list_qi));
                      }

                    }
                    }
                    break;
                case 2 :
                    // RSimpleTrans.g:1417:13: ^( ARRAY array_range program_type_expression )
                    {
                    match(input,ARRAY,FOLLOW_ARRAY_in_program_type_expression10332); if (state.failed) return retval;

                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    pushFollow(FOLLOW_array_range_in_program_type_expression10334);
                    array_range();

                    state._fsp--;
                    if (state.failed) return retval;
                    pushFollow(FOLLOW_program_type_expression_in_program_type_expression10336);
                    program_type_expression();

                    state._fsp--;
                    if (state.failed) return retval;

                    match(input, Token.UP, null); if (state.failed) return retval;

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "program_type_expression"

    public static class structural_program_type_expression_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "structural_program_type_expression"
    // RSimpleTrans.g:1420:1: structural_program_type_expression : ( ^( RECORD (rvdg+= record_variable_declaration_group )+ ) -> template(ln=adj[0]in=adj[1]rvdg=$rvdg) \"<ln><in><rvdg><\\n><in>\" | pte= program_type_expression -> template(pte=$pte.text) \"<pte>\");
    public final RSimpleTrans.structural_program_type_expression_return structural_program_type_expression() throws RecognitionException {
        RSimpleTrans.structural_program_type_expression_return retval = new RSimpleTrans.structural_program_type_expression_return();
        retval.start = input.LT(1);

        CommonTree RECORD31=null;
        List list_rvdg=null;
        RSimpleTrans.program_type_expression_return pte = null;

        RuleReturnScope rvdg = null;

        String[] adj = {"",""};

        try {
            // RSimpleTrans.g:1424:5: ( ^( RECORD (rvdg+= record_variable_declaration_group )+ ) -> template(ln=adj[0]in=adj[1]rvdg=$rvdg) \"<ln><in><rvdg><\\n><in>\" | pte= program_type_expression -> template(pte=$pte.text) \"<pte>\")
            int alt180=2;
            int LA180_0 = input.LA(1);

            if ( (LA180_0==RECORD) ) {
                alt180=1;
            }
            else if ( (LA180_0==ARRAY||LA180_0==TYPEX) ) {
                alt180=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 180, 0, input);

                throw nvae;
            }
            switch (alt180) {
                case 1 :
                    // RSimpleTrans.g:1424:9: ^( RECORD (rvdg+= record_variable_declaration_group )+ )
                    {
                    RECORD31=(CommonTree)match(input,RECORD,FOLLOW_RECORD_in_structural_program_type_expression10361); if (state.failed) return retval;

                    if ( state.backtracking==0 ) {
                      adj = adjustLine(RECORD31);incIndent();
                    }

                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    // RSimpleTrans.g:1425:9: (rvdg+= record_variable_declaration_group )+
                    int cnt179=0;
                    loop179:
                    do {
                        int alt179=2;
                        int LA179_0 = input.LA(1);

                        if ( (LA179_0==VAR) ) {
                            alt179=1;
                        }


                        switch (alt179) {
                    	case 1 :
                    	    // RSimpleTrans.g:1425:10: rvdg+= record_variable_declaration_group
                    	    {
                    	    pushFollow(FOLLOW_record_variable_declaration_group_in_structural_program_type_expression10377);
                    	    rvdg=record_variable_declaration_group();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if (list_rvdg==null) list_rvdg=new ArrayList();
                    	    list_rvdg.add(rvdg.getTemplate());


                    	    }
                    	    break;

                    	default :
                    	    if ( cnt179 >= 1 ) break loop179;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(179, input);
                                throw eee;
                        }
                        cnt179++;
                    } while (true);


                    match(input, Token.UP, null); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      decIndent();incLine();
                    }


                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1426:9: -> template(ln=adj[0]in=adj[1]rvdg=$rvdg) \"<ln><in><rvdg><\\n><in>\"
                      {
                          retval.st = new StringTemplate(templateLib, "<ln><in><rvdg><\\n><in>",
                        new STAttrMap().put("ln", adj[0]).put("in", adj[1]).put("rvdg", list_rvdg));
                      }

                    }
                    }
                    break;
                case 2 :
                    // RSimpleTrans.g:1429:9: pte= program_type_expression
                    {
                    pushFollow(FOLLOW_program_type_expression_in_structural_program_type_expression10451);
                    pte=program_type_expression();

                    state._fsp--;
                    if (state.failed) return retval;


                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1429:37: -> template(pte=$pte.text) \"<pte>\"
                      {
                          retval.st = new StringTemplate(templateLib, "<pte>",
                        new STAttrMap().put("pte", (pte!=null?(input.getTokenStream().toString(
                        input.getTreeAdaptor().getTokenStartIndex(pte.start),
                        input.getTreeAdaptor().getTokenStopIndex(pte.start))):null)));
                      }

                    }
                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "structural_program_type_expression"

    public static class record_variable_declaration_group_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "record_variable_declaration_group"
    // RSimpleTrans.g:1432:1: record_variable_declaration_group : ^( VAR vil+= variable_id_list type+= program_type_expression ) -> template(ln=adj[0]in=adj[1]vil=$viltype=$type) \"<ln><in> public <type> <vil>;\";
    public final RSimpleTrans.record_variable_declaration_group_return record_variable_declaration_group() throws RecognitionException {
        RSimpleTrans.record_variable_declaration_group_return retval = new RSimpleTrans.record_variable_declaration_group_return();
        retval.start = input.LT(1);

        CommonTree VAR32=null;
        List list_vil=null;
        List list_type=null;
        RuleReturnScope vil = null;
        RuleReturnScope type = null;

        String[] adj = {"",""};

        try {
            // RSimpleTrans.g:1436:5: ( ^( VAR vil+= variable_id_list type+= program_type_expression ) -> template(ln=adj[0]in=adj[1]vil=$viltype=$type) \"<ln><in> public <type> <vil>;\")
            // RSimpleTrans.g:1436:9: ^( VAR vil+= variable_id_list type+= program_type_expression )
            {
            VAR32=(CommonTree)match(input,VAR,FOLLOW_VAR_in_record_variable_declaration_group10485); if (state.failed) return retval;

            if ( state.backtracking==0 ) {
              adj = adjustLine(VAR32);
            }

            match(input, Token.DOWN, null); if (state.failed) return retval;
            pushFollow(FOLLOW_variable_id_list_in_record_variable_declaration_group10491);
            vil=variable_id_list();

            state._fsp--;
            if (state.failed) return retval;
            if (list_vil==null) list_vil=new ArrayList();
            list_vil.add(vil.getTemplate());

            pushFollow(FOLLOW_program_type_expression_in_record_variable_declaration_group10495);
            type=program_type_expression();

            state._fsp--;
            if (state.failed) return retval;
            if (list_type==null) list_type=new ArrayList();
            list_type.add(type.getTemplate());


            match(input, Token.UP, null); if (state.failed) return retval;


            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 1437:9: -> template(ln=adj[0]in=adj[1]vil=$viltype=$type) \"<ln><in> public <type> <vil>;\"
              {
                  retval.st = new StringTemplate(templateLib, "<ln><in> public <type> <vil>;",
                new STAttrMap().put("ln", adj[0]).put("in", adj[1]).put("vil", list_vil).put("type", list_type));
              }

            }
            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "record_variable_declaration_group"

    public static class record_aux_variable_declaration_group_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "record_aux_variable_declaration_group"
    // RSimpleTrans.g:1441:1: record_aux_variable_declaration_group : ^( AUX_VAR variable_id_list program_type_expression ) ;
    public final RSimpleTrans.record_aux_variable_declaration_group_return record_aux_variable_declaration_group() throws RecognitionException {
        RSimpleTrans.record_aux_variable_declaration_group_return retval = new RSimpleTrans.record_aux_variable_declaration_group_return();
        retval.start = input.LT(1);

        try {
            // RSimpleTrans.g:1442:5: ( ^( AUX_VAR variable_id_list program_type_expression ) )
            // RSimpleTrans.g:1442:9: ^( AUX_VAR variable_id_list program_type_expression )
            {
            match(input,AUX_VAR,FOLLOW_AUX_VAR_in_record_aux_variable_declaration_group10559); if (state.failed) return retval;

            match(input, Token.DOWN, null); if (state.failed) return retval;
            pushFollow(FOLLOW_variable_id_list_in_record_aux_variable_declaration_group10561);
            variable_id_list();

            state._fsp--;
            if (state.failed) return retval;
            pushFollow(FOLLOW_program_type_expression_in_record_aux_variable_declaration_group10563);
            program_type_expression();

            state._fsp--;
            if (state.failed) return retval;

            match(input, Token.UP, null); if (state.failed) return retval;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "record_aux_variable_declaration_group"

    public static class array_range_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "array_range"
    // RSimpleTrans.g:1445:1: array_range : ^( RANGE program_expression program_expression ) ;
    public final RSimpleTrans.array_range_return array_range() throws RecognitionException {
        RSimpleTrans.array_range_return retval = new RSimpleTrans.array_range_return();
        retval.start = input.LT(1);

        try {
            // RSimpleTrans.g:1446:5: ( ^( RANGE program_expression program_expression ) )
            // RSimpleTrans.g:1446:9: ^( RANGE program_expression program_expression )
            {
            match(input,RANGE,FOLLOW_RANGE_in_array_range10584); if (state.failed) return retval;

            match(input, Token.DOWN, null); if (state.failed) return retval;
            pushFollow(FOLLOW_program_expression_in_array_range10586);
            program_expression();

            state._fsp--;
            if (state.failed) return retval;
            pushFollow(FOLLOW_program_expression_in_array_range10588);
            program_expression();

            state._fsp--;
            if (state.failed) return retval;

            match(input, Token.UP, null); if (state.failed) return retval;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "array_range"

    public static class variable_declaration_group_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "variable_declaration_group"
    // RSimpleTrans.g:1449:1: variable_declaration_group : vil+= variable_id_list type+= program_type_expression -> template(vil=$viltype=$type) \"<type> <vil>\";
    public final RSimpleTrans.variable_declaration_group_return variable_declaration_group() throws RecognitionException {
        RSimpleTrans.variable_declaration_group_return retval = new RSimpleTrans.variable_declaration_group_return();
        retval.start = input.LT(1);

        List list_vil=null;
        List list_type=null;
        RuleReturnScope vil = null;
        RuleReturnScope type = null;



        try {
            // RSimpleTrans.g:1453:5: (vil+= variable_id_list type+= program_type_expression -> template(vil=$viltype=$type) \"<type> <vil>\")
            // RSimpleTrans.g:1453:9: vil+= variable_id_list type+= program_type_expression
            {
            pushFollow(FOLLOW_variable_id_list_in_variable_declaration_group10614);
            vil=variable_id_list();

            state._fsp--;
            if (state.failed) return retval;
            if (list_vil==null) list_vil=new ArrayList();
            list_vil.add(vil.getTemplate());

            pushFollow(FOLLOW_program_type_expression_in_variable_declaration_group10619);
            type=program_type_expression();

            state._fsp--;
            if (state.failed) return retval;
            if (list_type==null) list_type=new ArrayList();
            list_type.add(type.getTemplate());



            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 1454:9: -> template(vil=$viltype=$type) \"<type> <vil>\"
              {
                  retval.st = new StringTemplate(templateLib, "<type> <vil>",
                new STAttrMap().put("vil", list_vil).put("type", list_type));
              }

            }
            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "variable_declaration_group"

    public static class aux_variable_declaration_group_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "aux_variable_declaration_group"
    // RSimpleTrans.g:1457:1: aux_variable_declaration_group : vil+= variable_id_list type+= program_type_expression -> template(vil=$viltype=$type) \"<type> <vil>\";
    public final RSimpleTrans.aux_variable_declaration_group_return aux_variable_declaration_group() throws RecognitionException {
        RSimpleTrans.aux_variable_declaration_group_return retval = new RSimpleTrans.aux_variable_declaration_group_return();
        retval.start = input.LT(1);

        List list_vil=null;
        List list_type=null;
        RuleReturnScope vil = null;
        RuleReturnScope type = null;
        try {
            // RSimpleTrans.g:1458:5: (vil+= variable_id_list type+= program_type_expression -> template(vil=$viltype=$type) \"<type> <vil>\")
            // RSimpleTrans.g:1458:9: vil+= variable_id_list type+= program_type_expression
            {
            pushFollow(FOLLOW_variable_id_list_in_aux_variable_declaration_group10666);
            vil=variable_id_list();

            state._fsp--;
            if (state.failed) return retval;
            if (list_vil==null) list_vil=new ArrayList();
            list_vil.add(vil.getTemplate());

            pushFollow(FOLLOW_program_type_expression_in_aux_variable_declaration_group10671);
            type=program_type_expression();

            state._fsp--;
            if (state.failed) return retval;
            if (list_type==null) list_type=new ArrayList();
            list_type.add(type.getTemplate());



            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 1459:9: -> template(vil=$viltype=$type) \"<type> <vil>\"
              {
                  retval.st = new StringTemplate(templateLib, "<type> <vil>",
                new STAttrMap().put("vil", list_vil).put("type", list_type));
              }

            }
            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "aux_variable_declaration_group"

    public static class variable_id_list_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "variable_id_list"
    // RSimpleTrans.g:1462:1: variable_id_list : (id+= ident )+ -> template(id=$id) \"<id; separator=\", \">\";
    public final RSimpleTrans.variable_id_list_return variable_id_list() throws RecognitionException {
        RSimpleTrans.variable_id_list_return retval = new RSimpleTrans.variable_id_list_return();
        retval.start = input.LT(1);

        List list_id=null;
        RuleReturnScope id = null;
        try {
            // RSimpleTrans.g:1463:5: ( (id+= ident )+ -> template(id=$id) \"<id; separator=\", \">\")
            // RSimpleTrans.g:1463:9: (id+= ident )+
            {
            // RSimpleTrans.g:1463:11: (id+= ident )+
            int cnt181=0;
            loop181:
            do {
                int alt181=2;
                int LA181_0 = input.LA(1);

                if ( (LA181_0==IDENTIFIER) ) {
                    int LA181_2 = input.LA(2);

                    if ( (LA181_2==ARRAY||LA181_2==BOOLEAN||LA181_2==CARTPROD||LA181_2==SSET||LA181_2==TIMES||LA181_2==IDENTIFIER||LA181_2==EXPR||LA181_2==FUNCTION||LA181_2==TYPEX||LA181_2==POWERSET) ) {
                        alt181=1;
                    }


                }


                switch (alt181) {
            	case 1 :
            	    // RSimpleTrans.g:1463:11: id+= ident
            	    {
            	    pushFollow(FOLLOW_ident_in_variable_id_list10714);
            	    id=ident();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if (list_id==null) list_id=new ArrayList();
            	    list_id.add(id.getTemplate());


            	    }
            	    break;

            	default :
            	    if ( cnt181 >= 1 ) break loop181;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(181, input);
                        throw eee;
                }
                cnt181++;
            } while (true);



            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 1464:9: -> template(id=$id) \"<id; separator=\", \">\"
              {
                  retval.st = new StringTemplate(templateLib, "<id; separator=\", \">",
                new STAttrMap().put("id", list_id));
              }

            }
            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "variable_id_list"

    public static class math_type_expression_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "math_type_expression"
    // RSimpleTrans.g:1471:1: math_type_expression : ^( TYPEX ( function_type_expression )? ) ;
    public final RSimpleTrans.math_type_expression_return math_type_expression() throws RecognitionException {
        RSimpleTrans.math_type_expression_return retval = new RSimpleTrans.math_type_expression_return();
        retval.start = input.LT(1);

        try {
            // RSimpleTrans.g:1472:5: ( ^( TYPEX ( function_type_expression )? ) )
            // RSimpleTrans.g:1472:9: ^( TYPEX ( function_type_expression )? )
            {
            match(input,TYPEX,FOLLOW_TYPEX_in_math_type_expression10757); if (state.failed) return retval;

            if ( input.LA(1)==Token.DOWN ) {
                match(input, Token.DOWN, null); if (state.failed) return retval;
                // RSimpleTrans.g:1472:17: ( function_type_expression )?
                int alt182=2;
                int LA182_0 = input.LA(1);

                if ( (LA182_0==BOOLEAN||LA182_0==CARTPROD||LA182_0==SSET||LA182_0==TIMES||LA182_0==IDENTIFIER||LA182_0==FUNCARROW||LA182_0==FUNCTION||LA182_0==TYPEX||LA182_0==POWERSET) ) {
                    alt182=1;
                }
                switch (alt182) {
                    case 1 :
                        // RSimpleTrans.g:1472:17: function_type_expression
                        {
                        pushFollow(FOLLOW_function_type_expression_in_math_type_expression10759);
                        function_type_expression();

                        state._fsp--;
                        if (state.failed) return retval;

                        }
                        break;

                }


                match(input, Token.UP, null); if (state.failed) return retval;
            }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "math_type_expression"

    public static class function_type_expression_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "function_type_expression"
    // RSimpleTrans.g:1476:1: function_type_expression : ( structural_math_type_expression | ^( FUNCARROW structural_math_type_expression ( structural_math_type_expression )* ) );
    public final RSimpleTrans.function_type_expression_return function_type_expression() throws RecognitionException {
        RSimpleTrans.function_type_expression_return retval = new RSimpleTrans.function_type_expression_return();
        retval.start = input.LT(1);

        try {
            // RSimpleTrans.g:1477:5: ( structural_math_type_expression | ^( FUNCARROW structural_math_type_expression ( structural_math_type_expression )* ) )
            int alt184=2;
            int LA184_0 = input.LA(1);

            if ( (LA184_0==BOOLEAN||LA184_0==CARTPROD||LA184_0==SSET||LA184_0==TIMES||LA184_0==IDENTIFIER||LA184_0==FUNCTION||LA184_0==TYPEX||LA184_0==POWERSET) ) {
                alt184=1;
            }
            else if ( (LA184_0==FUNCARROW) ) {
                alt184=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 184, 0, input);

                throw nvae;
            }
            switch (alt184) {
                case 1 :
                    // RSimpleTrans.g:1477:9: structural_math_type_expression
                    {
                    pushFollow(FOLLOW_structural_math_type_expression_in_function_type_expression10789);
                    structural_math_type_expression();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // RSimpleTrans.g:1478:9: ^( FUNCARROW structural_math_type_expression ( structural_math_type_expression )* )
                    {
                    match(input,FUNCARROW,FOLLOW_FUNCARROW_in_function_type_expression10800); if (state.failed) return retval;

                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    pushFollow(FOLLOW_structural_math_type_expression_in_function_type_expression10802);
                    structural_math_type_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    // RSimpleTrans.g:1478:53: ( structural_math_type_expression )*
                    loop183:
                    do {
                        int alt183=2;
                        int LA183_0 = input.LA(1);

                        if ( (LA183_0==BOOLEAN||LA183_0==CARTPROD||LA183_0==SSET||LA183_0==TIMES||LA183_0==IDENTIFIER||LA183_0==FUNCTION||LA183_0==TYPEX||LA183_0==POWERSET) ) {
                            alt183=1;
                        }


                        switch (alt183) {
                    	case 1 :
                    	    // RSimpleTrans.g:1478:54: structural_math_type_expression
                    	    {
                    	    pushFollow(FOLLOW_structural_math_type_expression_in_function_type_expression10805);
                    	    structural_math_type_expression();

                    	    state._fsp--;
                    	    if (state.failed) return retval;

                    	    }
                    	    break;

                    	default :
                    	    break loop183;
                        }
                    } while (true);


                    match(input, Token.UP, null); if (state.failed) return retval;

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "function_type_expression"

    public static class structural_math_type_expression_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "structural_math_type_expression"
    // RSimpleTrans.g:1481:1: structural_math_type_expression : ( ^( CARTPROD ( cartprod_variable_declaration_group )+ ) | product_type_expression );
    public final RSimpleTrans.structural_math_type_expression_return structural_math_type_expression() throws RecognitionException {
        RSimpleTrans.structural_math_type_expression_return retval = new RSimpleTrans.structural_math_type_expression_return();
        retval.start = input.LT(1);

        try {
            // RSimpleTrans.g:1482:5: ( ^( CARTPROD ( cartprod_variable_declaration_group )+ ) | product_type_expression )
            int alt186=2;
            int LA186_0 = input.LA(1);

            if ( (LA186_0==CARTPROD) ) {
                alt186=1;
            }
            else if ( (LA186_0==BOOLEAN||LA186_0==SSET||LA186_0==TIMES||LA186_0==IDENTIFIER||LA186_0==FUNCTION||LA186_0==TYPEX||LA186_0==POWERSET) ) {
                alt186=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 186, 0, input);

                throw nvae;
            }
            switch (alt186) {
                case 1 :
                    // RSimpleTrans.g:1482:9: ^( CARTPROD ( cartprod_variable_declaration_group )+ )
                    {
                    match(input,CARTPROD,FOLLOW_CARTPROD_in_structural_math_type_expression10832); if (state.failed) return retval;

                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    // RSimpleTrans.g:1483:9: ( cartprod_variable_declaration_group )+
                    int cnt185=0;
                    loop185:
                    do {
                        int alt185=2;
                        int LA185_0 = input.LA(1);

                        if ( (LA185_0==VAR) ) {
                            alt185=1;
                        }


                        switch (alt185) {
                    	case 1 :
                    	    // RSimpleTrans.g:1483:10: cartprod_variable_declaration_group
                    	    {
                    	    pushFollow(FOLLOW_cartprod_variable_declaration_group_in_structural_math_type_expression10843);
                    	    cartprod_variable_declaration_group();

                    	    state._fsp--;
                    	    if (state.failed) return retval;

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt185 >= 1 ) break loop185;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(185, input);
                                throw eee;
                        }
                        cnt185++;
                    } while (true);


                    match(input, Token.UP, null); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // RSimpleTrans.g:1484:9: product_type_expression
                    {
                    pushFollow(FOLLOW_product_type_expression_in_structural_math_type_expression10857);
                    product_type_expression();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "structural_math_type_expression"

    public static class product_type_expression_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "product_type_expression"
    // RSimpleTrans.g:1487:1: product_type_expression : ( ^( TIMES primitive_type_expression ( primitive_type_expression )* ) | primitive_type_expression );
    public final RSimpleTrans.product_type_expression_return product_type_expression() throws RecognitionException {
        RSimpleTrans.product_type_expression_return retval = new RSimpleTrans.product_type_expression_return();
        retval.start = input.LT(1);

        try {
            // RSimpleTrans.g:1488:5: ( ^( TIMES primitive_type_expression ( primitive_type_expression )* ) | primitive_type_expression )
            int alt188=2;
            int LA188_0 = input.LA(1);

            if ( (LA188_0==TIMES) ) {
                alt188=1;
            }
            else if ( (LA188_0==BOOLEAN||LA188_0==SSET||LA188_0==IDENTIFIER||LA188_0==FUNCTION||LA188_0==TYPEX||LA188_0==POWERSET) ) {
                alt188=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 188, 0, input);

                throw nvae;
            }
            switch (alt188) {
                case 1 :
                    // RSimpleTrans.g:1488:9: ^( TIMES primitive_type_expression ( primitive_type_expression )* )
                    {
                    match(input,TIMES,FOLLOW_TIMES_in_product_type_expression10877); if (state.failed) return retval;

                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    pushFollow(FOLLOW_primitive_type_expression_in_product_type_expression10879);
                    primitive_type_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    // RSimpleTrans.g:1488:43: ( primitive_type_expression )*
                    loop187:
                    do {
                        int alt187=2;
                        int LA187_0 = input.LA(1);

                        if ( (LA187_0==BOOLEAN||LA187_0==SSET||LA187_0==IDENTIFIER||LA187_0==FUNCTION||LA187_0==TYPEX||LA187_0==POWERSET) ) {
                            alt187=1;
                        }


                        switch (alt187) {
                    	case 1 :
                    	    // RSimpleTrans.g:1488:43: primitive_type_expression
                    	    {
                    	    pushFollow(FOLLOW_primitive_type_expression_in_product_type_expression10881);
                    	    primitive_type_expression();

                    	    state._fsp--;
                    	    if (state.failed) return retval;

                    	    }
                    	    break;

                    	default :
                    	    break loop187;
                        }
                    } while (true);


                    match(input, Token.UP, null); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // RSimpleTrans.g:1489:9: primitive_type_expression
                    {
                    pushFollow(FOLLOW_primitive_type_expression_in_product_type_expression10893);
                    primitive_type_expression();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "product_type_expression"

    public static class primitive_type_expression_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "primitive_type_expression"
    // RSimpleTrans.g:1492:1: primitive_type_expression : ( ( SSET )=> SSET | ( BOOLEAN )=> BOOLEAN | ( POWERSET )=> powerset_expression | nested_type_expression | ^( FUNCTION qualified_ident type_expression_argument_list ) | qualified_ident );
    public final RSimpleTrans.primitive_type_expression_return primitive_type_expression() throws RecognitionException {
        RSimpleTrans.primitive_type_expression_return retval = new RSimpleTrans.primitive_type_expression_return();
        retval.start = input.LT(1);

        try {
            // RSimpleTrans.g:1493:5: ( ( SSET )=> SSET | ( BOOLEAN )=> BOOLEAN | ( POWERSET )=> powerset_expression | nested_type_expression | ^( FUNCTION qualified_ident type_expression_argument_list ) | qualified_ident )
            int alt189=6;
            int LA189_0 = input.LA(1);

            if ( (LA189_0==SSET) && (synpred6_RSimpleTrans())) {
                alt189=1;
            }
            else if ( (LA189_0==BOOLEAN) && (synpred7_RSimpleTrans())) {
                alt189=2;
            }
            else if ( (LA189_0==POWERSET) && (synpred8_RSimpleTrans())) {
                alt189=3;
            }
            else if ( (LA189_0==TYPEX) ) {
                alt189=4;
            }
            else if ( (LA189_0==FUNCTION) ) {
                alt189=5;
            }
            else if ( (LA189_0==IDENTIFIER) ) {
                alt189=6;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 189, 0, input);

                throw nvae;
            }
            switch (alt189) {
                case 1 :
                    // RSimpleTrans.g:1493:9: ( SSET )=> SSET
                    {
                    match(input,SSET,FOLLOW_SSET_in_primitive_type_expression10918); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // RSimpleTrans.g:1494:9: ( BOOLEAN )=> BOOLEAN
                    {
                    match(input,BOOLEAN,FOLLOW_BOOLEAN_in_primitive_type_expression10934); if (state.failed) return retval;

                    }
                    break;
                case 3 :
                    // RSimpleTrans.g:1495:9: ( POWERSET )=> powerset_expression
                    {
                    pushFollow(FOLLOW_powerset_expression_in_primitive_type_expression10950);
                    powerset_expression();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;
                case 4 :
                    // RSimpleTrans.g:1496:9: nested_type_expression
                    {
                    pushFollow(FOLLOW_nested_type_expression_in_primitive_type_expression10960);
                    nested_type_expression();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;
                case 5 :
                    // RSimpleTrans.g:1497:9: ^( FUNCTION qualified_ident type_expression_argument_list )
                    {
                    match(input,FUNCTION,FOLLOW_FUNCTION_in_primitive_type_expression10971); if (state.failed) return retval;

                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    pushFollow(FOLLOW_qualified_ident_in_primitive_type_expression10973);
                    qualified_ident();

                    state._fsp--;
                    if (state.failed) return retval;
                    pushFollow(FOLLOW_type_expression_argument_list_in_primitive_type_expression10975);
                    type_expression_argument_list();

                    state._fsp--;
                    if (state.failed) return retval;

                    match(input, Token.UP, null); if (state.failed) return retval;

                    }
                    break;
                case 6 :
                    // RSimpleTrans.g:1498:9: qualified_ident
                    {
                    pushFollow(FOLLOW_qualified_ident_in_primitive_type_expression10986);
                    qualified_ident();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "primitive_type_expression"

    public static class powerset_expression_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "powerset_expression"
    // RSimpleTrans.g:1504:1: powerset_expression : ^( POWERSET math_type_expression ) ;
    public final RSimpleTrans.powerset_expression_return powerset_expression() throws RecognitionException {
        RSimpleTrans.powerset_expression_return retval = new RSimpleTrans.powerset_expression_return();
        retval.start = input.LT(1);

        try {
            // RSimpleTrans.g:1505:5: ( ^( POWERSET math_type_expression ) )
            // RSimpleTrans.g:1505:9: ^( POWERSET math_type_expression )
            {
            match(input,POWERSET,FOLLOW_POWERSET_in_powerset_expression11016); if (state.failed) return retval;

            match(input, Token.DOWN, null); if (state.failed) return retval;
            pushFollow(FOLLOW_math_type_expression_in_powerset_expression11018);
            math_type_expression();

            state._fsp--;
            if (state.failed) return retval;

            match(input, Token.UP, null); if (state.failed) return retval;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "powerset_expression"

    public static class nested_type_expression_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "nested_type_expression"
    // RSimpleTrans.g:1508:1: nested_type_expression : type_expression ;
    public final RSimpleTrans.nested_type_expression_return nested_type_expression() throws RecognitionException {
        RSimpleTrans.nested_type_expression_return retval = new RSimpleTrans.nested_type_expression_return();
        retval.start = input.LT(1);

        try {
            // RSimpleTrans.g:1509:5: ( type_expression )
            // RSimpleTrans.g:1509:10: type_expression
            {
            pushFollow(FOLLOW_type_expression_in_nested_type_expression11039);
            type_expression();

            state._fsp--;
            if (state.failed) return retval;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nested_type_expression"

    public static class type_expression_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "type_expression"
    // RSimpleTrans.g:1513:1: type_expression : math_type_expression ;
    public final RSimpleTrans.type_expression_return type_expression() throws RecognitionException {
        RSimpleTrans.type_expression_return retval = new RSimpleTrans.type_expression_return();
        retval.start = input.LT(1);

        try {
            // RSimpleTrans.g:1515:5: ( math_type_expression )
            // RSimpleTrans.g:1515:9: math_type_expression
            {
            pushFollow(FOLLOW_math_type_expression_in_type_expression11073);
            math_type_expression();

            state._fsp--;
            if (state.failed) return retval;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "type_expression"

    public static class type_expression_argument_list_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "type_expression_argument_list"
    // RSimpleTrans.g:1518:1: type_expression_argument_list : ^( PARAMS math_type_expression ( math_type_expression )* ) ;
    public final RSimpleTrans.type_expression_argument_list_return type_expression_argument_list() throws RecognitionException {
        RSimpleTrans.type_expression_argument_list_return retval = new RSimpleTrans.type_expression_argument_list_return();
        retval.start = input.LT(1);

        try {
            // RSimpleTrans.g:1519:5: ( ^( PARAMS math_type_expression ( math_type_expression )* ) )
            // RSimpleTrans.g:1519:9: ^( PARAMS math_type_expression ( math_type_expression )* )
            {
            match(input,PARAMS,FOLLOW_PARAMS_in_type_expression_argument_list11093); if (state.failed) return retval;

            match(input, Token.DOWN, null); if (state.failed) return retval;
            pushFollow(FOLLOW_math_type_expression_in_type_expression_argument_list11095);
            math_type_expression();

            state._fsp--;
            if (state.failed) return retval;
            // RSimpleTrans.g:1519:39: ( math_type_expression )*
            loop190:
            do {
                int alt190=2;
                int LA190_0 = input.LA(1);

                if ( (LA190_0==TYPEX) ) {
                    alt190=1;
                }


                switch (alt190) {
            	case 1 :
            	    // RSimpleTrans.g:1519:39: math_type_expression
            	    {
            	    pushFollow(FOLLOW_math_type_expression_in_type_expression_argument_list11097);
            	    math_type_expression();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }
            	    break;

            	default :
            	    break loop190;
                }
            } while (true);


            match(input, Token.UP, null); if (state.failed) return retval;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "type_expression_argument_list"

    public static class cartprod_variable_declaration_group_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "cartprod_variable_declaration_group"
    // RSimpleTrans.g:1522:1: cartprod_variable_declaration_group : ^( VAR math_variable_declaration_group ) ;
    public final RSimpleTrans.cartprod_variable_declaration_group_return cartprod_variable_declaration_group() throws RecognitionException {
        RSimpleTrans.cartprod_variable_declaration_group_return retval = new RSimpleTrans.cartprod_variable_declaration_group_return();
        retval.start = input.LT(1);

        try {
            // RSimpleTrans.g:1523:5: ( ^( VAR math_variable_declaration_group ) )
            // RSimpleTrans.g:1523:9: ^( VAR math_variable_declaration_group )
            {
            match(input,VAR,FOLLOW_VAR_in_cartprod_variable_declaration_group11119); if (state.failed) return retval;

            match(input, Token.DOWN, null); if (state.failed) return retval;
            pushFollow(FOLLOW_math_variable_declaration_group_in_cartprod_variable_declaration_group11121);
            math_variable_declaration_group();

            state._fsp--;
            if (state.failed) return retval;

            match(input, Token.UP, null); if (state.failed) return retval;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "cartprod_variable_declaration_group"

    public static class structural_math_variable_declaration_group_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "structural_math_variable_declaration_group"
    // RSimpleTrans.g:1526:1: structural_math_variable_declaration_group : variable_id_list structural_math_type_expression ;
    public final RSimpleTrans.structural_math_variable_declaration_group_return structural_math_variable_declaration_group() throws RecognitionException {
        RSimpleTrans.structural_math_variable_declaration_group_return retval = new RSimpleTrans.structural_math_variable_declaration_group_return();
        retval.start = input.LT(1);

        try {
            // RSimpleTrans.g:1527:5: ( variable_id_list structural_math_type_expression )
            // RSimpleTrans.g:1527:9: variable_id_list structural_math_type_expression
            {
            pushFollow(FOLLOW_variable_id_list_in_structural_math_variable_declaration_group11141);
            variable_id_list();

            state._fsp--;
            if (state.failed) return retval;
            pushFollow(FOLLOW_structural_math_type_expression_in_structural_math_variable_declaration_group11144);
            structural_math_type_expression();

            state._fsp--;
            if (state.failed) return retval;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "structural_math_variable_declaration_group"

    public static class math_variable_declaration_group_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "math_variable_declaration_group"
    // RSimpleTrans.g:1530:1: math_variable_declaration_group : variable_id_list math_type_expression ;
    public final RSimpleTrans.math_variable_declaration_group_return math_variable_declaration_group() throws RecognitionException {
        RSimpleTrans.math_variable_declaration_group_return retval = new RSimpleTrans.math_variable_declaration_group_return();
        retval.start = input.LT(1);

        try {
            // RSimpleTrans.g:1531:5: ( variable_id_list math_type_expression )
            // RSimpleTrans.g:1531:9: variable_id_list math_type_expression
            {
            pushFollow(FOLLOW_variable_id_list_in_math_variable_declaration_group11163);
            variable_id_list();

            state._fsp--;
            if (state.failed) return retval;
            pushFollow(FOLLOW_math_type_expression_in_math_variable_declaration_group11166);
            math_type_expression();

            state._fsp--;
            if (state.failed) return retval;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "math_variable_declaration_group"

    public static class math_variable_declaration_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "math_variable_declaration"
    // RSimpleTrans.g:1534:1: math_variable_declaration : ident math_type_expression ;
    public final RSimpleTrans.math_variable_declaration_return math_variable_declaration() throws RecognitionException {
        RSimpleTrans.math_variable_declaration_return retval = new RSimpleTrans.math_variable_declaration_return();
        retval.start = input.LT(1);

        try {
            // RSimpleTrans.g:1535:5: ( ident math_type_expression )
            // RSimpleTrans.g:1535:9: ident math_type_expression
            {
            pushFollow(FOLLOW_ident_in_math_variable_declaration11186);
            ident();

            state._fsp--;
            if (state.failed) return retval;
            pushFollow(FOLLOW_math_type_expression_in_math_variable_declaration11189);
            math_type_expression();

            state._fsp--;
            if (state.failed) return retval;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "math_variable_declaration"

    public static class implicit_type_parameter_group_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "implicit_type_parameter_group"
    // RSimpleTrans.g:1538:1: implicit_type_parameter_group : variable_id_list math_expression ;
    public final RSimpleTrans.implicit_type_parameter_group_return implicit_type_parameter_group() throws RecognitionException {
        RSimpleTrans.implicit_type_parameter_group_return retval = new RSimpleTrans.implicit_type_parameter_group_return();
        retval.start = input.LT(1);

        try {
            // RSimpleTrans.g:1539:5: ( variable_id_list math_expression )
            // RSimpleTrans.g:1539:9: variable_id_list math_expression
            {
            pushFollow(FOLLOW_variable_id_list_in_implicit_type_parameter_group11212);
            variable_id_list();

            state._fsp--;
            if (state.failed) return retval;
            pushFollow(FOLLOW_math_expression_in_implicit_type_parameter_group11215);
            math_expression();

            state._fsp--;
            if (state.failed) return retval;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "implicit_type_parameter_group"

    public static class math_expression_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "math_expression"
    // RSimpleTrans.g:1546:1: math_expression : ( ^( EXPR iterated_construct ) | ^( EXPR quantified_expression ) ) ;
    public final RSimpleTrans.math_expression_return math_expression() throws RecognitionException {
        RSimpleTrans.math_expression_return retval = new RSimpleTrans.math_expression_return();
        retval.start = input.LT(1);

        try {
            // RSimpleTrans.g:1547:5: ( ( ^( EXPR iterated_construct ) | ^( EXPR quantified_expression ) ) )
            // RSimpleTrans.g:1547:9: ( ^( EXPR iterated_construct ) | ^( EXPR quantified_expression ) )
            {
            // RSimpleTrans.g:1547:9: ( ^( EXPR iterated_construct ) | ^( EXPR quantified_expression ) )
            int alt191=2;
            int LA191_0 = input.LA(1);

            if ( (LA191_0==EXPR) ) {
                int LA191_1 = input.LA(2);

                if ( (LA191_1==DOWN) ) {
                    int LA191_2 = input.LA(3);

                    if ( (LA191_2==ITERATION) ) {
                        alt191=1;
                    }
                    else if ( (LA191_2==AND||LA191_2==BOOLEAN||LA191_2==COMPLEMENT||LA191_2==DIV||LA191_2==EXISTS||(LA191_2>=IF && LA191_2<=IFF)||LA191_2==IMPLIES||LA191_2==INTERSECT||(LA191_2>=IN && LA191_2<=SUBSTR)||LA191_2==LAMBDA||LA191_2==MOD||(LA191_2>=NOT && LA191_2<=CAT)||LA191_2==OR||LA191_2==REM||LA191_2==UNION||LA191_2==WITHOUT||LA191_2==IDENTIFIER||LA191_2==DOT||LA191_2==NUMERIC_LITERAL||LA191_2==CHARACTER_LITERAL||LA191_2==LBRACE||LA191_2==DBL_LBRACE||LA191_2==HASH||(LA191_2>=PLUS && LA191_2<=MINUS)||(LA191_2>=MULTIPLY && LA191_2<=GT)||(LA191_2>=BAR && LA191_2<=DBL_BAR)||LA191_2==STRING_LITERAL||LA191_2==FREE_OPERATOR||LA191_2==ANGLE||LA191_2==BETWEEN_EXPR||LA191_2==DBL_ANGLE||LA191_2==EXISTS_UNIQUE||(LA191_2>=FORALL && LA191_2<=FUNCTION)||LA191_2==NESTED||LA191_2==TUPLE||(LA191_2>=QUALNUM && LA191_2<=LOCALVAREXP)||LA191_2==UNARY_FREE_OPERATOR) ) {
                        alt191=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 191, 2, input);

                        throw nvae;
                    }
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 191, 1, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 191, 0, input);

                throw nvae;
            }
            switch (alt191) {
                case 1 :
                    // RSimpleTrans.g:1547:13: ^( EXPR iterated_construct )
                    {
                    match(input,EXPR,FOLLOW_EXPR_in_math_expression11243); if (state.failed) return retval;

                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    pushFollow(FOLLOW_iterated_construct_in_math_expression11245);
                    iterated_construct();

                    state._fsp--;
                    if (state.failed) return retval;

                    match(input, Token.UP, null); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // RSimpleTrans.g:1548:13: ^( EXPR quantified_expression )
                    {
                    match(input,EXPR,FOLLOW_EXPR_in_math_expression11261); if (state.failed) return retval;

                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    pushFollow(FOLLOW_quantified_expression_in_math_expression11263);
                    quantified_expression();

                    state._fsp--;
                    if (state.failed) return retval;

                    match(input, Token.UP, null); if (state.failed) return retval;

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "math_expression"

    public static class quantified_expression_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "quantified_expression"
    // RSimpleTrans.g:1556:1: quantified_expression : ( implies_expression | ^( FORALL math_variable_declaration_group ( where_clause )? quantified_expression ) | ^( EXISTS_UNIQUE math_variable_declaration_group ( where_clause )? quantified_expression ) | ^( EXISTS math_variable_declaration_group ( where_clause )? quantified_expression ) );
    public final RSimpleTrans.quantified_expression_return quantified_expression() throws RecognitionException {
        RSimpleTrans.quantified_expression_return retval = new RSimpleTrans.quantified_expression_return();
        retval.start = input.LT(1);

        try {
            // RSimpleTrans.g:1557:5: ( implies_expression | ^( FORALL math_variable_declaration_group ( where_clause )? quantified_expression ) | ^( EXISTS_UNIQUE math_variable_declaration_group ( where_clause )? quantified_expression ) | ^( EXISTS math_variable_declaration_group ( where_clause )? quantified_expression ) )
            int alt195=4;
            switch ( input.LA(1) ) {
            case AND:
            case BOOLEAN:
            case COMPLEMENT:
            case DIV:
            case IF:
            case IFF:
            case IMPLIES:
            case INTERSECT:
            case IN:
            case NOT_IN:
            case NOT_PROP_SUBSET:
            case NOT_SUBSET:
            case NOT_SUBSTR:
            case PROP_SUBSET:
            case SUBSET:
            case SUBSTR:
            case LAMBDA:
            case MOD:
            case NOT:
            case CAT:
            case OR:
            case REM:
            case UNION:
            case WITHOUT:
            case IDENTIFIER:
            case DOT:
            case NUMERIC_LITERAL:
            case CHARACTER_LITERAL:
            case LBRACE:
            case DBL_LBRACE:
            case HASH:
            case PLUS:
            case MINUS:
            case MULTIPLY:
            case DIVIDE:
            case EXP:
            case RANGE:
            case NOT_EQL:
            case GT_EQL:
            case LT_EQL:
            case EQL:
            case LT:
            case GT:
            case BAR:
            case DBL_BAR:
            case STRING_LITERAL:
            case FREE_OPERATOR:
            case ANGLE:
            case BETWEEN_EXPR:
            case DBL_ANGLE:
            case FUNCTION:
            case NESTED:
            case TUPLE:
            case QUALNUM:
            case LOCALVAREXP:
            case UNARY_FREE_OPERATOR:
                {
                alt195=1;
                }
                break;
            case FORALL:
                {
                alt195=2;
                }
                break;
            case EXISTS_UNIQUE:
                {
                alt195=3;
                }
                break;
            case EXISTS:
                {
                alt195=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 195, 0, input);

                throw nvae;
            }

            switch (alt195) {
                case 1 :
                    // RSimpleTrans.g:1557:9: implies_expression
                    {
                    pushFollow(FOLLOW_implies_expression_in_quantified_expression11297);
                    implies_expression();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // RSimpleTrans.g:1558:9: ^( FORALL math_variable_declaration_group ( where_clause )? quantified_expression )
                    {
                    match(input,FORALL,FOLLOW_FORALL_in_quantified_expression11308); if (state.failed) return retval;

                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    pushFollow(FOLLOW_math_variable_declaration_group_in_quantified_expression11310);
                    math_variable_declaration_group();

                    state._fsp--;
                    if (state.failed) return retval;
                    // RSimpleTrans.g:1559:9: ( where_clause )?
                    int alt192=2;
                    int LA192_0 = input.LA(1);

                    if ( (LA192_0==WHERE) ) {
                        alt192=1;
                    }
                    switch (alt192) {
                        case 1 :
                            // RSimpleTrans.g:1559:9: where_clause
                            {
                            pushFollow(FOLLOW_where_clause_in_quantified_expression11320);
                            where_clause();

                            state._fsp--;
                            if (state.failed) return retval;

                            }
                            break;

                    }

                    pushFollow(FOLLOW_quantified_expression_in_quantified_expression11324);
                    quantified_expression();

                    state._fsp--;
                    if (state.failed) return retval;

                    match(input, Token.UP, null); if (state.failed) return retval;

                    }
                    break;
                case 3 :
                    // RSimpleTrans.g:1560:9: ^( EXISTS_UNIQUE math_variable_declaration_group ( where_clause )? quantified_expression )
                    {
                    match(input,EXISTS_UNIQUE,FOLLOW_EXISTS_UNIQUE_in_quantified_expression11336); if (state.failed) return retval;

                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    pushFollow(FOLLOW_math_variable_declaration_group_in_quantified_expression11338);
                    math_variable_declaration_group();

                    state._fsp--;
                    if (state.failed) return retval;
                    // RSimpleTrans.g:1561:9: ( where_clause )?
                    int alt193=2;
                    int LA193_0 = input.LA(1);

                    if ( (LA193_0==WHERE) ) {
                        alt193=1;
                    }
                    switch (alt193) {
                        case 1 :
                            // RSimpleTrans.g:1561:9: where_clause
                            {
                            pushFollow(FOLLOW_where_clause_in_quantified_expression11348);
                            where_clause();

                            state._fsp--;
                            if (state.failed) return retval;

                            }
                            break;

                    }

                    pushFollow(FOLLOW_quantified_expression_in_quantified_expression11351);
                    quantified_expression();

                    state._fsp--;
                    if (state.failed) return retval;

                    match(input, Token.UP, null); if (state.failed) return retval;

                    }
                    break;
                case 4 :
                    // RSimpleTrans.g:1562:10: ^( EXISTS math_variable_declaration_group ( where_clause )? quantified_expression )
                    {
                    match(input,EXISTS,FOLLOW_EXISTS_in_quantified_expression11364); if (state.failed) return retval;

                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    pushFollow(FOLLOW_math_variable_declaration_group_in_quantified_expression11366);
                    math_variable_declaration_group();

                    state._fsp--;
                    if (state.failed) return retval;
                    // RSimpleTrans.g:1563:9: ( where_clause )?
                    int alt194=2;
                    int LA194_0 = input.LA(1);

                    if ( (LA194_0==WHERE) ) {
                        alt194=1;
                    }
                    switch (alt194) {
                        case 1 :
                            // RSimpleTrans.g:1563:9: where_clause
                            {
                            pushFollow(FOLLOW_where_clause_in_quantified_expression11376);
                            where_clause();

                            state._fsp--;
                            if (state.failed) return retval;

                            }
                            break;

                    }

                    pushFollow(FOLLOW_quantified_expression_in_quantified_expression11379);
                    quantified_expression();

                    state._fsp--;
                    if (state.failed) return retval;

                    match(input, Token.UP, null); if (state.failed) return retval;

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "quantified_expression"

    public static class implies_expression_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "implies_expression"
    // RSimpleTrans.g:1566:1: implies_expression : (exp1= logical_expression | ( ^( IMPLIES logical_expression logical_expression ) | ^( IFF logical_expression logical_expression ) ) | ^( IF logical_expression logical_expression ( logical_expression )? ) );
    public final RSimpleTrans.implies_expression_return implies_expression() throws RecognitionException {
        RSimpleTrans.implies_expression_return retval = new RSimpleTrans.implies_expression_return();
        retval.start = input.LT(1);

        RSimpleTrans.logical_expression_return exp1 = null;


        try {
            // RSimpleTrans.g:1567:5: (exp1= logical_expression | ( ^( IMPLIES logical_expression logical_expression ) | ^( IFF logical_expression logical_expression ) ) | ^( IF logical_expression logical_expression ( logical_expression )? ) )
            int alt198=3;
            switch ( input.LA(1) ) {
            case AND:
            case BOOLEAN:
            case COMPLEMENT:
            case DIV:
            case INTERSECT:
            case IN:
            case NOT_IN:
            case NOT_PROP_SUBSET:
            case NOT_SUBSET:
            case NOT_SUBSTR:
            case PROP_SUBSET:
            case SUBSET:
            case SUBSTR:
            case LAMBDA:
            case MOD:
            case NOT:
            case CAT:
            case OR:
            case REM:
            case UNION:
            case WITHOUT:
            case IDENTIFIER:
            case DOT:
            case NUMERIC_LITERAL:
            case CHARACTER_LITERAL:
            case LBRACE:
            case DBL_LBRACE:
            case HASH:
            case PLUS:
            case MINUS:
            case MULTIPLY:
            case DIVIDE:
            case EXP:
            case RANGE:
            case NOT_EQL:
            case GT_EQL:
            case LT_EQL:
            case EQL:
            case LT:
            case GT:
            case BAR:
            case DBL_BAR:
            case STRING_LITERAL:
            case FREE_OPERATOR:
            case ANGLE:
            case BETWEEN_EXPR:
            case DBL_ANGLE:
            case FUNCTION:
            case NESTED:
            case TUPLE:
            case QUALNUM:
            case LOCALVAREXP:
            case UNARY_FREE_OPERATOR:
                {
                alt198=1;
                }
                break;
            case IFF:
            case IMPLIES:
                {
                alt198=2;
                }
                break;
            case IF:
                {
                alt198=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 198, 0, input);

                throw nvae;
            }

            switch (alt198) {
                case 1 :
                    // RSimpleTrans.g:1567:9: exp1= logical_expression
                    {
                    pushFollow(FOLLOW_logical_expression_in_implies_expression11401);
                    exp1=logical_expression();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // RSimpleTrans.g:1568:9: ( ^( IMPLIES logical_expression logical_expression ) | ^( IFF logical_expression logical_expression ) )
                    {
                    // RSimpleTrans.g:1568:9: ( ^( IMPLIES logical_expression logical_expression ) | ^( IFF logical_expression logical_expression ) )
                    int alt196=2;
                    int LA196_0 = input.LA(1);

                    if ( (LA196_0==IMPLIES) ) {
                        alt196=1;
                    }
                    else if ( (LA196_0==IFF) ) {
                        alt196=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 196, 0, input);

                        throw nvae;
                    }
                    switch (alt196) {
                        case 1 :
                            // RSimpleTrans.g:1568:13: ^( IMPLIES logical_expression logical_expression )
                            {
                            match(input,IMPLIES,FOLLOW_IMPLIES_in_implies_expression11416); if (state.failed) return retval;

                            match(input, Token.DOWN, null); if (state.failed) return retval;
                            pushFollow(FOLLOW_logical_expression_in_implies_expression11418);
                            logical_expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            pushFollow(FOLLOW_logical_expression_in_implies_expression11420);
                            logical_expression();

                            state._fsp--;
                            if (state.failed) return retval;

                            match(input, Token.UP, null); if (state.failed) return retval;

                            }
                            break;
                        case 2 :
                            // RSimpleTrans.g:1569:13: ^( IFF logical_expression logical_expression )
                            {
                            match(input,IFF,FOLLOW_IFF_in_implies_expression11436); if (state.failed) return retval;

                            match(input, Token.DOWN, null); if (state.failed) return retval;
                            pushFollow(FOLLOW_logical_expression_in_implies_expression11438);
                            logical_expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            pushFollow(FOLLOW_logical_expression_in_implies_expression11440);
                            logical_expression();

                            state._fsp--;
                            if (state.failed) return retval;

                            match(input, Token.UP, null); if (state.failed) return retval;

                            }
                            break;

                    }


                    }
                    break;
                case 3 :
                    // RSimpleTrans.g:1571:9: ^( IF logical_expression logical_expression ( logical_expression )? )
                    {
                    match(input,IF,FOLLOW_IF_in_implies_expression11464); if (state.failed) return retval;

                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    pushFollow(FOLLOW_logical_expression_in_implies_expression11466);
                    logical_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    pushFollow(FOLLOW_logical_expression_in_implies_expression11468);
                    logical_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    // RSimpleTrans.g:1572:13: ( logical_expression )?
                    int alt197=2;
                    int LA197_0 = input.LA(1);

                    if ( (LA197_0==AND||LA197_0==BOOLEAN||LA197_0==COMPLEMENT||LA197_0==DIV||LA197_0==INTERSECT||(LA197_0>=IN && LA197_0<=SUBSTR)||LA197_0==LAMBDA||LA197_0==MOD||(LA197_0>=NOT && LA197_0<=CAT)||LA197_0==OR||LA197_0==REM||LA197_0==UNION||LA197_0==WITHOUT||LA197_0==IDENTIFIER||LA197_0==DOT||LA197_0==NUMERIC_LITERAL||LA197_0==CHARACTER_LITERAL||LA197_0==LBRACE||LA197_0==DBL_LBRACE||LA197_0==HASH||(LA197_0>=PLUS && LA197_0<=MINUS)||(LA197_0>=MULTIPLY && LA197_0<=GT)||(LA197_0>=BAR && LA197_0<=DBL_BAR)||LA197_0==STRING_LITERAL||LA197_0==FREE_OPERATOR||LA197_0==ANGLE||LA197_0==BETWEEN_EXPR||LA197_0==DBL_ANGLE||LA197_0==FUNCTION||LA197_0==NESTED||LA197_0==TUPLE||(LA197_0>=QUALNUM && LA197_0<=LOCALVAREXP)||LA197_0==UNARY_FREE_OPERATOR) ) {
                        alt197=1;
                    }
                    switch (alt197) {
                        case 1 :
                            // RSimpleTrans.g:1572:14: logical_expression
                            {
                            pushFollow(FOLLOW_logical_expression_in_implies_expression11483);
                            logical_expression();

                            state._fsp--;
                            if (state.failed) return retval;

                            }
                            break;

                    }


                    match(input, Token.UP, null); if (state.failed) return retval;

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "implies_expression"

    public static class logical_expression_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "logical_expression"
    // RSimpleTrans.g:1576:1: logical_expression : ( relational_expression | ( ^( AND logical_expression relational_expression ) | ^( OR logical_expression relational_expression ) ) );
    public final RSimpleTrans.logical_expression_return logical_expression() throws RecognitionException {
        RSimpleTrans.logical_expression_return retval = new RSimpleTrans.logical_expression_return();
        retval.start = input.LT(1);

        try {
            // RSimpleTrans.g:1577:5: ( relational_expression | ( ^( AND logical_expression relational_expression ) | ^( OR logical_expression relational_expression ) ) )
            int alt200=2;
            int LA200_0 = input.LA(1);

            if ( (LA200_0==BOOLEAN||LA200_0==COMPLEMENT||LA200_0==DIV||LA200_0==INTERSECT||(LA200_0>=IN && LA200_0<=SUBSTR)||LA200_0==LAMBDA||LA200_0==MOD||(LA200_0>=NOT && LA200_0<=CAT)||LA200_0==REM||LA200_0==UNION||LA200_0==WITHOUT||LA200_0==IDENTIFIER||LA200_0==DOT||LA200_0==NUMERIC_LITERAL||LA200_0==CHARACTER_LITERAL||LA200_0==LBRACE||LA200_0==DBL_LBRACE||LA200_0==HASH||(LA200_0>=PLUS && LA200_0<=MINUS)||(LA200_0>=MULTIPLY && LA200_0<=GT)||(LA200_0>=BAR && LA200_0<=DBL_BAR)||LA200_0==STRING_LITERAL||LA200_0==FREE_OPERATOR||LA200_0==ANGLE||LA200_0==BETWEEN_EXPR||LA200_0==DBL_ANGLE||LA200_0==FUNCTION||LA200_0==NESTED||LA200_0==TUPLE||(LA200_0>=QUALNUM && LA200_0<=LOCALVAREXP)||LA200_0==UNARY_FREE_OPERATOR) ) {
                alt200=1;
            }
            else if ( (LA200_0==AND||LA200_0==OR) ) {
                alt200=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 200, 0, input);

                throw nvae;
            }
            switch (alt200) {
                case 1 :
                    // RSimpleTrans.g:1577:9: relational_expression
                    {
                    pushFollow(FOLLOW_relational_expression_in_logical_expression11514);
                    relational_expression();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // RSimpleTrans.g:1578:9: ( ^( AND logical_expression relational_expression ) | ^( OR logical_expression relational_expression ) )
                    {
                    // RSimpleTrans.g:1578:9: ( ^( AND logical_expression relational_expression ) | ^( OR logical_expression relational_expression ) )
                    int alt199=2;
                    int LA199_0 = input.LA(1);

                    if ( (LA199_0==AND) ) {
                        alt199=1;
                    }
                    else if ( (LA199_0==OR) ) {
                        alt199=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 199, 0, input);

                        throw nvae;
                    }
                    switch (alt199) {
                        case 1 :
                            // RSimpleTrans.g:1578:13: ^( AND logical_expression relational_expression )
                            {
                            match(input,AND,FOLLOW_AND_in_logical_expression11529); if (state.failed) return retval;

                            match(input, Token.DOWN, null); if (state.failed) return retval;
                            pushFollow(FOLLOW_logical_expression_in_logical_expression11531);
                            logical_expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            pushFollow(FOLLOW_relational_expression_in_logical_expression11533);
                            relational_expression();

                            state._fsp--;
                            if (state.failed) return retval;

                            match(input, Token.UP, null); if (state.failed) return retval;

                            }
                            break;
                        case 2 :
                            // RSimpleTrans.g:1579:13: ^( OR logical_expression relational_expression )
                            {
                            match(input,OR,FOLLOW_OR_in_logical_expression11549); if (state.failed) return retval;

                            match(input, Token.DOWN, null); if (state.failed) return retval;
                            pushFollow(FOLLOW_logical_expression_in_logical_expression11551);
                            logical_expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            pushFollow(FOLLOW_relational_expression_in_logical_expression11553);
                            relational_expression();

                            state._fsp--;
                            if (state.failed) return retval;

                            match(input, Token.UP, null); if (state.failed) return retval;

                            }
                            break;

                    }


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "logical_expression"

    public static class relational_expression_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "relational_expression"
    // RSimpleTrans.g:1583:1: relational_expression : ( infix_expression | between_expression | ^( ( EQL | NOT_EQL ) infix_expression infix_expression ) | ^( ( LT | LT_EQL | GT | GT_EQL | SUBSET | NOT_SUBSET | PROP_SUBSET | NOT_PROP_SUBSET | SUBSTR | NOT_SUBSTR ) infix_expression infix_expression ) | ^( ( IN | NOT_IN ) infix_expression infix_expression ) );
    public final RSimpleTrans.relational_expression_return relational_expression() throws RecognitionException {
        RSimpleTrans.relational_expression_return retval = new RSimpleTrans.relational_expression_return();
        retval.start = input.LT(1);

        try {
            // RSimpleTrans.g:1584:5: ( infix_expression | between_expression | ^( ( EQL | NOT_EQL ) infix_expression infix_expression ) | ^( ( LT | LT_EQL | GT | GT_EQL | SUBSET | NOT_SUBSET | PROP_SUBSET | NOT_PROP_SUBSET | SUBSTR | NOT_SUBSTR ) infix_expression infix_expression ) | ^( ( IN | NOT_IN ) infix_expression infix_expression ) )
            int alt201=5;
            switch ( input.LA(1) ) {
            case BOOLEAN:
            case COMPLEMENT:
            case DIV:
            case INTERSECT:
            case LAMBDA:
            case MOD:
            case NOT:
            case CAT:
            case REM:
            case UNION:
            case WITHOUT:
            case IDENTIFIER:
            case DOT:
            case NUMERIC_LITERAL:
            case CHARACTER_LITERAL:
            case LBRACE:
            case DBL_LBRACE:
            case HASH:
            case PLUS:
            case MINUS:
            case MULTIPLY:
            case DIVIDE:
            case EXP:
            case RANGE:
            case BAR:
            case DBL_BAR:
            case STRING_LITERAL:
            case FREE_OPERATOR:
            case ANGLE:
            case DBL_ANGLE:
            case FUNCTION:
            case NESTED:
            case TUPLE:
            case QUALNUM:
            case LOCALVAREXP:
            case UNARY_FREE_OPERATOR:
                {
                alt201=1;
                }
                break;
            case BETWEEN_EXPR:
                {
                alt201=2;
                }
                break;
            case NOT_EQL:
            case EQL:
                {
                alt201=3;
                }
                break;
            case NOT_PROP_SUBSET:
            case NOT_SUBSET:
            case NOT_SUBSTR:
            case PROP_SUBSET:
            case SUBSET:
            case SUBSTR:
            case GT_EQL:
            case LT_EQL:
            case LT:
            case GT:
                {
                alt201=4;
                }
                break;
            case IN:
            case NOT_IN:
                {
                alt201=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 201, 0, input);

                throw nvae;
            }

            switch (alt201) {
                case 1 :
                    // RSimpleTrans.g:1584:9: infix_expression
                    {
                    pushFollow(FOLLOW_infix_expression_in_relational_expression11583);
                    infix_expression();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // RSimpleTrans.g:1585:9: between_expression
                    {
                    pushFollow(FOLLOW_between_expression_in_relational_expression11593);
                    between_expression();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;
                case 3 :
                    // RSimpleTrans.g:1586:9: ^( ( EQL | NOT_EQL ) infix_expression infix_expression )
                    {
                    if ( input.LA(1)==NOT_EQL||input.LA(1)==EQL ) {
                        input.consume();
                        state.errorRecovery=false;state.failed=false;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        throw mse;
                    }


                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    pushFollow(FOLLOW_infix_expression_in_relational_expression11614);
                    infix_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    pushFollow(FOLLOW_infix_expression_in_relational_expression11616);
                    infix_expression();

                    state._fsp--;
                    if (state.failed) return retval;

                    match(input, Token.UP, null); if (state.failed) return retval;

                    }
                    break;
                case 4 :
                    // RSimpleTrans.g:1588:9: ^( ( LT | LT_EQL | GT | GT_EQL | SUBSET | NOT_SUBSET | PROP_SUBSET | NOT_PROP_SUBSET | SUBSTR | NOT_SUBSTR ) infix_expression infix_expression )
                    {
                    if ( (input.LA(1)>=NOT_PROP_SUBSET && input.LA(1)<=SUBSTR)||(input.LA(1)>=GT_EQL && input.LA(1)<=LT_EQL)||(input.LA(1)>=LT && input.LA(1)<=GT) ) {
                        input.consume();
                        state.errorRecovery=false;state.failed=false;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        throw mse;
                    }


                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    pushFollow(FOLLOW_infix_expression_in_relational_expression11690);
                    infix_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    pushFollow(FOLLOW_infix_expression_in_relational_expression11692);
                    infix_expression();

                    state._fsp--;
                    if (state.failed) return retval;

                    match(input, Token.UP, null); if (state.failed) return retval;

                    }
                    break;
                case 5 :
                    // RSimpleTrans.g:1602:9: ^( ( IN | NOT_IN ) infix_expression infix_expression )
                    {
                    if ( (input.LA(1)>=IN && input.LA(1)<=NOT_IN) ) {
                        input.consume();
                        state.errorRecovery=false;state.failed=false;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        throw mse;
                    }


                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    pushFollow(FOLLOW_infix_expression_in_relational_expression11724);
                    infix_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    pushFollow(FOLLOW_infix_expression_in_relational_expression11726);
                    infix_expression();

                    state._fsp--;
                    if (state.failed) return retval;

                    match(input, Token.UP, null); if (state.failed) return retval;

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "relational_expression"

    public static class between_expression_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "between_expression"
    // RSimpleTrans.g:1606:1: between_expression : ^( BETWEEN_EXPR infix_expression ( infix_expression )+ ) ;
    public final RSimpleTrans.between_expression_return between_expression() throws RecognitionException {
        RSimpleTrans.between_expression_return retval = new RSimpleTrans.between_expression_return();
        retval.start = input.LT(1);

        try {
            // RSimpleTrans.g:1607:5: ( ^( BETWEEN_EXPR infix_expression ( infix_expression )+ ) )
            // RSimpleTrans.g:1607:9: ^( BETWEEN_EXPR infix_expression ( infix_expression )+ )
            {
            match(input,BETWEEN_EXPR,FOLLOW_BETWEEN_EXPR_in_between_expression11756); if (state.failed) return retval;

            match(input, Token.DOWN, null); if (state.failed) return retval;
            pushFollow(FOLLOW_infix_expression_in_between_expression11758);
            infix_expression();

            state._fsp--;
            if (state.failed) return retval;
            // RSimpleTrans.g:1607:41: ( infix_expression )+
            int cnt202=0;
            loop202:
            do {
                int alt202=2;
                int LA202_0 = input.LA(1);

                if ( (LA202_0==BOOLEAN||LA202_0==COMPLEMENT||LA202_0==DIV||LA202_0==INTERSECT||LA202_0==LAMBDA||LA202_0==MOD||(LA202_0>=NOT && LA202_0<=CAT)||LA202_0==REM||LA202_0==UNION||LA202_0==WITHOUT||LA202_0==IDENTIFIER||LA202_0==DOT||LA202_0==NUMERIC_LITERAL||LA202_0==CHARACTER_LITERAL||LA202_0==LBRACE||LA202_0==DBL_LBRACE||LA202_0==HASH||(LA202_0>=PLUS && LA202_0<=MINUS)||(LA202_0>=MULTIPLY && LA202_0<=RANGE)||(LA202_0>=BAR && LA202_0<=DBL_BAR)||LA202_0==STRING_LITERAL||LA202_0==FREE_OPERATOR||LA202_0==ANGLE||LA202_0==DBL_ANGLE||LA202_0==FUNCTION||LA202_0==NESTED||LA202_0==TUPLE||(LA202_0>=QUALNUM && LA202_0<=LOCALVAREXP)||LA202_0==UNARY_FREE_OPERATOR) ) {
                    alt202=1;
                }


                switch (alt202) {
            	case 1 :
            	    // RSimpleTrans.g:1607:42: infix_expression
            	    {
            	    pushFollow(FOLLOW_infix_expression_in_between_expression11761);
            	    infix_expression();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }
            	    break;

            	default :
            	    if ( cnt202 >= 1 ) break loop202;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(202, input);
                        throw eee;
                }
                cnt202++;
            } while (true);


            match(input, Token.UP, null); if (state.failed) return retval;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "between_expression"

    public static class infix_expression_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "infix_expression"
    // RSimpleTrans.g:1611:1: infix_expression : ( ^( LOCALVAREXP math_variable_declarations math_expression ) | ( adding_expression | ( ^( RANGE adding_expression adding_expression ) | ^( FREE_OPERATOR adding_expression adding_expression ) ) ) | BOOLEAN );
    public final RSimpleTrans.infix_expression_return infix_expression() throws RecognitionException {
        RSimpleTrans.infix_expression_return retval = new RSimpleTrans.infix_expression_return();
        retval.start = input.LT(1);

        try {
            // RSimpleTrans.g:1612:5: ( ^( LOCALVAREXP math_variable_declarations math_expression ) | ( adding_expression | ( ^( RANGE adding_expression adding_expression ) | ^( FREE_OPERATOR adding_expression adding_expression ) ) ) | BOOLEAN )
            int alt205=3;
            switch ( input.LA(1) ) {
            case LOCALVAREXP:
                {
                alt205=1;
                }
                break;
            case COMPLEMENT:
            case DIV:
            case INTERSECT:
            case LAMBDA:
            case MOD:
            case NOT:
            case CAT:
            case REM:
            case UNION:
            case WITHOUT:
            case IDENTIFIER:
            case DOT:
            case NUMERIC_LITERAL:
            case CHARACTER_LITERAL:
            case LBRACE:
            case DBL_LBRACE:
            case HASH:
            case PLUS:
            case MINUS:
            case MULTIPLY:
            case DIVIDE:
            case EXP:
            case RANGE:
            case BAR:
            case DBL_BAR:
            case STRING_LITERAL:
            case FREE_OPERATOR:
            case ANGLE:
            case DBL_ANGLE:
            case FUNCTION:
            case NESTED:
            case TUPLE:
            case QUALNUM:
            case UNARY_FREE_OPERATOR:
                {
                alt205=2;
                }
                break;
            case BOOLEAN:
                {
                alt205=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 205, 0, input);

                throw nvae;
            }

            switch (alt205) {
                case 1 :
                    // RSimpleTrans.g:1612:9: ^( LOCALVAREXP math_variable_declarations math_expression )
                    {
                    match(input,LOCALVAREXP,FOLLOW_LOCALVAREXP_in_infix_expression11793); if (state.failed) return retval;

                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    pushFollow(FOLLOW_math_variable_declarations_in_infix_expression11795);
                    math_variable_declarations();

                    state._fsp--;
                    if (state.failed) return retval;
                    pushFollow(FOLLOW_math_expression_in_infix_expression11797);
                    math_expression();

                    state._fsp--;
                    if (state.failed) return retval;

                    match(input, Token.UP, null); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // RSimpleTrans.g:1614:9: ( adding_expression | ( ^( RANGE adding_expression adding_expression ) | ^( FREE_OPERATOR adding_expression adding_expression ) ) )
                    {
                    // RSimpleTrans.g:1614:9: ( adding_expression | ( ^( RANGE adding_expression adding_expression ) | ^( FREE_OPERATOR adding_expression adding_expression ) ) )
                    int alt204=2;
                    int LA204_0 = input.LA(1);

                    if ( (LA204_0==COMPLEMENT||LA204_0==DIV||LA204_0==INTERSECT||LA204_0==LAMBDA||LA204_0==MOD||(LA204_0>=NOT && LA204_0<=CAT)||LA204_0==REM||LA204_0==UNION||LA204_0==WITHOUT||LA204_0==IDENTIFIER||LA204_0==DOT||LA204_0==NUMERIC_LITERAL||LA204_0==CHARACTER_LITERAL||LA204_0==LBRACE||LA204_0==DBL_LBRACE||LA204_0==HASH||(LA204_0>=PLUS && LA204_0<=MINUS)||(LA204_0>=MULTIPLY && LA204_0<=EXP)||(LA204_0>=BAR && LA204_0<=DBL_BAR)||LA204_0==STRING_LITERAL||LA204_0==ANGLE||LA204_0==DBL_ANGLE||LA204_0==FUNCTION||LA204_0==NESTED||LA204_0==TUPLE||LA204_0==QUALNUM||LA204_0==UNARY_FREE_OPERATOR) ) {
                        alt204=1;
                    }
                    else if ( (LA204_0==RANGE||LA204_0==FREE_OPERATOR) ) {
                        alt204=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 204, 0, input);

                        throw nvae;
                    }
                    switch (alt204) {
                        case 1 :
                            // RSimpleTrans.g:1614:10: adding_expression
                            {
                            pushFollow(FOLLOW_adding_expression_in_infix_expression11815);
                            adding_expression();

                            state._fsp--;
                            if (state.failed) return retval;

                            }
                            break;
                        case 2 :
                            // RSimpleTrans.g:1615:9: ( ^( RANGE adding_expression adding_expression ) | ^( FREE_OPERATOR adding_expression adding_expression ) )
                            {
                            // RSimpleTrans.g:1615:9: ( ^( RANGE adding_expression adding_expression ) | ^( FREE_OPERATOR adding_expression adding_expression ) )
                            int alt203=2;
                            int LA203_0 = input.LA(1);

                            if ( (LA203_0==RANGE) ) {
                                alt203=1;
                            }
                            else if ( (LA203_0==FREE_OPERATOR) ) {
                                alt203=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 203, 0, input);

                                throw nvae;
                            }
                            switch (alt203) {
                                case 1 :
                                    // RSimpleTrans.g:1615:13: ^( RANGE adding_expression adding_expression )
                                    {
                                    match(input,RANGE,FOLLOW_RANGE_in_infix_expression11830); if (state.failed) return retval;

                                    match(input, Token.DOWN, null); if (state.failed) return retval;
                                    pushFollow(FOLLOW_adding_expression_in_infix_expression11832);
                                    adding_expression();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    pushFollow(FOLLOW_adding_expression_in_infix_expression11834);
                                    adding_expression();

                                    state._fsp--;
                                    if (state.failed) return retval;

                                    match(input, Token.UP, null); if (state.failed) return retval;

                                    }
                                    break;
                                case 2 :
                                    // RSimpleTrans.g:1616:13: ^( FREE_OPERATOR adding_expression adding_expression )
                                    {
                                    match(input,FREE_OPERATOR,FOLLOW_FREE_OPERATOR_in_infix_expression11850); if (state.failed) return retval;

                                    match(input, Token.DOWN, null); if (state.failed) return retval;
                                    pushFollow(FOLLOW_adding_expression_in_infix_expression11852);
                                    adding_expression();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    pushFollow(FOLLOW_adding_expression_in_infix_expression11854);
                                    adding_expression();

                                    state._fsp--;
                                    if (state.failed) return retval;

                                    match(input, Token.UP, null); if (state.failed) return retval;

                                    }
                                    break;

                            }


                            }
                            break;

                    }


                    }
                    break;
                case 3 :
                    // RSimpleTrans.g:1619:9: BOOLEAN
                    {
                    match(input,BOOLEAN,FOLLOW_BOOLEAN_in_infix_expression11885); if (state.failed) return retval;

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "infix_expression"

    public static class adding_expression_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "adding_expression"
    // RSimpleTrans.g:1622:1: adding_expression : ( multiplying_expression | ^( ( PLUS | MINUS | CAT | UNION | INTERSECT | WITHOUT ) adding_expression multiplying_expression ) );
    public final RSimpleTrans.adding_expression_return adding_expression() throws RecognitionException {
        RSimpleTrans.adding_expression_return retval = new RSimpleTrans.adding_expression_return();
        retval.start = input.LT(1);

        try {
            // RSimpleTrans.g:1623:5: ( multiplying_expression | ^( ( PLUS | MINUS | CAT | UNION | INTERSECT | WITHOUT ) adding_expression multiplying_expression ) )
            int alt206=2;
            alt206 = dfa206.predict(input);
            switch (alt206) {
                case 1 :
                    // RSimpleTrans.g:1623:9: multiplying_expression
                    {
                    pushFollow(FOLLOW_multiplying_expression_in_adding_expression11904);
                    multiplying_expression();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // RSimpleTrans.g:1624:9: ^( ( PLUS | MINUS | CAT | UNION | INTERSECT | WITHOUT ) adding_expression multiplying_expression )
                    {
                    if ( input.LA(1)==INTERSECT||input.LA(1)==CAT||input.LA(1)==UNION||input.LA(1)==WITHOUT||(input.LA(1)>=PLUS && input.LA(1)<=MINUS) ) {
                        input.consume();
                        state.errorRecovery=false;state.failed=false;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        throw mse;
                    }


                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    pushFollow(FOLLOW_adding_expression_in_adding_expression11953);
                    adding_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    pushFollow(FOLLOW_multiplying_expression_in_adding_expression11955);
                    multiplying_expression();

                    state._fsp--;
                    if (state.failed) return retval;

                    match(input, Token.UP, null); if (state.failed) return retval;

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "adding_expression"

    public static class multiplying_expression_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "multiplying_expression"
    // RSimpleTrans.g:1636:1: multiplying_expression : ( exponential_expression | ^( ( MULTIPLY | DIVIDE | MOD | REM | DIV ) multiplying_expression exponential_expression ) );
    public final RSimpleTrans.multiplying_expression_return multiplying_expression() throws RecognitionException {
        RSimpleTrans.multiplying_expression_return retval = new RSimpleTrans.multiplying_expression_return();
        retval.start = input.LT(1);

        try {
            // RSimpleTrans.g:1637:5: ( exponential_expression | ^( ( MULTIPLY | DIVIDE | MOD | REM | DIV ) multiplying_expression exponential_expression ) )
            int alt207=2;
            int LA207_0 = input.LA(1);

            if ( (LA207_0==COMPLEMENT||LA207_0==LAMBDA||LA207_0==NOT||LA207_0==IDENTIFIER||LA207_0==DOT||LA207_0==NUMERIC_LITERAL||LA207_0==CHARACTER_LITERAL||LA207_0==LBRACE||LA207_0==DBL_LBRACE||LA207_0==HASH||LA207_0==MINUS||LA207_0==EXP||(LA207_0>=BAR && LA207_0<=DBL_BAR)||LA207_0==STRING_LITERAL||LA207_0==ANGLE||LA207_0==DBL_ANGLE||LA207_0==FUNCTION||LA207_0==NESTED||LA207_0==TUPLE||LA207_0==QUALNUM||LA207_0==UNARY_FREE_OPERATOR) ) {
                alt207=1;
            }
            else if ( (LA207_0==DIV||LA207_0==MOD||LA207_0==REM||(LA207_0>=MULTIPLY && LA207_0<=DIVIDE)) ) {
                alt207=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 207, 0, input);

                throw nvae;
            }
            switch (alt207) {
                case 1 :
                    // RSimpleTrans.g:1637:9: exponential_expression
                    {
                    pushFollow(FOLLOW_exponential_expression_in_multiplying_expression11990);
                    exponential_expression();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // RSimpleTrans.g:1638:9: ^( ( MULTIPLY | DIVIDE | MOD | REM | DIV ) multiplying_expression exponential_expression )
                    {
                    if ( input.LA(1)==DIV||input.LA(1)==MOD||input.LA(1)==REM||(input.LA(1)>=MULTIPLY && input.LA(1)<=DIVIDE) ) {
                        input.consume();
                        state.errorRecovery=false;state.failed=false;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        throw mse;
                    }


                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    pushFollow(FOLLOW_multiplying_expression_in_multiplying_expression12035);
                    multiplying_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    pushFollow(FOLLOW_exponential_expression_in_multiplying_expression12049);
                    exponential_expression();

                    state._fsp--;
                    if (state.failed) return retval;

                    match(input, Token.UP, null); if (state.failed) return retval;

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "multiplying_expression"

    public static class exponential_expression_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "exponential_expression"
    // RSimpleTrans.g:1644:1: exponential_expression : ( prefix_expression | ^( EXP prefix_expression exponential_expression ) );
    public final RSimpleTrans.exponential_expression_return exponential_expression() throws RecognitionException {
        RSimpleTrans.exponential_expression_return retval = new RSimpleTrans.exponential_expression_return();
        retval.start = input.LT(1);

        try {
            // RSimpleTrans.g:1645:5: ( prefix_expression | ^( EXP prefix_expression exponential_expression ) )
            int alt208=2;
            int LA208_0 = input.LA(1);

            if ( (LA208_0==COMPLEMENT||LA208_0==LAMBDA||LA208_0==NOT||LA208_0==IDENTIFIER||LA208_0==DOT||LA208_0==NUMERIC_LITERAL||LA208_0==CHARACTER_LITERAL||LA208_0==LBRACE||LA208_0==DBL_LBRACE||LA208_0==HASH||LA208_0==MINUS||(LA208_0>=BAR && LA208_0<=DBL_BAR)||LA208_0==STRING_LITERAL||LA208_0==ANGLE||LA208_0==DBL_ANGLE||LA208_0==FUNCTION||LA208_0==NESTED||LA208_0==TUPLE||LA208_0==QUALNUM||LA208_0==UNARY_FREE_OPERATOR) ) {
                alt208=1;
            }
            else if ( (LA208_0==EXP) ) {
                alt208=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 208, 0, input);

                throw nvae;
            }
            switch (alt208) {
                case 1 :
                    // RSimpleTrans.g:1645:9: prefix_expression
                    {
                    pushFollow(FOLLOW_prefix_expression_in_exponential_expression12078);
                    prefix_expression();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // RSimpleTrans.g:1646:9: ^( EXP prefix_expression exponential_expression )
                    {
                    match(input,EXP,FOLLOW_EXP_in_exponential_expression12089); if (state.failed) return retval;

                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    pushFollow(FOLLOW_prefix_expression_in_exponential_expression12091);
                    prefix_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    pushFollow(FOLLOW_exponential_expression_in_exponential_expression12093);
                    exponential_expression();

                    state._fsp--;
                    if (state.failed) return retval;

                    match(input, Token.UP, null); if (state.failed) return retval;

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "exponential_expression"

    public static class prefix_expression_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "prefix_expression"
    // RSimpleTrans.g:1649:1: prefix_expression : ( unary_expression | ^( UNARY_FREE_OPERATOR prefix_expression ) );
    public final RSimpleTrans.prefix_expression_return prefix_expression() throws RecognitionException {
        RSimpleTrans.prefix_expression_return retval = new RSimpleTrans.prefix_expression_return();
        retval.start = input.LT(1);

        try {
            // RSimpleTrans.g:1650:5: ( unary_expression | ^( UNARY_FREE_OPERATOR prefix_expression ) )
            int alt209=2;
            int LA209_0 = input.LA(1);

            if ( (LA209_0==COMPLEMENT||LA209_0==LAMBDA||LA209_0==NOT||LA209_0==IDENTIFIER||LA209_0==DOT||LA209_0==NUMERIC_LITERAL||LA209_0==CHARACTER_LITERAL||LA209_0==LBRACE||LA209_0==DBL_LBRACE||LA209_0==HASH||LA209_0==MINUS||(LA209_0>=BAR && LA209_0<=DBL_BAR)||LA209_0==STRING_LITERAL||LA209_0==ANGLE||LA209_0==DBL_ANGLE||LA209_0==FUNCTION||LA209_0==NESTED||LA209_0==TUPLE||LA209_0==QUALNUM) ) {
                alt209=1;
            }
            else if ( (LA209_0==UNARY_FREE_OPERATOR) ) {
                alt209=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 209, 0, input);

                throw nvae;
            }
            switch (alt209) {
                case 1 :
                    // RSimpleTrans.g:1650:9: unary_expression
                    {
                    pushFollow(FOLLOW_unary_expression_in_prefix_expression12113);
                    unary_expression();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // RSimpleTrans.g:1651:9: ^( UNARY_FREE_OPERATOR prefix_expression )
                    {
                    match(input,UNARY_FREE_OPERATOR,FOLLOW_UNARY_FREE_OPERATOR_in_prefix_expression12124); if (state.failed) return retval;

                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    pushFollow(FOLLOW_prefix_expression_in_prefix_expression12126);
                    prefix_expression();

                    state._fsp--;
                    if (state.failed) return retval;

                    match(input, Token.UP, null); if (state.failed) return retval;

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "prefix_expression"

    public static class unary_expression_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "unary_expression"
    // RSimpleTrans.g:1654:1: unary_expression : ( primitive_expression | ^( NOT unary_expression ) | ^( COMPLEMENT unary_expression ) | ^( MINUS unary_expression ) );
    public final RSimpleTrans.unary_expression_return unary_expression() throws RecognitionException {
        RSimpleTrans.unary_expression_return retval = new RSimpleTrans.unary_expression_return();
        retval.start = input.LT(1);

        try {
            // RSimpleTrans.g:1655:5: ( primitive_expression | ^( NOT unary_expression ) | ^( COMPLEMENT unary_expression ) | ^( MINUS unary_expression ) )
            int alt210=4;
            switch ( input.LA(1) ) {
            case LAMBDA:
            case IDENTIFIER:
            case DOT:
            case NUMERIC_LITERAL:
            case CHARACTER_LITERAL:
            case LBRACE:
            case DBL_LBRACE:
            case HASH:
            case BAR:
            case DBL_BAR:
            case STRING_LITERAL:
            case ANGLE:
            case DBL_ANGLE:
            case FUNCTION:
            case NESTED:
            case TUPLE:
            case QUALNUM:
                {
                alt210=1;
                }
                break;
            case NOT:
                {
                alt210=2;
                }
                break;
            case COMPLEMENT:
                {
                alt210=3;
                }
                break;
            case MINUS:
                {
                alt210=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 210, 0, input);

                throw nvae;
            }

            switch (alt210) {
                case 1 :
                    // RSimpleTrans.g:1655:9: primitive_expression
                    {
                    pushFollow(FOLLOW_primitive_expression_in_unary_expression12146);
                    primitive_expression();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // RSimpleTrans.g:1656:9: ^( NOT unary_expression )
                    {
                    match(input,NOT,FOLLOW_NOT_in_unary_expression12157); if (state.failed) return retval;

                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    pushFollow(FOLLOW_unary_expression_in_unary_expression12159);
                    unary_expression();

                    state._fsp--;
                    if (state.failed) return retval;

                    match(input, Token.UP, null); if (state.failed) return retval;

                    }
                    break;
                case 3 :
                    // RSimpleTrans.g:1657:9: ^( COMPLEMENT unary_expression )
                    {
                    match(input,COMPLEMENT,FOLLOW_COMPLEMENT_in_unary_expression12171); if (state.failed) return retval;

                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    pushFollow(FOLLOW_unary_expression_in_unary_expression12173);
                    unary_expression();

                    state._fsp--;
                    if (state.failed) return retval;

                    match(input, Token.UP, null); if (state.failed) return retval;

                    }
                    break;
                case 4 :
                    // RSimpleTrans.g:1658:9: ^( MINUS unary_expression )
                    {
                    match(input,MINUS,FOLLOW_MINUS_in_unary_expression12185); if (state.failed) return retval;

                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    pushFollow(FOLLOW_unary_expression_in_unary_expression12188);
                    unary_expression();

                    state._fsp--;
                    if (state.failed) return retval;

                    match(input, Token.UP, null); if (state.failed) return retval;

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "unary_expression"

    public static class primitive_expression_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "primitive_expression"
    // RSimpleTrans.g:1661:1: primitive_expression : ( alternative_expression | ( ident DOT NUMERIC_LITERAL )=> qualified_numeric_literal | dot_expression | lambda_expression | literal_expression | outfix_expression | set_constructor | ( LPAREN math_expression COMMA )=> tuple_expression | nested_expression );
    public final RSimpleTrans.primitive_expression_return primitive_expression() throws RecognitionException {
        RSimpleTrans.primitive_expression_return retval = new RSimpleTrans.primitive_expression_return();
        retval.start = input.LT(1);

        try {
            // RSimpleTrans.g:1662:5: ( alternative_expression | ( ident DOT NUMERIC_LITERAL )=> qualified_numeric_literal | dot_expression | lambda_expression | literal_expression | outfix_expression | set_constructor | ( LPAREN math_expression COMMA )=> tuple_expression | nested_expression )
            int alt211=9;
            alt211 = dfa211.predict(input);
            switch (alt211) {
                case 1 :
                    // RSimpleTrans.g:1662:9: alternative_expression
                    {
                    pushFollow(FOLLOW_alternative_expression_in_primitive_expression12208);
                    alternative_expression();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // RSimpleTrans.g:1663:9: ( ident DOT NUMERIC_LITERAL )=> qualified_numeric_literal
                    {
                    pushFollow(FOLLOW_qualified_numeric_literal_in_primitive_expression12228);
                    qualified_numeric_literal();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;
                case 3 :
                    // RSimpleTrans.g:1664:9: dot_expression
                    {
                    pushFollow(FOLLOW_dot_expression_in_primitive_expression12238);
                    dot_expression();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;
                case 4 :
                    // RSimpleTrans.g:1665:9: lambda_expression
                    {
                    pushFollow(FOLLOW_lambda_expression_in_primitive_expression12248);
                    lambda_expression();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;
                case 5 :
                    // RSimpleTrans.g:1666:9: literal_expression
                    {
                    pushFollow(FOLLOW_literal_expression_in_primitive_expression12258);
                    literal_expression();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;
                case 6 :
                    // RSimpleTrans.g:1667:9: outfix_expression
                    {
                    pushFollow(FOLLOW_outfix_expression_in_primitive_expression12268);
                    outfix_expression();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;
                case 7 :
                    // RSimpleTrans.g:1668:9: set_constructor
                    {
                    pushFollow(FOLLOW_set_constructor_in_primitive_expression12278);
                    set_constructor();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;
                case 8 :
                    // RSimpleTrans.g:1669:9: ( LPAREN math_expression COMMA )=> tuple_expression
                    {
                    pushFollow(FOLLOW_tuple_expression_in_primitive_expression12298);
                    tuple_expression();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;
                case 9 :
                    // RSimpleTrans.g:1670:9: nested_expression
                    {
                    pushFollow(FOLLOW_nested_expression_in_primitive_expression12308);
                    nested_expression();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "primitive_expression"

    public static class dot_expression_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "dot_expression"
    // RSimpleTrans.g:1677:1: dot_expression : ( ^( DOT function_expression ( clean_function_expression )* ) | function_expression );
    public final RSimpleTrans.dot_expression_return dot_expression() throws RecognitionException {
        RSimpleTrans.dot_expression_return retval = new RSimpleTrans.dot_expression_return();
        retval.start = input.LT(1);

        try {
            // RSimpleTrans.g:1678:5: ( ^( DOT function_expression ( clean_function_expression )* ) | function_expression )
            int alt213=2;
            int LA213_0 = input.LA(1);

            if ( (LA213_0==DOT) ) {
                alt213=1;
            }
            else if ( (LA213_0==IDENTIFIER||LA213_0==HASH||LA213_0==FUNCTION) ) {
                alt213=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 213, 0, input);

                throw nvae;
            }
            switch (alt213) {
                case 1 :
                    // RSimpleTrans.g:1678:9: ^( DOT function_expression ( clean_function_expression )* )
                    {
                    match(input,DOT,FOLLOW_DOT_in_dot_expression12332); if (state.failed) return retval;

                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    pushFollow(FOLLOW_function_expression_in_dot_expression12334);
                    function_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    // RSimpleTrans.g:1678:35: ( clean_function_expression )*
                    loop212:
                    do {
                        int alt212=2;
                        int LA212_0 = input.LA(1);

                        if ( (LA212_0==IDENTIFIER||LA212_0==FUNCTION) ) {
                            alt212=1;
                        }


                        switch (alt212) {
                    	case 1 :
                    	    // RSimpleTrans.g:1678:35: clean_function_expression
                    	    {
                    	    pushFollow(FOLLOW_clean_function_expression_in_dot_expression12336);
                    	    clean_function_expression();

                    	    state._fsp--;
                    	    if (state.failed) return retval;

                    	    }
                    	    break;

                    	default :
                    	    break loop212;
                        }
                    } while (true);


                    match(input, Token.UP, null); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // RSimpleTrans.g:1679:9: function_expression
                    {
                    pushFollow(FOLLOW_function_expression_in_dot_expression12348);
                    function_expression();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "dot_expression"

    public static class function_expression_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "function_expression"
    // RSimpleTrans.g:1682:1: function_expression : ( ^( HASH clean_function_expression ) | clean_function_expression );
    public final RSimpleTrans.function_expression_return function_expression() throws RecognitionException {
        RSimpleTrans.function_expression_return retval = new RSimpleTrans.function_expression_return();
        retval.start = input.LT(1);

        try {
            // RSimpleTrans.g:1683:5: ( ^( HASH clean_function_expression ) | clean_function_expression )
            int alt214=2;
            int LA214_0 = input.LA(1);

            if ( (LA214_0==HASH) ) {
                alt214=1;
            }
            else if ( (LA214_0==IDENTIFIER||LA214_0==FUNCTION) ) {
                alt214=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 214, 0, input);

                throw nvae;
            }
            switch (alt214) {
                case 1 :
                    // RSimpleTrans.g:1683:9: ^( HASH clean_function_expression )
                    {
                    match(input,HASH,FOLLOW_HASH_in_function_expression12368); if (state.failed) return retval;

                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    pushFollow(FOLLOW_clean_function_expression_in_function_expression12370);
                    clean_function_expression();

                    state._fsp--;
                    if (state.failed) return retval;

                    match(input, Token.UP, null); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // RSimpleTrans.g:1684:9: clean_function_expression
                    {
                    pushFollow(FOLLOW_clean_function_expression_in_function_expression12381);
                    clean_function_expression();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "function_expression"

    public static class clean_function_expression_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "clean_function_expression"
    // RSimpleTrans.g:1687:1: clean_function_expression : ( ^( FUNCTION ident ( hat_expression )? ( function_argument_list )+ ) | ident );
    public final RSimpleTrans.clean_function_expression_return clean_function_expression() throws RecognitionException {
        RSimpleTrans.clean_function_expression_return retval = new RSimpleTrans.clean_function_expression_return();
        retval.start = input.LT(1);

        try {
            // RSimpleTrans.g:1688:5: ( ^( FUNCTION ident ( hat_expression )? ( function_argument_list )+ ) | ident )
            int alt217=2;
            int LA217_0 = input.LA(1);

            if ( (LA217_0==FUNCTION) ) {
                alt217=1;
            }
            else if ( (LA217_0==IDENTIFIER) ) {
                alt217=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 217, 0, input);

                throw nvae;
            }
            switch (alt217) {
                case 1 :
                    // RSimpleTrans.g:1688:9: ^( FUNCTION ident ( hat_expression )? ( function_argument_list )+ )
                    {
                    match(input,FUNCTION,FOLLOW_FUNCTION_in_clean_function_expression12401); if (state.failed) return retval;

                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    pushFollow(FOLLOW_ident_in_clean_function_expression12403);
                    ident();

                    state._fsp--;
                    if (state.failed) return retval;
                    // RSimpleTrans.g:1688:26: ( hat_expression )?
                    int alt215=2;
                    int LA215_0 = input.LA(1);

                    if ( (LA215_0==CARAT) ) {
                        alt215=1;
                    }
                    switch (alt215) {
                        case 1 :
                            // RSimpleTrans.g:1688:26: hat_expression
                            {
                            pushFollow(FOLLOW_hat_expression_in_clean_function_expression12405);
                            hat_expression();

                            state._fsp--;
                            if (state.failed) return retval;

                            }
                            break;

                    }

                    // RSimpleTrans.g:1688:42: ( function_argument_list )+
                    int cnt216=0;
                    loop216:
                    do {
                        int alt216=2;
                        int LA216_0 = input.LA(1);

                        if ( (LA216_0==PARAMS) ) {
                            alt216=1;
                        }


                        switch (alt216) {
                    	case 1 :
                    	    // RSimpleTrans.g:1688:42: function_argument_list
                    	    {
                    	    pushFollow(FOLLOW_function_argument_list_in_clean_function_expression12408);
                    	    function_argument_list();

                    	    state._fsp--;
                    	    if (state.failed) return retval;

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt216 >= 1 ) break loop216;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(216, input);
                                throw eee;
                        }
                        cnt216++;
                    } while (true);


                    match(input, Token.UP, null); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // RSimpleTrans.g:1689:9: ident
                    {
                    pushFollow(FOLLOW_ident_in_clean_function_expression12420);
                    ident();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "clean_function_expression"

    public static class hat_expression_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "hat_expression"
    // RSimpleTrans.g:1697:1: hat_expression : ^( CARAT ( qualified_ident | nested_expression ) ) ;
    public final RSimpleTrans.hat_expression_return hat_expression() throws RecognitionException {
        RSimpleTrans.hat_expression_return retval = new RSimpleTrans.hat_expression_return();
        retval.start = input.LT(1);

        try {
            // RSimpleTrans.g:1698:5: ( ^( CARAT ( qualified_ident | nested_expression ) ) )
            // RSimpleTrans.g:1698:9: ^( CARAT ( qualified_ident | nested_expression ) )
            {
            match(input,CARAT,FOLLOW_CARAT_in_hat_expression12455); if (state.failed) return retval;

            match(input, Token.DOWN, null); if (state.failed) return retval;
            // RSimpleTrans.g:1698:17: ( qualified_ident | nested_expression )
            int alt218=2;
            int LA218_0 = input.LA(1);

            if ( (LA218_0==IDENTIFIER) ) {
                alt218=1;
            }
            else if ( (LA218_0==NESTED) ) {
                alt218=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 218, 0, input);

                throw nvae;
            }
            switch (alt218) {
                case 1 :
                    // RSimpleTrans.g:1698:18: qualified_ident
                    {
                    pushFollow(FOLLOW_qualified_ident_in_hat_expression12458);
                    qualified_ident();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // RSimpleTrans.g:1698:36: nested_expression
                    {
                    pushFollow(FOLLOW_nested_expression_in_hat_expression12462);
                    nested_expression();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            match(input, Token.UP, null); if (state.failed) return retval;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "hat_expression"

    public static class function_argument_list_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "function_argument_list"
    // RSimpleTrans.g:1701:1: function_argument_list : ^( PARAMS ( math_expression )+ ) ;
    public final RSimpleTrans.function_argument_list_return function_argument_list() throws RecognitionException {
        RSimpleTrans.function_argument_list_return retval = new RSimpleTrans.function_argument_list_return();
        retval.start = input.LT(1);

        try {
            // RSimpleTrans.g:1702:5: ( ^( PARAMS ( math_expression )+ ) )
            // RSimpleTrans.g:1702:9: ^( PARAMS ( math_expression )+ )
            {
            match(input,PARAMS,FOLLOW_PARAMS_in_function_argument_list12484); if (state.failed) return retval;

            match(input, Token.DOWN, null); if (state.failed) return retval;
            // RSimpleTrans.g:1702:18: ( math_expression )+
            int cnt219=0;
            loop219:
            do {
                int alt219=2;
                int LA219_0 = input.LA(1);

                if ( (LA219_0==EXPR) ) {
                    alt219=1;
                }


                switch (alt219) {
            	case 1 :
            	    // RSimpleTrans.g:1702:18: math_expression
            	    {
            	    pushFollow(FOLLOW_math_expression_in_function_argument_list12486);
            	    math_expression();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }
            	    break;

            	default :
            	    if ( cnt219 >= 1 ) break loop219;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(219, input);
                        throw eee;
                }
                cnt219++;
            } while (true);


            match(input, Token.UP, null); if (state.failed) return retval;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "function_argument_list"

    public static class alternative_expression_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "alternative_expression"
    // RSimpleTrans.g:1709:1: alternative_expression : ^( DBL_LBRACE ( alternative_expression_item )+ ) ;
    public final RSimpleTrans.alternative_expression_return alternative_expression() throws RecognitionException {
        RSimpleTrans.alternative_expression_return retval = new RSimpleTrans.alternative_expression_return();
        retval.start = input.LT(1);

        try {
            // RSimpleTrans.g:1710:5: ( ^( DBL_LBRACE ( alternative_expression_item )+ ) )
            // RSimpleTrans.g:1711:9: ^( DBL_LBRACE ( alternative_expression_item )+ )
            {
            match(input,DBL_LBRACE,FOLLOW_DBL_LBRACE_in_alternative_expression12521); if (state.failed) return retval;

            match(input, Token.DOWN, null); if (state.failed) return retval;
            // RSimpleTrans.g:1714:9: ( alternative_expression_item )+
            int cnt220=0;
            loop220:
            do {
                int alt220=2;
                int LA220_0 = input.LA(1);

                if ( (LA220_0==IF||LA220_0==OTHERWISE) ) {
                    alt220=1;
                }


                switch (alt220) {
            	case 1 :
            	    // RSimpleTrans.g:1714:10: alternative_expression_item
            	    {
            	    pushFollow(FOLLOW_alternative_expression_item_in_alternative_expression12550);
            	    alternative_expression_item();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }
            	    break;

            	default :
            	    if ( cnt220 >= 1 ) break loop220;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(220, input);
                        throw eee;
                }
                cnt220++;
            } while (true);


            match(input, Token.UP, null); if (state.failed) return retval;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "alternative_expression"

    public static class alternative_expression_item_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "alternative_expression_item"
    // RSimpleTrans.g:1720:1: alternative_expression_item : ( ^( IF adding_expression relational_expression ) | ^( OTHERWISE adding_expression ) ) ;
    public final RSimpleTrans.alternative_expression_item_return alternative_expression_item() throws RecognitionException {
        RSimpleTrans.alternative_expression_item_return retval = new RSimpleTrans.alternative_expression_item_return();
        retval.start = input.LT(1);

        try {
            // RSimpleTrans.g:1721:5: ( ( ^( IF adding_expression relational_expression ) | ^( OTHERWISE adding_expression ) ) )
            // RSimpleTrans.g:1721:9: ( ^( IF adding_expression relational_expression ) | ^( OTHERWISE adding_expression ) )
            {
            // RSimpleTrans.g:1721:9: ( ^( IF adding_expression relational_expression ) | ^( OTHERWISE adding_expression ) )
            int alt221=2;
            int LA221_0 = input.LA(1);

            if ( (LA221_0==IF) ) {
                alt221=1;
            }
            else if ( (LA221_0==OTHERWISE) ) {
                alt221=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 221, 0, input);

                throw nvae;
            }
            switch (alt221) {
                case 1 :
                    // RSimpleTrans.g:1721:13: ^( IF adding_expression relational_expression )
                    {
                    match(input,IF,FOLLOW_IF_in_alternative_expression_item12604); if (state.failed) return retval;

                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    pushFollow(FOLLOW_adding_expression_in_alternative_expression_item12606);
                    adding_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    pushFollow(FOLLOW_relational_expression_in_alternative_expression_item12608);
                    relational_expression();

                    state._fsp--;
                    if (state.failed) return retval;

                    match(input, Token.UP, null); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // RSimpleTrans.g:1722:13: ^( OTHERWISE adding_expression )
                    {
                    match(input,OTHERWISE,FOLLOW_OTHERWISE_in_alternative_expression_item12624); if (state.failed) return retval;

                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    pushFollow(FOLLOW_adding_expression_in_alternative_expression_item12626);
                    adding_expression();

                    state._fsp--;
                    if (state.failed) return retval;

                    match(input, Token.UP, null); if (state.failed) return retval;

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "alternative_expression_item"

    public static class iterated_construct_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "iterated_construct"
    // RSimpleTrans.g:1727:1: iterated_construct : ^( ITERATION ident ident math_type_expression ( where_clause )? math_expression ) ;
    public final RSimpleTrans.iterated_construct_return iterated_construct() throws RecognitionException {
        RSimpleTrans.iterated_construct_return retval = new RSimpleTrans.iterated_construct_return();
        retval.start = input.LT(1);

        try {
            // RSimpleTrans.g:1728:5: ( ^( ITERATION ident ident math_type_expression ( where_clause )? math_expression ) )
            // RSimpleTrans.g:1728:9: ^( ITERATION ident ident math_type_expression ( where_clause )? math_expression )
            {
            match(input,ITERATION,FOLLOW_ITERATION_in_iterated_construct12666); if (state.failed) return retval;

            match(input, Token.DOWN, null); if (state.failed) return retval;
            pushFollow(FOLLOW_ident_in_iterated_construct12668);
            ident();

            state._fsp--;
            if (state.failed) return retval;
            pushFollow(FOLLOW_ident_in_iterated_construct12670);
            ident();

            state._fsp--;
            if (state.failed) return retval;
            pushFollow(FOLLOW_math_type_expression_in_iterated_construct12672);
            math_type_expression();

            state._fsp--;
            if (state.failed) return retval;
            // RSimpleTrans.g:1728:54: ( where_clause )?
            int alt222=2;
            int LA222_0 = input.LA(1);

            if ( (LA222_0==WHERE) ) {
                alt222=1;
            }
            switch (alt222) {
                case 1 :
                    // RSimpleTrans.g:1728:55: where_clause
                    {
                    pushFollow(FOLLOW_where_clause_in_iterated_construct12675);
                    where_clause();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }

            pushFollow(FOLLOW_math_expression_in_iterated_construct12679);
            math_expression();

            state._fsp--;
            if (state.failed) return retval;

            match(input, Token.UP, null); if (state.failed) return retval;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "iterated_construct"

    public static class lambda_expression_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "lambda_expression"
    // RSimpleTrans.g:1732:1: lambda_expression : ^( LAMBDA ident ( ( ident DOT ident DOT )=> certain_qualified_ident | ident ) math_expression ) ;
    public final RSimpleTrans.lambda_expression_return lambda_expression() throws RecognitionException {
        RSimpleTrans.lambda_expression_return retval = new RSimpleTrans.lambda_expression_return();
        retval.start = input.LT(1);

        try {
            // RSimpleTrans.g:1733:5: ( ^( LAMBDA ident ( ( ident DOT ident DOT )=> certain_qualified_ident | ident ) math_expression ) )
            // RSimpleTrans.g:1733:9: ^( LAMBDA ident ( ( ident DOT ident DOT )=> certain_qualified_ident | ident ) math_expression )
            {
            match(input,LAMBDA,FOLLOW_LAMBDA_in_lambda_expression12701); if (state.failed) return retval;

            match(input, Token.DOWN, null); if (state.failed) return retval;
            pushFollow(FOLLOW_ident_in_lambda_expression12703);
            ident();

            state._fsp--;
            if (state.failed) return retval;
            // RSimpleTrans.g:1734:9: ( ( ident DOT ident DOT )=> certain_qualified_ident | ident )
            int alt223=2;
            int LA223_0 = input.LA(1);

            if ( (LA223_0==IDENTIFIER) ) {
                int LA223_1 = input.LA(2);

                if ( (LA223_1==DOWN) && (synpred11_RSimpleTrans())) {
                    alt223=1;
                }
                else if ( (LA223_1==EXPR) ) {
                    alt223=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 223, 1, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 223, 0, input);

                throw nvae;
            }
            switch (alt223) {
                case 1 :
                    // RSimpleTrans.g:1734:13: ( ident DOT ident DOT )=> certain_qualified_ident
                    {
                    pushFollow(FOLLOW_certain_qualified_ident_in_lambda_expression12730);
                    certain_qualified_ident();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // RSimpleTrans.g:1735:13: ident
                    {
                    pushFollow(FOLLOW_ident_in_lambda_expression12744);
                    ident();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }

            pushFollow(FOLLOW_math_expression_in_lambda_expression12766);
            math_expression();

            state._fsp--;
            if (state.failed) return retval;

            match(input, Token.UP, null); if (state.failed) return retval;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "lambda_expression"

    public static class literal_expression_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "literal_expression"
    // RSimpleTrans.g:1740:1: literal_expression : ( NUMERIC_LITERAL | CHARACTER_LITERAL | STRING_LITERAL );
    public final RSimpleTrans.literal_expression_return literal_expression() throws RecognitionException {
        RSimpleTrans.literal_expression_return retval = new RSimpleTrans.literal_expression_return();
        retval.start = input.LT(1);

        try {
            // RSimpleTrans.g:1742:5: ( NUMERIC_LITERAL | CHARACTER_LITERAL | STRING_LITERAL )
            // RSimpleTrans.g:
            {
            if ( input.LA(1)==NUMERIC_LITERAL||input.LA(1)==CHARACTER_LITERAL||input.LA(1)==STRING_LITERAL ) {
                input.consume();
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "literal_expression"

    public static class program_literal_expression_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "program_literal_expression"
    // RSimpleTrans.g:1747:1: program_literal_expression : ( NUMERIC_LITERAL -> template(nl=$NUMERIC_LITERAL) \"<nl>\" | CHARACTER_LITERAL -> template(cl=$CHARACTER_LITERAL) \"<cl>\" | STRING_LITERAL -> template(sl=$STRING_LITERAL) \"<sl>\");
    public final RSimpleTrans.program_literal_expression_return program_literal_expression() throws RecognitionException {
        RSimpleTrans.program_literal_expression_return retval = new RSimpleTrans.program_literal_expression_return();
        retval.start = input.LT(1);

        CommonTree NUMERIC_LITERAL33=null;
        CommonTree CHARACTER_LITERAL34=null;
        CommonTree STRING_LITERAL35=null;

        try {
            // RSimpleTrans.g:1748:5: ( NUMERIC_LITERAL -> template(nl=$NUMERIC_LITERAL) \"<nl>\" | CHARACTER_LITERAL -> template(cl=$CHARACTER_LITERAL) \"<cl>\" | STRING_LITERAL -> template(sl=$STRING_LITERAL) \"<sl>\")
            int alt224=3;
            switch ( input.LA(1) ) {
            case NUMERIC_LITERAL:
                {
                alt224=1;
                }
                break;
            case CHARACTER_LITERAL:
                {
                alt224=2;
                }
                break;
            case STRING_LITERAL:
                {
                alt224=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 224, 0, input);

                throw nvae;
            }

            switch (alt224) {
                case 1 :
                    // RSimpleTrans.g:1748:9: NUMERIC_LITERAL
                    {
                    NUMERIC_LITERAL33=(CommonTree)match(input,NUMERIC_LITERAL,FOLLOW_NUMERIC_LITERAL_in_program_literal_expression12835); if (state.failed) return retval;


                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1748:25: -> template(nl=$NUMERIC_LITERAL) \"<nl>\"
                      {
                          retval.st = new StringTemplate(templateLib, "<nl>",
                        new STAttrMap().put("nl", NUMERIC_LITERAL33));
                      }

                    }
                    }
                    break;
                case 2 :
                    // RSimpleTrans.g:1749:9: CHARACTER_LITERAL
                    {
                    CHARACTER_LITERAL34=(CommonTree)match(input,CHARACTER_LITERAL,FOLLOW_CHARACTER_LITERAL_in_program_literal_expression12855); if (state.failed) return retval;


                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1749:27: -> template(cl=$CHARACTER_LITERAL) \"<cl>\"
                      {
                          retval.st = new StringTemplate(templateLib, "<cl>",
                        new STAttrMap().put("cl", CHARACTER_LITERAL34));
                      }

                    }
                    }
                    break;
                case 3 :
                    // RSimpleTrans.g:1750:9: STRING_LITERAL
                    {
                    STRING_LITERAL35=(CommonTree)match(input,STRING_LITERAL,FOLLOW_STRING_LITERAL_in_program_literal_expression12875); if (state.failed) return retval;


                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1750:24: -> template(sl=$STRING_LITERAL) \"<sl>\"
                      {
                          retval.st = new StringTemplate(templateLib, "<sl>",
                        new STAttrMap().put("sl", STRING_LITERAL35));
                      }

                    }
                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "program_literal_expression"

    public static class qualified_numeric_literal_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "qualified_numeric_literal"
    // RSimpleTrans.g:1753:1: qualified_numeric_literal : ^( QUALNUM ident NUMERIC_LITERAL ) ;
    public final RSimpleTrans.qualified_numeric_literal_return qualified_numeric_literal() throws RecognitionException {
        RSimpleTrans.qualified_numeric_literal_return retval = new RSimpleTrans.qualified_numeric_literal_return();
        retval.start = input.LT(1);

        try {
            // RSimpleTrans.g:1754:5: ( ^( QUALNUM ident NUMERIC_LITERAL ) )
            // RSimpleTrans.g:1754:9: ^( QUALNUM ident NUMERIC_LITERAL )
            {
            match(input,QUALNUM,FOLLOW_QUALNUM_in_qualified_numeric_literal12909); if (state.failed) return retval;

            match(input, Token.DOWN, null); if (state.failed) return retval;
            pushFollow(FOLLOW_ident_in_qualified_numeric_literal12911);
            ident();

            state._fsp--;
            if (state.failed) return retval;
            match(input,NUMERIC_LITERAL,FOLLOW_NUMERIC_LITERAL_in_qualified_numeric_literal12913); if (state.failed) return retval;

            match(input, Token.UP, null); if (state.failed) return retval;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "qualified_numeric_literal"

    public static class nested_expression_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "nested_expression"
    // RSimpleTrans.g:1757:1: nested_expression : ^( NESTED math_expression ) ;
    public final RSimpleTrans.nested_expression_return nested_expression() throws RecognitionException {
        RSimpleTrans.nested_expression_return retval = new RSimpleTrans.nested_expression_return();
        retval.start = input.LT(1);

        try {
            // RSimpleTrans.g:1758:5: ( ^( NESTED math_expression ) )
            // RSimpleTrans.g:1758:9: ^( NESTED math_expression )
            {
            match(input,NESTED,FOLLOW_NESTED_in_nested_expression12934); if (state.failed) return retval;

            match(input, Token.DOWN, null); if (state.failed) return retval;
            pushFollow(FOLLOW_math_expression_in_nested_expression12936);
            math_expression();

            state._fsp--;
            if (state.failed) return retval;

            match(input, Token.UP, null); if (state.failed) return retval;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nested_expression"

    public static class outfix_expression_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "outfix_expression"
    // RSimpleTrans.g:1761:1: outfix_expression : ( ^( ANGLE infix_expression ) | ^( DBL_ANGLE math_expression ) | ^( BAR math_expression ) | ^( DBL_BAR math_expression ) );
    public final RSimpleTrans.outfix_expression_return outfix_expression() throws RecognitionException {
        RSimpleTrans.outfix_expression_return retval = new RSimpleTrans.outfix_expression_return();
        retval.start = input.LT(1);

        try {
            // RSimpleTrans.g:1762:5: ( ^( ANGLE infix_expression ) | ^( DBL_ANGLE math_expression ) | ^( BAR math_expression ) | ^( DBL_BAR math_expression ) )
            int alt225=4;
            switch ( input.LA(1) ) {
            case ANGLE:
                {
                alt225=1;
                }
                break;
            case DBL_ANGLE:
                {
                alt225=2;
                }
                break;
            case BAR:
                {
                alt225=3;
                }
                break;
            case DBL_BAR:
                {
                alt225=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 225, 0, input);

                throw nvae;
            }

            switch (alt225) {
                case 1 :
                    // RSimpleTrans.g:1762:9: ^( ANGLE infix_expression )
                    {
                    match(input,ANGLE,FOLLOW_ANGLE_in_outfix_expression12957); if (state.failed) return retval;

                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    pushFollow(FOLLOW_infix_expression_in_outfix_expression12959);
                    infix_expression();

                    state._fsp--;
                    if (state.failed) return retval;

                    match(input, Token.UP, null); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // RSimpleTrans.g:1763:9: ^( DBL_ANGLE math_expression )
                    {
                    match(input,DBL_ANGLE,FOLLOW_DBL_ANGLE_in_outfix_expression12971); if (state.failed) return retval;

                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    pushFollow(FOLLOW_math_expression_in_outfix_expression12973);
                    math_expression();

                    state._fsp--;
                    if (state.failed) return retval;

                    match(input, Token.UP, null); if (state.failed) return retval;

                    }
                    break;
                case 3 :
                    // RSimpleTrans.g:1764:9: ^( BAR math_expression )
                    {
                    match(input,BAR,FOLLOW_BAR_in_outfix_expression12985); if (state.failed) return retval;

                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    pushFollow(FOLLOW_math_expression_in_outfix_expression12987);
                    math_expression();

                    state._fsp--;
                    if (state.failed) return retval;

                    match(input, Token.UP, null); if (state.failed) return retval;

                    }
                    break;
                case 4 :
                    // RSimpleTrans.g:1765:9: ^( DBL_BAR math_expression )
                    {
                    match(input,DBL_BAR,FOLLOW_DBL_BAR_in_outfix_expression13000); if (state.failed) return retval;

                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    pushFollow(FOLLOW_math_expression_in_outfix_expression13002);
                    math_expression();

                    state._fsp--;
                    if (state.failed) return retval;

                    match(input, Token.UP, null); if (state.failed) return retval;

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "outfix_expression"

    public static class parenthesized_expression_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "parenthesized_expression"
    // RSimpleTrans.g:1768:1: parenthesized_expression : math_expression ;
    public final RSimpleTrans.parenthesized_expression_return parenthesized_expression() throws RecognitionException {
        RSimpleTrans.parenthesized_expression_return retval = new RSimpleTrans.parenthesized_expression_return();
        retval.start = input.LT(1);

        try {
            // RSimpleTrans.g:1769:5: ( math_expression )
            // RSimpleTrans.g:1769:10: math_expression
            {
            pushFollow(FOLLOW_math_expression_in_parenthesized_expression13023);
            math_expression();

            state._fsp--;
            if (state.failed) return retval;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "parenthesized_expression"

    public static class set_constructor_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "set_constructor"
    // RSimpleTrans.g:1772:1: set_constructor : ^( LBRACE ident math_type_expression ( where_clause )? math_expression ) ;
    public final RSimpleTrans.set_constructor_return set_constructor() throws RecognitionException {
        RSimpleTrans.set_constructor_return retval = new RSimpleTrans.set_constructor_return();
        retval.start = input.LT(1);

        try {
            // RSimpleTrans.g:1773:5: ( ^( LBRACE ident math_type_expression ( where_clause )? math_expression ) )
            // RSimpleTrans.g:1773:9: ^( LBRACE ident math_type_expression ( where_clause )? math_expression )
            {
            match(input,LBRACE,FOLLOW_LBRACE_in_set_constructor13044); if (state.failed) return retval;

            match(input, Token.DOWN, null); if (state.failed) return retval;
            pushFollow(FOLLOW_ident_in_set_constructor13046);
            ident();

            state._fsp--;
            if (state.failed) return retval;
            pushFollow(FOLLOW_math_type_expression_in_set_constructor13057);
            math_type_expression();

            state._fsp--;
            if (state.failed) return retval;
            // RSimpleTrans.g:1775:9: ( where_clause )?
            int alt226=2;
            int LA226_0 = input.LA(1);

            if ( (LA226_0==WHERE) ) {
                alt226=1;
            }
            switch (alt226) {
                case 1 :
                    // RSimpleTrans.g:1775:10: where_clause
                    {
                    pushFollow(FOLLOW_where_clause_in_set_constructor13068);
                    where_clause();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }

            pushFollow(FOLLOW_math_expression_in_set_constructor13081);
            math_expression();

            state._fsp--;
            if (state.failed) return retval;

            match(input, Token.UP, null); if (state.failed) return retval;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "set_constructor"

    public static class tuple_expression_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "tuple_expression"
    // RSimpleTrans.g:1779:1: tuple_expression : ^( TUPLE ( math_expression )+ ) ;
    public final RSimpleTrans.tuple_expression_return tuple_expression() throws RecognitionException {
        RSimpleTrans.tuple_expression_return retval = new RSimpleTrans.tuple_expression_return();
        retval.start = input.LT(1);

        try {
            // RSimpleTrans.g:1780:5: ( ^( TUPLE ( math_expression )+ ) )
            // RSimpleTrans.g:1780:9: ^( TUPLE ( math_expression )+ )
            {
            match(input,TUPLE,FOLLOW_TUPLE_in_tuple_expression13103); if (state.failed) return retval;

            match(input, Token.DOWN, null); if (state.failed) return retval;
            // RSimpleTrans.g:1780:17: ( math_expression )+
            int cnt227=0;
            loop227:
            do {
                int alt227=2;
                int LA227_0 = input.LA(1);

                if ( (LA227_0==EXPR) ) {
                    alt227=1;
                }


                switch (alt227) {
            	case 1 :
            	    // RSimpleTrans.g:1780:17: math_expression
            	    {
            	    pushFollow(FOLLOW_math_expression_in_tuple_expression13105);
            	    math_expression();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }
            	    break;

            	default :
            	    if ( cnt227 >= 1 ) break loop227;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(227, input);
                        throw eee;
                }
                cnt227++;
            } while (true);


            match(input, Token.UP, null); if (state.failed) return retval;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "tuple_expression"

    public static class where_clause_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "where_clause"
    // RSimpleTrans.g:1783:1: where_clause : ^( WHERE math_expression ) ;
    public final RSimpleTrans.where_clause_return where_clause() throws RecognitionException {
        RSimpleTrans.where_clause_return retval = new RSimpleTrans.where_clause_return();
        retval.start = input.LT(1);

        try {
            // RSimpleTrans.g:1784:5: ( ^( WHERE math_expression ) )
            // RSimpleTrans.g:1784:9: ^( WHERE math_expression )
            {
            match(input,WHERE,FOLLOW_WHERE_in_where_clause13127); if (state.failed) return retval;

            match(input, Token.DOWN, null); if (state.failed) return retval;
            pushFollow(FOLLOW_math_expression_in_where_clause13129);
            math_expression();

            state._fsp--;
            if (state.failed) return retval;

            match(input, Token.UP, null); if (state.failed) return retval;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "where_clause"

    public static class program_expression_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "program_expression"
    // RSimpleTrans.g:1791:1: program_expression : ^( EXPR ple+= program_logical_expression ) -> template(ple=$pleln=adj[0]in=adj[1]) \"<ln><in><ple>\";
    public final RSimpleTrans.program_expression_return program_expression() throws RecognitionException {
        RSimpleTrans.program_expression_return retval = new RSimpleTrans.program_expression_return();
        retval.start = input.LT(1);

        CommonTree EXPR36=null;
        List list_ple=null;
        RuleReturnScope ple = null;

        String[] adj = {"",""};

        try {
            // RSimpleTrans.g:1795:5: ( ^( EXPR ple+= program_logical_expression ) -> template(ple=$pleln=adj[0]in=adj[1]) \"<ln><in><ple>\")
            // RSimpleTrans.g:1795:9: ^( EXPR ple+= program_logical_expression )
            {
            EXPR36=(CommonTree)match(input,EXPR,FOLLOW_EXPR_in_program_expression13158); if (state.failed) return retval;

            if ( state.backtracking==0 ) {
              adj = adjustLine(EXPR36);
            }

            match(input, Token.DOWN, null); if (state.failed) return retval;
            pushFollow(FOLLOW_program_logical_expression_in_program_expression13164);
            ple=program_logical_expression();

            state._fsp--;
            if (state.failed) return retval;
            if (list_ple==null) list_ple=new ArrayList();
            list_ple.add(ple.getTemplate());


            match(input, Token.UP, null); if (state.failed) return retval;


            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 1796:9: -> template(ple=$pleln=adj[0]in=adj[1]) \"<ln><in><ple>\"
              {
                  retval.st = new StringTemplate(templateLib, "<ln><in><ple>",
                new STAttrMap().put("ple", list_ple).put("ln", adj[0]).put("in", adj[1]));
              }

            }
            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "program_expression"

    public static class program_logical_expression_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "program_logical_expression"
    // RSimpleTrans.g:1799:1: program_logical_expression : (pre+= program_relational_expression -> template(pre=$pre) \"<pre>\" | ^( ( AND | OR ) program_logical_expression program_relational_expression ) );
    public final RSimpleTrans.program_logical_expression_return program_logical_expression() throws RecognitionException {
        RSimpleTrans.program_logical_expression_return retval = new RSimpleTrans.program_logical_expression_return();
        retval.start = input.LT(1);

        List list_pre=null;
        RuleReturnScope pre = null;
        try {
            // RSimpleTrans.g:1800:5: (pre+= program_relational_expression -> template(pre=$pre) \"<pre>\" | ^( ( AND | OR ) program_logical_expression program_relational_expression ) )
            int alt228=2;
            int LA228_0 = input.LA(1);

            if ( (LA228_0==DIV||LA228_0==MOD||LA228_0==NOT||LA228_0==REM||LA228_0==IDENTIFIER||LA228_0==NUMERIC_LITERAL||LA228_0==CHARACTER_LITERAL||(LA228_0>=PLUS && LA228_0<=MINUS)||(LA228_0>=MULTIPLY && LA228_0<=EXP)||(LA228_0>=NOT_EQL && LA228_0<=GT)||LA228_0==STRING_LITERAL||LA228_0==ARRAYFUNCTION||LA228_0==FUNCTION||LA228_0==NESTED||LA228_0==PROGDOT||LA228_0==UNARY_MINUS||LA228_0==VARDOT) ) {
                alt228=1;
            }
            else if ( (LA228_0==AND||LA228_0==OR) ) {
                alt228=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 228, 0, input);

                throw nvae;
            }
            switch (alt228) {
                case 1 :
                    // RSimpleTrans.g:1800:9: pre+= program_relational_expression
                    {
                    pushFollow(FOLLOW_program_relational_expression_in_program_logical_expression13212);
                    pre=program_relational_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_pre==null) list_pre=new ArrayList();
                    list_pre.add(pre.getTemplate());



                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1800:44: -> template(pre=$pre) \"<pre>\"
                      {
                          retval.st = new StringTemplate(templateLib, "<pre>",
                        new STAttrMap().put("pre", list_pre));
                      }

                    }
                    }
                    break;
                case 2 :
                    // RSimpleTrans.g:1801:9: ^( ( AND | OR ) program_logical_expression program_relational_expression )
                    {
                    if ( input.LA(1)==AND||input.LA(1)==OR ) {
                        input.consume();
                        state.errorRecovery=false;state.failed=false;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        throw mse;
                    }


                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    pushFollow(FOLLOW_program_logical_expression_in_program_logical_expression13255);
                    program_logical_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    pushFollow(FOLLOW_program_relational_expression_in_program_logical_expression13269);
                    program_relational_expression();

                    state._fsp--;
                    if (state.failed) return retval;

                    match(input, Token.UP, null); if (state.failed) return retval;

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "program_logical_expression"

    public static class program_relational_expression_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "program_relational_expression"
    // RSimpleTrans.g:1814:1: program_relational_expression : (pae+= program_adding_expression -> template(pae=$pae) \"<pae>\" | ^( (op= EQL | op= NOT_EQL | op= LT | op= LT_EQL | op= GT | op= GT_EQL ) pre+= program_relational_expression pae+= program_adding_expression ) -> template(ln=adj[0]in=adj[1]op=$op.textpre=$prepae=$pae) \"<ln><in><pre> <op> <pae>\");
    public final RSimpleTrans.program_relational_expression_return program_relational_expression() throws RecognitionException {
        RSimpleTrans.program_relational_expression_return retval = new RSimpleTrans.program_relational_expression_return();
        retval.start = input.LT(1);

        CommonTree op=null;
        List list_pae=null;
        List list_pre=null;
        RuleReturnScope pae = null;
        RuleReturnScope pre = null;

        String[] adj = {"",""};

        try {
            // RSimpleTrans.g:1818:5: (pae+= program_adding_expression -> template(pae=$pae) \"<pae>\" | ^( (op= EQL | op= NOT_EQL | op= LT | op= LT_EQL | op= GT | op= GT_EQL ) pre+= program_relational_expression pae+= program_adding_expression ) -> template(ln=adj[0]in=adj[1]op=$op.textpre=$prepae=$pae) \"<ln><in><pre> <op> <pae>\")
            int alt230=2;
            int LA230_0 = input.LA(1);

            if ( (LA230_0==DIV||LA230_0==MOD||LA230_0==NOT||LA230_0==REM||LA230_0==IDENTIFIER||LA230_0==NUMERIC_LITERAL||LA230_0==CHARACTER_LITERAL||(LA230_0>=PLUS && LA230_0<=MINUS)||(LA230_0>=MULTIPLY && LA230_0<=EXP)||LA230_0==STRING_LITERAL||LA230_0==ARRAYFUNCTION||LA230_0==FUNCTION||LA230_0==NESTED||LA230_0==PROGDOT||LA230_0==UNARY_MINUS||LA230_0==VARDOT) ) {
                alt230=1;
            }
            else if ( ((LA230_0>=NOT_EQL && LA230_0<=GT)) ) {
                alt230=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 230, 0, input);

                throw nvae;
            }
            switch (alt230) {
                case 1 :
                    // RSimpleTrans.g:1818:9: pae+= program_adding_expression
                    {
                    pushFollow(FOLLOW_program_adding_expression_in_program_relational_expression13310);
                    pae=program_adding_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_pae==null) list_pae=new ArrayList();
                    list_pae.add(pae.getTemplate());



                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1818:40: -> template(pae=$pae) \"<pae>\"
                      {
                          retval.st = new StringTemplate(templateLib, "<pae>",
                        new STAttrMap().put("pae", list_pae));
                      }

                    }
                    }
                    break;
                case 2 :
                    // RSimpleTrans.g:1838:9: ^( (op= EQL | op= NOT_EQL | op= LT | op= LT_EQL | op= GT | op= GT_EQL ) pre+= program_relational_expression pae+= program_adding_expression )
                    {
                    // RSimpleTrans.g:1838:13: (op= EQL | op= NOT_EQL | op= LT | op= LT_EQL | op= GT | op= GT_EQL )
                    int alt229=6;
                    switch ( input.LA(1) ) {
                    case EQL:
                        {
                        alt229=1;
                        }
                        break;
                    case NOT_EQL:
                        {
                        alt229=2;
                        }
                        break;
                    case LT:
                        {
                        alt229=3;
                        }
                        break;
                    case LT_EQL:
                        {
                        alt229=4;
                        }
                        break;
                    case GT:
                        {
                        alt229=5;
                        }
                        break;
                    case GT_EQL:
                        {
                        alt229=6;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 229, 0, input);

                        throw nvae;
                    }

                    switch (alt229) {
                        case 1 :
                            // RSimpleTrans.g:1838:14: op= EQL
                            {
                            op=(CommonTree)match(input,EQL,FOLLOW_EQL_in_program_relational_expression13342); if (state.failed) return retval;

                            }
                            break;
                        case 2 :
                            // RSimpleTrans.g:1838:23: op= NOT_EQL
                            {
                            op=(CommonTree)match(input,NOT_EQL,FOLLOW_NOT_EQL_in_program_relational_expression13348); if (state.failed) return retval;

                            }
                            break;
                        case 3 :
                            // RSimpleTrans.g:1838:36: op= LT
                            {
                            op=(CommonTree)match(input,LT,FOLLOW_LT_in_program_relational_expression13354); if (state.failed) return retval;

                            }
                            break;
                        case 4 :
                            // RSimpleTrans.g:1838:44: op= LT_EQL
                            {
                            op=(CommonTree)match(input,LT_EQL,FOLLOW_LT_EQL_in_program_relational_expression13360); if (state.failed) return retval;

                            }
                            break;
                        case 5 :
                            // RSimpleTrans.g:1838:56: op= GT
                            {
                            op=(CommonTree)match(input,GT,FOLLOW_GT_in_program_relational_expression13366); if (state.failed) return retval;

                            }
                            break;
                        case 6 :
                            // RSimpleTrans.g:1838:64: op= GT_EQL
                            {
                            op=(CommonTree)match(input,GT_EQL,FOLLOW_GT_EQL_in_program_relational_expression13372); if (state.failed) return retval;

                            }
                            break;

                    }


                    if ( state.backtracking==0 ) {
                      adj = adjustLine(op);
                    }

                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    pushFollow(FOLLOW_program_relational_expression_in_program_relational_expression13403);
                    pre=program_relational_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_pre==null) list_pre=new ArrayList();
                    list_pre.add(pre.getTemplate());

                    pushFollow(FOLLOW_program_adding_expression_in_program_relational_expression13419);
                    pae=program_adding_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_pae==null) list_pae=new ArrayList();
                    list_pae.add(pae.getTemplate());


                    match(input, Token.UP, null); if (state.failed) return retval;


                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1842:11: -> template(ln=adj[0]in=adj[1]op=$op.textpre=$prepae=$pae) \"<ln><in><pre> <op> <pae>\"
                      {
                          retval.st = new StringTemplate(templateLib, "<ln><in><pre> <op> <pae>",
                        new STAttrMap().put("ln", adj[0]).put("in", adj[1]).put("op", (op!=null?op.getText():null)).put("pre", list_pre).put("pae", list_pae));
                      }

                    }
                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "program_relational_expression"

    public static class program_adding_expression_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "program_adding_expression"
    // RSimpleTrans.g:1850:1: program_adding_expression : (pme+= program_multiplying_expression -> template(pme=$pme) \"<pme>\" | ^( (op= PLUS | op= MINUS ) pae+= program_adding_expression pme+= program_multiplying_expression ) -> template(ln=adj[0]in=adj[1]op=$op.textpae=$paepme=$pme) \"<ln><in><pae> <op> <pme>\");
    public final RSimpleTrans.program_adding_expression_return program_adding_expression() throws RecognitionException {
        RSimpleTrans.program_adding_expression_return retval = new RSimpleTrans.program_adding_expression_return();
        retval.start = input.LT(1);

        CommonTree op=null;
        List list_pme=null;
        List list_pae=null;
        RuleReturnScope pme = null;
        RuleReturnScope pae = null;

        String[] adj = {"",""};

        try {
            // RSimpleTrans.g:1854:5: (pme+= program_multiplying_expression -> template(pme=$pme) \"<pme>\" | ^( (op= PLUS | op= MINUS ) pae+= program_adding_expression pme+= program_multiplying_expression ) -> template(ln=adj[0]in=adj[1]op=$op.textpae=$paepme=$pme) \"<ln><in><pae> <op> <pme>\")
            int alt232=2;
            int LA232_0 = input.LA(1);

            if ( (LA232_0==DIV||LA232_0==MOD||LA232_0==NOT||LA232_0==REM||LA232_0==IDENTIFIER||LA232_0==NUMERIC_LITERAL||LA232_0==CHARACTER_LITERAL||(LA232_0>=MULTIPLY && LA232_0<=EXP)||LA232_0==STRING_LITERAL||LA232_0==ARRAYFUNCTION||LA232_0==FUNCTION||LA232_0==NESTED||LA232_0==PROGDOT||LA232_0==UNARY_MINUS||LA232_0==VARDOT) ) {
                alt232=1;
            }
            else if ( ((LA232_0>=PLUS && LA232_0<=MINUS)) ) {
                alt232=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 232, 0, input);

                throw nvae;
            }
            switch (alt232) {
                case 1 :
                    // RSimpleTrans.g:1854:9: pme+= program_multiplying_expression
                    {
                    pushFollow(FOLLOW_program_multiplying_expression_in_program_adding_expression13567);
                    pme=program_multiplying_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_pme==null) list_pme=new ArrayList();
                    list_pme.add(pme.getTemplate());



                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1854:45: -> template(pme=$pme) \"<pme>\"
                      {
                          retval.st = new StringTemplate(templateLib, "<pme>",
                        new STAttrMap().put("pme", list_pme));
                      }

                    }
                    }
                    break;
                case 2 :
                    // RSimpleTrans.g:1862:9: ^( (op= PLUS | op= MINUS ) pae+= program_adding_expression pme+= program_multiplying_expression )
                    {
                    // RSimpleTrans.g:1862:13: (op= PLUS | op= MINUS )
                    int alt231=2;
                    int LA231_0 = input.LA(1);

                    if ( (LA231_0==PLUS) ) {
                        alt231=1;
                    }
                    else if ( (LA231_0==MINUS) ) {
                        alt231=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 231, 0, input);

                        throw nvae;
                    }
                    switch (alt231) {
                        case 1 :
                            // RSimpleTrans.g:1862:14: op= PLUS
                            {
                            op=(CommonTree)match(input,PLUS,FOLLOW_PLUS_in_program_adding_expression13599); if (state.failed) return retval;

                            }
                            break;
                        case 2 :
                            // RSimpleTrans.g:1862:24: op= MINUS
                            {
                            op=(CommonTree)match(input,MINUS,FOLLOW_MINUS_in_program_adding_expression13605); if (state.failed) return retval;

                            }
                            break;

                    }


                    if ( state.backtracking==0 ) {
                      adj = adjustLine(op);
                    }

                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    pushFollow(FOLLOW_program_adding_expression_in_program_adding_expression13636);
                    pae=program_adding_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_pae==null) list_pae=new ArrayList();
                    list_pae.add(pae.getTemplate());

                    pushFollow(FOLLOW_program_multiplying_expression_in_program_adding_expression13652);
                    pme=program_multiplying_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_pme==null) list_pme=new ArrayList();
                    list_pme.add(pme.getTemplate());


                    match(input, Token.UP, null); if (state.failed) return retval;


                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1867:9: -> template(ln=adj[0]in=adj[1]op=$op.textpae=$paepme=$pme) \"<ln><in><pae> <op> <pme>\"
                      {
                          retval.st = new StringTemplate(templateLib, "<ln><in><pae> <op> <pme>",
                        new STAttrMap().put("ln", adj[0]).put("in", adj[1]).put("op", (op!=null?op.getText():null)).put("pae", list_pae).put("pme", list_pme));
                      }

                    }
                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "program_adding_expression"

    public static class program_multiplying_expression_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "program_multiplying_expression"
    // RSimpleTrans.g:1874:1: program_multiplying_expression : (pee+= program_exponential_expression -> template(pee=$pee) \"<pee>\" | ^( ( MULTIPLY | DIVIDE | MOD | REM | DIV ) program_multiplying_expression program_exponential_expression ) );
    public final RSimpleTrans.program_multiplying_expression_return program_multiplying_expression() throws RecognitionException {
        RSimpleTrans.program_multiplying_expression_return retval = new RSimpleTrans.program_multiplying_expression_return();
        retval.start = input.LT(1);

        List list_pee=null;
        RuleReturnScope pee = null;
        try {
            // RSimpleTrans.g:1875:5: (pee+= program_exponential_expression -> template(pee=$pee) \"<pee>\" | ^( ( MULTIPLY | DIVIDE | MOD | REM | DIV ) program_multiplying_expression program_exponential_expression ) )
            int alt233=2;
            int LA233_0 = input.LA(1);

            if ( (LA233_0==NOT||LA233_0==IDENTIFIER||LA233_0==NUMERIC_LITERAL||LA233_0==CHARACTER_LITERAL||LA233_0==EXP||LA233_0==STRING_LITERAL||LA233_0==ARRAYFUNCTION||LA233_0==FUNCTION||LA233_0==NESTED||LA233_0==PROGDOT||LA233_0==UNARY_MINUS||LA233_0==VARDOT) ) {
                alt233=1;
            }
            else if ( (LA233_0==DIV||LA233_0==MOD||LA233_0==REM||(LA233_0>=MULTIPLY && LA233_0<=DIVIDE)) ) {
                alt233=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 233, 0, input);

                throw nvae;
            }
            switch (alt233) {
                case 1 :
                    // RSimpleTrans.g:1875:9: pee+= program_exponential_expression
                    {
                    pushFollow(FOLLOW_program_exponential_expression_in_program_multiplying_expression13795);
                    pee=program_exponential_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_pee==null) list_pee=new ArrayList();
                    list_pee.add(pee.getTemplate());



                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1875:45: -> template(pee=$pee) \"<pee>\"
                      {
                          retval.st = new StringTemplate(templateLib, "<pee>",
                        new STAttrMap().put("pee", list_pee));
                      }

                    }
                    }
                    break;
                case 2 :
                    // RSimpleTrans.g:1876:9: ^( ( MULTIPLY | DIVIDE | MOD | REM | DIV ) program_multiplying_expression program_exponential_expression )
                    {
                    if ( input.LA(1)==DIV||input.LA(1)==MOD||input.LA(1)==REM||(input.LA(1)>=MULTIPLY && input.LA(1)<=DIVIDE) ) {
                        input.consume();
                        state.errorRecovery=false;state.failed=false;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        throw mse;
                    }


                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    pushFollow(FOLLOW_program_multiplying_expression_in_program_multiplying_expression13850);
                    program_multiplying_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    pushFollow(FOLLOW_program_exponential_expression_in_program_multiplying_expression13864);
                    program_exponential_expression();

                    state._fsp--;
                    if (state.failed) return retval;

                    match(input, Token.UP, null); if (state.failed) return retval;

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "program_multiplying_expression"

    public static class program_exponential_expression_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "program_exponential_expression"
    // RSimpleTrans.g:1898:1: program_exponential_expression : (pue+= program_unary_expression -> template(pue=$pue) \"<pue>\" | ^( EXP program_unary_expression program_exponential_expression ) );
    public final RSimpleTrans.program_exponential_expression_return program_exponential_expression() throws RecognitionException {
        RSimpleTrans.program_exponential_expression_return retval = new RSimpleTrans.program_exponential_expression_return();
        retval.start = input.LT(1);

        List list_pue=null;
        RuleReturnScope pue = null;
        try {
            // RSimpleTrans.g:1899:5: (pue+= program_unary_expression -> template(pue=$pue) \"<pue>\" | ^( EXP program_unary_expression program_exponential_expression ) )
            int alt234=2;
            int LA234_0 = input.LA(1);

            if ( (LA234_0==NOT||LA234_0==IDENTIFIER||LA234_0==NUMERIC_LITERAL||LA234_0==CHARACTER_LITERAL||LA234_0==STRING_LITERAL||LA234_0==ARRAYFUNCTION||LA234_0==FUNCTION||LA234_0==NESTED||LA234_0==PROGDOT||LA234_0==UNARY_MINUS||LA234_0==VARDOT) ) {
                alt234=1;
            }
            else if ( (LA234_0==EXP) ) {
                alt234=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 234, 0, input);

                throw nvae;
            }
            switch (alt234) {
                case 1 :
                    // RSimpleTrans.g:1899:9: pue+= program_unary_expression
                    {
                    pushFollow(FOLLOW_program_unary_expression_in_program_exponential_expression13901);
                    pue=program_unary_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_pue==null) list_pue=new ArrayList();
                    list_pue.add(pue.getTemplate());



                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1899:39: -> template(pue=$pue) \"<pue>\"
                      {
                          retval.st = new StringTemplate(templateLib, "<pue>",
                        new STAttrMap().put("pue", list_pue));
                      }

                    }
                    }
                    break;
                case 2 :
                    // RSimpleTrans.g:1900:9: ^( EXP program_unary_expression program_exponential_expression )
                    {
                    match(input,EXP,FOLLOW_EXP_in_program_exponential_expression13924); if (state.failed) return retval;

                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    pushFollow(FOLLOW_program_unary_expression_in_program_exponential_expression13938);
                    program_unary_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    pushFollow(FOLLOW_program_exponential_expression_in_program_exponential_expression13952);
                    program_exponential_expression();

                    state._fsp--;
                    if (state.failed) return retval;

                    match(input, Token.UP, null); if (state.failed) return retval;

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "program_exponential_expression"

    public static class program_unary_expression_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "program_unary_expression"
    // RSimpleTrans.g:1905:1: program_unary_expression : (ppe+= program_primitive_expression -> template(ppe=$ppe) \"<ppe>\" | ^( NOT pue+= program_unary_expression ) -> template(pue=$pue) \"-<pue>\" | ^( UNARY_MINUS pue+= program_unary_expression ) -> template(pue=$pue) \"-<pue>\");
    public final RSimpleTrans.program_unary_expression_return program_unary_expression() throws RecognitionException {
        RSimpleTrans.program_unary_expression_return retval = new RSimpleTrans.program_unary_expression_return();
        retval.start = input.LT(1);

        List list_ppe=null;
        List list_pue=null;
        RuleReturnScope ppe = null;
        RuleReturnScope pue = null;
        try {
            // RSimpleTrans.g:1906:5: (ppe+= program_primitive_expression -> template(ppe=$ppe) \"<ppe>\" | ^( NOT pue+= program_unary_expression ) -> template(pue=$pue) \"-<pue>\" | ^( UNARY_MINUS pue+= program_unary_expression ) -> template(pue=$pue) \"-<pue>\")
            int alt235=3;
            switch ( input.LA(1) ) {
            case IDENTIFIER:
            case NUMERIC_LITERAL:
            case CHARACTER_LITERAL:
            case STRING_LITERAL:
            case ARRAYFUNCTION:
            case FUNCTION:
            case NESTED:
            case PROGDOT:
            case VARDOT:
                {
                alt235=1;
                }
                break;
            case NOT:
                {
                alt235=2;
                }
                break;
            case UNARY_MINUS:
                {
                alt235=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 235, 0, input);

                throw nvae;
            }

            switch (alt235) {
                case 1 :
                    // RSimpleTrans.g:1906:9: ppe+= program_primitive_expression
                    {
                    pushFollow(FOLLOW_program_primitive_expression_in_program_unary_expression13974);
                    ppe=program_primitive_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_ppe==null) list_ppe=new ArrayList();
                    list_ppe.add(ppe.getTemplate());



                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1906:43: -> template(ppe=$ppe) \"<ppe>\"
                      {
                          retval.st = new StringTemplate(templateLib, "<ppe>",
                        new STAttrMap().put("ppe", list_ppe));
                      }

                    }
                    }
                    break;
                case 2 :
                    // RSimpleTrans.g:1907:9: ^( NOT pue+= program_unary_expression )
                    {
                    match(input,NOT,FOLLOW_NOT_in_program_unary_expression13995); if (state.failed) return retval;

                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    pushFollow(FOLLOW_program_unary_expression_in_program_unary_expression13999);
                    pue=program_unary_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_pue==null) list_pue=new ArrayList();
                    list_pue.add(pue.getTemplate());


                    match(input, Token.UP, null); if (state.failed) return retval;


                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1907:46: -> template(pue=$pue) \"-<pue>\"
                      {
                          retval.st = new StringTemplate(templateLib, "-<pue>",
                        new STAttrMap().put("pue", list_pue));
                      }

                    }
                    }
                    break;
                case 3 :
                    // RSimpleTrans.g:1908:9: ^( UNARY_MINUS pue+= program_unary_expression )
                    {
                    match(input,UNARY_MINUS,FOLLOW_UNARY_MINUS_in_program_unary_expression14021); if (state.failed) return retval;

                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    pushFollow(FOLLOW_program_unary_expression_in_program_unary_expression14025);
                    pue=program_unary_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_pue==null) list_pue=new ArrayList();
                    list_pue.add(pue.getTemplate());


                    match(input, Token.UP, null); if (state.failed) return retval;


                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1908:54: -> template(pue=$pue) \"-<pue>\"
                      {
                          retval.st = new StringTemplate(templateLib, "-<pue>",
                        new STAttrMap().put("pue", list_pue));
                      }

                    }
                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "program_unary_expression"

    public static class program_primitive_expression_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "program_primitive_expression"
    // RSimpleTrans.g:1911:1: program_primitive_expression : (ple= program_literal_expression -> template(ple=$ple.text) \"<ple>\" | pve+= program_variable_expression -> template(pve=$pve) \"<pve>\" | pne+= program_nested_expression -> template(pne=$pne) \"<pne>\");
    public final RSimpleTrans.program_primitive_expression_return program_primitive_expression() throws RecognitionException {
        RSimpleTrans.program_primitive_expression_return retval = new RSimpleTrans.program_primitive_expression_return();
        retval.start = input.LT(1);

        List list_pve=null;
        List list_pne=null;
        RSimpleTrans.program_literal_expression_return ple = null;

        RuleReturnScope pve = null;
        RuleReturnScope pne = null;
        try {
            // RSimpleTrans.g:1912:5: (ple= program_literal_expression -> template(ple=$ple.text) \"<ple>\" | pve+= program_variable_expression -> template(pve=$pve) \"<pve>\" | pne+= program_nested_expression -> template(pne=$pne) \"<pne>\")
            int alt236=3;
            switch ( input.LA(1) ) {
            case NUMERIC_LITERAL:
            case CHARACTER_LITERAL:
            case STRING_LITERAL:
                {
                alt236=1;
                }
                break;
            case IDENTIFIER:
            case ARRAYFUNCTION:
            case FUNCTION:
            case PROGDOT:
            case VARDOT:
                {
                alt236=2;
                }
                break;
            case NESTED:
                {
                alt236=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 236, 0, input);

                throw nvae;
            }

            switch (alt236) {
                case 1 :
                    // RSimpleTrans.g:1912:9: ple= program_literal_expression
                    {
                    pushFollow(FOLLOW_program_literal_expression_in_program_primitive_expression14057);
                    ple=program_literal_expression();

                    state._fsp--;
                    if (state.failed) return retval;


                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1912:40: -> template(ple=$ple.text) \"<ple>\"
                      {
                          retval.st = new StringTemplate(templateLib, "<ple>",
                        new STAttrMap().put("ple", (ple!=null?(input.getTokenStream().toString(
                        input.getTreeAdaptor().getTokenStartIndex(ple.start),
                        input.getTreeAdaptor().getTokenStopIndex(ple.start))):null)));
                      }

                    }
                    }
                    break;
                case 2 :
                    // RSimpleTrans.g:1913:9: pve+= program_variable_expression
                    {
                    pushFollow(FOLLOW_program_variable_expression_in_program_primitive_expression14079);
                    pve=program_variable_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_pve==null) list_pve=new ArrayList();
                    list_pve.add(pve.getTemplate());



                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1913:42: -> template(pve=$pve) \"<pve>\"
                      {
                          retval.st = new StringTemplate(templateLib, "<pve>",
                        new STAttrMap().put("pve", list_pve));
                      }

                    }
                    }
                    break;
                case 3 :
                    // RSimpleTrans.g:1914:9: pne+= program_nested_expression
                    {
                    pushFollow(FOLLOW_program_nested_expression_in_program_primitive_expression14101);
                    pne=program_nested_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_pne==null) list_pne=new ArrayList();
                    list_pne.add(pne.getTemplate());



                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1914:40: -> template(pne=$pne) \"<pne>\"
                      {
                          retval.st = new StringTemplate(templateLib, "<pne>",
                        new STAttrMap().put("pne", list_pne));
                      }

                    }
                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "program_primitive_expression"

    public static class program_variable_expression_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "program_variable_expression"
    // RSimpleTrans.g:1917:1: program_variable_expression : (pde+= program_dot_expression -> template(pde=$pde) \"<pde>\" | ve+= variable_expression -> template(ve=$ve) \"<ve>\");
    public final RSimpleTrans.program_variable_expression_return program_variable_expression() throws RecognitionException {
        RSimpleTrans.program_variable_expression_return retval = new RSimpleTrans.program_variable_expression_return();
        retval.start = input.LT(1);

        List list_pde=null;
        List list_ve=null;
        RuleReturnScope pde = null;
        RuleReturnScope ve = null;
        try {
            // RSimpleTrans.g:1919:5: (pde+= program_dot_expression -> template(pde=$pde) \"<pde>\" | ve+= variable_expression -> template(ve=$ve) \"<ve>\")
            int alt237=2;
            int LA237_0 = input.LA(1);

            if ( (LA237_0==FUNCTION||LA237_0==PROGDOT) ) {
                alt237=1;
            }
            else if ( (LA237_0==IDENTIFIER||LA237_0==ARRAYFUNCTION||LA237_0==VARDOT) ) {
                alt237=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 237, 0, input);

                throw nvae;
            }
            switch (alt237) {
                case 1 :
                    // RSimpleTrans.g:1919:9: pde+= program_dot_expression
                    {
                    pushFollow(FOLLOW_program_dot_expression_in_program_variable_expression14137);
                    pde=program_dot_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_pde==null) list_pde=new ArrayList();
                    list_pde.add(pde.getTemplate());



                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1919:37: -> template(pde=$pde) \"<pde>\"
                      {
                          retval.st = new StringTemplate(templateLib, "<pde>",
                        new STAttrMap().put("pde", list_pde));
                      }

                    }
                    }
                    break;
                case 2 :
                    // RSimpleTrans.g:1920:9: ve+= variable_expression
                    {
                    pushFollow(FOLLOW_variable_expression_in_program_variable_expression14159);
                    ve=variable_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_ve==null) list_ve=new ArrayList();
                    list_ve.add(ve.getTemplate());



                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1920:33: -> template(ve=$ve) \"<ve>\"
                      {
                          retval.st = new StringTemplate(templateLib, "<ve>",
                        new STAttrMap().put("ve", list_ve));
                      }

                    }
                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "program_variable_expression"

    public static class program_dot_expression_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "program_dot_expression"
    // RSimpleTrans.g:1923:1: program_dot_expression : ( ^( PROGDOT id= ident (pfe+= program_function_expression )+ ) -> template(ln=adj[0]in=adj[1]id=$id.textpfe=$pfe) \"<ln><in><id>.<pfe>\" | pfe+= program_function_expression -> template(pfe=$pfe) \"<pfe>\");
    public final RSimpleTrans.program_dot_expression_return program_dot_expression() throws RecognitionException {
        RSimpleTrans.program_dot_expression_return retval = new RSimpleTrans.program_dot_expression_return();
        retval.start = input.LT(1);

        CommonTree PROGDOT37=null;
        List list_pfe=null;
        RSimpleTrans.ident_return id = null;

        RuleReturnScope pfe = null;

        String[] adj = {"",""};

        try {
            // RSimpleTrans.g:1927:5: ( ^( PROGDOT id= ident (pfe+= program_function_expression )+ ) -> template(ln=adj[0]in=adj[1]id=$id.textpfe=$pfe) \"<ln><in><id>.<pfe>\" | pfe+= program_function_expression -> template(pfe=$pfe) \"<pfe>\")
            int alt239=2;
            int LA239_0 = input.LA(1);

            if ( (LA239_0==PROGDOT) ) {
                alt239=1;
            }
            else if ( (LA239_0==FUNCTION) ) {
                alt239=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 239, 0, input);

                throw nvae;
            }
            switch (alt239) {
                case 1 :
                    // RSimpleTrans.g:1927:9: ^( PROGDOT id= ident (pfe+= program_function_expression )+ )
                    {
                    PROGDOT37=(CommonTree)match(input,PROGDOT,FOLLOW_PROGDOT_in_program_dot_expression14193); if (state.failed) return retval;

                    if ( state.backtracking==0 ) {
                      adj = adjustLine(PROGDOT37);
                    }

                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    pushFollow(FOLLOW_ident_in_program_dot_expression14199);
                    id=ident();

                    state._fsp--;
                    if (state.failed) return retval;
                    // RSimpleTrans.g:1927:61: (pfe+= program_function_expression )+
                    int cnt238=0;
                    loop238:
                    do {
                        int alt238=2;
                        int LA238_0 = input.LA(1);

                        if ( (LA238_0==FUNCTION) ) {
                            alt238=1;
                        }


                        switch (alt238) {
                    	case 1 :
                    	    // RSimpleTrans.g:1927:61: pfe+= program_function_expression
                    	    {
                    	    pushFollow(FOLLOW_program_function_expression_in_program_dot_expression14203);
                    	    pfe=program_function_expression();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if (list_pfe==null) list_pfe=new ArrayList();
                    	    list_pfe.add(pfe.getTemplate());


                    	    }
                    	    break;

                    	default :
                    	    if ( cnt238 >= 1 ) break loop238;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(238, input);
                                throw eee;
                        }
                        cnt238++;
                    } while (true);


                    match(input, Token.UP, null); if (state.failed) return retval;


                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1928:9: -> template(ln=adj[0]in=adj[1]id=$id.textpfe=$pfe) \"<ln><in><id>.<pfe>\"
                      {
                          retval.st = new StringTemplate(templateLib, "<ln><in><id>.<pfe>",
                        new STAttrMap().put("ln", adj[0]).put("in", adj[1]).put("id", (id!=null?(input.getTokenStream().toString(
                        input.getTreeAdaptor().getTokenStartIndex(id.start),
                        input.getTreeAdaptor().getTokenStopIndex(id.start))):null)).put("pfe", list_pfe));
                      }

                    }
                    }
                    break;
                case 2 :
                    // RSimpleTrans.g:1930:9: pfe+= program_function_expression
                    {
                    pushFollow(FOLLOW_program_function_expression_in_program_dot_expression14268);
                    pfe=program_function_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_pfe==null) list_pfe=new ArrayList();
                    list_pfe.add(pfe.getTemplate());



                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1930:42: -> template(pfe=$pfe) \"<pfe>\"
                      {
                          retval.st = new StringTemplate(templateLib, "<pfe>",
                        new STAttrMap().put("pfe", list_pfe));
                      }

                    }
                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "program_dot_expression"

    public static class program_function_expression_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "program_function_expression"
    // RSimpleTrans.g:1933:1: program_function_expression : ^( FUNCTION id+= ident pfal+= program_function_argument_list[$id] ) -> template(ln=adj[0]in=adj[1]pfal=$pfal) \"<ln><in><pfal>\";
    public final RSimpleTrans.program_function_expression_return program_function_expression() throws RecognitionException {
        RSimpleTrans.program_function_expression_return retval = new RSimpleTrans.program_function_expression_return();
        retval.start = input.LT(1);

        CommonTree FUNCTION38=null;
        List list_id=null;
        List list_pfal=null;
        RuleReturnScope id = null;
        RuleReturnScope pfal = null;

        String[] adj = {"",""};

        try {
            // RSimpleTrans.g:1937:5: ( ^( FUNCTION id+= ident pfal+= program_function_argument_list[$id] ) -> template(ln=adj[0]in=adj[1]pfal=$pfal) \"<ln><in><pfal>\")
            // RSimpleTrans.g:1937:9: ^( FUNCTION id+= ident pfal+= program_function_argument_list[$id] )
            {
            FUNCTION38=(CommonTree)match(input,FUNCTION,FOLLOW_FUNCTION_in_program_function_expression14302); if (state.failed) return retval;

            if ( state.backtracking==0 ) {
              adj = adjustLine(FUNCTION38);
            }

            match(input, Token.DOWN, null); if (state.failed) return retval;
            pushFollow(FOLLOW_ident_in_program_function_expression14308);
            id=ident();

            state._fsp--;
            if (state.failed) return retval;
            if (list_id==null) list_id=new ArrayList();
            list_id.add(id.getTemplate());

            pushFollow(FOLLOW_program_function_argument_list_in_program_function_expression14312);
            pfal=program_function_argument_list(list_id);

            state._fsp--;
            if (state.failed) return retval;
            if (list_pfal==null) list_pfal=new ArrayList();
            list_pfal.add(pfal.getTemplate());


            match(input, Token.UP, null); if (state.failed) return retval;


            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 1938:9: -> template(ln=adj[0]in=adj[1]pfal=$pfal) \"<ln><in><pfal>\"
              {
                  retval.st = new StringTemplate(templateLib, "<ln><in><pfal>",
                new STAttrMap().put("ln", adj[0]).put("in", adj[1]).put("pfal", list_pfal));
              }

            }
            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "program_function_expression"

    public static class program_function_argument_list_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "program_function_argument_list"
    // RSimpleTrans.g:1942:1: program_function_argument_list[List opName] : ^( PARAMS (params+= program_expression )* ) -> template(params=$paramsopName=$opNamecaller=callerln=adj[0]in=adj[1]) \"<caller><opName>(<ln><in><params; separator=\", \">)\";
    public final RSimpleTrans.program_function_argument_list_return program_function_argument_list(List opName) throws RecognitionException {
        RSimpleTrans.program_function_argument_list_return retval = new RSimpleTrans.program_function_argument_list_return();
        retval.start = input.LT(1);

        List list_params=null;
        RuleReturnScope params = null;

        String[] adj = {"",""};
        String caller = "";

        try {
            // RSimpleTrans.g:1947:5: ( ^( PARAMS (params+= program_expression )* ) -> template(params=$paramsopName=$opNamecaller=callerln=adj[0]in=adj[1]) \"<caller><opName>(<ln><in><params; separator=\", \">)\")
            // RSimpleTrans.g:1947:9: ^( PARAMS (params+= program_expression )* )
            {
            match(input,PARAMS,FOLLOW_PARAMS_in_program_function_argument_list14387); if (state.failed) return retval;

            if ( input.LA(1)==Token.DOWN ) {
                match(input, Token.DOWN, null); if (state.failed) return retval;
                // RSimpleTrans.g:1947:24: (params+= program_expression )*
                loop240:
                do {
                    int alt240=2;
                    int LA240_0 = input.LA(1);

                    if ( (LA240_0==EXPR) ) {
                        alt240=1;
                    }


                    switch (alt240) {
                	case 1 :
                	    // RSimpleTrans.g:1947:24: params+= program_expression
                	    {
                	    pushFollow(FOLLOW_program_expression_in_program_function_argument_list14391);
                	    params=program_expression();

                	    state._fsp--;
                	    if (state.failed) return retval;
                	    if (list_params==null) list_params=new ArrayList();
                	    list_params.add(params.getTemplate());


                	    }
                	    break;

                	default :
                	    break loop240;
                    }
                } while (true);


                match(input, Token.UP, null); if (state.failed) return retval;
            }


            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 1949:9: -> template(params=$paramsopName=$opNamecaller=callerln=adj[0]in=adj[1]) \"<caller><opName>(<ln><in><params; separator=\", \">)\"
              {
                  retval.st = new StringTemplate(templateLib, "<caller><opName>(<ln><in><params; separator=\", \">)",
                new STAttrMap().put("params", list_params).put("opName", opName).put("caller", caller).put("ln", adj[0]).put("in", adj[1]));
              }

            }
            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "program_function_argument_list"

    public static class program_nested_expression_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "program_nested_expression"
    // RSimpleTrans.g:1955:1: program_nested_expression : ^( NESTED pe+= program_expression ) -> template(pe=$pe) \"<pe>\";
    public final RSimpleTrans.program_nested_expression_return program_nested_expression() throws RecognitionException {
        RSimpleTrans.program_nested_expression_return retval = new RSimpleTrans.program_nested_expression_return();
        retval.start = input.LT(1);

        List list_pe=null;
        RuleReturnScope pe = null;
        try {
            // RSimpleTrans.g:1956:5: ( ^( NESTED pe+= program_expression ) -> template(pe=$pe) \"<pe>\")
            // RSimpleTrans.g:1956:9: ^( NESTED pe+= program_expression )
            {
            match(input,NESTED,FOLLOW_NESTED_in_program_nested_expression14507); if (state.failed) return retval;

            match(input, Token.DOWN, null); if (state.failed) return retval;
            pushFollow(FOLLOW_program_expression_in_program_nested_expression14511);
            pe=program_expression();

            state._fsp--;
            if (state.failed) return retval;
            if (list_pe==null) list_pe=new ArrayList();
            list_pe.add(pe.getTemplate());


            match(input, Token.UP, null); if (state.failed) return retval;


            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 1956:42: -> template(pe=$pe) \"<pe>\"
              {
                  retval.st = new StringTemplate(templateLib, "<pe>",
                new STAttrMap().put("pe", list_pe));
              }

            }
            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "program_nested_expression"

    public static class variable_expression_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "variable_expression"
    // RSimpleTrans.g:1963:1: variable_expression : (vae+= variable_array_expression -> template(vae=$vae) \"<vae>\" | ^( VARDOT (vae+= variable_array_expression )+ ) -> template(ln=adj[0]in=adj[1]vae=$vae) \"<ln><in><vae; separator=\".\">\");
    public final RSimpleTrans.variable_expression_return variable_expression() throws RecognitionException {
        RSimpleTrans.variable_expression_return retval = new RSimpleTrans.variable_expression_return();
        retval.start = input.LT(1);

        CommonTree VARDOT39=null;
        List list_vae=null;
        RuleReturnScope vae = null;

        String[] adj = {"",""};

        try {
            // RSimpleTrans.g:1967:5: (vae+= variable_array_expression -> template(vae=$vae) \"<vae>\" | ^( VARDOT (vae+= variable_array_expression )+ ) -> template(ln=adj[0]in=adj[1]vae=$vae) \"<ln><in><vae; separator=\".\">\")
            int alt242=2;
            int LA242_0 = input.LA(1);

            if ( (LA242_0==IDENTIFIER||LA242_0==ARRAYFUNCTION) ) {
                alt242=1;
            }
            else if ( (LA242_0==VARDOT) ) {
                alt242=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 242, 0, input);

                throw nvae;
            }
            switch (alt242) {
                case 1 :
                    // RSimpleTrans.g:1969:9: vae+= variable_array_expression
                    {
                    pushFollow(FOLLOW_variable_array_expression_in_variable_expression14569);
                    vae=variable_array_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_vae==null) list_vae=new ArrayList();
                    list_vae.add(vae.getTemplate());



                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1969:40: -> template(vae=$vae) \"<vae>\"
                      {
                          retval.st = new StringTemplate(templateLib, "<vae>",
                        new STAttrMap().put("vae", list_vae));
                      }

                    }
                    }
                    break;
                case 2 :
                    // RSimpleTrans.g:1970:9: ^( VARDOT (vae+= variable_array_expression )+ )
                    {
                    VARDOT39=(CommonTree)match(input,VARDOT,FOLLOW_VARDOT_in_variable_expression14590); if (state.failed) return retval;

                    if ( state.backtracking==0 ) {
                      adj = adjustLine(VARDOT39);
                    }

                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    // RSimpleTrans.g:1970:50: (vae+= variable_array_expression )+
                    int cnt241=0;
                    loop241:
                    do {
                        int alt241=2;
                        int LA241_0 = input.LA(1);

                        if ( (LA241_0==IDENTIFIER||LA241_0==ARRAYFUNCTION) ) {
                            alt241=1;
                        }


                        switch (alt241) {
                    	case 1 :
                    	    // RSimpleTrans.g:1970:50: vae+= variable_array_expression
                    	    {
                    	    pushFollow(FOLLOW_variable_array_expression_in_variable_expression14596);
                    	    vae=variable_array_expression();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if (list_vae==null) list_vae=new ArrayList();
                    	    list_vae.add(vae.getTemplate());


                    	    }
                    	    break;

                    	default :
                    	    if ( cnt241 >= 1 ) break loop241;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(241, input);
                                throw eee;
                        }
                        cnt241++;
                    } while (true);


                    match(input, Token.UP, null); if (state.failed) return retval;


                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1971:9: -> template(ln=adj[0]in=adj[1]vae=$vae) \"<ln><in><vae; separator=\".\">\"
                      {
                          retval.st = new StringTemplate(templateLib, "<ln><in><vae; separator=\".\">",
                        new STAttrMap().put("ln", adj[0]).put("in", adj[1]).put("vae", list_vae));
                      }

                    }
                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "variable_expression"

    public static class variable_array_expression_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "variable_array_expression"
    // RSimpleTrans.g:1976:1: variable_array_expression : (id+= ident -> template(id=$id) \"<id>\" | ^( ARRAYFUNCTION id+= ident vaal+= variable_array_argument_list ) -> template(id=$idvaal=$vaal) \"<id>[<vaal>]\");
    public final RSimpleTrans.variable_array_expression_return variable_array_expression() throws RecognitionException {
        RSimpleTrans.variable_array_expression_return retval = new RSimpleTrans.variable_array_expression_return();
        retval.start = input.LT(1);

        List list_id=null;
        List list_vaal=null;
        RuleReturnScope id = null;
        RuleReturnScope vaal = null;
        try {
            // RSimpleTrans.g:1977:5: (id+= ident -> template(id=$id) \"<id>\" | ^( ARRAYFUNCTION id+= ident vaal+= variable_array_argument_list ) -> template(id=$idvaal=$vaal) \"<id>[<vaal>]\")
            int alt243=2;
            int LA243_0 = input.LA(1);

            if ( (LA243_0==IDENTIFIER) ) {
                alt243=1;
            }
            else if ( (LA243_0==ARRAYFUNCTION) ) {
                alt243=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 243, 0, input);

                throw nvae;
            }
            switch (alt243) {
                case 1 :
                    // RSimpleTrans.g:1977:9: id+= ident
                    {
                    pushFollow(FOLLOW_ident_in_variable_array_expression14675);
                    id=ident();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_id==null) list_id=new ArrayList();
                    list_id.add(id.getTemplate());



                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1977:19: -> template(id=$id) \"<id>\"
                      {
                          retval.st = new StringTemplate(templateLib, "<id>",
                        new STAttrMap().put("id", list_id));
                      }

                    }
                    }
                    break;
                case 2 :
                    // RSimpleTrans.g:1978:9: ^( ARRAYFUNCTION id+= ident vaal+= variable_array_argument_list )
                    {
                    match(input,ARRAYFUNCTION,FOLLOW_ARRAYFUNCTION_in_variable_array_expression14696); if (state.failed) return retval;

                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    pushFollow(FOLLOW_ident_in_variable_array_expression14700);
                    id=ident();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_id==null) list_id=new ArrayList();
                    list_id.add(id.getTemplate());

                    pushFollow(FOLLOW_variable_array_argument_list_in_variable_array_expression14704);
                    vaal=variable_array_argument_list();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_vaal==null) list_vaal=new ArrayList();
                    list_vaal.add(vaal.getTemplate());


                    match(input, Token.UP, null); if (state.failed) return retval;


                    // TEMPLATE REWRITE
                    if ( state.backtracking==0 ) {
                      // 1979:9: -> template(id=$idvaal=$vaal) \"<id>[<vaal>]\"
                      {
                          retval.st = new StringTemplate(templateLib, "<id>[<vaal>]",
                        new STAttrMap().put("id", list_id).put("vaal", list_vaal));
                      }

                    }
                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "variable_array_expression"

    public static class variable_array_argument_list_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "variable_array_argument_list"
    // RSimpleTrans.g:1982:1: variable_array_argument_list : ^( PARAMS (pe+= program_expression )? ) -> template(pe=$pe) \"<pe>\";
    public final RSimpleTrans.variable_array_argument_list_return variable_array_argument_list() throws RecognitionException {
        RSimpleTrans.variable_array_argument_list_return retval = new RSimpleTrans.variable_array_argument_list_return();
        retval.start = input.LT(1);

        List list_pe=null;
        RuleReturnScope pe = null;
        try {
            // RSimpleTrans.g:1983:5: ( ^( PARAMS (pe+= program_expression )? ) -> template(pe=$pe) \"<pe>\")
            // RSimpleTrans.g:1983:9: ^( PARAMS (pe+= program_expression )? )
            {
            match(input,PARAMS,FOLLOW_PARAMS_in_variable_array_argument_list14747); if (state.failed) return retval;

            if ( input.LA(1)==Token.DOWN ) {
                match(input, Token.DOWN, null); if (state.failed) return retval;
                // RSimpleTrans.g:1983:20: (pe+= program_expression )?
                int alt244=2;
                int LA244_0 = input.LA(1);

                if ( (LA244_0==EXPR) ) {
                    alt244=1;
                }
                switch (alt244) {
                    case 1 :
                        // RSimpleTrans.g:1983:20: pe+= program_expression
                        {
                        pushFollow(FOLLOW_program_expression_in_variable_array_argument_list14751);
                        pe=program_expression();

                        state._fsp--;
                        if (state.failed) return retval;
                        if (list_pe==null) list_pe=new ArrayList();
                        list_pe.add(pe.getTemplate());


                        }
                        break;

                }


                match(input, Token.UP, null); if (state.failed) return retval;
            }


            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 1984:9: -> template(pe=$pe) \"<pe>\"
              {
                  retval.st = new StringTemplate(templateLib, "<pe>",
                new STAttrMap().put("pe", list_pe));
              }

            }
            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "variable_array_argument_list"

    public static class certain_qualified_ident_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "certain_qualified_ident"
    // RSimpleTrans.g:1991:1: certain_qualified_ident : ^( IDENTIFIER ident ident ) ;
    public final RSimpleTrans.certain_qualified_ident_return certain_qualified_ident() throws RecognitionException {
        RSimpleTrans.certain_qualified_ident_return retval = new RSimpleTrans.certain_qualified_ident_return();
        retval.start = input.LT(1);

        try {
            // RSimpleTrans.g:1992:5: ( ^( IDENTIFIER ident ident ) )
            // RSimpleTrans.g:1992:9: ^( IDENTIFIER ident ident )
            {
            match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_certain_qualified_ident14795); if (state.failed) return retval;

            match(input, Token.DOWN, null); if (state.failed) return retval;
            pushFollow(FOLLOW_ident_in_certain_qualified_ident14797);
            ident();

            state._fsp--;
            if (state.failed) return retval;
            pushFollow(FOLLOW_ident_in_certain_qualified_ident14799);
            ident();

            state._fsp--;
            if (state.failed) return retval;

            match(input, Token.UP, null); if (state.failed) return retval;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "certain_qualified_ident"

    public static class qualified_ident_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "qualified_ident"
    // RSimpleTrans.g:1995:1: qualified_ident : ^( IDENTIFIER id1+= ident (id2+= ident )? ) -> template(id1=$id1id2=$id2!=null?\".\"+$id2.get(0):$id2) \"<id1><id2>\";
    public final RSimpleTrans.qualified_ident_return qualified_ident() throws RecognitionException {
        RSimpleTrans.qualified_ident_return retval = new RSimpleTrans.qualified_ident_return();
        retval.start = input.LT(1);

        List list_id1=null;
        List list_id2=null;
        RuleReturnScope id1 = null;
        RuleReturnScope id2 = null;
        try {
            // RSimpleTrans.g:1996:5: ( ^( IDENTIFIER id1+= ident (id2+= ident )? ) -> template(id1=$id1id2=$id2!=null?\".\"+$id2.get(0):$id2) \"<id1><id2>\")
            // RSimpleTrans.g:1996:9: ^( IDENTIFIER id1+= ident (id2+= ident )? )
            {
            match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_qualified_ident14820); if (state.failed) return retval;

            match(input, Token.DOWN, null); if (state.failed) return retval;
            pushFollow(FOLLOW_ident_in_qualified_ident14824);
            id1=ident();

            state._fsp--;
            if (state.failed) return retval;
            if (list_id1==null) list_id1=new ArrayList();
            list_id1.add(id1.getTemplate());

            // RSimpleTrans.g:1996:36: (id2+= ident )?
            int alt245=2;
            int LA245_0 = input.LA(1);

            if ( (LA245_0==IDENTIFIER) ) {
                alt245=1;
            }
            switch (alt245) {
                case 1 :
                    // RSimpleTrans.g:1996:36: id2+= ident
                    {
                    pushFollow(FOLLOW_ident_in_qualified_ident14828);
                    id2=ident();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_id2==null) list_id2=new ArrayList();
                    list_id2.add(id2.getTemplate());


                    }
                    break;

            }


            match(input, Token.UP, null); if (state.failed) return retval;


            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 1997:9: -> template(id1=$id1id2=$id2!=null?\".\"+$id2.get(0):$id2) \"<id1><id2>\"
              {
                  retval.st = new StringTemplate(templateLib, "<id1><id2>",
                new STAttrMap().put("id1", list_id1).put("id2", list_id2!=null?"."+list_id2.get(0):list_id2));
              }

            }
            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "qualified_ident"

    public static class ident_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "ident"
    // RSimpleTrans.g:2000:1: ident : IDENTIFIER -> {!$IDENTIFIER.getText().equals(\"Main\")}? template(id=$IDENTIFIER.textln=adj[0]in=adj[1]) \"<ln><in><id>\" -> template(ln=adj[0]in=adj[1]) \"<ln><in>main\";
    public final RSimpleTrans.ident_return ident() throws RecognitionException {
        RSimpleTrans.ident_return retval = new RSimpleTrans.ident_return();
        retval.start = input.LT(1);

        CommonTree IDENTIFIER40=null;


        String[] adj = {"",""};

        try {
            // RSimpleTrans.g:2004:5: ( IDENTIFIER -> {!$IDENTIFIER.getText().equals(\"Main\")}? template(id=$IDENTIFIER.textln=adj[0]in=adj[1]) \"<ln><in><id>\" -> template(ln=adj[0]in=adj[1]) \"<ln><in>main\")
            // RSimpleTrans.g:2004:9: IDENTIFIER
            {
            IDENTIFIER40=(CommonTree)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_ident14876); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              adj = adjustLine(IDENTIFIER40);
            }


            // TEMPLATE REWRITE
            if ( state.backtracking==0 ) {
              // 2006:9: -> {!$IDENTIFIER.getText().equals(\"Main\")}? template(id=$IDENTIFIER.textln=adj[0]in=adj[1]) \"<ln><in><id>\"
              if (!IDENTIFIER40.getText().equals("Main")) {
                  retval.st = new StringTemplate(templateLib, "<ln><in><id>",
                new STAttrMap().put("id", (IDENTIFIER40!=null?IDENTIFIER40.getText():null)).put("ln", adj[0]).put("in", adj[1]));
              }
              else // 2007:9: -> template(ln=adj[0]in=adj[1]) \"<ln><in>main\"
              {
                  retval.st = new StringTemplate(templateLib, "<ln><in>main",
                new STAttrMap().put("ln", adj[0]).put("in", adj[1]));
              }

            }
            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "ident"

    public static class math_theorem_ident_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "math_theorem_ident"
    // RSimpleTrans.g:2010:1: math_theorem_ident : ( ident | NUMERIC_LITERAL );
    public final RSimpleTrans.math_theorem_ident_return math_theorem_ident() throws RecognitionException {
        RSimpleTrans.math_theorem_ident_return retval = new RSimpleTrans.math_theorem_ident_return();
        retval.start = input.LT(1);

        try {
            // RSimpleTrans.g:2011:5: ( ident | NUMERIC_LITERAL )
            int alt246=2;
            int LA246_0 = input.LA(1);

            if ( (LA246_0==IDENTIFIER) ) {
                alt246=1;
            }
            else if ( (LA246_0==NUMERIC_LITERAL) ) {
                alt246=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 246, 0, input);

                throw nvae;
            }
            switch (alt246) {
                case 1 :
                    // RSimpleTrans.g:2011:9: ident
                    {
                    pushFollow(FOLLOW_ident_in_math_theorem_ident14956);
                    ident();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // RSimpleTrans.g:2012:9: NUMERIC_LITERAL
                    {
                    match(input,NUMERIC_LITERAL,FOLLOW_NUMERIC_LITERAL_in_math_theorem_ident14966); if (state.failed) return retval;

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "math_theorem_ident"

    public static class proof_module_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "proof_module"
    // RSimpleTrans.g:2019:1: proof_module : ^( PROOFS_FOR id1= ident ( module_formal_param_section )? ( uses_list )? ) ;
    public final RSimpleTrans.proof_module_return proof_module() throws RecognitionException {
        RSimpleTrans.proof_module_return retval = new RSimpleTrans.proof_module_return();
        retval.start = input.LT(1);

        RSimpleTrans.ident_return id1 = null;


        try {
            // RSimpleTrans.g:2020:5: ( ^( PROOFS_FOR id1= ident ( module_formal_param_section )? ( uses_list )? ) )
            // RSimpleTrans.g:2020:9: ^( PROOFS_FOR id1= ident ( module_formal_param_section )? ( uses_list )? )
            {
            match(input,PROOFS_FOR,FOLLOW_PROOFS_FOR_in_proof_module14994); if (state.failed) return retval;

            match(input, Token.DOWN, null); if (state.failed) return retval;
            pushFollow(FOLLOW_ident_in_proof_module14998);
            id1=ident();

            state._fsp--;
            if (state.failed) return retval;
            // RSimpleTrans.g:2021:9: ( module_formal_param_section )?
            int alt247=2;
            int LA247_0 = input.LA(1);

            if ( (LA247_0==PARAMS) ) {
                alt247=1;
            }
            switch (alt247) {
                case 1 :
                    // RSimpleTrans.g:2021:9: module_formal_param_section
                    {
                    pushFollow(FOLLOW_module_formal_param_section_in_proof_module15009);
                    module_formal_param_section();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }

            // RSimpleTrans.g:2022:9: ( uses_list )?
            int alt248=2;
            int LA248_0 = input.LA(1);

            if ( (LA248_0==USES) ) {
                alt248=1;
            }
            switch (alt248) {
                case 1 :
                    // RSimpleTrans.g:2022:9: uses_list
                    {
                    pushFollow(FOLLOW_uses_list_in_proof_module15020);
                    uses_list();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            match(input, Token.UP, null); if (state.failed) return retval;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "proof_module"

    public static class proof_module_body_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "proof_module_body"
    // RSimpleTrans.g:2027:1: proof_module_body : ( ^( PROOFBODY math_item_sequence ) | ^( PROOFBODY proof ) );
    public final RSimpleTrans.proof_module_body_return proof_module_body() throws RecognitionException {
        RSimpleTrans.proof_module_body_return retval = new RSimpleTrans.proof_module_body_return();
        retval.start = input.LT(1);

        try {
            // RSimpleTrans.g:2028:5: ( ^( PROOFBODY math_item_sequence ) | ^( PROOFBODY proof ) )
            int alt249=2;
            int LA249_0 = input.LA(1);

            if ( (LA249_0==PROOFBODY) ) {
                int LA249_1 = input.LA(2);

                if ( (LA249_1==DOWN) ) {
                    int LA249_2 = input.LA(3);

                    if ( (LA249_2==AXIOM||LA249_2==COMMUTATIVITY||LA249_2==COROLLARY||LA249_2==DEFINITION||LA249_2==LEMMA||LA249_2==PROPERTY||LA249_2==THEOREM||LA249_2==CATEGORICAL_DEFINITION||LA249_2==IMPLICIT_DEF||LA249_2==INDUCTIVE_DEF||(LA249_2>=LOCAL_MATH_TYPE && LA249_2<=MATH_TYPE)||LA249_2==MATH_SUBTYPE) ) {
                        alt249=1;
                    }
                    else if ( (LA249_2==PROOF) ) {
                        alt249=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 249, 2, input);

                        throw nvae;
                    }
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 249, 1, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 249, 0, input);

                throw nvae;
            }
            switch (alt249) {
                case 1 :
                    // RSimpleTrans.g:2028:9: ^( PROOFBODY math_item_sequence )
                    {
                    match(input,PROOFBODY,FOLLOW_PROOFBODY_in_proof_module_body15065); if (state.failed) return retval;

                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    pushFollow(FOLLOW_math_item_sequence_in_proof_module_body15067);
                    math_item_sequence();

                    state._fsp--;
                    if (state.failed) return retval;

                    match(input, Token.UP, null); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // RSimpleTrans.g:2029:9: ^( PROOFBODY proof )
                    {
                    match(input,PROOFBODY,FOLLOW_PROOFBODY_in_proof_module_body15079); if (state.failed) return retval;

                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    pushFollow(FOLLOW_proof_in_proof_module_body15081);
                    proof();

                    state._fsp--;
                    if (state.failed) return retval;

                    match(input, Token.UP, null); if (state.failed) return retval;

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "proof_module_body"

    public static class proof_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "proof"
    // RSimpleTrans.g:2032:1: proof : ^( PROOF math_item_reference ( ( LSQBRACK IDENTIFIER RSQBRACK LPAREN BASECASE )=> base_case_statement_head | ( LPAREN BASECASE )=> base_case_statement_body | ( LSQBRACK IDENTIFIER RSQBRACK LPAREN INDUCTIVECASE )=> inductive_case_statement_head | ( LPAREN INDUCTIVECASE )=> inductive_case_statement_body | ( LSQBRACK IDENTIFIER RSQBRACK )=> headed_proof_expression | proof_expression )* ) ;
    public final RSimpleTrans.proof_return proof() throws RecognitionException {
        RSimpleTrans.proof_return retval = new RSimpleTrans.proof_return();
        retval.start = input.LT(1);

        try {
            // RSimpleTrans.g:2033:5: ( ^( PROOF math_item_reference ( ( LSQBRACK IDENTIFIER RSQBRACK LPAREN BASECASE )=> base_case_statement_head | ( LPAREN BASECASE )=> base_case_statement_body | ( LSQBRACK IDENTIFIER RSQBRACK LPAREN INDUCTIVECASE )=> inductive_case_statement_head | ( LPAREN INDUCTIVECASE )=> inductive_case_statement_body | ( LSQBRACK IDENTIFIER RSQBRACK )=> headed_proof_expression | proof_expression )* ) )
            // RSimpleTrans.g:2033:9: ^( PROOF math_item_reference ( ( LSQBRACK IDENTIFIER RSQBRACK LPAREN BASECASE )=> base_case_statement_head | ( LPAREN BASECASE )=> base_case_statement_body | ( LSQBRACK IDENTIFIER RSQBRACK LPAREN INDUCTIVECASE )=> inductive_case_statement_head | ( LPAREN INDUCTIVECASE )=> inductive_case_statement_body | ( LSQBRACK IDENTIFIER RSQBRACK )=> headed_proof_expression | proof_expression )* )
            {
            match(input,PROOF,FOLLOW_PROOF_in_proof15106); if (state.failed) return retval;

            match(input, Token.DOWN, null); if (state.failed) return retval;
            pushFollow(FOLLOW_math_item_reference_in_proof15117);
            math_item_reference();

            state._fsp--;
            if (state.failed) return retval;
            // RSimpleTrans.g:2036:9: ( ( LSQBRACK IDENTIFIER RSQBRACK LPAREN BASECASE )=> base_case_statement_head | ( LPAREN BASECASE )=> base_case_statement_body | ( LSQBRACK IDENTIFIER RSQBRACK LPAREN INDUCTIVECASE )=> inductive_case_statement_head | ( LPAREN INDUCTIVECASE )=> inductive_case_statement_body | ( LSQBRACK IDENTIFIER RSQBRACK )=> headed_proof_expression | proof_expression )*
            loop250:
            do {
                int alt250=7;
                alt250 = dfa250.predict(input);
                switch (alt250) {
            	case 1 :
            	    // RSimpleTrans.g:2036:11: ( LSQBRACK IDENTIFIER RSQBRACK LPAREN BASECASE )=> base_case_statement_head
            	    {
            	    pushFollow(FOLLOW_base_case_statement_head_in_proof15152);
            	    base_case_statement_head();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }
            	    break;
            	case 2 :
            	    // RSimpleTrans.g:2037:11: ( LPAREN BASECASE )=> base_case_statement_body
            	    {
            	    pushFollow(FOLLOW_base_case_statement_body_in_proof15172);
            	    base_case_statement_body();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }
            	    break;
            	case 3 :
            	    // RSimpleTrans.g:2038:11: ( LSQBRACK IDENTIFIER RSQBRACK LPAREN INDUCTIVECASE )=> inductive_case_statement_head
            	    {
            	    pushFollow(FOLLOW_inductive_case_statement_head_in_proof15198);
            	    inductive_case_statement_head();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }
            	    break;
            	case 4 :
            	    // RSimpleTrans.g:2039:11: ( LPAREN INDUCTIVECASE )=> inductive_case_statement_body
            	    {
            	    pushFollow(FOLLOW_inductive_case_statement_body_in_proof15218);
            	    inductive_case_statement_body();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }
            	    break;
            	case 5 :
            	    // RSimpleTrans.g:2040:11: ( LSQBRACK IDENTIFIER RSQBRACK )=> headed_proof_expression
            	    {
            	    pushFollow(FOLLOW_headed_proof_expression_in_proof15240);
            	    headed_proof_expression();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }
            	    break;
            	case 6 :
            	    // RSimpleTrans.g:2041:11: proof_expression
            	    {
            	    pushFollow(FOLLOW_proof_expression_in_proof15252);
            	    proof_expression();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }
            	    break;

            	default :
            	    break loop250;
                }
            } while (true);


            match(input, Token.UP, null); if (state.failed) return retval;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "proof"

    public static class base_case_statement_head_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "base_case_statement_head"
    // RSimpleTrans.g:2045:1: base_case_statement_head : ^( IDENTIFIER base_case_statement_body ) ;
    public final RSimpleTrans.base_case_statement_head_return base_case_statement_head() throws RecognitionException {
        RSimpleTrans.base_case_statement_head_return retval = new RSimpleTrans.base_case_statement_head_return();
        retval.start = input.LT(1);

        try {
            // RSimpleTrans.g:2046:5: ( ^( IDENTIFIER base_case_statement_body ) )
            // RSimpleTrans.g:2046:10: ^( IDENTIFIER base_case_statement_body )
            {
            match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_base_case_statement_head15290); if (state.failed) return retval;

            match(input, Token.DOWN, null); if (state.failed) return retval;
            pushFollow(FOLLOW_base_case_statement_body_in_base_case_statement_head15293);
            base_case_statement_body();

            state._fsp--;
            if (state.failed) return retval;

            match(input, Token.UP, null); if (state.failed) return retval;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "base_case_statement_head"

    public static class base_case_statement_body_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "base_case_statement_body"
    // RSimpleTrans.g:2049:1: base_case_statement_body : ^( BASECASE proof_expression ) ;
    public final RSimpleTrans.base_case_statement_body_return base_case_statement_body() throws RecognitionException {
        RSimpleTrans.base_case_statement_body_return retval = new RSimpleTrans.base_case_statement_body_return();
        retval.start = input.LT(1);

        try {
            // RSimpleTrans.g:2050:5: ( ^( BASECASE proof_expression ) )
            // RSimpleTrans.g:2050:10: ^( BASECASE proof_expression )
            {
            match(input,BASECASE,FOLLOW_BASECASE_in_base_case_statement_body15319); if (state.failed) return retval;

            match(input, Token.DOWN, null); if (state.failed) return retval;
            pushFollow(FOLLOW_proof_expression_in_base_case_statement_body15322);
            proof_expression();

            state._fsp--;
            if (state.failed) return retval;

            match(input, Token.UP, null); if (state.failed) return retval;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "base_case_statement_body"

    public static class inductive_case_statement_head_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "inductive_case_statement_head"
    // RSimpleTrans.g:2053:1: inductive_case_statement_head : ^( IDENTIFIER inductive_case_statement_body ) ;
    public final RSimpleTrans.inductive_case_statement_head_return inductive_case_statement_head() throws RecognitionException {
        RSimpleTrans.inductive_case_statement_head_return retval = new RSimpleTrans.inductive_case_statement_head_return();
        retval.start = input.LT(1);

        try {
            // RSimpleTrans.g:2054:5: ( ^( IDENTIFIER inductive_case_statement_body ) )
            // RSimpleTrans.g:2054:10: ^( IDENTIFIER inductive_case_statement_body )
            {
            match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_inductive_case_statement_head15348); if (state.failed) return retval;

            match(input, Token.DOWN, null); if (state.failed) return retval;
            pushFollow(FOLLOW_inductive_case_statement_body_in_inductive_case_statement_head15351);
            inductive_case_statement_body();

            state._fsp--;
            if (state.failed) return retval;

            match(input, Token.UP, null); if (state.failed) return retval;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "inductive_case_statement_head"

    public static class inductive_case_statement_body_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "inductive_case_statement_body"
    // RSimpleTrans.g:2057:1: inductive_case_statement_body : ^( INDUCTIVECASE proof_expression ) ;
    public final RSimpleTrans.inductive_case_statement_body_return inductive_case_statement_body() throws RecognitionException {
        RSimpleTrans.inductive_case_statement_body_return retval = new RSimpleTrans.inductive_case_statement_body_return();
        retval.start = input.LT(1);

        try {
            // RSimpleTrans.g:2058:5: ( ^( INDUCTIVECASE proof_expression ) )
            // RSimpleTrans.g:2058:10: ^( INDUCTIVECASE proof_expression )
            {
            match(input,INDUCTIVECASE,FOLLOW_INDUCTIVECASE_in_inductive_case_statement_body15377); if (state.failed) return retval;

            match(input, Token.DOWN, null); if (state.failed) return retval;
            pushFollow(FOLLOW_proof_expression_in_inductive_case_statement_body15380);
            proof_expression();

            state._fsp--;
            if (state.failed) return retval;

            match(input, Token.UP, null); if (state.failed) return retval;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "inductive_case_statement_body"

    public static class math_item_reference_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "math_item_reference"
    // RSimpleTrans.g:2061:1: math_item_reference : ( ^( MATHITEMREF theorem_name ) | ^( MATHITEMREF lemma_name ) | ^( MATHITEMREF property_name ) | ^( MATHITEMREF corollary_name ) ) ;
    public final RSimpleTrans.math_item_reference_return math_item_reference() throws RecognitionException {
        RSimpleTrans.math_item_reference_return retval = new RSimpleTrans.math_item_reference_return();
        retval.start = input.LT(1);

        try {
            // RSimpleTrans.g:2062:5: ( ( ^( MATHITEMREF theorem_name ) | ^( MATHITEMREF lemma_name ) | ^( MATHITEMREF property_name ) | ^( MATHITEMREF corollary_name ) ) )
            // RSimpleTrans.g:2063:5: ( ^( MATHITEMREF theorem_name ) | ^( MATHITEMREF lemma_name ) | ^( MATHITEMREF property_name ) | ^( MATHITEMREF corollary_name ) )
            {
            // RSimpleTrans.g:2063:5: ( ^( MATHITEMREF theorem_name ) | ^( MATHITEMREF lemma_name ) | ^( MATHITEMREF property_name ) | ^( MATHITEMREF corollary_name ) )
            int alt251=4;
            int LA251_0 = input.LA(1);

            if ( (LA251_0==MATHITEMREF) ) {
                int LA251_1 = input.LA(2);

                if ( (LA251_1==DOWN) ) {
                    switch ( input.LA(3) ) {
                    case THEOREM:
                        {
                        alt251=1;
                        }
                        break;
                    case LEMMA:
                        {
                        alt251=2;
                        }
                        break;
                    case PROPERTY:
                        {
                        alt251=3;
                        }
                        break;
                    case COROLLARY:
                        {
                        alt251=4;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 251, 2, input);

                        throw nvae;
                    }

                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 251, 1, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 251, 0, input);

                throw nvae;
            }
            switch (alt251) {
                case 1 :
                    // RSimpleTrans.g:2063:9: ^( MATHITEMREF theorem_name )
                    {
                    match(input,MATHITEMREF,FOLLOW_MATHITEMREF_in_math_item_reference15407); if (state.failed) return retval;

                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    pushFollow(FOLLOW_theorem_name_in_math_item_reference15409);
                    theorem_name();

                    state._fsp--;
                    if (state.failed) return retval;

                    match(input, Token.UP, null); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // RSimpleTrans.g:2064:9: ^( MATHITEMREF lemma_name )
                    {
                    match(input,MATHITEMREF,FOLLOW_MATHITEMREF_in_math_item_reference15421); if (state.failed) return retval;

                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    pushFollow(FOLLOW_lemma_name_in_math_item_reference15423);
                    lemma_name();

                    state._fsp--;
                    if (state.failed) return retval;

                    match(input, Token.UP, null); if (state.failed) return retval;

                    }
                    break;
                case 3 :
                    // RSimpleTrans.g:2065:9: ^( MATHITEMREF property_name )
                    {
                    match(input,MATHITEMREF,FOLLOW_MATHITEMREF_in_math_item_reference15435); if (state.failed) return retval;

                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    pushFollow(FOLLOW_property_name_in_math_item_reference15437);
                    property_name();

                    state._fsp--;
                    if (state.failed) return retval;

                    match(input, Token.UP, null); if (state.failed) return retval;

                    }
                    break;
                case 4 :
                    // RSimpleTrans.g:2066:9: ^( MATHITEMREF corollary_name )
                    {
                    match(input,MATHITEMREF,FOLLOW_MATHITEMREF_in_math_item_reference15449); if (state.failed) return retval;

                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    pushFollow(FOLLOW_corollary_name_in_math_item_reference15451);
                    corollary_name();

                    state._fsp--;
                    if (state.failed) return retval;

                    match(input, Token.UP, null); if (state.failed) return retval;

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "math_item_reference"

    public static class theorem_name_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "theorem_name"
    // RSimpleTrans.g:2070:1: theorem_name : ^( THEOREM ident ) ;
    public final RSimpleTrans.theorem_name_return theorem_name() throws RecognitionException {
        RSimpleTrans.theorem_name_return retval = new RSimpleTrans.theorem_name_return();
        retval.start = input.LT(1);

        try {
            // RSimpleTrans.g:2071:5: ( ^( THEOREM ident ) )
            // RSimpleTrans.g:2071:9: ^( THEOREM ident )
            {
            match(input,THEOREM,FOLLOW_THEOREM_in_theorem_name15482); if (state.failed) return retval;

            match(input, Token.DOWN, null); if (state.failed) return retval;
            pushFollow(FOLLOW_ident_in_theorem_name15484);
            ident();

            state._fsp--;
            if (state.failed) return retval;

            match(input, Token.UP, null); if (state.failed) return retval;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "theorem_name"

    public static class lemma_name_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "lemma_name"
    // RSimpleTrans.g:2074:1: lemma_name : ^( LEMMA ident ) ;
    public final RSimpleTrans.lemma_name_return lemma_name() throws RecognitionException {
        RSimpleTrans.lemma_name_return retval = new RSimpleTrans.lemma_name_return();
        retval.start = input.LT(1);

        try {
            // RSimpleTrans.g:2075:5: ( ^( LEMMA ident ) )
            // RSimpleTrans.g:2075:9: ^( LEMMA ident )
            {
            match(input,LEMMA,FOLLOW_LEMMA_in_lemma_name15509); if (state.failed) return retval;

            match(input, Token.DOWN, null); if (state.failed) return retval;
            pushFollow(FOLLOW_ident_in_lemma_name15511);
            ident();

            state._fsp--;
            if (state.failed) return retval;

            match(input, Token.UP, null); if (state.failed) return retval;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "lemma_name"

    public static class property_name_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "property_name"
    // RSimpleTrans.g:2078:1: property_name : ^( PROPERTY ident ) ;
    public final RSimpleTrans.property_name_return property_name() throws RecognitionException {
        RSimpleTrans.property_name_return retval = new RSimpleTrans.property_name_return();
        retval.start = input.LT(1);

        try {
            // RSimpleTrans.g:2079:5: ( ^( PROPERTY ident ) )
            // RSimpleTrans.g:2079:9: ^( PROPERTY ident )
            {
            match(input,PROPERTY,FOLLOW_PROPERTY_in_property_name15532); if (state.failed) return retval;

            match(input, Token.DOWN, null); if (state.failed) return retval;
            pushFollow(FOLLOW_ident_in_property_name15534);
            ident();

            state._fsp--;
            if (state.failed) return retval;

            match(input, Token.UP, null); if (state.failed) return retval;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "property_name"

    public static class corollary_name_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "corollary_name"
    // RSimpleTrans.g:2082:1: corollary_name : ^( COROLLARY math_theorem_ident ) ;
    public final RSimpleTrans.corollary_name_return corollary_name() throws RecognitionException {
        RSimpleTrans.corollary_name_return retval = new RSimpleTrans.corollary_name_return();
        retval.start = input.LT(1);

        try {
            // RSimpleTrans.g:2083:5: ( ^( COROLLARY math_theorem_ident ) )
            // RSimpleTrans.g:2083:9: ^( COROLLARY math_theorem_ident )
            {
            match(input,COROLLARY,FOLLOW_COROLLARY_in_corollary_name15559); if (state.failed) return retval;

            match(input, Token.DOWN, null); if (state.failed) return retval;
            pushFollow(FOLLOW_math_theorem_ident_in_corollary_name15561);
            math_theorem_ident();

            state._fsp--;
            if (state.failed) return retval;

            match(input, Token.UP, null); if (state.failed) return retval;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "corollary_name"

    public static class proof_expression_list_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "proof_expression_list"
    // RSimpleTrans.g:2086:1: proof_expression_list : ^( PROOFEXPRLIST ( ( IDENTIFIER )=> headed_proof_expression | proof_expression )* ) ;
    public final RSimpleTrans.proof_expression_list_return proof_expression_list() throws RecognitionException {
        RSimpleTrans.proof_expression_list_return retval = new RSimpleTrans.proof_expression_list_return();
        retval.start = input.LT(1);

        try {
            // RSimpleTrans.g:2087:5: ( ^( PROOFEXPRLIST ( ( IDENTIFIER )=> headed_proof_expression | proof_expression )* ) )
            // RSimpleTrans.g:2087:9: ^( PROOFEXPRLIST ( ( IDENTIFIER )=> headed_proof_expression | proof_expression )* )
            {
            match(input,PROOFEXPRLIST,FOLLOW_PROOFEXPRLIST_in_proof_expression_list15586); if (state.failed) return retval;

            if ( input.LA(1)==Token.DOWN ) {
                match(input, Token.DOWN, null); if (state.failed) return retval;
                // RSimpleTrans.g:2088:5: ( ( IDENTIFIER )=> headed_proof_expression | proof_expression )*
                loop252:
                do {
                    int alt252=3;
                    int LA252_0 = input.LA(1);

                    if ( (LA252_0==IDENTIFIER) && (synpred17_RSimpleTrans())) {
                        alt252=1;
                    }
                    else if ( (LA252_0==DEFINITION||(LA252_0>=SUPDEDUC && LA252_0<=SIMPLIFICATION)||LA252_0==GOAL) ) {
                        alt252=2;
                    }


                    switch (alt252) {
                	case 1 :
                	    // RSimpleTrans.g:2088:7: ( IDENTIFIER )=> headed_proof_expression
                	    {
                	    pushFollow(FOLLOW_headed_proof_expression_in_proof_expression_list15600);
                	    headed_proof_expression();

                	    state._fsp--;
                	    if (state.failed) return retval;

                	    }
                	    break;
                	case 2 :
                	    // RSimpleTrans.g:2089:7: proof_expression
                	    {
                	    pushFollow(FOLLOW_proof_expression_in_proof_expression_list15608);
                	    proof_expression();

                	    state._fsp--;
                	    if (state.failed) return retval;

                	    }
                	    break;

                	default :
                	    break loop252;
                    }
                } while (true);


                match(input, Token.UP, null); if (state.failed) return retval;
            }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "proof_expression_list"

    public static class headed_proof_expression_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "headed_proof_expression"
    // RSimpleTrans.g:2093:1: headed_proof_expression : ^( IDENTIFIER proof_expression ) ;
    public final RSimpleTrans.headed_proof_expression_return headed_proof_expression() throws RecognitionException {
        RSimpleTrans.headed_proof_expression_return retval = new RSimpleTrans.headed_proof_expression_return();
        retval.start = input.LT(1);

        try {
            // RSimpleTrans.g:2094:5: ( ^( IDENTIFIER proof_expression ) )
            // RSimpleTrans.g:2094:10: ^( IDENTIFIER proof_expression )
            {
            match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_headed_proof_expression15642); if (state.failed) return retval;

            match(input, Token.DOWN, null); if (state.failed) return retval;
            pushFollow(FOLLOW_proof_expression_in_headed_proof_expression15644);
            proof_expression();

            state._fsp--;
            if (state.failed) return retval;

            match(input, Token.UP, null); if (state.failed) return retval;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "headed_proof_expression"

    public static class proof_expression_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "proof_expression"
    // RSimpleTrans.g:2097:1: proof_expression : ( goal_declaration | standard_definition_declaration | supposition_deduction_pair | justification_declaration ) ;
    public final RSimpleTrans.proof_expression_return proof_expression() throws RecognitionException {
        RSimpleTrans.proof_expression_return retval = new RSimpleTrans.proof_expression_return();
        retval.start = input.LT(1);

        try {
            // RSimpleTrans.g:2098:5: ( ( goal_declaration | standard_definition_declaration | supposition_deduction_pair | justification_declaration ) )
            // RSimpleTrans.g:2099:5: ( goal_declaration | standard_definition_declaration | supposition_deduction_pair | justification_declaration )
            {
            // RSimpleTrans.g:2099:5: ( goal_declaration | standard_definition_declaration | supposition_deduction_pair | justification_declaration )
            int alt253=4;
            switch ( input.LA(1) ) {
            case GOAL:
                {
                alt253=1;
                }
                break;
            case DEFINITION:
                {
                alt253=2;
                }
                break;
            case SUPDEDUC:
                {
                alt253=3;
                }
                break;
            case SIMPLIFICATION:
                {
                alt253=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 253, 0, input);

                throw nvae;
            }

            switch (alt253) {
                case 1 :
                    // RSimpleTrans.g:2099:9: goal_declaration
                    {
                    pushFollow(FOLLOW_goal_declaration_in_proof_expression15670);
                    goal_declaration();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // RSimpleTrans.g:2100:9: standard_definition_declaration
                    {
                    pushFollow(FOLLOW_standard_definition_declaration_in_proof_expression15680);
                    standard_definition_declaration();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;
                case 3 :
                    // RSimpleTrans.g:2101:9: supposition_deduction_pair
                    {
                    pushFollow(FOLLOW_supposition_deduction_pair_in_proof_expression15690);
                    supposition_deduction_pair();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;
                case 4 :
                    // RSimpleTrans.g:2102:9: justification_declaration
                    {
                    pushFollow(FOLLOW_justification_declaration_in_proof_expression15700);
                    justification_declaration();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "proof_expression"

    public static class goal_declaration_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "goal_declaration"
    // RSimpleTrans.g:2106:1: goal_declaration : ^( GOAL math_expression ) ;
    public final RSimpleTrans.goal_declaration_return goal_declaration() throws RecognitionException {
        RSimpleTrans.goal_declaration_return retval = new RSimpleTrans.goal_declaration_return();
        retval.start = input.LT(1);

        try {
            // RSimpleTrans.g:2107:5: ( ^( GOAL math_expression ) )
            // RSimpleTrans.g:2107:9: ^( GOAL math_expression )
            {
            match(input,GOAL,FOLLOW_GOAL_in_goal_declaration15730); if (state.failed) return retval;

            match(input, Token.DOWN, null); if (state.failed) return retval;
            pushFollow(FOLLOW_math_expression_in_goal_declaration15732);
            math_expression();

            state._fsp--;
            if (state.failed) return retval;

            match(input, Token.UP, null); if (state.failed) return retval;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "goal_declaration"

    public static class supposition_deduction_pair_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "supposition_deduction_pair"
    // RSimpleTrans.g:2110:1: supposition_deduction_pair : ^( SUPDEDUC supposition_declaration proof_expression_list ( IDENTIFIER )? deduction_declaration ) ;
    public final RSimpleTrans.supposition_deduction_pair_return supposition_deduction_pair() throws RecognitionException {
        RSimpleTrans.supposition_deduction_pair_return retval = new RSimpleTrans.supposition_deduction_pair_return();
        retval.start = input.LT(1);

        try {
            // RSimpleTrans.g:2111:5: ( ^( SUPDEDUC supposition_declaration proof_expression_list ( IDENTIFIER )? deduction_declaration ) )
            // RSimpleTrans.g:2111:9: ^( SUPDEDUC supposition_declaration proof_expression_list ( IDENTIFIER )? deduction_declaration )
            {
            match(input,SUPDEDUC,FOLLOW_SUPDEDUC_in_supposition_deduction_pair15758); if (state.failed) return retval;

            match(input, Token.DOWN, null); if (state.failed) return retval;
            pushFollow(FOLLOW_supposition_declaration_in_supposition_deduction_pair15760);
            supposition_declaration();

            state._fsp--;
            if (state.failed) return retval;
            pushFollow(FOLLOW_proof_expression_list_in_supposition_deduction_pair15762);
            proof_expression_list();

            state._fsp--;
            if (state.failed) return retval;
            // RSimpleTrans.g:2111:66: ( IDENTIFIER )?
            int alt254=2;
            int LA254_0 = input.LA(1);

            if ( (LA254_0==IDENTIFIER) ) {
                alt254=1;
            }
            switch (alt254) {
                case 1 :
                    // RSimpleTrans.g:2111:66: IDENTIFIER
                    {
                    match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_supposition_deduction_pair15764); if (state.failed) return retval;

                    }
                    break;

            }

            pushFollow(FOLLOW_deduction_declaration_in_supposition_deduction_pair15767);
            deduction_declaration();

            state._fsp--;
            if (state.failed) return retval;

            match(input, Token.UP, null); if (state.failed) return retval;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "supposition_deduction_pair"

    public static class supposition_declaration_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "supposition_declaration"
    // RSimpleTrans.g:2114:1: supposition_declaration : ^( SUPPOSITION ( ( ( ident COLON )=> ( math_variable_declarations ( math_expression )? ) ) | ( ( ident COMMA ident )=> ( math_variable_declarations ( math_expression )? ) ) ) ) ;
    public final RSimpleTrans.supposition_declaration_return supposition_declaration() throws RecognitionException {
        RSimpleTrans.supposition_declaration_return retval = new RSimpleTrans.supposition_declaration_return();
        retval.start = input.LT(1);

        try {
            // RSimpleTrans.g:2115:5: ( ^( SUPPOSITION ( ( ( ident COLON )=> ( math_variable_declarations ( math_expression )? ) ) | ( ( ident COMMA ident )=> ( math_variable_declarations ( math_expression )? ) ) ) ) )
            // RSimpleTrans.g:2115:9: ^( SUPPOSITION ( ( ( ident COLON )=> ( math_variable_declarations ( math_expression )? ) ) | ( ( ident COMMA ident )=> ( math_variable_declarations ( math_expression )? ) ) ) )
            {
            match(input,SUPPOSITION,FOLLOW_SUPPOSITION_in_supposition_declaration15792); if (state.failed) return retval;

            match(input, Token.DOWN, null); if (state.failed) return retval;
            // RSimpleTrans.g:2116:9: ( ( ( ident COLON )=> ( math_variable_declarations ( math_expression )? ) ) | ( ( ident COMMA ident )=> ( math_variable_declarations ( math_expression )? ) ) )
            int alt257=2;
            int LA257_0 = input.LA(1);

            if ( (LA257_0==DECLARATIONS) ) {
                int LA257_1 = input.LA(2);

                if ( (synpred18_RSimpleTrans()) ) {
                    alt257=1;
                }
                else if ( (synpred19_RSimpleTrans()) ) {
                    alt257=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 257, 1, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 257, 0, input);

                throw nvae;
            }
            switch (alt257) {
                case 1 :
                    // RSimpleTrans.g:2117:11: ( ( ident COLON )=> ( math_variable_declarations ( math_expression )? ) )
                    {
                    // RSimpleTrans.g:2117:11: ( ( ident COLON )=> ( math_variable_declarations ( math_expression )? ) )
                    // RSimpleTrans.g:2117:12: ( ident COLON )=> ( math_variable_declarations ( math_expression )? )
                    {
                    // RSimpleTrans.g:2117:29: ( math_variable_declarations ( math_expression )? )
                    // RSimpleTrans.g:2117:30: math_variable_declarations ( math_expression )?
                    {
                    pushFollow(FOLLOW_math_variable_declarations_in_supposition_declaration15824);
                    math_variable_declarations();

                    state._fsp--;
                    if (state.failed) return retval;
                    // RSimpleTrans.g:2117:57: ( math_expression )?
                    int alt255=2;
                    int LA255_0 = input.LA(1);

                    if ( (LA255_0==EXPR) ) {
                        alt255=1;
                    }
                    switch (alt255) {
                        case 1 :
                            // RSimpleTrans.g:2117:59: math_expression
                            {
                            pushFollow(FOLLOW_math_expression_in_supposition_declaration15828);
                            math_expression();

                            state._fsp--;
                            if (state.failed) return retval;

                            }
                            break;

                    }


                    }


                    }


                    }
                    break;
                case 2 :
                    // RSimpleTrans.g:2118:13: ( ( ident COMMA ident )=> ( math_variable_declarations ( math_expression )? ) )
                    {
                    // RSimpleTrans.g:2118:13: ( ( ident COMMA ident )=> ( math_variable_declarations ( math_expression )? ) )
                    // RSimpleTrans.g:2118:14: ( ident COMMA ident )=> ( math_variable_declarations ( math_expression )? )
                    {
                    // RSimpleTrans.g:2118:37: ( math_variable_declarations ( math_expression )? )
                    // RSimpleTrans.g:2118:38: math_variable_declarations ( math_expression )?
                    {
                    pushFollow(FOLLOW_math_variable_declarations_in_supposition_declaration15858);
                    math_variable_declarations();

                    state._fsp--;
                    if (state.failed) return retval;
                    // RSimpleTrans.g:2118:65: ( math_expression )?
                    int alt256=2;
                    int LA256_0 = input.LA(1);

                    if ( (LA256_0==EXPR) ) {
                        alt256=1;
                    }
                    switch (alt256) {
                        case 1 :
                            // RSimpleTrans.g:2118:67: math_expression
                            {
                            pushFollow(FOLLOW_math_expression_in_supposition_declaration15862);
                            math_expression();

                            state._fsp--;
                            if (state.failed) return retval;

                            }
                            break;

                    }


                    }


                    }


                    }
                    break;

            }


            match(input, Token.UP, null); if (state.failed) return retval;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "supposition_declaration"

    public static class math_variable_declarations_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "math_variable_declarations"
    // RSimpleTrans.g:2123:1: math_variable_declarations : ^( DECLARATIONS ( math_variable_declaration_group )+ ) ;
    public final RSimpleTrans.math_variable_declarations_return math_variable_declarations() throws RecognitionException {
        RSimpleTrans.math_variable_declarations_return retval = new RSimpleTrans.math_variable_declarations_return();
        retval.start = input.LT(1);

        try {
            // RSimpleTrans.g:2124:5: ( ^( DECLARATIONS ( math_variable_declaration_group )+ ) )
            // RSimpleTrans.g:2124:9: ^( DECLARATIONS ( math_variable_declaration_group )+ )
            {
            match(input,DECLARATIONS,FOLLOW_DECLARATIONS_in_math_variable_declarations15912); if (state.failed) return retval;

            match(input, Token.DOWN, null); if (state.failed) return retval;
            // RSimpleTrans.g:2124:24: ( math_variable_declaration_group )+
            int cnt258=0;
            loop258:
            do {
                int alt258=2;
                int LA258_0 = input.LA(1);

                if ( (LA258_0==IDENTIFIER) ) {
                    alt258=1;
                }


                switch (alt258) {
            	case 1 :
            	    // RSimpleTrans.g:2124:24: math_variable_declaration_group
            	    {
            	    pushFollow(FOLLOW_math_variable_declaration_group_in_math_variable_declarations15914);
            	    math_variable_declaration_group();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }
            	    break;

            	default :
            	    if ( cnt258 >= 1 ) break loop258;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(258, input);
                        throw eee;
                }
                cnt258++;
            } while (true);


            match(input, Token.UP, null); if (state.failed) return retval;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "math_variable_declarations"

    public static class deduction_declaration_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "deduction_declaration"
    // RSimpleTrans.g:2127:1: deduction_declaration : ^( DEDUCTION math_expression ) ;
    public final RSimpleTrans.deduction_declaration_return deduction_declaration() throws RecognitionException {
        RSimpleTrans.deduction_declaration_return retval = new RSimpleTrans.deduction_declaration_return();
        retval.start = input.LT(1);

        try {
            // RSimpleTrans.g:2128:5: ( ^( DEDUCTION math_expression ) )
            // RSimpleTrans.g:2128:9: ^( DEDUCTION math_expression )
            {
            match(input,DEDUCTION,FOLLOW_DEDUCTION_in_deduction_declaration15940); if (state.failed) return retval;

            match(input, Token.DOWN, null); if (state.failed) return retval;
            pushFollow(FOLLOW_math_expression_in_deduction_declaration15942);
            math_expression();

            state._fsp--;
            if (state.failed) return retval;

            match(input, Token.UP, null); if (state.failed) return retval;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "deduction_declaration"

    public static class justification_declaration_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "justification_declaration"
    // RSimpleTrans.g:2131:1: justification_declaration : ^( SIMPLIFICATION math_expression justification ) ;
    public final RSimpleTrans.justification_declaration_return justification_declaration() throws RecognitionException {
        RSimpleTrans.justification_declaration_return retval = new RSimpleTrans.justification_declaration_return();
        retval.start = input.LT(1);

        try {
            // RSimpleTrans.g:2132:5: ( ^( SIMPLIFICATION math_expression justification ) )
            // RSimpleTrans.g:2132:9: ^( SIMPLIFICATION math_expression justification )
            {
            match(input,SIMPLIFICATION,FOLLOW_SIMPLIFICATION_in_justification_declaration15967); if (state.failed) return retval;

            match(input, Token.DOWN, null); if (state.failed) return retval;
            pushFollow(FOLLOW_math_expression_in_justification_declaration15969);
            math_expression();

            state._fsp--;
            if (state.failed) return retval;
            pushFollow(FOLLOW_justification_in_justification_declaration15971);
            justification();

            state._fsp--;
            if (state.failed) return retval;

            match(input, Token.UP, null); if (state.failed) return retval;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "justification_declaration"

    public static class justification_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "justification"
    // RSimpleTrans.g:2135:1: justification : ^( BY ( ( hyp_desig COMMA )=> double_hyp_rule_justification | ( hyp_desig AMPERSAND )=> single_hyp_rule_justification | ( hyp_desig )=> hyp_desig | simple_justification | ( DEFINITION )=> def_justification ) ) ;
    public final RSimpleTrans.justification_return justification() throws RecognitionException {
        RSimpleTrans.justification_return retval = new RSimpleTrans.justification_return();
        retval.start = input.LT(1);

        try {
            // RSimpleTrans.g:2136:5: ( ^( BY ( ( hyp_desig COMMA )=> double_hyp_rule_justification | ( hyp_desig AMPERSAND )=> single_hyp_rule_justification | ( hyp_desig )=> hyp_desig | simple_justification | ( DEFINITION )=> def_justification ) ) )
            // RSimpleTrans.g:2136:9: ^( BY ( ( hyp_desig COMMA )=> double_hyp_rule_justification | ( hyp_desig AMPERSAND )=> single_hyp_rule_justification | ( hyp_desig )=> hyp_desig | simple_justification | ( DEFINITION )=> def_justification ) )
            {
            match(input,BY,FOLLOW_BY_in_justification15996); if (state.failed) return retval;

            match(input, Token.DOWN, null); if (state.failed) return retval;
            // RSimpleTrans.g:2137:9: ( ( hyp_desig COMMA )=> double_hyp_rule_justification | ( hyp_desig AMPERSAND )=> single_hyp_rule_justification | ( hyp_desig )=> hyp_desig | simple_justification | ( DEFINITION )=> def_justification )
            int alt259=5;
            alt259 = dfa259.predict(input);
            switch (alt259) {
                case 1 :
                    // RSimpleTrans.g:2137:11: ( hyp_desig COMMA )=> double_hyp_rule_justification
                    {
                    pushFollow(FOLLOW_double_hyp_rule_justification_in_justification16016);
                    double_hyp_rule_justification();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // RSimpleTrans.g:2138:9: ( hyp_desig AMPERSAND )=> single_hyp_rule_justification
                    {
                    pushFollow(FOLLOW_single_hyp_rule_justification_in_justification16034);
                    single_hyp_rule_justification();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;
                case 3 :
                    // RSimpleTrans.g:2139:9: ( hyp_desig )=> hyp_desig
                    {
                    pushFollow(FOLLOW_hyp_desig_in_justification16050);
                    hyp_desig();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;
                case 4 :
                    // RSimpleTrans.g:2140:9: simple_justification
                    {
                    pushFollow(FOLLOW_simple_justification_in_justification16060);
                    simple_justification();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;
                case 5 :
                    // RSimpleTrans.g:2141:9: ( DEFINITION )=> def_justification
                    {
                    pushFollow(FOLLOW_def_justification_in_justification16076);
                    def_justification();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            match(input, Token.UP, null); if (state.failed) return retval;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "justification"

    public static class double_hyp_rule_justification_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "double_hyp_rule_justification"
    // RSimpleTrans.g:2146:1: double_hyp_rule_justification : hyp_desig hyp_desig ( rules_set_1 )? ;
    public final RSimpleTrans.double_hyp_rule_justification_return double_hyp_rule_justification() throws RecognitionException {
        RSimpleTrans.double_hyp_rule_justification_return retval = new RSimpleTrans.double_hyp_rule_justification_return();
        retval.start = input.LT(1);

        try {
            // RSimpleTrans.g:2147:5: ( hyp_desig hyp_desig ( rules_set_1 )? )
            // RSimpleTrans.g:2147:9: hyp_desig hyp_desig ( rules_set_1 )?
            {
            pushFollow(FOLLOW_hyp_desig_in_double_hyp_rule_justification16112);
            hyp_desig();

            state._fsp--;
            if (state.failed) return retval;
            pushFollow(FOLLOW_hyp_desig_in_double_hyp_rule_justification16115);
            hyp_desig();

            state._fsp--;
            if (state.failed) return retval;
            // RSimpleTrans.g:2148:7: ( rules_set_1 )?
            int alt260=2;
            int LA260_0 = input.LA(1);

            if ( (LA260_0==RULE1) ) {
                alt260=1;
            }
            switch (alt260) {
                case 1 :
                    // RSimpleTrans.g:2148:9: rules_set_1
                    {
                    pushFollow(FOLLOW_rules_set_1_in_double_hyp_rule_justification16125);
                    rules_set_1();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "double_hyp_rule_justification"

    public static class single_hyp_rule_justification_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "single_hyp_rule_justification"
    // RSimpleTrans.g:2151:1: single_hyp_rule_justification : hyp_desig ( rules_set_1 | rules_set_2 | def_justification ) ;
    public final RSimpleTrans.single_hyp_rule_justification_return single_hyp_rule_justification() throws RecognitionException {
        RSimpleTrans.single_hyp_rule_justification_return retval = new RSimpleTrans.single_hyp_rule_justification_return();
        retval.start = input.LT(1);

        try {
            // RSimpleTrans.g:2152:5: ( hyp_desig ( rules_set_1 | rules_set_2 | def_justification ) )
            // RSimpleTrans.g:2152:9: hyp_desig ( rules_set_1 | rules_set_2 | def_justification )
            {
            pushFollow(FOLLOW_hyp_desig_in_single_hyp_rule_justification16146);
            hyp_desig();

            state._fsp--;
            if (state.failed) return retval;
            // RSimpleTrans.g:2152:20: ( rules_set_1 | rules_set_2 | def_justification )
            int alt261=3;
            switch ( input.LA(1) ) {
            case RULE1:
                {
                alt261=1;
                }
                break;
            case RULE2:
                {
                alt261=2;
                }
                break;
            case DEFINITION:
            case INDEXED_DEFINITION:
                {
                alt261=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 261, 0, input);

                throw nvae;
            }

            switch (alt261) {
                case 1 :
                    // RSimpleTrans.g:2152:21: rules_set_1
                    {
                    pushFollow(FOLLOW_rules_set_1_in_single_hyp_rule_justification16150);
                    rules_set_1();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // RSimpleTrans.g:2152:35: rules_set_2
                    {
                    pushFollow(FOLLOW_rules_set_2_in_single_hyp_rule_justification16154);
                    rules_set_2();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;
                case 3 :
                    // RSimpleTrans.g:2152:49: def_justification
                    {
                    pushFollow(FOLLOW_def_justification_in_single_hyp_rule_justification16158);
                    def_justification();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "single_hyp_rule_justification"

    public static class def_justification_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "def_justification"
    // RSimpleTrans.g:2155:1: def_justification : ( DEFINITION ( ( UNIQUE )=> ( UNIQUE ) | ( fn_name ) ) | ^( INDEXED_DEFINITION ident fn_name ( ident )? ) ) ;
    public final RSimpleTrans.def_justification_return def_justification() throws RecognitionException {
        RSimpleTrans.def_justification_return retval = new RSimpleTrans.def_justification_return();
        retval.start = input.LT(1);

        try {
            // RSimpleTrans.g:2156:5: ( ( DEFINITION ( ( UNIQUE )=> ( UNIQUE ) | ( fn_name ) ) | ^( INDEXED_DEFINITION ident fn_name ( ident )? ) ) )
            // RSimpleTrans.g:2157:5: ( DEFINITION ( ( UNIQUE )=> ( UNIQUE ) | ( fn_name ) ) | ^( INDEXED_DEFINITION ident fn_name ( ident )? ) )
            {
            // RSimpleTrans.g:2157:5: ( DEFINITION ( ( UNIQUE )=> ( UNIQUE ) | ( fn_name ) ) | ^( INDEXED_DEFINITION ident fn_name ( ident )? ) )
            int alt264=2;
            int LA264_0 = input.LA(1);

            if ( (LA264_0==DEFINITION) ) {
                alt264=1;
            }
            else if ( (LA264_0==INDEXED_DEFINITION) ) {
                alt264=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 264, 0, input);

                throw nvae;
            }
            switch (alt264) {
                case 1 :
                    // RSimpleTrans.g:2157:7: DEFINITION ( ( UNIQUE )=> ( UNIQUE ) | ( fn_name ) )
                    {
                    match(input,DEFINITION,FOLLOW_DEFINITION_in_def_justification16185); if (state.failed) return retval;
                    // RSimpleTrans.g:2157:18: ( ( UNIQUE )=> ( UNIQUE ) | ( fn_name ) )
                    int alt262=2;
                    int LA262_0 = input.LA(1);

                    if ( (LA262_0==UNIQUE) && (synpred24_RSimpleTrans())) {
                        alt262=1;
                    }
                    else if ( (LA262_0==ABS||LA262_0==AND||LA262_0==COMPLEMENT||LA262_0==DIV||LA262_0==IFF||LA262_0==IMPLIES||LA262_0==INTERSECT||(LA262_0>=IN && LA262_0<=SUBSTR)||LA262_0==MOD||(LA262_0>=NOT && LA262_0<=CAT)||LA262_0==OR||LA262_0==REM||LA262_0==UNION||LA262_0==WITHOUT||LA262_0==IDENTIFIER||(LA262_0>=PLUS && LA262_0<=MINUS)||(LA262_0>=MULTIPLY && LA262_0<=GT)||(LA262_0>=XOR && LA262_0<=ORELSE)) ) {
                        alt262=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 262, 0, input);

                        throw nvae;
                    }
                    switch (alt262) {
                        case 1 :
                            // RSimpleTrans.g:2157:19: ( UNIQUE )=> ( UNIQUE )
                            {
                            // RSimpleTrans.g:2157:31: ( UNIQUE )
                            // RSimpleTrans.g:2157:32: UNIQUE
                            {
                            match(input,UNIQUE,FOLLOW_UNIQUE_in_def_justification16195); if (state.failed) return retval;

                            }


                            }
                            break;
                        case 2 :
                            // RSimpleTrans.g:2157:42: ( fn_name )
                            {
                            // RSimpleTrans.g:2157:42: ( fn_name )
                            // RSimpleTrans.g:2157:43: fn_name
                            {
                            pushFollow(FOLLOW_fn_name_in_def_justification16201);
                            fn_name();

                            state._fsp--;
                            if (state.failed) return retval;

                            }


                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // RSimpleTrans.g:2158:7: ^( INDEXED_DEFINITION ident fn_name ( ident )? )
                    {
                    match(input,INDEXED_DEFINITION,FOLLOW_INDEXED_DEFINITION_in_def_justification16212); if (state.failed) return retval;

                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    pushFollow(FOLLOW_ident_in_def_justification16214);
                    ident();

                    state._fsp--;
                    if (state.failed) return retval;
                    pushFollow(FOLLOW_fn_name_in_def_justification16216);
                    fn_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    // RSimpleTrans.g:2158:42: ( ident )?
                    int alt263=2;
                    int LA263_0 = input.LA(1);

                    if ( (LA263_0==IDENTIFIER) ) {
                        alt263=1;
                    }
                    switch (alt263) {
                        case 1 :
                            // RSimpleTrans.g:2158:42: ident
                            {
                            pushFollow(FOLLOW_ident_in_def_justification16218);
                            ident();

                            state._fsp--;
                            if (state.failed) return retval;

                            }
                            break;

                    }


                    match(input, Token.UP, null); if (state.failed) return retval;

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "def_justification"

    public static class simple_justification_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "simple_justification"
    // RSimpleTrans.g:2162:1: simple_justification : ( rules_set_2 | rules_set_3 );
    public final RSimpleTrans.simple_justification_return simple_justification() throws RecognitionException {
        RSimpleTrans.simple_justification_return retval = new RSimpleTrans.simple_justification_return();
        retval.start = input.LT(1);

        try {
            // RSimpleTrans.g:2163:5: ( rules_set_2 | rules_set_3 )
            int alt265=2;
            int LA265_0 = input.LA(1);

            if ( (LA265_0==RULE2) ) {
                alt265=1;
            }
            else if ( (LA265_0==RULE3) ) {
                alt265=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 265, 0, input);

                throw nvae;
            }
            switch (alt265) {
                case 1 :
                    // RSimpleTrans.g:2163:9: rules_set_2
                    {
                    pushFollow(FOLLOW_rules_set_2_in_simple_justification16245);
                    rules_set_2();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // RSimpleTrans.g:2163:23: rules_set_3
                    {
                    pushFollow(FOLLOW_rules_set_3_in_simple_justification16249);
                    rules_set_3();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "simple_justification"

    public static class rules_set_1_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "rules_set_1"
    // RSimpleTrans.g:2166:1: rules_set_1 : ( ^( RULE1 MODUS_PONENS ) | ^( RULE1 AND_RULE ) | ^( RULE1 CONTRADICTION ) | ^( RULE1 EQUALITY ) | ^( RULE1 ALTERNATIVE_ELIMINATION ) | ^( RULE1 COMMON_CONCLUSION ) ) ;
    public final RSimpleTrans.rules_set_1_return rules_set_1() throws RecognitionException {
        RSimpleTrans.rules_set_1_return retval = new RSimpleTrans.rules_set_1_return();
        retval.start = input.LT(1);

        try {
            // RSimpleTrans.g:2167:5: ( ( ^( RULE1 MODUS_PONENS ) | ^( RULE1 AND_RULE ) | ^( RULE1 CONTRADICTION ) | ^( RULE1 EQUALITY ) | ^( RULE1 ALTERNATIVE_ELIMINATION ) | ^( RULE1 COMMON_CONCLUSION ) ) )
            // RSimpleTrans.g:2168:5: ( ^( RULE1 MODUS_PONENS ) | ^( RULE1 AND_RULE ) | ^( RULE1 CONTRADICTION ) | ^( RULE1 EQUALITY ) | ^( RULE1 ALTERNATIVE_ELIMINATION ) | ^( RULE1 COMMON_CONCLUSION ) )
            {
            // RSimpleTrans.g:2168:5: ( ^( RULE1 MODUS_PONENS ) | ^( RULE1 AND_RULE ) | ^( RULE1 CONTRADICTION ) | ^( RULE1 EQUALITY ) | ^( RULE1 ALTERNATIVE_ELIMINATION ) | ^( RULE1 COMMON_CONCLUSION ) )
            int alt266=6;
            int LA266_0 = input.LA(1);

            if ( (LA266_0==RULE1) ) {
                int LA266_1 = input.LA(2);

                if ( (LA266_1==DOWN) ) {
                    switch ( input.LA(3) ) {
                    case MODUS_PONENS:
                        {
                        alt266=1;
                        }
                        break;
                    case AND_RULE:
                        {
                        alt266=2;
                        }
                        break;
                    case CONTRADICTION:
                        {
                        alt266=3;
                        }
                        break;
                    case EQUALITY:
                        {
                        alt266=4;
                        }
                        break;
                    case ALTERNATIVE_ELIMINATION:
                        {
                        alt266=5;
                        }
                        break;
                    case COMMON_CONCLUSION:
                        {
                        alt266=6;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 266, 2, input);

                        throw nvae;
                    }

                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 266, 1, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 266, 0, input);

                throw nvae;
            }
            switch (alt266) {
                case 1 :
                    // RSimpleTrans.g:2168:7: ^( RULE1 MODUS_PONENS )
                    {
                    match(input,RULE1,FOLLOW_RULE1_in_rules_set_116273); if (state.failed) return retval;

                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    match(input,MODUS_PONENS,FOLLOW_MODUS_PONENS_in_rules_set_116275); if (state.failed) return retval;

                    match(input, Token.UP, null); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // RSimpleTrans.g:2169:9: ^( RULE1 AND_RULE )
                    {
                    match(input,RULE1,FOLLOW_RULE1_in_rules_set_116287); if (state.failed) return retval;

                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    match(input,AND_RULE,FOLLOW_AND_RULE_in_rules_set_116289); if (state.failed) return retval;

                    match(input, Token.UP, null); if (state.failed) return retval;

                    }
                    break;
                case 3 :
                    // RSimpleTrans.g:2170:9: ^( RULE1 CONTRADICTION )
                    {
                    match(input,RULE1,FOLLOW_RULE1_in_rules_set_116301); if (state.failed) return retval;

                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    match(input,CONTRADICTION,FOLLOW_CONTRADICTION_in_rules_set_116303); if (state.failed) return retval;

                    match(input, Token.UP, null); if (state.failed) return retval;

                    }
                    break;
                case 4 :
                    // RSimpleTrans.g:2171:9: ^( RULE1 EQUALITY )
                    {
                    match(input,RULE1,FOLLOW_RULE1_in_rules_set_116315); if (state.failed) return retval;

                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    match(input,EQUALITY,FOLLOW_EQUALITY_in_rules_set_116317); if (state.failed) return retval;

                    match(input, Token.UP, null); if (state.failed) return retval;

                    }
                    break;
                case 5 :
                    // RSimpleTrans.g:2172:9: ^( RULE1 ALTERNATIVE_ELIMINATION )
                    {
                    match(input,RULE1,FOLLOW_RULE1_in_rules_set_116329); if (state.failed) return retval;

                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    match(input,ALTERNATIVE_ELIMINATION,FOLLOW_ALTERNATIVE_ELIMINATION_in_rules_set_116331); if (state.failed) return retval;

                    match(input, Token.UP, null); if (state.failed) return retval;

                    }
                    break;
                case 6 :
                    // RSimpleTrans.g:2173:9: ^( RULE1 COMMON_CONCLUSION )
                    {
                    match(input,RULE1,FOLLOW_RULE1_in_rules_set_116343); if (state.failed) return retval;

                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    match(input,COMMON_CONCLUSION,FOLLOW_COMMON_CONCLUSION_in_rules_set_116345); if (state.failed) return retval;

                    match(input, Token.UP, null); if (state.failed) return retval;

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "rules_set_1"

    public static class rules_set_2_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "rules_set_2"
    // RSimpleTrans.g:2177:1: rules_set_2 : ( ^( RULE2 REDUCTIO_AD_ABSURDUM ) | ^( RULE2 UNIVERSAL_GENERALIZATION ) | ^( RULE2 UNIVERSAL_INSTANTIATION ) | ^( RULE2 EXISTENTIAL_GENERALIZATION ) | ^( RULE2 EXISTENTIAL_INSTANTIATION ) | ^( RULE2 OR_RULE ) | ^( RULE2 CONJUNCT_ELIMINATION ) | ^( RULE2 QUANTIFIER_DISTRIBUTION ) ) ;
    public final RSimpleTrans.rules_set_2_return rules_set_2() throws RecognitionException {
        RSimpleTrans.rules_set_2_return retval = new RSimpleTrans.rules_set_2_return();
        retval.start = input.LT(1);

        try {
            // RSimpleTrans.g:2178:5: ( ( ^( RULE2 REDUCTIO_AD_ABSURDUM ) | ^( RULE2 UNIVERSAL_GENERALIZATION ) | ^( RULE2 UNIVERSAL_INSTANTIATION ) | ^( RULE2 EXISTENTIAL_GENERALIZATION ) | ^( RULE2 EXISTENTIAL_INSTANTIATION ) | ^( RULE2 OR_RULE ) | ^( RULE2 CONJUNCT_ELIMINATION ) | ^( RULE2 QUANTIFIER_DISTRIBUTION ) ) )
            // RSimpleTrans.g:2179:5: ( ^( RULE2 REDUCTIO_AD_ABSURDUM ) | ^( RULE2 UNIVERSAL_GENERALIZATION ) | ^( RULE2 UNIVERSAL_INSTANTIATION ) | ^( RULE2 EXISTENTIAL_GENERALIZATION ) | ^( RULE2 EXISTENTIAL_INSTANTIATION ) | ^( RULE2 OR_RULE ) | ^( RULE2 CONJUNCT_ELIMINATION ) | ^( RULE2 QUANTIFIER_DISTRIBUTION ) )
            {
            // RSimpleTrans.g:2179:5: ( ^( RULE2 REDUCTIO_AD_ABSURDUM ) | ^( RULE2 UNIVERSAL_GENERALIZATION ) | ^( RULE2 UNIVERSAL_INSTANTIATION ) | ^( RULE2 EXISTENTIAL_GENERALIZATION ) | ^( RULE2 EXISTENTIAL_INSTANTIATION ) | ^( RULE2 OR_RULE ) | ^( RULE2 CONJUNCT_ELIMINATION ) | ^( RULE2 QUANTIFIER_DISTRIBUTION ) )
            int alt267=8;
            alt267 = dfa267.predict(input);
            switch (alt267) {
                case 1 :
                    // RSimpleTrans.g:2179:7: ^( RULE2 REDUCTIO_AD_ABSURDUM )
                    {
                    match(input,RULE2,FOLLOW_RULE2_in_rules_set_216381); if (state.failed) return retval;

                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    match(input,REDUCTIO_AD_ABSURDUM,FOLLOW_REDUCTIO_AD_ABSURDUM_in_rules_set_216383); if (state.failed) return retval;

                    match(input, Token.UP, null); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // RSimpleTrans.g:2180:9: ^( RULE2 UNIVERSAL_GENERALIZATION )
                    {
                    match(input,RULE2,FOLLOW_RULE2_in_rules_set_216395); if (state.failed) return retval;

                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    match(input,UNIVERSAL_GENERALIZATION,FOLLOW_UNIVERSAL_GENERALIZATION_in_rules_set_216397); if (state.failed) return retval;

                    match(input, Token.UP, null); if (state.failed) return retval;

                    }
                    break;
                case 3 :
                    // RSimpleTrans.g:2181:9: ^( RULE2 UNIVERSAL_INSTANTIATION )
                    {
                    match(input,RULE2,FOLLOW_RULE2_in_rules_set_216409); if (state.failed) return retval;

                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    match(input,UNIVERSAL_INSTANTIATION,FOLLOW_UNIVERSAL_INSTANTIATION_in_rules_set_216411); if (state.failed) return retval;

                    match(input, Token.UP, null); if (state.failed) return retval;

                    }
                    break;
                case 4 :
                    // RSimpleTrans.g:2182:9: ^( RULE2 EXISTENTIAL_GENERALIZATION )
                    {
                    match(input,RULE2,FOLLOW_RULE2_in_rules_set_216423); if (state.failed) return retval;

                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    match(input,EXISTENTIAL_GENERALIZATION,FOLLOW_EXISTENTIAL_GENERALIZATION_in_rules_set_216425); if (state.failed) return retval;

                    match(input, Token.UP, null); if (state.failed) return retval;

                    }
                    break;
                case 5 :
                    // RSimpleTrans.g:2183:9: ^( RULE2 EXISTENTIAL_INSTANTIATION )
                    {
                    match(input,RULE2,FOLLOW_RULE2_in_rules_set_216437); if (state.failed) return retval;

                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    match(input,EXISTENTIAL_INSTANTIATION,FOLLOW_EXISTENTIAL_INSTANTIATION_in_rules_set_216439); if (state.failed) return retval;

                    match(input, Token.UP, null); if (state.failed) return retval;

                    }
                    break;
                case 6 :
                    // RSimpleTrans.g:2184:9: ^( RULE2 OR_RULE )
                    {
                    match(input,RULE2,FOLLOW_RULE2_in_rules_set_216451); if (state.failed) return retval;

                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    match(input,OR_RULE,FOLLOW_OR_RULE_in_rules_set_216453); if (state.failed) return retval;

                    match(input, Token.UP, null); if (state.failed) return retval;

                    }
                    break;
                case 7 :
                    // RSimpleTrans.g:2185:9: ^( RULE2 CONJUNCT_ELIMINATION )
                    {
                    match(input,RULE2,FOLLOW_RULE2_in_rules_set_216465); if (state.failed) return retval;

                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    match(input,CONJUNCT_ELIMINATION,FOLLOW_CONJUNCT_ELIMINATION_in_rules_set_216467); if (state.failed) return retval;

                    match(input, Token.UP, null); if (state.failed) return retval;

                    }
                    break;
                case 8 :
                    // RSimpleTrans.g:2186:9: ^( RULE2 QUANTIFIER_DISTRIBUTION )
                    {
                    match(input,RULE2,FOLLOW_RULE2_in_rules_set_216479); if (state.failed) return retval;

                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    match(input,QUANTIFIER_DISTRIBUTION,FOLLOW_QUANTIFIER_DISTRIBUTION_in_rules_set_216481); if (state.failed) return retval;

                    match(input, Token.UP, null); if (state.failed) return retval;

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "rules_set_2"

    public static class rules_set_3_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "rules_set_3"
    // RSimpleTrans.g:2190:1: rules_set_3 : ^( RULE3 EXCLUDED_MIDDLE ) ;
    public final RSimpleTrans.rules_set_3_return rules_set_3() throws RecognitionException {
        RSimpleTrans.rules_set_3_return retval = new RSimpleTrans.rules_set_3_return();
        retval.start = input.LT(1);

        try {
            // RSimpleTrans.g:2191:5: ( ^( RULE3 EXCLUDED_MIDDLE ) )
            // RSimpleTrans.g:2191:9: ^( RULE3 EXCLUDED_MIDDLE )
            {
            match(input,RULE3,FOLLOW_RULE3_in_rules_set_316510); if (state.failed) return retval;

            match(input, Token.DOWN, null); if (state.failed) return retval;
            match(input,EXCLUDED_MIDDLE,FOLLOW_EXCLUDED_MIDDLE_in_rules_set_316512); if (state.failed) return retval;

            match(input, Token.UP, null); if (state.failed) return retval;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "rules_set_3"

    public static class hyp_desig_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "hyp_desig"
    // RSimpleTrans.g:2194:1: hyp_desig : ( ^( HYPDESIG SELF ) | ^( HYPDESIG lemma_call ) | ^( HYPDESIG theorem_call ) | ^( HYPDESIG corollary_name ) | ^( HYPDESIG supposition_call ) | ^( HYPDESIG definition_call ) | ^( HYPDESIG reference_marker_call ) ) ;
    public final RSimpleTrans.hyp_desig_return hyp_desig() throws RecognitionException {
        RSimpleTrans.hyp_desig_return retval = new RSimpleTrans.hyp_desig_return();
        retval.start = input.LT(1);

        try {
            // RSimpleTrans.g:2195:5: ( ( ^( HYPDESIG SELF ) | ^( HYPDESIG lemma_call ) | ^( HYPDESIG theorem_call ) | ^( HYPDESIG corollary_name ) | ^( HYPDESIG supposition_call ) | ^( HYPDESIG definition_call ) | ^( HYPDESIG reference_marker_call ) ) )
            // RSimpleTrans.g:2196:5: ( ^( HYPDESIG SELF ) | ^( HYPDESIG lemma_call ) | ^( HYPDESIG theorem_call ) | ^( HYPDESIG corollary_name ) | ^( HYPDESIG supposition_call ) | ^( HYPDESIG definition_call ) | ^( HYPDESIG reference_marker_call ) )
            {
            // RSimpleTrans.g:2196:5: ( ^( HYPDESIG SELF ) | ^( HYPDESIG lemma_call ) | ^( HYPDESIG theorem_call ) | ^( HYPDESIG corollary_name ) | ^( HYPDESIG supposition_call ) | ^( HYPDESIG definition_call ) | ^( HYPDESIG reference_marker_call ) )
            int alt268=7;
            alt268 = dfa268.predict(input);
            switch (alt268) {
                case 1 :
                    // RSimpleTrans.g:2196:7: ^( HYPDESIG SELF )
                    {
                    match(input,HYPDESIG,FOLLOW_HYPDESIG_in_hyp_desig16540); if (state.failed) return retval;

                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    match(input,SELF,FOLLOW_SELF_in_hyp_desig16542); if (state.failed) return retval;

                    match(input, Token.UP, null); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // RSimpleTrans.g:2197:7: ^( HYPDESIG lemma_call )
                    {
                    match(input,HYPDESIG,FOLLOW_HYPDESIG_in_hyp_desig16552); if (state.failed) return retval;

                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    pushFollow(FOLLOW_lemma_call_in_hyp_desig16554);
                    lemma_call();

                    state._fsp--;
                    if (state.failed) return retval;

                    match(input, Token.UP, null); if (state.failed) return retval;

                    }
                    break;
                case 3 :
                    // RSimpleTrans.g:2198:7: ^( HYPDESIG theorem_call )
                    {
                    match(input,HYPDESIG,FOLLOW_HYPDESIG_in_hyp_desig16564); if (state.failed) return retval;

                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    pushFollow(FOLLOW_theorem_call_in_hyp_desig16566);
                    theorem_call();

                    state._fsp--;
                    if (state.failed) return retval;

                    match(input, Token.UP, null); if (state.failed) return retval;

                    }
                    break;
                case 4 :
                    // RSimpleTrans.g:2199:7: ^( HYPDESIG corollary_name )
                    {
                    match(input,HYPDESIG,FOLLOW_HYPDESIG_in_hyp_desig16576); if (state.failed) return retval;

                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    pushFollow(FOLLOW_corollary_name_in_hyp_desig16578);
                    corollary_name();

                    state._fsp--;
                    if (state.failed) return retval;

                    match(input, Token.UP, null); if (state.failed) return retval;

                    }
                    break;
                case 5 :
                    // RSimpleTrans.g:2200:7: ^( HYPDESIG supposition_call )
                    {
                    match(input,HYPDESIG,FOLLOW_HYPDESIG_in_hyp_desig16588); if (state.failed) return retval;

                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    pushFollow(FOLLOW_supposition_call_in_hyp_desig16590);
                    supposition_call();

                    state._fsp--;
                    if (state.failed) return retval;

                    match(input, Token.UP, null); if (state.failed) return retval;

                    }
                    break;
                case 6 :
                    // RSimpleTrans.g:2201:7: ^( HYPDESIG definition_call )
                    {
                    match(input,HYPDESIG,FOLLOW_HYPDESIG_in_hyp_desig16600); if (state.failed) return retval;

                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    pushFollow(FOLLOW_definition_call_in_hyp_desig16602);
                    definition_call();

                    state._fsp--;
                    if (state.failed) return retval;

                    match(input, Token.UP, null); if (state.failed) return retval;

                    }
                    break;
                case 7 :
                    // RSimpleTrans.g:2202:7: ^( HYPDESIG reference_marker_call )
                    {
                    match(input,HYPDESIG,FOLLOW_HYPDESIG_in_hyp_desig16612); if (state.failed) return retval;

                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    pushFollow(FOLLOW_reference_marker_call_in_hyp_desig16614);
                    reference_marker_call();

                    state._fsp--;
                    if (state.failed) return retval;

                    match(input, Token.UP, null); if (state.failed) return retval;

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "hyp_desig"

    public static class lemma_call_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "lemma_call"
    // RSimpleTrans.g:2206:1: lemma_call : ^( LEMMA ident ) ;
    public final RSimpleTrans.lemma_call_return lemma_call() throws RecognitionException {
        RSimpleTrans.lemma_call_return retval = new RSimpleTrans.lemma_call_return();
        retval.start = input.LT(1);

        try {
            // RSimpleTrans.g:2207:5: ( ^( LEMMA ident ) )
            // RSimpleTrans.g:2207:9: ^( LEMMA ident )
            {
            match(input,LEMMA,FOLLOW_LEMMA_in_lemma_call16641); if (state.failed) return retval;

            match(input, Token.DOWN, null); if (state.failed) return retval;
            pushFollow(FOLLOW_ident_in_lemma_call16643);
            ident();

            state._fsp--;
            if (state.failed) return retval;

            match(input, Token.UP, null); if (state.failed) return retval;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "lemma_call"

    public static class theorem_call_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "theorem_call"
    // RSimpleTrans.g:2210:1: theorem_call : ^( THEOREM ident ) ;
    public final RSimpleTrans.theorem_call_return theorem_call() throws RecognitionException {
        RSimpleTrans.theorem_call_return retval = new RSimpleTrans.theorem_call_return();
        retval.start = input.LT(1);

        try {
            // RSimpleTrans.g:2211:5: ( ^( THEOREM ident ) )
            // RSimpleTrans.g:2211:9: ^( THEOREM ident )
            {
            match(input,THEOREM,FOLLOW_THEOREM_in_theorem_call16664); if (state.failed) return retval;

            match(input, Token.DOWN, null); if (state.failed) return retval;
            pushFollow(FOLLOW_ident_in_theorem_call16666);
            ident();

            state._fsp--;
            if (state.failed) return retval;

            match(input, Token.UP, null); if (state.failed) return retval;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "theorem_call"

    public static class supposition_call_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "supposition_call"
    // RSimpleTrans.g:2214:1: supposition_call : SUPPOSITION ;
    public final RSimpleTrans.supposition_call_return supposition_call() throws RecognitionException {
        RSimpleTrans.supposition_call_return retval = new RSimpleTrans.supposition_call_return();
        retval.start = input.LT(1);

        try {
            // RSimpleTrans.g:2215:5: ( SUPPOSITION )
            // RSimpleTrans.g:2215:9: SUPPOSITION
            {
            match(input,SUPPOSITION,FOLLOW_SUPPOSITION_in_supposition_call16686); if (state.failed) return retval;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "supposition_call"

    public static class definition_call_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "definition_call"
    // RSimpleTrans.g:2218:1: definition_call : ^( DEFINITION ( LPAREN ident )? fn_name ( qualified_ident ( ident ) )? ( ident )? ) ;
    public final RSimpleTrans.definition_call_return definition_call() throws RecognitionException {
        RSimpleTrans.definition_call_return retval = new RSimpleTrans.definition_call_return();
        retval.start = input.LT(1);

        try {
            // RSimpleTrans.g:2219:5: ( ^( DEFINITION ( LPAREN ident )? fn_name ( qualified_ident ( ident ) )? ( ident )? ) )
            // RSimpleTrans.g:2219:7: ^( DEFINITION ( LPAREN ident )? fn_name ( qualified_ident ( ident ) )? ( ident )? )
            {
            match(input,DEFINITION,FOLLOW_DEFINITION_in_definition_call16704); if (state.failed) return retval;

            match(input, Token.DOWN, null); if (state.failed) return retval;
            // RSimpleTrans.g:2219:20: ( LPAREN ident )?
            int alt269=2;
            int LA269_0 = input.LA(1);

            if ( (LA269_0==LPAREN) ) {
                alt269=1;
            }
            switch (alt269) {
                case 1 :
                    // RSimpleTrans.g:2219:21: LPAREN ident
                    {
                    match(input,LPAREN,FOLLOW_LPAREN_in_definition_call16707); if (state.failed) return retval;
                    pushFollow(FOLLOW_ident_in_definition_call16709);
                    ident();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }

            pushFollow(FOLLOW_fn_name_in_definition_call16720);
            fn_name();

            state._fsp--;
            if (state.failed) return retval;
            // RSimpleTrans.g:2220:15: ( qualified_ident ( ident ) )?
            int alt270=2;
            int LA270_0 = input.LA(1);

            if ( (LA270_0==IDENTIFIER) ) {
                int LA270_1 = input.LA(2);

                if ( (LA270_1==DOWN) ) {
                    alt270=1;
                }
            }
            switch (alt270) {
                case 1 :
                    // RSimpleTrans.g:2220:17: qualified_ident ( ident )
                    {
                    pushFollow(FOLLOW_qualified_ident_in_definition_call16724);
                    qualified_ident();

                    state._fsp--;
                    if (state.failed) return retval;
                    // RSimpleTrans.g:2220:33: ( ident )
                    // RSimpleTrans.g:2220:35: ident
                    {
                    pushFollow(FOLLOW_ident_in_definition_call16728);
                    ident();

                    state._fsp--;
                    if (state.failed) return retval;

                    }


                    }
                    break;

            }

            // RSimpleTrans.g:2221:7: ( ident )?
            int alt271=2;
            int LA271_0 = input.LA(1);

            if ( (LA271_0==IDENTIFIER) ) {
                alt271=1;
            }
            switch (alt271) {
                case 1 :
                    // RSimpleTrans.g:2221:9: ident
                    {
                    pushFollow(FOLLOW_ident_in_definition_call16742);
                    ident();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            match(input, Token.UP, null); if (state.failed) return retval;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "definition_call"

    public static class reference_marker_call_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "reference_marker_call"
    // RSimpleTrans.g:2224:1: reference_marker_call : ^( REFCALL ident ) ;
    public final RSimpleTrans.reference_marker_call_return reference_marker_call() throws RecognitionException {
        RSimpleTrans.reference_marker_call_return retval = new RSimpleTrans.reference_marker_call_return();
        retval.start = input.LT(1);

        try {
            // RSimpleTrans.g:2225:5: ( ^( REFCALL ident ) )
            // RSimpleTrans.g:2225:9: ^( REFCALL ident )
            {
            match(input,REFCALL,FOLLOW_REFCALL_in_reference_marker_call16769); if (state.failed) return retval;

            match(input, Token.DOWN, null); if (state.failed) return retval;
            pushFollow(FOLLOW_ident_in_reference_marker_call16771);
            ident();

            state._fsp--;
            if (state.failed) return retval;

            match(input, Token.UP, null); if (state.failed) return retval;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "reference_marker_call"

    public static class fn_name_return extends TreeRuleReturnScope {
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "fn_name"
    // RSimpleTrans.g:2228:1: fn_name : ( infix_symbol | prefix_symbol | ident );
    public final RSimpleTrans.fn_name_return fn_name() throws RecognitionException {
        RSimpleTrans.fn_name_return retval = new RSimpleTrans.fn_name_return();
        retval.start = input.LT(1);

        try {
            // RSimpleTrans.g:2229:5: ( infix_symbol | prefix_symbol | ident )
            int alt272=3;
            switch ( input.LA(1) ) {
            case AND:
            case COMPLEMENT:
            case DIV:
            case IFF:
            case IMPLIES:
            case INTERSECT:
            case IN:
            case NOT_IN:
            case NOT_PROP_SUBSET:
            case NOT_SUBSET:
            case NOT_SUBSTR:
            case PROP_SUBSET:
            case SUBSET:
            case SUBSTR:
            case MOD:
            case CAT:
            case OR:
            case REM:
            case UNION:
            case WITHOUT:
            case PLUS:
            case MINUS:
            case MULTIPLY:
            case DIVIDE:
            case EXP:
            case RANGE:
            case NOT_EQL:
            case GT_EQL:
            case LT_EQL:
            case EQL:
            case LT:
            case GT:
            case XOR:
            case ANDTHEN:
            case ORELSE:
                {
                alt272=1;
                }
                break;
            case ABS:
            case NOT:
                {
                alt272=2;
                }
                break;
            case IDENTIFIER:
                {
                alt272=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 272, 0, input);

                throw nvae;
            }

            switch (alt272) {
                case 1 :
                    // RSimpleTrans.g:2229:9: infix_symbol
                    {
                    pushFollow(FOLLOW_infix_symbol_in_fn_name16791);
                    infix_symbol();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // RSimpleTrans.g:2229:24: prefix_symbol
                    {
                    pushFollow(FOLLOW_prefix_symbol_in_fn_name16795);
                    prefix_symbol();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;
                case 3 :
                    // RSimpleTrans.g:2229:40: ident
                    {
                    pushFollow(FOLLOW_ident_in_fn_name16799);
                    ident();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "fn_name"

    // $ANTLR start synpred1_RSimpleTrans
    public final void synpred1_RSimpleTrans_fragment() throws RecognitionException {   
        // RSimpleTrans.g:310:13: ( ident OF )
        // RSimpleTrans.g:310:14: ident OF
        {
        pushFollow(FOLLOW_ident_in_synpred1_RSimpleTrans1072);
        ident();

        state._fsp--;
        if (state.failed) return ;
        match(input,OF,FOLLOW_OF_in_synpred1_RSimpleTrans1074); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred1_RSimpleTrans

    // $ANTLR start synpred2_RSimpleTrans
    public final void synpred2_RSimpleTrans_fragment() throws RecognitionException {   
        // RSimpleTrans.g:497:25: ( ident DOT )
        // RSimpleTrans.g:497:26: ident DOT
        {
        pushFollow(FOLLOW_ident_in_synpred2_RSimpleTrans2492);
        ident();

        state._fsp--;
        if (state.failed) return ;
        match(input,DOT,FOLLOW_DOT_in_synpred2_RSimpleTrans2494); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred2_RSimpleTrans

    // $ANTLR start synpred3_RSimpleTrans
    public final void synpred3_RSimpleTrans_fragment() throws RecognitionException {   
        // RSimpleTrans.g:498:10: ( ident DOT )
        // RSimpleTrans.g:498:11: ident DOT
        {
        pushFollow(FOLLOW_ident_in_synpred3_RSimpleTrans2517);
        ident();

        state._fsp--;
        if (state.failed) return ;
        match(input,DOT,FOLLOW_DOT_in_synpred3_RSimpleTrans2519); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred3_RSimpleTrans

    // $ANTLR start synpred4_RSimpleTrans
    public final void synpred4_RSimpleTrans_fragment() throws RecognitionException {   
        // RSimpleTrans.g:522:9: ( FUNCARROW sset_domain_expression )
        // RSimpleTrans.g:522:10: FUNCARROW sset_domain_expression
        {
        match(input,FUNCARROW,FOLLOW_FUNCARROW_in_synpred4_RSimpleTrans2673); if (state.failed) return ;
        pushFollow(FOLLOW_sset_domain_expression_in_synpred4_RSimpleTrans2675);
        sset_domain_expression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred4_RSimpleTrans

    // $ANTLR start synpred5_RSimpleTrans
    public final void synpred5_RSimpleTrans_fragment() throws RecognitionException {   
        // RSimpleTrans.g:670:9: ( qualified_ident )
        // RSimpleTrans.g:670:10: qualified_ident
        {
        pushFollow(FOLLOW_qualified_ident_in_synpred5_RSimpleTrans3975);
        qualified_ident();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred5_RSimpleTrans

    // $ANTLR start synpred6_RSimpleTrans
    public final void synpred6_RSimpleTrans_fragment() throws RecognitionException {   
        // RSimpleTrans.g:1493:9: ( SSET )
        // RSimpleTrans.g:1493:10: SSET
        {
        match(input,SSET,FOLLOW_SSET_in_synpred6_RSimpleTrans10913); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred6_RSimpleTrans

    // $ANTLR start synpred7_RSimpleTrans
    public final void synpred7_RSimpleTrans_fragment() throws RecognitionException {   
        // RSimpleTrans.g:1494:9: ( BOOLEAN )
        // RSimpleTrans.g:1494:10: BOOLEAN
        {
        match(input,BOOLEAN,FOLLOW_BOOLEAN_in_synpred7_RSimpleTrans10929); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred7_RSimpleTrans

    // $ANTLR start synpred8_RSimpleTrans
    public final void synpred8_RSimpleTrans_fragment() throws RecognitionException {   
        // RSimpleTrans.g:1495:9: ( POWERSET )
        // RSimpleTrans.g:1495:10: POWERSET
        {
        match(input,POWERSET,FOLLOW_POWERSET_in_synpred8_RSimpleTrans10945); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred8_RSimpleTrans

    // $ANTLR start synpred9_RSimpleTrans
    public final void synpred9_RSimpleTrans_fragment() throws RecognitionException {   
        // RSimpleTrans.g:1663:9: ( ident DOT NUMERIC_LITERAL )
        // RSimpleTrans.g:1663:10: ident DOT NUMERIC_LITERAL
        {
        pushFollow(FOLLOW_ident_in_synpred9_RSimpleTrans12219);
        ident();

        state._fsp--;
        if (state.failed) return ;
        match(input,DOT,FOLLOW_DOT_in_synpred9_RSimpleTrans12221); if (state.failed) return ;
        match(input,NUMERIC_LITERAL,FOLLOW_NUMERIC_LITERAL_in_synpred9_RSimpleTrans12223); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred9_RSimpleTrans

    // $ANTLR start synpred10_RSimpleTrans
    public final void synpred10_RSimpleTrans_fragment() throws RecognitionException {   
        // RSimpleTrans.g:1669:9: ( LPAREN math_expression COMMA )
        // RSimpleTrans.g:1669:10: LPAREN math_expression COMMA
        {
        match(input,LPAREN,FOLLOW_LPAREN_in_synpred10_RSimpleTrans12289); if (state.failed) return ;
        pushFollow(FOLLOW_math_expression_in_synpred10_RSimpleTrans12291);
        math_expression();

        state._fsp--;
        if (state.failed) return ;
        match(input,COMMA,FOLLOW_COMMA_in_synpred10_RSimpleTrans12293); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred10_RSimpleTrans

    // $ANTLR start synpred11_RSimpleTrans
    public final void synpred11_RSimpleTrans_fragment() throws RecognitionException {   
        // RSimpleTrans.g:1734:13: ( ident DOT ident DOT )
        // RSimpleTrans.g:1734:14: ident DOT ident DOT
        {
        pushFollow(FOLLOW_ident_in_synpred11_RSimpleTrans12719);
        ident();

        state._fsp--;
        if (state.failed) return ;
        match(input,DOT,FOLLOW_DOT_in_synpred11_RSimpleTrans12721); if (state.failed) return ;
        pushFollow(FOLLOW_ident_in_synpred11_RSimpleTrans12723);
        ident();

        state._fsp--;
        if (state.failed) return ;
        match(input,DOT,FOLLOW_DOT_in_synpred11_RSimpleTrans12725); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred11_RSimpleTrans

    // $ANTLR start synpred12_RSimpleTrans
    public final void synpred12_RSimpleTrans_fragment() throws RecognitionException {   
        // RSimpleTrans.g:2036:11: ( LSQBRACK IDENTIFIER RSQBRACK LPAREN BASECASE )
        // RSimpleTrans.g:2036:12: LSQBRACK IDENTIFIER RSQBRACK LPAREN BASECASE
        {
        match(input,LSQBRACK,FOLLOW_LSQBRACK_in_synpred12_RSimpleTrans15139); if (state.failed) return ;
        match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_synpred12_RSimpleTrans15141); if (state.failed) return ;
        match(input,RSQBRACK,FOLLOW_RSQBRACK_in_synpred12_RSimpleTrans15143); if (state.failed) return ;
        match(input,LPAREN,FOLLOW_LPAREN_in_synpred12_RSimpleTrans15145); if (state.failed) return ;
        match(input,BASECASE,FOLLOW_BASECASE_in_synpred12_RSimpleTrans15147); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred12_RSimpleTrans

    // $ANTLR start synpred13_RSimpleTrans
    public final void synpred13_RSimpleTrans_fragment() throws RecognitionException {   
        // RSimpleTrans.g:2037:11: ( LPAREN BASECASE )
        // RSimpleTrans.g:2037:12: LPAREN BASECASE
        {
        match(input,LPAREN,FOLLOW_LPAREN_in_synpred13_RSimpleTrans15165); if (state.failed) return ;
        match(input,BASECASE,FOLLOW_BASECASE_in_synpred13_RSimpleTrans15167); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred13_RSimpleTrans

    // $ANTLR start synpred14_RSimpleTrans
    public final void synpred14_RSimpleTrans_fragment() throws RecognitionException {   
        // RSimpleTrans.g:2038:11: ( LSQBRACK IDENTIFIER RSQBRACK LPAREN INDUCTIVECASE )
        // RSimpleTrans.g:2038:12: LSQBRACK IDENTIFIER RSQBRACK LPAREN INDUCTIVECASE
        {
        match(input,LSQBRACK,FOLLOW_LSQBRACK_in_synpred14_RSimpleTrans15185); if (state.failed) return ;
        match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_synpred14_RSimpleTrans15187); if (state.failed) return ;
        match(input,RSQBRACK,FOLLOW_RSQBRACK_in_synpred14_RSimpleTrans15189); if (state.failed) return ;
        match(input,LPAREN,FOLLOW_LPAREN_in_synpred14_RSimpleTrans15191); if (state.failed) return ;
        match(input,INDUCTIVECASE,FOLLOW_INDUCTIVECASE_in_synpred14_RSimpleTrans15193); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred14_RSimpleTrans

    // $ANTLR start synpred15_RSimpleTrans
    public final void synpred15_RSimpleTrans_fragment() throws RecognitionException {   
        // RSimpleTrans.g:2039:11: ( LPAREN INDUCTIVECASE )
        // RSimpleTrans.g:2039:12: LPAREN INDUCTIVECASE
        {
        match(input,LPAREN,FOLLOW_LPAREN_in_synpred15_RSimpleTrans15211); if (state.failed) return ;
        match(input,INDUCTIVECASE,FOLLOW_INDUCTIVECASE_in_synpred15_RSimpleTrans15213); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred15_RSimpleTrans

    // $ANTLR start synpred16_RSimpleTrans
    public final void synpred16_RSimpleTrans_fragment() throws RecognitionException {   
        // RSimpleTrans.g:2040:11: ( LSQBRACK IDENTIFIER RSQBRACK )
        // RSimpleTrans.g:2040:12: LSQBRACK IDENTIFIER RSQBRACK
        {
        match(input,LSQBRACK,FOLLOW_LSQBRACK_in_synpred16_RSimpleTrans15231); if (state.failed) return ;
        match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_synpred16_RSimpleTrans15233); if (state.failed) return ;
        match(input,RSQBRACK,FOLLOW_RSQBRACK_in_synpred16_RSimpleTrans15235); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred16_RSimpleTrans

    // $ANTLR start synpred17_RSimpleTrans
    public final void synpred17_RSimpleTrans_fragment() throws RecognitionException {   
        // RSimpleTrans.g:2088:7: ( IDENTIFIER )
        // RSimpleTrans.g:2088:8: IDENTIFIER
        {
        match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_synpred17_RSimpleTrans15595); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred17_RSimpleTrans

    // $ANTLR start synpred18_RSimpleTrans
    public final void synpred18_RSimpleTrans_fragment() throws RecognitionException {   
        // RSimpleTrans.g:2117:12: ( ident COLON )
        // RSimpleTrans.g:2117:13: ident COLON
        {
        pushFollow(FOLLOW_ident_in_synpred18_RSimpleTrans15816);
        ident();

        state._fsp--;
        if (state.failed) return ;
        match(input,COLON,FOLLOW_COLON_in_synpred18_RSimpleTrans15818); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred18_RSimpleTrans

    // $ANTLR start synpred19_RSimpleTrans
    public final void synpred19_RSimpleTrans_fragment() throws RecognitionException {   
        // RSimpleTrans.g:2118:14: ( ident COMMA ident )
        // RSimpleTrans.g:2118:15: ident COMMA ident
        {
        pushFollow(FOLLOW_ident_in_synpred19_RSimpleTrans15848);
        ident();

        state._fsp--;
        if (state.failed) return ;
        match(input,COMMA,FOLLOW_COMMA_in_synpred19_RSimpleTrans15850); if (state.failed) return ;
        pushFollow(FOLLOW_ident_in_synpred19_RSimpleTrans15852);
        ident();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred19_RSimpleTrans

    // $ANTLR start synpred20_RSimpleTrans
    public final void synpred20_RSimpleTrans_fragment() throws RecognitionException {   
        // RSimpleTrans.g:2137:11: ( hyp_desig COMMA )
        // RSimpleTrans.g:2137:12: hyp_desig COMMA
        {
        pushFollow(FOLLOW_hyp_desig_in_synpred20_RSimpleTrans16009);
        hyp_desig();

        state._fsp--;
        if (state.failed) return ;
        match(input,COMMA,FOLLOW_COMMA_in_synpred20_RSimpleTrans16011); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred20_RSimpleTrans

    // $ANTLR start synpred21_RSimpleTrans
    public final void synpred21_RSimpleTrans_fragment() throws RecognitionException {   
        // RSimpleTrans.g:2138:9: ( hyp_desig AMPERSAND )
        // RSimpleTrans.g:2138:10: hyp_desig AMPERSAND
        {
        pushFollow(FOLLOW_hyp_desig_in_synpred21_RSimpleTrans16027);
        hyp_desig();

        state._fsp--;
        if (state.failed) return ;
        match(input,AMPERSAND,FOLLOW_AMPERSAND_in_synpred21_RSimpleTrans16029); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred21_RSimpleTrans

    // $ANTLR start synpred22_RSimpleTrans
    public final void synpred22_RSimpleTrans_fragment() throws RecognitionException {   
        // RSimpleTrans.g:2139:9: ( hyp_desig )
        // RSimpleTrans.g:2139:10: hyp_desig
        {
        pushFollow(FOLLOW_hyp_desig_in_synpred22_RSimpleTrans16045);
        hyp_desig();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred22_RSimpleTrans

    // $ANTLR start synpred23_RSimpleTrans
    public final void synpred23_RSimpleTrans_fragment() throws RecognitionException {   
        // RSimpleTrans.g:2141:9: ( DEFINITION )
        // RSimpleTrans.g:2141:10: DEFINITION
        {
        match(input,DEFINITION,FOLLOW_DEFINITION_in_synpred23_RSimpleTrans16071); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred23_RSimpleTrans

    // $ANTLR start synpred24_RSimpleTrans
    public final void synpred24_RSimpleTrans_fragment() throws RecognitionException {   
        // RSimpleTrans.g:2157:19: ( UNIQUE )
        // RSimpleTrans.g:2157:20: UNIQUE
        {
        match(input,UNIQUE,FOLLOW_UNIQUE_in_synpred24_RSimpleTrans16189); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred24_RSimpleTrans

    // Delegated rules

    public final boolean synpred9_RSimpleTrans() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred9_RSimpleTrans_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred22_RSimpleTrans() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred22_RSimpleTrans_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred3_RSimpleTrans() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred3_RSimpleTrans_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred12_RSimpleTrans() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred12_RSimpleTrans_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred23_RSimpleTrans() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred23_RSimpleTrans_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred5_RSimpleTrans() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred5_RSimpleTrans_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred8_RSimpleTrans() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred8_RSimpleTrans_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred19_RSimpleTrans() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred19_RSimpleTrans_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred16_RSimpleTrans() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred16_RSimpleTrans_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred17_RSimpleTrans() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred17_RSimpleTrans_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred2_RSimpleTrans() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred2_RSimpleTrans_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred15_RSimpleTrans() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred15_RSimpleTrans_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred14_RSimpleTrans() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred14_RSimpleTrans_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred11_RSimpleTrans() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred11_RSimpleTrans_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred1_RSimpleTrans() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred1_RSimpleTrans_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred13_RSimpleTrans() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred13_RSimpleTrans_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred6_RSimpleTrans() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred6_RSimpleTrans_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred18_RSimpleTrans() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred18_RSimpleTrans_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred21_RSimpleTrans() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred21_RSimpleTrans_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred7_RSimpleTrans() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred7_RSimpleTrans_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred4_RSimpleTrans() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred4_RSimpleTrans_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred24_RSimpleTrans() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred24_RSimpleTrans_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred10_RSimpleTrans() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred10_RSimpleTrans_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred20_RSimpleTrans() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred20_RSimpleTrans_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }


    protected DFA160 dfa160 = new DFA160(this);
    protected DFA161 dfa161 = new DFA161(this);
    protected DFA206 dfa206 = new DFA206(this);
    protected DFA211 dfa211 = new DFA211(this);
    protected DFA250 dfa250 = new DFA250(this);
    protected DFA259 dfa259 = new DFA259(this);
    protected DFA267 dfa267 = new DFA267(this);
    protected DFA268 dfa268 = new DFA268(this);
    static final String DFA160_eotS =
        "\17\uffff";
    static final String DFA160_eofS =
        "\17\uffff";
    static final String DFA160_minS =
        "\1\u0100\1\2\1\14\14\uffff";
    static final String DFA160_maxS =
        "\1\u0100\1\2\1\u00ec\14\uffff";
    static final String DFA160_acceptS =
        "\3\uffff\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14";
    static final String DFA160_specialS =
        "\17\uffff}>";
    static final String[] DFA160_transitionS = {
            "\1\1",
            "\1\2",
            "\1\15\1\16\11\uffff\1\4\10\uffff\1\14\44\uffff\1\13\1\uffff"+
            "\1\3\22\uffff\1\6\44\uffff\1\12\40\uffff\1\5\54\uffff\1\7\1"+
            "\10\35\uffff\1\11",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA160_eot = DFA.unpackEncodedString(DFA160_eotS);
    static final short[] DFA160_eof = DFA.unpackEncodedString(DFA160_eofS);
    static final char[] DFA160_min = DFA.unpackEncodedStringToUnsignedChars(DFA160_minS);
    static final char[] DFA160_max = DFA.unpackEncodedStringToUnsignedChars(DFA160_maxS);
    static final short[] DFA160_accept = DFA.unpackEncodedString(DFA160_acceptS);
    static final short[] DFA160_special = DFA.unpackEncodedString(DFA160_specialS);
    static final short[][] DFA160_transition;

    static {
        int numStates = DFA160_transitionS.length;
        DFA160_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA160_transition[i] = DFA.unpackEncodedString(DFA160_transitionS[i]);
        }
    }

    class DFA160 extends DFA {

        public DFA160(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 160;
            this.eot = DFA160_eot;
            this.eof = DFA160_eof;
            this.min = DFA160_min;
            this.max = DFA160_max;
            this.accept = DFA160_accept;
            this.special = DFA160_special;
            this.transition = DFA160_transition;
        }
        public String getDescription() {
            return "1143:9: ( ^( STATEMENT is+= if_statement ) -> template(is=$is) \"<is>\" | ^( STATEMENT selection_statement ) | ^( STATEMENT wls+= while_loop_statement ) -> template(wls=$wls) \"<wls>\" | ^( STATEMENT iterate_loop_statement ) | ^( STATEMENT ss+= swap_statement ) -> template(ss=$ss) \"<ss>\" | ^( STATEMENT fa+= function_assignment ) -> template(fa=$fa) \"<fa>\" | ^( STATEMENT poc+= procedure_operation_call ) -> template(poc=$poc) \"<poc>\" | ^( STATEMENT remember_statement ) | ^( STATEMENT forget_statement ) | ^( STATEMENT confirm_statement ) | ^( STATEMENT assume_statement ) | ^( STATEMENT aux_code_statement ) )";
        }
    }
    static final String DFA161_eotS =
        "\17\uffff";
    static final String DFA161_eofS =
        "\17\uffff";
    static final String DFA161_minS =
        "\1\u0100\1\2\1\14\14\uffff";
    static final String DFA161_maxS =
        "\1\u0100\1\2\1\u00ec\14\uffff";
    static final String DFA161_acceptS =
        "\3\uffff\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14";
    static final String DFA161_specialS =
        "\17\uffff}>";
    static final String[] DFA161_transitionS = {
            "\1\1",
            "\1\2",
            "\1\15\1\16\11\uffff\1\4\10\uffff\1\14\44\uffff\1\13\1\uffff"+
            "\1\3\22\uffff\1\6\44\uffff\1\12\40\uffff\1\5\54\uffff\1\7\1"+
            "\10\35\uffff\1\11",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA161_eot = DFA.unpackEncodedString(DFA161_eotS);
    static final short[] DFA161_eof = DFA.unpackEncodedString(DFA161_eofS);
    static final char[] DFA161_min = DFA.unpackEncodedStringToUnsignedChars(DFA161_minS);
    static final char[] DFA161_max = DFA.unpackEncodedStringToUnsignedChars(DFA161_maxS);
    static final short[] DFA161_accept = DFA.unpackEncodedString(DFA161_acceptS);
    static final short[] DFA161_special = DFA.unpackEncodedString(DFA161_specialS);
    static final short[][] DFA161_transition;

    static {
        int numStates = DFA161_transitionS.length;
        DFA161_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA161_transition[i] = DFA.unpackEncodedString(DFA161_transitionS[i]);
        }
    }

    class DFA161 extends DFA {

        public DFA161(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 161;
            this.eot = DFA161_eot;
            this.eof = DFA161_eof;
            this.min = DFA161_min;
            this.max = DFA161_max;
            this.accept = DFA161_accept;
            this.special = DFA161_special;
            this.transition = DFA161_transition;
        }
        public String getDescription() {
            return "1164:9: ( ^( STATEMENT if_statement ) | ^( STATEMENT selection_statement ) | ^( STATEMENT while_loop_statement ) | ^( STATEMENT iterate_loop_statement ) | ^( STATEMENT swap_statement ) | ^( STATEMENT function_assignment ) | ^( STATEMENT procedure_operation_call ) | ^( STATEMENT remember_statement ) | ^( STATEMENT forget_statement ) | ^( STATEMENT confirm_statement ) | ^( STATEMENT assume_statement ) | ^( STATEMENT aux_code_statement ) )";
        }
    }
    static final String DFA206_eotS =
        "\27\uffff";
    static final String DFA206_eofS =
        "\27\uffff";
    static final String DFA206_minS =
        "\1\35\26\uffff";
    static final String DFA206_maxS =
        "\1\u0126\26\uffff";
    static final String DFA206_acceptS =
        "\1\uffff\1\1\20\uffff\1\1\3\uffff\1\2";
    static final String DFA206_specialS =
        "\27\uffff}>";
    static final String[] DFA206_transitionS = {
            "\1\1\16\uffff\1\1\42\uffff\1\26\13\uffff\1\1\6\uffff\1\1\2\uffff"+
            "\1\1\1\26\27\uffff\1\1\27\uffff\1\26\12\uffff\1\26\3\uffff\1"+
            "\1\5\uffff\1\1\1\uffff\1\1\1\uffff\1\1\3\uffff\1\1\1\uffff\1"+
            "\1\3\uffff\1\1\1\uffff\1\26\1\22\1\uffff\3\1\16\uffff\2\1\2"+
            "\uffff\1\1\6\uffff\1\1\11\uffff\1\1\7\uffff\1\1\11\uffff\1\1"+
            "\13\uffff\1\1\21\uffff\1\1\21\uffff\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA206_eot = DFA.unpackEncodedString(DFA206_eotS);
    static final short[] DFA206_eof = DFA.unpackEncodedString(DFA206_eofS);
    static final char[] DFA206_min = DFA.unpackEncodedStringToUnsignedChars(DFA206_minS);
    static final char[] DFA206_max = DFA.unpackEncodedStringToUnsignedChars(DFA206_maxS);
    static final short[] DFA206_accept = DFA.unpackEncodedString(DFA206_acceptS);
    static final short[] DFA206_special = DFA.unpackEncodedString(DFA206_specialS);
    static final short[][] DFA206_transition;

    static {
        int numStates = DFA206_transitionS.length;
        DFA206_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA206_transition[i] = DFA.unpackEncodedString(DFA206_transitionS[i]);
        }
    }

    class DFA206 extends DFA {

        public DFA206(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 206;
            this.eot = DFA206_eot;
            this.eof = DFA206_eof;
            this.min = DFA206_min;
            this.max = DFA206_max;
            this.accept = DFA206_accept;
            this.special = DFA206_special;
            this.transition = DFA206_transition;
        }
        public String getDescription() {
            return "1622:1: adding_expression : ( multiplying_expression | ^( ( PLUS | MINUS | CAT | UNION | INTERSECT | WITHOUT ) adding_expression multiplying_expression ) );";
        }
    }
    static final String DFA211_eotS =
        "\12\uffff";
    static final String DFA211_eofS =
        "\12\uffff";
    static final String DFA211_minS =
        "\1\133\11\uffff";
    static final String DFA211_maxS =
        "\1\u0114\11\uffff";
    static final String DFA211_acceptS =
        "\1\uffff\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11";
    static final String DFA211_specialS =
        "\1\0\11\uffff}>";
    static final String[] DFA211_transitionS = {
            "\1\4\111\uffff\1\3\5\uffff\1\3\1\uffff\1\5\1\uffff\1\5\3\uffff"+
            "\1\7\1\uffff\1\1\3\uffff\1\3\25\uffff\2\6\2\uffff\1\5\6\uffff"+
            "\1\6\11\uffff\1\6\7\uffff\1\3\11\uffff\1\11\13\uffff\1\10\21"+
            "\uffff\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA211_eot = DFA.unpackEncodedString(DFA211_eotS);
    static final short[] DFA211_eof = DFA.unpackEncodedString(DFA211_eofS);
    static final char[] DFA211_min = DFA.unpackEncodedStringToUnsignedChars(DFA211_minS);
    static final char[] DFA211_max = DFA.unpackEncodedStringToUnsignedChars(DFA211_maxS);
    static final short[] DFA211_accept = DFA.unpackEncodedString(DFA211_acceptS);
    static final short[] DFA211_special = DFA.unpackEncodedString(DFA211_specialS);
    static final short[][] DFA211_transition;

    static {
        int numStates = DFA211_transitionS.length;
        DFA211_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA211_transition[i] = DFA.unpackEncodedString(DFA211_transitionS[i]);
        }
    }

    class DFA211 extends DFA {

        public DFA211(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 211;
            this.eot = DFA211_eot;
            this.eof = DFA211_eof;
            this.min = DFA211_min;
            this.max = DFA211_max;
            this.accept = DFA211_accept;
            this.special = DFA211_special;
            this.transition = DFA211_transition;
        }
        public String getDescription() {
            return "1661:1: primitive_expression : ( alternative_expression | ( ident DOT NUMERIC_LITERAL )=> qualified_numeric_literal | dot_expression | lambda_expression | literal_expression | outfix_expression | set_constructor | ( LPAREN math_expression COMMA )=> tuple_expression | nested_expression );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TreeNodeStream input = (TreeNodeStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA211_0 = input.LA(1);

                         
                        int index211_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA211_0==DBL_LBRACE) ) {s = 1;}

                        else if ( (LA211_0==QUALNUM) && (synpred9_RSimpleTrans())) {s = 2;}

                        else if ( (LA211_0==IDENTIFIER||LA211_0==DOT||LA211_0==HASH||LA211_0==FUNCTION) ) {s = 3;}

                        else if ( (LA211_0==LAMBDA) ) {s = 4;}

                        else if ( (LA211_0==NUMERIC_LITERAL||LA211_0==CHARACTER_LITERAL||LA211_0==STRING_LITERAL) ) {s = 5;}

                        else if ( ((LA211_0>=BAR && LA211_0<=DBL_BAR)||LA211_0==ANGLE||LA211_0==DBL_ANGLE) ) {s = 6;}

                        else if ( (LA211_0==LBRACE) ) {s = 7;}

                        else if ( (LA211_0==TUPLE) && (synpred10_RSimpleTrans())) {s = 8;}

                        else if ( (LA211_0==NESTED) ) {s = 9;}

                         
                        input.seek(index211_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 211, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA250_eotS =
        "\15\uffff";
    static final String DFA250_eofS =
        "\15\uffff";
    static final String DFA250_minS =
        "\1\3\1\uffff\1\2\3\uffff\1\23\6\uffff";
    static final String DFA250_maxS =
        "\1\u0122\1\uffff\1\2\3\uffff\1\u0122\6\uffff";
    static final String DFA250_acceptS =
        "\1\uffff\1\7\1\uffff\1\2\1\4\1\6\1\uffff\1\1\1\3\4\5";
    static final String DFA250_specialS =
        "\1\0\5\uffff\1\1\6\uffff}>";
    static final String[] DFA250_transitionS = {
            "\1\1\17\uffff\1\3\26\uffff\1\5\41\uffff\1\4\130\uffff\1\2\146"+
            "\uffff\2\5\24\uffff\1\5",
            "",
            "\1\6",
            "",
            "",
            "",
            "\1\7\26\uffff\1\12\41\uffff\1\10\u00bf\uffff\1\13\1\14\24\uffff"+
            "\1\11",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA250_eot = DFA.unpackEncodedString(DFA250_eotS);
    static final short[] DFA250_eof = DFA.unpackEncodedString(DFA250_eofS);
    static final char[] DFA250_min = DFA.unpackEncodedStringToUnsignedChars(DFA250_minS);
    static final char[] DFA250_max = DFA.unpackEncodedStringToUnsignedChars(DFA250_maxS);
    static final short[] DFA250_accept = DFA.unpackEncodedString(DFA250_acceptS);
    static final short[] DFA250_special = DFA.unpackEncodedString(DFA250_specialS);
    static final short[][] DFA250_transition;

    static {
        int numStates = DFA250_transitionS.length;
        DFA250_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA250_transition[i] = DFA.unpackEncodedString(DFA250_transitionS[i]);
        }
    }

    class DFA250 extends DFA {

        public DFA250(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 250;
            this.eot = DFA250_eot;
            this.eof = DFA250_eof;
            this.min = DFA250_min;
            this.max = DFA250_max;
            this.accept = DFA250_accept;
            this.special = DFA250_special;
            this.transition = DFA250_transition;
        }
        public String getDescription() {
            return "()* loopback of 2036:9: ( ( LSQBRACK IDENTIFIER RSQBRACK LPAREN BASECASE )=> base_case_statement_head | ( LPAREN BASECASE )=> base_case_statement_body | ( LSQBRACK IDENTIFIER RSQBRACK LPAREN INDUCTIVECASE )=> inductive_case_statement_head | ( LPAREN INDUCTIVECASE )=> inductive_case_statement_body | ( LSQBRACK IDENTIFIER RSQBRACK )=> headed_proof_expression | proof_expression )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TreeNodeStream input = (TreeNodeStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA250_0 = input.LA(1);

                         
                        int index250_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA250_0==UP) ) {s = 1;}

                        else if ( (LA250_0==IDENTIFIER) ) {s = 2;}

                        else if ( (LA250_0==BASECASE) && (synpred13_RSimpleTrans())) {s = 3;}

                        else if ( (LA250_0==INDUCTIVECASE) && (synpred15_RSimpleTrans())) {s = 4;}

                        else if ( (LA250_0==DEFINITION||(LA250_0>=SUPDEDUC && LA250_0<=SIMPLIFICATION)||LA250_0==GOAL) ) {s = 5;}

                         
                        input.seek(index250_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA250_6 = input.LA(1);

                         
                        int index250_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA250_6==BASECASE) && (synpred12_RSimpleTrans())) {s = 7;}

                        else if ( (LA250_6==INDUCTIVECASE) && (synpred14_RSimpleTrans())) {s = 8;}

                        else if ( (LA250_6==GOAL) && (synpred16_RSimpleTrans())) {s = 9;}

                        else if ( (LA250_6==DEFINITION) && (synpred16_RSimpleTrans())) {s = 10;}

                        else if ( (LA250_6==SUPDEDUC) && (synpred16_RSimpleTrans())) {s = 11;}

                        else if ( (LA250_6==SIMPLIFICATION) && (synpred16_RSimpleTrans())) {s = 12;}

                         
                        input.seek(index250_6);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 250, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA259_eotS =
        "\66\uffff";
    static final String DFA259_eofS =
        "\66\uffff";
    static final String DFA259_minS =
        "\1\52\1\2\3\uffff\1\45\1\3\3\2\1\3\2\2\1\3\3\u00a5\1\3\1\4\1\u00a5"+
        "\6\uffff\4\3\1\u00a5\10\3\1\4\1\2\5\3\1\u00a5\4\3\1\u00a5\2\3";
    static final String DFA259_maxS =
        "\1\u0111\1\2\3\uffff\1\u0113\1\3\3\2\1\3\2\2\1\u0111\2\u00a5\1\u00ad"+
        "\1\u0111\1\u0118\1\u00a5\6\uffff\4\3\5\u00a5\4\3\1\u0118\3\3\3\u0111"+
        "\1\u00a5\2\u0111\1\u00a5\1\3\2\u00a5\1\3";
    static final String DFA259_acceptS =
        "\2\uffff\1\4\2\5\17\uffff\1\1\4\2\1\3\34\uffff";
    static final String DFA259_specialS =
        "\1\4\14\uffff\1\7\3\uffff\1\5\31\uffff\1\1\1\0\1\3\1\uffff\1\6\1"+
        "\2\5\uffff}>";
    static final String[] DFA259_transitionS = {
            "\1\3\u00c4\uffff\1\4\37\uffff\2\2\1\1",
            "\1\5",
            "",
            "",
            "",
            "\1\11\4\uffff\1\13\61\uffff\1\7\52\uffff\1\6\5\uffff\1\12\2"+
            "\uffff\1\10\u0082\uffff\1\14",
            "\1\15",
            "\1\16",
            "\1\17",
            "\1\20",
            "\1\21",
            "\1\22",
            "\1\23",
            "\1\31\46\uffff\1\27\u00c4\uffff\1\30\36\uffff\1\25\1\26\1\uffff"+
            "\1\24",
            "\1\32",
            "\1\33",
            "\1\34\7\uffff\1\35",
            "\1\31\46\uffff\1\27\u00c4\uffff\1\30\36\uffff\1\25\1\26\1\uffff"+
            "\1\24",
            "\1\41\5\uffff\1\40\22\uffff\1\37\16\uffff\1\40\33\uffff\1\40"+
            "\1\uffff\1\40\4\uffff\1\40\2\uffff\10\40\10\uffff\1\40\2\uffff"+
            "\1\41\1\40\2\uffff\1\40\24\uffff\1\40\27\uffff\1\40\12\uffff"+
            "\1\40\3\uffff\1\42\13\uffff\1\36\11\uffff\2\37\1\uffff\12\40"+
            "\116\uffff\3\40",
            "\1\43",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\44",
            "\1\45",
            "\1\46",
            "\1\46",
            "\1\47",
            "\1\51\u00a1\uffff\1\50",
            "\1\51\u00a1\uffff\1\50",
            "\1\51\u00a1\uffff\1\50",
            "\1\51\u00a1\uffff\1\50",
            "\1\52",
            "\1\53",
            "\1\54",
            "\1\55",
            "\1\41\5\uffff\1\40\22\uffff\1\37\16\uffff\1\40\33\uffff\1\40"+
            "\1\uffff\1\40\4\uffff\1\40\2\uffff\10\40\10\uffff\1\40\2\uffff"+
            "\1\41\1\40\2\uffff\1\40\24\uffff\1\40\27\uffff\1\40\12\uffff"+
            "\1\40\3\uffff\1\42\25\uffff\2\37\1\uffff\12\40\116\uffff\3\40",
            "\1\56\1\51",
            "\1\57",
            "\1\60",
            "\1\31\46\uffff\1\27\u00c4\uffff\1\30\36\uffff\1\25\1\26\1\uffff"+
            "\1\24",
            "\1\31\46\uffff\1\27\u00c4\uffff\1\30\36\uffff\1\25\1\26\1\uffff"+
            "\1\24",
            "\1\31\46\uffff\1\27\u00c4\uffff\1\30\36\uffff\1\25\1\26\1\uffff"+
            "\1\24",
            "\1\61",
            "\1\31\46\uffff\1\27\u00c4\uffff\1\30\36\uffff\1\25\1\26\1\uffff"+
            "\1\24",
            "\1\31\46\uffff\1\27\u00c4\uffff\1\30\36\uffff\1\25\1\26\1\uffff"+
            "\1\24",
            "\1\63\u00a1\uffff\1\62",
            "\1\63",
            "\1\64",
            "\1\51\u00a1\uffff\1\65",
            "\1\51"
    };

    static final short[] DFA259_eot = DFA.unpackEncodedString(DFA259_eotS);
    static final short[] DFA259_eof = DFA.unpackEncodedString(DFA259_eofS);
    static final char[] DFA259_min = DFA.unpackEncodedStringToUnsignedChars(DFA259_minS);
    static final char[] DFA259_max = DFA.unpackEncodedStringToUnsignedChars(DFA259_maxS);
    static final short[] DFA259_accept = DFA.unpackEncodedString(DFA259_acceptS);
    static final short[] DFA259_special = DFA.unpackEncodedString(DFA259_specialS);
    static final short[][] DFA259_transition;

    static {
        int numStates = DFA259_transitionS.length;
        DFA259_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA259_transition[i] = DFA.unpackEncodedString(DFA259_transitionS[i]);
        }
    }

    class DFA259 extends DFA {

        public DFA259(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 259;
            this.eot = DFA259_eot;
            this.eof = DFA259_eof;
            this.min = DFA259_min;
            this.max = DFA259_max;
            this.accept = DFA259_accept;
            this.special = DFA259_special;
            this.transition = DFA259_transition;
        }
        public String getDescription() {
            return "2137:9: ( ( hyp_desig COMMA )=> double_hyp_rule_justification | ( hyp_desig AMPERSAND )=> single_hyp_rule_justification | ( hyp_desig )=> hyp_desig | simple_justification | ( DEFINITION )=> def_justification )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TreeNodeStream input = (TreeNodeStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA259_44 = input.LA(1);

                         
                        int index259_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA259_44==HYPDESIG) && (synpred20_RSimpleTrans())) {s = 20;}

                        else if ( (LA259_44==RULE1) && (synpred21_RSimpleTrans())) {s = 21;}

                        else if ( (LA259_44==RULE2) && (synpred21_RSimpleTrans())) {s = 22;}

                        else if ( (LA259_44==DEFINITION) && (synpred21_RSimpleTrans())) {s = 23;}

                        else if ( (LA259_44==INDEXED_DEFINITION) && (synpred21_RSimpleTrans())) {s = 24;}

                        else if ( (LA259_44==UP) && (synpred22_RSimpleTrans())) {s = 25;}

                         
                        input.seek(index259_44);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA259_43 = input.LA(1);

                         
                        int index259_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA259_43==HYPDESIG) && (synpred20_RSimpleTrans())) {s = 20;}

                        else if ( (LA259_43==RULE1) && (synpred21_RSimpleTrans())) {s = 21;}

                        else if ( (LA259_43==RULE2) && (synpred21_RSimpleTrans())) {s = 22;}

                        else if ( (LA259_43==DEFINITION) && (synpred21_RSimpleTrans())) {s = 23;}

                        else if ( (LA259_43==INDEXED_DEFINITION) && (synpred21_RSimpleTrans())) {s = 24;}

                        else if ( (LA259_43==UP) && (synpred22_RSimpleTrans())) {s = 25;}

                         
                        input.seek(index259_43);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA259_48 = input.LA(1);

                         
                        int index259_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA259_48==HYPDESIG) && (synpred20_RSimpleTrans())) {s = 20;}

                        else if ( (LA259_48==RULE1) && (synpred21_RSimpleTrans())) {s = 21;}

                        else if ( (LA259_48==RULE2) && (synpred21_RSimpleTrans())) {s = 22;}

                        else if ( (LA259_48==DEFINITION) && (synpred21_RSimpleTrans())) {s = 23;}

                        else if ( (LA259_48==INDEXED_DEFINITION) && (synpred21_RSimpleTrans())) {s = 24;}

                        else if ( (LA259_48==UP) && (synpred22_RSimpleTrans())) {s = 25;}

                         
                        input.seek(index259_48);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA259_45 = input.LA(1);

                         
                        int index259_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA259_45==HYPDESIG) && (synpred20_RSimpleTrans())) {s = 20;}

                        else if ( (LA259_45==RULE1) && (synpred21_RSimpleTrans())) {s = 21;}

                        else if ( (LA259_45==RULE2) && (synpred21_RSimpleTrans())) {s = 22;}

                        else if ( (LA259_45==DEFINITION) && (synpred21_RSimpleTrans())) {s = 23;}

                        else if ( (LA259_45==INDEXED_DEFINITION) && (synpred21_RSimpleTrans())) {s = 24;}

                        else if ( (LA259_45==UP) && (synpred22_RSimpleTrans())) {s = 25;}

                         
                        input.seek(index259_45);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA259_0 = input.LA(1);

                         
                        int index259_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA259_0==HYPDESIG) ) {s = 1;}

                        else if ( ((LA259_0>=RULE2 && LA259_0<=RULE3)) ) {s = 2;}

                        else if ( (LA259_0==DEFINITION) && (synpred23_RSimpleTrans())) {s = 3;}

                        else if ( (LA259_0==INDEXED_DEFINITION) && (synpred23_RSimpleTrans())) {s = 4;}

                         
                        input.seek(index259_0);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA259_17 = input.LA(1);

                         
                        int index259_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA259_17==HYPDESIG) && (synpred20_RSimpleTrans())) {s = 20;}

                        else if ( (LA259_17==RULE1) && (synpred21_RSimpleTrans())) {s = 21;}

                        else if ( (LA259_17==RULE2) && (synpred21_RSimpleTrans())) {s = 22;}

                        else if ( (LA259_17==DEFINITION) && (synpred21_RSimpleTrans())) {s = 23;}

                        else if ( (LA259_17==INDEXED_DEFINITION) && (synpred21_RSimpleTrans())) {s = 24;}

                        else if ( (LA259_17==UP) && (synpred22_RSimpleTrans())) {s = 25;}

                         
                        input.seek(index259_17);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA259_47 = input.LA(1);

                         
                        int index259_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA259_47==HYPDESIG) && (synpred20_RSimpleTrans())) {s = 20;}

                        else if ( (LA259_47==RULE1) && (synpred21_RSimpleTrans())) {s = 21;}

                        else if ( (LA259_47==RULE2) && (synpred21_RSimpleTrans())) {s = 22;}

                        else if ( (LA259_47==DEFINITION) && (synpred21_RSimpleTrans())) {s = 23;}

                        else if ( (LA259_47==INDEXED_DEFINITION) && (synpred21_RSimpleTrans())) {s = 24;}

                        else if ( (LA259_47==UP) && (synpred22_RSimpleTrans())) {s = 25;}

                         
                        input.seek(index259_47);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA259_13 = input.LA(1);

                         
                        int index259_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA259_13==HYPDESIG) && (synpred20_RSimpleTrans())) {s = 20;}

                        else if ( (LA259_13==RULE1) && (synpred21_RSimpleTrans())) {s = 21;}

                        else if ( (LA259_13==RULE2) && (synpred21_RSimpleTrans())) {s = 22;}

                        else if ( (LA259_13==DEFINITION) && (synpred21_RSimpleTrans())) {s = 23;}

                        else if ( (LA259_13==INDEXED_DEFINITION) && (synpred21_RSimpleTrans())) {s = 24;}

                        else if ( (LA259_13==UP) && (synpred22_RSimpleTrans())) {s = 25;}

                         
                        input.seek(index259_13);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 259, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA267_eotS =
        "\13\uffff";
    static final String DFA267_eofS =
        "\13\uffff";
    static final String DFA267_minS =
        "\1\u010f\1\2\1\u00e2\10\uffff";
    static final String DFA267_maxS =
        "\1\u010f\1\2\1\u0107\10\uffff";
    static final String DFA267_acceptS =
        "\3\uffff\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10";
    static final String DFA267_specialS =
        "\13\uffff}>";
    static final String[] DFA267_transitionS = {
            "\1\1",
            "\1\2",
            "\1\11\4\uffff\1\6\1\7\16\uffff\1\10\1\uffff\1\12\2\uffff\1"+
            "\3\11\uffff\1\4\1\5",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA267_eot = DFA.unpackEncodedString(DFA267_eotS);
    static final short[] DFA267_eof = DFA.unpackEncodedString(DFA267_eofS);
    static final char[] DFA267_min = DFA.unpackEncodedStringToUnsignedChars(DFA267_minS);
    static final char[] DFA267_max = DFA.unpackEncodedStringToUnsignedChars(DFA267_maxS);
    static final short[] DFA267_accept = DFA.unpackEncodedString(DFA267_acceptS);
    static final short[] DFA267_special = DFA.unpackEncodedString(DFA267_specialS);
    static final short[][] DFA267_transition;

    static {
        int numStates = DFA267_transitionS.length;
        DFA267_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA267_transition[i] = DFA.unpackEncodedString(DFA267_transitionS[i]);
        }
    }

    class DFA267 extends DFA {

        public DFA267(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 267;
            this.eot = DFA267_eot;
            this.eof = DFA267_eof;
            this.min = DFA267_min;
            this.max = DFA267_max;
            this.accept = DFA267_accept;
            this.special = DFA267_special;
            this.transition = DFA267_transition;
        }
        public String getDescription() {
            return "2179:5: ( ^( RULE2 REDUCTIO_AD_ABSURDUM ) | ^( RULE2 UNIVERSAL_GENERALIZATION ) | ^( RULE2 UNIVERSAL_INSTANTIATION ) | ^( RULE2 EXISTENTIAL_GENERALIZATION ) | ^( RULE2 EXISTENTIAL_INSTANTIATION ) | ^( RULE2 OR_RULE ) | ^( RULE2 CONJUNCT_ELIMINATION ) | ^( RULE2 QUANTIFIER_DISTRIBUTION ) )";
        }
    }
    static final String DFA268_eotS =
        "\12\uffff";
    static final String DFA268_eofS =
        "\12\uffff";
    static final String DFA268_minS =
        "\1\u0111\1\2\1\45\7\uffff";
    static final String DFA268_maxS =
        "\1\u0111\1\2\1\u0113\7\uffff";
    static final String DFA268_acceptS =
        "\3\uffff\1\1\1\2\1\3\1\4\1\5\1\6\1\7";
    static final String DFA268_specialS =
        "\12\uffff}>";
    static final String[] DFA268_transitionS = {
            "\1\1",
            "\1\2",
            "\1\6\4\uffff\1\10\61\uffff\1\4\52\uffff\1\3\5\uffff\1\7\2\uffff"+
            "\1\5\u0082\uffff\1\11",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA268_eot = DFA.unpackEncodedString(DFA268_eotS);
    static final short[] DFA268_eof = DFA.unpackEncodedString(DFA268_eofS);
    static final char[] DFA268_min = DFA.unpackEncodedStringToUnsignedChars(DFA268_minS);
    static final char[] DFA268_max = DFA.unpackEncodedStringToUnsignedChars(DFA268_maxS);
    static final short[] DFA268_accept = DFA.unpackEncodedString(DFA268_acceptS);
    static final short[] DFA268_special = DFA.unpackEncodedString(DFA268_specialS);
    static final short[][] DFA268_transition;

    static {
        int numStates = DFA268_transitionS.length;
        DFA268_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA268_transition[i] = DFA.unpackEncodedString(DFA268_transitionS[i]);
        }
    }

    class DFA268 extends DFA {

        public DFA268(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 268;
            this.eot = DFA268_eot;
            this.eof = DFA268_eof;
            this.min = DFA268_min;
            this.max = DFA268_max;
            this.accept = DFA268_accept;
            this.special = DFA268_special;
            this.transition = DFA268_transition;
        }
        public String getDescription() {
            return "2196:5: ( ^( HYPDESIG SELF ) | ^( HYPDESIG lemma_call ) | ^( HYPDESIG theorem_call ) | ^( HYPDESIG corollary_name ) | ^( HYPDESIG supposition_call ) | ^( HYPDESIG definition_call ) | ^( HYPDESIG reference_marker_call ) )";
        }
    }
 

    public static final BitSet FOLLOW_proof_module_in_module98 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_theory_module_in_module112 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_conceptual_module_in_module126 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_performance_module_in_module140 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_realization_body_module_in_module155 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_enhancement_module_in_module169 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_facility_module_in_module185 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_THEORY_in_theory_module239 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_ident_in_theory_module241 = new BitSet(new long[]{0x0000042010020008L,0x0008000010000000L,0x0000000008010000L,0x0119400040000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_module_formal_param_section_in_theory_module252 = new BitSet(new long[]{0x0000042010020008L,0x0008000010000000L,0x0000000008010000L,0x0019400040000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_uses_list_in_theory_module265 = new BitSet(new long[]{0x0000042010020008L,0x0008000010000000L,0x0000000000010000L,0x0019400040000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_math_item_sequence_in_theory_module278 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_math_item_in_math_item_sequence311 = new BitSet(new long[]{0x0000042010020002L,0x0008000010000000L,0x0000000000010000L,0x0019400040000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_formal_type_declaration_in_math_item332 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_math_type_declaration_in_math_item342 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_definition_declaration_in_math_item352 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_categorical_definition_declaration_in_math_item362 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_math_assertion_declaration_in_math_item372 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_subtype_declaration_in_math_item382 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MODULE_CONCEPT_in_conceptual_module406 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_ident_in_conceptual_module410 = new BitSet(new long[]{0x8000060400000008L,0x0000010000000001L,0x0000000018200008L,0x0101400200000000L});
    public static final BitSet FOLLOW_module_formal_param_section_in_conceptual_module422 = new BitSet(new long[]{0x8000060400000008L,0x0000010000000001L,0x0000000018200008L,0x0001400200000000L});
    public static final BitSet FOLLOW_uses_list_in_conceptual_module436 = new BitSet(new long[]{0x8000060400000008L,0x0000010000000001L,0x0000000010200008L,0x0001400200000000L});
    public static final BitSet FOLLOW_requires_clause_in_conceptual_module449 = new BitSet(new long[]{0x8000060400000008L,0x0000010000000001L,0x0000000010200000L,0x0001400200000000L});
    public static final BitSet FOLLOW_concept_item_sequence_in_conceptual_module462 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_concept_item_in_concept_item_sequence494 = new BitSet(new long[]{0x8000060400000002L,0x0000010000000001L,0x0000000010200000L,0x0001400200000000L});
    public static final BitSet FOLLOW_confirm_math_type_declaration_in_concept_item517 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_concept_state_variable_declaration_in_concept_item527 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_constraint_clause_in_concept_item537 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_module_concept_init_declaration_in_concept_item547 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_module_concept_final_declaration_in_concept_item557 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_declaration_in_concept_item567 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_operation_declaration_in_concept_item577 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_definition_declaration_in_concept_item587 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_defines_declaration_in_concept_item597 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MODULE_PROFILE_in_performance_module633 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_ident_in_performance_module637 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000002000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_module_formal_param_section_in_performance_module648 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000002000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_ident_in_performance_module660 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000002000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_ident_in_performance_module662 = new BitSet(new long[]{0x8000060400000008L,0x0000190000000001L,0x0000002018200008L,0x0101400200000000L});
    public static final BitSet FOLLOW_ident_in_performance_module665 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000002000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_ident_in_performance_module667 = new BitSet(new long[]{0x8000060400000008L,0x0000190000000001L,0x0000000018200008L,0x0001400200000000L});
    public static final BitSet FOLLOW_uses_list_in_performance_module680 = new BitSet(new long[]{0x8000060400000008L,0x0000190000000001L,0x0000000010200008L,0x0001400200000000L});
    public static final BitSet FOLLOW_requires_clause_in_performance_module693 = new BitSet(new long[]{0x8000060400000008L,0x0000190000000001L,0x0000000010200000L,0x0001400200000000L});
    public static final BitSet FOLLOW_performance_item_sequence_in_performance_module706 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_performance_item_in_performance_item_sequence729 = new BitSet(new long[]{0x8000060400000002L,0x0000190000000001L,0x0000000010200000L,0x0001400200000000L});
    public static final BitSet FOLLOW_confirm_math_type_declaration_in_performance_item752 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_concept_state_variable_declaration_in_performance_item762 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_constraint_clause_in_performance_item772 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_performance_module_init_declaration_in_performance_item782 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_performance_module_final_declaration_in_performance_item792 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_performance_type_declaration_in_performance_item802 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_performance_operation_declaration_in_performance_item812 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_definition_declaration_in_performance_item822 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_defines_declaration_in_performance_item832 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MODULE_ENHANCEMENT_in_enhancement_module856 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_ident_in_enhancement_module860 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000002000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_module_formal_param_section_in_enhancement_module872 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000002000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_ident_in_enhancement_module885 = new BitSet(new long[]{0x8000060400000008L,0x0000010000000001L,0x0000000018200008L,0x0001400200000000L});
    public static final BitSet FOLLOW_uses_list_in_enhancement_module897 = new BitSet(new long[]{0x8000060400000008L,0x0000010000000001L,0x0000000010200008L,0x0001400200000000L});
    public static final BitSet FOLLOW_requires_clause_in_enhancement_module910 = new BitSet(new long[]{0x8000060400000008L,0x0000010000000001L,0x0000000010200000L,0x0001400200000000L});
    public static final BitSet FOLLOW_enhancement_item_sequence_in_enhancement_module923 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_enhancement_item_in_enhancement_item_sequence946 = new BitSet(new long[]{0x8000060400000002L,0x0000010000000001L,0x0000000010200000L,0x0001400200000000L});
    public static final BitSet FOLLOW_concept_state_variable_declaration_in_enhancement_item967 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_declaration_in_enhancement_item977 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_operation_declaration_in_enhancement_item987 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_definition_declaration_in_enhancement_item997 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_defines_declaration_in_enhancement_item1007 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MODULE_REALIZATION_in_realization_body_module1031 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_ident_in_realization_body_module1035 = new BitSet(new long[]{0x0010000040000000L,0x0000000000000000L,0x0000000400000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_WITH_PROFILE_in_realization_body_module1047 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000002000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_ident_in_realization_body_module1049 = new BitSet(new long[]{0x0010000040000000L,0x0000000000000000L,0x0000000400000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_module_formal_param_section_in_realization_body_module1054 = new BitSet(new long[]{0x0010000040000000L,0x0000000000000000L,0x0000000400000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_body_enhancement_section_in_realization_body_module1078 = new BitSet(new long[]{0xC000045000000008L,0x0000810000000001L,0x0000000018100008L,0x0C01400008000000L});
    public static final BitSet FOLLOW_body_concept_section_in_realization_body_module1092 = new BitSet(new long[]{0xC000045000000008L,0x0000810000000001L,0x0000000018100008L,0x0C01400008000000L});
    public static final BitSet FOLLOW_uses_list_in_realization_body_module1114 = new BitSet(new long[]{0xC000045000000008L,0x0000810000000001L,0x0000000010100008L,0x0C01400008000000L});
    public static final BitSet FOLLOW_requires_clause_in_realization_body_module1127 = new BitSet(new long[]{0xC000045000000008L,0x0000810000000001L,0x0000000010100000L,0x0C01400008000000L});
    public static final BitSet FOLLOW_body_item_sequence_in_realization_body_module1140 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_CONCEPT_in_body_concept_section1163 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_ident_in_body_concept_section1165 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000002000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_ident_in_body_concept_section1168 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000002000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_ENHANCEMENT_in_body_enhancement_section1191 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_ident_in_body_enhancement_section1193 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000002000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_ident_in_body_enhancement_section1195 = new BitSet(new long[]{0x0008000000000008L});
    public static final BitSet FOLLOW_added_enhancement_section_in_body_enhancement_section1198 = new BitSet(new long[]{0x0008000000000008L});
    public static final BitSet FOLLOW_ENHANCED_in_added_enhancement_section1221 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_ident_in_added_enhancement_section1223 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_module_argument_section_in_added_enhancement_section1233 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_REALIZED_in_added_enhancement_section1243 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000002000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_ident_in_added_enhancement_section1245 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000400000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_WITH_PROFILE_in_added_enhancement_section1256 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000002000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_ident_in_added_enhancement_section1258 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_module_argument_section_in_added_enhancement_section1262 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_ENHANCED_in_added_enhancement_section1275 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_ident_in_added_enhancement_section1277 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_REALIZED_in_added_enhancement_section1287 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000002000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_ident_in_added_enhancement_section1289 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000400000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_WITH_PROFILE_in_added_enhancement_section1300 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000002000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_ident_in_added_enhancement_section1302 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_module_argument_section_in_added_enhancement_section1306 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_body_item_in_body_item_sequence1328 = new BitSet(new long[]{0xC000045000000002L,0x0000810000000001L,0x0000000010100000L,0x0C01400008000000L});
    public static final BitSet FOLLOW_state_variable_declaration_in_body_item1349 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_correspondence_clause_in_body_item1359 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_convention_clause_in_body_item1369 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_module_body_init_declaration_in_body_item1379 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_module_body_final_declaration_in_body_item1389 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_representation_declaration_in_body_item1399 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_operation_procedure_declaration_in_body_item1409 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_operation_recursive_procedure_declaration_in_body_item1419 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_aux_operation_declaration_in_body_item1429 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_procedure_declaration_in_body_item1439 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_recursive_procedure_declaration_in_body_item1449 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_definition_declaration_in_body_item1459 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_facility_declaration_in_body_item1473 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FACILITY_in_facility_module1505 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_ident_in_facility_module1509 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000002000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_short_facility_section_in_facility_module1511 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_uses_list_in_facility_module1514 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_FACILITY_in_facility_module1533 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_ident_in_facility_module1537 = new BitSet(new long[]{0xC000045000000008L,0x0000810000000001L,0x0000000018100000L,0x0C01400008000000L});
    public static final BitSet FOLLOW_uses_list_in_facility_module1542 = new BitSet(new long[]{0xC000045000000008L,0x0000810000000001L,0x0000000010100000L,0x0C01400008000000L});
    public static final BitSet FOLLOW_facility_item_sequence_in_facility_module1549 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_ident_in_short_facility_section1692 = new BitSet(new long[]{0x0008000000000000L,0x0000000000000000L,0x0000002000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_module_argument_section_in_short_facility_section1702 = new BitSet(new long[]{0x0008000000000000L,0x0000000000000000L,0x0000002000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_facility_enhancement_in_short_facility_section1713 = new BitSet(new long[]{0x0008000000000000L,0x0000000000000000L,0x0000002000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_ident_in_short_facility_section1726 = new BitSet(new long[]{0x0008000000000002L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_module_argument_section_in_short_facility_section1736 = new BitSet(new long[]{0x0008000000000002L});
    public static final BitSet FOLLOW_facility_body_enhancement_in_short_facility_section1747 = new BitSet(new long[]{0x0008000000000002L});
    public static final BitSet FOLLOW_facility_item_in_facility_item_sequence1778 = new BitSet(new long[]{0xC000045000000002L,0x0000810000000001L,0x0000000010100000L,0x0C01400008000000L});
    public static final BitSet FOLLOW_state_variable_declaration_in_facility_item1816 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_module_facility_init_declaration_in_facility_item1844 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_module_facility_final_declaration_in_facility_item1872 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_facility_type_declaration_in_facility_item1902 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_operation_recursive_procedure_declaration_in_facility_item1948 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_operation_procedure_declaration_in_facility_item1978 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_definition_declaration_in_facility_item2017 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_facility_declaration_in_facility_item2047 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PARAMS_in_module_formal_param_section2093 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_module_parameter_in_module_formal_param_section2095 = new BitSet(new long[]{0x0100040000000008L,0x0040010000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_module_parameter_in_module_formal_param_section2098 = new BitSet(new long[]{0x0100040000000008L,0x0040010000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_definition_parameter_in_module_parameter2120 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_constant_parameter_in_module_parameter2139 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_concept_type_parameter_in_module_parameter2149 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_operation_parameter_in_module_parameter2159 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_concept_realization_parameter_in_module_parameter2169 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DEFINITION_in_definition_parameter2189 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_definition_signature_in_definition_parameter2191 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_EVALUATES_in_constant_parameter2212 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_variable_declaration_group_in_constant_parameter2214 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_TYPE_in_concept_type_parameter2235 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_ident_in_concept_type_parameter2237 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_operation_declaration_in_operation_parameter2257 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REALIZATION_in_concept_realization_parameter2277 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_ident_in_concept_realization_parameter2279 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000002000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_ident_in_concept_realization_parameter2289 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_uses_clause_in_uses_list2320 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_USES_in_uses_clause2384 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_ident_in_uses_clause2390 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000002000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_LOCAL_MATH_TYPE_in_formal_type_declaration2460 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_ident_in_formal_type_declaration2462 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_MATH_SUBTYPE_in_subtype_declaration2488 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_qualified_type_in_subtype_declaration2499 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000082000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_ident_in_subtype_declaration2503 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000082000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_qualified_type_in_subtype_declaration2524 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_ident_in_subtype_declaration2528 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_DOT_in_qualified_type2559 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_ident_in_qualified_type2561 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000002000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_ident_in_qualified_type2563 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_MATH_TYPE_in_math_type_declaration2584 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_ident_in_math_type_declaration2586 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_math_type_expression_in_math_type_declaration2596 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_CONFIRM_TYPE_in_confirm_math_type_declaration2617 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_math_variable_declaration_in_confirm_math_type_declaration2619 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_TYPEX_in_sset_type_expression2640 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_sset_function_type_expression_in_sset_type_expression2642 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_FUNCARROW_in_sset_function_type_expression2688 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000080200L});
    public static final BitSet FOLLOW_sset_domain_expression_in_sset_function_type_expression2690 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_SSET_in_sset_function_type_expression2692 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SSET_in_sset_function_type_expression2702 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMES_in_sset_domain_expression2722 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_SSET_in_sset_domain_expression2724 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_SSET_in_sset_domain_expression2736 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AXIOM_in_math_assertion_declaration2764 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_math_theorem_ident_in_math_assertion_declaration2769 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_math_expression_in_math_assertion_declaration2775 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_THEOREM_in_math_assertion_declaration2791 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_math_theorem_ident_in_math_assertion_declaration2796 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_math_expression_in_math_assertion_declaration2802 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_PROPERTY_in_math_assertion_declaration2818 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_math_theorem_ident_in_math_assertion_declaration2823 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_math_expression_in_math_assertion_declaration2829 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_LEMMA_in_math_assertion_declaration2845 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_math_theorem_ident_in_math_assertion_declaration2850 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_math_expression_in_math_assertion_declaration2856 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_COROLLARY_in_math_assertion_declaration2872 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_math_theorem_ident_in_math_assertion_declaration2877 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_math_expression_in_math_assertion_declaration2883 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_COMMUTATIVITY_in_math_assertion_declaration2898 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000202000000000L,0x0100040000000000L});
    public static final BitSet FOLLOW_math_theorem_ident_in_math_assertion_declaration2903 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_math_expression_in_math_assertion_declaration2909 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CONSTRAINT_in_constraint_clause2939 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_math_expression_in_constraint_clause2941 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_CORR_in_correspondence_clause2963 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_math_expression_in_correspondence_clause2965 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_CONVENTION_in_convention_clause2987 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_math_expression_in_convention_clause2989 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_VAR_in_concept_state_variable_declaration3015 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_math_variable_declaration_group_in_concept_state_variable_declaration3017 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_VAR_in_state_variable_declaration3038 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_variable_declaration_group_in_state_variable_declaration3040 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_AUX_VAR_in_state_aux_variable_declaration3066 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_variable_declaration_group_in_state_aux_variable_declaration3068 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_FACILITY_in_facility_declaration3098 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_ident_in_facility_declaration3104 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000002000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_ident_in_facility_declaration3116 = new BitSet(new long[]{0x0008000000000000L,0x0100000000000000L,0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_module_argument_section_in_facility_declaration3128 = new BitSet(new long[]{0x0008000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_facility_enhancement_in_facility_declaration3151 = new BitSet(new long[]{0x0008000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_REALIZED_in_facility_declaration3162 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000002000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_ident_in_facility_declaration3176 = new BitSet(new long[]{0x0008000000000008L,0x0000000000000000L,0x0000000400000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_WITH_PROFILE_in_facility_declaration3197 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000002000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_ident_in_facility_declaration3199 = new BitSet(new long[]{0x0008000000000008L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_module_argument_section_in_facility_declaration3205 = new BitSet(new long[]{0x0008000000000008L});
    public static final BitSet FOLLOW_facility_body_enhancement_in_facility_declaration3218 = new BitSet(new long[]{0x0008000000000008L});
    public static final BitSet FOLLOW_ENHANCED_in_facility_enhancement3492 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_ident_in_facility_enhancement3496 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_module_argument_section_in_facility_enhancement3506 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_ENHANCED_in_facility_body_enhancement3532 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_ident_in_facility_body_enhancement3538 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_module_argument_section_in_facility_body_enhancement3550 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_REALIZED_in_facility_body_enhancement3560 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000002000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_ident_in_facility_body_enhancement3566 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000400000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_WITH_PROFILE_in_facility_body_enhancement3577 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000002000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_ident_in_facility_body_enhancement3579 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_module_argument_section_in_facility_body_enhancement3585 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_ENHANCED_in_facility_body_enhancement3728 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_ident_in_facility_body_enhancement3734 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_REALIZED_in_facility_body_enhancement3744 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000002000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_ident_in_facility_body_enhancement3750 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000400000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_WITH_PROFILE_in_facility_body_enhancement3761 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000002000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_ident_in_facility_body_enhancement3763 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_module_argument_section_in_facility_body_enhancement3769 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_PARAMS_in_module_argument_section3921 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_module_argument_in_module_argument_section3927 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000002000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_qualified_ident_in_module_argument3981 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_program_expression_in_module_argument4003 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DEFINES_in_defines_declaration4037 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_definition_signature_in_defines_declaration4039 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_implicit_definition_declaration_in_definition_declaration4060 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inductive_definition_declaration_in_definition_declaration4070 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_standard_definition_declaration_in_definition_declaration4082 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IMPLICIT_DEF_in_implicit_definition_declaration4117 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_definition_signature_in_implicit_definition_declaration4119 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_math_expression_in_implicit_definition_declaration4129 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_INDUCTIVE_DEF_in_inductive_definition_declaration4150 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_definition_signature_in_inductive_definition_declaration4152 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_indexed_expression_in_inductive_definition_declaration4162 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_indexed_expression_in_inductive_definition_declaration4164 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_DEFINITION_in_standard_definition_declaration4189 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_definition_signature_in_standard_definition_declaration4195 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_math_expression_in_standard_definition_declaration4209 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_CATEGORICAL_DEFINITION_in_categorical_definition_declaration4321 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_categorical_definition_construct_in_categorical_definition_declaration4323 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_RELATED_BY_in_categorical_definition_declaration4326 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_math_expression_in_categorical_definition_declaration4328 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_infix_definition_construct_in_definition_signature4353 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_outfix_definition_construct_in_definition_signature4367 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_standard_definition_construct_in_definition_signature4383 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_math_type_expression_in_definition_signature4414 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_singleton_definition_parameter_in_infix_definition_construct4433 = new BitSet(new long[]{0x0000100020000400L,0x4000024403FC8500L,0xD800002200400000L,0x01000000000000FFL,0x0000000001C00000L});
    public static final BitSet FOLLOW_ident_in_infix_definition_construct4444 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_infix_symbol_in_infix_definition_construct4448 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_singleton_definition_parameter_in_infix_definition_construct4459 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BAR_in_outfix_definition_construct4478 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_singleton_definition_parameter_in_outfix_definition_construct4480 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DBL_BAR_in_outfix_definition_construct4491 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_singleton_definition_parameter_in_outfix_definition_construct4493 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_DBL__in_outfix_definition_construct4495 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LT_in_outfix_definition_construct4505 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_singleton_definition_parameter_in_outfix_definition_construct4507 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LL_in_outfix_definition_construct4518 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_singleton_definition_parameter_in_outfix_definition_construct4520 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ident_in_standard_definition_construct4543 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_prefix_symbol_in_standard_definition_construct4547 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_quant_symbol_in_standard_definition_construct4551 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_NUMERIC_LITERAL_in_standard_definition_construct4555 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_definition_formal_param_section_in_standard_definition_construct4569 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DEFINITION_in_categorical_definition_construct4613 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_definition_signature_in_categorical_definition_construct4615 = new BitSet(new long[]{0x0000040000000008L});
    public static final BitSet FOLLOW_DEFINITION_in_categorical_definition_construct4618 = new BitSet(new long[]{0x0000000020000010L,0x0000002000000000L,0x1800202000000000L,0x0100000000018140L,0x000000003E000000L});
    public static final BitSet FOLLOW_definition_signature_in_categorical_definition_construct4620 = new BitSet(new long[]{0x0000040000000008L});
    public static final BitSet FOLLOW_math_expression_in_indexed_expression4644 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PARAMS_in_singleton_definition_parameter4673 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_math_variable_declaration_in_singleton_definition_parameter4675 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_PARAMS_in_definition_formal_param_section4696 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_math_variable_declaration_group_in_definition_formal_param_section4698 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000002000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_set_in_infix_symbol0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_prefix_symbol0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_quant_symbol0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OPERATION_in_operation_procedure_declaration4964 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_ident_in_operation_procedure_declaration4970 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_operation_formal_param_section_in_operation_procedure_declaration4982 = new BitSet(new long[]{0xC04004D000004800L,0x0000810000000001L,0x0000000010100008L,0x0C01400009000000L,0x000000000000000AL});
    public static final BitSet FOLLOW_program_type_expression_in_operation_procedure_declaration4994 = new BitSet(new long[]{0xC04004D000004800L,0x0000810000000001L,0x0000000010100008L,0x0C01400009000000L,0x000000000000000AL});
    public static final BitSet FOLLOW_affects_clause_in_operation_procedure_declaration5008 = new BitSet(new long[]{0xC04004D000004800L,0x0000810000000001L,0x0000000010100008L,0x0C01400009000000L,0x000000000000000AL});
    public static final BitSet FOLLOW_requires_clause_in_operation_procedure_declaration5021 = new BitSet(new long[]{0xC04004D000004800L,0x0000810000000001L,0x0000000010100008L,0x0C01400009000000L,0x000000000000000AL});
    public static final BitSet FOLLOW_ensures_clause_in_operation_procedure_declaration5034 = new BitSet(new long[]{0xC04004D000004800L,0x0000810000000001L,0x0000000010100008L,0x0C01400009000000L,0x000000000000000AL});
    public static final BitSet FOLLOW_decreasing_clause_in_operation_procedure_declaration5056 = new BitSet(new long[]{0xC04004D000004800L,0x0000810000000001L,0x0000000010100008L,0x0C01400009000000L,0x000000000000000AL});
    public static final BitSet FOLLOW_facility_declaration_in_operation_procedure_declaration5069 = new BitSet(new long[]{0xC04004D000004800L,0x0000810000000001L,0x0000000010100008L,0x0C01400009000000L,0x000000000000000AL});
    public static final BitSet FOLLOW_variable_declaration_in_operation_procedure_declaration5082 = new BitSet(new long[]{0xC04004D000004800L,0x0000810000000001L,0x0000000010100008L,0x0C01400009000000L,0x000000000000000AL});
    public static final BitSet FOLLOW_aux_variable_declaration_in_operation_procedure_declaration5095 = new BitSet(new long[]{0xC04004D000004800L,0x0000810000000001L,0x0000000010100008L,0x0C01400009000000L,0x000000000000000AL});
    public static final BitSet FOLLOW_statement_sequence_in_operation_procedure_declaration5108 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_RECURSIVE_OPERATION_PROCEDURE_in_operation_recursive_procedure_declaration5439 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_ident_in_operation_recursive_procedure_declaration5443 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_operation_formal_param_section_in_operation_recursive_procedure_declaration5453 = new BitSet(new long[]{0x0040008000000800L,0x0000000000000000L,0x0000000000000008L,0x0000000001000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_program_type_expression_in_operation_recursive_procedure_declaration5465 = new BitSet(new long[]{0x0040008000000000L,0x0000000000000000L,0x0000000000000008L,0x0000000001000000L});
    public static final BitSet FOLLOW_affects_clause_in_operation_recursive_procedure_declaration5478 = new BitSet(new long[]{0x0040008000000000L,0x0000000000000000L,0x0000000000000008L,0x0000000001000000L});
    public static final BitSet FOLLOW_requires_clause_in_operation_recursive_procedure_declaration5489 = new BitSet(new long[]{0x0040008000000000L});
    public static final BitSet FOLLOW_ensures_clause_in_operation_recursive_procedure_declaration5500 = new BitSet(new long[]{0x0000008000000000L});
    public static final BitSet FOLLOW_decreasing_clause_in_operation_recursive_procedure_declaration5511 = new BitSet(new long[]{0xC04004D000004800L,0x0000810000000001L,0x0000000010100008L,0x0C01400009000000L,0x000000000000000AL});
    public static final BitSet FOLLOW_facility_declaration_in_operation_recursive_procedure_declaration5521 = new BitSet(new long[]{0xC04004D000004800L,0x0000810000000001L,0x0000000010100008L,0x0C01400009000000L,0x000000000000000AL});
    public static final BitSet FOLLOW_variable_declaration_in_operation_recursive_procedure_declaration5532 = new BitSet(new long[]{0xC04004D000004800L,0x0000810000000001L,0x0000000010100008L,0x0C01400009000000L,0x000000000000000AL});
    public static final BitSet FOLLOW_aux_variable_declaration_in_operation_recursive_procedure_declaration5543 = new BitSet(new long[]{0xC04004D000004800L,0x0000810000000001L,0x0000000010100008L,0x0C01400009000000L,0x000000000000000AL});
    public static final BitSet FOLLOW_statement_sequence_in_operation_recursive_procedure_declaration5554 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_OPERATION_in_operation_declaration5575 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_ident_in_operation_declaration5577 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_operation_formal_param_section_in_operation_declaration5588 = new BitSet(new long[]{0x0040000000000808L,0x0000000000000000L,0x0000000000000008L,0x0000000001000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_program_type_expression_in_operation_declaration5601 = new BitSet(new long[]{0x0040000000000008L,0x0000000000000000L,0x0000000000000008L,0x0000000001000000L});
    public static final BitSet FOLLOW_affects_clause_in_operation_declaration5615 = new BitSet(new long[]{0x0040000000000008L,0x0000000000000000L,0x0000000000000008L,0x0000000001000000L});
    public static final BitSet FOLLOW_requires_clause_in_operation_declaration5628 = new BitSet(new long[]{0x0040000000000008L});
    public static final BitSet FOLLOW_ensures_clause_in_operation_declaration5641 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_OPERATION_in_performance_operation_declaration5668 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_ident_in_performance_operation_declaration5670 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_operation_formal_param_section_in_performance_operation_declaration5681 = new BitSet(new long[]{0x0040400000000808L,0x0000000040000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_program_type_expression_in_performance_operation_declaration5693 = new BitSet(new long[]{0x0040400000000008L,0x0000000040000000L});
    public static final BitSet FOLLOW_ensures_clause_in_performance_operation_declaration5706 = new BitSet(new long[]{0x0040400000000008L,0x0000000040000000L});
    public static final BitSet FOLLOW_duration_clause_in_performance_operation_declaration5719 = new BitSet(new long[]{0x0000000000000008L,0x0000000040000000L});
    public static final BitSet FOLLOW_mainp_disp_clause_in_performance_operation_declaration5732 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_AUX_OPERATION_in_aux_operation_declaration5759 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_ident_in_aux_operation_declaration5761 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_operation_formal_param_section_in_aux_operation_declaration5771 = new BitSet(new long[]{0x0040000000000808L,0x0000000000000000L,0x0000000000000008L,0x0000000001000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_program_type_expression_in_aux_operation_declaration5781 = new BitSet(new long[]{0x0040000000000008L,0x0000000000000000L,0x0000000000000008L,0x0000000001000000L});
    public static final BitSet FOLLOW_affects_clause_in_aux_operation_declaration5792 = new BitSet(new long[]{0x0040000000000008L,0x0000000000000000L,0x0000000000000008L,0x0000000001000000L});
    public static final BitSet FOLLOW_requires_clause_in_aux_operation_declaration5803 = new BitSet(new long[]{0x0040000000000008L});
    public static final BitSet FOLLOW_ensures_clause_in_aux_operation_declaration5814 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_PROCEDURE_in_procedure_declaration5836 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_ident_in_procedure_declaration5840 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_operation_formal_param_section_in_procedure_declaration5851 = new BitSet(new long[]{0xC04004D000004800L,0x0000810000000001L,0x0000000010100008L,0x0C01400009000000L,0x000000000000000AL});
    public static final BitSet FOLLOW_program_type_expression_in_procedure_declaration5864 = new BitSet(new long[]{0xC04004D000004800L,0x0000810000000001L,0x0000000010100008L,0x0C01400009000000L,0x000000000000000AL});
    public static final BitSet FOLLOW_affects_clause_in_procedure_declaration5878 = new BitSet(new long[]{0xC04004D000004800L,0x0000810000000001L,0x0000000010100008L,0x0C01400009000000L,0x000000000000000AL});
    public static final BitSet FOLLOW_decreasing_clause_in_procedure_declaration5891 = new BitSet(new long[]{0xC04004D000004800L,0x0000810000000001L,0x0000000010100008L,0x0C01400009000000L,0x000000000000000AL});
    public static final BitSet FOLLOW_facility_declaration_in_procedure_declaration5904 = new BitSet(new long[]{0xC04004D000004800L,0x0000810000000001L,0x0000000010100008L,0x0C01400009000000L,0x000000000000000AL});
    public static final BitSet FOLLOW_variable_declaration_in_procedure_declaration5917 = new BitSet(new long[]{0xC04004D000004800L,0x0000810000000001L,0x0000000010100008L,0x0C01400009000000L,0x000000000000000AL});
    public static final BitSet FOLLOW_aux_variable_declaration_in_procedure_declaration5930 = new BitSet(new long[]{0xC04004D000004800L,0x0000810000000001L,0x0000000010100008L,0x0C01400009000000L,0x000000000000000AL});
    public static final BitSet FOLLOW_statement_sequence_in_procedure_declaration5942 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_RECURSIVE_PROCEDURE_in_recursive_procedure_declaration5967 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_ident_in_recursive_procedure_declaration5969 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_operation_formal_param_section_in_recursive_procedure_declaration5979 = new BitSet(new long[]{0xC04004D000004800L,0x0000810000000001L,0x0000000010100008L,0x0C01400009000000L,0x000000000000000AL});
    public static final BitSet FOLLOW_program_type_expression_in_recursive_procedure_declaration5989 = new BitSet(new long[]{0xC04004D000004800L,0x0000810000000001L,0x0000000010100008L,0x0C01400009000000L,0x000000000000000AL});
    public static final BitSet FOLLOW_affects_clause_in_recursive_procedure_declaration6000 = new BitSet(new long[]{0xC04004D000004800L,0x0000810000000001L,0x0000000010100008L,0x0C01400009000000L,0x000000000000000AL});
    public static final BitSet FOLLOW_decreasing_clause_in_recursive_procedure_declaration6011 = new BitSet(new long[]{0xC04004D000004800L,0x0000810000000001L,0x0000000010100008L,0x0C01400009000000L,0x000000000000000AL});
    public static final BitSet FOLLOW_facility_declaration_in_recursive_procedure_declaration6022 = new BitSet(new long[]{0xC04004D000004800L,0x0000810000000001L,0x0000000010100008L,0x0C01400009000000L,0x000000000000000AL});
    public static final BitSet FOLLOW_variable_declaration_in_recursive_procedure_declaration6033 = new BitSet(new long[]{0xC04004D000004800L,0x0000810000000001L,0x0000000010100008L,0x0C01400009000000L,0x000000000000000AL});
    public static final BitSet FOLLOW_aux_variable_declaration_in_recursive_procedure_declaration6044 = new BitSet(new long[]{0xC04004D000004800L,0x0000810000000001L,0x0000000010100008L,0x0C01400009000000L,0x000000000000000AL});
    public static final BitSet FOLLOW_statement_sequence_in_recursive_procedure_declaration6062 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_PARAMS_in_operation_formal_param_section6083 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_operation_formal_param_group_in_operation_formal_param_section6087 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_VAR_in_operation_formal_param_group6123 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_abstract_mode_in_operation_formal_param_group6127 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000002000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_variable_declaration_group_in_operation_formal_param_group6131 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_VAR_in_variable_declaration6190 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_variable_declaration_group_in_variable_declaration6196 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_AUX_VAR_in_aux_variable_declaration6247 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_aux_variable_declaration_group_in_aux_variable_declaration6249 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_set_in_abstract_mode0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AFFECTS_in_affects_clause6372 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_abstract_mode_in_affects_clause6378 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_qualified_ident_in_affects_clause6382 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_COMMA_in_affects_clause6385 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_qualified_ident_in_affects_clause6389 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_REQUIRES_in_requires_clause6476 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_math_expression_in_requires_clause6482 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_ENSURES_in_ensures_clause6540 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_math_expression_in_ensures_clause6546 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_DURATION_in_duration_clause6600 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_math_expression_in_duration_clause6602 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_MAINP_DISP_in_mainp_disp_clause6623 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_math_expression_in_mainp_disp_clause6625 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_TYPE_FAMILY_in_type_declaration6652 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_ident_in_type_declaration6654 = new BitSet(new long[]{0x0000000000240000L,0x0000000000000000L,0x0000002000080200L,0x0000100000000000L,0x0000002000000008L});
    public static final BitSet FOLLOW_structural_math_type_expression_in_type_declaration6668 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000002000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_ident_in_type_declaration6682 = new BitSet(new long[]{0x0000000400000008L,0x0000000000002004L});
    public static final BitSet FOLLOW_constraint_clause_in_type_declaration6697 = new BitSet(new long[]{0x0000000000000008L,0x0000000000002004L});
    public static final BitSet FOLLOW_type_concept_init_declaration_in_type_declaration6714 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000004L});
    public static final BitSet FOLLOW_type_concept_final_declaration_in_type_declaration6731 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_TYPE_FAMILY_in_performance_type_declaration6765 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_ident_in_performance_type_declaration6767 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_math_type_expression_in_performance_type_declaration6769 = new BitSet(new long[]{0x0000000400000008L,0x0000000000002004L});
    public static final BitSet FOLLOW_constraint_clause_in_performance_type_declaration6781 = new BitSet(new long[]{0x0000000000000008L,0x0000000000002004L});
    public static final BitSet FOLLOW_performance_type_init_declaration_in_performance_type_declaration6794 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000004L});
    public static final BitSet FOLLOW_performance_type_final_declaration_in_performance_type_declaration6807 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_TYPE_in_type_representation_declaration6827 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_ident_in_type_representation_declaration6829 = new BitSet(new long[]{0x0000000000000800L,0x0400000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_structural_program_type_expression_in_type_representation_declaration6839 = new BitSet(new long[]{0x0000005000000008L,0x0000000000002004L});
    public static final BitSet FOLLOW_convention_clause_in_type_representation_declaration6851 = new BitSet(new long[]{0x0000004000000008L,0x0000000000002004L});
    public static final BitSet FOLLOW_correspondence_clause_in_type_representation_declaration6864 = new BitSet(new long[]{0x0000000000000008L,0x0000000000002004L});
    public static final BitSet FOLLOW_type_body_init_declaration_in_type_representation_declaration6877 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000004L});
    public static final BitSet FOLLOW_type_body_final_declaration_in_type_representation_declaration6890 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_TYPE_in_facility_type_declaration6917 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_ident_in_facility_type_declaration6923 = new BitSet(new long[]{0x0000000000000800L,0x0400000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_structural_program_type_expression_in_facility_type_declaration6935 = new BitSet(new long[]{0x0000001000000008L,0x0000000000002004L});
    public static final BitSet FOLLOW_convention_clause_in_facility_type_declaration6949 = new BitSet(new long[]{0x0000000000000008L,0x0000000000002004L});
    public static final BitSet FOLLOW_type_facility_init_declaration_in_facility_type_declaration6964 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000004L});
    public static final BitSet FOLLOW_type_facility_final_declaration_in_facility_type_declaration6980 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_FAC_INIT_in_module_concept_init_declaration7166 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_concept_init_final_section_in_module_concept_init_declaration7168 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_FAC_FINAL_in_module_concept_final_declaration7198 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_concept_init_final_section_in_module_concept_final_declaration7200 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_PERF_INIT_in_performance_module_init_declaration7230 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_performance_init_section_in_performance_module_init_declaration7232 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_PERF_FINAL_in_performance_module_final_declaration7253 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_performance_final_section_in_performance_module_final_declaration7255 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_FAC_INIT_in_module_body_init_declaration7276 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_body_init_final_section_in_module_body_init_declaration7278 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_FAC_FINAL_in_module_body_final_declaration7308 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_body_init_final_section_in_module_body_final_declaration7310 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_FAC_INIT_in_module_facility_init_declaration7340 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_facility_init_final_section_in_module_facility_init_declaration7342 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_FAC_FINAL_in_module_facility_final_declaration7372 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_facility_init_final_section_in_module_facility_final_declaration7374 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_INITIALIZATION_in_type_concept_init_declaration7406 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_concept_init_final_section_in_type_concept_init_declaration7408 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_FINALIZATION_in_type_concept_final_declaration7429 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_concept_init_final_section_in_type_concept_final_declaration7431 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_INITIALIZATION_in_performance_type_init_declaration7452 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_performance_init_section_in_performance_type_init_declaration7454 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_FINALIZATION_in_performance_type_final_declaration7475 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_performance_final_section_in_performance_type_final_declaration7477 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_INITIALIZATION_in_type_body_init_declaration7498 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_body_init_final_section_in_type_body_init_declaration7500 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_FINALIZATION_in_type_body_final_declaration7521 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_body_init_final_section_in_type_body_final_declaration7523 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_INITIALIZATION_in_type_facility_init_declaration7544 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_facility_init_final_section_in_type_facility_init_declaration7546 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_FINALIZATION_in_type_facility_final_declaration7567 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_facility_init_final_section_in_type_facility_final_declaration7569 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_affects_clause_in_concept_init_final_section7592 = new BitSet(new long[]{0x0040000000000002L,0x0000000000000000L,0x0000000000000008L,0x0000000001000000L});
    public static final BitSet FOLLOW_requires_clause_in_concept_init_final_section7605 = new BitSet(new long[]{0x0040000000000002L});
    public static final BitSet FOLLOW_ensures_clause_in_concept_init_final_section7618 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_duration_clause_in_performance_init_section7640 = new BitSet(new long[]{0x0000000000000002L,0x0000000040000000L});
    public static final BitSet FOLLOW_mainp_disp_clause_in_performance_init_section7653 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_duration_clause_in_performance_final_section7675 = new BitSet(new long[]{0x0000000000000002L,0x0000000040000000L});
    public static final BitSet FOLLOW_mainp_disp_clause_in_performance_final_section7688 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_affects_clause_in_body_init_final_section7710 = new BitSet(new long[]{0xC04004D000004800L,0x0000810000000001L,0x0000000010100008L,0x0C01400009000000L,0x000000000000000AL});
    public static final BitSet FOLLOW_facility_declaration_in_body_init_final_section7723 = new BitSet(new long[]{0xC04004D000004800L,0x0000810000000001L,0x0000000010100008L,0x0C01400009000000L,0x000000000000000AL});
    public static final BitSet FOLLOW_variable_declaration_in_body_init_final_section7736 = new BitSet(new long[]{0xC04004D000004800L,0x0000810000000001L,0x0000000010100008L,0x0C01400009000000L,0x000000000000000AL});
    public static final BitSet FOLLOW_aux_variable_declaration_in_body_init_final_section7749 = new BitSet(new long[]{0xC04004D000004800L,0x0000810000000001L,0x0000000010100008L,0x0C01400009000000L,0x000000000000000AL});
    public static final BitSet FOLLOW_statement_sequence_in_body_init_final_section7761 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_affects_clause_in_facility_init_final_section7781 = new BitSet(new long[]{0xC04004D000004800L,0x0000810000000001L,0x0000000010100008L,0x0C01400009000000L,0x000000000000000AL});
    public static final BitSet FOLLOW_requires_clause_in_facility_init_final_section7794 = new BitSet(new long[]{0xC04004D000004800L,0x0000810000000001L,0x0000000010100008L,0x0C01400009000000L,0x000000000000000AL});
    public static final BitSet FOLLOW_ensures_clause_in_facility_init_final_section7807 = new BitSet(new long[]{0xC04004D000004800L,0x0000810000000001L,0x0000000010100008L,0x0C01400009000000L,0x000000000000000AL});
    public static final BitSet FOLLOW_facility_declaration_in_facility_init_final_section7820 = new BitSet(new long[]{0xC04004D000004800L,0x0000810000000001L,0x0000000010100008L,0x0C01400009000000L,0x000000000000000AL});
    public static final BitSet FOLLOW_variable_declaration_in_facility_init_final_section7833 = new BitSet(new long[]{0xC04004D000004800L,0x0000810000000001L,0x0000000010100008L,0x0C01400009000000L,0x000000000000000AL});
    public static final BitSet FOLLOW_aux_variable_declaration_in_facility_init_final_section7846 = new BitSet(new long[]{0xC04004D000004800L,0x0000810000000001L,0x0000000010100008L,0x0C01400009000000L,0x000000000000000AL});
    public static final BitSet FOLLOW_statement_sequence_in_facility_init_final_section7858 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STATEMENT_in_statement7886 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_if_statement_in_statement7890 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_STATEMENT_in_statement7928 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_selection_statement_in_statement7930 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_STATEMENT_in_statement7946 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_while_loop_statement_in_statement7950 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_STATEMENT_in_statement7988 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_iterate_loop_statement_in_statement7990 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_STATEMENT_in_statement8006 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_swap_statement_in_statement8010 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_STATEMENT_in_statement8048 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_function_assignment_in_statement8052 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_STATEMENT_in_statement8090 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_procedure_operation_call_in_statement8094 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_STATEMENT_in_statement8132 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_remember_statement_in_statement8134 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_STATEMENT_in_statement8150 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_forget_statement_in_statement8152 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_STATEMENT_in_statement8168 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_confirm_statement_in_statement8170 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_STATEMENT_in_statement8186 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_assume_statement_in_statement8188 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_STATEMENT_in_statement8204 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_aux_code_statement_in_statement8206 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_STATEMENT_in_in_aux_statement8241 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_if_statement_in_in_aux_statement8243 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_STATEMENT_in_in_aux_statement8259 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_selection_statement_in_in_aux_statement8261 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_STATEMENT_in_in_aux_statement8277 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_while_loop_statement_in_in_aux_statement8279 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_STATEMENT_in_in_aux_statement8295 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_iterate_loop_statement_in_in_aux_statement8297 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_STATEMENT_in_in_aux_statement8313 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_swap_statement_in_in_aux_statement8315 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_STATEMENT_in_in_aux_statement8331 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_function_assignment_in_in_aux_statement8333 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_STATEMENT_in_in_aux_statement8349 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_procedure_operation_call_in_in_aux_statement8351 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_STATEMENT_in_in_aux_statement8367 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_remember_statement_in_in_aux_statement8369 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_STATEMENT_in_in_aux_statement8385 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_forget_statement_in_in_aux_statement8387 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_STATEMENT_in_in_aux_statement8403 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_confirm_statement_in_in_aux_statement8405 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_STATEMENT_in_in_aux_statement8421 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_assume_statement_in_in_aux_statement8423 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_STATEMENT_in_in_aux_statement8439 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_aux_code_statement_in_in_aux_statement8441 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_STATEMENT_SEQUENCE_in_statement_sequence8473 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_statement_in_statement_sequence8477 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_STATEMENT_SEQUENCE_in_in_aux_statement_sequence8521 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_in_aux_statement_in_in_aux_statement_sequence8523 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_ASSIGN_OP_in_function_assignment8552 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_variable_expression_in_function_assignment8556 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000002000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_program_expression_in_function_assignment8560 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_FORGET_in_forget_statement8604 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REMEMBER_in_remember_statement8623 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IF_in_if_statement8649 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_condition_in_if_statement8655 = new BitSet(new long[]{0xC04004D000004800L,0x0000810000000001L,0x0000000010100008L,0x0C01400009000000L,0x000000000000000AL});
    public static final BitSet FOLLOW_statement_sequence_in_if_statement8670 = new BitSet(new long[]{0x0001000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_elsif_item_in_if_statement8683 = new BitSet(new long[]{0x0001000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_else_part_in_if_statement8698 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_ELSIF_in_elsif_item8876 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_condition_in_elsif_item8878 = new BitSet(new long[]{0xC04004D000004800L,0x0000810000000001L,0x0000000010100008L,0x0C01400009000000L,0x000000000000000AL});
    public static final BitSet FOLLOW_statement_sequence_in_elsif_item8889 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_ELSE_in_else_part8910 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_statement_sequence_in_else_part8912 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_program_expression_in_condition8934 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AUX_CODE_in_aux_code_statement8965 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_in_aux_statement_sequence_in_aux_code_statement8975 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_ITERATE_in_iterate_loop_statement9000 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_changing_clause_in_iterate_loop_statement9011 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_maintaining_clause_in_iterate_loop_statement9027 = new BitSet(new long[]{0x0000008000000008L,0x0000000000000000L,0x0000000040000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_decreasing_clause_in_iterate_loop_statement9038 = new BitSet(new long[]{0x0000008000000008L,0x0000000000000000L,0x0000000040000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_iterate_item_sequence_in_iterate_loop_statement9050 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_iterate_item_in_iterate_item_sequence9072 = new BitSet(new long[]{0x000000800000000AL,0x0000000000000000L,0x0000000040000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_statement_in_iterate_item9094 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_iterate_exit_statement_in_iterate_item9104 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WHEN_in_iterate_exit_statement9124 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_condition_in_iterate_exit_statement9127 = new BitSet(new long[]{0xC04004D000004800L,0x0000810000000001L,0x0000000010100008L,0x0C01400009000000L,0x000000000000000AL});
    public static final BitSet FOLLOW_statement_sequence_in_iterate_exit_statement9138 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_FUNCTION_in_procedure_operation_call9171 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_qualified_ident_in_procedure_operation_call9176 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_operation_argument_section_in_procedure_operation_call9180 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_PARAMS_in_operation_argument_section9238 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_program_expression_in_operation_argument_section9244 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000002000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_CASE_in_selection_statement9363 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_program_expression_in_selection_statement9365 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_selection_alternative_sequence_in_selection_statement9376 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_default_alternative_in_selection_statement9387 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_selection_alternative_in_selection_alternative_sequence9410 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_WHEN_in_selection_alternative9432 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_choices_in_selection_alternative9434 = new BitSet(new long[]{0xC04004D000004800L,0x0000810000000001L,0x0000000010100008L,0x0C01400009000000L,0x000000000000000AL});
    public static final BitSet FOLLOW_statement_sequence_in_selection_alternative9445 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_DEFAULT_in_default_alternative9466 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_statement_sequence_in_default_alternative9468 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_program_expression_in_choice9488 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CHOICES_in_choices9508 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_choice_in_choices9510 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000002000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_SWAP_OP_in_swap_statement9538 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_variable_expression_in_swap_statement9542 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000002000000000L,0x0100000010000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_variable_expression_in_swap_statement9546 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_CONFIRM_in_confirm_statement9605 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_math_expression_in_confirm_statement9607 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_ASSUME_in_assume_statement9634 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_math_expression_in_assume_statement9636 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_WHILE_in_while_loop_statement9663 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_condition_in_while_loop_statement9669 = new BitSet(new long[]{0xC04004D001004800L,0x0000810080000001L,0x0000000010100008L,0x0C01400009000000L,0x000000000000000AL});
    public static final BitSet FOLLOW_changing_clause_in_while_loop_statement9683 = new BitSet(new long[]{0xC04004D000004800L,0x0000810080000001L,0x0000000010100008L,0x0C01400009000000L,0x000000000000000AL});
    public static final BitSet FOLLOW_maintaining_clause_in_while_loop_statement9700 = new BitSet(new long[]{0xC04004D000004800L,0x0000810000000001L,0x0000000010100008L,0x0C01400009000000L,0x000000000000000AL});
    public static final BitSet FOLLOW_decreasing_clause_in_while_loop_statement9713 = new BitSet(new long[]{0xC04004D000004800L,0x0000810000000001L,0x0000000010100008L,0x0C01400009000000L,0x000000000000000AL});
    public static final BitSet FOLLOW_statement_sequence_in_while_loop_statement9726 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_MAINTAINING_in_maintaining_clause9938 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_math_expression_in_maintaining_clause9944 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_DECREASING_in_decreasing_clause10059 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_adding_expression_in_decreasing_clause10065 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_CHANGING_in_changing_clause10172 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_variable_expression_in_changing_clause10178 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000002000000000L,0x0100000010000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_TYPEX_in_program_type_expression10289 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_qualified_ident_in_program_type_expression10293 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_ARRAY_in_program_type_expression10332 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_array_range_in_program_type_expression10334 = new BitSet(new long[]{0x0000000000000800L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_program_type_expression_in_program_type_expression10336 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_RECORD_in_structural_program_type_expression10361 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_record_variable_declaration_group_in_structural_program_type_expression10377 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_program_type_expression_in_structural_program_type_expression10451 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_VAR_in_record_variable_declaration_group10485 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_variable_id_list_in_record_variable_declaration_group10491 = new BitSet(new long[]{0x0000000000000800L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_program_type_expression_in_record_variable_declaration_group10495 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_AUX_VAR_in_record_aux_variable_declaration_group10559 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_variable_id_list_in_record_aux_variable_declaration_group10561 = new BitSet(new long[]{0x0000000000000800L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_program_type_expression_in_record_aux_variable_declaration_group10563 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_RANGE_in_array_range10584 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_program_expression_in_array_range10586 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000002000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_program_expression_in_array_range10588 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_variable_id_list_in_variable_declaration_group10614 = new BitSet(new long[]{0x0000000000000800L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_program_type_expression_in_variable_declaration_group10619 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variable_id_list_in_aux_variable_declaration_group10666 = new BitSet(new long[]{0x0000000000000800L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_program_type_expression_in_aux_variable_declaration_group10671 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ident_in_variable_id_list10714 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000002000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_TYPEX_in_math_type_expression10757 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_function_type_expression_in_math_type_expression10759 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_structural_math_type_expression_in_function_type_expression10789 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FUNCARROW_in_function_type_expression10800 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_structural_math_type_expression_in_function_type_expression10802 = new BitSet(new long[]{0x0000000000240008L,0x0000000000000000L,0x0000002000080200L,0x0000100000000000L,0x0000002000000008L});
    public static final BitSet FOLLOW_structural_math_type_expression_in_function_type_expression10805 = new BitSet(new long[]{0x0000000000240008L,0x0000000000000000L,0x0000002000080200L,0x0000100000000000L,0x0000002000000008L});
    public static final BitSet FOLLOW_CARTPROD_in_structural_math_type_expression10832 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_cartprod_variable_declaration_group_in_structural_math_type_expression10843 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_product_type_expression_in_structural_math_type_expression10857 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMES_in_product_type_expression10877 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_primitive_type_expression_in_product_type_expression10879 = new BitSet(new long[]{0x0000000000240008L,0x0000000000000000L,0x0000002000080200L,0x0000100000000000L,0x0000002000000008L});
    public static final BitSet FOLLOW_primitive_type_expression_in_product_type_expression10881 = new BitSet(new long[]{0x0000000000240008L,0x0000000000000000L,0x0000002000080200L,0x0000100000000000L,0x0000002000000008L});
    public static final BitSet FOLLOW_primitive_type_expression_in_product_type_expression10893 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SSET_in_primitive_type_expression10918 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BOOLEAN_in_primitive_type_expression10934 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_powerset_expression_in_primitive_type_expression10950 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nested_type_expression_in_primitive_type_expression10960 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FUNCTION_in_primitive_type_expression10971 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_qualified_ident_in_primitive_type_expression10973 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_type_expression_argument_list_in_primitive_type_expression10975 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_qualified_ident_in_primitive_type_expression10986 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_POWERSET_in_powerset_expression11016 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_math_type_expression_in_powerset_expression11018 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_type_expression_in_nested_type_expression11039 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_math_type_expression_in_type_expression11073 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PARAMS_in_type_expression_argument_list11093 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_math_type_expression_in_type_expression_argument_list11095 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_math_type_expression_in_type_expression_argument_list11097 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_VAR_in_cartprod_variable_declaration_group11119 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_math_variable_declaration_group_in_cartprod_variable_declaration_group11121 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_variable_id_list_in_structural_math_variable_declaration_group11141 = new BitSet(new long[]{0x0000000000240000L,0x0000000000000000L,0x0000002000080200L,0x0000100000000000L,0x0000002000000008L});
    public static final BitSet FOLLOW_structural_math_type_expression_in_structural_math_variable_declaration_group11144 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variable_id_list_in_math_variable_declaration_group11163 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_math_type_expression_in_math_variable_declaration_group11166 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ident_in_math_variable_declaration11186 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_math_type_expression_in_math_variable_declaration11189 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variable_id_list_in_implicit_type_parameter_group11212 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_math_expression_in_implicit_type_parameter_group11215 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EXPR_in_math_expression11243 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_iterated_construct_in_math_expression11245 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_EXPR_in_math_expression11261 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_quantified_expression_in_math_expression11263 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_implies_expression_in_quantified_expression11297 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FORALL_in_quantified_expression11308 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_math_variable_declaration_group_in_quantified_expression11310 = new BitSet(new long[]{0x1000100020040400L,0x400002640BFC8580L,0xDA28A82280400000L,0x01401A10242980FFL,0x0000004000300004L});
    public static final BitSet FOLLOW_where_clause_in_quantified_expression11320 = new BitSet(new long[]{0x1000100020040400L,0x400002640BFC8580L,0xDA28A82280400000L,0x01401A10242980FFL,0x0000004000300004L});
    public static final BitSet FOLLOW_quantified_expression_in_quantified_expression11324 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_EXISTS_UNIQUE_in_quantified_expression11336 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_math_variable_declaration_group_in_quantified_expression11338 = new BitSet(new long[]{0x1000100020040400L,0x400002640BFC8580L,0xDA28A82280400000L,0x01401A10242980FFL,0x0000004000300004L});
    public static final BitSet FOLLOW_where_clause_in_quantified_expression11348 = new BitSet(new long[]{0x1000100020040400L,0x400002640BFC8580L,0xDA28A82280400000L,0x01401A10242980FFL,0x0000004000300004L});
    public static final BitSet FOLLOW_quantified_expression_in_quantified_expression11351 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_EXISTS_in_quantified_expression11364 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_math_variable_declaration_group_in_quantified_expression11366 = new BitSet(new long[]{0x1000100020040400L,0x400002640BFC8580L,0xDA28A82280400000L,0x01401A10242980FFL,0x0000004000300004L});
    public static final BitSet FOLLOW_where_clause_in_quantified_expression11376 = new BitSet(new long[]{0x1000100020040400L,0x400002640BFC8580L,0xDA28A82280400000L,0x01401A10242980FFL,0x0000004000300004L});
    public static final BitSet FOLLOW_quantified_expression_in_quantified_expression11379 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_logical_expression_in_implies_expression11401 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IMPLIES_in_implies_expression11416 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_logical_expression_in_implies_expression11418 = new BitSet(new long[]{0x0000100020040400L,0x400002640BFC8000L,0xDA28A82200400000L,0x01401010242980FFL,0x0000004000300004L});
    public static final BitSet FOLLOW_logical_expression_in_implies_expression11420 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_IFF_in_implies_expression11436 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_logical_expression_in_implies_expression11438 = new BitSet(new long[]{0x0000100020040400L,0x400002640BFC8000L,0xDA28A82200400000L,0x01401010242980FFL,0x0000004000300004L});
    public static final BitSet FOLLOW_logical_expression_in_implies_expression11440 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_IF_in_implies_expression11464 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_logical_expression_in_implies_expression11466 = new BitSet(new long[]{0x0000100020040400L,0x400002640BFC8000L,0xDA28A82200400000L,0x01401010242980FFL,0x0000004000300004L});
    public static final BitSet FOLLOW_logical_expression_in_implies_expression11468 = new BitSet(new long[]{0x0000100020040408L,0x400002640BFC8000L,0xDA28A82200400000L,0x01401010242980FFL,0x0000004000300004L});
    public static final BitSet FOLLOW_logical_expression_in_implies_expression11483 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_relational_expression_in_logical_expression11514 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AND_in_logical_expression11529 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_logical_expression_in_logical_expression11531 = new BitSet(new long[]{0x0000100020040000L,0x400000640BFC8000L,0xDA28A82200400000L,0x01401010242980FFL,0x0000004000300004L});
    public static final BitSet FOLLOW_relational_expression_in_logical_expression11533 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_OR_in_logical_expression11549 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_logical_expression_in_logical_expression11551 = new BitSet(new long[]{0x0000100020040000L,0x400000640BFC8000L,0xDA28A82200400000L,0x01401010242980FFL,0x0000004000300004L});
    public static final BitSet FOLLOW_relational_expression_in_logical_expression11553 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_infix_expression_in_relational_expression11583 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_between_expression_in_relational_expression11593 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_relational_expression11606 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_infix_expression_in_relational_expression11614 = new BitSet(new long[]{0x0000100020040000L,0x4000006408008000L,0xDA28A82200400000L,0x0140101004298003L,0x0000004000300004L});
    public static final BitSet FOLLOW_infix_expression_in_relational_expression11616 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_set_in_relational_expression11639 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_infix_expression_in_relational_expression11690 = new BitSet(new long[]{0x0000100020040000L,0x4000006408008000L,0xDA28A82200400000L,0x0140101004298003L,0x0000004000300004L});
    public static final BitSet FOLLOW_infix_expression_in_relational_expression11692 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_set_in_relational_expression11716 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_infix_expression_in_relational_expression11724 = new BitSet(new long[]{0x0000100020040000L,0x4000006408008000L,0xDA28A82200400000L,0x0140101004298003L,0x0000004000300004L});
    public static final BitSet FOLLOW_infix_expression_in_relational_expression11726 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_BETWEEN_EXPR_in_between_expression11756 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_infix_expression_in_between_expression11758 = new BitSet(new long[]{0x0000100020040000L,0x4000006408008000L,0xDA28A82200400000L,0x0140101004298003L,0x0000004000300004L});
    public static final BitSet FOLLOW_infix_expression_in_between_expression11761 = new BitSet(new long[]{0x0000100020040008L,0x4000006408008000L,0xDA28A82200400000L,0x0140101004298003L,0x0000004000300004L});
    public static final BitSet FOLLOW_LOCALVAREXP_in_infix_expression11793 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_math_variable_declarations_in_infix_expression11795 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_math_expression_in_infix_expression11797 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_adding_expression_in_infix_expression11815 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RANGE_in_infix_expression11830 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_adding_expression_in_infix_expression11832 = new BitSet(new long[]{0x0000100020000000L,0x4000006408008000L,0xDA28A82200400000L,0x0140101004098001L,0x0000004000100004L});
    public static final BitSet FOLLOW_adding_expression_in_infix_expression11834 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_FREE_OPERATOR_in_infix_expression11850 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_adding_expression_in_infix_expression11852 = new BitSet(new long[]{0x0000100020000000L,0x4000006408008000L,0xDA28A82200400000L,0x0140101004098001L,0x0000004000100004L});
    public static final BitSet FOLLOW_adding_expression_in_infix_expression11854 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_BOOLEAN_in_infix_expression11885 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_multiplying_expression_in_adding_expression11904 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_adding_expression11917 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_adding_expression_in_adding_expression11953 = new BitSet(new long[]{0x0000100020000000L,0x4000002408000000L,0xD228A82000000000L,0x0140101004098001L,0x0000004000100004L});
    public static final BitSet FOLLOW_multiplying_expression_in_adding_expression11955 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_exponential_expression_in_multiplying_expression11990 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_multiplying_expression12003 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_multiplying_expression_in_multiplying_expression12035 = new BitSet(new long[]{0x0000000020000000L,0x0000002008000000L,0x1228A82000000000L,0x0140101004098001L,0x0000004000100004L});
    public static final BitSet FOLLOW_exponential_expression_in_multiplying_expression12049 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_prefix_expression_in_exponential_expression12078 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EXP_in_exponential_expression12089 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_prefix_expression_in_exponential_expression12091 = new BitSet(new long[]{0x0000000020000000L,0x0000002008000000L,0x1228A82000000000L,0x0140101004098001L,0x0000004000100004L});
    public static final BitSet FOLLOW_exponential_expression_in_exponential_expression12093 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_unary_expression_in_prefix_expression12113 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_UNARY_FREE_OPERATOR_in_prefix_expression12124 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_prefix_expression_in_prefix_expression12126 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_primitive_expression_in_unary_expression12146 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NOT_in_unary_expression12157 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_unary_expression_in_unary_expression12159 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_COMPLEMENT_in_unary_expression12171 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_unary_expression_in_unary_expression12173 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_MINUS_in_unary_expression12185 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_unary_expression_in_unary_expression12188 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_alternative_expression_in_primitive_expression12208 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_qualified_numeric_literal_in_primitive_expression12228 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_dot_expression_in_primitive_expression12238 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lambda_expression_in_primitive_expression12248 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_literal_expression_in_primitive_expression12258 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_outfix_expression_in_primitive_expression12268 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_constructor_in_primitive_expression12278 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_tuple_expression_in_primitive_expression12298 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nested_expression_in_primitive_expression12308 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOT_in_dot_expression12332 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_function_expression_in_dot_expression12334 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0200082000000000L,0x0100100000000000L});
    public static final BitSet FOLLOW_clean_function_expression_in_dot_expression12336 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0200082000000000L,0x0100100000000000L});
    public static final BitSet FOLLOW_function_expression_in_dot_expression12348 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_HASH_in_function_expression12368 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_clean_function_expression_in_function_expression12370 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_clean_function_expression_in_function_expression12381 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FUNCTION_in_clean_function_expression12401 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_ident_in_clean_function_expression12403 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0400000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_hat_expression_in_clean_function_expression12405 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0400000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_function_argument_list_in_clean_function_expression12408 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0400000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_ident_in_clean_function_expression12420 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CARAT_in_hat_expression12455 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_qualified_ident_in_hat_expression12458 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_nested_expression_in_hat_expression12462 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_PARAMS_in_function_argument_list12484 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_math_expression_in_function_argument_list12486 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_DBL_LBRACE_in_alternative_expression12521 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_alternative_expression_item_in_alternative_expression12550 = new BitSet(new long[]{0x0000000000000008L,0x0000040000000080L});
    public static final BitSet FOLLOW_IF_in_alternative_expression_item12604 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_adding_expression_in_alternative_expression_item12606 = new BitSet(new long[]{0x0000100020040000L,0x400000640BFC8000L,0xDA28A82200400000L,0x01401010242980FFL,0x0000004000300004L});
    public static final BitSet FOLLOW_relational_expression_in_alternative_expression_item12608 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_OTHERWISE_in_alternative_expression_item12624 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_adding_expression_in_alternative_expression_item12626 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_ITERATION_in_iterated_construct12666 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_ident_in_iterated_construct12668 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000002000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_ident_in_iterated_construct12670 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_math_type_expression_in_iterated_construct12672 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000080000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_where_clause_in_iterated_construct12675 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_math_expression_in_iterated_construct12679 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_LAMBDA_in_lambda_expression12701 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_ident_in_lambda_expression12703 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000002000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_certain_qualified_ident_in_lambda_expression12730 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_ident_in_lambda_expression12744 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_math_expression_in_lambda_expression12766 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_set_in_literal_expression0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NUMERIC_LITERAL_in_program_literal_expression12835 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CHARACTER_LITERAL_in_program_literal_expression12855 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRING_LITERAL_in_program_literal_expression12875 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_QUALNUM_in_qualified_numeric_literal12909 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_ident_in_qualified_numeric_literal12911 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_NUMERIC_LITERAL_in_qualified_numeric_literal12913 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_NESTED_in_nested_expression12934 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_math_expression_in_nested_expression12936 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_ANGLE_in_outfix_expression12957 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_infix_expression_in_outfix_expression12959 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_DBL_ANGLE_in_outfix_expression12971 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_math_expression_in_outfix_expression12973 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_BAR_in_outfix_expression12985 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_math_expression_in_outfix_expression12987 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_DBL_BAR_in_outfix_expression13000 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_math_expression_in_outfix_expression13002 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_math_expression_in_parenthesized_expression13023 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LBRACE_in_set_constructor13044 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_ident_in_set_constructor13046 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_math_type_expression_in_set_constructor13057 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000080000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_where_clause_in_set_constructor13068 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_math_expression_in_set_constructor13081 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_TUPLE_in_tuple_expression13103 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_math_expression_in_tuple_expression13105 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_WHERE_in_where_clause13127 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_math_expression_in_where_clause13129 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_EXPR_in_program_expression13158 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_program_logical_expression_in_program_expression13164 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_program_relational_expression_in_program_logical_expression13212 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_program_logical_expression13235 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_program_logical_expression_in_program_logical_expression13255 = new BitSet(new long[]{0x0000100000000000L,0x4000002400000000L,0xD800A02000000000L,0x41401000100800FDL,0x0000000000000120L});
    public static final BitSet FOLLOW_program_relational_expression_in_program_logical_expression13269 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_program_adding_expression_in_program_relational_expression13310 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EQL_in_program_relational_expression13342 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_NOT_EQL_in_program_relational_expression13348 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_LT_in_program_relational_expression13354 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_LT_EQL_in_program_relational_expression13360 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_GT_in_program_relational_expression13366 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_GT_EQL_in_program_relational_expression13372 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_program_relational_expression_in_program_relational_expression13403 = new BitSet(new long[]{0x0000100000000000L,0x4000002400000000L,0xD800A02000000000L,0x4140100010080001L,0x0000000000000120L});
    public static final BitSet FOLLOW_program_adding_expression_in_program_relational_expression13419 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_program_multiplying_expression_in_program_adding_expression13567 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PLUS_in_program_adding_expression13599 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_MINUS_in_program_adding_expression13605 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_program_adding_expression_in_program_adding_expression13636 = new BitSet(new long[]{0x0000100000000000L,0x4000002400000000L,0xC000A02000000000L,0x4140100010080001L,0x0000000000000120L});
    public static final BitSet FOLLOW_program_multiplying_expression_in_program_adding_expression13652 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_program_exponential_expression_in_program_multiplying_expression13795 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_program_multiplying_expression13818 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_program_multiplying_expression_in_program_multiplying_expression13850 = new BitSet(new long[]{0x0000000000000000L,0x0000002000000000L,0x0000A02000000000L,0x4140100010080001L,0x0000000000000120L});
    public static final BitSet FOLLOW_program_exponential_expression_in_program_multiplying_expression13864 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_program_unary_expression_in_program_exponential_expression13901 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EXP_in_program_exponential_expression13924 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_program_unary_expression_in_program_exponential_expression13938 = new BitSet(new long[]{0x0000000000000000L,0x0000002000000000L,0x0000A02000000000L,0x4140100010080001L,0x0000000000000120L});
    public static final BitSet FOLLOW_program_exponential_expression_in_program_exponential_expression13952 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_program_primitive_expression_in_program_unary_expression13974 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NOT_in_program_unary_expression13995 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_program_unary_expression_in_program_unary_expression13999 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_UNARY_MINUS_in_program_unary_expression14021 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_program_unary_expression_in_program_unary_expression14025 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_program_literal_expression_in_program_primitive_expression14057 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_program_variable_expression_in_program_primitive_expression14079 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_program_nested_expression_in_program_primitive_expression14101 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_program_dot_expression_in_program_variable_expression14137 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variable_expression_in_program_variable_expression14159 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PROGDOT_in_program_dot_expression14193 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_ident_in_program_dot_expression14199 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000100000000000L});
    public static final BitSet FOLLOW_program_function_expression_in_program_dot_expression14203 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x4000100000000000L});
    public static final BitSet FOLLOW_program_function_expression_in_program_dot_expression14268 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FUNCTION_in_program_function_expression14302 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_ident_in_program_function_expression14308 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_program_function_argument_list_in_program_function_expression14312 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_PARAMS_in_program_function_argument_list14387 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_program_expression_in_program_function_argument_list14391 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000002000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_NESTED_in_program_nested_expression14507 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_program_expression_in_program_nested_expression14511 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_variable_array_expression_in_variable_expression14569 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_VARDOT_in_variable_expression14590 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_variable_array_expression_in_variable_expression14596 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000002000000000L,0x0100000010000000L});
    public static final BitSet FOLLOW_ident_in_variable_array_expression14675 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ARRAYFUNCTION_in_variable_array_expression14696 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_ident_in_variable_array_expression14700 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_variable_array_argument_list_in_variable_array_expression14704 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_PARAMS_in_variable_array_argument_list14747 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_program_expression_in_variable_array_argument_list14751 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_IDENTIFIER_in_certain_qualified_ident14795 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_ident_in_certain_qualified_ident14797 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000002000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_ident_in_certain_qualified_ident14799 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_IDENTIFIER_in_qualified_ident14820 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_ident_in_qualified_ident14824 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000002000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_ident_in_qualified_ident14828 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_IDENTIFIER_in_ident14876 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ident_in_math_theorem_ident14956 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NUMERIC_LITERAL_in_math_theorem_ident14966 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PROOFS_FOR_in_proof_module14994 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_ident_in_proof_module14998 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000008000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_module_formal_param_section_in_proof_module15009 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_uses_list_in_proof_module15020 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_PROOFBODY_in_proof_module_body15065 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_math_item_sequence_in_proof_module_body15067 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_PROOFBODY_in_proof_module_body15079 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_proof_in_proof_module_body15081 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_PROOF_in_proof15106 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_math_item_reference_in_proof15117 = new BitSet(new long[]{0x0000040000080008L,0x0000000000001000L,0x0000002000000000L,0x0001400000000000L,0x0000000400003000L});
    public static final BitSet FOLLOW_base_case_statement_head_in_proof15152 = new BitSet(new long[]{0x0000040000080008L,0x0000000000001000L,0x0000002000000000L,0x0001400000000000L,0x0000000400003000L});
    public static final BitSet FOLLOW_base_case_statement_body_in_proof15172 = new BitSet(new long[]{0x0000040000080008L,0x0000000000001000L,0x0000002000000000L,0x0001400000000000L,0x0000000400003000L});
    public static final BitSet FOLLOW_inductive_case_statement_head_in_proof15198 = new BitSet(new long[]{0x0000040000080008L,0x0000000000001000L,0x0000002000000000L,0x0001400000000000L,0x0000000400003000L});
    public static final BitSet FOLLOW_inductive_case_statement_body_in_proof15218 = new BitSet(new long[]{0x0000040000080008L,0x0000000000001000L,0x0000002000000000L,0x0001400000000000L,0x0000000400003000L});
    public static final BitSet FOLLOW_headed_proof_expression_in_proof15240 = new BitSet(new long[]{0x0000040000080008L,0x0000000000001000L,0x0000002000000000L,0x0001400000000000L,0x0000000400003000L});
    public static final BitSet FOLLOW_proof_expression_in_proof15252 = new BitSet(new long[]{0x0000040000080008L,0x0000000000001000L,0x0000002000000000L,0x0001400000000000L,0x0000000400003000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_base_case_statement_head15290 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_base_case_statement_body_in_base_case_statement_head15293 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_BASECASE_in_base_case_statement_body15319 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_proof_expression_in_base_case_statement_body15322 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_IDENTIFIER_in_inductive_case_statement_head15348 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_inductive_case_statement_body_in_inductive_case_statement_head15351 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_INDUCTIVECASE_in_inductive_case_statement_body15377 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_proof_expression_in_inductive_case_statement_body15380 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_MATHITEMREF_in_math_item_reference15407 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_theorem_name_in_math_item_reference15409 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_MATHITEMREF_in_math_item_reference15421 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_lemma_name_in_math_item_reference15423 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_MATHITEMREF_in_math_item_reference15435 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_property_name_in_math_item_reference15437 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_MATHITEMREF_in_math_item_reference15449 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_corollary_name_in_math_item_reference15451 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_THEOREM_in_theorem_name15482 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_ident_in_theorem_name15484 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_LEMMA_in_lemma_name15509 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_ident_in_lemma_name15511 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_PROPERTY_in_property_name15532 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_ident_in_property_name15534 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_COROLLARY_in_corollary_name15559 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_math_theorem_ident_in_corollary_name15561 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_PROOFEXPRLIST_in_proof_expression_list15586 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_headed_proof_expression_in_proof_expression_list15600 = new BitSet(new long[]{0x0000040000080008L,0x0000000000001000L,0x0000002000000000L,0x0001400000000000L,0x0000000400003000L});
    public static final BitSet FOLLOW_proof_expression_in_proof_expression_list15608 = new BitSet(new long[]{0x0000040000080008L,0x0000000000001000L,0x0000002000000000L,0x0001400000000000L,0x0000000400003000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_headed_proof_expression15642 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_proof_expression_in_headed_proof_expression15644 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_goal_declaration_in_proof_expression15670 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_standard_definition_declaration_in_proof_expression15680 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_supposition_deduction_pair_in_proof_expression15690 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_justification_declaration_in_proof_expression15700 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_GOAL_in_goal_declaration15730 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_math_expression_in_goal_declaration15732 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_SUPDEDUC_in_supposition_deduction_pair15758 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_supposition_declaration_in_supposition_deduction_pair15760 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_proof_expression_list_in_supposition_deduction_pair15762 = new BitSet(new long[]{0x0000010000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_supposition_deduction_pair15764 = new BitSet(new long[]{0x0000010000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_deduction_declaration_in_supposition_deduction_pair15767 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_SUPPOSITION_in_supposition_declaration15792 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_math_variable_declarations_in_supposition_declaration15824 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_math_expression_in_supposition_declaration15828 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_math_variable_declarations_in_supposition_declaration15858 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_math_expression_in_supposition_declaration15862 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_DECLARATIONS_in_math_variable_declarations15912 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_math_variable_declaration_group_in_math_variable_declarations15914 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000002000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_DEDUCTION_in_deduction_declaration15940 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_math_expression_in_deduction_declaration15942 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_SIMPLIFICATION_in_justification_declaration15967 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_math_expression_in_justification_declaration15969 = new BitSet(new long[]{0x0000000000100000L});
    public static final BitSet FOLLOW_justification_in_justification_declaration15971 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_BY_in_justification15996 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_double_hyp_rule_justification_in_justification16016 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_single_hyp_rule_justification_in_justification16034 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_hyp_desig_in_justification16050 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_simple_justification_in_justification16060 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_def_justification_in_justification16076 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_hyp_desig_in_double_hyp_rule_justification16112 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_hyp_desig_in_double_hyp_rule_justification16115 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_rules_set_1_in_double_hyp_rule_justification16125 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_hyp_desig_in_single_hyp_rule_justification16146 = new BitSet(new long[]{0x0000040000000000L,0x0000000000000000L,0x0000000000000000L,0x0000800000000000L,0x000000000000C000L});
    public static final BitSet FOLLOW_rules_set_1_in_single_hyp_rule_justification16150 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rules_set_2_in_single_hyp_rule_justification16154 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_def_justification_in_single_hyp_rule_justification16158 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DEFINITION_in_def_justification16185 = new BitSet(new long[]{0x0000100020000410L,0x4000026403FC8500L,0xD800002200C00000L,0x01000000000000FFL,0x0000000001C00000L});
    public static final BitSet FOLLOW_UNIQUE_in_def_justification16195 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fn_name_in_def_justification16201 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INDEXED_DEFINITION_in_def_justification16212 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_ident_in_def_justification16214 = new BitSet(new long[]{0x0000100020000410L,0x4000026403FC8500L,0xD800002200C00000L,0x01000000000000FFL,0x0000000001C00000L});
    public static final BitSet FOLLOW_fn_name_in_def_justification16216 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000002000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_ident_in_def_justification16218 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_rules_set_2_in_simple_justification16245 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rules_set_3_in_simple_justification16249 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RULE1_in_rules_set_116273 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_MODUS_PONENS_in_rules_set_116275 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_RULE1_in_rules_set_116287 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_AND_RULE_in_rules_set_116289 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_RULE1_in_rules_set_116301 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_CONTRADICTION_in_rules_set_116303 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_RULE1_in_rules_set_116315 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_EQUALITY_in_rules_set_116317 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_RULE1_in_rules_set_116329 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_ALTERNATIVE_ELIMINATION_in_rules_set_116331 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_RULE1_in_rules_set_116343 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_COMMON_CONCLUSION_in_rules_set_116345 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_RULE2_in_rules_set_216381 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_REDUCTIO_AD_ABSURDUM_in_rules_set_216383 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_RULE2_in_rules_set_216395 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_UNIVERSAL_GENERALIZATION_in_rules_set_216397 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_RULE2_in_rules_set_216409 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_UNIVERSAL_INSTANTIATION_in_rules_set_216411 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_RULE2_in_rules_set_216423 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_EXISTENTIAL_GENERALIZATION_in_rules_set_216425 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_RULE2_in_rules_set_216437 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_EXISTENTIAL_INSTANTIATION_in_rules_set_216439 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_RULE2_in_rules_set_216451 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_OR_RULE_in_rules_set_216453 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_RULE2_in_rules_set_216465 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_CONJUNCT_ELIMINATION_in_rules_set_216467 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_RULE2_in_rules_set_216479 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_QUANTIFIER_DISTRIBUTION_in_rules_set_216481 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_RULE3_in_rules_set_316510 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_EXCLUDED_MIDDLE_in_rules_set_316512 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_HYPDESIG_in_hyp_desig16540 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_SELF_in_hyp_desig16542 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_HYPDESIG_in_hyp_desig16552 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_lemma_call_in_hyp_desig16554 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_HYPDESIG_in_hyp_desig16564 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_theorem_call_in_hyp_desig16566 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_HYPDESIG_in_hyp_desig16576 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_corollary_name_in_hyp_desig16578 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_HYPDESIG_in_hyp_desig16588 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_supposition_call_in_hyp_desig16590 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_HYPDESIG_in_hyp_desig16600 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_definition_call_in_hyp_desig16602 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_HYPDESIG_in_hyp_desig16612 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_reference_marker_call_in_hyp_desig16614 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_LEMMA_in_lemma_call16641 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_ident_in_lemma_call16643 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_THEOREM_in_theorem_call16664 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_ident_in_theorem_call16666 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_SUPPOSITION_in_supposition_call16686 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DEFINITION_in_definition_call16704 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_LPAREN_in_definition_call16707 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000002000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_ident_in_definition_call16709 = new BitSet(new long[]{0x0000100020000410L,0x4000026403FC8500L,0xD800002200C00000L,0x01000000000000FFL,0x0000000001C00000L});
    public static final BitSet FOLLOW_fn_name_in_definition_call16720 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000002000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_qualified_ident_in_definition_call16724 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000002000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_ident_in_definition_call16728 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000002000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_ident_in_definition_call16742 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_REFCALL_in_reference_marker_call16769 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_ident_in_reference_marker_call16771 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_infix_symbol_in_fn_name16791 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_prefix_symbol_in_fn_name16795 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ident_in_fn_name16799 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ident_in_synpred1_RSimpleTrans1072 = new BitSet(new long[]{0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_OF_in_synpred1_RSimpleTrans1074 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ident_in_synpred2_RSimpleTrans2492 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_DOT_in_synpred2_RSimpleTrans2494 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ident_in_synpred3_RSimpleTrans2517 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_DOT_in_synpred3_RSimpleTrans2519 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FUNCARROW_in_synpred4_RSimpleTrans2673 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000080200L});
    public static final BitSet FOLLOW_sset_domain_expression_in_synpred4_RSimpleTrans2675 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_qualified_ident_in_synpred5_RSimpleTrans3975 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SSET_in_synpred6_RSimpleTrans10913 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BOOLEAN_in_synpred7_RSimpleTrans10929 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_POWERSET_in_synpred8_RSimpleTrans10945 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ident_in_synpred9_RSimpleTrans12219 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_DOT_in_synpred9_RSimpleTrans12221 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_NUMERIC_LITERAL_in_synpred9_RSimpleTrans12223 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_synpred10_RSimpleTrans12289 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_math_expression_in_synpred10_RSimpleTrans12291 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_COMMA_in_synpred10_RSimpleTrans12293 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ident_in_synpred11_RSimpleTrans12719 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_DOT_in_synpred11_RSimpleTrans12721 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000002000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_ident_in_synpred11_RSimpleTrans12723 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_DOT_in_synpred11_RSimpleTrans12725 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LSQBRACK_in_synpred12_RSimpleTrans15139 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_synpred12_RSimpleTrans15141 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_RSQBRACK_in_synpred12_RSimpleTrans15143 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_synpred12_RSimpleTrans15145 = new BitSet(new long[]{0x0000000000080000L});
    public static final BitSet FOLLOW_BASECASE_in_synpred12_RSimpleTrans15147 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_synpred13_RSimpleTrans15165 = new BitSet(new long[]{0x0000000000080000L});
    public static final BitSet FOLLOW_BASECASE_in_synpred13_RSimpleTrans15167 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LSQBRACK_in_synpred14_RSimpleTrans15185 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_synpred14_RSimpleTrans15187 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_RSQBRACK_in_synpred14_RSimpleTrans15189 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_synpred14_RSimpleTrans15191 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_INDUCTIVECASE_in_synpred14_RSimpleTrans15193 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_synpred15_RSimpleTrans15211 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_INDUCTIVECASE_in_synpred15_RSimpleTrans15213 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LSQBRACK_in_synpred16_RSimpleTrans15231 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_synpred16_RSimpleTrans15233 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_RSQBRACK_in_synpred16_RSimpleTrans15235 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENTIFIER_in_synpred17_RSimpleTrans15595 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ident_in_synpred18_RSimpleTrans15816 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_COLON_in_synpred18_RSimpleTrans15818 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ident_in_synpred19_RSimpleTrans15848 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_COMMA_in_synpred19_RSimpleTrans15850 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000002000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_ident_in_synpred19_RSimpleTrans15852 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_hyp_desig_in_synpred20_RSimpleTrans16009 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_COMMA_in_synpred20_RSimpleTrans16011 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_hyp_desig_in_synpred21_RSimpleTrans16027 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_AMPERSAND_in_synpred21_RSimpleTrans16029 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_hyp_desig_in_synpred22_RSimpleTrans16045 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DEFINITION_in_synpred23_RSimpleTrans16071 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_UNIQUE_in_synpred24_RSimpleTrans16189 = new BitSet(new long[]{0x0000000000000002L});

}