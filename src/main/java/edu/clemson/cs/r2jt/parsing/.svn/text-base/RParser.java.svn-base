// $ANTLR 3.3 Nov 30, 2010 12:50:56 RParser.g 2012-03-16 12:05:14

    package edu.clemson.cs.r2jt.parsing;
    
    import edu.clemson.cs.r2jt.data.*;
    import edu.clemson.cs.r2jt.errors.ErrorHandler;
    import org.antlr.*;


import org.antlr.runtime.*;
import java.util.Stack;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.tree.*;

public class RParser extends Parser {
    public static final String[] tokenNames = new String[] {
        "<invalid>", "<EOR>", "<DOWN>", "<UP>", "ABS", "AD", "ABSURDUM", "ALL", "ALTERS", "ALTERNATIVE", "AND", "ARRAY", "ASSUME", "AUX_CODE", "AUX_VAR", "AUX_VARS", "AUXILIARY", "AXIOM", "BOOLEAN", "BASECASE", "BY", "CARTPROD", "CATEGORICAL", "CASE", "CHANGING", "CLEARS", "COMMON", "CONCLUSION", "COMMUTATIVITY", "COMPLEMENT", "CONCEPT", "MODULE_CONCEPT", "CONFIRM", "CONJUNCT", "CONSTRAINT", "CONTRADICTION", "CONVENTION", "COROLLARY", "CORR", "DECREASING", "DEDUCTION", "DEFINES", "DEFINITION", "DISTRIBUTION", "DIV", "DO", "DURATION", "ELAPSED_TIME", "ELSE", "ELIMINATION", "END", "ENHANCED", "ENHANCEMENT", "MODULE_ENHANCEMENT", "ENSURES", "EQUALITY", "EVALUATES", "EXCLUDED", "EXEMPLAR", "EXISTENTIAL", "EXISTS", "EXIT", "FACILITY", "FAC_FINAL", "FAC_INIT", "FAMILY", "FINALIZATION", "FROM", "FOR", "FORGET", "GENERALIZATION", "IF", "IFF", "IMPLICIT", "IMPLIES", "INDUCTIVE", "INDUCTIVECASE", "INITIALIZATION", "INSTANTIATION", "INTERSECT", "INTRODUCES", "IS", "IN", "NOT_IN", "NOT_PROP_SUBSET", "NOT_SUBSET", "NOT_SUBSTR", "PROP_SUBSET", "SUBSET", "SUBSTR", "ITERATE", "LAMBDA", "LEMMA", "LOCAL", "MAINP_DISP", "MAINTAINING", "MATH", "MIDDLE", "MOD", "MODELED", "MODUS", "NOT", "CAT", "OF", "OPERATION", "OR", "OTHERWISE", "PERF_FINAL", "PERF_INIT", "PONENS", "PRESERVES", "PROCEDURE", "MODULE_PROFILE", "PROOF", "PROOFS_FOR", "PROPERTY", "QED", "QUANTIFIER", "REALIZATION", "MODULE_REALIZATION", "REALIZED", "REASSIGNS", "RECORD", "RECURSIVE", "REDUCTIO", "RELATED", "REM", "REMEMBER", "REPEAT", "REPLACES", "REPRESENTED", "REQUIRES", "RESPECTS", "RESTORES", "RULE", "SELF", "SHORT_FOR", "STATIC", "SUBTYPE", "SUCH", "SUPPOSITION", "THAT", "THEN", "THEOREM", "THEORY", "THERE", "TIMES", "TYPE", "TYPE_FAMILY", "UNION", "UNIQUE", "UNIT", "UNIVERSAL", "UPDATES", "USES", "VAR", "VARIABLES", "WHEN", "WHERE", "WHILE", "WITHOUT", "WITH_PROFILE", "LETTER", "ALPHABETIC", "IDENTIFIER", "WS", "SL_COMMENT", "ML_COMMENT", "DIGIT", "DIGITS", "DOT", "REAL", "NUMERIC_LITERAL", "ESC", "CHARACTER_LITERAL", "COMMA", "LPAREN", "RPAREN", "LBRACE", "RBRACE", "DBL_LBRACE", "DBL_RBRACE", "LSQBRACK", "RSQBRACK", "HASH", "CARAT", "PLUS", "MINUS", "AMPERSAND", "MULTIPLY", "DIVIDE", "EXP", "RANGE", "NOT_EQL", "GT_EQL", "LT_EQL", "EQL", "LT", "GT", "LL", "GG", "FUNCARROW", "COLON", "SEMICOLON", "SWAP_OP", "ASSIGN_OP", "BAR", "DBL_BAR", "DQUOTE", "TILDE", "STRING_LITERAL", "USABLE", "FREE_OPERATOR", "REQUIRED_SYMBOLIC", "AND_RULE", "AFFECTS", "ALTERNATIVE_ELIMINATION", "ANGLE", "AUX_OPERATION", "ARRAYFUNCTION", "BETWEEN_EXPR", "CATEGORICAL_DEFINITION", "CHOICES", "COMMON_CONCLUSION", "CONFIRM_TYPE", "CONJUNCT_ELIMINATION", "DECLARATIONS", "DBL_ANGLE", "ENHANCED_BY", "EXCLUDED_MIDDLE", "EXISTENTIAL_GENERALIZATION", "EXISTENTIAL_INSTANTIATION", "EXISTS_UNIQUE", "EXPR", "FORALL", "FUNCTION", "IDENT", "IMPLICIT_DEF", "INDEXED_DEFINITION", "INDUCTIVE_DEF", "ITERATE_EXIT", "ITERATION", "LOCAL_MATH_TYPE", "MATH_TYPE", "MODUS_PONENS", "NESTED", "OR_RULE", "PARAMS", "QUANTIFIER_DISTRIBUTION", "RECURSIVE_OPERATION_PROCEDURE", "RECURSIVE_PROCEDURE", "REDUCTIO_AD_ABSURDUM", "RELATED_BY", "PROGDOT", "SET_EXPR", "STATEMENT", "STATEMENT_SEQUENCE", "TUPLE", "TYPEX", "UNARY_FREE_OP", "UNARY_MINUS", "UNIVERSAL_GENERALIZATION", "UNIVERSAL_INSTANTIATION", "VARDOT", "PROOFBODY", "MATHITEMREF", "PROOFEXPR", "SUPDEDUC", "SIMPLIFICATION", "RULE1", "RULE2", "RULE3", "HYPDESIG", "PROOFEXPRLIST", "REFCALL", "QUALNUM", "LOCALVAREXP", "XOR", "ANDTHEN", "ORELSE", "BIG_UNION", "BIG_INTERSECT", "BIG_SUM", "BIG_PRODUCT", "BIG_CONCAT", "ELSIF", "DEFAULT", "PROP_SUBSTR", "NOT_PROP_SUBSTR", "GOAL"
    };
    public static final int EOF=-1;
    public static final int ABS=4;
    public static final int AD=5;
    public static final int ABSURDUM=6;
    public static final int ALL=7;
    public static final int ALTERS=8;
    public static final int ALTERNATIVE=9;
    public static final int AND=10;
    public static final int ARRAY=11;
    public static final int ASSUME=12;
    public static final int AUX_CODE=13;
    public static final int AUX_VAR=14;
    public static final int AUX_VARS=15;
    public static final int AUXILIARY=16;
    public static final int AXIOM=17;
    public static final int BOOLEAN=18;
    public static final int BASECASE=19;
    public static final int BY=20;
    public static final int CARTPROD=21;
    public static final int CATEGORICAL=22;
    public static final int CASE=23;
    public static final int CHANGING=24;
    public static final int CLEARS=25;
    public static final int COMMON=26;
    public static final int CONCLUSION=27;
    public static final int COMMUTATIVITY=28;
    public static final int COMPLEMENT=29;
    public static final int CONCEPT=30;
    public static final int MODULE_CONCEPT=31;
    public static final int CONFIRM=32;
    public static final int CONJUNCT=33;
    public static final int CONSTRAINT=34;
    public static final int CONTRADICTION=35;
    public static final int CONVENTION=36;
    public static final int COROLLARY=37;
    public static final int CORR=38;
    public static final int DECREASING=39;
    public static final int DEDUCTION=40;
    public static final int DEFINES=41;
    public static final int DEFINITION=42;
    public static final int DISTRIBUTION=43;
    public static final int DIV=44;
    public static final int DO=45;
    public static final int DURATION=46;
    public static final int ELAPSED_TIME=47;
    public static final int ELSE=48;
    public static final int ELIMINATION=49;
    public static final int END=50;
    public static final int ENHANCED=51;
    public static final int ENHANCEMENT=52;
    public static final int MODULE_ENHANCEMENT=53;
    public static final int ENSURES=54;
    public static final int EQUALITY=55;
    public static final int EVALUATES=56;
    public static final int EXCLUDED=57;
    public static final int EXEMPLAR=58;
    public static final int EXISTENTIAL=59;
    public static final int EXISTS=60;
    public static final int EXIT=61;
    public static final int FACILITY=62;
    public static final int FAC_FINAL=63;
    public static final int FAC_INIT=64;
    public static final int FAMILY=65;
    public static final int FINALIZATION=66;
    public static final int FROM=67;
    public static final int FOR=68;
    public static final int FORGET=69;
    public static final int GENERALIZATION=70;
    public static final int IF=71;
    public static final int IFF=72;
    public static final int IMPLICIT=73;
    public static final int IMPLIES=74;
    public static final int INDUCTIVE=75;
    public static final int INDUCTIVECASE=76;
    public static final int INITIALIZATION=77;
    public static final int INSTANTIATION=78;
    public static final int INTERSECT=79;
    public static final int INTRODUCES=80;
    public static final int IS=81;
    public static final int IN=82;
    public static final int NOT_IN=83;
    public static final int NOT_PROP_SUBSET=84;
    public static final int NOT_SUBSET=85;
    public static final int NOT_SUBSTR=86;
    public static final int PROP_SUBSET=87;
    public static final int SUBSET=88;
    public static final int SUBSTR=89;
    public static final int ITERATE=90;
    public static final int LAMBDA=91;
    public static final int LEMMA=92;
    public static final int LOCAL=93;
    public static final int MAINP_DISP=94;
    public static final int MAINTAINING=95;
    public static final int MATH=96;
    public static final int MIDDLE=97;
    public static final int MOD=98;
    public static final int MODELED=99;
    public static final int MODUS=100;
    public static final int NOT=101;
    public static final int CAT=102;
    public static final int OF=103;
    public static final int OPERATION=104;
    public static final int OR=105;
    public static final int OTHERWISE=106;
    public static final int PERF_FINAL=107;
    public static final int PERF_INIT=108;
    public static final int PONENS=109;
    public static final int PRESERVES=110;
    public static final int PROCEDURE=111;
    public static final int MODULE_PROFILE=112;
    public static final int PROOF=113;
    public static final int PROOFS_FOR=114;
    public static final int PROPERTY=115;
    public static final int QED=116;
    public static final int QUANTIFIER=117;
    public static final int REALIZATION=118;
    public static final int MODULE_REALIZATION=119;
    public static final int REALIZED=120;
    public static final int REASSIGNS=121;
    public static final int RECORD=122;
    public static final int RECURSIVE=123;
    public static final int REDUCTIO=124;
    public static final int RELATED=125;
    public static final int REM=126;
    public static final int REMEMBER=127;
    public static final int REPEAT=128;
    public static final int REPLACES=129;
    public static final int REPRESENTED=130;
    public static final int REQUIRES=131;
    public static final int RESPECTS=132;
    public static final int RESTORES=133;
    public static final int RULE=134;
    public static final int SELF=135;
    public static final int SHORT_FOR=136;
    public static final int STATIC=137;
    public static final int SUBTYPE=138;
    public static final int SUCH=139;
    public static final int SUPPOSITION=140;
    public static final int THAT=141;
    public static final int THEN=142;
    public static final int THEOREM=143;
    public static final int THEORY=144;
    public static final int THERE=145;
    public static final int TIMES=146;
    public static final int TYPE=147;
    public static final int TYPE_FAMILY=148;
    public static final int UNION=149;
    public static final int UNIQUE=150;
    public static final int UNIT=151;
    public static final int UNIVERSAL=152;
    public static final int UPDATES=153;
    public static final int USES=154;
    public static final int VAR=155;
    public static final int VARIABLES=156;
    public static final int WHEN=157;
    public static final int WHERE=158;
    public static final int WHILE=159;
    public static final int WITHOUT=160;
    public static final int WITH_PROFILE=161;
    public static final int LETTER=162;
    public static final int ALPHABETIC=163;
    public static final int IDENTIFIER=164;
    public static final int WS=165;
    public static final int SL_COMMENT=166;
    public static final int ML_COMMENT=167;
    public static final int DIGIT=168;
    public static final int DIGITS=169;
    public static final int DOT=170;
    public static final int REAL=171;
    public static final int NUMERIC_LITERAL=172;
    public static final int ESC=173;
    public static final int CHARACTER_LITERAL=174;
    public static final int COMMA=175;
    public static final int LPAREN=176;
    public static final int RPAREN=177;
    public static final int LBRACE=178;
    public static final int RBRACE=179;
    public static final int DBL_LBRACE=180;
    public static final int DBL_RBRACE=181;
    public static final int LSQBRACK=182;
    public static final int RSQBRACK=183;
    public static final int HASH=184;
    public static final int CARAT=185;
    public static final int PLUS=186;
    public static final int MINUS=187;
    public static final int AMPERSAND=188;
    public static final int MULTIPLY=189;
    public static final int DIVIDE=190;
    public static final int EXP=191;
    public static final int RANGE=192;
    public static final int NOT_EQL=193;
    public static final int GT_EQL=194;
    public static final int LT_EQL=195;
    public static final int EQL=196;
    public static final int LT=197;
    public static final int GT=198;
    public static final int LL=199;
    public static final int GG=200;
    public static final int FUNCARROW=201;
    public static final int COLON=202;
    public static final int SEMICOLON=203;
    public static final int SWAP_OP=204;
    public static final int ASSIGN_OP=205;
    public static final int BAR=206;
    public static final int DBL_BAR=207;
    public static final int DQUOTE=208;
    public static final int TILDE=209;
    public static final int STRING_LITERAL=210;
    public static final int USABLE=211;
    public static final int FREE_OPERATOR=212;
    public static final int REQUIRED_SYMBOLIC=213;
    public static final int AND_RULE=214;
    public static final int AFFECTS=215;
    public static final int ALTERNATIVE_ELIMINATION=216;
    public static final int ANGLE=217;
    public static final int AUX_OPERATION=218;
    public static final int ARRAYFUNCTION=219;
    public static final int BETWEEN_EXPR=220;
    public static final int CATEGORICAL_DEFINITION=221;
    public static final int CHOICES=222;
    public static final int COMMON_CONCLUSION=223;
    public static final int CONFIRM_TYPE=224;
    public static final int CONJUNCT_ELIMINATION=225;
    public static final int DECLARATIONS=226;
    public static final int DBL_ANGLE=227;
    public static final int ENHANCED_BY=228;
    public static final int EXCLUDED_MIDDLE=229;
    public static final int EXISTENTIAL_GENERALIZATION=230;
    public static final int EXISTENTIAL_INSTANTIATION=231;
    public static final int EXISTS_UNIQUE=232;
    public static final int EXPR=233;
    public static final int FORALL=234;
    public static final int FUNCTION=235;
    public static final int IDENT=236;
    public static final int IMPLICIT_DEF=237;
    public static final int INDEXED_DEFINITION=238;
    public static final int INDUCTIVE_DEF=239;
    public static final int ITERATE_EXIT=240;
    public static final int ITERATION=241;
    public static final int LOCAL_MATH_TYPE=242;
    public static final int MATH_TYPE=243;
    public static final int MODUS_PONENS=244;
    public static final int NESTED=245;
    public static final int OR_RULE=246;
    public static final int PARAMS=247;
    public static final int QUANTIFIER_DISTRIBUTION=248;
    public static final int RECURSIVE_OPERATION_PROCEDURE=249;
    public static final int RECURSIVE_PROCEDURE=250;
    public static final int REDUCTIO_AD_ABSURDUM=251;
    public static final int RELATED_BY=252;
    public static final int PROGDOT=253;
    public static final int SET_EXPR=254;
    public static final int STATEMENT=255;
    public static final int STATEMENT_SEQUENCE=256;
    public static final int TUPLE=257;
    public static final int TYPEX=258;
    public static final int UNARY_FREE_OP=259;
    public static final int UNARY_MINUS=260;
    public static final int UNIVERSAL_GENERALIZATION=261;
    public static final int UNIVERSAL_INSTANTIATION=262;
    public static final int VARDOT=263;
    public static final int PROOFBODY=264;
    public static final int MATHITEMREF=265;
    public static final int PROOFEXPR=266;
    public static final int SUPDEDUC=267;
    public static final int SIMPLIFICATION=268;
    public static final int RULE1=269;
    public static final int RULE2=270;
    public static final int RULE3=271;
    public static final int HYPDESIG=272;
    public static final int PROOFEXPRLIST=273;
    public static final int REFCALL=274;
    public static final int QUALNUM=275;
    public static final int LOCALVAREXP=276;
    public static final int XOR=277;
    public static final int ANDTHEN=278;
    public static final int ORELSE=279;
    public static final int BIG_UNION=280;
    public static final int BIG_INTERSECT=281;
    public static final int BIG_SUM=282;
    public static final int BIG_PRODUCT=283;
    public static final int BIG_CONCAT=284;
    public static final int ELSIF=285;
    public static final int DEFAULT=286;
    public static final int PROP_SUBSTR=287;
    public static final int NOT_PROP_SUBSTR=288;
    public static final int GOAL=289;

    // delegates
    // delegators


        public RParser(TokenStream input) {
            this(input, new RecognizerSharedState());
        }
        public RParser(TokenStream input, RecognizerSharedState state) {
            super(input, state);
             
        }
        
    protected TreeAdaptor adaptor = new CommonTreeAdaptor();

    public void setTreeAdaptor(TreeAdaptor adaptor) {
        this.adaptor = adaptor;
    }
    public TreeAdaptor getTreeAdaptor() {
        return adaptor;
    }

    public String[] getTokenNames() { return RParser.tokenNames; }
    public String getGrammarFileName() { return "RParser.g"; }


        /*
         * Variables to tell us what type of module we are
         * parsing.  Used for semantic predicates of rules or productions
         * which are only applicable to particular modules.
         */
        boolean theoryModule = false;
        boolean conceptModule = false;
        boolean performanceModule = false;
        boolean bodyModule = false;
        boolean enhancementModule = false;
        boolean facilityModule = false;

        /**
         * Reset the type of module we are parsing.
         */
        public void resetModuleType() {
            this.theoryModule = false;
            this.conceptModule = false;
            this.performanceModule = false;
            this.bodyModule = false;
            this.enhancementModule = false;
            this.facilityModule = false;
        }

        //private ErrorHandler err = ErrorHandler.getInstance();
        private ErrorHandler err;

        private boolean otherwise = false;

        private void checkOtherwiseItem(Tree ast) {
            if (otherwise) {
                String msg = "Cannot add an alternative after "
                + "an \"otherwise\" clause.";
                err.error(getPos(ast), msg);
            }
        }

        private void checkIndexedIdent(Tree ast) {
            if (!ast.getText().equals("i") &&
                !ast.getText().equals("ii"))
            {
                String msg = "Expecting i or ii, found " + ast.getText();
                err.error(getPos(ast), msg);
            }
        }    

        private void checkTimesIdent(Token ast) {
            if (!ast.getText().equals("x")) {
                String msg = "Expecting x or times, found " + ast.getText();
                err.error(getPos(ast), msg);
            }
        }    

        private void checkIteratedIdent(Tree ast) {
            if (!ast.getText().equals("Sum") &&
                !ast.getText().equals("Product") &&
                !ast.getText().equals("Concatenation") &&
                !ast.getText().equals("Intersection") &&
                !ast.getText().equals("Union"))
            {
                String msg = "Expecting iteration identifier "
                    + "(Sum, Product, Concatenation, Intersection, Union),"
                    + "but found " + ast.getText();
                err.error(getPos(ast), msg);
            }
        }    

        private boolean facInit = false;
        private boolean facFinal = false;

        private void checkFacInit(Tree ast) {
            if (facInit) {
                String msg = "Cannot redefine facility initialization.";
                err.error(getPos(ast), msg);
            } else {
                facInit = true;
            }
        } 

        private void checkFacFinal(Tree ast) {
            if (facFinal) {
                String msg = "Cannot redefine facility finalization.";
                err.error(getPos(ast), msg);
            } else {
                facFinal = true;
            }
        }
        public String getErrorMessage(RecognitionException e,
            String[] tokenNames)
            {
              List stack = (List)getRuleInvocationStack(e, this.getClass().getName());
              String msg = null;
              if ( e instanceof NoViableAltException ) {
                NoViableAltException nvae = (NoViableAltException)e;
                msg = " no viable alt; token="+e.token+
                " (decision="+nvae.decisionNumber+
                " state "+nvae.stateNumber+")"+
                " input "+nvae.input+")"+
                " decision=<<"+nvae.grammarDecisionDescription+">>";
              }
              if( e instanceof MismatchedTokenException ) {
                MismatchedTokenException mte = (MismatchedTokenException)e;
                String exp = null;
                if(mte.expecting == Token.EOF){
                  exp = "EOF";
                }
                else{
                  exp = tokenNames[mte.expecting];
                }
                msg = "expecting " + exp + ", found '" + mte.token.getText() + "'";
              }
              else {
                msg = super.getErrorMessage(e, tokenNames);
              }
              
              // For debugging changes to the grammar change this to return
              // both the stack (lists the rules visited) and the msg
              return msg;
              //return "Parser: "+stack + " " + msg;
        }
        public String getTokenErrorDisplay(Token t) {
            return t.toString();
        }

        /** Delegate the error handling to the error handler. */
        public void reportError(RecognitionException ex) {
            err.error(getPos(ex.token), getErrorMessage(ex, RParser.tokenNames));
            //System.out.println(getErrorMessage(ex, RParser.tokenNames));
            //err.error(ex);
        }

        /** Delegate the warning handling to the error handler. */
        public void reportWarning(String s) {
            err.warning(s);
        }
        
        private void matchModuleIdent(Tree id2, Tree id1) {
            if (!id1.getText().equals(id2.getText())) { 
                String msg = "End name " + id2.getText() +
                " does not match module name " + id1.getText();
                err.error(getPos(id2), msg);
            }  
        }

        /*private void matchModuleIdent(ColsAST id2, ColsAST id1) {
            if (!id1.getText().equals(id2.getText())) { 
                String msg = "End name " + id2.getText() +
                " does not match module name " + id1.getText();
                err.error(getPos(id2), msg);
            }  
        }*/

        private void matchOperationIdent(Tree id2, Tree id1) {
            if (!id1.getText().equals(id2.getText())) { 
                String msg = "End name " + id2.getText() +
                " does not match operation name " + id1.getText();
                err.error(getPos(id2), msg);
            }
        }
        
        private void matchMathItemIdent(Tree id2, Tree id1) {
            if (!id1.getText().equals(id2.getText())) { 
                String msg = "End name " + id2.getText() +
                " does not match proof name " + id1.getText();
                err.error(getPos(id2), msg);
            }
        }

        private Pos getPos(Tree ast) {
            //return new Pos(ast.getLine(), ast.getColumn());
            return new Pos(ast.getLine(), ast.getCharPositionInLine());
        }

        private Pos getPos(Token ast) {
           //return new Pos(ast.getLine(), ast.getColumn());
            return new Pos(ast.getLine(), ast.getCharPositionInLine());
        }
        
        /*public void recover(RecognitionException ex, BitSet bs) throws TokenStreamException {
          try {
              consume();
              consumeUntil(bs);
          }
          catch (TokenStreamException tsex) {
                throw tsex;
          } 
        }*/
        
    	//XXX : This was not commented out during the Mar 2012 merge---we had no idea who changed it
        /*private boolean isDeductionToken(String testStr) {
          if(testStr.equals("deduction") || testStr.equals("Deduction")) {
            return true;
          }
          return false;
        }*/



    public static class module_return extends ParserRuleReturnScope {
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "module"
    // RParser.g:358:1: module[ErrorHandler err] : ( proof_module | theory_module | conceptual_module | performance_module | realization_body_module | enhancement_module | facility_module ) EOF ;
    public final RParser.module_return module(ErrorHandler err) throws RecognitionException {
        RParser.module_return retval = new RParser.module_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        Token EOF8=null;
        RParser.proof_module_return proof_module1 = null;

        RParser.theory_module_return theory_module2 = null;

        RParser.conceptual_module_return conceptual_module3 = null;

        RParser.performance_module_return performance_module4 = null;

        RParser.realization_body_module_return realization_body_module5 = null;

        RParser.enhancement_module_return enhancement_module6 = null;

        RParser.facility_module_return facility_module7 = null;


        ColsAST EOF8_tree=null;


        this.err = err;

        try {
            // RParser.g:362:5: ( ( proof_module | theory_module | conceptual_module | performance_module | realization_body_module | enhancement_module | facility_module ) EOF )
            // RParser.g:362:9: ( proof_module | theory_module | conceptual_module | performance_module | realization_body_module | enhancement_module | facility_module ) EOF
            {
            root_0 = (ColsAST)adaptor.nil();

            // RParser.g:362:9: ( proof_module | theory_module | conceptual_module | performance_module | realization_body_module | enhancement_module | facility_module )
            int alt1=7;
            switch ( input.LA(1) ) {
            case PROOF:
            case PROOFS_FOR:
                {
                alt1=1;
                }
                break;
            case THEORY:
                {
                alt1=2;
                }
                break;
            case MODULE_CONCEPT:
                {
                alt1=3;
                }
                break;
            case MODULE_PROFILE:
                {
                alt1=4;
                }
                break;
            case MODULE_REALIZATION:
                {
                alt1=5;
                }
                break;
            case MODULE_ENHANCEMENT:
                {
                alt1=6;
                }
                break;
            case FACILITY:
                {
                alt1=7;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 1, 0, input);

                throw nvae;
            }

            switch (alt1) {
                case 1 :
                    // RParser.g:362:13: proof_module
                    {
                    pushFollow(FOLLOW_proof_module_in_module589);
                    proof_module1=proof_module();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, proof_module1.getTree());

                    }
                    break;
                case 2 :
                    // RParser.g:363:13: theory_module
                    {
                    pushFollow(FOLLOW_theory_module_in_module603);
                    theory_module2=theory_module();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, theory_module2.getTree());

                    }
                    break;
                case 3 :
                    // RParser.g:364:13: conceptual_module
                    {
                    pushFollow(FOLLOW_conceptual_module_in_module617);
                    conceptual_module3=conceptual_module();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, conceptual_module3.getTree());

                    }
                    break;
                case 4 :
                    // RParser.g:365:13: performance_module
                    {
                    pushFollow(FOLLOW_performance_module_in_module631);
                    performance_module4=performance_module();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, performance_module4.getTree());

                    }
                    break;
                case 5 :
                    // RParser.g:366:13: realization_body_module
                    {
                    pushFollow(FOLLOW_realization_body_module_in_module653);
                    realization_body_module5=realization_body_module();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, realization_body_module5.getTree());

                    }
                    break;
                case 6 :
                    // RParser.g:367:13: enhancement_module
                    {
                    pushFollow(FOLLOW_enhancement_module_in_module667);
                    enhancement_module6=enhancement_module();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, enhancement_module6.getTree());

                    }
                    break;
                case 7 :
                    // RParser.g:368:13: facility_module
                    {
                    pushFollow(FOLLOW_facility_module_in_module681);
                    facility_module7=facility_module();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, facility_module7.getTree());

                    }
                    break;

            }

            EOF8=(Token)match(input,EOF,FOLLOW_EOF_in_module701); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (ColsAST)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "module"

    public static class theory_module_return extends ParserRuleReturnScope {
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "theory_module"
    // RParser.g:377:1: theory_module : THEORY id1= ident ( module_formal_param_section )? SEMICOLON ( uses_list )? ( math_item_sequence )? END (id2= ident )? SEMICOLON ;
    public final RParser.theory_module_return theory_module() throws RecognitionException {
        RParser.theory_module_return retval = new RParser.theory_module_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        Token THEORY9=null;
        Token SEMICOLON11=null;
        Token END14=null;
        Token SEMICOLON15=null;
        RParser.ident_return id1 = null;

        RParser.ident_return id2 = null;

        RParser.module_formal_param_section_return module_formal_param_section10 = null;

        RParser.uses_list_return uses_list12 = null;

        RParser.math_item_sequence_return math_item_sequence13 = null;


        ColsAST THEORY9_tree=null;
        ColsAST SEMICOLON11_tree=null;
        ColsAST END14_tree=null;
        ColsAST SEMICOLON15_tree=null;

        try {
            // RParser.g:378:5: ( THEORY id1= ident ( module_formal_param_section )? SEMICOLON ( uses_list )? ( math_item_sequence )? END (id2= ident )? SEMICOLON )
            // RParser.g:378:9: THEORY id1= ident ( module_formal_param_section )? SEMICOLON ( uses_list )? ( math_item_sequence )? END (id2= ident )? SEMICOLON
            {
            root_0 = (ColsAST)adaptor.nil();

            THEORY9=(Token)match(input,THEORY,FOLLOW_THEORY_in_theory_module725); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            THEORY9_tree = (ColsAST)adaptor.create(THEORY9);
            root_0 = (ColsAST)adaptor.becomeRoot(THEORY9_tree, root_0);
            }
            pushFollow(FOLLOW_ident_in_theory_module730);
            id1=ident();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, id1.getTree());
            // RParser.g:379:9: ( module_formal_param_section )?
            int alt2=2;
            int LA2_0 = input.LA(1);

            if ( (LA2_0==LPAREN) ) {
                alt2=1;
            }
            switch (alt2) {
                case 1 :
                    // RParser.g:379:10: module_formal_param_section
                    {
                    pushFollow(FOLLOW_module_formal_param_section_in_theory_module742);
                    module_formal_param_section10=module_formal_param_section();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, module_formal_param_section10.getTree());

                    }
                    break;

            }

            SEMICOLON11=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_theory_module746); if (state.failed) return retval;
            // RParser.g:380:9: ( uses_list )?
            int alt3=2;
            int LA3_0 = input.LA(1);

            if ( (LA3_0==USES) ) {
                alt3=1;
            }
            switch (alt3) {
                case 1 :
                    // RParser.g:380:10: uses_list
                    {
                    pushFollow(FOLLOW_uses_list_in_theory_module758);
                    uses_list12=uses_list();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, uses_list12.getTree());

                    }
                    break;

            }

            // RParser.g:381:9: ( math_item_sequence )?
            int alt4=2;
            int LA4_0 = input.LA(1);

            if ( (LA4_0==AXIOM||LA4_0==CATEGORICAL||LA4_0==COMMUTATIVITY||LA4_0==COROLLARY||LA4_0==DEFINITION||LA4_0==IMPLICIT||LA4_0==INDUCTIVE||LA4_0==LEMMA||LA4_0==PROPERTY||LA4_0==THEOREM||LA4_0==TYPE) ) {
                alt4=1;
            }
            switch (alt4) {
                case 1 :
                    // RParser.g:381:10: math_item_sequence
                    {
                    pushFollow(FOLLOW_math_item_sequence_in_theory_module771);
                    math_item_sequence13=math_item_sequence();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, math_item_sequence13.getTree());

                    }
                    break;

            }

            END14=(Token)match(input,END,FOLLOW_END_in_theory_module783); if (state.failed) return retval;
            // RParser.g:382:14: (id2= ident )?
            int alt5=2;
            int LA5_0 = input.LA(1);

            if ( (LA5_0==IDENTIFIER) ) {
                alt5=1;
            }
            switch (alt5) {
                case 1 :
                    // RParser.g:382:15: id2= ident
                    {
                    pushFollow(FOLLOW_ident_in_theory_module789);
                    id2=ident();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       matchModuleIdent(id2.tree, id1.tree); 
                    }

                    }
                    break;

            }

            SEMICOLON15=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_theory_module804); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (ColsAST)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "theory_module"

    public static class math_item_sequence_return extends ParserRuleReturnScope {
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "math_item_sequence"
    // RParser.g:387:1: math_item_sequence : ( math_item )+ ;
    public final RParser.math_item_sequence_return math_item_sequence() throws RecognitionException {
        RParser.math_item_sequence_return retval = new RParser.math_item_sequence_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        RParser.math_item_return math_item16 = null;



        try {
            // RParser.g:388:5: ( ( math_item )+ )
            // RParser.g:388:9: ( math_item )+
            {
            root_0 = (ColsAST)adaptor.nil();

            // RParser.g:388:9: ( math_item )+
            int cnt6=0;
            loop6:
            do {
                int alt6=2;
                int LA6_0 = input.LA(1);

                if ( (LA6_0==AXIOM||LA6_0==CATEGORICAL||LA6_0==COMMUTATIVITY||LA6_0==COROLLARY||LA6_0==DEFINITION||LA6_0==IMPLICIT||LA6_0==INDUCTIVE||LA6_0==LEMMA||LA6_0==PROPERTY||LA6_0==THEOREM||LA6_0==TYPE) ) {
                    alt6=1;
                }


                switch (alt6) {
            	case 1 :
            	    // RParser.g:388:10: math_item
            	    {
            	    pushFollow(FOLLOW_math_item_in_math_item_sequence826);
            	    math_item16=math_item();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, math_item16.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt6 >= 1 ) break loop6;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(6, input);
                        throw eee;
                }
                cnt6++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (ColsAST)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "math_item_sequence"

    public static class math_item_return extends ParserRuleReturnScope {
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "math_item"
    // RParser.g:391:1: math_item : ( definition_declaration | math_assertion_declaration | type_theorem_declaration );
    public final RParser.math_item_return math_item() throws RecognitionException {
        RParser.math_item_return retval = new RParser.math_item_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        RParser.definition_declaration_return definition_declaration17 = null;

        RParser.math_assertion_declaration_return math_assertion_declaration18 = null;

        RParser.type_theorem_declaration_return type_theorem_declaration19 = null;



        try {
            // RParser.g:392:5: ( definition_declaration | math_assertion_declaration | type_theorem_declaration )
            int alt7=3;
            switch ( input.LA(1) ) {
            case CATEGORICAL:
            case DEFINITION:
            case IMPLICIT:
            case INDUCTIVE:
                {
                alt7=1;
                }
                break;
            case AXIOM:
            case COMMUTATIVITY:
            case COROLLARY:
            case LEMMA:
            case PROPERTY:
            case THEOREM:
                {
                alt7=2;
                }
                break;
            case TYPE:
                {
                alt7=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 7, 0, input);

                throw nvae;
            }

            switch (alt7) {
                case 1 :
                    // RParser.g:392:9: definition_declaration
                    {
                    root_0 = (ColsAST)adaptor.nil();

                    pushFollow(FOLLOW_definition_declaration_in_math_item847);
                    definition_declaration17=definition_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, definition_declaration17.getTree());

                    }
                    break;
                case 2 :
                    // RParser.g:393:9: math_assertion_declaration
                    {
                    root_0 = (ColsAST)adaptor.nil();

                    pushFollow(FOLLOW_math_assertion_declaration_in_math_item857);
                    math_assertion_declaration18=math_assertion_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, math_assertion_declaration18.getTree());

                    }
                    break;
                case 3 :
                    // RParser.g:394:9: type_theorem_declaration
                    {
                    root_0 = (ColsAST)adaptor.nil();

                    pushFollow(FOLLOW_type_theorem_declaration_in_math_item867);
                    type_theorem_declaration19=type_theorem_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_theorem_declaration19.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (ColsAST)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "math_item"

    public static class conceptual_module_return extends ParserRuleReturnScope {
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "conceptual_module"
    // RParser.g:401:1: conceptual_module : MODULE_CONCEPT id1= ident ( module_formal_param_section )? SEMICOLON ( uses_list )? ( requires_clause )? ( concept_item_sequence )? END (id2= ident )? SEMICOLON ;
    public final RParser.conceptual_module_return conceptual_module() throws RecognitionException {
        RParser.conceptual_module_return retval = new RParser.conceptual_module_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        Token MODULE_CONCEPT20=null;
        Token SEMICOLON22=null;
        Token END26=null;
        Token SEMICOLON27=null;
        RParser.ident_return id1 = null;

        RParser.ident_return id2 = null;

        RParser.module_formal_param_section_return module_formal_param_section21 = null;

        RParser.uses_list_return uses_list23 = null;

        RParser.requires_clause_return requires_clause24 = null;

        RParser.concept_item_sequence_return concept_item_sequence25 = null;


        ColsAST MODULE_CONCEPT20_tree=null;
        ColsAST SEMICOLON22_tree=null;
        ColsAST END26_tree=null;
        ColsAST SEMICOLON27_tree=null;

        try {
            // RParser.g:402:5: ( MODULE_CONCEPT id1= ident ( module_formal_param_section )? SEMICOLON ( uses_list )? ( requires_clause )? ( concept_item_sequence )? END (id2= ident )? SEMICOLON )
            // RParser.g:402:9: MODULE_CONCEPT id1= ident ( module_formal_param_section )? SEMICOLON ( uses_list )? ( requires_clause )? ( concept_item_sequence )? END (id2= ident )? SEMICOLON
            {
            root_0 = (ColsAST)adaptor.nil();

            MODULE_CONCEPT20=(Token)match(input,MODULE_CONCEPT,FOLLOW_MODULE_CONCEPT_in_conceptual_module890); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            MODULE_CONCEPT20_tree = (ColsAST)adaptor.create(MODULE_CONCEPT20);
            root_0 = (ColsAST)adaptor.becomeRoot(MODULE_CONCEPT20_tree, root_0);
            }
            pushFollow(FOLLOW_ident_in_conceptual_module895);
            id1=ident();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, id1.getTree());
            if ( state.backtracking==0 ) {
               conceptModule = true; 
            }
            // RParser.g:403:9: ( module_formal_param_section )?
            int alt8=2;
            int LA8_0 = input.LA(1);

            if ( (LA8_0==LPAREN) ) {
                alt8=1;
            }
            switch (alt8) {
                case 1 :
                    // RParser.g:403:10: module_formal_param_section
                    {
                    pushFollow(FOLLOW_module_formal_param_section_in_conceptual_module908);
                    module_formal_param_section21=module_formal_param_section();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, module_formal_param_section21.getTree());

                    }
                    break;

            }

            SEMICOLON22=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_conceptual_module912); if (state.failed) return retval;
            // RParser.g:404:9: ( uses_list )?
            int alt9=2;
            int LA9_0 = input.LA(1);

            if ( (LA9_0==USES) ) {
                alt9=1;
            }
            switch (alt9) {
                case 1 :
                    // RParser.g:404:10: uses_list
                    {
                    pushFollow(FOLLOW_uses_list_in_conceptual_module924);
                    uses_list23=uses_list();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, uses_list23.getTree());

                    }
                    break;

            }

            // RParser.g:405:9: ( requires_clause )?
            int alt10=2;
            int LA10_0 = input.LA(1);

            if ( (LA10_0==REQUIRES) ) {
                alt10=1;
            }
            switch (alt10) {
                case 1 :
                    // RParser.g:405:10: requires_clause
                    {
                    pushFollow(FOLLOW_requires_clause_in_conceptual_module937);
                    requires_clause24=requires_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, requires_clause24.getTree());

                    }
                    break;

            }

            // RParser.g:406:9: ( concept_item_sequence )?
            int alt11=2;
            int LA11_0 = input.LA(1);

            if ( (LA11_0==CATEGORICAL||LA11_0==CONFIRM||LA11_0==CONSTRAINT||(LA11_0>=DEFINES && LA11_0<=DEFINITION)||(LA11_0>=FAC_FINAL && LA11_0<=FAMILY)||LA11_0==IMPLICIT||LA11_0==INDUCTIVE||LA11_0==OPERATION||(LA11_0>=TYPE && LA11_0<=TYPE_FAMILY)||LA11_0==VAR) ) {
                alt11=1;
            }
            switch (alt11) {
                case 1 :
                    // RParser.g:406:10: concept_item_sequence
                    {
                    pushFollow(FOLLOW_concept_item_sequence_in_conceptual_module950);
                    concept_item_sequence25=concept_item_sequence();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, concept_item_sequence25.getTree());

                    }
                    break;

            }

            END26=(Token)match(input,END,FOLLOW_END_in_conceptual_module962); if (state.failed) return retval;
            // RParser.g:407:14: (id2= ident )?
            int alt12=2;
            int LA12_0 = input.LA(1);

            if ( (LA12_0==IDENTIFIER) ) {
                alt12=1;
            }
            switch (alt12) {
                case 1 :
                    // RParser.g:407:15: id2= ident
                    {
                    pushFollow(FOLLOW_ident_in_conceptual_module968);
                    id2=ident();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       matchModuleIdent(id2.tree, id1.tree); 
                    }

                    }
                    break;

            }

            SEMICOLON27=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_conceptual_module983); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (ColsAST)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "conceptual_module"

    public static class concept_item_sequence_return extends ParserRuleReturnScope {
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "concept_item_sequence"
    // RParser.g:411:1: concept_item_sequence : ( concept_item )+ ;
    public final RParser.concept_item_sequence_return concept_item_sequence() throws RecognitionException {
        RParser.concept_item_sequence_return retval = new RParser.concept_item_sequence_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        RParser.concept_item_return concept_item28 = null;



        try {
            // RParser.g:412:5: ( ( concept_item )+ )
            // RParser.g:412:9: ( concept_item )+
            {
            root_0 = (ColsAST)adaptor.nil();

            // RParser.g:412:9: ( concept_item )+
            int cnt13=0;
            loop13:
            do {
                int alt13=2;
                int LA13_0 = input.LA(1);

                if ( (LA13_0==CATEGORICAL||LA13_0==CONFIRM||LA13_0==CONSTRAINT||(LA13_0>=DEFINES && LA13_0<=DEFINITION)||(LA13_0>=FAC_FINAL && LA13_0<=FAMILY)||LA13_0==IMPLICIT||LA13_0==INDUCTIVE||LA13_0==OPERATION||(LA13_0>=TYPE && LA13_0<=TYPE_FAMILY)||LA13_0==VAR) ) {
                    alt13=1;
                }


                switch (alt13) {
            	case 1 :
            	    // RParser.g:412:10: concept_item
            	    {
            	    pushFollow(FOLLOW_concept_item_in_concept_item_sequence1004);
            	    concept_item28=concept_item();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, concept_item28.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt13 >= 1 ) break loop13;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(13, input);
                        throw eee;
                }
                cnt13++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (ColsAST)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "concept_item_sequence"

    public static class concept_item_return extends ParserRuleReturnScope {
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "concept_item"
    // RParser.g:415:1: concept_item : ( confirm_math_type_declaration | concept_state_variable_declaration | constraint_clause | module_concept_init_declaration | module_concept_final_declaration | type_declaration | operation_declaration | definition_declaration | defines_declaration );
    public final RParser.concept_item_return concept_item() throws RecognitionException {
        RParser.concept_item_return retval = new RParser.concept_item_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        RParser.confirm_math_type_declaration_return confirm_math_type_declaration29 = null;

        RParser.concept_state_variable_declaration_return concept_state_variable_declaration30 = null;

        RParser.constraint_clause_return constraint_clause31 = null;

        RParser.module_concept_init_declaration_return module_concept_init_declaration32 = null;

        RParser.module_concept_final_declaration_return module_concept_final_declaration33 = null;

        RParser.type_declaration_return type_declaration34 = null;

        RParser.operation_declaration_return operation_declaration35 = null;

        RParser.definition_declaration_return definition_declaration36 = null;

        RParser.defines_declaration_return defines_declaration37 = null;



        try {
            // RParser.g:416:5: ( confirm_math_type_declaration | concept_state_variable_declaration | constraint_clause | module_concept_init_declaration | module_concept_final_declaration | type_declaration | operation_declaration | definition_declaration | defines_declaration )
            int alt14=9;
            alt14 = dfa14.predict(input);
            switch (alt14) {
                case 1 :
                    // RParser.g:417:5: confirm_math_type_declaration
                    {
                    root_0 = (ColsAST)adaptor.nil();

                    pushFollow(FOLLOW_confirm_math_type_declaration_in_concept_item1027);
                    confirm_math_type_declaration29=confirm_math_type_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, confirm_math_type_declaration29.getTree());

                    }
                    break;
                case 2 :
                    // RParser.g:418:9: concept_state_variable_declaration
                    {
                    root_0 = (ColsAST)adaptor.nil();

                    pushFollow(FOLLOW_concept_state_variable_declaration_in_concept_item1037);
                    concept_state_variable_declaration30=concept_state_variable_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, concept_state_variable_declaration30.getTree());

                    }
                    break;
                case 3 :
                    // RParser.g:419:9: constraint_clause
                    {
                    root_0 = (ColsAST)adaptor.nil();

                    pushFollow(FOLLOW_constraint_clause_in_concept_item1047);
                    constraint_clause31=constraint_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, constraint_clause31.getTree());

                    }
                    break;
                case 4 :
                    // RParser.g:420:9: module_concept_init_declaration
                    {
                    root_0 = (ColsAST)adaptor.nil();

                    pushFollow(FOLLOW_module_concept_init_declaration_in_concept_item1057);
                    module_concept_init_declaration32=module_concept_init_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, module_concept_init_declaration32.getTree());

                    }
                    break;
                case 5 :
                    // RParser.g:421:9: module_concept_final_declaration
                    {
                    root_0 = (ColsAST)adaptor.nil();

                    pushFollow(FOLLOW_module_concept_final_declaration_in_concept_item1067);
                    module_concept_final_declaration33=module_concept_final_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, module_concept_final_declaration33.getTree());

                    }
                    break;
                case 6 :
                    // RParser.g:422:9: type_declaration
                    {
                    root_0 = (ColsAST)adaptor.nil();

                    pushFollow(FOLLOW_type_declaration_in_concept_item1077);
                    type_declaration34=type_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_declaration34.getTree());

                    }
                    break;
                case 7 :
                    // RParser.g:423:9: operation_declaration
                    {
                    root_0 = (ColsAST)adaptor.nil();

                    pushFollow(FOLLOW_operation_declaration_in_concept_item1087);
                    operation_declaration35=operation_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, operation_declaration35.getTree());

                    }
                    break;
                case 8 :
                    // RParser.g:424:9: definition_declaration
                    {
                    root_0 = (ColsAST)adaptor.nil();

                    pushFollow(FOLLOW_definition_declaration_in_concept_item1097);
                    definition_declaration36=definition_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, definition_declaration36.getTree());

                    }
                    break;
                case 9 :
                    // RParser.g:425:9: defines_declaration
                    {
                    root_0 = (ColsAST)adaptor.nil();

                    pushFollow(FOLLOW_defines_declaration_in_concept_item1107);
                    defines_declaration37=defines_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, defines_declaration37.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (ColsAST)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "concept_item"

    public static class performance_module_return extends ParserRuleReturnScope {
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "performance_module"
    // RParser.g:432:1: performance_module : MODULE_PROFILE id1= ident ( module_formal_param_section )? SHORT_FOR ident FOR ident ( FOR ident WITH_PROFILE ident )? SEMICOLON ( uses_list )? ( requires_clause )? ( performance_item_sequence )? END (id2= ident )? SEMICOLON ;
    public final RParser.performance_module_return performance_module() throws RecognitionException {
        RParser.performance_module_return retval = new RParser.performance_module_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        Token MODULE_PROFILE38=null;
        Token SHORT_FOR40=null;
        Token FOR42=null;
        Token FOR44=null;
        Token WITH_PROFILE46=null;
        Token SEMICOLON48=null;
        Token END52=null;
        Token SEMICOLON53=null;
        RParser.ident_return id1 = null;

        RParser.ident_return id2 = null;

        RParser.module_formal_param_section_return module_formal_param_section39 = null;

        RParser.ident_return ident41 = null;

        RParser.ident_return ident43 = null;

        RParser.ident_return ident45 = null;

        RParser.ident_return ident47 = null;

        RParser.uses_list_return uses_list49 = null;

        RParser.requires_clause_return requires_clause50 = null;

        RParser.performance_item_sequence_return performance_item_sequence51 = null;


        ColsAST MODULE_PROFILE38_tree=null;
        ColsAST SHORT_FOR40_tree=null;
        ColsAST FOR42_tree=null;
        ColsAST FOR44_tree=null;
        ColsAST WITH_PROFILE46_tree=null;
        ColsAST SEMICOLON48_tree=null;
        ColsAST END52_tree=null;
        ColsAST SEMICOLON53_tree=null;

        try {
            // RParser.g:433:5: ( MODULE_PROFILE id1= ident ( module_formal_param_section )? SHORT_FOR ident FOR ident ( FOR ident WITH_PROFILE ident )? SEMICOLON ( uses_list )? ( requires_clause )? ( performance_item_sequence )? END (id2= ident )? SEMICOLON )
            // RParser.g:434:9: MODULE_PROFILE id1= ident ( module_formal_param_section )? SHORT_FOR ident FOR ident ( FOR ident WITH_PROFILE ident )? SEMICOLON ( uses_list )? ( requires_clause )? ( performance_item_sequence )? END (id2= ident )? SEMICOLON
            {
            root_0 = (ColsAST)adaptor.nil();

            MODULE_PROFILE38=(Token)match(input,MODULE_PROFILE,FOLLOW_MODULE_PROFILE_in_performance_module1138); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            MODULE_PROFILE38_tree = (ColsAST)adaptor.create(MODULE_PROFILE38);
            root_0 = (ColsAST)adaptor.becomeRoot(MODULE_PROFILE38_tree, root_0);
            }
            pushFollow(FOLLOW_ident_in_performance_module1143);
            id1=ident();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, id1.getTree());
            if ( state.backtracking==0 ) {
               performanceModule = true; 
            }
            // RParser.g:436:9: ( module_formal_param_section )?
            int alt15=2;
            int LA15_0 = input.LA(1);

            if ( (LA15_0==LPAREN) ) {
                alt15=1;
            }
            switch (alt15) {
                case 1 :
                    // RParser.g:436:10: module_formal_param_section
                    {
                    pushFollow(FOLLOW_module_formal_param_section_in_performance_module1164);
                    module_formal_param_section39=module_formal_param_section();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, module_formal_param_section39.getTree());

                    }
                    break;

            }

            SHORT_FOR40=(Token)match(input,SHORT_FOR,FOLLOW_SHORT_FOR_in_performance_module1168); if (state.failed) return retval;
            pushFollow(FOLLOW_ident_in_performance_module1179);
            ident41=ident();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, ident41.getTree());
            FOR42=(Token)match(input,FOR,FOLLOW_FOR_in_performance_module1181); if (state.failed) return retval;
            pushFollow(FOLLOW_ident_in_performance_module1184);
            ident43=ident();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, ident43.getTree());
            // RParser.g:437:26: ( FOR ident WITH_PROFILE ident )?
            int alt16=2;
            int LA16_0 = input.LA(1);

            if ( (LA16_0==FOR) ) {
                alt16=1;
            }
            switch (alt16) {
                case 1 :
                    // RParser.g:437:27: FOR ident WITH_PROFILE ident
                    {
                    FOR44=(Token)match(input,FOR,FOLLOW_FOR_in_performance_module1187); if (state.failed) return retval;
                    pushFollow(FOLLOW_ident_in_performance_module1190);
                    ident45=ident();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, ident45.getTree());
                    WITH_PROFILE46=(Token)match(input,WITH_PROFILE,FOLLOW_WITH_PROFILE_in_performance_module1192); if (state.failed) return retval;
                    pushFollow(FOLLOW_ident_in_performance_module1195);
                    ident47=ident();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, ident47.getTree());

                    }
                    break;

            }

            SEMICOLON48=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_performance_module1199); if (state.failed) return retval;
            // RParser.g:438:9: ( uses_list )?
            int alt17=2;
            int LA17_0 = input.LA(1);

            if ( (LA17_0==USES) ) {
                alt17=1;
            }
            switch (alt17) {
                case 1 :
                    // RParser.g:438:10: uses_list
                    {
                    pushFollow(FOLLOW_uses_list_in_performance_module1211);
                    uses_list49=uses_list();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, uses_list49.getTree());

                    }
                    break;

            }

            // RParser.g:439:9: ( requires_clause )?
            int alt18=2;
            int LA18_0 = input.LA(1);

            if ( (LA18_0==REQUIRES) ) {
                alt18=1;
            }
            switch (alt18) {
                case 1 :
                    // RParser.g:439:10: requires_clause
                    {
                    pushFollow(FOLLOW_requires_clause_in_performance_module1224);
                    requires_clause50=requires_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, requires_clause50.getTree());

                    }
                    break;

            }

            // RParser.g:440:9: ( performance_item_sequence )?
            int alt19=2;
            int LA19_0 = input.LA(1);

            if ( (LA19_0==CATEGORICAL||LA19_0==CONFIRM||LA19_0==CONSTRAINT||(LA19_0>=DEFINES && LA19_0<=DEFINITION)||LA19_0==FAMILY||LA19_0==IMPLICIT||LA19_0==INDUCTIVE||LA19_0==OPERATION||(LA19_0>=PERF_FINAL && LA19_0<=PERF_INIT)||(LA19_0>=TYPE && LA19_0<=TYPE_FAMILY)||LA19_0==VAR) ) {
                alt19=1;
            }
            switch (alt19) {
                case 1 :
                    // RParser.g:440:10: performance_item_sequence
                    {
                    pushFollow(FOLLOW_performance_item_sequence_in_performance_module1237);
                    performance_item_sequence51=performance_item_sequence();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, performance_item_sequence51.getTree());

                    }
                    break;

            }

            END52=(Token)match(input,END,FOLLOW_END_in_performance_module1249); if (state.failed) return retval;
            // RParser.g:441:14: (id2= ident )?
            int alt20=2;
            int LA20_0 = input.LA(1);

            if ( (LA20_0==IDENTIFIER) ) {
                alt20=1;
            }
            switch (alt20) {
                case 1 :
                    // RParser.g:441:15: id2= ident
                    {
                    pushFollow(FOLLOW_ident_in_performance_module1255);
                    id2=ident();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       matchModuleIdent(id2.tree, id1.tree); 
                    }

                    }
                    break;

            }

            SEMICOLON53=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_performance_module1270); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (ColsAST)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "performance_module"

    public static class performance_item_sequence_return extends ParserRuleReturnScope {
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "performance_item_sequence"
    // RParser.g:445:1: performance_item_sequence : ( performance_item )+ ;
    public final RParser.performance_item_sequence_return performance_item_sequence() throws RecognitionException {
        RParser.performance_item_sequence_return retval = new RParser.performance_item_sequence_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        RParser.performance_item_return performance_item54 = null;



        try {
            // RParser.g:446:5: ( ( performance_item )+ )
            // RParser.g:446:9: ( performance_item )+
            {
            root_0 = (ColsAST)adaptor.nil();

            // RParser.g:446:9: ( performance_item )+
            int cnt21=0;
            loop21:
            do {
                int alt21=2;
                int LA21_0 = input.LA(1);

                if ( (LA21_0==CATEGORICAL||LA21_0==CONFIRM||LA21_0==CONSTRAINT||(LA21_0>=DEFINES && LA21_0<=DEFINITION)||LA21_0==FAMILY||LA21_0==IMPLICIT||LA21_0==INDUCTIVE||LA21_0==OPERATION||(LA21_0>=PERF_FINAL && LA21_0<=PERF_INIT)||(LA21_0>=TYPE && LA21_0<=TYPE_FAMILY)||LA21_0==VAR) ) {
                    alt21=1;
                }


                switch (alt21) {
            	case 1 :
            	    // RParser.g:446:10: performance_item
            	    {
            	    pushFollow(FOLLOW_performance_item_in_performance_item_sequence1291);
            	    performance_item54=performance_item();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, performance_item54.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt21 >= 1 ) break loop21;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(21, input);
                        throw eee;
                }
                cnt21++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (ColsAST)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "performance_item_sequence"

    public static class performance_item_return extends ParserRuleReturnScope {
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "performance_item"
    // RParser.g:449:1: performance_item : ( confirm_math_type_declaration | concept_state_variable_declaration | constraint_clause | performance_module_init_declaration | performance_module_final_declaration | performance_type_declaration | performance_operation_declaration | definition_declaration | defines_declaration );
    public final RParser.performance_item_return performance_item() throws RecognitionException {
        RParser.performance_item_return retval = new RParser.performance_item_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        RParser.confirm_math_type_declaration_return confirm_math_type_declaration55 = null;

        RParser.concept_state_variable_declaration_return concept_state_variable_declaration56 = null;

        RParser.constraint_clause_return constraint_clause57 = null;

        RParser.performance_module_init_declaration_return performance_module_init_declaration58 = null;

        RParser.performance_module_final_declaration_return performance_module_final_declaration59 = null;

        RParser.performance_type_declaration_return performance_type_declaration60 = null;

        RParser.performance_operation_declaration_return performance_operation_declaration61 = null;

        RParser.definition_declaration_return definition_declaration62 = null;

        RParser.defines_declaration_return defines_declaration63 = null;



        try {
            // RParser.g:450:5: ( confirm_math_type_declaration | concept_state_variable_declaration | constraint_clause | performance_module_init_declaration | performance_module_final_declaration | performance_type_declaration | performance_operation_declaration | definition_declaration | defines_declaration )
            int alt22=9;
            alt22 = dfa22.predict(input);
            switch (alt22) {
                case 1 :
                    // RParser.g:451:5: confirm_math_type_declaration
                    {
                    root_0 = (ColsAST)adaptor.nil();

                    pushFollow(FOLLOW_confirm_math_type_declaration_in_performance_item1314);
                    confirm_math_type_declaration55=confirm_math_type_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, confirm_math_type_declaration55.getTree());

                    }
                    break;
                case 2 :
                    // RParser.g:452:9: concept_state_variable_declaration
                    {
                    root_0 = (ColsAST)adaptor.nil();

                    pushFollow(FOLLOW_concept_state_variable_declaration_in_performance_item1324);
                    concept_state_variable_declaration56=concept_state_variable_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, concept_state_variable_declaration56.getTree());

                    }
                    break;
                case 3 :
                    // RParser.g:453:9: constraint_clause
                    {
                    root_0 = (ColsAST)adaptor.nil();

                    pushFollow(FOLLOW_constraint_clause_in_performance_item1334);
                    constraint_clause57=constraint_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, constraint_clause57.getTree());

                    }
                    break;
                case 4 :
                    // RParser.g:454:9: performance_module_init_declaration
                    {
                    root_0 = (ColsAST)adaptor.nil();

                    pushFollow(FOLLOW_performance_module_init_declaration_in_performance_item1344);
                    performance_module_init_declaration58=performance_module_init_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, performance_module_init_declaration58.getTree());

                    }
                    break;
                case 5 :
                    // RParser.g:455:9: performance_module_final_declaration
                    {
                    root_0 = (ColsAST)adaptor.nil();

                    pushFollow(FOLLOW_performance_module_final_declaration_in_performance_item1354);
                    performance_module_final_declaration59=performance_module_final_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, performance_module_final_declaration59.getTree());

                    }
                    break;
                case 6 :
                    // RParser.g:456:9: performance_type_declaration
                    {
                    root_0 = (ColsAST)adaptor.nil();

                    pushFollow(FOLLOW_performance_type_declaration_in_performance_item1364);
                    performance_type_declaration60=performance_type_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, performance_type_declaration60.getTree());

                    }
                    break;
                case 7 :
                    // RParser.g:457:9: performance_operation_declaration
                    {
                    root_0 = (ColsAST)adaptor.nil();

                    pushFollow(FOLLOW_performance_operation_declaration_in_performance_item1374);
                    performance_operation_declaration61=performance_operation_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, performance_operation_declaration61.getTree());

                    }
                    break;
                case 8 :
                    // RParser.g:458:9: definition_declaration
                    {
                    root_0 = (ColsAST)adaptor.nil();

                    pushFollow(FOLLOW_definition_declaration_in_performance_item1384);
                    definition_declaration62=definition_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, definition_declaration62.getTree());

                    }
                    break;
                case 9 :
                    // RParser.g:459:9: defines_declaration
                    {
                    root_0 = (ColsAST)adaptor.nil();

                    pushFollow(FOLLOW_defines_declaration_in_performance_item1394);
                    defines_declaration63=defines_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, defines_declaration63.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (ColsAST)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "performance_item"

    public static class enhancement_module_return extends ParserRuleReturnScope {
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "enhancement_module"
    // RParser.g:466:1: enhancement_module : MODULE_ENHANCEMENT id1= ident ( module_formal_param_section )? FOR ( CONCEPT )? ident SEMICOLON ( uses_list )? ( requires_clause )? ( enhancement_item_sequence )? END (id2= ident )? SEMICOLON ;
    public final RParser.enhancement_module_return enhancement_module() throws RecognitionException {
        RParser.enhancement_module_return retval = new RParser.enhancement_module_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        Token MODULE_ENHANCEMENT64=null;
        Token FOR66=null;
        Token CONCEPT67=null;
        Token SEMICOLON69=null;
        Token END73=null;
        Token SEMICOLON74=null;
        RParser.ident_return id1 = null;

        RParser.ident_return id2 = null;

        RParser.module_formal_param_section_return module_formal_param_section65 = null;

        RParser.ident_return ident68 = null;

        RParser.uses_list_return uses_list70 = null;

        RParser.requires_clause_return requires_clause71 = null;

        RParser.enhancement_item_sequence_return enhancement_item_sequence72 = null;


        ColsAST MODULE_ENHANCEMENT64_tree=null;
        ColsAST FOR66_tree=null;
        ColsAST CONCEPT67_tree=null;
        ColsAST SEMICOLON69_tree=null;
        ColsAST END73_tree=null;
        ColsAST SEMICOLON74_tree=null;

        try {
            // RParser.g:467:5: ( MODULE_ENHANCEMENT id1= ident ( module_formal_param_section )? FOR ( CONCEPT )? ident SEMICOLON ( uses_list )? ( requires_clause )? ( enhancement_item_sequence )? END (id2= ident )? SEMICOLON )
            // RParser.g:467:9: MODULE_ENHANCEMENT id1= ident ( module_formal_param_section )? FOR ( CONCEPT )? ident SEMICOLON ( uses_list )? ( requires_clause )? ( enhancement_item_sequence )? END (id2= ident )? SEMICOLON
            {
            root_0 = (ColsAST)adaptor.nil();

            MODULE_ENHANCEMENT64=(Token)match(input,MODULE_ENHANCEMENT,FOLLOW_MODULE_ENHANCEMENT_in_enhancement_module1417); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            MODULE_ENHANCEMENT64_tree = (ColsAST)adaptor.create(MODULE_ENHANCEMENT64);
            root_0 = (ColsAST)adaptor.becomeRoot(MODULE_ENHANCEMENT64_tree, root_0);
            }
            pushFollow(FOLLOW_ident_in_enhancement_module1422);
            id1=ident();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, id1.getTree());
            if ( state.backtracking==0 ) {
               enhancementModule = true; 
            }
            // RParser.g:468:9: ( module_formal_param_section )?
            int alt23=2;
            int LA23_0 = input.LA(1);

            if ( (LA23_0==LPAREN) ) {
                alt23=1;
            }
            switch (alt23) {
                case 1 :
                    // RParser.g:468:10: module_formal_param_section
                    {
                    pushFollow(FOLLOW_module_formal_param_section_in_enhancement_module1435);
                    module_formal_param_section65=module_formal_param_section();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, module_formal_param_section65.getTree());

                    }
                    break;

            }

            FOR66=(Token)match(input,FOR,FOLLOW_FOR_in_enhancement_module1447); if (state.failed) return retval;
            // RParser.g:469:14: ( CONCEPT )?
            int alt24=2;
            int LA24_0 = input.LA(1);

            if ( (LA24_0==CONCEPT) ) {
                alt24=1;
            }
            switch (alt24) {
                case 1 :
                    // RParser.g:469:15: CONCEPT
                    {
                    CONCEPT67=(Token)match(input,CONCEPT,FOLLOW_CONCEPT_in_enhancement_module1451); if (state.failed) return retval;

                    }
                    break;

            }

            pushFollow(FOLLOW_ident_in_enhancement_module1456);
            ident68=ident();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, ident68.getTree());
            SEMICOLON69=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_enhancement_module1458); if (state.failed) return retval;
            // RParser.g:470:9: ( uses_list )?
            int alt25=2;
            int LA25_0 = input.LA(1);

            if ( (LA25_0==USES) ) {
                alt25=1;
            }
            switch (alt25) {
                case 1 :
                    // RParser.g:470:10: uses_list
                    {
                    pushFollow(FOLLOW_uses_list_in_enhancement_module1470);
                    uses_list70=uses_list();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, uses_list70.getTree());

                    }
                    break;

            }

            // RParser.g:471:9: ( requires_clause )?
            int alt26=2;
            int LA26_0 = input.LA(1);

            if ( (LA26_0==REQUIRES) ) {
                alt26=1;
            }
            switch (alt26) {
                case 1 :
                    // RParser.g:471:10: requires_clause
                    {
                    pushFollow(FOLLOW_requires_clause_in_enhancement_module1483);
                    requires_clause71=requires_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, requires_clause71.getTree());

                    }
                    break;

            }

            // RParser.g:472:9: ( enhancement_item_sequence )?
            int alt27=2;
            int LA27_0 = input.LA(1);

            if ( (LA27_0==CATEGORICAL||(LA27_0>=DEFINES && LA27_0<=DEFINITION)||LA27_0==FAMILY||LA27_0==IMPLICIT||LA27_0==INDUCTIVE||LA27_0==OPERATION||(LA27_0>=TYPE && LA27_0<=TYPE_FAMILY)||LA27_0==VAR) ) {
                alt27=1;
            }
            switch (alt27) {
                case 1 :
                    // RParser.g:472:10: enhancement_item_sequence
                    {
                    pushFollow(FOLLOW_enhancement_item_sequence_in_enhancement_module1496);
                    enhancement_item_sequence72=enhancement_item_sequence();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, enhancement_item_sequence72.getTree());

                    }
                    break;

            }

            END73=(Token)match(input,END,FOLLOW_END_in_enhancement_module1508); if (state.failed) return retval;
            // RParser.g:473:14: (id2= ident )?
            int alt28=2;
            int LA28_0 = input.LA(1);

            if ( (LA28_0==IDENTIFIER) ) {
                alt28=1;
            }
            switch (alt28) {
                case 1 :
                    // RParser.g:473:15: id2= ident
                    {
                    pushFollow(FOLLOW_ident_in_enhancement_module1514);
                    id2=ident();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       matchModuleIdent(id2.tree, id1.tree); 
                    }

                    }
                    break;

            }

            SEMICOLON74=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_enhancement_module1529); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (ColsAST)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "enhancement_module"

    public static class enhancement_item_sequence_return extends ParserRuleReturnScope {
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "enhancement_item_sequence"
    // RParser.g:477:1: enhancement_item_sequence : ( enhancement_item )+ ;
    public final RParser.enhancement_item_sequence_return enhancement_item_sequence() throws RecognitionException {
        RParser.enhancement_item_sequence_return retval = new RParser.enhancement_item_sequence_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        RParser.enhancement_item_return enhancement_item75 = null;



        try {
            // RParser.g:478:5: ( ( enhancement_item )+ )
            // RParser.g:478:9: ( enhancement_item )+
            {
            root_0 = (ColsAST)adaptor.nil();

            // RParser.g:478:9: ( enhancement_item )+
            int cnt29=0;
            loop29:
            do {
                int alt29=2;
                int LA29_0 = input.LA(1);

                if ( (LA29_0==CATEGORICAL||(LA29_0>=DEFINES && LA29_0<=DEFINITION)||LA29_0==FAMILY||LA29_0==IMPLICIT||LA29_0==INDUCTIVE||LA29_0==OPERATION||(LA29_0>=TYPE && LA29_0<=TYPE_FAMILY)||LA29_0==VAR) ) {
                    alt29=1;
                }


                switch (alt29) {
            	case 1 :
            	    // RParser.g:478:10: enhancement_item
            	    {
            	    pushFollow(FOLLOW_enhancement_item_in_enhancement_item_sequence1550);
            	    enhancement_item75=enhancement_item();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, enhancement_item75.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt29 >= 1 ) break loop29;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(29, input);
                        throw eee;
                }
                cnt29++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (ColsAST)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "enhancement_item_sequence"

    public static class enhancement_item_return extends ParserRuleReturnScope {
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "enhancement_item"
    // RParser.g:481:1: enhancement_item : ( concept_state_variable_declaration | type_declaration | operation_declaration | definition_declaration | defines_declaration );
    public final RParser.enhancement_item_return enhancement_item() throws RecognitionException {
        RParser.enhancement_item_return retval = new RParser.enhancement_item_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        RParser.concept_state_variable_declaration_return concept_state_variable_declaration76 = null;

        RParser.type_declaration_return type_declaration77 = null;

        RParser.operation_declaration_return operation_declaration78 = null;

        RParser.definition_declaration_return definition_declaration79 = null;

        RParser.defines_declaration_return defines_declaration80 = null;



        try {
            // RParser.g:482:5: ( concept_state_variable_declaration | type_declaration | operation_declaration | definition_declaration | defines_declaration )
            int alt30=5;
            switch ( input.LA(1) ) {
            case VAR:
                {
                alt30=1;
                }
                break;
            case FAMILY:
            case TYPE:
            case TYPE_FAMILY:
                {
                alt30=2;
                }
                break;
            case OPERATION:
                {
                alt30=3;
                }
                break;
            case CATEGORICAL:
            case DEFINITION:
            case IMPLICIT:
            case INDUCTIVE:
                {
                alt30=4;
                }
                break;
            case DEFINES:
                {
                alt30=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 30, 0, input);

                throw nvae;
            }

            switch (alt30) {
                case 1 :
                    // RParser.g:482:9: concept_state_variable_declaration
                    {
                    root_0 = (ColsAST)adaptor.nil();

                    pushFollow(FOLLOW_concept_state_variable_declaration_in_enhancement_item1571);
                    concept_state_variable_declaration76=concept_state_variable_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, concept_state_variable_declaration76.getTree());

                    }
                    break;
                case 2 :
                    // RParser.g:483:9: type_declaration
                    {
                    root_0 = (ColsAST)adaptor.nil();

                    pushFollow(FOLLOW_type_declaration_in_enhancement_item1581);
                    type_declaration77=type_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_declaration77.getTree());

                    }
                    break;
                case 3 :
                    // RParser.g:484:9: operation_declaration
                    {
                    root_0 = (ColsAST)adaptor.nil();

                    pushFollow(FOLLOW_operation_declaration_in_enhancement_item1591);
                    operation_declaration78=operation_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, operation_declaration78.getTree());

                    }
                    break;
                case 4 :
                    // RParser.g:485:9: definition_declaration
                    {
                    root_0 = (ColsAST)adaptor.nil();

                    pushFollow(FOLLOW_definition_declaration_in_enhancement_item1601);
                    definition_declaration79=definition_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, definition_declaration79.getTree());

                    }
                    break;
                case 5 :
                    // RParser.g:486:9: defines_declaration
                    {
                    root_0 = (ColsAST)adaptor.nil();

                    pushFollow(FOLLOW_defines_declaration_in_enhancement_item1611);
                    defines_declaration80=defines_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, defines_declaration80.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (ColsAST)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "enhancement_item"

    public static class realization_body_module_return extends ParserRuleReturnScope {
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "realization_body_module"
    // RParser.g:493:1: realization_body_module : MODULE_REALIZATION id1= ident ( WITH_PROFILE ident )? ( module_formal_param_section )? FOR ( ( ident OF )=> body_enhancement_section | body_concept_section ) SEMICOLON ( uses_list )? ( requires_clause )? ( body_item_sequence )? END (id2= ident )? SEMICOLON ;
    public final RParser.realization_body_module_return realization_body_module() throws RecognitionException {
        RParser.realization_body_module_return retval = new RParser.realization_body_module_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        Token MODULE_REALIZATION81=null;
        Token WITH_PROFILE82=null;
        Token FOR85=null;
        Token SEMICOLON88=null;
        Token END92=null;
        Token SEMICOLON93=null;
        RParser.ident_return id1 = null;

        RParser.ident_return id2 = null;

        RParser.ident_return ident83 = null;

        RParser.module_formal_param_section_return module_formal_param_section84 = null;

        RParser.body_enhancement_section_return body_enhancement_section86 = null;

        RParser.body_concept_section_return body_concept_section87 = null;

        RParser.uses_list_return uses_list89 = null;

        RParser.requires_clause_return requires_clause90 = null;

        RParser.body_item_sequence_return body_item_sequence91 = null;


        ColsAST MODULE_REALIZATION81_tree=null;
        ColsAST WITH_PROFILE82_tree=null;
        ColsAST FOR85_tree=null;
        ColsAST SEMICOLON88_tree=null;
        ColsAST END92_tree=null;
        ColsAST SEMICOLON93_tree=null;

        try {
            // RParser.g:494:5: ( MODULE_REALIZATION id1= ident ( WITH_PROFILE ident )? ( module_formal_param_section )? FOR ( ( ident OF )=> body_enhancement_section | body_concept_section ) SEMICOLON ( uses_list )? ( requires_clause )? ( body_item_sequence )? END (id2= ident )? SEMICOLON )
            // RParser.g:494:9: MODULE_REALIZATION id1= ident ( WITH_PROFILE ident )? ( module_formal_param_section )? FOR ( ( ident OF )=> body_enhancement_section | body_concept_section ) SEMICOLON ( uses_list )? ( requires_clause )? ( body_item_sequence )? END (id2= ident )? SEMICOLON
            {
            root_0 = (ColsAST)adaptor.nil();

            MODULE_REALIZATION81=(Token)match(input,MODULE_REALIZATION,FOLLOW_MODULE_REALIZATION_in_realization_body_module1634); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            MODULE_REALIZATION81_tree = (ColsAST)adaptor.create(MODULE_REALIZATION81);
            root_0 = (ColsAST)adaptor.becomeRoot(MODULE_REALIZATION81_tree, root_0);
            }
            pushFollow(FOLLOW_ident_in_realization_body_module1639);
            id1=ident();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, id1.getTree());
            if ( state.backtracking==0 ) {
               bodyModule = true; 
            }
            // RParser.g:495:9: ( WITH_PROFILE ident )?
            int alt31=2;
            int LA31_0 = input.LA(1);

            if ( (LA31_0==WITH_PROFILE) ) {
                alt31=1;
            }
            switch (alt31) {
                case 1 :
                    // RParser.g:495:10: WITH_PROFILE ident
                    {
                    WITH_PROFILE82=(Token)match(input,WITH_PROFILE,FOLLOW_WITH_PROFILE_in_realization_body_module1652); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    WITH_PROFILE82_tree = (ColsAST)adaptor.create(WITH_PROFILE82);
                    adaptor.addChild(root_0, WITH_PROFILE82_tree);
                    }
                    pushFollow(FOLLOW_ident_in_realization_body_module1654);
                    ident83=ident();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, ident83.getTree());

                    }
                    break;

            }

            // RParser.g:495:31: ( module_formal_param_section )?
            int alt32=2;
            int LA32_0 = input.LA(1);

            if ( (LA32_0==LPAREN) ) {
                alt32=1;
            }
            switch (alt32) {
                case 1 :
                    // RParser.g:495:32: module_formal_param_section
                    {
                    pushFollow(FOLLOW_module_formal_param_section_in_realization_body_module1659);
                    module_formal_param_section84=module_formal_param_section();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, module_formal_param_section84.getTree());

                    }
                    break;

            }

            FOR85=(Token)match(input,FOR,FOLLOW_FOR_in_realization_body_module1663); if (state.failed) return retval;
            // RParser.g:496:9: ( ( ident OF )=> body_enhancement_section | body_concept_section )
            int alt33=2;
            int LA33_0 = input.LA(1);

            if ( (LA33_0==IDENTIFIER) ) {
                int LA33_1 = input.LA(2);

                if ( (synpred1_RParser()) ) {
                    alt33=1;
                }
                else if ( (true) ) {
                    alt33=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 33, 1, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 33, 0, input);

                throw nvae;
            }
            switch (alt33) {
                case 1 :
                    // RParser.g:496:13: ( ident OF )=> body_enhancement_section
                    {
                    pushFollow(FOLLOW_body_enhancement_section_in_realization_body_module1685);
                    body_enhancement_section86=body_enhancement_section();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, body_enhancement_section86.getTree());

                    }
                    break;
                case 2 :
                    // RParser.g:497:13: body_concept_section
                    {
                    pushFollow(FOLLOW_body_concept_section_in_realization_body_module1699);
                    body_concept_section87=body_concept_section();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, body_concept_section87.getTree());

                    }
                    break;

            }

            SEMICOLON88=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_realization_body_module1711); if (state.failed) return retval;
            // RParser.g:499:9: ( uses_list )?
            int alt34=2;
            alt34 = dfa34.predict(input);
            switch (alt34) {
                case 1 :
                    // RParser.g:499:10: uses_list
                    {
                    pushFollow(FOLLOW_uses_list_in_realization_body_module1723);
                    uses_list89=uses_list();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, uses_list89.getTree());

                    }
                    break;

            }

            // RParser.g:500:9: ( requires_clause )?
            int alt35=2;
            alt35 = dfa35.predict(input);
            switch (alt35) {
                case 1 :
                    // RParser.g:500:10: requires_clause
                    {
                    pushFollow(FOLLOW_requires_clause_in_realization_body_module1736);
                    requires_clause90=requires_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, requires_clause90.getTree());

                    }
                    break;

            }

            // RParser.g:501:9: ( body_item_sequence )?
            int alt36=2;
            alt36 = dfa36.predict(input);
            switch (alt36) {
                case 1 :
                    // RParser.g:501:10: body_item_sequence
                    {
                    pushFollow(FOLLOW_body_item_sequence_in_realization_body_module1749);
                    body_item_sequence91=body_item_sequence();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, body_item_sequence91.getTree());

                    }
                    break;

            }

            END92=(Token)match(input,END,FOLLOW_END_in_realization_body_module1761); if (state.failed) return retval;
            // RParser.g:502:14: (id2= ident )?
            int alt37=2;
            int LA37_0 = input.LA(1);

            if ( (LA37_0==IDENTIFIER) ) {
                alt37=1;
            }
            switch (alt37) {
                case 1 :
                    // RParser.g:502:15: id2= ident
                    {
                    pushFollow(FOLLOW_ident_in_realization_body_module1767);
                    id2=ident();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       matchModuleIdent(id2.tree, id1.tree); 
                    }

                    }
                    break;

            }

            SEMICOLON93=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_realization_body_module1782); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (ColsAST)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "realization_body_module"

    public static class body_concept_section_return extends ParserRuleReturnScope {
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "body_concept_section"
    // RParser.g:506:1: body_concept_section : ident ( ENHANCED BY ident )* -> ^( CONCEPT ident ( ident )* ) ;
    public final RParser.body_concept_section_return body_concept_section() throws RecognitionException {
        RParser.body_concept_section_return retval = new RParser.body_concept_section_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        Token ENHANCED95=null;
        Token BY96=null;
        RParser.ident_return ident94 = null;

        RParser.ident_return ident97 = null;


        ColsAST ENHANCED95_tree=null;
        ColsAST BY96_tree=null;
        RewriteRuleTokenStream stream_BY=new RewriteRuleTokenStream(adaptor,"token BY");
        RewriteRuleTokenStream stream_ENHANCED=new RewriteRuleTokenStream(adaptor,"token ENHANCED");
        RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
        try {
            // RParser.g:507:5: ( ident ( ENHANCED BY ident )* -> ^( CONCEPT ident ( ident )* ) )
            // RParser.g:507:9: ident ( ENHANCED BY ident )*
            {
            pushFollow(FOLLOW_ident_in_body_concept_section1802);
            ident94=ident();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_ident.add(ident94.getTree());
            // RParser.g:508:9: ( ENHANCED BY ident )*
            loop38:
            do {
                int alt38=2;
                int LA38_0 = input.LA(1);

                if ( (LA38_0==ENHANCED) ) {
                    alt38=1;
                }


                switch (alt38) {
            	case 1 :
            	    // RParser.g:508:10: ENHANCED BY ident
            	    {
            	    ENHANCED95=(Token)match(input,ENHANCED,FOLLOW_ENHANCED_in_body_concept_section1813); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_ENHANCED.add(ENHANCED95);

            	    BY96=(Token)match(input,BY,FOLLOW_BY_in_body_concept_section1815); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_BY.add(BY96);

            	    pushFollow(FOLLOW_ident_in_body_concept_section1817);
            	    ident97=ident();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_ident.add(ident97.getTree());

            	    }
            	    break;

            	default :
            	    break loop38;
                }
            } while (true);



            // AST REWRITE
            // elements: ident, ident
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (ColsAST)adaptor.nil();
            // 508:30: -> ^( CONCEPT ident ( ident )* )
            {
                // RParser.g:508:33: ^( CONCEPT ident ( ident )* )
                {
                ColsAST root_1 = (ColsAST)adaptor.nil();
                root_1 = (ColsAST)adaptor.becomeRoot((ColsAST)adaptor.create(CONCEPT, "CONCEPT"), root_1);

                adaptor.addChild(root_1, stream_ident.nextTree());
                // RParser.g:508:49: ( ident )*
                while ( stream_ident.hasNext() ) {
                    adaptor.addChild(root_1, stream_ident.nextTree());

                }
                stream_ident.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (ColsAST)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "body_concept_section"

    public static class body_enhancement_section_return extends ParserRuleReturnScope {
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "body_enhancement_section"
    // RParser.g:511:1: body_enhancement_section : ident OF ident ( added_enhancement_section )* -> ^( ENHANCEMENT ident ident ( added_enhancement_section )* ) ;
    public final RParser.body_enhancement_section_return body_enhancement_section() throws RecognitionException {
        RParser.body_enhancement_section_return retval = new RParser.body_enhancement_section_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        Token OF99=null;
        RParser.ident_return ident98 = null;

        RParser.ident_return ident100 = null;

        RParser.added_enhancement_section_return added_enhancement_section101 = null;


        ColsAST OF99_tree=null;
        RewriteRuleTokenStream stream_OF=new RewriteRuleTokenStream(adaptor,"token OF");
        RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
        RewriteRuleSubtreeStream stream_added_enhancement_section=new RewriteRuleSubtreeStream(adaptor,"rule added_enhancement_section");
        try {
            // RParser.g:512:5: ( ident OF ident ( added_enhancement_section )* -> ^( ENHANCEMENT ident ident ( added_enhancement_section )* ) )
            // RParser.g:512:9: ident OF ident ( added_enhancement_section )*
            {
            pushFollow(FOLLOW_ident_in_body_enhancement_section1851);
            ident98=ident();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_ident.add(ident98.getTree());
            OF99=(Token)match(input,OF,FOLLOW_OF_in_body_enhancement_section1861); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_OF.add(OF99);

            pushFollow(FOLLOW_ident_in_body_enhancement_section1863);
            ident100=ident();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_ident.add(ident100.getTree());
            // RParser.g:514:9: ( added_enhancement_section )*
            loop39:
            do {
                int alt39=2;
                int LA39_0 = input.LA(1);

                if ( (LA39_0==ENHANCED) ) {
                    alt39=1;
                }


                switch (alt39) {
            	case 1 :
            	    // RParser.g:514:10: added_enhancement_section
            	    {
            	    pushFollow(FOLLOW_added_enhancement_section_in_body_enhancement_section1874);
            	    added_enhancement_section101=added_enhancement_section();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_added_enhancement_section.add(added_enhancement_section101.getTree());

            	    }
            	    break;

            	default :
            	    break loop39;
                }
            } while (true);



            // AST REWRITE
            // elements: added_enhancement_section, ident, ident
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (ColsAST)adaptor.nil();
            // 514:38: -> ^( ENHANCEMENT ident ident ( added_enhancement_section )* )
            {
                // RParser.g:514:41: ^( ENHANCEMENT ident ident ( added_enhancement_section )* )
                {
                ColsAST root_1 = (ColsAST)adaptor.nil();
                root_1 = (ColsAST)adaptor.becomeRoot((ColsAST)adaptor.create(ENHANCEMENT, "ENHANCEMENT"), root_1);

                adaptor.addChild(root_1, stream_ident.nextTree());
                adaptor.addChild(root_1, stream_ident.nextTree());
                // RParser.g:514:67: ( added_enhancement_section )*
                while ( stream_added_enhancement_section.hasNext() ) {
                    adaptor.addChild(root_1, stream_added_enhancement_section.nextTree());

                }
                stream_added_enhancement_section.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (ColsAST)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "body_enhancement_section"

    public static class added_enhancement_section_return extends ParserRuleReturnScope {
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "added_enhancement_section"
    // RParser.g:517:1: added_enhancement_section : ( ( ENHANCED BY ident module_argument_section )=> ENHANCED BY ident module_argument_section REALIZED BY ident ( WITH_PROFILE ident )? ( module_argument_section )? | ENHANCED BY ident REALIZED BY ident ( WITH_PROFILE ident )? ( module_argument_section )? );
    public final RParser.added_enhancement_section_return added_enhancement_section() throws RecognitionException {
        RParser.added_enhancement_section_return retval = new RParser.added_enhancement_section_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        Token ENHANCED102=null;
        Token BY103=null;
        Token REALIZED106=null;
        Token BY107=null;
        Token WITH_PROFILE109=null;
        Token ENHANCED112=null;
        Token BY113=null;
        Token REALIZED115=null;
        Token BY116=null;
        Token WITH_PROFILE118=null;
        RParser.ident_return ident104 = null;

        RParser.module_argument_section_return module_argument_section105 = null;

        RParser.ident_return ident108 = null;

        RParser.ident_return ident110 = null;

        RParser.module_argument_section_return module_argument_section111 = null;

        RParser.ident_return ident114 = null;

        RParser.ident_return ident117 = null;

        RParser.ident_return ident119 = null;

        RParser.module_argument_section_return module_argument_section120 = null;


        ColsAST ENHANCED102_tree=null;
        ColsAST BY103_tree=null;
        ColsAST REALIZED106_tree=null;
        ColsAST BY107_tree=null;
        ColsAST WITH_PROFILE109_tree=null;
        ColsAST ENHANCED112_tree=null;
        ColsAST BY113_tree=null;
        ColsAST REALIZED115_tree=null;
        ColsAST BY116_tree=null;
        ColsAST WITH_PROFILE118_tree=null;

        try {
            // RParser.g:518:5: ( ( ENHANCED BY ident module_argument_section )=> ENHANCED BY ident module_argument_section REALIZED BY ident ( WITH_PROFILE ident )? ( module_argument_section )? | ENHANCED BY ident REALIZED BY ident ( WITH_PROFILE ident )? ( module_argument_section )? )
            int alt44=2;
            int LA44_0 = input.LA(1);

            if ( (LA44_0==ENHANCED) ) {
                int LA44_1 = input.LA(2);

                if ( (synpred2_RParser()) ) {
                    alt44=1;
                }
                else if ( (true) ) {
                    alt44=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 44, 1, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 44, 0, input);

                throw nvae;
            }
            switch (alt44) {
                case 1 :
                    // RParser.g:518:9: ( ENHANCED BY ident module_argument_section )=> ENHANCED BY ident module_argument_section REALIZED BY ident ( WITH_PROFILE ident )? ( module_argument_section )?
                    {
                    root_0 = (ColsAST)adaptor.nil();

                    ENHANCED102=(Token)match(input,ENHANCED,FOLLOW_ENHANCED_in_added_enhancement_section1939); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ENHANCED102_tree = (ColsAST)adaptor.create(ENHANCED102);
                    root_0 = (ColsAST)adaptor.becomeRoot(ENHANCED102_tree, root_0);
                    }
                    BY103=(Token)match(input,BY,FOLLOW_BY_in_added_enhancement_section1942); if (state.failed) return retval;
                    pushFollow(FOLLOW_ident_in_added_enhancement_section1945);
                    ident104=ident();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, ident104.getTree());
                    pushFollow(FOLLOW_module_argument_section_in_added_enhancement_section1955);
                    module_argument_section105=module_argument_section();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, module_argument_section105.getTree());
                    REALIZED106=(Token)match(input,REALIZED,FOLLOW_REALIZED_in_added_enhancement_section1965); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    REALIZED106_tree = (ColsAST)adaptor.create(REALIZED106);
                    adaptor.addChild(root_0, REALIZED106_tree);
                    }
                    BY107=(Token)match(input,BY,FOLLOW_BY_in_added_enhancement_section1967); if (state.failed) return retval;
                    pushFollow(FOLLOW_ident_in_added_enhancement_section1970);
                    ident108=ident();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, ident108.getTree());
                    // RParser.g:523:9: ( WITH_PROFILE ident )?
                    int alt40=2;
                    int LA40_0 = input.LA(1);

                    if ( (LA40_0==WITH_PROFILE) ) {
                        alt40=1;
                    }
                    switch (alt40) {
                        case 1 :
                            // RParser.g:523:10: WITH_PROFILE ident
                            {
                            WITH_PROFILE109=(Token)match(input,WITH_PROFILE,FOLLOW_WITH_PROFILE_in_added_enhancement_section1981); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            WITH_PROFILE109_tree = (ColsAST)adaptor.create(WITH_PROFILE109);
                            adaptor.addChild(root_0, WITH_PROFILE109_tree);
                            }
                            pushFollow(FOLLOW_ident_in_added_enhancement_section1983);
                            ident110=ident();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, ident110.getTree());

                            }
                            break;

                    }

                    // RParser.g:523:31: ( module_argument_section )?
                    int alt41=2;
                    int LA41_0 = input.LA(1);

                    if ( (LA41_0==LPAREN) ) {
                        alt41=1;
                    }
                    switch (alt41) {
                        case 1 :
                            // RParser.g:523:31: module_argument_section
                            {
                            pushFollow(FOLLOW_module_argument_section_in_added_enhancement_section1987);
                            module_argument_section111=module_argument_section();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, module_argument_section111.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // RParser.g:529:9: ENHANCED BY ident REALIZED BY ident ( WITH_PROFILE ident )? ( module_argument_section )?
                    {
                    root_0 = (ColsAST)adaptor.nil();

                    ENHANCED112=(Token)match(input,ENHANCED,FOLLOW_ENHANCED_in_added_enhancement_section2000); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ENHANCED112_tree = (ColsAST)adaptor.create(ENHANCED112);
                    root_0 = (ColsAST)adaptor.becomeRoot(ENHANCED112_tree, root_0);
                    }
                    BY113=(Token)match(input,BY,FOLLOW_BY_in_added_enhancement_section2003); if (state.failed) return retval;
                    pushFollow(FOLLOW_ident_in_added_enhancement_section2006);
                    ident114=ident();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, ident114.getTree());
                    REALIZED115=(Token)match(input,REALIZED,FOLLOW_REALIZED_in_added_enhancement_section2016); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    REALIZED115_tree = (ColsAST)adaptor.create(REALIZED115);
                    adaptor.addChild(root_0, REALIZED115_tree);
                    }
                    BY116=(Token)match(input,BY,FOLLOW_BY_in_added_enhancement_section2018); if (state.failed) return retval;
                    pushFollow(FOLLOW_ident_in_added_enhancement_section2021);
                    ident117=ident();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, ident117.getTree());
                    // RParser.g:531:9: ( WITH_PROFILE ident )?
                    int alt42=2;
                    int LA42_0 = input.LA(1);

                    if ( (LA42_0==WITH_PROFILE) ) {
                        alt42=1;
                    }
                    switch (alt42) {
                        case 1 :
                            // RParser.g:531:10: WITH_PROFILE ident
                            {
                            WITH_PROFILE118=(Token)match(input,WITH_PROFILE,FOLLOW_WITH_PROFILE_in_added_enhancement_section2032); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            WITH_PROFILE118_tree = (ColsAST)adaptor.create(WITH_PROFILE118);
                            adaptor.addChild(root_0, WITH_PROFILE118_tree);
                            }
                            pushFollow(FOLLOW_ident_in_added_enhancement_section2034);
                            ident119=ident();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, ident119.getTree());

                            }
                            break;

                    }

                    // RParser.g:531:31: ( module_argument_section )?
                    int alt43=2;
                    int LA43_0 = input.LA(1);

                    if ( (LA43_0==LPAREN) ) {
                        alt43=1;
                    }
                    switch (alt43) {
                        case 1 :
                            // RParser.g:531:31: module_argument_section
                            {
                            pushFollow(FOLLOW_module_argument_section_in_added_enhancement_section2038);
                            module_argument_section120=module_argument_section();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, module_argument_section120.getTree());

                            }
                            break;

                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (ColsAST)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "added_enhancement_section"

    public static class body_item_sequence_return extends ParserRuleReturnScope {
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "body_item_sequence"
    // RParser.g:537:1: body_item_sequence : ( body_item )+ ;
    public final RParser.body_item_sequence_return body_item_sequence() throws RecognitionException {
        RParser.body_item_sequence_return retval = new RParser.body_item_sequence_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        RParser.body_item_return body_item121 = null;



        try {
            // RParser.g:538:5: ( ( body_item )+ )
            // RParser.g:538:9: ( body_item )+
            {
            root_0 = (ColsAST)adaptor.nil();

            // RParser.g:538:9: ( body_item )+
            int cnt45=0;
            loop45:
            do {
                int alt45=2;
                alt45 = dfa45.predict(input);
                switch (alt45) {
            	case 1 :
            	    // RParser.g:538:10: body_item
            	    {
            	    pushFollow(FOLLOW_body_item_in_body_item_sequence2061);
            	    body_item121=body_item();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, body_item121.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt45 >= 1 ) break loop45;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(45, input);
                        throw eee;
                }
                cnt45++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (ColsAST)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "body_item_sequence"

    public static class body_item_return extends ParserRuleReturnScope {
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "body_item"
    // RParser.g:541:1: body_item : ( state_variable_declaration | correspondence_clause | convention_clause | module_body_init_declaration | module_body_final_declaration | type_representation_declaration | aux_operation_declaration | ( OPERATION ident operation_formal_param_section ( COLON program_type_expression )? SEMICOLON ( affects_clause )* ( requires_clause )? ( ensures_clause )? RECURSIVE )=> operation_recursive_procedure_declaration | operation_procedure_declaration | procedure_declaration | recursive_procedure_declaration | definition_declaration | facility_declaration );
    public final RParser.body_item_return body_item() throws RecognitionException {
        RParser.body_item_return retval = new RParser.body_item_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        RParser.state_variable_declaration_return state_variable_declaration122 = null;

        RParser.correspondence_clause_return correspondence_clause123 = null;

        RParser.convention_clause_return convention_clause124 = null;

        RParser.module_body_init_declaration_return module_body_init_declaration125 = null;

        RParser.module_body_final_declaration_return module_body_final_declaration126 = null;

        RParser.type_representation_declaration_return type_representation_declaration127 = null;

        RParser.aux_operation_declaration_return aux_operation_declaration128 = null;

        RParser.operation_recursive_procedure_declaration_return operation_recursive_procedure_declaration129 = null;

        RParser.operation_procedure_declaration_return operation_procedure_declaration130 = null;

        RParser.procedure_declaration_return procedure_declaration131 = null;

        RParser.recursive_procedure_declaration_return recursive_procedure_declaration132 = null;

        RParser.definition_declaration_return definition_declaration133 = null;

        RParser.facility_declaration_return facility_declaration134 = null;



        try {
            // RParser.g:542:5: ( state_variable_declaration | correspondence_clause | convention_clause | module_body_init_declaration | module_body_final_declaration | type_representation_declaration | aux_operation_declaration | ( OPERATION ident operation_formal_param_section ( COLON program_type_expression )? SEMICOLON ( affects_clause )* ( requires_clause )? ( ensures_clause )? RECURSIVE )=> operation_recursive_procedure_declaration | operation_procedure_declaration | procedure_declaration | recursive_procedure_declaration | definition_declaration | facility_declaration )
            int alt46=13;
            alt46 = dfa46.predict(input);
            switch (alt46) {
                case 1 :
                    // RParser.g:542:9: state_variable_declaration
                    {
                    root_0 = (ColsAST)adaptor.nil();

                    pushFollow(FOLLOW_state_variable_declaration_in_body_item2082);
                    state_variable_declaration122=state_variable_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, state_variable_declaration122.getTree());

                    }
                    break;
                case 2 :
                    // RParser.g:543:9: correspondence_clause
                    {
                    root_0 = (ColsAST)adaptor.nil();

                    pushFollow(FOLLOW_correspondence_clause_in_body_item2092);
                    correspondence_clause123=correspondence_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, correspondence_clause123.getTree());

                    }
                    break;
                case 3 :
                    // RParser.g:544:9: convention_clause
                    {
                    root_0 = (ColsAST)adaptor.nil();

                    pushFollow(FOLLOW_convention_clause_in_body_item2102);
                    convention_clause124=convention_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, convention_clause124.getTree());

                    }
                    break;
                case 4 :
                    // RParser.g:545:9: module_body_init_declaration
                    {
                    root_0 = (ColsAST)adaptor.nil();

                    pushFollow(FOLLOW_module_body_init_declaration_in_body_item2112);
                    module_body_init_declaration125=module_body_init_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, module_body_init_declaration125.getTree());

                    }
                    break;
                case 5 :
                    // RParser.g:546:9: module_body_final_declaration
                    {
                    root_0 = (ColsAST)adaptor.nil();

                    pushFollow(FOLLOW_module_body_final_declaration_in_body_item2122);
                    module_body_final_declaration126=module_body_final_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, module_body_final_declaration126.getTree());

                    }
                    break;
                case 6 :
                    // RParser.g:547:9: type_representation_declaration
                    {
                    root_0 = (ColsAST)adaptor.nil();

                    pushFollow(FOLLOW_type_representation_declaration_in_body_item2132);
                    type_representation_declaration127=type_representation_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_representation_declaration127.getTree());

                    }
                    break;
                case 7 :
                    // RParser.g:548:9: aux_operation_declaration
                    {
                    root_0 = (ColsAST)adaptor.nil();

                    pushFollow(FOLLOW_aux_operation_declaration_in_body_item2142);
                    aux_operation_declaration128=aux_operation_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, aux_operation_declaration128.getTree());

                    }
                    break;
                case 8 :
                    // RParser.g:549:9: ( OPERATION ident operation_formal_param_section ( COLON program_type_expression )? SEMICOLON ( affects_clause )* ( requires_clause )? ( ensures_clause )? RECURSIVE )=> operation_recursive_procedure_declaration
                    {
                    root_0 = (ColsAST)adaptor.nil();

                    pushFollow(FOLLOW_operation_recursive_procedure_declaration_in_body_item2230);
                    operation_recursive_procedure_declaration129=operation_recursive_procedure_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, operation_recursive_procedure_declaration129.getTree());

                    }
                    break;
                case 9 :
                    // RParser.g:556:9: operation_procedure_declaration
                    {
                    root_0 = (ColsAST)adaptor.nil();

                    pushFollow(FOLLOW_operation_procedure_declaration_in_body_item2240);
                    operation_procedure_declaration130=operation_procedure_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, operation_procedure_declaration130.getTree());

                    }
                    break;
                case 10 :
                    // RParser.g:558:9: procedure_declaration
                    {
                    root_0 = (ColsAST)adaptor.nil();

                    pushFollow(FOLLOW_procedure_declaration_in_body_item2251);
                    procedure_declaration131=procedure_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, procedure_declaration131.getTree());

                    }
                    break;
                case 11 :
                    // RParser.g:559:9: recursive_procedure_declaration
                    {
                    root_0 = (ColsAST)adaptor.nil();

                    pushFollow(FOLLOW_recursive_procedure_declaration_in_body_item2261);
                    recursive_procedure_declaration132=recursive_procedure_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, recursive_procedure_declaration132.getTree());

                    }
                    break;
                case 12 :
                    // RParser.g:560:9: definition_declaration
                    {
                    root_0 = (ColsAST)adaptor.nil();

                    pushFollow(FOLLOW_definition_declaration_in_body_item2271);
                    definition_declaration133=definition_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, definition_declaration133.getTree());

                    }
                    break;
                case 13 :
                    // RParser.g:561:9: facility_declaration
                    {
                    root_0 = (ColsAST)adaptor.nil();

                    pushFollow(FOLLOW_facility_declaration_in_body_item2285);
                    facility_declaration134=facility_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, facility_declaration134.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (ColsAST)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "body_item"

    public static class facility_module_return extends ParserRuleReturnScope {
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "facility_module"
    // RParser.g:568:1: facility_module : FACILITY id1= ident ( short_facility_section ( uses_list )? | SEMICOLON ( uses_list )? ( facility_item_sequence )? END (id2= ident )? SEMICOLON ) ;
    public final RParser.facility_module_return facility_module() throws RecognitionException {
        RParser.facility_module_return retval = new RParser.facility_module_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        Token FACILITY135=null;
        Token SEMICOLON138=null;
        Token END141=null;
        Token SEMICOLON142=null;
        RParser.ident_return id1 = null;

        RParser.ident_return id2 = null;

        RParser.short_facility_section_return short_facility_section136 = null;

        RParser.uses_list_return uses_list137 = null;

        RParser.uses_list_return uses_list139 = null;

        RParser.facility_item_sequence_return facility_item_sequence140 = null;


        ColsAST FACILITY135_tree=null;
        ColsAST SEMICOLON138_tree=null;
        ColsAST END141_tree=null;
        ColsAST SEMICOLON142_tree=null;

        try {
            // RParser.g:569:5: ( FACILITY id1= ident ( short_facility_section ( uses_list )? | SEMICOLON ( uses_list )? ( facility_item_sequence )? END (id2= ident )? SEMICOLON ) )
            // RParser.g:569:9: FACILITY id1= ident ( short_facility_section ( uses_list )? | SEMICOLON ( uses_list )? ( facility_item_sequence )? END (id2= ident )? SEMICOLON )
            {
            root_0 = (ColsAST)adaptor.nil();

            FACILITY135=(Token)match(input,FACILITY,FOLLOW_FACILITY_in_facility_module2308); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            FACILITY135_tree = (ColsAST)adaptor.create(FACILITY135);
            root_0 = (ColsAST)adaptor.becomeRoot(FACILITY135_tree, root_0);
            }
            pushFollow(FOLLOW_ident_in_facility_module2313);
            id1=ident();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, id1.getTree());
            // RParser.g:570:9: ( short_facility_section ( uses_list )? | SEMICOLON ( uses_list )? ( facility_item_sequence )? END (id2= ident )? SEMICOLON )
            int alt51=2;
            int LA51_0 = input.LA(1);

            if ( (LA51_0==IS) ) {
                alt51=1;
            }
            else if ( (LA51_0==SEMICOLON) ) {
                alt51=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 51, 0, input);

                throw nvae;
            }
            switch (alt51) {
                case 1 :
                    // RParser.g:570:13: short_facility_section ( uses_list )?
                    {
                    pushFollow(FOLLOW_short_facility_section_in_facility_module2328);
                    short_facility_section136=short_facility_section();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, short_facility_section136.getTree());
                    // RParser.g:570:36: ( uses_list )?
                    int alt47=2;
                    int LA47_0 = input.LA(1);

                    if ( (LA47_0==USES) ) {
                        alt47=1;
                    }
                    switch (alt47) {
                        case 1 :
                            // RParser.g:570:37: uses_list
                            {
                            pushFollow(FOLLOW_uses_list_in_facility_module2331);
                            uses_list137=uses_list();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, uses_list137.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // RParser.g:571:13: SEMICOLON ( uses_list )? ( facility_item_sequence )? END (id2= ident )? SEMICOLON
                    {
                    SEMICOLON138=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_facility_module2347); if (state.failed) return retval;
                    // RParser.g:571:24: ( uses_list )?
                    int alt48=2;
                    alt48 = dfa48.predict(input);
                    switch (alt48) {
                        case 1 :
                            // RParser.g:571:25: uses_list
                            {
                            pushFollow(FOLLOW_uses_list_in_facility_module2351);
                            uses_list139=uses_list();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, uses_list139.getTree());

                            }
                            break;

                    }

                    // RParser.g:572:13: ( facility_item_sequence )?
                    int alt49=2;
                    alt49 = dfa49.predict(input);
                    switch (alt49) {
                        case 1 :
                            // RParser.g:572:14: facility_item_sequence
                            {
                            pushFollow(FOLLOW_facility_item_sequence_in_facility_module2368);
                            facility_item_sequence140=facility_item_sequence();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, facility_item_sequence140.getTree());

                            }
                            break;

                    }

                    END141=(Token)match(input,END,FOLLOW_END_in_facility_module2384); if (state.failed) return retval;
                    // RParser.g:573:18: (id2= ident )?
                    int alt50=2;
                    int LA50_0 = input.LA(1);

                    if ( (LA50_0==IDENTIFIER) ) {
                        alt50=1;
                    }
                    switch (alt50) {
                        case 1 :
                            // RParser.g:573:19: id2= ident
                            {
                            pushFollow(FOLLOW_ident_in_facility_module2390);
                            id2=ident();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               matchModuleIdent(id2.tree, id1.tree); 
                            }

                            }
                            break;

                    }

                    SEMICOLON142=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_facility_module2409); if (state.failed) return retval;

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (ColsAST)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "facility_module"

    public static class short_facility_section_return extends ParserRuleReturnScope {
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "short_facility_section"
    // RParser.g:578:1: short_facility_section : IS ident ( module_argument_section )? ( facility_enhancement )* REALIZED BY ident ( module_argument_section )? ( facility_body_enhancement )* SEMICOLON ;
    public final RParser.short_facility_section_return short_facility_section() throws RecognitionException {
        RParser.short_facility_section_return retval = new RParser.short_facility_section_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        Token IS143=null;
        Token REALIZED147=null;
        Token BY148=null;
        Token SEMICOLON152=null;
        RParser.ident_return ident144 = null;

        RParser.module_argument_section_return module_argument_section145 = null;

        RParser.facility_enhancement_return facility_enhancement146 = null;

        RParser.ident_return ident149 = null;

        RParser.module_argument_section_return module_argument_section150 = null;

        RParser.facility_body_enhancement_return facility_body_enhancement151 = null;


        ColsAST IS143_tree=null;
        ColsAST REALIZED147_tree=null;
        ColsAST BY148_tree=null;
        ColsAST SEMICOLON152_tree=null;

        try {
            // RParser.g:579:5: ( IS ident ( module_argument_section )? ( facility_enhancement )* REALIZED BY ident ( module_argument_section )? ( facility_body_enhancement )* SEMICOLON )
            // RParser.g:579:9: IS ident ( module_argument_section )? ( facility_enhancement )* REALIZED BY ident ( module_argument_section )? ( facility_body_enhancement )* SEMICOLON
            {
            root_0 = (ColsAST)adaptor.nil();

            IS143=(Token)match(input,IS,FOLLOW_IS_in_short_facility_section2439); if (state.failed) return retval;
            pushFollow(FOLLOW_ident_in_short_facility_section2442);
            ident144=ident();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, ident144.getTree());
            // RParser.g:580:9: ( module_argument_section )?
            int alt52=2;
            int LA52_0 = input.LA(1);

            if ( (LA52_0==LPAREN) ) {
                alt52=1;
            }
            switch (alt52) {
                case 1 :
                    // RParser.g:580:9: module_argument_section
                    {
                    pushFollow(FOLLOW_module_argument_section_in_short_facility_section2452);
                    module_argument_section145=module_argument_section();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, module_argument_section145.getTree());

                    }
                    break;

            }

            // RParser.g:581:9: ( facility_enhancement )*
            loop53:
            do {
                int alt53=2;
                int LA53_0 = input.LA(1);

                if ( (LA53_0==ENHANCED) ) {
                    alt53=1;
                }


                switch (alt53) {
            	case 1 :
            	    // RParser.g:581:9: facility_enhancement
            	    {
            	    pushFollow(FOLLOW_facility_enhancement_in_short_facility_section2463);
            	    facility_enhancement146=facility_enhancement();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, facility_enhancement146.getTree());

            	    }
            	    break;

            	default :
            	    break loop53;
                }
            } while (true);

            REALIZED147=(Token)match(input,REALIZED,FOLLOW_REALIZED_in_short_facility_section2474); if (state.failed) return retval;
            BY148=(Token)match(input,BY,FOLLOW_BY_in_short_facility_section2477); if (state.failed) return retval;
            pushFollow(FOLLOW_ident_in_short_facility_section2480);
            ident149=ident();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, ident149.getTree());
            // RParser.g:583:9: ( module_argument_section )?
            int alt54=2;
            int LA54_0 = input.LA(1);

            if ( (LA54_0==LPAREN) ) {
                alt54=1;
            }
            switch (alt54) {
                case 1 :
                    // RParser.g:583:9: module_argument_section
                    {
                    pushFollow(FOLLOW_module_argument_section_in_short_facility_section2490);
                    module_argument_section150=module_argument_section();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, module_argument_section150.getTree());

                    }
                    break;

            }

            // RParser.g:584:9: ( facility_body_enhancement )*
            loop55:
            do {
                int alt55=2;
                int LA55_0 = input.LA(1);

                if ( (LA55_0==ENHANCED) ) {
                    alt55=1;
                }


                switch (alt55) {
            	case 1 :
            	    // RParser.g:584:9: facility_body_enhancement
            	    {
            	    pushFollow(FOLLOW_facility_body_enhancement_in_short_facility_section2501);
            	    facility_body_enhancement151=facility_body_enhancement();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, facility_body_enhancement151.getTree());

            	    }
            	    break;

            	default :
            	    break loop55;
                }
            } while (true);

            SEMICOLON152=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_short_facility_section2512); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (ColsAST)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "short_facility_section"

    public static class facility_item_sequence_return extends ParserRuleReturnScope {
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "facility_item_sequence"
    // RParser.g:588:1: facility_item_sequence : ( facility_item )+ ;
    public final RParser.facility_item_sequence_return facility_item_sequence() throws RecognitionException {
        RParser.facility_item_sequence_return retval = new RParser.facility_item_sequence_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        RParser.facility_item_return facility_item153 = null;



        try {
            // RParser.g:589:5: ( ( facility_item )+ )
            // RParser.g:589:9: ( facility_item )+
            {
            root_0 = (ColsAST)adaptor.nil();

            // RParser.g:589:9: ( facility_item )+
            int cnt56=0;
            loop56:
            do {
                int alt56=2;
                alt56 = dfa56.predict(input);
                switch (alt56) {
            	case 1 :
            	    // RParser.g:589:10: facility_item
            	    {
            	    pushFollow(FOLLOW_facility_item_in_facility_item_sequence2533);
            	    facility_item153=facility_item();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, facility_item153.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt56 >= 1 ) break loop56;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(56, input);
                        throw eee;
                }
                cnt56++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (ColsAST)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "facility_item_sequence"

    public static class facility_item_return extends ParserRuleReturnScope {
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "facility_item"
    // RParser.g:592:1: facility_item : ( state_variable_declaration | module_facility_init_declaration | module_facility_final_declaration | facility_type_declaration | ( OPERATION ident operation_formal_param_section ( COLON program_type_expression )? SEMICOLON ( affects_clause )* ( requires_clause )? ( ensures_clause )? RECURSIVE )=> operation_recursive_procedure_declaration | operation_procedure_declaration | definition_declaration | facility_declaration );
    public final RParser.facility_item_return facility_item() throws RecognitionException {
        RParser.facility_item_return retval = new RParser.facility_item_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        RParser.state_variable_declaration_return state_variable_declaration154 = null;

        RParser.module_facility_init_declaration_return module_facility_init_declaration155 = null;

        RParser.module_facility_final_declaration_return module_facility_final_declaration156 = null;

        RParser.facility_type_declaration_return facility_type_declaration157 = null;

        RParser.operation_recursive_procedure_declaration_return operation_recursive_procedure_declaration158 = null;

        RParser.operation_procedure_declaration_return operation_procedure_declaration159 = null;

        RParser.definition_declaration_return definition_declaration160 = null;

        RParser.facility_declaration_return facility_declaration161 = null;



        try {
            // RParser.g:593:5: ( state_variable_declaration | module_facility_init_declaration | module_facility_final_declaration | facility_type_declaration | ( OPERATION ident operation_formal_param_section ( COLON program_type_expression )? SEMICOLON ( affects_clause )* ( requires_clause )? ( ensures_clause )? RECURSIVE )=> operation_recursive_procedure_declaration | operation_procedure_declaration | definition_declaration | facility_declaration )
            int alt57=8;
            alt57 = dfa57.predict(input);
            switch (alt57) {
                case 1 :
                    // RParser.g:593:9: state_variable_declaration
                    {
                    root_0 = (ColsAST)adaptor.nil();

                    pushFollow(FOLLOW_state_variable_declaration_in_facility_item2554);
                    state_variable_declaration154=state_variable_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, state_variable_declaration154.getTree());

                    }
                    break;
                case 2 :
                    // RParser.g:594:9: module_facility_init_declaration
                    {
                    root_0 = (ColsAST)adaptor.nil();

                    pushFollow(FOLLOW_module_facility_init_declaration_in_facility_item2564);
                    module_facility_init_declaration155=module_facility_init_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, module_facility_init_declaration155.getTree());

                    }
                    break;
                case 3 :
                    // RParser.g:595:9: module_facility_final_declaration
                    {
                    root_0 = (ColsAST)adaptor.nil();

                    pushFollow(FOLLOW_module_facility_final_declaration_in_facility_item2574);
                    module_facility_final_declaration156=module_facility_final_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, module_facility_final_declaration156.getTree());

                    }
                    break;
                case 4 :
                    // RParser.g:596:9: facility_type_declaration
                    {
                    root_0 = (ColsAST)adaptor.nil();

                    pushFollow(FOLLOW_facility_type_declaration_in_facility_item2584);
                    facility_type_declaration157=facility_type_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, facility_type_declaration157.getTree());

                    }
                    break;
                case 5 :
                    // RParser.g:597:9: ( OPERATION ident operation_formal_param_section ( COLON program_type_expression )? SEMICOLON ( affects_clause )* ( requires_clause )? ( ensures_clause )? RECURSIVE )=> operation_recursive_procedure_declaration
                    {
                    root_0 = (ColsAST)adaptor.nil();

                    pushFollow(FOLLOW_operation_recursive_procedure_declaration_in_facility_item2672);
                    operation_recursive_procedure_declaration158=operation_recursive_procedure_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, operation_recursive_procedure_declaration158.getTree());

                    }
                    break;
                case 6 :
                    // RParser.g:604:9: operation_procedure_declaration
                    {
                    root_0 = (ColsAST)adaptor.nil();

                    pushFollow(FOLLOW_operation_procedure_declaration_in_facility_item2682);
                    operation_procedure_declaration159=operation_procedure_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, operation_procedure_declaration159.getTree());

                    }
                    break;
                case 7 :
                    // RParser.g:606:9: definition_declaration
                    {
                    root_0 = (ColsAST)adaptor.nil();

                    pushFollow(FOLLOW_definition_declaration_in_facility_item2697);
                    definition_declaration160=definition_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, definition_declaration160.getTree());

                    }
                    break;
                case 8 :
                    // RParser.g:607:9: facility_declaration
                    {
                    root_0 = (ColsAST)adaptor.nil();

                    pushFollow(FOLLOW_facility_declaration_in_facility_item2708);
                    facility_declaration161=facility_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, facility_declaration161.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (ColsAST)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "facility_item"

    public static class module_formal_param_section_return extends ParserRuleReturnScope {
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "module_formal_param_section"
    // RParser.g:618:1: module_formal_param_section : LPAREN module_parameter ( SEMICOLON module_parameter )* RPAREN -> ^( PARAMS module_parameter ( module_parameter )* ) ;
    public final RParser.module_formal_param_section_return module_formal_param_section() throws RecognitionException {
        RParser.module_formal_param_section_return retval = new RParser.module_formal_param_section_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        Token LPAREN162=null;
        Token SEMICOLON164=null;
        Token RPAREN166=null;
        RParser.module_parameter_return module_parameter163 = null;

        RParser.module_parameter_return module_parameter165 = null;


        ColsAST LPAREN162_tree=null;
        ColsAST SEMICOLON164_tree=null;
        ColsAST RPAREN166_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_SEMICOLON=new RewriteRuleTokenStream(adaptor,"token SEMICOLON");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_module_parameter=new RewriteRuleSubtreeStream(adaptor,"rule module_parameter");
        try {
            // RParser.g:619:5: ( LPAREN module_parameter ( SEMICOLON module_parameter )* RPAREN -> ^( PARAMS module_parameter ( module_parameter )* ) )
            // RParser.g:619:9: LPAREN module_parameter ( SEMICOLON module_parameter )* RPAREN
            {
            LPAREN162=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_module_formal_param_section2735); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN162);

            pushFollow(FOLLOW_module_parameter_in_module_formal_param_section2737);
            module_parameter163=module_parameter();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_module_parameter.add(module_parameter163.getTree());
            // RParser.g:620:9: ( SEMICOLON module_parameter )*
            loop58:
            do {
                int alt58=2;
                int LA58_0 = input.LA(1);

                if ( (LA58_0==SEMICOLON) ) {
                    alt58=1;
                }


                switch (alt58) {
            	case 1 :
            	    // RParser.g:620:10: SEMICOLON module_parameter
            	    {
            	    SEMICOLON164=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_module_formal_param_section2748); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_SEMICOLON.add(SEMICOLON164);

            	    pushFollow(FOLLOW_module_parameter_in_module_formal_param_section2750);
            	    module_parameter165=module_parameter();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_module_parameter.add(module_parameter165.getTree());

            	    }
            	    break;

            	default :
            	    break loop58;
                }
            } while (true);

            RPAREN166=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_module_formal_param_section2754); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN166);



            // AST REWRITE
            // elements: module_parameter, module_parameter
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (ColsAST)adaptor.nil();
            // 621:9: -> ^( PARAMS module_parameter ( module_parameter )* )
            {
                // RParser.g:621:12: ^( PARAMS module_parameter ( module_parameter )* )
                {
                ColsAST root_1 = (ColsAST)adaptor.nil();
                root_1 = (ColsAST)adaptor.becomeRoot((ColsAST)adaptor.create(PARAMS, "PARAMS"), root_1);

                adaptor.addChild(root_1, stream_module_parameter.nextTree());
                // RParser.g:621:38: ( module_parameter )*
                while ( stream_module_parameter.hasNext() ) {
                    adaptor.addChild(root_1, stream_module_parameter.nextTree());

                }
                stream_module_parameter.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (ColsAST)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "module_formal_param_section"

    public static class module_parameter_return extends ParserRuleReturnScope {
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "module_parameter"
    // RParser.g:624:1: module_parameter : ( definition_parameter | {...}? constant_parameter | {...}? concept_type_parameter | {...}? operation_parameter | {...}? concept_realization_parameter );
    public final RParser.module_parameter_return module_parameter() throws RecognitionException {
        RParser.module_parameter_return retval = new RParser.module_parameter_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        RParser.definition_parameter_return definition_parameter167 = null;

        RParser.constant_parameter_return constant_parameter168 = null;

        RParser.concept_type_parameter_return concept_type_parameter169 = null;

        RParser.operation_parameter_return operation_parameter170 = null;

        RParser.concept_realization_parameter_return concept_realization_parameter171 = null;



        try {
            // RParser.g:625:5: ( definition_parameter | {...}? constant_parameter | {...}? concept_type_parameter | {...}? operation_parameter | {...}? concept_realization_parameter )
            int alt59=5;
            switch ( input.LA(1) ) {
            case DEFINITION:
                {
                alt59=1;
                }
                break;
            case EVALUATES:
                {
                alt59=2;
                }
                break;
            case TYPE:
                {
                alt59=3;
                }
                break;
            case OPERATION:
                {
                alt59=4;
                }
                break;
            case REALIZATION:
                {
                alt59=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 59, 0, input);

                throw nvae;
            }

            switch (alt59) {
                case 1 :
                    // RParser.g:625:9: definition_parameter
                    {
                    root_0 = (ColsAST)adaptor.nil();

                    pushFollow(FOLLOW_definition_parameter_in_module_parameter2794);
                    definition_parameter167=definition_parameter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, definition_parameter167.getTree());

                    }
                    break;
                case 2 :
                    // RParser.g:626:9: {...}? constant_parameter
                    {
                    root_0 = (ColsAST)adaptor.nil();

                    if ( !(( conceptModule || enhancementModule || bodyModule )) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "module_parameter", " conceptModule || enhancementModule || bodyModule ");
                    }
                    pushFollow(FOLLOW_constant_parameter_in_module_parameter2814);
                    constant_parameter168=constant_parameter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, constant_parameter168.getTree());

                    }
                    break;
                case 3 :
                    // RParser.g:628:9: {...}? concept_type_parameter
                    {
                    root_0 = (ColsAST)adaptor.nil();

                    if ( !(( conceptModule || enhancementModule )) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "module_parameter", " conceptModule || enhancementModule ");
                    }
                    pushFollow(FOLLOW_concept_type_parameter_in_module_parameter2826);
                    concept_type_parameter169=concept_type_parameter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, concept_type_parameter169.getTree());

                    }
                    break;
                case 4 :
                    // RParser.g:629:9: {...}? operation_parameter
                    {
                    root_0 = (ColsAST)adaptor.nil();

                    if ( !(( bodyModule )) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "module_parameter", " bodyModule ");
                    }
                    pushFollow(FOLLOW_operation_parameter_in_module_parameter2838);
                    operation_parameter170=operation_parameter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, operation_parameter170.getTree());

                    }
                    break;
                case 5 :
                    // RParser.g:630:9: {...}? concept_realization_parameter
                    {
                    root_0 = (ColsAST)adaptor.nil();

                    if ( !(( bodyModule )) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "module_parameter", " bodyModule ");
                    }
                    pushFollow(FOLLOW_concept_realization_parameter_in_module_parameter2850);
                    concept_realization_parameter171=concept_realization_parameter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, concept_realization_parameter171.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (ColsAST)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "module_parameter"

    public static class definition_parameter_return extends ParserRuleReturnScope {
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "definition_parameter"
    // RParser.g:633:1: definition_parameter : DEFINITION definition_signature ;
    public final RParser.definition_parameter_return definition_parameter() throws RecognitionException {
        RParser.definition_parameter_return retval = new RParser.definition_parameter_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        Token DEFINITION172=null;
        RParser.definition_signature_return definition_signature173 = null;


        ColsAST DEFINITION172_tree=null;

        try {
            // RParser.g:634:5: ( DEFINITION definition_signature )
            // RParser.g:634:9: DEFINITION definition_signature
            {
            root_0 = (ColsAST)adaptor.nil();

            DEFINITION172=(Token)match(input,DEFINITION,FOLLOW_DEFINITION_in_definition_parameter2869); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            DEFINITION172_tree = (ColsAST)adaptor.create(DEFINITION172);
            root_0 = (ColsAST)adaptor.becomeRoot(DEFINITION172_tree, root_0);
            }
            pushFollow(FOLLOW_definition_signature_in_definition_parameter2872);
            definition_signature173=definition_signature();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, definition_signature173.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (ColsAST)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "definition_parameter"

    public static class constant_parameter_return extends ParserRuleReturnScope {
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "constant_parameter"
    // RParser.g:637:1: constant_parameter : EVALUATES variable_declaration_group ;
    public final RParser.constant_parameter_return constant_parameter() throws RecognitionException {
        RParser.constant_parameter_return retval = new RParser.constant_parameter_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        Token EVALUATES174=null;
        RParser.variable_declaration_group_return variable_declaration_group175 = null;


        ColsAST EVALUATES174_tree=null;

        try {
            // RParser.g:638:5: ( EVALUATES variable_declaration_group )
            // RParser.g:638:9: EVALUATES variable_declaration_group
            {
            root_0 = (ColsAST)adaptor.nil();

            EVALUATES174=(Token)match(input,EVALUATES,FOLLOW_EVALUATES_in_constant_parameter2891); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            EVALUATES174_tree = (ColsAST)adaptor.create(EVALUATES174);
            root_0 = (ColsAST)adaptor.becomeRoot(EVALUATES174_tree, root_0);
            }
            pushFollow(FOLLOW_variable_declaration_group_in_constant_parameter2894);
            variable_declaration_group175=variable_declaration_group();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, variable_declaration_group175.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (ColsAST)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "constant_parameter"

    public static class concept_type_parameter_return extends ParserRuleReturnScope {
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "concept_type_parameter"
    // RParser.g:641:1: concept_type_parameter : TYPE ident ;
    public final RParser.concept_type_parameter_return concept_type_parameter() throws RecognitionException {
        RParser.concept_type_parameter_return retval = new RParser.concept_type_parameter_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        Token TYPE176=null;
        RParser.ident_return ident177 = null;


        ColsAST TYPE176_tree=null;

        try {
            // RParser.g:642:5: ( TYPE ident )
            // RParser.g:642:9: TYPE ident
            {
            root_0 = (ColsAST)adaptor.nil();

            TYPE176=(Token)match(input,TYPE,FOLLOW_TYPE_in_concept_type_parameter2913); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TYPE176_tree = (ColsAST)adaptor.create(TYPE176);
            root_0 = (ColsAST)adaptor.becomeRoot(TYPE176_tree, root_0);
            }
            pushFollow(FOLLOW_ident_in_concept_type_parameter2916);
            ident177=ident();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, ident177.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (ColsAST)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "concept_type_parameter"

    public static class operation_parameter_return extends ParserRuleReturnScope {
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "operation_parameter"
    // RParser.g:645:1: operation_parameter : operation_declaration ;
    public final RParser.operation_parameter_return operation_parameter() throws RecognitionException {
        RParser.operation_parameter_return retval = new RParser.operation_parameter_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        RParser.operation_declaration_return operation_declaration178 = null;



        try {
            // RParser.g:646:5: ( operation_declaration )
            // RParser.g:646:9: operation_declaration
            {
            root_0 = (ColsAST)adaptor.nil();

            pushFollow(FOLLOW_operation_declaration_in_operation_parameter2935);
            operation_declaration178=operation_declaration();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, operation_declaration178.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (ColsAST)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "operation_parameter"

    public static class concept_realization_parameter_return extends ParserRuleReturnScope {
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "concept_realization_parameter"
    // RParser.g:649:1: concept_realization_parameter : REALIZATION ident FOR ( CONCEPT )? ident ;
    public final RParser.concept_realization_parameter_return concept_realization_parameter() throws RecognitionException {
        RParser.concept_realization_parameter_return retval = new RParser.concept_realization_parameter_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        Token REALIZATION179=null;
        Token FOR181=null;
        Token CONCEPT182=null;
        RParser.ident_return ident180 = null;

        RParser.ident_return ident183 = null;


        ColsAST REALIZATION179_tree=null;
        ColsAST FOR181_tree=null;
        ColsAST CONCEPT182_tree=null;

        try {
            // RParser.g:650:5: ( REALIZATION ident FOR ( CONCEPT )? ident )
            // RParser.g:650:9: REALIZATION ident FOR ( CONCEPT )? ident
            {
            root_0 = (ColsAST)adaptor.nil();

            REALIZATION179=(Token)match(input,REALIZATION,FOLLOW_REALIZATION_in_concept_realization_parameter2954); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REALIZATION179_tree = (ColsAST)adaptor.create(REALIZATION179);
            root_0 = (ColsAST)adaptor.becomeRoot(REALIZATION179_tree, root_0);
            }
            pushFollow(FOLLOW_ident_in_concept_realization_parameter2957);
            ident180=ident();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, ident180.getTree());
            FOR181=(Token)match(input,FOR,FOLLOW_FOR_in_concept_realization_parameter2967); if (state.failed) return retval;
            // RParser.g:651:14: ( CONCEPT )?
            int alt60=2;
            int LA60_0 = input.LA(1);

            if ( (LA60_0==CONCEPT) ) {
                alt60=1;
            }
            switch (alt60) {
                case 1 :
                    // RParser.g:651:15: CONCEPT
                    {
                    CONCEPT182=(Token)match(input,CONCEPT,FOLLOW_CONCEPT_in_concept_realization_parameter2971); if (state.failed) return retval;

                    }
                    break;

            }

            pushFollow(FOLLOW_ident_in_concept_realization_parameter2976);
            ident183=ident();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, ident183.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (ColsAST)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "concept_realization_parameter"

    public static class uses_list_return extends ParserRuleReturnScope {
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "uses_list"
    // RParser.g:658:1: uses_list : ( uses_clause )+ ;
    public final RParser.uses_list_return uses_list() throws RecognitionException {
        RParser.uses_list_return retval = new RParser.uses_list_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        RParser.uses_clause_return uses_clause184 = null;



        try {
            // RParser.g:659:5: ( ( uses_clause )+ )
            // RParser.g:659:9: ( uses_clause )+
            {
            root_0 = (ColsAST)adaptor.nil();

            // RParser.g:659:9: ( uses_clause )+
            int cnt61=0;
            loop61:
            do {
                int alt61=2;
                int LA61_0 = input.LA(1);

                if ( (LA61_0==USES) ) {
                    alt61=1;
                }


                switch (alt61) {
            	case 1 :
            	    // RParser.g:659:10: uses_clause
            	    {
            	    pushFollow(FOLLOW_uses_clause_in_uses_list3000);
            	    uses_clause184=uses_clause();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, uses_clause184.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt61 >= 1 ) break loop61;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(61, input);
                        throw eee;
                }
                cnt61++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (ColsAST)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "uses_list"

    public static class uses_clause_return extends ParserRuleReturnScope {
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "uses_clause"
    // RParser.g:662:1: uses_clause : USES ident ( COMMA ident )* SEMICOLON ;
    public final RParser.uses_clause_return uses_clause() throws RecognitionException {
        RParser.uses_clause_return retval = new RParser.uses_clause_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        Token USES185=null;
        Token COMMA187=null;
        Token SEMICOLON189=null;
        RParser.ident_return ident186 = null;

        RParser.ident_return ident188 = null;


        ColsAST USES185_tree=null;
        ColsAST COMMA187_tree=null;
        ColsAST SEMICOLON189_tree=null;

        try {
            // RParser.g:663:5: ( USES ident ( COMMA ident )* SEMICOLON )
            // RParser.g:663:9: USES ident ( COMMA ident )* SEMICOLON
            {
            root_0 = (ColsAST)adaptor.nil();

            USES185=(Token)match(input,USES,FOLLOW_USES_in_uses_clause3021); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            USES185_tree = (ColsAST)adaptor.create(USES185);
            root_0 = (ColsAST)adaptor.becomeRoot(USES185_tree, root_0);
            }
            pushFollow(FOLLOW_ident_in_uses_clause3024);
            ident186=ident();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, ident186.getTree());
            // RParser.g:663:21: ( COMMA ident )*
            loop62:
            do {
                int alt62=2;
                int LA62_0 = input.LA(1);

                if ( (LA62_0==COMMA) ) {
                    alt62=1;
                }


                switch (alt62) {
            	case 1 :
            	    // RParser.g:663:22: COMMA ident
            	    {
            	    COMMA187=(Token)match(input,COMMA,FOLLOW_COMMA_in_uses_clause3027); if (state.failed) return retval;
            	    pushFollow(FOLLOW_ident_in_uses_clause3030);
            	    ident188=ident();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, ident188.getTree());

            	    }
            	    break;

            	default :
            	    break loop62;
                }
            } while (true);

            SEMICOLON189=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_uses_clause3034); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (ColsAST)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "uses_clause"

    public static class confirm_math_type_declaration_return extends ParserRuleReturnScope {
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "confirm_math_type_declaration"
    // RParser.g:702:1: confirm_math_type_declaration : CONFIRM MATH TYPE math_variable_declaration SEMICOLON -> ^( CONFIRM_TYPE math_variable_declaration ) ;
    public final RParser.confirm_math_type_declaration_return confirm_math_type_declaration() throws RecognitionException {
        RParser.confirm_math_type_declaration_return retval = new RParser.confirm_math_type_declaration_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        Token CONFIRM190=null;
        Token MATH191=null;
        Token TYPE192=null;
        Token SEMICOLON194=null;
        RParser.math_variable_declaration_return math_variable_declaration193 = null;


        ColsAST CONFIRM190_tree=null;
        ColsAST MATH191_tree=null;
        ColsAST TYPE192_tree=null;
        ColsAST SEMICOLON194_tree=null;
        RewriteRuleTokenStream stream_CONFIRM=new RewriteRuleTokenStream(adaptor,"token CONFIRM");
        RewriteRuleTokenStream stream_SEMICOLON=new RewriteRuleTokenStream(adaptor,"token SEMICOLON");
        RewriteRuleTokenStream stream_MATH=new RewriteRuleTokenStream(adaptor,"token MATH");
        RewriteRuleTokenStream stream_TYPE=new RewriteRuleTokenStream(adaptor,"token TYPE");
        RewriteRuleSubtreeStream stream_math_variable_declaration=new RewriteRuleSubtreeStream(adaptor,"rule math_variable_declaration");
        try {
            // RParser.g:703:5: ( CONFIRM MATH TYPE math_variable_declaration SEMICOLON -> ^( CONFIRM_TYPE math_variable_declaration ) )
            // RParser.g:703:9: CONFIRM MATH TYPE math_variable_declaration SEMICOLON
            {
            CONFIRM190=(Token)match(input,CONFIRM,FOLLOW_CONFIRM_in_confirm_math_type_declaration3074); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_CONFIRM.add(CONFIRM190);

            MATH191=(Token)match(input,MATH,FOLLOW_MATH_in_confirm_math_type_declaration3076); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_MATH.add(MATH191);

            TYPE192=(Token)match(input,TYPE,FOLLOW_TYPE_in_confirm_math_type_declaration3078); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TYPE.add(TYPE192);

            pushFollow(FOLLOW_math_variable_declaration_in_confirm_math_type_declaration3080);
            math_variable_declaration193=math_variable_declaration();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_math_variable_declaration.add(math_variable_declaration193.getTree());
            SEMICOLON194=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_confirm_math_type_declaration3082); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SEMICOLON.add(SEMICOLON194);



            // AST REWRITE
            // elements: math_variable_declaration
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (ColsAST)adaptor.nil();
            // 704:9: -> ^( CONFIRM_TYPE math_variable_declaration )
            {
                // RParser.g:704:12: ^( CONFIRM_TYPE math_variable_declaration )
                {
                ColsAST root_1 = (ColsAST)adaptor.nil();
                root_1 = (ColsAST)adaptor.becomeRoot((ColsAST)adaptor.create(CONFIRM_TYPE, "CONFIRM_TYPE"), root_1);

                adaptor.addChild(root_1, stream_math_variable_declaration.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (ColsAST)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "confirm_math_type_declaration"

    public static class math_assertion_declaration_return extends ParserRuleReturnScope {
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "math_assertion_declaration"
    // RParser.g:711:1: math_assertion_declaration : ( AXIOM | THEOREM | PROPERTY | LEMMA | COROLLARY | ( COMMUTATIVITY ) THEOREM ) ( math_theorem_ident )? COLON math_expression SEMICOLON ;
    public final RParser.math_assertion_declaration_return math_assertion_declaration() throws RecognitionException {
        RParser.math_assertion_declaration_return retval = new RParser.math_assertion_declaration_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        Token AXIOM195=null;
        Token THEOREM196=null;
        Token PROPERTY197=null;
        Token LEMMA198=null;
        Token COROLLARY199=null;
        Token COMMUTATIVITY200=null;
        Token THEOREM201=null;
        Token COLON203=null;
        Token SEMICOLON205=null;
        RParser.math_theorem_ident_return math_theorem_ident202 = null;

        RParser.math_expression_return math_expression204 = null;


        ColsAST AXIOM195_tree=null;
        ColsAST THEOREM196_tree=null;
        ColsAST PROPERTY197_tree=null;
        ColsAST LEMMA198_tree=null;
        ColsAST COROLLARY199_tree=null;
        ColsAST COMMUTATIVITY200_tree=null;
        ColsAST THEOREM201_tree=null;
        ColsAST COLON203_tree=null;
        ColsAST SEMICOLON205_tree=null;

        try {
            // RParser.g:712:5: ( ( AXIOM | THEOREM | PROPERTY | LEMMA | COROLLARY | ( COMMUTATIVITY ) THEOREM ) ( math_theorem_ident )? COLON math_expression SEMICOLON )
            // RParser.g:712:9: ( AXIOM | THEOREM | PROPERTY | LEMMA | COROLLARY | ( COMMUTATIVITY ) THEOREM ) ( math_theorem_ident )? COLON math_expression SEMICOLON
            {
            root_0 = (ColsAST)adaptor.nil();

            // RParser.g:712:9: ( AXIOM | THEOREM | PROPERTY | LEMMA | COROLLARY | ( COMMUTATIVITY ) THEOREM )
            int alt63=6;
            switch ( input.LA(1) ) {
            case AXIOM:
                {
                alt63=1;
                }
                break;
            case THEOREM:
                {
                alt63=2;
                }
                break;
            case PROPERTY:
                {
                alt63=3;
                }
                break;
            case LEMMA:
                {
                alt63=4;
                }
                break;
            case COROLLARY:
                {
                alt63=5;
                }
                break;
            case COMMUTATIVITY:
                {
                alt63=6;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 63, 0, input);

                throw nvae;
            }

            switch (alt63) {
                case 1 :
                    // RParser.g:712:13: AXIOM
                    {
                    AXIOM195=(Token)match(input,AXIOM,FOLLOW_AXIOM_in_math_assertion_declaration3125); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    AXIOM195_tree = (ColsAST)adaptor.create(AXIOM195);
                    root_0 = (ColsAST)adaptor.becomeRoot(AXIOM195_tree, root_0);
                    }

                    }
                    break;
                case 2 :
                    // RParser.g:713:13: THEOREM
                    {
                    THEOREM196=(Token)match(input,THEOREM,FOLLOW_THEOREM_in_math_assertion_declaration3140); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    THEOREM196_tree = (ColsAST)adaptor.create(THEOREM196);
                    root_0 = (ColsAST)adaptor.becomeRoot(THEOREM196_tree, root_0);
                    }

                    }
                    break;
                case 3 :
                    // RParser.g:714:13: PROPERTY
                    {
                    PROPERTY197=(Token)match(input,PROPERTY,FOLLOW_PROPERTY_in_math_assertion_declaration3155); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PROPERTY197_tree = (ColsAST)adaptor.create(PROPERTY197);
                    root_0 = (ColsAST)adaptor.becomeRoot(PROPERTY197_tree, root_0);
                    }

                    }
                    break;
                case 4 :
                    // RParser.g:715:13: LEMMA
                    {
                    LEMMA198=(Token)match(input,LEMMA,FOLLOW_LEMMA_in_math_assertion_declaration3170); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LEMMA198_tree = (ColsAST)adaptor.create(LEMMA198);
                    root_0 = (ColsAST)adaptor.becomeRoot(LEMMA198_tree, root_0);
                    }

                    }
                    break;
                case 5 :
                    // RParser.g:716:13: COROLLARY
                    {
                    COROLLARY199=(Token)match(input,COROLLARY,FOLLOW_COROLLARY_in_math_assertion_declaration3185); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COROLLARY199_tree = (ColsAST)adaptor.create(COROLLARY199);
                    root_0 = (ColsAST)adaptor.becomeRoot(COROLLARY199_tree, root_0);
                    }

                    }
                    break;
                case 6 :
                    // RParser.g:717:13: ( COMMUTATIVITY ) THEOREM
                    {
                    // RParser.g:717:13: ( COMMUTATIVITY )
                    // RParser.g:717:14: COMMUTATIVITY
                    {
                    COMMUTATIVITY200=(Token)match(input,COMMUTATIVITY,FOLLOW_COMMUTATIVITY_in_math_assertion_declaration3201); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COMMUTATIVITY200_tree = (ColsAST)adaptor.create(COMMUTATIVITY200);
                    adaptor.addChild(root_0, COMMUTATIVITY200_tree);
                    }

                    }

                    THEOREM201=(Token)match(input,THEOREM,FOLLOW_THEOREM_in_math_assertion_declaration3204); if (state.failed) return retval;

                    }
                    break;

            }

            // RParser.g:719:9: ( math_theorem_ident )?
            int alt64=2;
            int LA64_0 = input.LA(1);

            if ( (LA64_0==IDENTIFIER||LA64_0==NUMERIC_LITERAL) ) {
                alt64=1;
            }
            switch (alt64) {
                case 1 :
                    // RParser.g:719:10: math_theorem_ident
                    {
                    pushFollow(FOLLOW_math_theorem_ident_in_math_assertion_declaration3226);
                    math_theorem_ident202=math_theorem_ident();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, math_theorem_ident202.getTree());

                    }
                    break;

            }

            COLON203=(Token)match(input,COLON,FOLLOW_COLON_in_math_assertion_declaration3230); if (state.failed) return retval;
            pushFollow(FOLLOW_math_expression_in_math_assertion_declaration3241);
            math_expression204=math_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, math_expression204.getTree());
            SEMICOLON205=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_math_assertion_declaration3243); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (ColsAST)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "math_assertion_declaration"

    public static class constraint_clause_return extends ParserRuleReturnScope {
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "constraint_clause"
    // RParser.g:723:1: constraint_clause : CONSTRAINT math_expression SEMICOLON ;
    public final RParser.constraint_clause_return constraint_clause() throws RecognitionException {
        RParser.constraint_clause_return retval = new RParser.constraint_clause_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        Token CONSTRAINT206=null;
        Token SEMICOLON208=null;
        RParser.math_expression_return math_expression207 = null;


        ColsAST CONSTRAINT206_tree=null;
        ColsAST SEMICOLON208_tree=null;

        try {
            // RParser.g:724:5: ( CONSTRAINT math_expression SEMICOLON )
            // RParser.g:724:9: CONSTRAINT math_expression SEMICOLON
            {
            root_0 = (ColsAST)adaptor.nil();

            CONSTRAINT206=(Token)match(input,CONSTRAINT,FOLLOW_CONSTRAINT_in_constraint_clause3263); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            CONSTRAINT206_tree = (ColsAST)adaptor.create(CONSTRAINT206);
            root_0 = (ColsAST)adaptor.becomeRoot(CONSTRAINT206_tree, root_0);
            }
            pushFollow(FOLLOW_math_expression_in_constraint_clause3266);
            math_expression207=math_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, math_expression207.getTree());
            SEMICOLON208=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_constraint_clause3268); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (ColsAST)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "constraint_clause"

    public static class correspondence_clause_return extends ParserRuleReturnScope {
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "correspondence_clause"
    // RParser.g:727:1: correspondence_clause : CORR math_expression SEMICOLON ;
    public final RParser.correspondence_clause_return correspondence_clause() throws RecognitionException {
        RParser.correspondence_clause_return retval = new RParser.correspondence_clause_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        Token CORR209=null;
        Token SEMICOLON211=null;
        RParser.math_expression_return math_expression210 = null;


        ColsAST CORR209_tree=null;
        ColsAST SEMICOLON211_tree=null;

        try {
            // RParser.g:728:5: ( CORR math_expression SEMICOLON )
            // RParser.g:728:9: CORR math_expression SEMICOLON
            {
            root_0 = (ColsAST)adaptor.nil();

            CORR209=(Token)match(input,CORR,FOLLOW_CORR_in_correspondence_clause3288); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            CORR209_tree = (ColsAST)adaptor.create(CORR209);
            root_0 = (ColsAST)adaptor.becomeRoot(CORR209_tree, root_0);
            }
            pushFollow(FOLLOW_math_expression_in_correspondence_clause3291);
            math_expression210=math_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, math_expression210.getTree());
            SEMICOLON211=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_correspondence_clause3293); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (ColsAST)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "correspondence_clause"

    public static class convention_clause_return extends ParserRuleReturnScope {
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "convention_clause"
    // RParser.g:731:1: convention_clause : CONVENTION math_expression SEMICOLON ;
    public final RParser.convention_clause_return convention_clause() throws RecognitionException {
        RParser.convention_clause_return retval = new RParser.convention_clause_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        Token CONVENTION212=null;
        Token SEMICOLON214=null;
        RParser.math_expression_return math_expression213 = null;


        ColsAST CONVENTION212_tree=null;
        ColsAST SEMICOLON214_tree=null;

        try {
            // RParser.g:732:5: ( CONVENTION math_expression SEMICOLON )
            // RParser.g:732:9: CONVENTION math_expression SEMICOLON
            {
            root_0 = (ColsAST)adaptor.nil();

            CONVENTION212=(Token)match(input,CONVENTION,FOLLOW_CONVENTION_in_convention_clause3313); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            CONVENTION212_tree = (ColsAST)adaptor.create(CONVENTION212);
            root_0 = (ColsAST)adaptor.becomeRoot(CONVENTION212_tree, root_0);
            }
            pushFollow(FOLLOW_math_expression_in_convention_clause3316);
            math_expression213=math_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, math_expression213.getTree());
            SEMICOLON214=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_convention_clause3318); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (ColsAST)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "convention_clause"

    public static class type_theorem_declaration_return extends ParserRuleReturnScope {
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "type_theorem_declaration"
    // RParser.g:739:1: type_theorem_declaration : TYPE THEOREM ( math_theorem_ident )? COLON ( FOR ALL math_variable_declaration_group COMMA )+ implies_expression COLON math_type_expression SEMICOLON ;
    public final RParser.type_theorem_declaration_return type_theorem_declaration() throws RecognitionException {
        RParser.type_theorem_declaration_return retval = new RParser.type_theorem_declaration_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        Token TYPE215=null;
        Token THEOREM216=null;
        Token COLON218=null;
        Token FOR219=null;
        Token ALL220=null;
        Token COMMA222=null;
        Token COLON224=null;
        Token SEMICOLON226=null;
        RParser.math_theorem_ident_return math_theorem_ident217 = null;

        RParser.math_variable_declaration_group_return math_variable_declaration_group221 = null;

        RParser.implies_expression_return implies_expression223 = null;

        RParser.math_type_expression_return math_type_expression225 = null;


        ColsAST TYPE215_tree=null;
        ColsAST THEOREM216_tree=null;
        ColsAST COLON218_tree=null;
        ColsAST FOR219_tree=null;
        ColsAST ALL220_tree=null;
        ColsAST COMMA222_tree=null;
        ColsAST COLON224_tree=null;
        ColsAST SEMICOLON226_tree=null;

        try {
            // RParser.g:740:5: ( TYPE THEOREM ( math_theorem_ident )? COLON ( FOR ALL math_variable_declaration_group COMMA )+ implies_expression COLON math_type_expression SEMICOLON )
            // RParser.g:740:9: TYPE THEOREM ( math_theorem_ident )? COLON ( FOR ALL math_variable_declaration_group COMMA )+ implies_expression COLON math_type_expression SEMICOLON
            {
            root_0 = (ColsAST)adaptor.nil();

            TYPE215=(Token)match(input,TYPE,FOLLOW_TYPE_in_type_theorem_declaration3346); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TYPE215_tree = (ColsAST)adaptor.create(TYPE215);
            root_0 = (ColsAST)adaptor.becomeRoot(TYPE215_tree, root_0);
            }
            THEOREM216=(Token)match(input,THEOREM,FOLLOW_THEOREM_in_type_theorem_declaration3349); if (state.failed) return retval;
            // RParser.g:740:24: ( math_theorem_ident )?
            int alt65=2;
            int LA65_0 = input.LA(1);

            if ( (LA65_0==IDENTIFIER||LA65_0==NUMERIC_LITERAL) ) {
                alt65=1;
            }
            switch (alt65) {
                case 1 :
                    // RParser.g:740:25: math_theorem_ident
                    {
                    pushFollow(FOLLOW_math_theorem_ident_in_type_theorem_declaration3353);
                    math_theorem_ident217=math_theorem_ident();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, math_theorem_ident217.getTree());

                    }
                    break;

            }

            COLON218=(Token)match(input,COLON,FOLLOW_COLON_in_type_theorem_declaration3357); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            COLON218_tree = (ColsAST)adaptor.create(COLON218);
            adaptor.addChild(root_0, COLON218_tree);
            }
            // RParser.g:741:9: ( FOR ALL math_variable_declaration_group COMMA )+
            int cnt66=0;
            loop66:
            do {
                int alt66=2;
                alt66 = dfa66.predict(input);
                switch (alt66) {
            	case 1 :
            	    // RParser.g:741:10: FOR ALL math_variable_declaration_group COMMA
            	    {
            	    FOR219=(Token)match(input,FOR,FOLLOW_FOR_in_type_theorem_declaration3368); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    FOR219_tree = (ColsAST)adaptor.create(FOR219);
            	    adaptor.addChild(root_0, FOR219_tree);
            	    }
            	    ALL220=(Token)match(input,ALL,FOLLOW_ALL_in_type_theorem_declaration3370); if (state.failed) return retval;
            	    pushFollow(FOLLOW_math_variable_declaration_group_in_type_theorem_declaration3373);
            	    math_variable_declaration_group221=math_variable_declaration_group();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, math_variable_declaration_group221.getTree());
            	    COMMA222=(Token)match(input,COMMA,FOLLOW_COMMA_in_type_theorem_declaration3375); if (state.failed) return retval;

            	    }
            	    break;

            	default :
            	    if ( cnt66 >= 1 ) break loop66;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(66, input);
                        throw eee;
                }
                cnt66++;
            } while (true);

            pushFollow(FOLLOW_implies_expression_in_type_theorem_declaration3388);
            implies_expression223=implies_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, implies_expression223.getTree());
            COLON224=(Token)match(input,COLON,FOLLOW_COLON_in_type_theorem_declaration3390); if (state.failed) return retval;
            pushFollow(FOLLOW_math_type_expression_in_type_theorem_declaration3393);
            math_type_expression225=math_type_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, math_type_expression225.getTree());
            SEMICOLON226=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_type_theorem_declaration3395); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (ColsAST)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "type_theorem_declaration"

    public static class concept_state_variable_declaration_return extends ParserRuleReturnScope {
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "concept_state_variable_declaration"
    // RParser.g:751:1: concept_state_variable_declaration : VAR math_variable_declaration_group SEMICOLON ;
    public final RParser.concept_state_variable_declaration_return concept_state_variable_declaration() throws RecognitionException {
        RParser.concept_state_variable_declaration_return retval = new RParser.concept_state_variable_declaration_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        Token VAR227=null;
        Token SEMICOLON229=null;
        RParser.math_variable_declaration_group_return math_variable_declaration_group228 = null;


        ColsAST VAR227_tree=null;
        ColsAST SEMICOLON229_tree=null;

        try {
            // RParser.g:752:5: ( VAR math_variable_declaration_group SEMICOLON )
            // RParser.g:752:9: VAR math_variable_declaration_group SEMICOLON
            {
            root_0 = (ColsAST)adaptor.nil();

            VAR227=(Token)match(input,VAR,FOLLOW_VAR_in_concept_state_variable_declaration3425); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            VAR227_tree = (ColsAST)adaptor.create(VAR227);
            root_0 = (ColsAST)adaptor.becomeRoot(VAR227_tree, root_0);
            }
            pushFollow(FOLLOW_math_variable_declaration_group_in_concept_state_variable_declaration3428);
            math_variable_declaration_group228=math_variable_declaration_group();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, math_variable_declaration_group228.getTree());
            SEMICOLON229=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_concept_state_variable_declaration3430); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (ColsAST)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "concept_state_variable_declaration"

    public static class state_variable_declaration_return extends ParserRuleReturnScope {
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "state_variable_declaration"
    // RParser.g:755:1: state_variable_declaration : VAR variable_declaration_group SEMICOLON ;
    public final RParser.state_variable_declaration_return state_variable_declaration() throws RecognitionException {
        RParser.state_variable_declaration_return retval = new RParser.state_variable_declaration_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        Token VAR230=null;
        Token SEMICOLON232=null;
        RParser.variable_declaration_group_return variable_declaration_group231 = null;


        ColsAST VAR230_tree=null;
        ColsAST SEMICOLON232_tree=null;

        try {
            // RParser.g:756:5: ( VAR variable_declaration_group SEMICOLON )
            // RParser.g:756:9: VAR variable_declaration_group SEMICOLON
            {
            root_0 = (ColsAST)adaptor.nil();

            VAR230=(Token)match(input,VAR,FOLLOW_VAR_in_state_variable_declaration3450); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            VAR230_tree = (ColsAST)adaptor.create(VAR230);
            root_0 = (ColsAST)adaptor.becomeRoot(VAR230_tree, root_0);
            }
            pushFollow(FOLLOW_variable_declaration_group_in_state_variable_declaration3453);
            variable_declaration_group231=variable_declaration_group();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, variable_declaration_group231.getTree());
            SEMICOLON232=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_state_variable_declaration3455); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (ColsAST)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "state_variable_declaration"

    public static class state_aux_variable_declaration_return extends ParserRuleReturnScope {
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "state_aux_variable_declaration"
    // RParser.g:759:1: state_aux_variable_declaration : AUX_VAR variable_declaration_group SEMICOLON ;
    public final RParser.state_aux_variable_declaration_return state_aux_variable_declaration() throws RecognitionException {
        RParser.state_aux_variable_declaration_return retval = new RParser.state_aux_variable_declaration_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        Token AUX_VAR233=null;
        Token SEMICOLON235=null;
        RParser.variable_declaration_group_return variable_declaration_group234 = null;


        ColsAST AUX_VAR233_tree=null;
        ColsAST SEMICOLON235_tree=null;

        try {
            // RParser.g:760:5: ( AUX_VAR variable_declaration_group SEMICOLON )
            // RParser.g:760:9: AUX_VAR variable_declaration_group SEMICOLON
            {
            root_0 = (ColsAST)adaptor.nil();

            AUX_VAR233=(Token)match(input,AUX_VAR,FOLLOW_AUX_VAR_in_state_aux_variable_declaration3479); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            AUX_VAR233_tree = (ColsAST)adaptor.create(AUX_VAR233);
            root_0 = (ColsAST)adaptor.becomeRoot(AUX_VAR233_tree, root_0);
            }
            pushFollow(FOLLOW_variable_declaration_group_in_state_aux_variable_declaration3482);
            variable_declaration_group234=variable_declaration_group();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, variable_declaration_group234.getTree());
            SEMICOLON235=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_state_aux_variable_declaration3484); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (ColsAST)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "state_aux_variable_declaration"

    public static class facility_declaration_return extends ParserRuleReturnScope {
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "facility_declaration"
    // RParser.g:767:1: facility_declaration : FACILITY ident IS ident ( module_argument_section )? ( facility_enhancement )* REALIZED BY ident ( WITH_PROFILE ident )? ( module_argument_section )? ( facility_body_enhancement )* SEMICOLON ;
    public final RParser.facility_declaration_return facility_declaration() throws RecognitionException {
        RParser.facility_declaration_return retval = new RParser.facility_declaration_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        Token FACILITY236=null;
        Token IS238=null;
        Token REALIZED242=null;
        Token BY243=null;
        Token WITH_PROFILE245=null;
        Token SEMICOLON249=null;
        RParser.ident_return ident237 = null;

        RParser.ident_return ident239 = null;

        RParser.module_argument_section_return module_argument_section240 = null;

        RParser.facility_enhancement_return facility_enhancement241 = null;

        RParser.ident_return ident244 = null;

        RParser.ident_return ident246 = null;

        RParser.module_argument_section_return module_argument_section247 = null;

        RParser.facility_body_enhancement_return facility_body_enhancement248 = null;


        ColsAST FACILITY236_tree=null;
        ColsAST IS238_tree=null;
        ColsAST REALIZED242_tree=null;
        ColsAST BY243_tree=null;
        ColsAST WITH_PROFILE245_tree=null;
        ColsAST SEMICOLON249_tree=null;

        try {
            // RParser.g:768:5: ( FACILITY ident IS ident ( module_argument_section )? ( facility_enhancement )* REALIZED BY ident ( WITH_PROFILE ident )? ( module_argument_section )? ( facility_body_enhancement )* SEMICOLON )
            // RParser.g:768:9: FACILITY ident IS ident ( module_argument_section )? ( facility_enhancement )* REALIZED BY ident ( WITH_PROFILE ident )? ( module_argument_section )? ( facility_body_enhancement )* SEMICOLON
            {
            root_0 = (ColsAST)adaptor.nil();

            FACILITY236=(Token)match(input,FACILITY,FOLLOW_FACILITY_in_facility_declaration3508); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            FACILITY236_tree = (ColsAST)adaptor.create(FACILITY236);
            root_0 = (ColsAST)adaptor.becomeRoot(FACILITY236_tree, root_0);
            }
            pushFollow(FOLLOW_ident_in_facility_declaration3511);
            ident237=ident();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, ident237.getTree());
            IS238=(Token)match(input,IS,FOLLOW_IS_in_facility_declaration3521); if (state.failed) return retval;
            pushFollow(FOLLOW_ident_in_facility_declaration3524);
            ident239=ident();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, ident239.getTree());
            // RParser.g:770:9: ( module_argument_section )?
            int alt67=2;
            int LA67_0 = input.LA(1);

            if ( (LA67_0==LPAREN) ) {
                alt67=1;
            }
            switch (alt67) {
                case 1 :
                    // RParser.g:770:9: module_argument_section
                    {
                    pushFollow(FOLLOW_module_argument_section_in_facility_declaration3534);
                    module_argument_section240=module_argument_section();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, module_argument_section240.getTree());

                    }
                    break;

            }

            // RParser.g:771:9: ( facility_enhancement )*
            loop68:
            do {
                int alt68=2;
                int LA68_0 = input.LA(1);

                if ( (LA68_0==ENHANCED) ) {
                    alt68=1;
                }


                switch (alt68) {
            	case 1 :
            	    // RParser.g:771:9: facility_enhancement
            	    {
            	    pushFollow(FOLLOW_facility_enhancement_in_facility_declaration3545);
            	    facility_enhancement241=facility_enhancement();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, facility_enhancement241.getTree());

            	    }
            	    break;

            	default :
            	    break loop68;
                }
            } while (true);

            REALIZED242=(Token)match(input,REALIZED,FOLLOW_REALIZED_in_facility_declaration3556); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REALIZED242_tree = (ColsAST)adaptor.create(REALIZED242);
            adaptor.addChild(root_0, REALIZED242_tree);
            }
            BY243=(Token)match(input,BY,FOLLOW_BY_in_facility_declaration3558); if (state.failed) return retval;
            pushFollow(FOLLOW_ident_in_facility_declaration3561);
            ident244=ident();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, ident244.getTree());
            // RParser.g:773:9: ( WITH_PROFILE ident )?
            int alt69=2;
            int LA69_0 = input.LA(1);

            if ( (LA69_0==WITH_PROFILE) ) {
                alt69=1;
            }
            switch (alt69) {
                case 1 :
                    // RParser.g:773:10: WITH_PROFILE ident
                    {
                    WITH_PROFILE245=(Token)match(input,WITH_PROFILE,FOLLOW_WITH_PROFILE_in_facility_declaration3572); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    WITH_PROFILE245_tree = (ColsAST)adaptor.create(WITH_PROFILE245);
                    adaptor.addChild(root_0, WITH_PROFILE245_tree);
                    }
                    pushFollow(FOLLOW_ident_in_facility_declaration3574);
                    ident246=ident();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, ident246.getTree());

                    }
                    break;

            }

            // RParser.g:773:31: ( module_argument_section )?
            int alt70=2;
            int LA70_0 = input.LA(1);

            if ( (LA70_0==LPAREN) ) {
                alt70=1;
            }
            switch (alt70) {
                case 1 :
                    // RParser.g:773:31: module_argument_section
                    {
                    pushFollow(FOLLOW_module_argument_section_in_facility_declaration3578);
                    module_argument_section247=module_argument_section();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, module_argument_section247.getTree());

                    }
                    break;

            }

            // RParser.g:774:9: ( facility_body_enhancement )*
            loop71:
            do {
                int alt71=2;
                int LA71_0 = input.LA(1);

                if ( (LA71_0==ENHANCED) ) {
                    alt71=1;
                }


                switch (alt71) {
            	case 1 :
            	    // RParser.g:774:9: facility_body_enhancement
            	    {
            	    pushFollow(FOLLOW_facility_body_enhancement_in_facility_declaration3589);
            	    facility_body_enhancement248=facility_body_enhancement();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, facility_body_enhancement248.getTree());

            	    }
            	    break;

            	default :
            	    break loop71;
                }
            } while (true);

            SEMICOLON249=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_facility_declaration3600); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (ColsAST)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "facility_declaration"

    public static class facility_enhancement_return extends ParserRuleReturnScope {
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "facility_enhancement"
    // RParser.g:778:1: facility_enhancement : ENHANCED BY ident ( module_argument_section )? ;
    public final RParser.facility_enhancement_return facility_enhancement() throws RecognitionException {
        RParser.facility_enhancement_return retval = new RParser.facility_enhancement_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        Token ENHANCED250=null;
        Token BY251=null;
        RParser.ident_return ident252 = null;

        RParser.module_argument_section_return module_argument_section253 = null;


        ColsAST ENHANCED250_tree=null;
        ColsAST BY251_tree=null;

        try {
            // RParser.g:779:5: ( ENHANCED BY ident ( module_argument_section )? )
            // RParser.g:779:9: ENHANCED BY ident ( module_argument_section )?
            {
            root_0 = (ColsAST)adaptor.nil();

            ENHANCED250=(Token)match(input,ENHANCED,FOLLOW_ENHANCED_in_facility_enhancement3620); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ENHANCED250_tree = (ColsAST)adaptor.create(ENHANCED250);
            root_0 = (ColsAST)adaptor.becomeRoot(ENHANCED250_tree, root_0);
            }
            BY251=(Token)match(input,BY,FOLLOW_BY_in_facility_enhancement3623); if (state.failed) return retval;
            pushFollow(FOLLOW_ident_in_facility_enhancement3626);
            ident252=ident();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, ident252.getTree());
            // RParser.g:780:9: ( module_argument_section )?
            int alt72=2;
            int LA72_0 = input.LA(1);

            if ( (LA72_0==LPAREN) ) {
                alt72=1;
            }
            switch (alt72) {
                case 1 :
                    // RParser.g:780:9: module_argument_section
                    {
                    pushFollow(FOLLOW_module_argument_section_in_facility_enhancement3636);
                    module_argument_section253=module_argument_section();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, module_argument_section253.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (ColsAST)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "facility_enhancement"

    public static class facility_body_enhancement_return extends ParserRuleReturnScope {
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "facility_body_enhancement"
    // RParser.g:785:1: facility_body_enhancement : ( ( ENHANCED BY ident module_argument_section )=> ENHANCED BY ident module_argument_section REALIZED BY ident ( WITH_PROFILE ident )? ( module_argument_section )? | ENHANCED BY ident REALIZED BY ident ( WITH_PROFILE ident )? ( module_argument_section )? );
    public final RParser.facility_body_enhancement_return facility_body_enhancement() throws RecognitionException {
        RParser.facility_body_enhancement_return retval = new RParser.facility_body_enhancement_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        Token ENHANCED254=null;
        Token BY255=null;
        Token REALIZED258=null;
        Token BY259=null;
        Token WITH_PROFILE261=null;
        Token ENHANCED264=null;
        Token BY265=null;
        Token REALIZED267=null;
        Token BY268=null;
        Token WITH_PROFILE270=null;
        RParser.ident_return ident256 = null;

        RParser.module_argument_section_return module_argument_section257 = null;

        RParser.ident_return ident260 = null;

        RParser.ident_return ident262 = null;

        RParser.module_argument_section_return module_argument_section263 = null;

        RParser.ident_return ident266 = null;

        RParser.ident_return ident269 = null;

        RParser.ident_return ident271 = null;

        RParser.module_argument_section_return module_argument_section272 = null;


        ColsAST ENHANCED254_tree=null;
        ColsAST BY255_tree=null;
        ColsAST REALIZED258_tree=null;
        ColsAST BY259_tree=null;
        ColsAST WITH_PROFILE261_tree=null;
        ColsAST ENHANCED264_tree=null;
        ColsAST BY265_tree=null;
        ColsAST REALIZED267_tree=null;
        ColsAST BY268_tree=null;
        ColsAST WITH_PROFILE270_tree=null;

        try {
            // RParser.g:786:5: ( ( ENHANCED BY ident module_argument_section )=> ENHANCED BY ident module_argument_section REALIZED BY ident ( WITH_PROFILE ident )? ( module_argument_section )? | ENHANCED BY ident REALIZED BY ident ( WITH_PROFILE ident )? ( module_argument_section )? )
            int alt77=2;
            int LA77_0 = input.LA(1);

            if ( (LA77_0==ENHANCED) ) {
                int LA77_1 = input.LA(2);

                if ( (synpred5_RParser()) ) {
                    alt77=1;
                }
                else if ( (true) ) {
                    alt77=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 77, 1, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 77, 0, input);

                throw nvae;
            }
            switch (alt77) {
                case 1 :
                    // RParser.g:786:9: ( ENHANCED BY ident module_argument_section )=> ENHANCED BY ident module_argument_section REALIZED BY ident ( WITH_PROFILE ident )? ( module_argument_section )?
                    {
                    root_0 = (ColsAST)adaptor.nil();

                    ENHANCED254=(Token)match(input,ENHANCED,FOLLOW_ENHANCED_in_facility_body_enhancement3704); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ENHANCED254_tree = (ColsAST)adaptor.create(ENHANCED254);
                    root_0 = (ColsAST)adaptor.becomeRoot(ENHANCED254_tree, root_0);
                    }
                    BY255=(Token)match(input,BY,FOLLOW_BY_in_facility_body_enhancement3707); if (state.failed) return retval;
                    pushFollow(FOLLOW_ident_in_facility_body_enhancement3710);
                    ident256=ident();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, ident256.getTree());
                    pushFollow(FOLLOW_module_argument_section_in_facility_body_enhancement3720);
                    module_argument_section257=module_argument_section();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, module_argument_section257.getTree());
                    REALIZED258=(Token)match(input,REALIZED,FOLLOW_REALIZED_in_facility_body_enhancement3730); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    REALIZED258_tree = (ColsAST)adaptor.create(REALIZED258);
                    adaptor.addChild(root_0, REALIZED258_tree);
                    }
                    BY259=(Token)match(input,BY,FOLLOW_BY_in_facility_body_enhancement3732); if (state.failed) return retval;
                    pushFollow(FOLLOW_ident_in_facility_body_enhancement3735);
                    ident260=ident();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, ident260.getTree());
                    // RParser.g:791:9: ( WITH_PROFILE ident )?
                    int alt73=2;
                    int LA73_0 = input.LA(1);

                    if ( (LA73_0==WITH_PROFILE) ) {
                        alt73=1;
                    }
                    switch (alt73) {
                        case 1 :
                            // RParser.g:791:10: WITH_PROFILE ident
                            {
                            WITH_PROFILE261=(Token)match(input,WITH_PROFILE,FOLLOW_WITH_PROFILE_in_facility_body_enhancement3746); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            WITH_PROFILE261_tree = (ColsAST)adaptor.create(WITH_PROFILE261);
                            adaptor.addChild(root_0, WITH_PROFILE261_tree);
                            }
                            pushFollow(FOLLOW_ident_in_facility_body_enhancement3748);
                            ident262=ident();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, ident262.getTree());

                            }
                            break;

                    }

                    // RParser.g:791:31: ( module_argument_section )?
                    int alt74=2;
                    int LA74_0 = input.LA(1);

                    if ( (LA74_0==LPAREN) ) {
                        alt74=1;
                    }
                    switch (alt74) {
                        case 1 :
                            // RParser.g:791:31: module_argument_section
                            {
                            pushFollow(FOLLOW_module_argument_section_in_facility_body_enhancement3752);
                            module_argument_section263=module_argument_section();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, module_argument_section263.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // RParser.g:796:9: ENHANCED BY ident REALIZED BY ident ( WITH_PROFILE ident )? ( module_argument_section )?
                    {
                    root_0 = (ColsAST)adaptor.nil();

                    ENHANCED264=(Token)match(input,ENHANCED,FOLLOW_ENHANCED_in_facility_body_enhancement3765); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ENHANCED264_tree = (ColsAST)adaptor.create(ENHANCED264);
                    root_0 = (ColsAST)adaptor.becomeRoot(ENHANCED264_tree, root_0);
                    }
                    BY265=(Token)match(input,BY,FOLLOW_BY_in_facility_body_enhancement3768); if (state.failed) return retval;
                    pushFollow(FOLLOW_ident_in_facility_body_enhancement3771);
                    ident266=ident();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, ident266.getTree());
                    REALIZED267=(Token)match(input,REALIZED,FOLLOW_REALIZED_in_facility_body_enhancement3781); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    REALIZED267_tree = (ColsAST)adaptor.create(REALIZED267);
                    adaptor.addChild(root_0, REALIZED267_tree);
                    }
                    BY268=(Token)match(input,BY,FOLLOW_BY_in_facility_body_enhancement3783); if (state.failed) return retval;
                    pushFollow(FOLLOW_ident_in_facility_body_enhancement3786);
                    ident269=ident();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, ident269.getTree());
                    // RParser.g:798:9: ( WITH_PROFILE ident )?
                    int alt75=2;
                    int LA75_0 = input.LA(1);

                    if ( (LA75_0==WITH_PROFILE) ) {
                        alt75=1;
                    }
                    switch (alt75) {
                        case 1 :
                            // RParser.g:798:10: WITH_PROFILE ident
                            {
                            WITH_PROFILE270=(Token)match(input,WITH_PROFILE,FOLLOW_WITH_PROFILE_in_facility_body_enhancement3797); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            WITH_PROFILE270_tree = (ColsAST)adaptor.create(WITH_PROFILE270);
                            adaptor.addChild(root_0, WITH_PROFILE270_tree);
                            }
                            pushFollow(FOLLOW_ident_in_facility_body_enhancement3799);
                            ident271=ident();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, ident271.getTree());

                            }
                            break;

                    }

                    // RParser.g:798:31: ( module_argument_section )?
                    int alt76=2;
                    int LA76_0 = input.LA(1);

                    if ( (LA76_0==LPAREN) ) {
                        alt76=1;
                    }
                    switch (alt76) {
                        case 1 :
                            // RParser.g:798:31: module_argument_section
                            {
                            pushFollow(FOLLOW_module_argument_section_in_facility_body_enhancement3803);
                            module_argument_section272=module_argument_section();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, module_argument_section272.getTree());

                            }
                            break;

                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (ColsAST)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "facility_body_enhancement"

    public static class module_argument_section_return extends ParserRuleReturnScope {
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "module_argument_section"
    // RParser.g:804:1: module_argument_section : LPAREN module_argument ( COMMA module_argument )* RPAREN -> ^( PARAMS ( module_argument )+ ) ;
    public final RParser.module_argument_section_return module_argument_section() throws RecognitionException {
        RParser.module_argument_section_return retval = new RParser.module_argument_section_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        Token LPAREN273=null;
        Token COMMA275=null;
        Token RPAREN277=null;
        RParser.module_argument_return module_argument274 = null;

        RParser.module_argument_return module_argument276 = null;


        ColsAST LPAREN273_tree=null;
        ColsAST COMMA275_tree=null;
        ColsAST RPAREN277_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_module_argument=new RewriteRuleSubtreeStream(adaptor,"rule module_argument");
        try {
            // RParser.g:805:5: ( LPAREN module_argument ( COMMA module_argument )* RPAREN -> ^( PARAMS ( module_argument )+ ) )
            // RParser.g:805:9: LPAREN module_argument ( COMMA module_argument )* RPAREN
            {
            LPAREN273=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_module_argument_section3825); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN273);

            pushFollow(FOLLOW_module_argument_in_module_argument_section3827);
            module_argument274=module_argument();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_module_argument.add(module_argument274.getTree());
            // RParser.g:805:32: ( COMMA module_argument )*
            loop78:
            do {
                int alt78=2;
                int LA78_0 = input.LA(1);

                if ( (LA78_0==COMMA) ) {
                    alt78=1;
                }


                switch (alt78) {
            	case 1 :
            	    // RParser.g:805:33: COMMA module_argument
            	    {
            	    COMMA275=(Token)match(input,COMMA,FOLLOW_COMMA_in_module_argument_section3830); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA275);

            	    pushFollow(FOLLOW_module_argument_in_module_argument_section3832);
            	    module_argument276=module_argument();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_module_argument.add(module_argument276.getTree());

            	    }
            	    break;

            	default :
            	    break loop78;
                }
            } while (true);

            RPAREN277=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_module_argument_section3836); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN277);



            // AST REWRITE
            // elements: module_argument
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (ColsAST)adaptor.nil();
            // 806:9: -> ^( PARAMS ( module_argument )+ )
            {
                // RParser.g:806:12: ^( PARAMS ( module_argument )+ )
                {
                ColsAST root_1 = (ColsAST)adaptor.nil();
                root_1 = (ColsAST)adaptor.becomeRoot((ColsAST)adaptor.create(PARAMS, "PARAMS"), root_1);

                if ( !(stream_module_argument.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_module_argument.hasNext() ) {
                    adaptor.addChild(root_1, stream_module_argument.nextTree());

                }
                stream_module_argument.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (ColsAST)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "module_argument_section"

    public static class module_argument_return extends ParserRuleReturnScope {
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "module_argument"
    // RParser.g:809:1: module_argument : ( ( qualified_ident )=> qualified_ident | program_expression );
    public final RParser.module_argument_return module_argument() throws RecognitionException {
        RParser.module_argument_return retval = new RParser.module_argument_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        RParser.qualified_ident_return qualified_ident278 = null;

        RParser.program_expression_return program_expression279 = null;



        try {
            // RParser.g:810:5: ( ( qualified_ident )=> qualified_ident | program_expression )
            int alt79=2;
            int LA79_0 = input.LA(1);

            if ( (LA79_0==IDENTIFIER) ) {
                int LA79_1 = input.LA(2);

                if ( (synpred6_RParser()) ) {
                    alt79=1;
                }
                else if ( (true) ) {
                    alt79=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 79, 1, input);

                    throw nvae;
                }
            }
            else if ( (LA79_0==NOT||LA79_0==NUMERIC_LITERAL||LA79_0==CHARACTER_LITERAL||LA79_0==LPAREN||LA79_0==MINUS||LA79_0==STRING_LITERAL) ) {
                alt79=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 79, 0, input);

                throw nvae;
            }
            switch (alt79) {
                case 1 :
                    // RParser.g:810:9: ( qualified_ident )=> qualified_ident
                    {
                    root_0 = (ColsAST)adaptor.nil();

                    pushFollow(FOLLOW_qualified_ident_in_module_argument3877);
                    qualified_ident278=qualified_ident();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, qualified_ident278.getTree());

                    }
                    break;
                case 2 :
                    // RParser.g:811:9: program_expression
                    {
                    root_0 = (ColsAST)adaptor.nil();

                    pushFollow(FOLLOW_program_expression_in_module_argument3887);
                    program_expression279=program_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, program_expression279.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (ColsAST)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "module_argument"

    public static class defines_declaration_return extends ParserRuleReturnScope {
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "defines_declaration"
    // RParser.g:818:1: defines_declaration : DEFINES definition_signature SEMICOLON ;
    public final RParser.defines_declaration_return defines_declaration() throws RecognitionException {
        RParser.defines_declaration_return retval = new RParser.defines_declaration_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        Token DEFINES280=null;
        Token SEMICOLON282=null;
        RParser.definition_signature_return definition_signature281 = null;


        ColsAST DEFINES280_tree=null;
        ColsAST SEMICOLON282_tree=null;

        try {
            // RParser.g:819:5: ( DEFINES definition_signature SEMICOLON )
            // RParser.g:819:9: DEFINES definition_signature SEMICOLON
            {
            root_0 = (ColsAST)adaptor.nil();

            DEFINES280=(Token)match(input,DEFINES,FOLLOW_DEFINES_in_defines_declaration3910); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            DEFINES280_tree = (ColsAST)adaptor.create(DEFINES280);
            root_0 = (ColsAST)adaptor.becomeRoot(DEFINES280_tree, root_0);
            }
            pushFollow(FOLLOW_definition_signature_in_defines_declaration3913);
            definition_signature281=definition_signature();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, definition_signature281.getTree());
            SEMICOLON282=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_defines_declaration3915); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (ColsAST)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "defines_declaration"

    public static class definition_declaration_return extends ParserRuleReturnScope {
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "definition_declaration"
    // RParser.g:822:1: definition_declaration : ( implicit_definition_declaration | inductive_definition_declaration | standard_definition_declaration | categorical_definition_declaration );
    public final RParser.definition_declaration_return definition_declaration() throws RecognitionException {
        RParser.definition_declaration_return retval = new RParser.definition_declaration_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        RParser.implicit_definition_declaration_return implicit_definition_declaration283 = null;

        RParser.inductive_definition_declaration_return inductive_definition_declaration284 = null;

        RParser.standard_definition_declaration_return standard_definition_declaration285 = null;

        RParser.categorical_definition_declaration_return categorical_definition_declaration286 = null;



        try {
            // RParser.g:823:5: ( implicit_definition_declaration | inductive_definition_declaration | standard_definition_declaration | categorical_definition_declaration )
            int alt80=4;
            switch ( input.LA(1) ) {
            case IMPLICIT:
                {
                alt80=1;
                }
                break;
            case INDUCTIVE:
                {
                alt80=2;
                }
                break;
            case DEFINITION:
                {
                alt80=3;
                }
                break;
            case CATEGORICAL:
                {
                alt80=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 80, 0, input);

                throw nvae;
            }

            switch (alt80) {
                case 1 :
                    // RParser.g:823:9: implicit_definition_declaration
                    {
                    root_0 = (ColsAST)adaptor.nil();

                    pushFollow(FOLLOW_implicit_definition_declaration_in_definition_declaration3935);
                    implicit_definition_declaration283=implicit_definition_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, implicit_definition_declaration283.getTree());

                    }
                    break;
                case 2 :
                    // RParser.g:824:9: inductive_definition_declaration
                    {
                    root_0 = (ColsAST)adaptor.nil();

                    pushFollow(FOLLOW_inductive_definition_declaration_in_definition_declaration3945);
                    inductive_definition_declaration284=inductive_definition_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inductive_definition_declaration284.getTree());

                    }
                    break;
                case 3 :
                    // RParser.g:825:9: standard_definition_declaration
                    {
                    root_0 = (ColsAST)adaptor.nil();

                    pushFollow(FOLLOW_standard_definition_declaration_in_definition_declaration3955);
                    standard_definition_declaration285=standard_definition_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, standard_definition_declaration285.getTree());

                    }
                    break;
                case 4 :
                    // RParser.g:826:9: categorical_definition_declaration
                    {
                    root_0 = (ColsAST)adaptor.nil();

                    pushFollow(FOLLOW_categorical_definition_declaration_in_definition_declaration3965);
                    categorical_definition_declaration286=categorical_definition_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, categorical_definition_declaration286.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (ColsAST)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "definition_declaration"

    public static class implicit_definition_declaration_return extends ParserRuleReturnScope {
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "implicit_definition_declaration"
    // RParser.g:829:1: implicit_definition_declaration : IMPLICIT DEFINITION definition_signature ( SEMICOLON )? IS math_expression SEMICOLON -> ^( IMPLICIT_DEF definition_signature math_expression ) ;
    public final RParser.implicit_definition_declaration_return implicit_definition_declaration() throws RecognitionException {
        RParser.implicit_definition_declaration_return retval = new RParser.implicit_definition_declaration_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        Token IMPLICIT287=null;
        Token DEFINITION288=null;
        Token SEMICOLON290=null;
        Token IS291=null;
        Token SEMICOLON293=null;
        RParser.definition_signature_return definition_signature289 = null;

        RParser.math_expression_return math_expression292 = null;


        ColsAST IMPLICIT287_tree=null;
        ColsAST DEFINITION288_tree=null;
        ColsAST SEMICOLON290_tree=null;
        ColsAST IS291_tree=null;
        ColsAST SEMICOLON293_tree=null;
        RewriteRuleTokenStream stream_DEFINITION=new RewriteRuleTokenStream(adaptor,"token DEFINITION");
        RewriteRuleTokenStream stream_SEMICOLON=new RewriteRuleTokenStream(adaptor,"token SEMICOLON");
        RewriteRuleTokenStream stream_IMPLICIT=new RewriteRuleTokenStream(adaptor,"token IMPLICIT");
        RewriteRuleTokenStream stream_IS=new RewriteRuleTokenStream(adaptor,"token IS");
        RewriteRuleSubtreeStream stream_definition_signature=new RewriteRuleSubtreeStream(adaptor,"rule definition_signature");
        RewriteRuleSubtreeStream stream_math_expression=new RewriteRuleSubtreeStream(adaptor,"rule math_expression");
        try {
            // RParser.g:830:5: ( IMPLICIT DEFINITION definition_signature ( SEMICOLON )? IS math_expression SEMICOLON -> ^( IMPLICIT_DEF definition_signature math_expression ) )
            // RParser.g:830:9: IMPLICIT DEFINITION definition_signature ( SEMICOLON )? IS math_expression SEMICOLON
            {
            IMPLICIT287=(Token)match(input,IMPLICIT,FOLLOW_IMPLICIT_in_implicit_definition_declaration3984); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IMPLICIT.add(IMPLICIT287);

            DEFINITION288=(Token)match(input,DEFINITION,FOLLOW_DEFINITION_in_implicit_definition_declaration3986); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_DEFINITION.add(DEFINITION288);

            pushFollow(FOLLOW_definition_signature_in_implicit_definition_declaration3988);
            definition_signature289=definition_signature();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_definition_signature.add(definition_signature289.getTree());
            // RParser.g:830:50: ( SEMICOLON )?
            int alt81=2;
            int LA81_0 = input.LA(1);

            if ( (LA81_0==SEMICOLON) ) {
                alt81=1;
            }
            switch (alt81) {
                case 1 :
                    // RParser.g:830:50: SEMICOLON
                    {
                    SEMICOLON290=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_implicit_definition_declaration3990); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SEMICOLON.add(SEMICOLON290);


                    }
                    break;

            }

            IS291=(Token)match(input,IS,FOLLOW_IS_in_implicit_definition_declaration4001); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IS.add(IS291);

            pushFollow(FOLLOW_math_expression_in_implicit_definition_declaration4003);
            math_expression292=math_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_math_expression.add(math_expression292.getTree());
            SEMICOLON293=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_implicit_definition_declaration4005); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SEMICOLON.add(SEMICOLON293);



            // AST REWRITE
            // elements: math_expression, definition_signature
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (ColsAST)adaptor.nil();
            // 831:38: -> ^( IMPLICIT_DEF definition_signature math_expression )
            {
                // RParser.g:832:9: ^( IMPLICIT_DEF definition_signature math_expression )
                {
                ColsAST root_1 = (ColsAST)adaptor.nil();
                root_1 = (ColsAST)adaptor.becomeRoot((ColsAST)adaptor.create(IMPLICIT_DEF, "IMPLICIT_DEF"), root_1);

                adaptor.addChild(root_1, stream_definition_signature.nextTree());
                adaptor.addChild(root_1, stream_math_expression.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (ColsAST)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "implicit_definition_declaration"

    public static class inductive_definition_declaration_return extends ParserRuleReturnScope {
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inductive_definition_declaration"
    // RParser.g:836:1: inductive_definition_declaration : INDUCTIVE DEFINITION definition_signature ( SEMICOLON )? IS indexed_expression SEMICOLON indexed_expression SEMICOLON -> ^( INDUCTIVE_DEF definition_signature indexed_expression indexed_expression ) ;
    public final RParser.inductive_definition_declaration_return inductive_definition_declaration() throws RecognitionException {
        RParser.inductive_definition_declaration_return retval = new RParser.inductive_definition_declaration_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        Token INDUCTIVE294=null;
        Token DEFINITION295=null;
        Token SEMICOLON297=null;
        Token IS298=null;
        Token SEMICOLON300=null;
        Token SEMICOLON302=null;
        RParser.definition_signature_return definition_signature296 = null;

        RParser.indexed_expression_return indexed_expression299 = null;

        RParser.indexed_expression_return indexed_expression301 = null;


        ColsAST INDUCTIVE294_tree=null;
        ColsAST DEFINITION295_tree=null;
        ColsAST SEMICOLON297_tree=null;
        ColsAST IS298_tree=null;
        ColsAST SEMICOLON300_tree=null;
        ColsAST SEMICOLON302_tree=null;
        RewriteRuleTokenStream stream_DEFINITION=new RewriteRuleTokenStream(adaptor,"token DEFINITION");
        RewriteRuleTokenStream stream_SEMICOLON=new RewriteRuleTokenStream(adaptor,"token SEMICOLON");
        RewriteRuleTokenStream stream_INDUCTIVE=new RewriteRuleTokenStream(adaptor,"token INDUCTIVE");
        RewriteRuleTokenStream stream_IS=new RewriteRuleTokenStream(adaptor,"token IS");
        RewriteRuleSubtreeStream stream_indexed_expression=new RewriteRuleSubtreeStream(adaptor,"rule indexed_expression");
        RewriteRuleSubtreeStream stream_definition_signature=new RewriteRuleSubtreeStream(adaptor,"rule definition_signature");
        try {
            // RParser.g:837:5: ( INDUCTIVE DEFINITION definition_signature ( SEMICOLON )? IS indexed_expression SEMICOLON indexed_expression SEMICOLON -> ^( INDUCTIVE_DEF definition_signature indexed_expression indexed_expression ) )
            // RParser.g:837:9: INDUCTIVE DEFINITION definition_signature ( SEMICOLON )? IS indexed_expression SEMICOLON indexed_expression SEMICOLON
            {
            INDUCTIVE294=(Token)match(input,INDUCTIVE,FOLLOW_INDUCTIVE_in_inductive_definition_declaration4050); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_INDUCTIVE.add(INDUCTIVE294);

            DEFINITION295=(Token)match(input,DEFINITION,FOLLOW_DEFINITION_in_inductive_definition_declaration4052); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_DEFINITION.add(DEFINITION295);

            pushFollow(FOLLOW_definition_signature_in_inductive_definition_declaration4054);
            definition_signature296=definition_signature();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_definition_signature.add(definition_signature296.getTree());
            // RParser.g:837:51: ( SEMICOLON )?
            int alt82=2;
            int LA82_0 = input.LA(1);

            if ( (LA82_0==SEMICOLON) ) {
                alt82=1;
            }
            switch (alt82) {
                case 1 :
                    // RParser.g:837:51: SEMICOLON
                    {
                    SEMICOLON297=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_inductive_definition_declaration4056); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SEMICOLON.add(SEMICOLON297);


                    }
                    break;

            }

            IS298=(Token)match(input,IS,FOLLOW_IS_in_inductive_definition_declaration4067); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IS.add(IS298);

            pushFollow(FOLLOW_indexed_expression_in_inductive_definition_declaration4069);
            indexed_expression299=indexed_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_indexed_expression.add(indexed_expression299.getTree());
            SEMICOLON300=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_inductive_definition_declaration4071); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SEMICOLON.add(SEMICOLON300);

            pushFollow(FOLLOW_indexed_expression_in_inductive_definition_declaration4073);
            indexed_expression301=indexed_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_indexed_expression.add(indexed_expression301.getTree());
            SEMICOLON302=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_inductive_definition_declaration4075); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SEMICOLON.add(SEMICOLON302);



            // AST REWRITE
            // elements: definition_signature, indexed_expression, indexed_expression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (ColsAST)adaptor.nil();
            // 838:70: -> ^( INDUCTIVE_DEF definition_signature indexed_expression indexed_expression )
            {
                // RParser.g:839:9: ^( INDUCTIVE_DEF definition_signature indexed_expression indexed_expression )
                {
                ColsAST root_1 = (ColsAST)adaptor.nil();
                root_1 = (ColsAST)adaptor.becomeRoot((ColsAST)adaptor.create(INDUCTIVE_DEF, "INDUCTIVE_DEF"), root_1);

                adaptor.addChild(root_1, stream_definition_signature.nextTree());
                adaptor.addChild(root_1, stream_indexed_expression.nextTree());
                adaptor.addChild(root_1, stream_indexed_expression.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (ColsAST)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "inductive_definition_declaration"

    public static class standard_definition_declaration_return extends ParserRuleReturnScope {
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "standard_definition_declaration"
    // RParser.g:843:1: standard_definition_declaration : DEFINITION definition_signature ( EQL math_expression )? SEMICOLON ;
    public final RParser.standard_definition_declaration_return standard_definition_declaration() throws RecognitionException {
        RParser.standard_definition_declaration_return retval = new RParser.standard_definition_declaration_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        Token DEFINITION303=null;
        Token EQL305=null;
        Token SEMICOLON307=null;
        RParser.definition_signature_return definition_signature304 = null;

        RParser.math_expression_return math_expression306 = null;


        ColsAST DEFINITION303_tree=null;
        ColsAST EQL305_tree=null;
        ColsAST SEMICOLON307_tree=null;

        try {
            // RParser.g:844:5: ( DEFINITION definition_signature ( EQL math_expression )? SEMICOLON )
            // RParser.g:844:9: DEFINITION definition_signature ( EQL math_expression )? SEMICOLON
            {
            root_0 = (ColsAST)adaptor.nil();

            DEFINITION303=(Token)match(input,DEFINITION,FOLLOW_DEFINITION_in_standard_definition_declaration4122); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            DEFINITION303_tree = (ColsAST)adaptor.create(DEFINITION303);
            root_0 = (ColsAST)adaptor.becomeRoot(DEFINITION303_tree, root_0);
            }
            pushFollow(FOLLOW_definition_signature_in_standard_definition_declaration4125);
            definition_signature304=definition_signature();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, definition_signature304.getTree());
            // RParser.g:845:9: ( EQL math_expression )?
            int alt83=2;
            int LA83_0 = input.LA(1);

            if ( (LA83_0==EQL) ) {
                alt83=1;
            }
            switch (alt83) {
                case 1 :
                    // RParser.g:845:10: EQL math_expression
                    {
                    EQL305=(Token)match(input,EQL,FOLLOW_EQL_in_standard_definition_declaration4136); if (state.failed) return retval;
                    pushFollow(FOLLOW_math_expression_in_standard_definition_declaration4139);
                    math_expression306=math_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, math_expression306.getTree());

                    }
                    break;

            }

            SEMICOLON307=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_standard_definition_declaration4143); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (ColsAST)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "standard_definition_declaration"

    public static class categorical_definition_declaration_return extends ParserRuleReturnScope {
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "categorical_definition_declaration"
    // RParser.g:848:1: categorical_definition_declaration : CATEGORICAL DEFINITION INTRODUCES categorical_definition_construct RELATED BY math_expression SEMICOLON -> ^( CATEGORICAL_DEFINITION categorical_definition_construct ^( RELATED_BY math_expression ) ) ;
    public final RParser.categorical_definition_declaration_return categorical_definition_declaration() throws RecognitionException {
        RParser.categorical_definition_declaration_return retval = new RParser.categorical_definition_declaration_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        Token CATEGORICAL308=null;
        Token DEFINITION309=null;
        Token INTRODUCES310=null;
        Token RELATED312=null;
        Token BY313=null;
        Token SEMICOLON315=null;
        RParser.categorical_definition_construct_return categorical_definition_construct311 = null;

        RParser.math_expression_return math_expression314 = null;


        ColsAST CATEGORICAL308_tree=null;
        ColsAST DEFINITION309_tree=null;
        ColsAST INTRODUCES310_tree=null;
        ColsAST RELATED312_tree=null;
        ColsAST BY313_tree=null;
        ColsAST SEMICOLON315_tree=null;
        RewriteRuleTokenStream stream_DEFINITION=new RewriteRuleTokenStream(adaptor,"token DEFINITION");
        RewriteRuleTokenStream stream_RELATED=new RewriteRuleTokenStream(adaptor,"token RELATED");
        RewriteRuleTokenStream stream_BY=new RewriteRuleTokenStream(adaptor,"token BY");
        RewriteRuleTokenStream stream_INTRODUCES=new RewriteRuleTokenStream(adaptor,"token INTRODUCES");
        RewriteRuleTokenStream stream_CATEGORICAL=new RewriteRuleTokenStream(adaptor,"token CATEGORICAL");
        RewriteRuleTokenStream stream_SEMICOLON=new RewriteRuleTokenStream(adaptor,"token SEMICOLON");
        RewriteRuleSubtreeStream stream_math_expression=new RewriteRuleSubtreeStream(adaptor,"rule math_expression");
        RewriteRuleSubtreeStream stream_categorical_definition_construct=new RewriteRuleSubtreeStream(adaptor,"rule categorical_definition_construct");
        try {
            // RParser.g:849:5: ( CATEGORICAL DEFINITION INTRODUCES categorical_definition_construct RELATED BY math_expression SEMICOLON -> ^( CATEGORICAL_DEFINITION categorical_definition_construct ^( RELATED_BY math_expression ) ) )
            // RParser.g:849:9: CATEGORICAL DEFINITION INTRODUCES categorical_definition_construct RELATED BY math_expression SEMICOLON
            {
            CATEGORICAL308=(Token)match(input,CATEGORICAL,FOLLOW_CATEGORICAL_in_categorical_definition_declaration4167); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_CATEGORICAL.add(CATEGORICAL308);

            DEFINITION309=(Token)match(input,DEFINITION,FOLLOW_DEFINITION_in_categorical_definition_declaration4169); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_DEFINITION.add(DEFINITION309);

            INTRODUCES310=(Token)match(input,INTRODUCES,FOLLOW_INTRODUCES_in_categorical_definition_declaration4171); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_INTRODUCES.add(INTRODUCES310);

            pushFollow(FOLLOW_categorical_definition_construct_in_categorical_definition_declaration4173);
            categorical_definition_construct311=categorical_definition_construct();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_categorical_definition_construct.add(categorical_definition_construct311.getTree());
            RELATED312=(Token)match(input,RELATED,FOLLOW_RELATED_in_categorical_definition_declaration4183); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RELATED.add(RELATED312);

            BY313=(Token)match(input,BY,FOLLOW_BY_in_categorical_definition_declaration4185); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_BY.add(BY313);

            pushFollow(FOLLOW_math_expression_in_categorical_definition_declaration4187);
            math_expression314=math_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_math_expression.add(math_expression314.getTree());
            SEMICOLON315=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_categorical_definition_declaration4189); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SEMICOLON.add(SEMICOLON315);



            // AST REWRITE
            // elements: categorical_definition_construct, math_expression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (ColsAST)adaptor.nil();
            // 851:9: -> ^( CATEGORICAL_DEFINITION categorical_definition_construct ^( RELATED_BY math_expression ) )
            {
                // RParser.g:851:12: ^( CATEGORICAL_DEFINITION categorical_definition_construct ^( RELATED_BY math_expression ) )
                {
                ColsAST root_1 = (ColsAST)adaptor.nil();
                root_1 = (ColsAST)adaptor.becomeRoot((ColsAST)adaptor.create(CATEGORICAL_DEFINITION, "CATEGORICAL_DEFINITION"), root_1);

                adaptor.addChild(root_1, stream_categorical_definition_construct.nextTree());
                // RParser.g:851:70: ^( RELATED_BY math_expression )
                {
                ColsAST root_2 = (ColsAST)adaptor.nil();
                root_2 = (ColsAST)adaptor.becomeRoot((ColsAST)adaptor.create(RELATED_BY, "RELATED_BY"), root_2);

                adaptor.addChild(root_2, stream_math_expression.nextTree());

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (ColsAST)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "categorical_definition_declaration"

    public static class definition_signature_return extends ParserRuleReturnScope {
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "definition_signature"
    // RParser.g:854:1: definition_signature : ( infix_definition_construct | outfix_definition_construct | standard_definition_construct ) COLON math_type_expression ;
    public final RParser.definition_signature_return definition_signature() throws RecognitionException {
        RParser.definition_signature_return retval = new RParser.definition_signature_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        Token COLON319=null;
        RParser.infix_definition_construct_return infix_definition_construct316 = null;

        RParser.outfix_definition_construct_return outfix_definition_construct317 = null;

        RParser.standard_definition_construct_return standard_definition_construct318 = null;

        RParser.math_type_expression_return math_type_expression320 = null;


        ColsAST COLON319_tree=null;

        try {
            // RParser.g:855:5: ( ( infix_definition_construct | outfix_definition_construct | standard_definition_construct ) COLON math_type_expression )
            // RParser.g:855:9: ( infix_definition_construct | outfix_definition_construct | standard_definition_construct ) COLON math_type_expression
            {
            root_0 = (ColsAST)adaptor.nil();

            // RParser.g:855:9: ( infix_definition_construct | outfix_definition_construct | standard_definition_construct )
            int alt84=3;
            switch ( input.LA(1) ) {
            case LPAREN:
                {
                alt84=1;
                }
                break;
            case LT:
            case LL:
            case BAR:
            case DBL_BAR:
                {
                alt84=2;
                }
                break;
            case ABS:
            case COMPLEMENT:
            case NOT:
            case IDENTIFIER:
            case NUMERIC_LITERAL:
            case PLUS:
            case MINUS:
            case BIG_UNION:
            case BIG_INTERSECT:
            case BIG_SUM:
            case BIG_PRODUCT:
            case BIG_CONCAT:
                {
                alt84=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 84, 0, input);

                throw nvae;
            }

            switch (alt84) {
                case 1 :
                    // RParser.g:855:13: infix_definition_construct
                    {
                    pushFollow(FOLLOW_infix_definition_construct_in_definition_signature4234);
                    infix_definition_construct316=infix_definition_construct();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, infix_definition_construct316.getTree());

                    }
                    break;
                case 2 :
                    // RParser.g:856:13: outfix_definition_construct
                    {
                    pushFollow(FOLLOW_outfix_definition_construct_in_definition_signature4248);
                    outfix_definition_construct317=outfix_definition_construct();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, outfix_definition_construct317.getTree());

                    }
                    break;
                case 3 :
                    // RParser.g:857:13: standard_definition_construct
                    {
                    pushFollow(FOLLOW_standard_definition_construct_in_definition_signature4262);
                    standard_definition_construct318=standard_definition_construct();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, standard_definition_construct318.getTree());

                    }
                    break;

            }

            COLON319=(Token)match(input,COLON,FOLLOW_COLON_in_definition_signature4282); if (state.failed) return retval;
            pushFollow(FOLLOW_math_type_expression_in_definition_signature4285);
            math_type_expression320=math_type_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, math_type_expression320.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (ColsAST)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "definition_signature"

    public static class infix_definition_construct_return extends ParserRuleReturnScope {
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "infix_definition_construct"
    // RParser.g:862:1: infix_definition_construct : singleton_definition_parameter ( ident | infix_symbol ) singleton_definition_parameter ;
    public final RParser.infix_definition_construct_return infix_definition_construct() throws RecognitionException {
        RParser.infix_definition_construct_return retval = new RParser.infix_definition_construct_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        RParser.singleton_definition_parameter_return singleton_definition_parameter321 = null;

        RParser.ident_return ident322 = null;

        RParser.infix_symbol_return infix_symbol323 = null;

        RParser.singleton_definition_parameter_return singleton_definition_parameter324 = null;



        try {
            // RParser.g:863:5: ( singleton_definition_parameter ( ident | infix_symbol ) singleton_definition_parameter )
            // RParser.g:863:9: singleton_definition_parameter ( ident | infix_symbol ) singleton_definition_parameter
            {
            root_0 = (ColsAST)adaptor.nil();

            pushFollow(FOLLOW_singleton_definition_parameter_in_infix_definition_construct4304);
            singleton_definition_parameter321=singleton_definition_parameter();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, singleton_definition_parameter321.getTree());
            // RParser.g:864:9: ( ident | infix_symbol )
            int alt85=2;
            int LA85_0 = input.LA(1);

            if ( (LA85_0==IDENTIFIER) ) {
                alt85=1;
            }
            else if ( (LA85_0==AND||LA85_0==COMPLEMENT||LA85_0==DIV||LA85_0==IFF||LA85_0==IMPLIES||LA85_0==INTERSECT||(LA85_0>=IN && LA85_0<=SUBSTR)||LA85_0==MOD||LA85_0==CAT||LA85_0==OR||LA85_0==REM||LA85_0==UNION||LA85_0==WITHOUT||(LA85_0>=PLUS && LA85_0<=MINUS)||(LA85_0>=MULTIPLY && LA85_0<=GT)||(LA85_0>=XOR && LA85_0<=ORELSE)) ) {
                alt85=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 85, 0, input);

                throw nvae;
            }
            switch (alt85) {
                case 1 :
                    // RParser.g:864:10: ident
                    {
                    pushFollow(FOLLOW_ident_in_infix_definition_construct4315);
                    ident322=ident();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, ident322.getTree());

                    }
                    break;
                case 2 :
                    // RParser.g:864:18: infix_symbol
                    {
                    pushFollow(FOLLOW_infix_symbol_in_infix_definition_construct4319);
                    infix_symbol323=infix_symbol();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, infix_symbol323.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_singleton_definition_parameter_in_infix_definition_construct4330);
            singleton_definition_parameter324=singleton_definition_parameter();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, singleton_definition_parameter324.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (ColsAST)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "infix_definition_construct"

    public static class outfix_definition_construct_return extends ParserRuleReturnScope {
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "outfix_definition_construct"
    // RParser.g:868:1: outfix_definition_construct : ( BAR singleton_definition_parameter BAR | DBL_BAR singleton_definition_parameter DBL_BAR | LT singleton_definition_parameter GT | LL singleton_definition_parameter GG );
    public final RParser.outfix_definition_construct_return outfix_definition_construct() throws RecognitionException {
        RParser.outfix_definition_construct_return retval = new RParser.outfix_definition_construct_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        Token BAR325=null;
        Token BAR327=null;
        Token DBL_BAR328=null;
        Token DBL_BAR330=null;
        Token LT331=null;
        Token GT333=null;
        Token LL334=null;
        Token GG336=null;
        RParser.singleton_definition_parameter_return singleton_definition_parameter326 = null;

        RParser.singleton_definition_parameter_return singleton_definition_parameter329 = null;

        RParser.singleton_definition_parameter_return singleton_definition_parameter332 = null;

        RParser.singleton_definition_parameter_return singleton_definition_parameter335 = null;


        ColsAST BAR325_tree=null;
        ColsAST BAR327_tree=null;
        ColsAST DBL_BAR328_tree=null;
        ColsAST DBL_BAR330_tree=null;
        ColsAST LT331_tree=null;
        ColsAST GT333_tree=null;
        ColsAST LL334_tree=null;
        ColsAST GG336_tree=null;

        try {
            // RParser.g:869:5: ( BAR singleton_definition_parameter BAR | DBL_BAR singleton_definition_parameter DBL_BAR | LT singleton_definition_parameter GT | LL singleton_definition_parameter GG )
            int alt86=4;
            switch ( input.LA(1) ) {
            case BAR:
                {
                alt86=1;
                }
                break;
            case DBL_BAR:
                {
                alt86=2;
                }
                break;
            case LT:
                {
                alt86=3;
                }
                break;
            case LL:
                {
                alt86=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 86, 0, input);

                throw nvae;
            }

            switch (alt86) {
                case 1 :
                    // RParser.g:869:9: BAR singleton_definition_parameter BAR
                    {
                    root_0 = (ColsAST)adaptor.nil();

                    BAR325=(Token)match(input,BAR,FOLLOW_BAR_in_outfix_definition_construct4349); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    BAR325_tree = (ColsAST)adaptor.create(BAR325);
                    adaptor.addChild(root_0, BAR325_tree);
                    }
                    pushFollow(FOLLOW_singleton_definition_parameter_in_outfix_definition_construct4351);
                    singleton_definition_parameter326=singleton_definition_parameter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, singleton_definition_parameter326.getTree());
                    BAR327=(Token)match(input,BAR,FOLLOW_BAR_in_outfix_definition_construct4353); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // RParser.g:870:9: DBL_BAR singleton_definition_parameter DBL_BAR
                    {
                    root_0 = (ColsAST)adaptor.nil();

                    DBL_BAR328=(Token)match(input,DBL_BAR,FOLLOW_DBL_BAR_in_outfix_definition_construct4364); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DBL_BAR328_tree = (ColsAST)adaptor.create(DBL_BAR328);
                    adaptor.addChild(root_0, DBL_BAR328_tree);
                    }
                    pushFollow(FOLLOW_singleton_definition_parameter_in_outfix_definition_construct4366);
                    singleton_definition_parameter329=singleton_definition_parameter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, singleton_definition_parameter329.getTree());
                    DBL_BAR330=(Token)match(input,DBL_BAR,FOLLOW_DBL_BAR_in_outfix_definition_construct4368); if (state.failed) return retval;

                    }
                    break;
                case 3 :
                    // RParser.g:871:9: LT singleton_definition_parameter GT
                    {
                    root_0 = (ColsAST)adaptor.nil();

                    LT331=(Token)match(input,LT,FOLLOW_LT_in_outfix_definition_construct4379); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LT331_tree = (ColsAST)adaptor.create(LT331);
                    adaptor.addChild(root_0, LT331_tree);
                    }
                    pushFollow(FOLLOW_singleton_definition_parameter_in_outfix_definition_construct4381);
                    singleton_definition_parameter332=singleton_definition_parameter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, singleton_definition_parameter332.getTree());
                    GT333=(Token)match(input,GT,FOLLOW_GT_in_outfix_definition_construct4383); if (state.failed) return retval;

                    }
                    break;
                case 4 :
                    // RParser.g:872:9: LL singleton_definition_parameter GG
                    {
                    root_0 = (ColsAST)adaptor.nil();

                    LL334=(Token)match(input,LL,FOLLOW_LL_in_outfix_definition_construct4394); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LL334_tree = (ColsAST)adaptor.create(LL334);
                    adaptor.addChild(root_0, LL334_tree);
                    }
                    pushFollow(FOLLOW_singleton_definition_parameter_in_outfix_definition_construct4396);
                    singleton_definition_parameter335=singleton_definition_parameter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, singleton_definition_parameter335.getTree());
                    GG336=(Token)match(input,GG,FOLLOW_GG_in_outfix_definition_construct4398); if (state.failed) return retval;

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (ColsAST)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "outfix_definition_construct"

    public static class standard_definition_construct_return extends ParserRuleReturnScope {
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "standard_definition_construct"
    // RParser.g:875:1: standard_definition_construct : ( ident | prefix_symbol | quant_symbol | NUMERIC_LITERAL ) ( definition_formal_param_section )? ;
    public final RParser.standard_definition_construct_return standard_definition_construct() throws RecognitionException {
        RParser.standard_definition_construct_return retval = new RParser.standard_definition_construct_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        Token NUMERIC_LITERAL340=null;
        RParser.ident_return ident337 = null;

        RParser.prefix_symbol_return prefix_symbol338 = null;

        RParser.quant_symbol_return quant_symbol339 = null;

        RParser.definition_formal_param_section_return definition_formal_param_section341 = null;


        ColsAST NUMERIC_LITERAL340_tree=null;

        try {
            // RParser.g:876:5: ( ( ident | prefix_symbol | quant_symbol | NUMERIC_LITERAL ) ( definition_formal_param_section )? )
            // RParser.g:876:9: ( ident | prefix_symbol | quant_symbol | NUMERIC_LITERAL ) ( definition_formal_param_section )?
            {
            root_0 = (ColsAST)adaptor.nil();

            // RParser.g:876:9: ( ident | prefix_symbol | quant_symbol | NUMERIC_LITERAL )
            int alt87=4;
            switch ( input.LA(1) ) {
            case IDENTIFIER:
                {
                alt87=1;
                }
                break;
            case ABS:
            case COMPLEMENT:
            case NOT:
            case PLUS:
            case MINUS:
                {
                alt87=2;
                }
                break;
            case BIG_UNION:
            case BIG_INTERSECT:
            case BIG_SUM:
            case BIG_PRODUCT:
            case BIG_CONCAT:
                {
                alt87=3;
                }
                break;
            case NUMERIC_LITERAL:
                {
                alt87=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 87, 0, input);

                throw nvae;
            }

            switch (alt87) {
                case 1 :
                    // RParser.g:876:10: ident
                    {
                    pushFollow(FOLLOW_ident_in_standard_definition_construct4419);
                    ident337=ident();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, ident337.getTree());

                    }
                    break;
                case 2 :
                    // RParser.g:876:18: prefix_symbol
                    {
                    pushFollow(FOLLOW_prefix_symbol_in_standard_definition_construct4423);
                    prefix_symbol338=prefix_symbol();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, prefix_symbol338.getTree());

                    }
                    break;
                case 3 :
                    // RParser.g:876:34: quant_symbol
                    {
                    pushFollow(FOLLOW_quant_symbol_in_standard_definition_construct4427);
                    quant_symbol339=quant_symbol();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, quant_symbol339.getTree());

                    }
                    break;
                case 4 :
                    // RParser.g:876:49: NUMERIC_LITERAL
                    {
                    NUMERIC_LITERAL340=(Token)match(input,NUMERIC_LITERAL,FOLLOW_NUMERIC_LITERAL_in_standard_definition_construct4431); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NUMERIC_LITERAL340_tree = (ColsAST)adaptor.create(NUMERIC_LITERAL340);
                    adaptor.addChild(root_0, NUMERIC_LITERAL340_tree);
                    }

                    }
                    break;

            }

            // RParser.g:877:9: ( definition_formal_param_section )?
            int alt88=2;
            int LA88_0 = input.LA(1);

            if ( (LA88_0==LPAREN) ) {
                alt88=1;
            }
            switch (alt88) {
                case 1 :
                    // RParser.g:877:10: definition_formal_param_section
                    {
                    pushFollow(FOLLOW_definition_formal_param_section_in_standard_definition_construct4443);
                    definition_formal_param_section341=definition_formal_param_section();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, definition_formal_param_section341.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (ColsAST)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "standard_definition_construct"

    public static class categorical_definition_construct_return extends ParserRuleReturnScope {
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "categorical_definition_construct"
    // RParser.g:880:1: categorical_definition_construct : definition_signature ( COMMA definition_signature )* -> ^( DEFINITION definition_signature ) ( ^( DEFINITION definition_signature ) )* ;
    public final RParser.categorical_definition_construct_return categorical_definition_construct() throws RecognitionException {
        RParser.categorical_definition_construct_return retval = new RParser.categorical_definition_construct_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        Token COMMA343=null;
        RParser.definition_signature_return definition_signature342 = null;

        RParser.definition_signature_return definition_signature344 = null;


        ColsAST COMMA343_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_definition_signature=new RewriteRuleSubtreeStream(adaptor,"rule definition_signature");
        try {
            // RParser.g:881:5: ( definition_signature ( COMMA definition_signature )* -> ^( DEFINITION definition_signature ) ( ^( DEFINITION definition_signature ) )* )
            // RParser.g:881:9: definition_signature ( COMMA definition_signature )*
            {
            pushFollow(FOLLOW_definition_signature_in_categorical_definition_construct4464);
            definition_signature342=definition_signature();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_definition_signature.add(definition_signature342.getTree());
            // RParser.g:881:30: ( COMMA definition_signature )*
            loop89:
            do {
                int alt89=2;
                int LA89_0 = input.LA(1);

                if ( (LA89_0==COMMA) ) {
                    alt89=1;
                }


                switch (alt89) {
            	case 1 :
            	    // RParser.g:881:31: COMMA definition_signature
            	    {
            	    COMMA343=(Token)match(input,COMMA,FOLLOW_COMMA_in_categorical_definition_construct4467); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA343);

            	    pushFollow(FOLLOW_definition_signature_in_categorical_definition_construct4469);
            	    definition_signature344=definition_signature();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_definition_signature.add(definition_signature344.getTree());

            	    }
            	    break;

            	default :
            	    break loop89;
                }
            } while (true);



            // AST REWRITE
            // elements: definition_signature, definition_signature
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (ColsAST)adaptor.nil();
            // 882:9: -> ^( DEFINITION definition_signature ) ( ^( DEFINITION definition_signature ) )*
            {
                // RParser.g:882:12: ^( DEFINITION definition_signature )
                {
                ColsAST root_1 = (ColsAST)adaptor.nil();
                root_1 = (ColsAST)adaptor.becomeRoot((ColsAST)adaptor.create(DEFINITION, "DEFINITION"), root_1);

                adaptor.addChild(root_1, stream_definition_signature.nextTree());

                adaptor.addChild(root_0, root_1);
                }
                // RParser.g:882:47: ( ^( DEFINITION definition_signature ) )*
                while ( stream_definition_signature.hasNext() ) {
                    // RParser.g:882:47: ^( DEFINITION definition_signature )
                    {
                    ColsAST root_1 = (ColsAST)adaptor.nil();
                    root_1 = (ColsAST)adaptor.becomeRoot((ColsAST)adaptor.create(DEFINITION, "DEFINITION"), root_1);

                    adaptor.addChild(root_1, stream_definition_signature.nextTree());

                    adaptor.addChild(root_0, root_1);
                    }

                }
                stream_definition_signature.reset();

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (ColsAST)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "categorical_definition_construct"

    public static class indexed_expression_return extends ParserRuleReturnScope {
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "indexed_expression"
    // RParser.g:887:1: indexed_expression : LPAREN id= ident RPAREN math_expression ;
    public final RParser.indexed_expression_return indexed_expression() throws RecognitionException {
        RParser.indexed_expression_return retval = new RParser.indexed_expression_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        Token LPAREN345=null;
        Token RPAREN346=null;
        RParser.ident_return id = null;

        RParser.math_expression_return math_expression347 = null;


        ColsAST LPAREN345_tree=null;
        ColsAST RPAREN346_tree=null;

        try {
            // RParser.g:888:5: ( LPAREN id= ident RPAREN math_expression )
            // RParser.g:888:9: LPAREN id= ident RPAREN math_expression
            {
            root_0 = (ColsAST)adaptor.nil();

            LPAREN345=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_indexed_expression4515); if (state.failed) return retval;
            pushFollow(FOLLOW_ident_in_indexed_expression4520);
            id=ident();

            state._fsp--;
            if (state.failed) return retval;
            RPAREN346=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_indexed_expression4523); if (state.failed) return retval;
            pushFollow(FOLLOW_math_expression_in_indexed_expression4526);
            math_expression347=math_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, math_expression347.getTree());
            if ( state.backtracking==0 ) {
               checkIndexedIdent(id.tree); 
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (ColsAST)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "indexed_expression"

    public static class singleton_definition_parameter_return extends ParserRuleReturnScope {
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "singleton_definition_parameter"
    // RParser.g:892:1: singleton_definition_parameter : LPAREN math_variable_declaration RPAREN -> ^( PARAMS math_variable_declaration ) ;
    public final RParser.singleton_definition_parameter_return singleton_definition_parameter() throws RecognitionException {
        RParser.singleton_definition_parameter_return retval = new RParser.singleton_definition_parameter_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        Token LPAREN348=null;
        Token RPAREN350=null;
        RParser.math_variable_declaration_return math_variable_declaration349 = null;


        ColsAST LPAREN348_tree=null;
        ColsAST RPAREN350_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_math_variable_declaration=new RewriteRuleSubtreeStream(adaptor,"rule math_variable_declaration");
        try {
            // RParser.g:893:5: ( LPAREN math_variable_declaration RPAREN -> ^( PARAMS math_variable_declaration ) )
            // RParser.g:893:9: LPAREN math_variable_declaration RPAREN
            {
            LPAREN348=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_singleton_definition_parameter4555); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN348);

            pushFollow(FOLLOW_math_variable_declaration_in_singleton_definition_parameter4557);
            math_variable_declaration349=math_variable_declaration();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_math_variable_declaration.add(math_variable_declaration349.getTree());
            RPAREN350=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_singleton_definition_parameter4559); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN350);



            // AST REWRITE
            // elements: math_variable_declaration
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (ColsAST)adaptor.nil();
            // 894:9: -> ^( PARAMS math_variable_declaration )
            {
                // RParser.g:894:12: ^( PARAMS math_variable_declaration )
                {
                ColsAST root_1 = (ColsAST)adaptor.nil();
                root_1 = (ColsAST)adaptor.becomeRoot((ColsAST)adaptor.create(PARAMS, "PARAMS"), root_1);

                adaptor.addChild(root_1, stream_math_variable_declaration.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (ColsAST)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "singleton_definition_parameter"

    public static class definition_formal_param_section_return extends ParserRuleReturnScope {
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "definition_formal_param_section"
    // RParser.g:897:1: definition_formal_param_section : LPAREN math_variable_declaration_group ( COMMA math_variable_declaration_group )* RPAREN -> ^( PARAMS ( math_variable_declaration_group )+ ) ;
    public final RParser.definition_formal_param_section_return definition_formal_param_section() throws RecognitionException {
        RParser.definition_formal_param_section_return retval = new RParser.definition_formal_param_section_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        Token LPAREN351=null;
        Token COMMA353=null;
        Token RPAREN355=null;
        RParser.math_variable_declaration_group_return math_variable_declaration_group352 = null;

        RParser.math_variable_declaration_group_return math_variable_declaration_group354 = null;


        ColsAST LPAREN351_tree=null;
        ColsAST COMMA353_tree=null;
        ColsAST RPAREN355_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_math_variable_declaration_group=new RewriteRuleSubtreeStream(adaptor,"rule math_variable_declaration_group");
        try {
            // RParser.g:898:5: ( LPAREN math_variable_declaration_group ( COMMA math_variable_declaration_group )* RPAREN -> ^( PARAMS ( math_variable_declaration_group )+ ) )
            // RParser.g:898:9: LPAREN math_variable_declaration_group ( COMMA math_variable_declaration_group )* RPAREN
            {
            LPAREN351=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_definition_formal_param_section4594); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN351);

            pushFollow(FOLLOW_math_variable_declaration_group_in_definition_formal_param_section4596);
            math_variable_declaration_group352=math_variable_declaration_group();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_math_variable_declaration_group.add(math_variable_declaration_group352.getTree());
            // RParser.g:899:9: ( COMMA math_variable_declaration_group )*
            loop90:
            do {
                int alt90=2;
                int LA90_0 = input.LA(1);

                if ( (LA90_0==COMMA) ) {
                    alt90=1;
                }


                switch (alt90) {
            	case 1 :
            	    // RParser.g:899:10: COMMA math_variable_declaration_group
            	    {
            	    COMMA353=(Token)match(input,COMMA,FOLLOW_COMMA_in_definition_formal_param_section4607); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA353);

            	    pushFollow(FOLLOW_math_variable_declaration_group_in_definition_formal_param_section4609);
            	    math_variable_declaration_group354=math_variable_declaration_group();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_math_variable_declaration_group.add(math_variable_declaration_group354.getTree());

            	    }
            	    break;

            	default :
            	    break loop90;
                }
            } while (true);

            RPAREN355=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_definition_formal_param_section4613); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN355);



            // AST REWRITE
            // elements: math_variable_declaration_group
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (ColsAST)adaptor.nil();
            // 900:9: -> ^( PARAMS ( math_variable_declaration_group )+ )
            {
                // RParser.g:900:12: ^( PARAMS ( math_variable_declaration_group )+ )
                {
                ColsAST root_1 = (ColsAST)adaptor.nil();
                root_1 = (ColsAST)adaptor.becomeRoot((ColsAST)adaptor.create(PARAMS, "PARAMS"), root_1);

                if ( !(stream_math_variable_declaration_group.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_math_variable_declaration_group.hasNext() ) {
                    adaptor.addChild(root_1, stream_math_variable_declaration_group.nextTree());

                }
                stream_math_variable_declaration_group.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (ColsAST)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "definition_formal_param_section"

    public static class infix_symbol_return extends ParserRuleReturnScope {
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "infix_symbol"
    // RParser.g:903:1: infix_symbol : ( EQL | NOT_EQL | LT | GT | LT_EQL | GT_EQL | PLUS | MINUS | MULTIPLY | DIVIDE | EXP | MOD | REM | DIV | IMPLIES | IFF | AND | OR | XOR | ANDTHEN | ORELSE | COMPLEMENT | IN | NOT_IN | RANGE | UNION | INTERSECT | WITHOUT | SUBSET | PROP_SUBSET | NOT_SUBSET | NOT_PROP_SUBSET | CAT | SUBSTR | NOT_SUBSTR );
    public final RParser.infix_symbol_return infix_symbol() throws RecognitionException {
        RParser.infix_symbol_return retval = new RParser.infix_symbol_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        Token set356=null;

        ColsAST set356_tree=null;

        try {
            // RParser.g:904:5: ( EQL | NOT_EQL | LT | GT | LT_EQL | GT_EQL | PLUS | MINUS | MULTIPLY | DIVIDE | EXP | MOD | REM | DIV | IMPLIES | IFF | AND | OR | XOR | ANDTHEN | ORELSE | COMPLEMENT | IN | NOT_IN | RANGE | UNION | INTERSECT | WITHOUT | SUBSET | PROP_SUBSET | NOT_SUBSET | NOT_PROP_SUBSET | CAT | SUBSTR | NOT_SUBSTR )
            // RParser.g:
            {
            root_0 = (ColsAST)adaptor.nil();

            set356=(Token)input.LT(1);
            if ( input.LA(1)==AND||input.LA(1)==COMPLEMENT||input.LA(1)==DIV||input.LA(1)==IFF||input.LA(1)==IMPLIES||input.LA(1)==INTERSECT||(input.LA(1)>=IN && input.LA(1)<=SUBSTR)||input.LA(1)==MOD||input.LA(1)==CAT||input.LA(1)==OR||input.LA(1)==REM||input.LA(1)==UNION||input.LA(1)==WITHOUT||(input.LA(1)>=PLUS && input.LA(1)<=MINUS)||(input.LA(1)>=MULTIPLY && input.LA(1)<=GT)||(input.LA(1)>=XOR && input.LA(1)<=ORELSE) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (ColsAST)adaptor.create(set356));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (ColsAST)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "infix_symbol"

    public static class prefix_symbol_return extends ParserRuleReturnScope {
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prefix_symbol"
    // RParser.g:911:1: prefix_symbol : ( PLUS | MINUS | NOT | ABS | COMPLEMENT );
    public final RParser.prefix_symbol_return prefix_symbol() throws RecognitionException {
        RParser.prefix_symbol_return retval = new RParser.prefix_symbol_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        Token set357=null;

        ColsAST set357_tree=null;

        try {
            // RParser.g:912:5: ( PLUS | MINUS | NOT | ABS | COMPLEMENT )
            // RParser.g:
            {
            root_0 = (ColsAST)adaptor.nil();

            set357=(Token)input.LT(1);
            if ( input.LA(1)==ABS||input.LA(1)==COMPLEMENT||input.LA(1)==NOT||(input.LA(1)>=PLUS && input.LA(1)<=MINUS) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (ColsAST)adaptor.create(set357));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (ColsAST)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "prefix_symbol"

    public static class quant_symbol_return extends ParserRuleReturnScope {
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "quant_symbol"
    // RParser.g:915:1: quant_symbol : ( BIG_UNION | BIG_INTERSECT | BIG_SUM | BIG_PRODUCT | BIG_CONCAT );
    public final RParser.quant_symbol_return quant_symbol() throws RecognitionException {
        RParser.quant_symbol_return retval = new RParser.quant_symbol_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        Token set358=null;

        ColsAST set358_tree=null;

        try {
            // RParser.g:916:5: ( BIG_UNION | BIG_INTERSECT | BIG_SUM | BIG_PRODUCT | BIG_CONCAT )
            // RParser.g:
            {
            root_0 = (ColsAST)adaptor.nil();

            set358=(Token)input.LT(1);
            if ( (input.LA(1)>=BIG_UNION && input.LA(1)<=BIG_CONCAT) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (ColsAST)adaptor.create(set358));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (ColsAST)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "quant_symbol"

    public static class operation_procedure_declaration_return extends ParserRuleReturnScope {
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "operation_procedure_declaration"
    // RParser.g:923:1: operation_procedure_declaration : OPERATION id1= ident ( operation_formal_param_section ) ( COLON program_type_expression )? SEMICOLON ( affects_clause )* ( requires_clause )? ( ensures_clause )? PROCEDURE ( decreasing_clause )? ( facility_declaration )* ( variable_declaration )* ( aux_variable_declaration )* statement_sequence END (id2= ident )? SEMICOLON ;
    public final RParser.operation_procedure_declaration_return operation_procedure_declaration() throws RecognitionException {
        RParser.operation_procedure_declaration_return retval = new RParser.operation_procedure_declaration_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        Token OPERATION359=null;
        Token COLON361=null;
        Token SEMICOLON363=null;
        Token PROCEDURE367=null;
        Token END373=null;
        Token SEMICOLON374=null;
        RParser.ident_return id1 = null;

        RParser.ident_return id2 = null;

        RParser.operation_formal_param_section_return operation_formal_param_section360 = null;

        RParser.program_type_expression_return program_type_expression362 = null;

        RParser.affects_clause_return affects_clause364 = null;

        RParser.requires_clause_return requires_clause365 = null;

        RParser.ensures_clause_return ensures_clause366 = null;

        RParser.decreasing_clause_return decreasing_clause368 = null;

        RParser.facility_declaration_return facility_declaration369 = null;

        RParser.variable_declaration_return variable_declaration370 = null;

        RParser.aux_variable_declaration_return aux_variable_declaration371 = null;

        RParser.statement_sequence_return statement_sequence372 = null;


        ColsAST OPERATION359_tree=null;
        ColsAST COLON361_tree=null;
        ColsAST SEMICOLON363_tree=null;
        ColsAST PROCEDURE367_tree=null;
        ColsAST END373_tree=null;
        ColsAST SEMICOLON374_tree=null;

        try {
            // RParser.g:924:5: ( OPERATION id1= ident ( operation_formal_param_section ) ( COLON program_type_expression )? SEMICOLON ( affects_clause )* ( requires_clause )? ( ensures_clause )? PROCEDURE ( decreasing_clause )? ( facility_declaration )* ( variable_declaration )* ( aux_variable_declaration )* statement_sequence END (id2= ident )? SEMICOLON )
            // RParser.g:924:9: OPERATION id1= ident ( operation_formal_param_section ) ( COLON program_type_expression )? SEMICOLON ( affects_clause )* ( requires_clause )? ( ensures_clause )? PROCEDURE ( decreasing_clause )? ( facility_declaration )* ( variable_declaration )* ( aux_variable_declaration )* statement_sequence END (id2= ident )? SEMICOLON
            {
            root_0 = (ColsAST)adaptor.nil();

            OPERATION359=(Token)match(input,OPERATION,FOLLOW_OPERATION_in_operation_procedure_declaration4888); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            OPERATION359_tree = (ColsAST)adaptor.create(OPERATION359);
            root_0 = (ColsAST)adaptor.becomeRoot(OPERATION359_tree, root_0);
            }
            pushFollow(FOLLOW_ident_in_operation_procedure_declaration4893);
            id1=ident();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, id1.getTree());
            // RParser.g:925:9: ( operation_formal_param_section )
            // RParser.g:925:10: operation_formal_param_section
            {
            pushFollow(FOLLOW_operation_formal_param_section_in_operation_procedure_declaration4904);
            operation_formal_param_section360=operation_formal_param_section();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, operation_formal_param_section360.getTree());

            }

            // RParser.g:926:9: ( COLON program_type_expression )?
            int alt91=2;
            int LA91_0 = input.LA(1);

            if ( (LA91_0==COLON) ) {
                alt91=1;
            }
            switch (alt91) {
                case 1 :
                    // RParser.g:926:10: COLON program_type_expression
                    {
                    COLON361=(Token)match(input,COLON,FOLLOW_COLON_in_operation_procedure_declaration4916); if (state.failed) return retval;
                    pushFollow(FOLLOW_program_type_expression_in_operation_procedure_declaration4919);
                    program_type_expression362=program_type_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, program_type_expression362.getTree());

                    }
                    break;

            }

            SEMICOLON363=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_operation_procedure_declaration4923); if (state.failed) return retval;
            // RParser.g:927:9: ( affects_clause )*
            loop92:
            do {
                int alt92=2;
                int LA92_0 = input.LA(1);

                if ( (LA92_0==ALTERS||LA92_0==CLEARS||LA92_0==EVALUATES||LA92_0==PRESERVES||LA92_0==REASSIGNS||LA92_0==REPLACES||LA92_0==RESTORES||LA92_0==UPDATES) ) {
                    alt92=1;
                }


                switch (alt92) {
            	case 1 :
            	    // RParser.g:927:10: affects_clause
            	    {
            	    pushFollow(FOLLOW_affects_clause_in_operation_procedure_declaration4935);
            	    affects_clause364=affects_clause();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, affects_clause364.getTree());

            	    }
            	    break;

            	default :
            	    break loop92;
                }
            } while (true);

            // RParser.g:928:9: ( requires_clause )?
            int alt93=2;
            int LA93_0 = input.LA(1);

            if ( (LA93_0==REQUIRES) ) {
                alt93=1;
            }
            switch (alt93) {
                case 1 :
                    // RParser.g:928:10: requires_clause
                    {
                    pushFollow(FOLLOW_requires_clause_in_operation_procedure_declaration4948);
                    requires_clause365=requires_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, requires_clause365.getTree());

                    }
                    break;

            }

            // RParser.g:929:9: ( ensures_clause )?
            int alt94=2;
            int LA94_0 = input.LA(1);

            if ( (LA94_0==ENSURES) ) {
                alt94=1;
            }
            switch (alt94) {
                case 1 :
                    // RParser.g:929:10: ensures_clause
                    {
                    pushFollow(FOLLOW_ensures_clause_in_operation_procedure_declaration4961);
                    ensures_clause366=ensures_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, ensures_clause366.getTree());

                    }
                    break;

            }

            PROCEDURE367=(Token)match(input,PROCEDURE,FOLLOW_PROCEDURE_in_operation_procedure_declaration4973); if (state.failed) return retval;
            // RParser.g:931:9: ( decreasing_clause )?
            int alt95=2;
            alt95 = dfa95.predict(input);
            switch (alt95) {
                case 1 :
                    // RParser.g:931:10: decreasing_clause
                    {
                    pushFollow(FOLLOW_decreasing_clause_in_operation_procedure_declaration4985);
                    decreasing_clause368=decreasing_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, decreasing_clause368.getTree());

                    }
                    break;

            }

            // RParser.g:932:9: ( facility_declaration )*
            loop96:
            do {
                int alt96=2;
                alt96 = dfa96.predict(input);
                switch (alt96) {
            	case 1 :
            	    // RParser.g:932:10: facility_declaration
            	    {
            	    pushFollow(FOLLOW_facility_declaration_in_operation_procedure_declaration4998);
            	    facility_declaration369=facility_declaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, facility_declaration369.getTree());

            	    }
            	    break;

            	default :
            	    break loop96;
                }
            } while (true);

            // RParser.g:933:9: ( variable_declaration )*
            loop97:
            do {
                int alt97=2;
                alt97 = dfa97.predict(input);
                switch (alt97) {
            	case 1 :
            	    // RParser.g:933:10: variable_declaration
            	    {
            	    pushFollow(FOLLOW_variable_declaration_in_operation_procedure_declaration5011);
            	    variable_declaration370=variable_declaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, variable_declaration370.getTree());

            	    }
            	    break;

            	default :
            	    break loop97;
                }
            } while (true);

            // RParser.g:934:9: ( aux_variable_declaration )*
            loop98:
            do {
                int alt98=2;
                alt98 = dfa98.predict(input);
                switch (alt98) {
            	case 1 :
            	    // RParser.g:934:10: aux_variable_declaration
            	    {
            	    pushFollow(FOLLOW_aux_variable_declaration_in_operation_procedure_declaration5024);
            	    aux_variable_declaration371=aux_variable_declaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, aux_variable_declaration371.getTree());

            	    }
            	    break;

            	default :
            	    break loop98;
                }
            } while (true);

            pushFollow(FOLLOW_statement_sequence_in_operation_procedure_declaration5036);
            statement_sequence372=statement_sequence();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, statement_sequence372.getTree());
            END373=(Token)match(input,END,FOLLOW_END_in_operation_procedure_declaration5046); if (state.failed) return retval;
            // RParser.g:936:14: (id2= ident )?
            int alt99=2;
            int LA99_0 = input.LA(1);

            if ( (LA99_0==IDENTIFIER) ) {
                alt99=1;
            }
            switch (alt99) {
                case 1 :
                    // RParser.g:936:15: id2= ident
                    {
                    pushFollow(FOLLOW_ident_in_operation_procedure_declaration5052);
                    id2=ident();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       matchOperationIdent(id2.tree, id1.tree); 
                    }

                    }
                    break;

            }

            SEMICOLON374=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_operation_procedure_declaration5067); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (ColsAST)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "operation_procedure_declaration"

    public static class operation_recursive_procedure_declaration_return extends ParserRuleReturnScope {
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "operation_recursive_procedure_declaration"
    // RParser.g:940:1: operation_recursive_procedure_declaration : OPERATION id1= ident operation_formal_param_section ( COLON program_type_expression )? SEMICOLON ( affects_clause )* ( requires_clause )? ( ensures_clause )? RECURSIVE PROCEDURE decreasing_clause ( facility_declaration )* ( variable_declaration )* ( aux_variable_declaration )* statement_sequence END (id2= ident )? SEMICOLON -> ^( RECURSIVE_OPERATION_PROCEDURE ident operation_formal_param_section ( program_type_expression )? ( affects_clause )* ( requires_clause )? ( ensures_clause )? decreasing_clause ( facility_declaration )* ( variable_declaration )* ( aux_variable_declaration )* statement_sequence ) ;
    public final RParser.operation_recursive_procedure_declaration_return operation_recursive_procedure_declaration() throws RecognitionException {
        RParser.operation_recursive_procedure_declaration_return retval = new RParser.operation_recursive_procedure_declaration_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        Token OPERATION375=null;
        Token COLON377=null;
        Token SEMICOLON379=null;
        Token RECURSIVE383=null;
        Token PROCEDURE384=null;
        Token END390=null;
        Token SEMICOLON391=null;
        RParser.ident_return id1 = null;

        RParser.ident_return id2 = null;

        RParser.operation_formal_param_section_return operation_formal_param_section376 = null;

        RParser.program_type_expression_return program_type_expression378 = null;

        RParser.affects_clause_return affects_clause380 = null;

        RParser.requires_clause_return requires_clause381 = null;

        RParser.ensures_clause_return ensures_clause382 = null;

        RParser.decreasing_clause_return decreasing_clause385 = null;

        RParser.facility_declaration_return facility_declaration386 = null;

        RParser.variable_declaration_return variable_declaration387 = null;

        RParser.aux_variable_declaration_return aux_variable_declaration388 = null;

        RParser.statement_sequence_return statement_sequence389 = null;


        ColsAST OPERATION375_tree=null;
        ColsAST COLON377_tree=null;
        ColsAST SEMICOLON379_tree=null;
        ColsAST RECURSIVE383_tree=null;
        ColsAST PROCEDURE384_tree=null;
        ColsAST END390_tree=null;
        ColsAST SEMICOLON391_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_SEMICOLON=new RewriteRuleTokenStream(adaptor,"token SEMICOLON");
        RewriteRuleTokenStream stream_RECURSIVE=new RewriteRuleTokenStream(adaptor,"token RECURSIVE");
        RewriteRuleTokenStream stream_OPERATION=new RewriteRuleTokenStream(adaptor,"token OPERATION");
        RewriteRuleTokenStream stream_END=new RewriteRuleTokenStream(adaptor,"token END");
        RewriteRuleTokenStream stream_PROCEDURE=new RewriteRuleTokenStream(adaptor,"token PROCEDURE");
        RewriteRuleSubtreeStream stream_ensures_clause=new RewriteRuleSubtreeStream(adaptor,"rule ensures_clause");
        RewriteRuleSubtreeStream stream_operation_formal_param_section=new RewriteRuleSubtreeStream(adaptor,"rule operation_formal_param_section");
        RewriteRuleSubtreeStream stream_variable_declaration=new RewriteRuleSubtreeStream(adaptor,"rule variable_declaration");
        RewriteRuleSubtreeStream stream_facility_declaration=new RewriteRuleSubtreeStream(adaptor,"rule facility_declaration");
        RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
        RewriteRuleSubtreeStream stream_aux_variable_declaration=new RewriteRuleSubtreeStream(adaptor,"rule aux_variable_declaration");
        RewriteRuleSubtreeStream stream_affects_clause=new RewriteRuleSubtreeStream(adaptor,"rule affects_clause");
        RewriteRuleSubtreeStream stream_statement_sequence=new RewriteRuleSubtreeStream(adaptor,"rule statement_sequence");
        RewriteRuleSubtreeStream stream_program_type_expression=new RewriteRuleSubtreeStream(adaptor,"rule program_type_expression");
        RewriteRuleSubtreeStream stream_decreasing_clause=new RewriteRuleSubtreeStream(adaptor,"rule decreasing_clause");
        RewriteRuleSubtreeStream stream_requires_clause=new RewriteRuleSubtreeStream(adaptor,"rule requires_clause");
        try {
            // RParser.g:941:5: ( OPERATION id1= ident operation_formal_param_section ( COLON program_type_expression )? SEMICOLON ( affects_clause )* ( requires_clause )? ( ensures_clause )? RECURSIVE PROCEDURE decreasing_clause ( facility_declaration )* ( variable_declaration )* ( aux_variable_declaration )* statement_sequence END (id2= ident )? SEMICOLON -> ^( RECURSIVE_OPERATION_PROCEDURE ident operation_formal_param_section ( program_type_expression )? ( affects_clause )* ( requires_clause )? ( ensures_clause )? decreasing_clause ( facility_declaration )* ( variable_declaration )* ( aux_variable_declaration )* statement_sequence ) )
            // RParser.g:941:9: OPERATION id1= ident operation_formal_param_section ( COLON program_type_expression )? SEMICOLON ( affects_clause )* ( requires_clause )? ( ensures_clause )? RECURSIVE PROCEDURE decreasing_clause ( facility_declaration )* ( variable_declaration )* ( aux_variable_declaration )* statement_sequence END (id2= ident )? SEMICOLON
            {
            OPERATION375=(Token)match(input,OPERATION,FOLLOW_OPERATION_in_operation_recursive_procedure_declaration5091); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_OPERATION.add(OPERATION375);

            pushFollow(FOLLOW_ident_in_operation_recursive_procedure_declaration5095);
            id1=ident();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_ident.add(id1.getTree());
            pushFollow(FOLLOW_operation_formal_param_section_in_operation_recursive_procedure_declaration5105);
            operation_formal_param_section376=operation_formal_param_section();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_operation_formal_param_section.add(operation_formal_param_section376.getTree());
            // RParser.g:943:9: ( COLON program_type_expression )?
            int alt100=2;
            int LA100_0 = input.LA(1);

            if ( (LA100_0==COLON) ) {
                alt100=1;
            }
            switch (alt100) {
                case 1 :
                    // RParser.g:943:10: COLON program_type_expression
                    {
                    COLON377=(Token)match(input,COLON,FOLLOW_COLON_in_operation_recursive_procedure_declaration5116); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COLON.add(COLON377);

                    pushFollow(FOLLOW_program_type_expression_in_operation_recursive_procedure_declaration5118);
                    program_type_expression378=program_type_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_program_type_expression.add(program_type_expression378.getTree());

                    }
                    break;

            }

            SEMICOLON379=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_operation_recursive_procedure_declaration5122); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SEMICOLON.add(SEMICOLON379);

            // RParser.g:944:9: ( affects_clause )*
            loop101:
            do {
                int alt101=2;
                int LA101_0 = input.LA(1);

                if ( (LA101_0==ALTERS||LA101_0==CLEARS||LA101_0==EVALUATES||LA101_0==PRESERVES||LA101_0==REASSIGNS||LA101_0==REPLACES||LA101_0==RESTORES||LA101_0==UPDATES) ) {
                    alt101=1;
                }


                switch (alt101) {
            	case 1 :
            	    // RParser.g:944:9: affects_clause
            	    {
            	    pushFollow(FOLLOW_affects_clause_in_operation_recursive_procedure_declaration5132);
            	    affects_clause380=affects_clause();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_affects_clause.add(affects_clause380.getTree());

            	    }
            	    break;

            	default :
            	    break loop101;
                }
            } while (true);

            // RParser.g:945:9: ( requires_clause )?
            int alt102=2;
            int LA102_0 = input.LA(1);

            if ( (LA102_0==REQUIRES) ) {
                alt102=1;
            }
            switch (alt102) {
                case 1 :
                    // RParser.g:945:9: requires_clause
                    {
                    pushFollow(FOLLOW_requires_clause_in_operation_recursive_procedure_declaration5143);
                    requires_clause381=requires_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_requires_clause.add(requires_clause381.getTree());

                    }
                    break;

            }

            // RParser.g:946:9: ( ensures_clause )?
            int alt103=2;
            int LA103_0 = input.LA(1);

            if ( (LA103_0==ENSURES) ) {
                alt103=1;
            }
            switch (alt103) {
                case 1 :
                    // RParser.g:946:9: ensures_clause
                    {
                    pushFollow(FOLLOW_ensures_clause_in_operation_recursive_procedure_declaration5154);
                    ensures_clause382=ensures_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_ensures_clause.add(ensures_clause382.getTree());

                    }
                    break;

            }

            RECURSIVE383=(Token)match(input,RECURSIVE,FOLLOW_RECURSIVE_in_operation_recursive_procedure_declaration5165); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RECURSIVE.add(RECURSIVE383);

            PROCEDURE384=(Token)match(input,PROCEDURE,FOLLOW_PROCEDURE_in_operation_recursive_procedure_declaration5167); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_PROCEDURE.add(PROCEDURE384);

            pushFollow(FOLLOW_decreasing_clause_in_operation_recursive_procedure_declaration5177);
            decreasing_clause385=decreasing_clause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_decreasing_clause.add(decreasing_clause385.getTree());
            // RParser.g:949:9: ( facility_declaration )*
            loop104:
            do {
                int alt104=2;
                alt104 = dfa104.predict(input);
                switch (alt104) {
            	case 1 :
            	    // RParser.g:949:9: facility_declaration
            	    {
            	    pushFollow(FOLLOW_facility_declaration_in_operation_recursive_procedure_declaration5187);
            	    facility_declaration386=facility_declaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_facility_declaration.add(facility_declaration386.getTree());

            	    }
            	    break;

            	default :
            	    break loop104;
                }
            } while (true);

            // RParser.g:950:9: ( variable_declaration )*
            loop105:
            do {
                int alt105=2;
                alt105 = dfa105.predict(input);
                switch (alt105) {
            	case 1 :
            	    // RParser.g:950:9: variable_declaration
            	    {
            	    pushFollow(FOLLOW_variable_declaration_in_operation_recursive_procedure_declaration5198);
            	    variable_declaration387=variable_declaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_variable_declaration.add(variable_declaration387.getTree());

            	    }
            	    break;

            	default :
            	    break loop105;
                }
            } while (true);

            // RParser.g:951:9: ( aux_variable_declaration )*
            loop106:
            do {
                int alt106=2;
                alt106 = dfa106.predict(input);
                switch (alt106) {
            	case 1 :
            	    // RParser.g:951:9: aux_variable_declaration
            	    {
            	    pushFollow(FOLLOW_aux_variable_declaration_in_operation_recursive_procedure_declaration5209);
            	    aux_variable_declaration388=aux_variable_declaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_aux_variable_declaration.add(aux_variable_declaration388.getTree());

            	    }
            	    break;

            	default :
            	    break loop106;
                }
            } while (true);

            pushFollow(FOLLOW_statement_sequence_in_operation_recursive_procedure_declaration5220);
            statement_sequence389=statement_sequence();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_statement_sequence.add(statement_sequence389.getTree());
            END390=(Token)match(input,END,FOLLOW_END_in_operation_recursive_procedure_declaration5230); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_END.add(END390);

            // RParser.g:953:13: (id2= ident )?
            int alt107=2;
            int LA107_0 = input.LA(1);

            if ( (LA107_0==IDENTIFIER) ) {
                alt107=1;
            }
            switch (alt107) {
                case 1 :
                    // RParser.g:953:14: id2= ident
                    {
                    pushFollow(FOLLOW_ident_in_operation_recursive_procedure_declaration5235);
                    id2=ident();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_ident.add(id2.getTree());
                    if ( state.backtracking==0 ) {
                       matchOperationIdent(id2.tree, id1.tree); 
                    }

                    }
                    break;

            }

            SEMICOLON391=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_operation_recursive_procedure_declaration5249); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SEMICOLON.add(SEMICOLON391);



            // AST REWRITE
            // elements: affects_clause, program_type_expression, ident, variable_declaration, statement_sequence, aux_variable_declaration, ensures_clause, facility_declaration, decreasing_clause, requires_clause, operation_formal_param_section
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (ColsAST)adaptor.nil();
            // 954:19: -> ^( RECURSIVE_OPERATION_PROCEDURE ident operation_formal_param_section ( program_type_expression )? ( affects_clause )* ( requires_clause )? ( ensures_clause )? decreasing_clause ( facility_declaration )* ( variable_declaration )* ( aux_variable_declaration )* statement_sequence )
            {
                // RParser.g:955:9: ^( RECURSIVE_OPERATION_PROCEDURE ident operation_formal_param_section ( program_type_expression )? ( affects_clause )* ( requires_clause )? ( ensures_clause )? decreasing_clause ( facility_declaration )* ( variable_declaration )* ( aux_variable_declaration )* statement_sequence )
                {
                ColsAST root_1 = (ColsAST)adaptor.nil();
                root_1 = (ColsAST)adaptor.becomeRoot((ColsAST)adaptor.create(RECURSIVE_OPERATION_PROCEDURE, "RECURSIVE_OPERATION_PROCEDURE"), root_1);

                adaptor.addChild(root_1, stream_ident.nextTree());
                adaptor.addChild(root_1, stream_operation_formal_param_section.nextTree());
                // RParser.g:957:9: ( program_type_expression )?
                if ( stream_program_type_expression.hasNext() ) {
                    adaptor.addChild(root_1, stream_program_type_expression.nextTree());

                }
                stream_program_type_expression.reset();
                // RParser.g:958:9: ( affects_clause )*
                while ( stream_affects_clause.hasNext() ) {
                    adaptor.addChild(root_1, stream_affects_clause.nextTree());

                }
                stream_affects_clause.reset();
                // RParser.g:959:9: ( requires_clause )?
                if ( stream_requires_clause.hasNext() ) {
                    adaptor.addChild(root_1, stream_requires_clause.nextTree());

                }
                stream_requires_clause.reset();
                // RParser.g:960:9: ( ensures_clause )?
                if ( stream_ensures_clause.hasNext() ) {
                    adaptor.addChild(root_1, stream_ensures_clause.nextTree());

                }
                stream_ensures_clause.reset();
                adaptor.addChild(root_1, stream_decreasing_clause.nextTree());
                // RParser.g:962:9: ( facility_declaration )*
                while ( stream_facility_declaration.hasNext() ) {
                    adaptor.addChild(root_1, stream_facility_declaration.nextTree());

                }
                stream_facility_declaration.reset();
                // RParser.g:963:9: ( variable_declaration )*
                while ( stream_variable_declaration.hasNext() ) {
                    adaptor.addChild(root_1, stream_variable_declaration.nextTree());

                }
                stream_variable_declaration.reset();
                // RParser.g:964:9: ( aux_variable_declaration )*
                while ( stream_aux_variable_declaration.hasNext() ) {
                    adaptor.addChild(root_1, stream_aux_variable_declaration.nextTree());

                }
                stream_aux_variable_declaration.reset();
                adaptor.addChild(root_1, stream_statement_sequence.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (ColsAST)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "operation_recursive_procedure_declaration"

    public static class operation_declaration_return extends ParserRuleReturnScope {
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "operation_declaration"
    // RParser.g:968:1: operation_declaration : OPERATION ident ( operation_formal_param_section ) ( COLON program_type_expression )? SEMICOLON ( affects_clause )* ( requires_clause )? ( ensures_clause )? ;
    public final RParser.operation_declaration_return operation_declaration() throws RecognitionException {
        RParser.operation_declaration_return retval = new RParser.operation_declaration_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        Token OPERATION392=null;
        Token COLON395=null;
        Token SEMICOLON397=null;
        RParser.ident_return ident393 = null;

        RParser.operation_formal_param_section_return operation_formal_param_section394 = null;

        RParser.program_type_expression_return program_type_expression396 = null;

        RParser.affects_clause_return affects_clause398 = null;

        RParser.requires_clause_return requires_clause399 = null;

        RParser.ensures_clause_return ensures_clause400 = null;


        ColsAST OPERATION392_tree=null;
        ColsAST COLON395_tree=null;
        ColsAST SEMICOLON397_tree=null;

        try {
            // RParser.g:969:5: ( OPERATION ident ( operation_formal_param_section ) ( COLON program_type_expression )? SEMICOLON ( affects_clause )* ( requires_clause )? ( ensures_clause )? )
            // RParser.g:969:9: OPERATION ident ( operation_formal_param_section ) ( COLON program_type_expression )? SEMICOLON ( affects_clause )* ( requires_clause )? ( ensures_clause )?
            {
            root_0 = (ColsAST)adaptor.nil();

            OPERATION392=(Token)match(input,OPERATION,FOLLOW_OPERATION_in_operation_declaration5393); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            OPERATION392_tree = (ColsAST)adaptor.create(OPERATION392);
            root_0 = (ColsAST)adaptor.becomeRoot(OPERATION392_tree, root_0);
            }
            pushFollow(FOLLOW_ident_in_operation_declaration5396);
            ident393=ident();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, ident393.getTree());
            // RParser.g:970:9: ( operation_formal_param_section )
            // RParser.g:970:10: operation_formal_param_section
            {
            pushFollow(FOLLOW_operation_formal_param_section_in_operation_declaration5407);
            operation_formal_param_section394=operation_formal_param_section();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, operation_formal_param_section394.getTree());

            }

            // RParser.g:971:9: ( COLON program_type_expression )?
            int alt108=2;
            int LA108_0 = input.LA(1);

            if ( (LA108_0==COLON) ) {
                alt108=1;
            }
            switch (alt108) {
                case 1 :
                    // RParser.g:971:10: COLON program_type_expression
                    {
                    COLON395=(Token)match(input,COLON,FOLLOW_COLON_in_operation_declaration5419); if (state.failed) return retval;
                    pushFollow(FOLLOW_program_type_expression_in_operation_declaration5422);
                    program_type_expression396=program_type_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, program_type_expression396.getTree());

                    }
                    break;

            }

            SEMICOLON397=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_operation_declaration5426); if (state.failed) return retval;
            // RParser.g:972:9: ( affects_clause )*
            loop109:
            do {
                int alt109=2;
                int LA109_0 = input.LA(1);

                if ( (LA109_0==ALTERS||LA109_0==CLEARS||LA109_0==EVALUATES||LA109_0==PRESERVES||LA109_0==REASSIGNS||LA109_0==REPLACES||LA109_0==RESTORES||LA109_0==UPDATES) ) {
                    alt109=1;
                }


                switch (alt109) {
            	case 1 :
            	    // RParser.g:972:10: affects_clause
            	    {
            	    pushFollow(FOLLOW_affects_clause_in_operation_declaration5438);
            	    affects_clause398=affects_clause();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, affects_clause398.getTree());

            	    }
            	    break;

            	default :
            	    break loop109;
                }
            } while (true);

            // RParser.g:973:9: ( requires_clause )?
            int alt110=2;
            int LA110_0 = input.LA(1);

            if ( (LA110_0==REQUIRES) ) {
                alt110=1;
            }
            switch (alt110) {
                case 1 :
                    // RParser.g:973:10: requires_clause
                    {
                    pushFollow(FOLLOW_requires_clause_in_operation_declaration5451);
                    requires_clause399=requires_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, requires_clause399.getTree());

                    }
                    break;

            }

            // RParser.g:974:9: ( ensures_clause )?
            int alt111=2;
            int LA111_0 = input.LA(1);

            if ( (LA111_0==ENSURES) ) {
                alt111=1;
            }
            switch (alt111) {
                case 1 :
                    // RParser.g:974:10: ensures_clause
                    {
                    pushFollow(FOLLOW_ensures_clause_in_operation_declaration5464);
                    ensures_clause400=ensures_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, ensures_clause400.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (ColsAST)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "operation_declaration"

    public static class performance_operation_declaration_return extends ParserRuleReturnScope {
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "performance_operation_declaration"
    // RParser.g:977:1: performance_operation_declaration : OPERATION ident ( operation_formal_param_section ) ( COLON program_type_expression )? SEMICOLON ( ensures_clause )* ( duration_clause )? ( mainp_disp_clause )? ;
    public final RParser.performance_operation_declaration_return performance_operation_declaration() throws RecognitionException {
        RParser.performance_operation_declaration_return retval = new RParser.performance_operation_declaration_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        Token OPERATION401=null;
        Token COLON404=null;
        Token SEMICOLON406=null;
        RParser.ident_return ident402 = null;

        RParser.operation_formal_param_section_return operation_formal_param_section403 = null;

        RParser.program_type_expression_return program_type_expression405 = null;

        RParser.ensures_clause_return ensures_clause407 = null;

        RParser.duration_clause_return duration_clause408 = null;

        RParser.mainp_disp_clause_return mainp_disp_clause409 = null;


        ColsAST OPERATION401_tree=null;
        ColsAST COLON404_tree=null;
        ColsAST SEMICOLON406_tree=null;

        try {
            // RParser.g:978:5: ( OPERATION ident ( operation_formal_param_section ) ( COLON program_type_expression )? SEMICOLON ( ensures_clause )* ( duration_clause )? ( mainp_disp_clause )? )
            // RParser.g:978:9: OPERATION ident ( operation_formal_param_section ) ( COLON program_type_expression )? SEMICOLON ( ensures_clause )* ( duration_clause )? ( mainp_disp_clause )?
            {
            root_0 = (ColsAST)adaptor.nil();

            OPERATION401=(Token)match(input,OPERATION,FOLLOW_OPERATION_in_performance_operation_declaration5489); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            OPERATION401_tree = (ColsAST)adaptor.create(OPERATION401);
            root_0 = (ColsAST)adaptor.becomeRoot(OPERATION401_tree, root_0);
            }
            pushFollow(FOLLOW_ident_in_performance_operation_declaration5492);
            ident402=ident();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, ident402.getTree());
            // RParser.g:979:9: ( operation_formal_param_section )
            // RParser.g:979:10: operation_formal_param_section
            {
            pushFollow(FOLLOW_operation_formal_param_section_in_performance_operation_declaration5503);
            operation_formal_param_section403=operation_formal_param_section();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, operation_formal_param_section403.getTree());

            }

            // RParser.g:980:9: ( COLON program_type_expression )?
            int alt112=2;
            int LA112_0 = input.LA(1);

            if ( (LA112_0==COLON) ) {
                alt112=1;
            }
            switch (alt112) {
                case 1 :
                    // RParser.g:980:10: COLON program_type_expression
                    {
                    COLON404=(Token)match(input,COLON,FOLLOW_COLON_in_performance_operation_declaration5515); if (state.failed) return retval;
                    pushFollow(FOLLOW_program_type_expression_in_performance_operation_declaration5518);
                    program_type_expression405=program_type_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, program_type_expression405.getTree());

                    }
                    break;

            }

            SEMICOLON406=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_performance_operation_declaration5522); if (state.failed) return retval;
            // RParser.g:981:9: ( ensures_clause )*
            loop113:
            do {
                int alt113=2;
                int LA113_0 = input.LA(1);

                if ( (LA113_0==ENSURES) ) {
                    alt113=1;
                }


                switch (alt113) {
            	case 1 :
            	    // RParser.g:981:10: ensures_clause
            	    {
            	    pushFollow(FOLLOW_ensures_clause_in_performance_operation_declaration5534);
            	    ensures_clause407=ensures_clause();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, ensures_clause407.getTree());

            	    }
            	    break;

            	default :
            	    break loop113;
                }
            } while (true);

            // RParser.g:982:9: ( duration_clause )?
            int alt114=2;
            int LA114_0 = input.LA(1);

            if ( (LA114_0==DURATION) ) {
                alt114=1;
            }
            switch (alt114) {
                case 1 :
                    // RParser.g:982:10: duration_clause
                    {
                    pushFollow(FOLLOW_duration_clause_in_performance_operation_declaration5547);
                    duration_clause408=duration_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, duration_clause408.getTree());

                    }
                    break;

            }

            // RParser.g:983:9: ( mainp_disp_clause )?
            int alt115=2;
            int LA115_0 = input.LA(1);

            if ( (LA115_0==MAINP_DISP) ) {
                alt115=1;
            }
            switch (alt115) {
                case 1 :
                    // RParser.g:983:10: mainp_disp_clause
                    {
                    pushFollow(FOLLOW_mainp_disp_clause_in_performance_operation_declaration5560);
                    mainp_disp_clause409=mainp_disp_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, mainp_disp_clause409.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (ColsAST)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "performance_operation_declaration"

    public static class aux_operation_declaration_return extends ParserRuleReturnScope {
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "aux_operation_declaration"
    // RParser.g:986:1: aux_operation_declaration : AUXILIARY OPERATION ident operation_formal_param_section ( COLON program_type_expression )? SEMICOLON ( affects_clause )* ( requires_clause )? ( ensures_clause )? -> ^( AUX_OPERATION ident operation_formal_param_section ( program_type_expression )? ( affects_clause )* ( requires_clause )? ( ensures_clause )? ) ;
    public final RParser.aux_operation_declaration_return aux_operation_declaration() throws RecognitionException {
        RParser.aux_operation_declaration_return retval = new RParser.aux_operation_declaration_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        Token AUXILIARY410=null;
        Token OPERATION411=null;
        Token COLON414=null;
        Token SEMICOLON416=null;
        RParser.ident_return ident412 = null;

        RParser.operation_formal_param_section_return operation_formal_param_section413 = null;

        RParser.program_type_expression_return program_type_expression415 = null;

        RParser.affects_clause_return affects_clause417 = null;

        RParser.requires_clause_return requires_clause418 = null;

        RParser.ensures_clause_return ensures_clause419 = null;


        ColsAST AUXILIARY410_tree=null;
        ColsAST OPERATION411_tree=null;
        ColsAST COLON414_tree=null;
        ColsAST SEMICOLON416_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_SEMICOLON=new RewriteRuleTokenStream(adaptor,"token SEMICOLON");
        RewriteRuleTokenStream stream_OPERATION=new RewriteRuleTokenStream(adaptor,"token OPERATION");
        RewriteRuleTokenStream stream_AUXILIARY=new RewriteRuleTokenStream(adaptor,"token AUXILIARY");
        RewriteRuleSubtreeStream stream_ensures_clause=new RewriteRuleSubtreeStream(adaptor,"rule ensures_clause");
        RewriteRuleSubtreeStream stream_operation_formal_param_section=new RewriteRuleSubtreeStream(adaptor,"rule operation_formal_param_section");
        RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
        RewriteRuleSubtreeStream stream_affects_clause=new RewriteRuleSubtreeStream(adaptor,"rule affects_clause");
        RewriteRuleSubtreeStream stream_program_type_expression=new RewriteRuleSubtreeStream(adaptor,"rule program_type_expression");
        RewriteRuleSubtreeStream stream_requires_clause=new RewriteRuleSubtreeStream(adaptor,"rule requires_clause");
        try {
            // RParser.g:987:5: ( AUXILIARY OPERATION ident operation_formal_param_section ( COLON program_type_expression )? SEMICOLON ( affects_clause )* ( requires_clause )? ( ensures_clause )? -> ^( AUX_OPERATION ident operation_formal_param_section ( program_type_expression )? ( affects_clause )* ( requires_clause )? ( ensures_clause )? ) )
            // RParser.g:987:9: AUXILIARY OPERATION ident operation_formal_param_section ( COLON program_type_expression )? SEMICOLON ( affects_clause )* ( requires_clause )? ( ensures_clause )?
            {
            AUXILIARY410=(Token)match(input,AUXILIARY,FOLLOW_AUXILIARY_in_aux_operation_declaration5581); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_AUXILIARY.add(AUXILIARY410);

            OPERATION411=(Token)match(input,OPERATION,FOLLOW_OPERATION_in_aux_operation_declaration5583); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_OPERATION.add(OPERATION411);

            pushFollow(FOLLOW_ident_in_aux_operation_declaration5585);
            ident412=ident();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_ident.add(ident412.getTree());
            pushFollow(FOLLOW_operation_formal_param_section_in_aux_operation_declaration5595);
            operation_formal_param_section413=operation_formal_param_section();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_operation_formal_param_section.add(operation_formal_param_section413.getTree());
            // RParser.g:989:9: ( COLON program_type_expression )?
            int alt116=2;
            int LA116_0 = input.LA(1);

            if ( (LA116_0==COLON) ) {
                alt116=1;
            }
            switch (alt116) {
                case 1 :
                    // RParser.g:989:10: COLON program_type_expression
                    {
                    COLON414=(Token)match(input,COLON,FOLLOW_COLON_in_aux_operation_declaration5606); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COLON.add(COLON414);

                    pushFollow(FOLLOW_program_type_expression_in_aux_operation_declaration5608);
                    program_type_expression415=program_type_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_program_type_expression.add(program_type_expression415.getTree());

                    }
                    break;

            }

            SEMICOLON416=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_aux_operation_declaration5612); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SEMICOLON.add(SEMICOLON416);

            // RParser.g:990:9: ( affects_clause )*
            loop117:
            do {
                int alt117=2;
                int LA117_0 = input.LA(1);

                if ( (LA117_0==ALTERS||LA117_0==CLEARS||LA117_0==EVALUATES||LA117_0==PRESERVES||LA117_0==REASSIGNS||LA117_0==REPLACES||LA117_0==RESTORES||LA117_0==UPDATES) ) {
                    alt117=1;
                }


                switch (alt117) {
            	case 1 :
            	    // RParser.g:990:9: affects_clause
            	    {
            	    pushFollow(FOLLOW_affects_clause_in_aux_operation_declaration5622);
            	    affects_clause417=affects_clause();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_affects_clause.add(affects_clause417.getTree());

            	    }
            	    break;

            	default :
            	    break loop117;
                }
            } while (true);

            // RParser.g:991:9: ( requires_clause )?
            int alt118=2;
            int LA118_0 = input.LA(1);

            if ( (LA118_0==REQUIRES) ) {
                alt118=1;
            }
            switch (alt118) {
                case 1 :
                    // RParser.g:991:9: requires_clause
                    {
                    pushFollow(FOLLOW_requires_clause_in_aux_operation_declaration5633);
                    requires_clause418=requires_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_requires_clause.add(requires_clause418.getTree());

                    }
                    break;

            }

            // RParser.g:992:9: ( ensures_clause )?
            int alt119=2;
            int LA119_0 = input.LA(1);

            if ( (LA119_0==ENSURES) ) {
                alt119=1;
            }
            switch (alt119) {
                case 1 :
                    // RParser.g:992:9: ensures_clause
                    {
                    pushFollow(FOLLOW_ensures_clause_in_aux_operation_declaration5644);
                    ensures_clause419=ensures_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_ensures_clause.add(ensures_clause419.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: ensures_clause, operation_formal_param_section, program_type_expression, requires_clause, affects_clause, ident
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (ColsAST)adaptor.nil();
            // 992:25: -> ^( AUX_OPERATION ident operation_formal_param_section ( program_type_expression )? ( affects_clause )* ( requires_clause )? ( ensures_clause )? )
            {
                // RParser.g:993:9: ^( AUX_OPERATION ident operation_formal_param_section ( program_type_expression )? ( affects_clause )* ( requires_clause )? ( ensures_clause )? )
                {
                ColsAST root_1 = (ColsAST)adaptor.nil();
                root_1 = (ColsAST)adaptor.becomeRoot((ColsAST)adaptor.create(AUX_OPERATION, "AUX_OPERATION"), root_1);

                adaptor.addChild(root_1, stream_ident.nextTree());
                adaptor.addChild(root_1, stream_operation_formal_param_section.nextTree());
                // RParser.g:995:9: ( program_type_expression )?
                if ( stream_program_type_expression.hasNext() ) {
                    adaptor.addChild(root_1, stream_program_type_expression.nextTree());

                }
                stream_program_type_expression.reset();
                // RParser.g:996:9: ( affects_clause )*
                while ( stream_affects_clause.hasNext() ) {
                    adaptor.addChild(root_1, stream_affects_clause.nextTree());

                }
                stream_affects_clause.reset();
                // RParser.g:997:9: ( requires_clause )?
                if ( stream_requires_clause.hasNext() ) {
                    adaptor.addChild(root_1, stream_requires_clause.nextTree());

                }
                stream_requires_clause.reset();
                // RParser.g:998:9: ( ensures_clause )?
                if ( stream_ensures_clause.hasNext() ) {
                    adaptor.addChild(root_1, stream_ensures_clause.nextTree());

                }
                stream_ensures_clause.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (ColsAST)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "aux_operation_declaration"

    public static class procedure_declaration_return extends ParserRuleReturnScope {
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "procedure_declaration"
    // RParser.g:1001:1: procedure_declaration : PROCEDURE id1= ident ( operation_formal_param_section ) ( COLON program_type_expression )? SEMICOLON ( affects_clause )* ( decreasing_clause )? ( facility_declaration )* ( variable_declaration )* ( aux_variable_declaration )* statement_sequence END (id2= ident )? SEMICOLON ;
    public final RParser.procedure_declaration_return procedure_declaration() throws RecognitionException {
        RParser.procedure_declaration_return retval = new RParser.procedure_declaration_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        Token PROCEDURE420=null;
        Token COLON422=null;
        Token SEMICOLON424=null;
        Token END431=null;
        Token SEMICOLON432=null;
        RParser.ident_return id1 = null;

        RParser.ident_return id2 = null;

        RParser.operation_formal_param_section_return operation_formal_param_section421 = null;

        RParser.program_type_expression_return program_type_expression423 = null;

        RParser.affects_clause_return affects_clause425 = null;

        RParser.decreasing_clause_return decreasing_clause426 = null;

        RParser.facility_declaration_return facility_declaration427 = null;

        RParser.variable_declaration_return variable_declaration428 = null;

        RParser.aux_variable_declaration_return aux_variable_declaration429 = null;

        RParser.statement_sequence_return statement_sequence430 = null;


        ColsAST PROCEDURE420_tree=null;
        ColsAST COLON422_tree=null;
        ColsAST SEMICOLON424_tree=null;
        ColsAST END431_tree=null;
        ColsAST SEMICOLON432_tree=null;

        try {
            // RParser.g:1002:5: ( PROCEDURE id1= ident ( operation_formal_param_section ) ( COLON program_type_expression )? SEMICOLON ( affects_clause )* ( decreasing_clause )? ( facility_declaration )* ( variable_declaration )* ( aux_variable_declaration )* statement_sequence END (id2= ident )? SEMICOLON )
            // RParser.g:1002:9: PROCEDURE id1= ident ( operation_formal_param_section ) ( COLON program_type_expression )? SEMICOLON ( affects_clause )* ( decreasing_clause )? ( facility_declaration )* ( variable_declaration )* ( aux_variable_declaration )* statement_sequence END (id2= ident )? SEMICOLON
            {
            root_0 = (ColsAST)adaptor.nil();

            PROCEDURE420=(Token)match(input,PROCEDURE,FOLLOW_PROCEDURE_in_procedure_declaration5734); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            PROCEDURE420_tree = (ColsAST)adaptor.create(PROCEDURE420);
            root_0 = (ColsAST)adaptor.becomeRoot(PROCEDURE420_tree, root_0);
            }
            pushFollow(FOLLOW_ident_in_procedure_declaration5739);
            id1=ident();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, id1.getTree());
            // RParser.g:1003:9: ( operation_formal_param_section )
            // RParser.g:1003:10: operation_formal_param_section
            {
            pushFollow(FOLLOW_operation_formal_param_section_in_procedure_declaration5750);
            operation_formal_param_section421=operation_formal_param_section();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, operation_formal_param_section421.getTree());

            }

            // RParser.g:1004:9: ( COLON program_type_expression )?
            int alt120=2;
            int LA120_0 = input.LA(1);

            if ( (LA120_0==COLON) ) {
                alt120=1;
            }
            switch (alt120) {
                case 1 :
                    // RParser.g:1004:10: COLON program_type_expression
                    {
                    COLON422=(Token)match(input,COLON,FOLLOW_COLON_in_procedure_declaration5762); if (state.failed) return retval;
                    pushFollow(FOLLOW_program_type_expression_in_procedure_declaration5765);
                    program_type_expression423=program_type_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, program_type_expression423.getTree());

                    }
                    break;

            }

            SEMICOLON424=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_procedure_declaration5769); if (state.failed) return retval;
            // RParser.g:1005:9: ( affects_clause )*
            loop121:
            do {
                int alt121=2;
                alt121 = dfa121.predict(input);
                switch (alt121) {
            	case 1 :
            	    // RParser.g:1005:10: affects_clause
            	    {
            	    pushFollow(FOLLOW_affects_clause_in_procedure_declaration5781);
            	    affects_clause425=affects_clause();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, affects_clause425.getTree());

            	    }
            	    break;

            	default :
            	    break loop121;
                }
            } while (true);

            // RParser.g:1006:9: ( decreasing_clause )?
            int alt122=2;
            alt122 = dfa122.predict(input);
            switch (alt122) {
                case 1 :
                    // RParser.g:1006:10: decreasing_clause
                    {
                    pushFollow(FOLLOW_decreasing_clause_in_procedure_declaration5794);
                    decreasing_clause426=decreasing_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, decreasing_clause426.getTree());

                    }
                    break;

            }

            // RParser.g:1007:9: ( facility_declaration )*
            loop123:
            do {
                int alt123=2;
                alt123 = dfa123.predict(input);
                switch (alt123) {
            	case 1 :
            	    // RParser.g:1007:10: facility_declaration
            	    {
            	    pushFollow(FOLLOW_facility_declaration_in_procedure_declaration5807);
            	    facility_declaration427=facility_declaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, facility_declaration427.getTree());

            	    }
            	    break;

            	default :
            	    break loop123;
                }
            } while (true);

            // RParser.g:1008:9: ( variable_declaration )*
            loop124:
            do {
                int alt124=2;
                alt124 = dfa124.predict(input);
                switch (alt124) {
            	case 1 :
            	    // RParser.g:1008:10: variable_declaration
            	    {
            	    pushFollow(FOLLOW_variable_declaration_in_procedure_declaration5820);
            	    variable_declaration428=variable_declaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, variable_declaration428.getTree());

            	    }
            	    break;

            	default :
            	    break loop124;
                }
            } while (true);

            // RParser.g:1009:9: ( aux_variable_declaration )*
            loop125:
            do {
                int alt125=2;
                alt125 = dfa125.predict(input);
                switch (alt125) {
            	case 1 :
            	    // RParser.g:1009:10: aux_variable_declaration
            	    {
            	    pushFollow(FOLLOW_aux_variable_declaration_in_procedure_declaration5833);
            	    aux_variable_declaration429=aux_variable_declaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, aux_variable_declaration429.getTree());

            	    }
            	    break;

            	default :
            	    break loop125;
                }
            } while (true);

            pushFollow(FOLLOW_statement_sequence_in_procedure_declaration5845);
            statement_sequence430=statement_sequence();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, statement_sequence430.getTree());
            END431=(Token)match(input,END,FOLLOW_END_in_procedure_declaration5855); if (state.failed) return retval;
            // RParser.g:1011:14: (id2= ident )?
            int alt126=2;
            int LA126_0 = input.LA(1);

            if ( (LA126_0==IDENTIFIER) ) {
                alt126=1;
            }
            switch (alt126) {
                case 1 :
                    // RParser.g:1011:15: id2= ident
                    {
                    pushFollow(FOLLOW_ident_in_procedure_declaration5861);
                    id2=ident();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       matchOperationIdent(id2.tree, id1.tree); 
                    }

                    }
                    break;

            }

            SEMICOLON432=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_procedure_declaration5876); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (ColsAST)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "procedure_declaration"

    public static class recursive_procedure_declaration_return extends ParserRuleReturnScope {
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "recursive_procedure_declaration"
    // RParser.g:1015:1: recursive_procedure_declaration : RECURSIVE PROCEDURE id1= ident operation_formal_param_section ( COLON program_type_expression )? SEMICOLON ( affects_clause )* ( decreasing_clause )? ( facility_declaration )* ( variable_declaration )* ( aux_variable_declaration )* statement_sequence END (id2= ident )? SEMICOLON -> ^( RECURSIVE_PROCEDURE ident operation_formal_param_section ( program_type_expression )? ( affects_clause )* ( decreasing_clause )? ( facility_declaration )* ( variable_declaration )* ( aux_variable_declaration )* statement_sequence ) ;
    public final RParser.recursive_procedure_declaration_return recursive_procedure_declaration() throws RecognitionException {
        RParser.recursive_procedure_declaration_return retval = new RParser.recursive_procedure_declaration_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        Token RECURSIVE433=null;
        Token PROCEDURE434=null;
        Token COLON436=null;
        Token SEMICOLON438=null;
        Token END445=null;
        Token SEMICOLON446=null;
        RParser.ident_return id1 = null;

        RParser.ident_return id2 = null;

        RParser.operation_formal_param_section_return operation_formal_param_section435 = null;

        RParser.program_type_expression_return program_type_expression437 = null;

        RParser.affects_clause_return affects_clause439 = null;

        RParser.decreasing_clause_return decreasing_clause440 = null;

        RParser.facility_declaration_return facility_declaration441 = null;

        RParser.variable_declaration_return variable_declaration442 = null;

        RParser.aux_variable_declaration_return aux_variable_declaration443 = null;

        RParser.statement_sequence_return statement_sequence444 = null;


        ColsAST RECURSIVE433_tree=null;
        ColsAST PROCEDURE434_tree=null;
        ColsAST COLON436_tree=null;
        ColsAST SEMICOLON438_tree=null;
        ColsAST END445_tree=null;
        ColsAST SEMICOLON446_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_SEMICOLON=new RewriteRuleTokenStream(adaptor,"token SEMICOLON");
        RewriteRuleTokenStream stream_RECURSIVE=new RewriteRuleTokenStream(adaptor,"token RECURSIVE");
        RewriteRuleTokenStream stream_END=new RewriteRuleTokenStream(adaptor,"token END");
        RewriteRuleTokenStream stream_PROCEDURE=new RewriteRuleTokenStream(adaptor,"token PROCEDURE");
        RewriteRuleSubtreeStream stream_operation_formal_param_section=new RewriteRuleSubtreeStream(adaptor,"rule operation_formal_param_section");
        RewriteRuleSubtreeStream stream_variable_declaration=new RewriteRuleSubtreeStream(adaptor,"rule variable_declaration");
        RewriteRuleSubtreeStream stream_facility_declaration=new RewriteRuleSubtreeStream(adaptor,"rule facility_declaration");
        RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
        RewriteRuleSubtreeStream stream_aux_variable_declaration=new RewriteRuleSubtreeStream(adaptor,"rule aux_variable_declaration");
        RewriteRuleSubtreeStream stream_affects_clause=new RewriteRuleSubtreeStream(adaptor,"rule affects_clause");
        RewriteRuleSubtreeStream stream_statement_sequence=new RewriteRuleSubtreeStream(adaptor,"rule statement_sequence");
        RewriteRuleSubtreeStream stream_program_type_expression=new RewriteRuleSubtreeStream(adaptor,"rule program_type_expression");
        RewriteRuleSubtreeStream stream_decreasing_clause=new RewriteRuleSubtreeStream(adaptor,"rule decreasing_clause");
        try {
            // RParser.g:1016:5: ( RECURSIVE PROCEDURE id1= ident operation_formal_param_section ( COLON program_type_expression )? SEMICOLON ( affects_clause )* ( decreasing_clause )? ( facility_declaration )* ( variable_declaration )* ( aux_variable_declaration )* statement_sequence END (id2= ident )? SEMICOLON -> ^( RECURSIVE_PROCEDURE ident operation_formal_param_section ( program_type_expression )? ( affects_clause )* ( decreasing_clause )? ( facility_declaration )* ( variable_declaration )* ( aux_variable_declaration )* statement_sequence ) )
            // RParser.g:1016:9: RECURSIVE PROCEDURE id1= ident operation_formal_param_section ( COLON program_type_expression )? SEMICOLON ( affects_clause )* ( decreasing_clause )? ( facility_declaration )* ( variable_declaration )* ( aux_variable_declaration )* statement_sequence END (id2= ident )? SEMICOLON
            {
            RECURSIVE433=(Token)match(input,RECURSIVE,FOLLOW_RECURSIVE_in_recursive_procedure_declaration5900); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RECURSIVE.add(RECURSIVE433);

            PROCEDURE434=(Token)match(input,PROCEDURE,FOLLOW_PROCEDURE_in_recursive_procedure_declaration5902); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_PROCEDURE.add(PROCEDURE434);

            pushFollow(FOLLOW_ident_in_recursive_procedure_declaration5906);
            id1=ident();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_ident.add(id1.getTree());
            pushFollow(FOLLOW_operation_formal_param_section_in_recursive_procedure_declaration5916);
            operation_formal_param_section435=operation_formal_param_section();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_operation_formal_param_section.add(operation_formal_param_section435.getTree());
            // RParser.g:1018:9: ( COLON program_type_expression )?
            int alt127=2;
            int LA127_0 = input.LA(1);

            if ( (LA127_0==COLON) ) {
                alt127=1;
            }
            switch (alt127) {
                case 1 :
                    // RParser.g:1018:10: COLON program_type_expression
                    {
                    COLON436=(Token)match(input,COLON,FOLLOW_COLON_in_recursive_procedure_declaration5927); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COLON.add(COLON436);

                    pushFollow(FOLLOW_program_type_expression_in_recursive_procedure_declaration5929);
                    program_type_expression437=program_type_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_program_type_expression.add(program_type_expression437.getTree());

                    }
                    break;

            }

            SEMICOLON438=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_recursive_procedure_declaration5933); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SEMICOLON.add(SEMICOLON438);

            // RParser.g:1019:9: ( affects_clause )*
            loop128:
            do {
                int alt128=2;
                alt128 = dfa128.predict(input);
                switch (alt128) {
            	case 1 :
            	    // RParser.g:1019:9: affects_clause
            	    {
            	    pushFollow(FOLLOW_affects_clause_in_recursive_procedure_declaration5943);
            	    affects_clause439=affects_clause();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_affects_clause.add(affects_clause439.getTree());

            	    }
            	    break;

            	default :
            	    break loop128;
                }
            } while (true);

            // RParser.g:1020:9: ( decreasing_clause )?
            int alt129=2;
            alt129 = dfa129.predict(input);
            switch (alt129) {
                case 1 :
                    // RParser.g:1020:9: decreasing_clause
                    {
                    pushFollow(FOLLOW_decreasing_clause_in_recursive_procedure_declaration5954);
                    decreasing_clause440=decreasing_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_decreasing_clause.add(decreasing_clause440.getTree());

                    }
                    break;

            }

            // RParser.g:1021:9: ( facility_declaration )*
            loop130:
            do {
                int alt130=2;
                alt130 = dfa130.predict(input);
                switch (alt130) {
            	case 1 :
            	    // RParser.g:1021:9: facility_declaration
            	    {
            	    pushFollow(FOLLOW_facility_declaration_in_recursive_procedure_declaration5965);
            	    facility_declaration441=facility_declaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_facility_declaration.add(facility_declaration441.getTree());

            	    }
            	    break;

            	default :
            	    break loop130;
                }
            } while (true);

            // RParser.g:1022:9: ( variable_declaration )*
            loop131:
            do {
                int alt131=2;
                alt131 = dfa131.predict(input);
                switch (alt131) {
            	case 1 :
            	    // RParser.g:1022:9: variable_declaration
            	    {
            	    pushFollow(FOLLOW_variable_declaration_in_recursive_procedure_declaration5976);
            	    variable_declaration442=variable_declaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_variable_declaration.add(variable_declaration442.getTree());

            	    }
            	    break;

            	default :
            	    break loop131;
                }
            } while (true);

            // RParser.g:1023:9: ( aux_variable_declaration )*
            loop132:
            do {
                int alt132=2;
                alt132 = dfa132.predict(input);
                switch (alt132) {
            	case 1 :
            	    // RParser.g:1023:9: aux_variable_declaration
            	    {
            	    pushFollow(FOLLOW_aux_variable_declaration_in_recursive_procedure_declaration5987);
            	    aux_variable_declaration443=aux_variable_declaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_aux_variable_declaration.add(aux_variable_declaration443.getTree());

            	    }
            	    break;

            	default :
            	    break loop132;
                }
            } while (true);

            pushFollow(FOLLOW_statement_sequence_in_recursive_procedure_declaration6005);
            statement_sequence444=statement_sequence();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_statement_sequence.add(statement_sequence444.getTree());
            END445=(Token)match(input,END,FOLLOW_END_in_recursive_procedure_declaration6015); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_END.add(END445);

            // RParser.g:1025:13: (id2= ident )?
            int alt133=2;
            int LA133_0 = input.LA(1);

            if ( (LA133_0==IDENTIFIER) ) {
                alt133=1;
            }
            switch (alt133) {
                case 1 :
                    // RParser.g:1025:14: id2= ident
                    {
                    pushFollow(FOLLOW_ident_in_recursive_procedure_declaration6020);
                    id2=ident();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_ident.add(id2.getTree());

                    }
                    break;

            }

            SEMICOLON446=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_recursive_procedure_declaration6033); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SEMICOLON.add(SEMICOLON446);



            // AST REWRITE
            // elements: program_type_expression, decreasing_clause, statement_sequence, variable_declaration, affects_clause, ident, facility_declaration, aux_variable_declaration, operation_formal_param_section
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (ColsAST)adaptor.nil();
            // 1026:19: -> ^( RECURSIVE_PROCEDURE ident operation_formal_param_section ( program_type_expression )? ( affects_clause )* ( decreasing_clause )? ( facility_declaration )* ( variable_declaration )* ( aux_variable_declaration )* statement_sequence )
            {
                // RParser.g:1027:9: ^( RECURSIVE_PROCEDURE ident operation_formal_param_section ( program_type_expression )? ( affects_clause )* ( decreasing_clause )? ( facility_declaration )* ( variable_declaration )* ( aux_variable_declaration )* statement_sequence )
                {
                ColsAST root_1 = (ColsAST)adaptor.nil();
                root_1 = (ColsAST)adaptor.becomeRoot((ColsAST)adaptor.create(RECURSIVE_PROCEDURE, "RECURSIVE_PROCEDURE"), root_1);

                adaptor.addChild(root_1, stream_ident.nextTree());
                adaptor.addChild(root_1, stream_operation_formal_param_section.nextTree());
                // RParser.g:1029:9: ( program_type_expression )?
                if ( stream_program_type_expression.hasNext() ) {
                    adaptor.addChild(root_1, stream_program_type_expression.nextTree());

                }
                stream_program_type_expression.reset();
                // RParser.g:1030:9: ( affects_clause )*
                while ( stream_affects_clause.hasNext() ) {
                    adaptor.addChild(root_1, stream_affects_clause.nextTree());

                }
                stream_affects_clause.reset();
                // RParser.g:1031:9: ( decreasing_clause )?
                if ( stream_decreasing_clause.hasNext() ) {
                    adaptor.addChild(root_1, stream_decreasing_clause.nextTree());

                }
                stream_decreasing_clause.reset();
                // RParser.g:1032:9: ( facility_declaration )*
                while ( stream_facility_declaration.hasNext() ) {
                    adaptor.addChild(root_1, stream_facility_declaration.nextTree());

                }
                stream_facility_declaration.reset();
                // RParser.g:1033:9: ( variable_declaration )*
                while ( stream_variable_declaration.hasNext() ) {
                    adaptor.addChild(root_1, stream_variable_declaration.nextTree());

                }
                stream_variable_declaration.reset();
                // RParser.g:1034:9: ( aux_variable_declaration )*
                while ( stream_aux_variable_declaration.hasNext() ) {
                    adaptor.addChild(root_1, stream_aux_variable_declaration.nextTree());

                }
                stream_aux_variable_declaration.reset();
                adaptor.addChild(root_1, stream_statement_sequence.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (ColsAST)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "recursive_procedure_declaration"

    public static class operation_formal_param_section_return extends ParserRuleReturnScope {
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "operation_formal_param_section"
    // RParser.g:1038:1: operation_formal_param_section : LPAREN ( operation_formal_param_group ( SEMICOLON operation_formal_param_group )* )? RPAREN -> ^( PARAMS ( operation_formal_param_group )* ) ;
    public final RParser.operation_formal_param_section_return operation_formal_param_section() throws RecognitionException {
        RParser.operation_formal_param_section_return retval = new RParser.operation_formal_param_section_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        Token LPAREN447=null;
        Token SEMICOLON449=null;
        Token RPAREN451=null;
        RParser.operation_formal_param_group_return operation_formal_param_group448 = null;

        RParser.operation_formal_param_group_return operation_formal_param_group450 = null;


        ColsAST LPAREN447_tree=null;
        ColsAST SEMICOLON449_tree=null;
        ColsAST RPAREN451_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_SEMICOLON=new RewriteRuleTokenStream(adaptor,"token SEMICOLON");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_operation_formal_param_group=new RewriteRuleSubtreeStream(adaptor,"rule operation_formal_param_group");
        try {
            // RParser.g:1039:5: ( LPAREN ( operation_formal_param_group ( SEMICOLON operation_formal_param_group )* )? RPAREN -> ^( PARAMS ( operation_formal_param_group )* ) )
            // RParser.g:1039:9: LPAREN ( operation_formal_param_group ( SEMICOLON operation_formal_param_group )* )? RPAREN
            {
            LPAREN447=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_operation_formal_param_section6161); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN447);

            // RParser.g:1040:9: ( operation_formal_param_group ( SEMICOLON operation_formal_param_group )* )?
            int alt135=2;
            int LA135_0 = input.LA(1);

            if ( (LA135_0==ALTERS||LA135_0==CLEARS||LA135_0==EVALUATES||LA135_0==PRESERVES||LA135_0==REASSIGNS||LA135_0==REPLACES||LA135_0==RESTORES||LA135_0==UPDATES) ) {
                alt135=1;
            }
            switch (alt135) {
                case 1 :
                    // RParser.g:1040:13: operation_formal_param_group ( SEMICOLON operation_formal_param_group )*
                    {
                    pushFollow(FOLLOW_operation_formal_param_group_in_operation_formal_param_section6175);
                    operation_formal_param_group448=operation_formal_param_group();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_operation_formal_param_group.add(operation_formal_param_group448.getTree());
                    // RParser.g:1041:13: ( SEMICOLON operation_formal_param_group )*
                    loop134:
                    do {
                        int alt134=2;
                        int LA134_0 = input.LA(1);

                        if ( (LA134_0==SEMICOLON) ) {
                            alt134=1;
                        }


                        switch (alt134) {
                    	case 1 :
                    	    // RParser.g:1041:14: SEMICOLON operation_formal_param_group
                    	    {
                    	    SEMICOLON449=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_operation_formal_param_section6190); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_SEMICOLON.add(SEMICOLON449);

                    	    pushFollow(FOLLOW_operation_formal_param_group_in_operation_formal_param_section6192);
                    	    operation_formal_param_group450=operation_formal_param_group();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_operation_formal_param_group.add(operation_formal_param_group450.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop134;
                        }
                    } while (true);


                    }
                    break;

            }

            RPAREN451=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_operation_formal_param_section6207); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN451);



            // AST REWRITE
            // elements: operation_formal_param_group
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (ColsAST)adaptor.nil();
            // 1043:9: -> ^( PARAMS ( operation_formal_param_group )* )
            {
                // RParser.g:1043:12: ^( PARAMS ( operation_formal_param_group )* )
                {
                ColsAST root_1 = (ColsAST)adaptor.nil();
                root_1 = (ColsAST)adaptor.becomeRoot((ColsAST)adaptor.create(PARAMS, "PARAMS"), root_1);

                // RParser.g:1043:21: ( operation_formal_param_group )*
                while ( stream_operation_formal_param_group.hasNext() ) {
                    adaptor.addChild(root_1, stream_operation_formal_param_group.nextTree());

                }
                stream_operation_formal_param_group.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (ColsAST)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "operation_formal_param_section"

    public static class operation_formal_param_group_return extends ParserRuleReturnScope {
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "operation_formal_param_group"
    // RParser.g:1046:1: operation_formal_param_group : abstract_mode variable_declaration_group -> ^( VAR abstract_mode variable_declaration_group ) ;
    public final RParser.operation_formal_param_group_return operation_formal_param_group() throws RecognitionException {
        RParser.operation_formal_param_group_return retval = new RParser.operation_formal_param_group_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        RParser.abstract_mode_return abstract_mode452 = null;

        RParser.variable_declaration_group_return variable_declaration_group453 = null;


        RewriteRuleSubtreeStream stream_abstract_mode=new RewriteRuleSubtreeStream(adaptor,"rule abstract_mode");
        RewriteRuleSubtreeStream stream_variable_declaration_group=new RewriteRuleSubtreeStream(adaptor,"rule variable_declaration_group");
        try {
            // RParser.g:1047:5: ( abstract_mode variable_declaration_group -> ^( VAR abstract_mode variable_declaration_group ) )
            // RParser.g:1047:9: abstract_mode variable_declaration_group
            {
            pushFollow(FOLLOW_abstract_mode_in_operation_formal_param_group6243);
            abstract_mode452=abstract_mode();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_abstract_mode.add(abstract_mode452.getTree());
            pushFollow(FOLLOW_variable_declaration_group_in_operation_formal_param_group6245);
            variable_declaration_group453=variable_declaration_group();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_variable_declaration_group.add(variable_declaration_group453.getTree());


            // AST REWRITE
            // elements: variable_declaration_group, abstract_mode
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (ColsAST)adaptor.nil();
            // 1048:9: -> ^( VAR abstract_mode variable_declaration_group )
            {
                // RParser.g:1048:12: ^( VAR abstract_mode variable_declaration_group )
                {
                ColsAST root_1 = (ColsAST)adaptor.nil();
                root_1 = (ColsAST)adaptor.becomeRoot((ColsAST)adaptor.create(VAR, "VAR"), root_1);

                adaptor.addChild(root_1, stream_abstract_mode.nextTree());
                adaptor.addChild(root_1, stream_variable_declaration_group.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (ColsAST)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "operation_formal_param_group"

    public static class variable_declaration_return extends ParserRuleReturnScope {
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "variable_declaration"
    // RParser.g:1051:1: variable_declaration : VAR variable_declaration_group SEMICOLON ;
    public final RParser.variable_declaration_return variable_declaration() throws RecognitionException {
        RParser.variable_declaration_return retval = new RParser.variable_declaration_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        Token VAR454=null;
        Token SEMICOLON456=null;
        RParser.variable_declaration_group_return variable_declaration_group455 = null;


        ColsAST VAR454_tree=null;
        ColsAST SEMICOLON456_tree=null;

        try {
            // RParser.g:1052:5: ( VAR variable_declaration_group SEMICOLON )
            // RParser.g:1052:9: VAR variable_declaration_group SEMICOLON
            {
            root_0 = (ColsAST)adaptor.nil();

            VAR454=(Token)match(input,VAR,FOLLOW_VAR_in_variable_declaration6282); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            VAR454_tree = (ColsAST)adaptor.create(VAR454);
            root_0 = (ColsAST)adaptor.becomeRoot(VAR454_tree, root_0);
            }
            pushFollow(FOLLOW_variable_declaration_group_in_variable_declaration6285);
            variable_declaration_group455=variable_declaration_group();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, variable_declaration_group455.getTree());
            SEMICOLON456=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_variable_declaration6287); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (ColsAST)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "variable_declaration"

    public static class aux_variable_declaration_return extends ParserRuleReturnScope {
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "aux_variable_declaration"
    // RParser.g:1055:1: aux_variable_declaration : AUX_VAR aux_variable_declaration_group SEMICOLON ;
    public final RParser.aux_variable_declaration_return aux_variable_declaration() throws RecognitionException {
        RParser.aux_variable_declaration_return retval = new RParser.aux_variable_declaration_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        Token AUX_VAR457=null;
        Token SEMICOLON459=null;
        RParser.aux_variable_declaration_group_return aux_variable_declaration_group458 = null;


        ColsAST AUX_VAR457_tree=null;
        ColsAST SEMICOLON459_tree=null;

        try {
            // RParser.g:1056:5: ( AUX_VAR aux_variable_declaration_group SEMICOLON )
            // RParser.g:1056:9: AUX_VAR aux_variable_declaration_group SEMICOLON
            {
            root_0 = (ColsAST)adaptor.nil();

            AUX_VAR457=(Token)match(input,AUX_VAR,FOLLOW_AUX_VAR_in_aux_variable_declaration6311); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            AUX_VAR457_tree = (ColsAST)adaptor.create(AUX_VAR457);
            root_0 = (ColsAST)adaptor.becomeRoot(AUX_VAR457_tree, root_0);
            }
            pushFollow(FOLLOW_aux_variable_declaration_group_in_aux_variable_declaration6314);
            aux_variable_declaration_group458=aux_variable_declaration_group();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, aux_variable_declaration_group458.getTree());
            SEMICOLON459=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_aux_variable_declaration6316); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (ColsAST)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "aux_variable_declaration"

    public static class affects_clause_return extends ParserRuleReturnScope {
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "affects_clause"
    // RParser.g:1060:1: affects_clause : abstract_mode qualified_ident ( COMMA qualified_ident )* SEMICOLON -> ^( AFFECTS abstract_mode qualified_ident ( COMMA qualified_ident )* ) ;
    public final RParser.affects_clause_return affects_clause() throws RecognitionException {
        RParser.affects_clause_return retval = new RParser.affects_clause_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        Token COMMA462=null;
        Token SEMICOLON464=null;
        RParser.abstract_mode_return abstract_mode460 = null;

        RParser.qualified_ident_return qualified_ident461 = null;

        RParser.qualified_ident_return qualified_ident463 = null;


        ColsAST COMMA462_tree=null;
        ColsAST SEMICOLON464_tree=null;
        RewriteRuleTokenStream stream_SEMICOLON=new RewriteRuleTokenStream(adaptor,"token SEMICOLON");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_abstract_mode=new RewriteRuleSubtreeStream(adaptor,"rule abstract_mode");
        RewriteRuleSubtreeStream stream_qualified_ident=new RewriteRuleSubtreeStream(adaptor,"rule qualified_ident");
        try {
            // RParser.g:1061:5: ( abstract_mode qualified_ident ( COMMA qualified_ident )* SEMICOLON -> ^( AFFECTS abstract_mode qualified_ident ( COMMA qualified_ident )* ) )
            // RParser.g:1061:9: abstract_mode qualified_ident ( COMMA qualified_ident )* SEMICOLON
            {
            pushFollow(FOLLOW_abstract_mode_in_affects_clause6341);
            abstract_mode460=abstract_mode();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_abstract_mode.add(abstract_mode460.getTree());
            pushFollow(FOLLOW_qualified_ident_in_affects_clause6343);
            qualified_ident461=qualified_ident();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_qualified_ident.add(qualified_ident461.getTree());
            // RParser.g:1061:39: ( COMMA qualified_ident )*
            loop136:
            do {
                int alt136=2;
                int LA136_0 = input.LA(1);

                if ( (LA136_0==COMMA) ) {
                    alt136=1;
                }


                switch (alt136) {
            	case 1 :
            	    // RParser.g:1061:40: COMMA qualified_ident
            	    {
            	    COMMA462=(Token)match(input,COMMA,FOLLOW_COMMA_in_affects_clause6346); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA462);

            	    pushFollow(FOLLOW_qualified_ident_in_affects_clause6348);
            	    qualified_ident463=qualified_ident();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_qualified_ident.add(qualified_ident463.getTree());

            	    }
            	    break;

            	default :
            	    break loop136;
                }
            } while (true);

            SEMICOLON464=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_affects_clause6352); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SEMICOLON.add(SEMICOLON464);



            // AST REWRITE
            // elements: qualified_ident, COMMA, qualified_ident, abstract_mode
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (ColsAST)adaptor.nil();
            // 1062:9: -> ^( AFFECTS abstract_mode qualified_ident ( COMMA qualified_ident )* )
            {
                // RParser.g:1062:12: ^( AFFECTS abstract_mode qualified_ident ( COMMA qualified_ident )* )
                {
                ColsAST root_1 = (ColsAST)adaptor.nil();
                root_1 = (ColsAST)adaptor.becomeRoot((ColsAST)adaptor.create(AFFECTS, "AFFECTS"), root_1);

                adaptor.addChild(root_1, stream_abstract_mode.nextTree());
                adaptor.addChild(root_1, stream_qualified_ident.nextTree());
                // RParser.g:1062:52: ( COMMA qualified_ident )*
                while ( stream_qualified_ident.hasNext()||stream_COMMA.hasNext() ) {
                    adaptor.addChild(root_1, stream_COMMA.nextNode());
                    adaptor.addChild(root_1, stream_qualified_ident.nextTree());

                }
                stream_qualified_ident.reset();
                stream_COMMA.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (ColsAST)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "affects_clause"

    public static class abstract_mode_return extends ParserRuleReturnScope {
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "abstract_mode"
    // RParser.g:1065:1: abstract_mode : ( ALTERS | CLEARS | EVALUATES | PRESERVES | REPLACES | RESTORES | UPDATES | REASSIGNS );
    public final RParser.abstract_mode_return abstract_mode() throws RecognitionException {
        RParser.abstract_mode_return retval = new RParser.abstract_mode_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        Token set465=null;

        ColsAST set465_tree=null;

        try {
            // RParser.g:1066:5: ( ALTERS | CLEARS | EVALUATES | PRESERVES | REPLACES | RESTORES | UPDATES | REASSIGNS )
            // RParser.g:
            {
            root_0 = (ColsAST)adaptor.nil();

            set465=(Token)input.LT(1);
            if ( input.LA(1)==ALTERS||input.LA(1)==CLEARS||input.LA(1)==EVALUATES||input.LA(1)==PRESERVES||input.LA(1)==REASSIGNS||input.LA(1)==REPLACES||input.LA(1)==RESTORES||input.LA(1)==UPDATES ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (ColsAST)adaptor.create(set465));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (ColsAST)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "abstract_mode"

    public static class requires_clause_return extends ParserRuleReturnScope {
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "requires_clause"
    // RParser.g:1076:1: requires_clause : REQUIRES math_expression SEMICOLON ;
    public final RParser.requires_clause_return requires_clause() throws RecognitionException {
        RParser.requires_clause_return retval = new RParser.requires_clause_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        Token REQUIRES466=null;
        Token SEMICOLON468=null;
        RParser.math_expression_return math_expression467 = null;


        ColsAST REQUIRES466_tree=null;
        ColsAST SEMICOLON468_tree=null;

        try {
            // RParser.g:1077:5: ( REQUIRES math_expression SEMICOLON )
            // RParser.g:1077:9: REQUIRES math_expression SEMICOLON
            {
            root_0 = (ColsAST)adaptor.nil();

            REQUIRES466=(Token)match(input,REQUIRES,FOLLOW_REQUIRES_in_requires_clause6489); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REQUIRES466_tree = (ColsAST)adaptor.create(REQUIRES466);
            root_0 = (ColsAST)adaptor.becomeRoot(REQUIRES466_tree, root_0);
            }
            pushFollow(FOLLOW_math_expression_in_requires_clause6492);
            math_expression467=math_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, math_expression467.getTree());
            SEMICOLON468=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_requires_clause6494); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (ColsAST)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "requires_clause"

    public static class ensures_clause_return extends ParserRuleReturnScope {
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "ensures_clause"
    // RParser.g:1080:1: ensures_clause : ENSURES math_expression SEMICOLON ;
    public final RParser.ensures_clause_return ensures_clause() throws RecognitionException {
        RParser.ensures_clause_return retval = new RParser.ensures_clause_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        Token ENSURES469=null;
        Token SEMICOLON471=null;
        RParser.math_expression_return math_expression470 = null;


        ColsAST ENSURES469_tree=null;
        ColsAST SEMICOLON471_tree=null;

        try {
            // RParser.g:1081:5: ( ENSURES math_expression SEMICOLON )
            // RParser.g:1081:9: ENSURES math_expression SEMICOLON
            {
            root_0 = (ColsAST)adaptor.nil();

            ENSURES469=(Token)match(input,ENSURES,FOLLOW_ENSURES_in_ensures_clause6514); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ENSURES469_tree = (ColsAST)adaptor.create(ENSURES469);
            root_0 = (ColsAST)adaptor.becomeRoot(ENSURES469_tree, root_0);
            }
            pushFollow(FOLLOW_math_expression_in_ensures_clause6517);
            math_expression470=math_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, math_expression470.getTree());
            SEMICOLON471=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_ensures_clause6519); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (ColsAST)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "ensures_clause"

    public static class duration_clause_return extends ParserRuleReturnScope {
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "duration_clause"
    // RParser.g:1084:1: duration_clause : DURATION math_expression SEMICOLON ;
    public final RParser.duration_clause_return duration_clause() throws RecognitionException {
        RParser.duration_clause_return retval = new RParser.duration_clause_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        Token DURATION472=null;
        Token SEMICOLON474=null;
        RParser.math_expression_return math_expression473 = null;


        ColsAST DURATION472_tree=null;
        ColsAST SEMICOLON474_tree=null;

        try {
            // RParser.g:1085:5: ( DURATION math_expression SEMICOLON )
            // RParser.g:1085:9: DURATION math_expression SEMICOLON
            {
            root_0 = (ColsAST)adaptor.nil();

            DURATION472=(Token)match(input,DURATION,FOLLOW_DURATION_in_duration_clause6539); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            DURATION472_tree = (ColsAST)adaptor.create(DURATION472);
            root_0 = (ColsAST)adaptor.becomeRoot(DURATION472_tree, root_0);
            }
            pushFollow(FOLLOW_math_expression_in_duration_clause6542);
            math_expression473=math_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, math_expression473.getTree());
            SEMICOLON474=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_duration_clause6544); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (ColsAST)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "duration_clause"

    public static class mainp_disp_clause_return extends ParserRuleReturnScope {
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "mainp_disp_clause"
    // RParser.g:1088:1: mainp_disp_clause : MAINP_DISP math_expression SEMICOLON ;
    public final RParser.mainp_disp_clause_return mainp_disp_clause() throws RecognitionException {
        RParser.mainp_disp_clause_return retval = new RParser.mainp_disp_clause_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        Token MAINP_DISP475=null;
        Token SEMICOLON477=null;
        RParser.math_expression_return math_expression476 = null;


        ColsAST MAINP_DISP475_tree=null;
        ColsAST SEMICOLON477_tree=null;

        try {
            // RParser.g:1089:5: ( MAINP_DISP math_expression SEMICOLON )
            // RParser.g:1089:9: MAINP_DISP math_expression SEMICOLON
            {
            root_0 = (ColsAST)adaptor.nil();

            MAINP_DISP475=(Token)match(input,MAINP_DISP,FOLLOW_MAINP_DISP_in_mainp_disp_clause6564); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            MAINP_DISP475_tree = (ColsAST)adaptor.create(MAINP_DISP475);
            root_0 = (ColsAST)adaptor.becomeRoot(MAINP_DISP475_tree, root_0);
            }
            pushFollow(FOLLOW_math_expression_in_mainp_disp_clause6567);
            math_expression476=math_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, math_expression476.getTree());
            SEMICOLON477=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_mainp_disp_clause6569); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (ColsAST)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "mainp_disp_clause"

    public static class type_declaration_return extends ParserRuleReturnScope {
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "type_declaration"
    // RParser.g:1096:1: type_declaration : ( ( ( TYPE FAMILY ) ident ( SUBSET | ( IS MODELED BY ) ) math_type_expression SEMICOLON EXEMPLAR ident SEMICOLON ( constraint_clause )? ( type_concept_init_declaration )? ( type_concept_final_declaration )? ) -> ^( TYPE_FAMILY ident math_type_expression ident ( constraint_clause )? ( type_concept_init_declaration )? ( type_concept_final_declaration )? ) | ( FAMILY ident ( SUBSET | ( IS MODELED BY ) ) math_type_expression SEMICOLON EXEMPLAR ident SEMICOLON ( constraint_clause )? ( type_concept_init_declaration )? ( type_concept_final_declaration )? ) -> ^( TYPE_FAMILY ident math_type_expression ident ( constraint_clause )? ( type_concept_init_declaration )? ( type_concept_final_declaration )? ) | ( TYPE_FAMILY ident ( SUBSET | ( IS MODELED BY ) ) math_type_expression SEMICOLON EXEMPLAR ident SEMICOLON ( constraint_clause )? ( type_concept_init_declaration )? ( type_concept_final_declaration )? ) );
    public final RParser.type_declaration_return type_declaration() throws RecognitionException {
        RParser.type_declaration_return retval = new RParser.type_declaration_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        Token TYPE478=null;
        Token FAMILY479=null;
        Token SUBSET481=null;
        Token IS482=null;
        Token MODELED483=null;
        Token BY484=null;
        Token SEMICOLON486=null;
        Token EXEMPLAR487=null;
        Token SEMICOLON489=null;
        Token FAMILY493=null;
        Token SUBSET495=null;
        Token IS496=null;
        Token MODELED497=null;
        Token BY498=null;
        Token SEMICOLON500=null;
        Token EXEMPLAR501=null;
        Token SEMICOLON503=null;
        Token TYPE_FAMILY507=null;
        Token SUBSET509=null;
        Token IS510=null;
        Token MODELED511=null;
        Token BY512=null;
        Token SEMICOLON514=null;
        Token EXEMPLAR515=null;
        Token SEMICOLON517=null;
        RParser.ident_return ident480 = null;

        RParser.math_type_expression_return math_type_expression485 = null;

        RParser.ident_return ident488 = null;

        RParser.constraint_clause_return constraint_clause490 = null;

        RParser.type_concept_init_declaration_return type_concept_init_declaration491 = null;

        RParser.type_concept_final_declaration_return type_concept_final_declaration492 = null;

        RParser.ident_return ident494 = null;

        RParser.math_type_expression_return math_type_expression499 = null;

        RParser.ident_return ident502 = null;

        RParser.constraint_clause_return constraint_clause504 = null;

        RParser.type_concept_init_declaration_return type_concept_init_declaration505 = null;

        RParser.type_concept_final_declaration_return type_concept_final_declaration506 = null;

        RParser.ident_return ident508 = null;

        RParser.math_type_expression_return math_type_expression513 = null;

        RParser.ident_return ident516 = null;

        RParser.constraint_clause_return constraint_clause518 = null;

        RParser.type_concept_init_declaration_return type_concept_init_declaration519 = null;

        RParser.type_concept_final_declaration_return type_concept_final_declaration520 = null;


        ColsAST TYPE478_tree=null;
        ColsAST FAMILY479_tree=null;
        ColsAST SUBSET481_tree=null;
        ColsAST IS482_tree=null;
        ColsAST MODELED483_tree=null;
        ColsAST BY484_tree=null;
        ColsAST SEMICOLON486_tree=null;
        ColsAST EXEMPLAR487_tree=null;
        ColsAST SEMICOLON489_tree=null;
        ColsAST FAMILY493_tree=null;
        ColsAST SUBSET495_tree=null;
        ColsAST IS496_tree=null;
        ColsAST MODELED497_tree=null;
        ColsAST BY498_tree=null;
        ColsAST SEMICOLON500_tree=null;
        ColsAST EXEMPLAR501_tree=null;
        ColsAST SEMICOLON503_tree=null;
        ColsAST TYPE_FAMILY507_tree=null;
        ColsAST SUBSET509_tree=null;
        ColsAST IS510_tree=null;
        ColsAST MODELED511_tree=null;
        ColsAST BY512_tree=null;
        ColsAST SEMICOLON514_tree=null;
        ColsAST EXEMPLAR515_tree=null;
        ColsAST SEMICOLON517_tree=null;
        RewriteRuleTokenStream stream_FAMILY=new RewriteRuleTokenStream(adaptor,"token FAMILY");
        RewriteRuleTokenStream stream_MODELED=new RewriteRuleTokenStream(adaptor,"token MODELED");
        RewriteRuleTokenStream stream_BY=new RewriteRuleTokenStream(adaptor,"token BY");
        RewriteRuleTokenStream stream_SUBSET=new RewriteRuleTokenStream(adaptor,"token SUBSET");
        RewriteRuleTokenStream stream_SEMICOLON=new RewriteRuleTokenStream(adaptor,"token SEMICOLON");
        RewriteRuleTokenStream stream_IS=new RewriteRuleTokenStream(adaptor,"token IS");
        RewriteRuleTokenStream stream_EXEMPLAR=new RewriteRuleTokenStream(adaptor,"token EXEMPLAR");
        RewriteRuleTokenStream stream_TYPE=new RewriteRuleTokenStream(adaptor,"token TYPE");
        RewriteRuleSubtreeStream stream_math_type_expression=new RewriteRuleSubtreeStream(adaptor,"rule math_type_expression");
        RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
        RewriteRuleSubtreeStream stream_constraint_clause=new RewriteRuleSubtreeStream(adaptor,"rule constraint_clause");
        RewriteRuleSubtreeStream stream_type_concept_final_declaration=new RewriteRuleSubtreeStream(adaptor,"rule type_concept_final_declaration");
        RewriteRuleSubtreeStream stream_type_concept_init_declaration=new RewriteRuleSubtreeStream(adaptor,"rule type_concept_init_declaration");
        try {
            // RParser.g:1097:5: ( ( ( TYPE FAMILY ) ident ( SUBSET | ( IS MODELED BY ) ) math_type_expression SEMICOLON EXEMPLAR ident SEMICOLON ( constraint_clause )? ( type_concept_init_declaration )? ( type_concept_final_declaration )? ) -> ^( TYPE_FAMILY ident math_type_expression ident ( constraint_clause )? ( type_concept_init_declaration )? ( type_concept_final_declaration )? ) | ( FAMILY ident ( SUBSET | ( IS MODELED BY ) ) math_type_expression SEMICOLON EXEMPLAR ident SEMICOLON ( constraint_clause )? ( type_concept_init_declaration )? ( type_concept_final_declaration )? ) -> ^( TYPE_FAMILY ident math_type_expression ident ( constraint_clause )? ( type_concept_init_declaration )? ( type_concept_final_declaration )? ) | ( TYPE_FAMILY ident ( SUBSET | ( IS MODELED BY ) ) math_type_expression SEMICOLON EXEMPLAR ident SEMICOLON ( constraint_clause )? ( type_concept_init_declaration )? ( type_concept_final_declaration )? ) )
            int alt149=3;
            switch ( input.LA(1) ) {
            case TYPE:
                {
                alt149=1;
                }
                break;
            case FAMILY:
                {
                alt149=2;
                }
                break;
            case TYPE_FAMILY:
                {
                alt149=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 149, 0, input);

                throw nvae;
            }

            switch (alt149) {
                case 1 :
                    // RParser.g:1097:9: ( ( TYPE FAMILY ) ident ( SUBSET | ( IS MODELED BY ) ) math_type_expression SEMICOLON EXEMPLAR ident SEMICOLON ( constraint_clause )? ( type_concept_init_declaration )? ( type_concept_final_declaration )? )
                    {
                    // RParser.g:1097:9: ( ( TYPE FAMILY ) ident ( SUBSET | ( IS MODELED BY ) ) math_type_expression SEMICOLON EXEMPLAR ident SEMICOLON ( constraint_clause )? ( type_concept_init_declaration )? ( type_concept_final_declaration )? )
                    // RParser.g:1097:10: ( TYPE FAMILY ) ident ( SUBSET | ( IS MODELED BY ) ) math_type_expression SEMICOLON EXEMPLAR ident SEMICOLON ( constraint_clause )? ( type_concept_init_declaration )? ( type_concept_final_declaration )?
                    {
                    // RParser.g:1097:10: ( TYPE FAMILY )
                    // RParser.g:1097:11: TYPE FAMILY
                    {
                    TYPE478=(Token)match(input,TYPE,FOLLOW_TYPE_in_type_declaration6599); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TYPE.add(TYPE478);

                    FAMILY479=(Token)match(input,FAMILY,FOLLOW_FAMILY_in_type_declaration6601); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_FAMILY.add(FAMILY479);


                    }

                    pushFollow(FOLLOW_ident_in_type_declaration6604);
                    ident480=ident();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_ident.add(ident480.getTree());
                    // RParser.g:1098:9: ( SUBSET | ( IS MODELED BY ) )
                    int alt137=2;
                    int LA137_0 = input.LA(1);

                    if ( (LA137_0==SUBSET) ) {
                        alt137=1;
                    }
                    else if ( (LA137_0==IS) ) {
                        alt137=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 137, 0, input);

                        throw nvae;
                    }
                    switch (alt137) {
                        case 1 :
                            // RParser.g:1098:10: SUBSET
                            {
                            SUBSET481=(Token)match(input,SUBSET,FOLLOW_SUBSET_in_type_declaration6615); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_SUBSET.add(SUBSET481);


                            }
                            break;
                        case 2 :
                            // RParser.g:1098:19: ( IS MODELED BY )
                            {
                            // RParser.g:1098:19: ( IS MODELED BY )
                            // RParser.g:1098:20: IS MODELED BY
                            {
                            IS482=(Token)match(input,IS,FOLLOW_IS_in_type_declaration6620); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_IS.add(IS482);

                            MODELED483=(Token)match(input,MODELED,FOLLOW_MODELED_in_type_declaration6622); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_MODELED.add(MODELED483);

                            BY484=(Token)match(input,BY,FOLLOW_BY_in_type_declaration6624); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_BY.add(BY484);


                            }


                            }
                            break;

                    }

                    pushFollow(FOLLOW_math_type_expression_in_type_declaration6636);
                    math_type_expression485=math_type_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_math_type_expression.add(math_type_expression485.getTree());
                    SEMICOLON486=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_type_declaration6638); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SEMICOLON.add(SEMICOLON486);

                    EXEMPLAR487=(Token)match(input,EXEMPLAR,FOLLOW_EXEMPLAR_in_type_declaration6648); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EXEMPLAR.add(EXEMPLAR487);

                    pushFollow(FOLLOW_ident_in_type_declaration6650);
                    ident488=ident();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_ident.add(ident488.getTree());
                    SEMICOLON489=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_type_declaration6652); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SEMICOLON.add(SEMICOLON489);

                    // RParser.g:1101:9: ( constraint_clause )?
                    int alt138=2;
                    alt138 = dfa138.predict(input);
                    switch (alt138) {
                        case 1 :
                            // RParser.g:1101:9: constraint_clause
                            {
                            pushFollow(FOLLOW_constraint_clause_in_type_declaration6662);
                            constraint_clause490=constraint_clause();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_constraint_clause.add(constraint_clause490.getTree());

                            }
                            break;

                    }

                    // RParser.g:1102:9: ( type_concept_init_declaration )?
                    int alt139=2;
                    int LA139_0 = input.LA(1);

                    if ( (LA139_0==INITIALIZATION) ) {
                        alt139=1;
                    }
                    switch (alt139) {
                        case 1 :
                            // RParser.g:1102:9: type_concept_init_declaration
                            {
                            pushFollow(FOLLOW_type_concept_init_declaration_in_type_declaration6673);
                            type_concept_init_declaration491=type_concept_init_declaration();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_type_concept_init_declaration.add(type_concept_init_declaration491.getTree());

                            }
                            break;

                    }

                    // RParser.g:1103:9: ( type_concept_final_declaration )?
                    int alt140=2;
                    int LA140_0 = input.LA(1);

                    if ( (LA140_0==FINALIZATION) ) {
                        alt140=1;
                    }
                    switch (alt140) {
                        case 1 :
                            // RParser.g:1103:9: type_concept_final_declaration
                            {
                            pushFollow(FOLLOW_type_concept_final_declaration_in_type_declaration6684);
                            type_concept_final_declaration492=type_concept_final_declaration();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_type_concept_final_declaration.add(type_concept_final_declaration492.getTree());

                            }
                            break;

                    }


                    }



                    // AST REWRITE
                    // elements: type_concept_final_declaration, type_concept_init_declaration, ident, constraint_clause, math_type_expression, ident
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (ColsAST)adaptor.nil();
                    // 1103:42: -> ^( TYPE_FAMILY ident math_type_expression ident ( constraint_clause )? ( type_concept_init_declaration )? ( type_concept_final_declaration )? )
                    {
                        // RParser.g:1104:9: ^( TYPE_FAMILY ident math_type_expression ident ( constraint_clause )? ( type_concept_init_declaration )? ( type_concept_final_declaration )? )
                        {
                        ColsAST root_1 = (ColsAST)adaptor.nil();
                        root_1 = (ColsAST)adaptor.becomeRoot((ColsAST)adaptor.create(TYPE_FAMILY, "TYPE_FAMILY"), root_1);

                        adaptor.addChild(root_1, stream_ident.nextTree());
                        adaptor.addChild(root_1, stream_math_type_expression.nextTree());
                        adaptor.addChild(root_1, stream_ident.nextTree());
                        // RParser.g:1105:9: ( constraint_clause )?
                        if ( stream_constraint_clause.hasNext() ) {
                            adaptor.addChild(root_1, stream_constraint_clause.nextTree());

                        }
                        stream_constraint_clause.reset();
                        // RParser.g:1106:9: ( type_concept_init_declaration )?
                        if ( stream_type_concept_init_declaration.hasNext() ) {
                            adaptor.addChild(root_1, stream_type_concept_init_declaration.nextTree());

                        }
                        stream_type_concept_init_declaration.reset();
                        // RParser.g:1107:9: ( type_concept_final_declaration )?
                        if ( stream_type_concept_final_declaration.hasNext() ) {
                            adaptor.addChild(root_1, stream_type_concept_final_declaration.nextTree());

                        }
                        stream_type_concept_final_declaration.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // RParser.g:1108:9: ( FAMILY ident ( SUBSET | ( IS MODELED BY ) ) math_type_expression SEMICOLON EXEMPLAR ident SEMICOLON ( constraint_clause )? ( type_concept_init_declaration )? ( type_concept_final_declaration )? )
                    {
                    // RParser.g:1108:9: ( FAMILY ident ( SUBSET | ( IS MODELED BY ) ) math_type_expression SEMICOLON EXEMPLAR ident SEMICOLON ( constraint_clause )? ( type_concept_init_declaration )? ( type_concept_final_declaration )? )
                    // RParser.g:1108:10: FAMILY ident ( SUBSET | ( IS MODELED BY ) ) math_type_expression SEMICOLON EXEMPLAR ident SEMICOLON ( constraint_clause )? ( type_concept_init_declaration )? ( type_concept_final_declaration )?
                    {
                    FAMILY493=(Token)match(input,FAMILY,FOLLOW_FAMILY_in_type_declaration6750); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_FAMILY.add(FAMILY493);

                    pushFollow(FOLLOW_ident_in_type_declaration6752);
                    ident494=ident();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_ident.add(ident494.getTree());
                    // RParser.g:1109:9: ( SUBSET | ( IS MODELED BY ) )
                    int alt141=2;
                    int LA141_0 = input.LA(1);

                    if ( (LA141_0==SUBSET) ) {
                        alt141=1;
                    }
                    else if ( (LA141_0==IS) ) {
                        alt141=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 141, 0, input);

                        throw nvae;
                    }
                    switch (alt141) {
                        case 1 :
                            // RParser.g:1109:10: SUBSET
                            {
                            SUBSET495=(Token)match(input,SUBSET,FOLLOW_SUBSET_in_type_declaration6763); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_SUBSET.add(SUBSET495);


                            }
                            break;
                        case 2 :
                            // RParser.g:1109:19: ( IS MODELED BY )
                            {
                            // RParser.g:1109:19: ( IS MODELED BY )
                            // RParser.g:1109:20: IS MODELED BY
                            {
                            IS496=(Token)match(input,IS,FOLLOW_IS_in_type_declaration6768); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_IS.add(IS496);

                            MODELED497=(Token)match(input,MODELED,FOLLOW_MODELED_in_type_declaration6770); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_MODELED.add(MODELED497);

                            BY498=(Token)match(input,BY,FOLLOW_BY_in_type_declaration6772); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_BY.add(BY498);


                            }


                            }
                            break;

                    }

                    pushFollow(FOLLOW_math_type_expression_in_type_declaration6784);
                    math_type_expression499=math_type_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_math_type_expression.add(math_type_expression499.getTree());
                    SEMICOLON500=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_type_declaration6786); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SEMICOLON.add(SEMICOLON500);

                    EXEMPLAR501=(Token)match(input,EXEMPLAR,FOLLOW_EXEMPLAR_in_type_declaration6796); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EXEMPLAR.add(EXEMPLAR501);

                    pushFollow(FOLLOW_ident_in_type_declaration6798);
                    ident502=ident();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_ident.add(ident502.getTree());
                    SEMICOLON503=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_type_declaration6800); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SEMICOLON.add(SEMICOLON503);

                    // RParser.g:1112:9: ( constraint_clause )?
                    int alt142=2;
                    alt142 = dfa142.predict(input);
                    switch (alt142) {
                        case 1 :
                            // RParser.g:1112:9: constraint_clause
                            {
                            pushFollow(FOLLOW_constraint_clause_in_type_declaration6810);
                            constraint_clause504=constraint_clause();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_constraint_clause.add(constraint_clause504.getTree());

                            }
                            break;

                    }

                    // RParser.g:1113:9: ( type_concept_init_declaration )?
                    int alt143=2;
                    int LA143_0 = input.LA(1);

                    if ( (LA143_0==INITIALIZATION) ) {
                        alt143=1;
                    }
                    switch (alt143) {
                        case 1 :
                            // RParser.g:1113:9: type_concept_init_declaration
                            {
                            pushFollow(FOLLOW_type_concept_init_declaration_in_type_declaration6821);
                            type_concept_init_declaration505=type_concept_init_declaration();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_type_concept_init_declaration.add(type_concept_init_declaration505.getTree());

                            }
                            break;

                    }

                    // RParser.g:1114:9: ( type_concept_final_declaration )?
                    int alt144=2;
                    int LA144_0 = input.LA(1);

                    if ( (LA144_0==FINALIZATION) ) {
                        alt144=1;
                    }
                    switch (alt144) {
                        case 1 :
                            // RParser.g:1114:9: type_concept_final_declaration
                            {
                            pushFollow(FOLLOW_type_concept_final_declaration_in_type_declaration6832);
                            type_concept_final_declaration506=type_concept_final_declaration();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_type_concept_final_declaration.add(type_concept_final_declaration506.getTree());

                            }
                            break;

                    }


                    }



                    // AST REWRITE
                    // elements: constraint_clause, ident, math_type_expression, ident, type_concept_init_declaration, type_concept_final_declaration
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (ColsAST)adaptor.nil();
                    // 1114:42: -> ^( TYPE_FAMILY ident math_type_expression ident ( constraint_clause )? ( type_concept_init_declaration )? ( type_concept_final_declaration )? )
                    {
                        // RParser.g:1115:9: ^( TYPE_FAMILY ident math_type_expression ident ( constraint_clause )? ( type_concept_init_declaration )? ( type_concept_final_declaration )? )
                        {
                        ColsAST root_1 = (ColsAST)adaptor.nil();
                        root_1 = (ColsAST)adaptor.becomeRoot((ColsAST)adaptor.create(TYPE_FAMILY, "TYPE_FAMILY"), root_1);

                        adaptor.addChild(root_1, stream_ident.nextTree());
                        adaptor.addChild(root_1, stream_math_type_expression.nextTree());
                        adaptor.addChild(root_1, stream_ident.nextTree());
                        // RParser.g:1116:9: ( constraint_clause )?
                        if ( stream_constraint_clause.hasNext() ) {
                            adaptor.addChild(root_1, stream_constraint_clause.nextTree());

                        }
                        stream_constraint_clause.reset();
                        // RParser.g:1117:9: ( type_concept_init_declaration )?
                        if ( stream_type_concept_init_declaration.hasNext() ) {
                            adaptor.addChild(root_1, stream_type_concept_init_declaration.nextTree());

                        }
                        stream_type_concept_init_declaration.reset();
                        // RParser.g:1118:9: ( type_concept_final_declaration )?
                        if ( stream_type_concept_final_declaration.hasNext() ) {
                            adaptor.addChild(root_1, stream_type_concept_final_declaration.nextTree());

                        }
                        stream_type_concept_final_declaration.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // RParser.g:1119:9: ( TYPE_FAMILY ident ( SUBSET | ( IS MODELED BY ) ) math_type_expression SEMICOLON EXEMPLAR ident SEMICOLON ( constraint_clause )? ( type_concept_init_declaration )? ( type_concept_final_declaration )? )
                    {
                    root_0 = (ColsAST)adaptor.nil();

                    // RParser.g:1119:9: ( TYPE_FAMILY ident ( SUBSET | ( IS MODELED BY ) ) math_type_expression SEMICOLON EXEMPLAR ident SEMICOLON ( constraint_clause )? ( type_concept_init_declaration )? ( type_concept_final_declaration )? )
                    // RParser.g:1119:10: TYPE_FAMILY ident ( SUBSET | ( IS MODELED BY ) ) math_type_expression SEMICOLON EXEMPLAR ident SEMICOLON ( constraint_clause )? ( type_concept_init_declaration )? ( type_concept_final_declaration )?
                    {
                    TYPE_FAMILY507=(Token)match(input,TYPE_FAMILY,FOLLOW_TYPE_FAMILY_in_type_declaration6898); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    TYPE_FAMILY507_tree = (ColsAST)adaptor.create(TYPE_FAMILY507);
                    root_0 = (ColsAST)adaptor.becomeRoot(TYPE_FAMILY507_tree, root_0);
                    }
                    pushFollow(FOLLOW_ident_in_type_declaration6901);
                    ident508=ident();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, ident508.getTree());
                    // RParser.g:1120:9: ( SUBSET | ( IS MODELED BY ) )
                    int alt145=2;
                    int LA145_0 = input.LA(1);

                    if ( (LA145_0==SUBSET) ) {
                        alt145=1;
                    }
                    else if ( (LA145_0==IS) ) {
                        alt145=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 145, 0, input);

                        throw nvae;
                    }
                    switch (alt145) {
                        case 1 :
                            // RParser.g:1120:10: SUBSET
                            {
                            SUBSET509=(Token)match(input,SUBSET,FOLLOW_SUBSET_in_type_declaration6912); if (state.failed) return retval;

                            }
                            break;
                        case 2 :
                            // RParser.g:1120:20: ( IS MODELED BY )
                            {
                            // RParser.g:1120:20: ( IS MODELED BY )
                            // RParser.g:1120:21: IS MODELED BY
                            {
                            IS510=(Token)match(input,IS,FOLLOW_IS_in_type_declaration6918); if (state.failed) return retval;
                            MODELED511=(Token)match(input,MODELED,FOLLOW_MODELED_in_type_declaration6921); if (state.failed) return retval;
                            BY512=(Token)match(input,BY,FOLLOW_BY_in_type_declaration6924); if (state.failed) return retval;

                            }


                            }
                            break;

                    }

                    pushFollow(FOLLOW_math_type_expression_in_type_declaration6937);
                    math_type_expression513=math_type_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, math_type_expression513.getTree());
                    SEMICOLON514=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_type_declaration6939); if (state.failed) return retval;
                    EXEMPLAR515=(Token)match(input,EXEMPLAR,FOLLOW_EXEMPLAR_in_type_declaration6950); if (state.failed) return retval;
                    pushFollow(FOLLOW_ident_in_type_declaration6953);
                    ident516=ident();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, ident516.getTree());
                    SEMICOLON517=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_type_declaration6955); if (state.failed) return retval;
                    // RParser.g:1123:9: ( constraint_clause )?
                    int alt146=2;
                    alt146 = dfa146.predict(input);
                    switch (alt146) {
                        case 1 :
                            // RParser.g:1123:9: constraint_clause
                            {
                            pushFollow(FOLLOW_constraint_clause_in_type_declaration6966);
                            constraint_clause518=constraint_clause();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, constraint_clause518.getTree());

                            }
                            break;

                    }

                    // RParser.g:1124:9: ( type_concept_init_declaration )?
                    int alt147=2;
                    int LA147_0 = input.LA(1);

                    if ( (LA147_0==INITIALIZATION) ) {
                        alt147=1;
                    }
                    switch (alt147) {
                        case 1 :
                            // RParser.g:1124:9: type_concept_init_declaration
                            {
                            pushFollow(FOLLOW_type_concept_init_declaration_in_type_declaration6977);
                            type_concept_init_declaration519=type_concept_init_declaration();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, type_concept_init_declaration519.getTree());

                            }
                            break;

                    }

                    // RParser.g:1125:9: ( type_concept_final_declaration )?
                    int alt148=2;
                    int LA148_0 = input.LA(1);

                    if ( (LA148_0==FINALIZATION) ) {
                        alt148=1;
                    }
                    switch (alt148) {
                        case 1 :
                            // RParser.g:1125:9: type_concept_final_declaration
                            {
                            pushFollow(FOLLOW_type_concept_final_declaration_in_type_declaration6988);
                            type_concept_final_declaration520=type_concept_final_declaration();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, type_concept_final_declaration520.getTree());

                            }
                            break;

                    }


                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (ColsAST)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "type_declaration"

    public static class performance_type_declaration_return extends ParserRuleReturnScope {
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "performance_type_declaration"
    // RParser.g:1128:1: performance_type_declaration : ( ( ( TYPE FAMILY ) ident ( SUBSET | ( IS MODELED BY ) ) math_type_expression SEMICOLON ( constraint_clause )? ( performance_type_init_declaration )? ( performance_type_final_declaration )? ) -> ^( TYPE_FAMILY ident math_type_expression ( constraint_clause )? ( performance_type_init_declaration )? ( performance_type_final_declaration )? ) | ( FAMILY ident ( SUBSET | ( IS MODELED BY ) ) math_type_expression SEMICOLON ( constraint_clause )? ( performance_type_init_declaration )? ( performance_type_final_declaration )? ) -> ^( TYPE_FAMILY ident math_type_expression ( constraint_clause )? ( performance_type_init_declaration )? ( performance_type_final_declaration )? ) | ( TYPE_FAMILY ident ( SUBSET | IS MODELED BY ) math_type_expression SEMICOLON ( constraint_clause )? ( performance_type_init_declaration )? ( performance_type_final_declaration )? ) );
    public final RParser.performance_type_declaration_return performance_type_declaration() throws RecognitionException {
        RParser.performance_type_declaration_return retval = new RParser.performance_type_declaration_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        Token TYPE521=null;
        Token FAMILY522=null;
        Token SUBSET524=null;
        Token IS525=null;
        Token MODELED526=null;
        Token BY527=null;
        Token SEMICOLON529=null;
        Token FAMILY533=null;
        Token SUBSET535=null;
        Token IS536=null;
        Token MODELED537=null;
        Token BY538=null;
        Token SEMICOLON540=null;
        Token TYPE_FAMILY544=null;
        Token SUBSET546=null;
        Token IS547=null;
        Token MODELED548=null;
        Token BY549=null;
        Token SEMICOLON551=null;
        RParser.ident_return ident523 = null;

        RParser.math_type_expression_return math_type_expression528 = null;

        RParser.constraint_clause_return constraint_clause530 = null;

        RParser.performance_type_init_declaration_return performance_type_init_declaration531 = null;

        RParser.performance_type_final_declaration_return performance_type_final_declaration532 = null;

        RParser.ident_return ident534 = null;

        RParser.math_type_expression_return math_type_expression539 = null;

        RParser.constraint_clause_return constraint_clause541 = null;

        RParser.performance_type_init_declaration_return performance_type_init_declaration542 = null;

        RParser.performance_type_final_declaration_return performance_type_final_declaration543 = null;

        RParser.ident_return ident545 = null;

        RParser.math_type_expression_return math_type_expression550 = null;

        RParser.constraint_clause_return constraint_clause552 = null;

        RParser.performance_type_init_declaration_return performance_type_init_declaration553 = null;

        RParser.performance_type_final_declaration_return performance_type_final_declaration554 = null;


        ColsAST TYPE521_tree=null;
        ColsAST FAMILY522_tree=null;
        ColsAST SUBSET524_tree=null;
        ColsAST IS525_tree=null;
        ColsAST MODELED526_tree=null;
        ColsAST BY527_tree=null;
        ColsAST SEMICOLON529_tree=null;
        ColsAST FAMILY533_tree=null;
        ColsAST SUBSET535_tree=null;
        ColsAST IS536_tree=null;
        ColsAST MODELED537_tree=null;
        ColsAST BY538_tree=null;
        ColsAST SEMICOLON540_tree=null;
        ColsAST TYPE_FAMILY544_tree=null;
        ColsAST SUBSET546_tree=null;
        ColsAST IS547_tree=null;
        ColsAST MODELED548_tree=null;
        ColsAST BY549_tree=null;
        ColsAST SEMICOLON551_tree=null;
        RewriteRuleTokenStream stream_FAMILY=new RewriteRuleTokenStream(adaptor,"token FAMILY");
        RewriteRuleTokenStream stream_MODELED=new RewriteRuleTokenStream(adaptor,"token MODELED");
        RewriteRuleTokenStream stream_BY=new RewriteRuleTokenStream(adaptor,"token BY");
        RewriteRuleTokenStream stream_SUBSET=new RewriteRuleTokenStream(adaptor,"token SUBSET");
        RewriteRuleTokenStream stream_SEMICOLON=new RewriteRuleTokenStream(adaptor,"token SEMICOLON");
        RewriteRuleTokenStream stream_IS=new RewriteRuleTokenStream(adaptor,"token IS");
        RewriteRuleTokenStream stream_TYPE=new RewriteRuleTokenStream(adaptor,"token TYPE");
        RewriteRuleSubtreeStream stream_math_type_expression=new RewriteRuleSubtreeStream(adaptor,"rule math_type_expression");
        RewriteRuleSubtreeStream stream_performance_type_final_declaration=new RewriteRuleSubtreeStream(adaptor,"rule performance_type_final_declaration");
        RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
        RewriteRuleSubtreeStream stream_performance_type_init_declaration=new RewriteRuleSubtreeStream(adaptor,"rule performance_type_init_declaration");
        RewriteRuleSubtreeStream stream_constraint_clause=new RewriteRuleSubtreeStream(adaptor,"rule constraint_clause");
        try {
            // RParser.g:1129:5: ( ( ( TYPE FAMILY ) ident ( SUBSET | ( IS MODELED BY ) ) math_type_expression SEMICOLON ( constraint_clause )? ( performance_type_init_declaration )? ( performance_type_final_declaration )? ) -> ^( TYPE_FAMILY ident math_type_expression ( constraint_clause )? ( performance_type_init_declaration )? ( performance_type_final_declaration )? ) | ( FAMILY ident ( SUBSET | ( IS MODELED BY ) ) math_type_expression SEMICOLON ( constraint_clause )? ( performance_type_init_declaration )? ( performance_type_final_declaration )? ) -> ^( TYPE_FAMILY ident math_type_expression ( constraint_clause )? ( performance_type_init_declaration )? ( performance_type_final_declaration )? ) | ( TYPE_FAMILY ident ( SUBSET | IS MODELED BY ) math_type_expression SEMICOLON ( constraint_clause )? ( performance_type_init_declaration )? ( performance_type_final_declaration )? ) )
            int alt162=3;
            switch ( input.LA(1) ) {
            case TYPE:
                {
                alt162=1;
                }
                break;
            case FAMILY:
                {
                alt162=2;
                }
                break;
            case TYPE_FAMILY:
                {
                alt162=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 162, 0, input);

                throw nvae;
            }

            switch (alt162) {
                case 1 :
                    // RParser.g:1129:9: ( ( TYPE FAMILY ) ident ( SUBSET | ( IS MODELED BY ) ) math_type_expression SEMICOLON ( constraint_clause )? ( performance_type_init_declaration )? ( performance_type_final_declaration )? )
                    {
                    // RParser.g:1129:9: ( ( TYPE FAMILY ) ident ( SUBSET | ( IS MODELED BY ) ) math_type_expression SEMICOLON ( constraint_clause )? ( performance_type_init_declaration )? ( performance_type_final_declaration )? )
                    // RParser.g:1129:10: ( TYPE FAMILY ) ident ( SUBSET | ( IS MODELED BY ) ) math_type_expression SEMICOLON ( constraint_clause )? ( performance_type_init_declaration )? ( performance_type_final_declaration )?
                    {
                    // RParser.g:1129:10: ( TYPE FAMILY )
                    // RParser.g:1129:11: TYPE FAMILY
                    {
                    TYPE521=(Token)match(input,TYPE,FOLLOW_TYPE_in_performance_type_declaration7011); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TYPE.add(TYPE521);

                    FAMILY522=(Token)match(input,FAMILY,FOLLOW_FAMILY_in_performance_type_declaration7013); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_FAMILY.add(FAMILY522);


                    }

                    pushFollow(FOLLOW_ident_in_performance_type_declaration7016);
                    ident523=ident();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_ident.add(ident523.getTree());
                    // RParser.g:1130:9: ( SUBSET | ( IS MODELED BY ) )
                    int alt150=2;
                    int LA150_0 = input.LA(1);

                    if ( (LA150_0==SUBSET) ) {
                        alt150=1;
                    }
                    else if ( (LA150_0==IS) ) {
                        alt150=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 150, 0, input);

                        throw nvae;
                    }
                    switch (alt150) {
                        case 1 :
                            // RParser.g:1130:10: SUBSET
                            {
                            SUBSET524=(Token)match(input,SUBSET,FOLLOW_SUBSET_in_performance_type_declaration7027); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_SUBSET.add(SUBSET524);


                            }
                            break;
                        case 2 :
                            // RParser.g:1130:19: ( IS MODELED BY )
                            {
                            // RParser.g:1130:19: ( IS MODELED BY )
                            // RParser.g:1130:20: IS MODELED BY
                            {
                            IS525=(Token)match(input,IS,FOLLOW_IS_in_performance_type_declaration7032); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_IS.add(IS525);

                            MODELED526=(Token)match(input,MODELED,FOLLOW_MODELED_in_performance_type_declaration7034); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_MODELED.add(MODELED526);

                            BY527=(Token)match(input,BY,FOLLOW_BY_in_performance_type_declaration7036); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_BY.add(BY527);


                            }


                            }
                            break;

                    }

                    pushFollow(FOLLOW_math_type_expression_in_performance_type_declaration7048);
                    math_type_expression528=math_type_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_math_type_expression.add(math_type_expression528.getTree());
                    SEMICOLON529=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_performance_type_declaration7050); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SEMICOLON.add(SEMICOLON529);

                    // RParser.g:1132:9: ( constraint_clause )?
                    int alt151=2;
                    alt151 = dfa151.predict(input);
                    switch (alt151) {
                        case 1 :
                            // RParser.g:1132:9: constraint_clause
                            {
                            pushFollow(FOLLOW_constraint_clause_in_performance_type_declaration7060);
                            constraint_clause530=constraint_clause();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_constraint_clause.add(constraint_clause530.getTree());

                            }
                            break;

                    }

                    // RParser.g:1133:9: ( performance_type_init_declaration )?
                    int alt152=2;
                    int LA152_0 = input.LA(1);

                    if ( (LA152_0==INITIALIZATION) ) {
                        alt152=1;
                    }
                    switch (alt152) {
                        case 1 :
                            // RParser.g:1133:9: performance_type_init_declaration
                            {
                            pushFollow(FOLLOW_performance_type_init_declaration_in_performance_type_declaration7071);
                            performance_type_init_declaration531=performance_type_init_declaration();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_performance_type_init_declaration.add(performance_type_init_declaration531.getTree());

                            }
                            break;

                    }

                    // RParser.g:1134:9: ( performance_type_final_declaration )?
                    int alt153=2;
                    int LA153_0 = input.LA(1);

                    if ( (LA153_0==FINALIZATION) ) {
                        alt153=1;
                    }
                    switch (alt153) {
                        case 1 :
                            // RParser.g:1134:9: performance_type_final_declaration
                            {
                            pushFollow(FOLLOW_performance_type_final_declaration_in_performance_type_declaration7082);
                            performance_type_final_declaration532=performance_type_final_declaration();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_performance_type_final_declaration.add(performance_type_final_declaration532.getTree());

                            }
                            break;

                    }


                    }



                    // AST REWRITE
                    // elements: constraint_clause, math_type_expression, performance_type_final_declaration, ident, performance_type_init_declaration
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (ColsAST)adaptor.nil();
                    // 1134:46: -> ^( TYPE_FAMILY ident math_type_expression ( constraint_clause )? ( performance_type_init_declaration )? ( performance_type_final_declaration )? )
                    {
                        // RParser.g:1135:9: ^( TYPE_FAMILY ident math_type_expression ( constraint_clause )? ( performance_type_init_declaration )? ( performance_type_final_declaration )? )
                        {
                        ColsAST root_1 = (ColsAST)adaptor.nil();
                        root_1 = (ColsAST)adaptor.becomeRoot((ColsAST)adaptor.create(TYPE_FAMILY, "TYPE_FAMILY"), root_1);

                        adaptor.addChild(root_1, stream_ident.nextTree());
                        adaptor.addChild(root_1, stream_math_type_expression.nextTree());
                        // RParser.g:1136:9: ( constraint_clause )?
                        if ( stream_constraint_clause.hasNext() ) {
                            adaptor.addChild(root_1, stream_constraint_clause.nextTree());

                        }
                        stream_constraint_clause.reset();
                        // RParser.g:1137:9: ( performance_type_init_declaration )?
                        if ( stream_performance_type_init_declaration.hasNext() ) {
                            adaptor.addChild(root_1, stream_performance_type_init_declaration.nextTree());

                        }
                        stream_performance_type_init_declaration.reset();
                        // RParser.g:1138:9: ( performance_type_final_declaration )?
                        if ( stream_performance_type_final_declaration.hasNext() ) {
                            adaptor.addChild(root_1, stream_performance_type_final_declaration.nextTree());

                        }
                        stream_performance_type_final_declaration.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // RParser.g:1139:9: ( FAMILY ident ( SUBSET | ( IS MODELED BY ) ) math_type_expression SEMICOLON ( constraint_clause )? ( performance_type_init_declaration )? ( performance_type_final_declaration )? )
                    {
                    // RParser.g:1139:9: ( FAMILY ident ( SUBSET | ( IS MODELED BY ) ) math_type_expression SEMICOLON ( constraint_clause )? ( performance_type_init_declaration )? ( performance_type_final_declaration )? )
                    // RParser.g:1139:10: FAMILY ident ( SUBSET | ( IS MODELED BY ) ) math_type_expression SEMICOLON ( constraint_clause )? ( performance_type_init_declaration )? ( performance_type_final_declaration )?
                    {
                    FAMILY533=(Token)match(input,FAMILY,FOLLOW_FAMILY_in_performance_type_declaration7146); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_FAMILY.add(FAMILY533);

                    pushFollow(FOLLOW_ident_in_performance_type_declaration7148);
                    ident534=ident();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_ident.add(ident534.getTree());
                    // RParser.g:1140:9: ( SUBSET | ( IS MODELED BY ) )
                    int alt154=2;
                    int LA154_0 = input.LA(1);

                    if ( (LA154_0==SUBSET) ) {
                        alt154=1;
                    }
                    else if ( (LA154_0==IS) ) {
                        alt154=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 154, 0, input);

                        throw nvae;
                    }
                    switch (alt154) {
                        case 1 :
                            // RParser.g:1140:10: SUBSET
                            {
                            SUBSET535=(Token)match(input,SUBSET,FOLLOW_SUBSET_in_performance_type_declaration7159); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_SUBSET.add(SUBSET535);


                            }
                            break;
                        case 2 :
                            // RParser.g:1140:19: ( IS MODELED BY )
                            {
                            // RParser.g:1140:19: ( IS MODELED BY )
                            // RParser.g:1140:20: IS MODELED BY
                            {
                            IS536=(Token)match(input,IS,FOLLOW_IS_in_performance_type_declaration7164); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_IS.add(IS536);

                            MODELED537=(Token)match(input,MODELED,FOLLOW_MODELED_in_performance_type_declaration7166); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_MODELED.add(MODELED537);

                            BY538=(Token)match(input,BY,FOLLOW_BY_in_performance_type_declaration7168); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_BY.add(BY538);


                            }


                            }
                            break;

                    }

                    pushFollow(FOLLOW_math_type_expression_in_performance_type_declaration7180);
                    math_type_expression539=math_type_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_math_type_expression.add(math_type_expression539.getTree());
                    SEMICOLON540=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_performance_type_declaration7182); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SEMICOLON.add(SEMICOLON540);

                    // RParser.g:1142:9: ( constraint_clause )?
                    int alt155=2;
                    alt155 = dfa155.predict(input);
                    switch (alt155) {
                        case 1 :
                            // RParser.g:1142:9: constraint_clause
                            {
                            pushFollow(FOLLOW_constraint_clause_in_performance_type_declaration7192);
                            constraint_clause541=constraint_clause();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_constraint_clause.add(constraint_clause541.getTree());

                            }
                            break;

                    }

                    // RParser.g:1143:9: ( performance_type_init_declaration )?
                    int alt156=2;
                    int LA156_0 = input.LA(1);

                    if ( (LA156_0==INITIALIZATION) ) {
                        alt156=1;
                    }
                    switch (alt156) {
                        case 1 :
                            // RParser.g:1143:9: performance_type_init_declaration
                            {
                            pushFollow(FOLLOW_performance_type_init_declaration_in_performance_type_declaration7203);
                            performance_type_init_declaration542=performance_type_init_declaration();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_performance_type_init_declaration.add(performance_type_init_declaration542.getTree());

                            }
                            break;

                    }

                    // RParser.g:1144:9: ( performance_type_final_declaration )?
                    int alt157=2;
                    int LA157_0 = input.LA(1);

                    if ( (LA157_0==FINALIZATION) ) {
                        alt157=1;
                    }
                    switch (alt157) {
                        case 1 :
                            // RParser.g:1144:9: performance_type_final_declaration
                            {
                            pushFollow(FOLLOW_performance_type_final_declaration_in_performance_type_declaration7214);
                            performance_type_final_declaration543=performance_type_final_declaration();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_performance_type_final_declaration.add(performance_type_final_declaration543.getTree());

                            }
                            break;

                    }


                    }



                    // AST REWRITE
                    // elements: performance_type_init_declaration, performance_type_final_declaration, ident, constraint_clause, math_type_expression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (ColsAST)adaptor.nil();
                    // 1144:46: -> ^( TYPE_FAMILY ident math_type_expression ( constraint_clause )? ( performance_type_init_declaration )? ( performance_type_final_declaration )? )
                    {
                        // RParser.g:1145:9: ^( TYPE_FAMILY ident math_type_expression ( constraint_clause )? ( performance_type_init_declaration )? ( performance_type_final_declaration )? )
                        {
                        ColsAST root_1 = (ColsAST)adaptor.nil();
                        root_1 = (ColsAST)adaptor.becomeRoot((ColsAST)adaptor.create(TYPE_FAMILY, "TYPE_FAMILY"), root_1);

                        adaptor.addChild(root_1, stream_ident.nextTree());
                        adaptor.addChild(root_1, stream_math_type_expression.nextTree());
                        // RParser.g:1146:9: ( constraint_clause )?
                        if ( stream_constraint_clause.hasNext() ) {
                            adaptor.addChild(root_1, stream_constraint_clause.nextTree());

                        }
                        stream_constraint_clause.reset();
                        // RParser.g:1147:9: ( performance_type_init_declaration )?
                        if ( stream_performance_type_init_declaration.hasNext() ) {
                            adaptor.addChild(root_1, stream_performance_type_init_declaration.nextTree());

                        }
                        stream_performance_type_init_declaration.reset();
                        // RParser.g:1148:9: ( performance_type_final_declaration )?
                        if ( stream_performance_type_final_declaration.hasNext() ) {
                            adaptor.addChild(root_1, stream_performance_type_final_declaration.nextTree());

                        }
                        stream_performance_type_final_declaration.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // RParser.g:1149:9: ( TYPE_FAMILY ident ( SUBSET | IS MODELED BY ) math_type_expression SEMICOLON ( constraint_clause )? ( performance_type_init_declaration )? ( performance_type_final_declaration )? )
                    {
                    root_0 = (ColsAST)adaptor.nil();

                    // RParser.g:1149:9: ( TYPE_FAMILY ident ( SUBSET | IS MODELED BY ) math_type_expression SEMICOLON ( constraint_clause )? ( performance_type_init_declaration )? ( performance_type_final_declaration )? )
                    // RParser.g:1149:10: TYPE_FAMILY ident ( SUBSET | IS MODELED BY ) math_type_expression SEMICOLON ( constraint_clause )? ( performance_type_init_declaration )? ( performance_type_final_declaration )?
                    {
                    TYPE_FAMILY544=(Token)match(input,TYPE_FAMILY,FOLLOW_TYPE_FAMILY_in_performance_type_declaration7278); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    TYPE_FAMILY544_tree = (ColsAST)adaptor.create(TYPE_FAMILY544);
                    root_0 = (ColsAST)adaptor.becomeRoot(TYPE_FAMILY544_tree, root_0);
                    }
                    pushFollow(FOLLOW_ident_in_performance_type_declaration7281);
                    ident545=ident();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, ident545.getTree());
                    // RParser.g:1150:9: ( SUBSET | IS MODELED BY )
                    int alt158=2;
                    int LA158_0 = input.LA(1);

                    if ( (LA158_0==SUBSET) ) {
                        alt158=1;
                    }
                    else if ( (LA158_0==IS) ) {
                        alt158=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 158, 0, input);

                        throw nvae;
                    }
                    switch (alt158) {
                        case 1 :
                            // RParser.g:1150:10: SUBSET
                            {
                            SUBSET546=(Token)match(input,SUBSET,FOLLOW_SUBSET_in_performance_type_declaration7292); if (state.failed) return retval;

                            }
                            break;
                        case 2 :
                            // RParser.g:1150:20: IS MODELED BY
                            {
                            IS547=(Token)match(input,IS,FOLLOW_IS_in_performance_type_declaration7297); if (state.failed) return retval;
                            MODELED548=(Token)match(input,MODELED,FOLLOW_MODELED_in_performance_type_declaration7300); if (state.failed) return retval;
                            BY549=(Token)match(input,BY,FOLLOW_BY_in_performance_type_declaration7303); if (state.failed) return retval;

                            }
                            break;

                    }

                    pushFollow(FOLLOW_math_type_expression_in_performance_type_declaration7315);
                    math_type_expression550=math_type_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, math_type_expression550.getTree());
                    SEMICOLON551=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_performance_type_declaration7317); if (state.failed) return retval;
                    // RParser.g:1152:9: ( constraint_clause )?
                    int alt159=2;
                    alt159 = dfa159.predict(input);
                    switch (alt159) {
                        case 1 :
                            // RParser.g:1152:9: constraint_clause
                            {
                            pushFollow(FOLLOW_constraint_clause_in_performance_type_declaration7328);
                            constraint_clause552=constraint_clause();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, constraint_clause552.getTree());

                            }
                            break;

                    }

                    // RParser.g:1153:9: ( performance_type_init_declaration )?
                    int alt160=2;
                    int LA160_0 = input.LA(1);

                    if ( (LA160_0==INITIALIZATION) ) {
                        alt160=1;
                    }
                    switch (alt160) {
                        case 1 :
                            // RParser.g:1153:9: performance_type_init_declaration
                            {
                            pushFollow(FOLLOW_performance_type_init_declaration_in_performance_type_declaration7339);
                            performance_type_init_declaration553=performance_type_init_declaration();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, performance_type_init_declaration553.getTree());

                            }
                            break;

                    }

                    // RParser.g:1154:9: ( performance_type_final_declaration )?
                    int alt161=2;
                    int LA161_0 = input.LA(1);

                    if ( (LA161_0==FINALIZATION) ) {
                        alt161=1;
                    }
                    switch (alt161) {
                        case 1 :
                            // RParser.g:1154:9: performance_type_final_declaration
                            {
                            pushFollow(FOLLOW_performance_type_final_declaration_in_performance_type_declaration7350);
                            performance_type_final_declaration554=performance_type_final_declaration();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, performance_type_final_declaration554.getTree());

                            }
                            break;

                    }


                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (ColsAST)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "performance_type_declaration"

    public static class type_representation_declaration_return extends ParserRuleReturnScope {
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "type_representation_declaration"
    // RParser.g:1157:1: type_representation_declaration : TYPE ident ( EQL | ( IS REPRESENTED BY ) ) structural_program_type_expression SEMICOLON ( convention_clause )? ( correspondence_clause )? ( type_body_init_declaration )? ( type_body_final_declaration )? ;
    public final RParser.type_representation_declaration_return type_representation_declaration() throws RecognitionException {
        RParser.type_representation_declaration_return retval = new RParser.type_representation_declaration_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        Token TYPE555=null;
        Token EQL557=null;
        Token IS558=null;
        Token REPRESENTED559=null;
        Token BY560=null;
        Token SEMICOLON562=null;
        RParser.ident_return ident556 = null;

        RParser.structural_program_type_expression_return structural_program_type_expression561 = null;

        RParser.convention_clause_return convention_clause563 = null;

        RParser.correspondence_clause_return correspondence_clause564 = null;

        RParser.type_body_init_declaration_return type_body_init_declaration565 = null;

        RParser.type_body_final_declaration_return type_body_final_declaration566 = null;


        ColsAST TYPE555_tree=null;
        ColsAST EQL557_tree=null;
        ColsAST IS558_tree=null;
        ColsAST REPRESENTED559_tree=null;
        ColsAST BY560_tree=null;
        ColsAST SEMICOLON562_tree=null;

        try {
            // RParser.g:1158:5: ( TYPE ident ( EQL | ( IS REPRESENTED BY ) ) structural_program_type_expression SEMICOLON ( convention_clause )? ( correspondence_clause )? ( type_body_init_declaration )? ( type_body_final_declaration )? )
            // RParser.g:1158:9: TYPE ident ( EQL | ( IS REPRESENTED BY ) ) structural_program_type_expression SEMICOLON ( convention_clause )? ( correspondence_clause )? ( type_body_init_declaration )? ( type_body_final_declaration )?
            {
            root_0 = (ColsAST)adaptor.nil();

            TYPE555=(Token)match(input,TYPE,FOLLOW_TYPE_in_type_representation_declaration7371); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TYPE555_tree = (ColsAST)adaptor.create(TYPE555);
            root_0 = (ColsAST)adaptor.becomeRoot(TYPE555_tree, root_0);
            }
            pushFollow(FOLLOW_ident_in_type_representation_declaration7374);
            ident556=ident();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, ident556.getTree());
            // RParser.g:1158:21: ( EQL | ( IS REPRESENTED BY ) )
            int alt163=2;
            int LA163_0 = input.LA(1);

            if ( (LA163_0==EQL) ) {
                alt163=1;
            }
            else if ( (LA163_0==IS) ) {
                alt163=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 163, 0, input);

                throw nvae;
            }
            switch (alt163) {
                case 1 :
                    // RParser.g:1158:22: EQL
                    {
                    EQL557=(Token)match(input,EQL,FOLLOW_EQL_in_type_representation_declaration7377); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // RParser.g:1158:29: ( IS REPRESENTED BY )
                    {
                    // RParser.g:1158:29: ( IS REPRESENTED BY )
                    // RParser.g:1158:30: IS REPRESENTED BY
                    {
                    IS558=(Token)match(input,IS,FOLLOW_IS_in_type_representation_declaration7383); if (state.failed) return retval;
                    REPRESENTED559=(Token)match(input,REPRESENTED,FOLLOW_REPRESENTED_in_type_representation_declaration7386); if (state.failed) return retval;
                    BY560=(Token)match(input,BY,FOLLOW_BY_in_type_representation_declaration7389); if (state.failed) return retval;

                    }


                    }
                    break;

            }

            pushFollow(FOLLOW_structural_program_type_expression_in_type_representation_declaration7402);
            structural_program_type_expression561=structural_program_type_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, structural_program_type_expression561.getTree());
            SEMICOLON562=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_type_representation_declaration7404); if (state.failed) return retval;
            // RParser.g:1160:9: ( convention_clause )?
            int alt164=2;
            alt164 = dfa164.predict(input);
            switch (alt164) {
                case 1 :
                    // RParser.g:1160:10: convention_clause
                    {
                    pushFollow(FOLLOW_convention_clause_in_type_representation_declaration7416);
                    convention_clause563=convention_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, convention_clause563.getTree());

                    }
                    break;

            }

            // RParser.g:1161:9: ( correspondence_clause )?
            int alt165=2;
            alt165 = dfa165.predict(input);
            switch (alt165) {
                case 1 :
                    // RParser.g:1161:10: correspondence_clause
                    {
                    pushFollow(FOLLOW_correspondence_clause_in_type_representation_declaration7429);
                    correspondence_clause564=correspondence_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, correspondence_clause564.getTree());

                    }
                    break;

            }

            // RParser.g:1162:9: ( type_body_init_declaration )?
            int alt166=2;
            int LA166_0 = input.LA(1);

            if ( (LA166_0==INITIALIZATION) ) {
                alt166=1;
            }
            switch (alt166) {
                case 1 :
                    // RParser.g:1162:10: type_body_init_declaration
                    {
                    pushFollow(FOLLOW_type_body_init_declaration_in_type_representation_declaration7442);
                    type_body_init_declaration565=type_body_init_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_body_init_declaration565.getTree());

                    }
                    break;

            }

            // RParser.g:1163:9: ( type_body_final_declaration )?
            int alt167=2;
            int LA167_0 = input.LA(1);

            if ( (LA167_0==FINALIZATION) ) {
                alt167=1;
            }
            switch (alt167) {
                case 1 :
                    // RParser.g:1163:10: type_body_final_declaration
                    {
                    pushFollow(FOLLOW_type_body_final_declaration_in_type_representation_declaration7455);
                    type_body_final_declaration566=type_body_final_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_body_final_declaration566.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (ColsAST)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "type_representation_declaration"

    public static class facility_type_declaration_return extends ParserRuleReturnScope {
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "facility_type_declaration"
    // RParser.g:1166:1: facility_type_declaration : TYPE ident ( EQL | ( IS REPRESENTED BY ) ) structural_program_type_expression SEMICOLON ( convention_clause )? ( type_facility_init_declaration )? ( type_facility_final_declaration )? ;
    public final RParser.facility_type_declaration_return facility_type_declaration() throws RecognitionException {
        RParser.facility_type_declaration_return retval = new RParser.facility_type_declaration_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        Token TYPE567=null;
        Token EQL569=null;
        Token IS570=null;
        Token REPRESENTED571=null;
        Token BY572=null;
        Token SEMICOLON574=null;
        RParser.ident_return ident568 = null;

        RParser.structural_program_type_expression_return structural_program_type_expression573 = null;

        RParser.convention_clause_return convention_clause575 = null;

        RParser.type_facility_init_declaration_return type_facility_init_declaration576 = null;

        RParser.type_facility_final_declaration_return type_facility_final_declaration577 = null;


        ColsAST TYPE567_tree=null;
        ColsAST EQL569_tree=null;
        ColsAST IS570_tree=null;
        ColsAST REPRESENTED571_tree=null;
        ColsAST BY572_tree=null;
        ColsAST SEMICOLON574_tree=null;

        try {
            // RParser.g:1167:5: ( TYPE ident ( EQL | ( IS REPRESENTED BY ) ) structural_program_type_expression SEMICOLON ( convention_clause )? ( type_facility_init_declaration )? ( type_facility_final_declaration )? )
            // RParser.g:1167:9: TYPE ident ( EQL | ( IS REPRESENTED BY ) ) structural_program_type_expression SEMICOLON ( convention_clause )? ( type_facility_init_declaration )? ( type_facility_final_declaration )?
            {
            root_0 = (ColsAST)adaptor.nil();

            TYPE567=(Token)match(input,TYPE,FOLLOW_TYPE_in_facility_type_declaration7476); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TYPE567_tree = (ColsAST)adaptor.create(TYPE567);
            root_0 = (ColsAST)adaptor.becomeRoot(TYPE567_tree, root_0);
            }
            pushFollow(FOLLOW_ident_in_facility_type_declaration7479);
            ident568=ident();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, ident568.getTree());
            // RParser.g:1167:21: ( EQL | ( IS REPRESENTED BY ) )
            int alt168=2;
            int LA168_0 = input.LA(1);

            if ( (LA168_0==EQL) ) {
                alt168=1;
            }
            else if ( (LA168_0==IS) ) {
                alt168=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 168, 0, input);

                throw nvae;
            }
            switch (alt168) {
                case 1 :
                    // RParser.g:1167:22: EQL
                    {
                    EQL569=(Token)match(input,EQL,FOLLOW_EQL_in_facility_type_declaration7482); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // RParser.g:1167:29: ( IS REPRESENTED BY )
                    {
                    // RParser.g:1167:29: ( IS REPRESENTED BY )
                    // RParser.g:1167:30: IS REPRESENTED BY
                    {
                    IS570=(Token)match(input,IS,FOLLOW_IS_in_facility_type_declaration7488); if (state.failed) return retval;
                    REPRESENTED571=(Token)match(input,REPRESENTED,FOLLOW_REPRESENTED_in_facility_type_declaration7491); if (state.failed) return retval;
                    BY572=(Token)match(input,BY,FOLLOW_BY_in_facility_type_declaration7494); if (state.failed) return retval;

                    }


                    }
                    break;

            }

            pushFollow(FOLLOW_structural_program_type_expression_in_facility_type_declaration7507);
            structural_program_type_expression573=structural_program_type_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, structural_program_type_expression573.getTree());
            SEMICOLON574=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_facility_type_declaration7509); if (state.failed) return retval;
            // RParser.g:1169:9: ( convention_clause )?
            int alt169=2;
            int LA169_0 = input.LA(1);

            if ( (LA169_0==CONVENTION) ) {
                alt169=1;
            }
            switch (alt169) {
                case 1 :
                    // RParser.g:1169:10: convention_clause
                    {
                    pushFollow(FOLLOW_convention_clause_in_facility_type_declaration7521);
                    convention_clause575=convention_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, convention_clause575.getTree());

                    }
                    break;

            }

            // RParser.g:1170:9: ( type_facility_init_declaration )?
            int alt170=2;
            int LA170_0 = input.LA(1);

            if ( (LA170_0==INITIALIZATION) ) {
                alt170=1;
            }
            switch (alt170) {
                case 1 :
                    // RParser.g:1170:10: type_facility_init_declaration
                    {
                    pushFollow(FOLLOW_type_facility_init_declaration_in_facility_type_declaration7534);
                    type_facility_init_declaration576=type_facility_init_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_facility_init_declaration576.getTree());

                    }
                    break;

            }

            // RParser.g:1171:9: ( type_facility_final_declaration )?
            int alt171=2;
            int LA171_0 = input.LA(1);

            if ( (LA171_0==FINALIZATION) ) {
                alt171=1;
            }
            switch (alt171) {
                case 1 :
                    // RParser.g:1171:10: type_facility_final_declaration
                    {
                    pushFollow(FOLLOW_type_facility_final_declaration_in_facility_type_declaration7548);
                    type_facility_final_declaration577=type_facility_final_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_facility_final_declaration577.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (ColsAST)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "facility_type_declaration"

    public static class module_concept_init_declaration_return extends ParserRuleReturnScope {
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "module_concept_init_declaration"
    // RParser.g:1181:1: module_concept_init_declaration : fac= FAC_INIT concept_init_final_section ;
    public final RParser.module_concept_init_declaration_return module_concept_init_declaration() throws RecognitionException {
        RParser.module_concept_init_declaration_return retval = new RParser.module_concept_init_declaration_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        Token fac=null;
        RParser.concept_init_final_section_return concept_init_final_section578 = null;


        ColsAST fac_tree=null;

        try {
            // RParser.g:1182:5: (fac= FAC_INIT concept_init_final_section )
            // RParser.g:1182:9: fac= FAC_INIT concept_init_final_section
            {
            root_0 = (ColsAST)adaptor.nil();

            fac=(Token)match(input,FAC_INIT,FOLLOW_FAC_INIT_in_module_concept_init_declaration7578); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            fac_tree = (ColsAST)adaptor.create(fac);
            root_0 = (ColsAST)adaptor.becomeRoot(fac_tree, root_0);
            }
            pushFollow(FOLLOW_concept_init_final_section_in_module_concept_init_declaration7581);
            concept_init_final_section578=concept_init_final_section();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, concept_init_final_section578.getTree());
            if ( state.backtracking==0 ) {
               checkFacInit(root_0); 
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (ColsAST)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "module_concept_init_declaration"

    public static class module_concept_final_declaration_return extends ParserRuleReturnScope {
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "module_concept_final_declaration"
    // RParser.g:1186:1: module_concept_final_declaration : fac= FAC_FINAL concept_init_final_section ;
    public final RParser.module_concept_final_declaration_return module_concept_final_declaration() throws RecognitionException {
        RParser.module_concept_final_declaration_return retval = new RParser.module_concept_final_declaration_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        Token fac=null;
        RParser.concept_init_final_section_return concept_init_final_section579 = null;


        ColsAST fac_tree=null;

        try {
            // RParser.g:1187:5: (fac= FAC_FINAL concept_init_final_section )
            // RParser.g:1187:9: fac= FAC_FINAL concept_init_final_section
            {
            root_0 = (ColsAST)adaptor.nil();

            fac=(Token)match(input,FAC_FINAL,FOLLOW_FAC_FINAL_in_module_concept_final_declaration7612); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            fac_tree = (ColsAST)adaptor.create(fac);
            root_0 = (ColsAST)adaptor.becomeRoot(fac_tree, root_0);
            }
            pushFollow(FOLLOW_concept_init_final_section_in_module_concept_final_declaration7615);
            concept_init_final_section579=concept_init_final_section();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, concept_init_final_section579.getTree());
            if ( state.backtracking==0 ) {
               checkFacFinal(root_0); 
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (ColsAST)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "module_concept_final_declaration"

    public static class performance_module_init_declaration_return extends ParserRuleReturnScope {
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "performance_module_init_declaration"
    // RParser.g:1191:1: performance_module_init_declaration : PERF_INIT performance_init_section ;
    public final RParser.performance_module_init_declaration_return performance_module_init_declaration() throws RecognitionException {
        RParser.performance_module_init_declaration_return retval = new RParser.performance_module_init_declaration_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        Token PERF_INIT580=null;
        RParser.performance_init_section_return performance_init_section581 = null;


        ColsAST PERF_INIT580_tree=null;

        try {
            // RParser.g:1192:5: ( PERF_INIT performance_init_section )
            // RParser.g:1192:9: PERF_INIT performance_init_section
            {
            root_0 = (ColsAST)adaptor.nil();

            PERF_INIT580=(Token)match(input,PERF_INIT,FOLLOW_PERF_INIT_in_performance_module_init_declaration7644); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            PERF_INIT580_tree = (ColsAST)adaptor.create(PERF_INIT580);
            root_0 = (ColsAST)adaptor.becomeRoot(PERF_INIT580_tree, root_0);
            }
            pushFollow(FOLLOW_performance_init_section_in_performance_module_init_declaration7647);
            performance_init_section581=performance_init_section();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, performance_init_section581.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (ColsAST)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "performance_module_init_declaration"

    public static class performance_module_final_declaration_return extends ParserRuleReturnScope {
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "performance_module_final_declaration"
    // RParser.g:1195:1: performance_module_final_declaration : PERF_FINAL performance_final_section ;
    public final RParser.performance_module_final_declaration_return performance_module_final_declaration() throws RecognitionException {
        RParser.performance_module_final_declaration_return retval = new RParser.performance_module_final_declaration_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        Token PERF_FINAL582=null;
        RParser.performance_final_section_return performance_final_section583 = null;


        ColsAST PERF_FINAL582_tree=null;

        try {
            // RParser.g:1196:5: ( PERF_FINAL performance_final_section )
            // RParser.g:1196:9: PERF_FINAL performance_final_section
            {
            root_0 = (ColsAST)adaptor.nil();

            PERF_FINAL582=(Token)match(input,PERF_FINAL,FOLLOW_PERF_FINAL_in_performance_module_final_declaration7666); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            PERF_FINAL582_tree = (ColsAST)adaptor.create(PERF_FINAL582);
            root_0 = (ColsAST)adaptor.becomeRoot(PERF_FINAL582_tree, root_0);
            }
            pushFollow(FOLLOW_performance_final_section_in_performance_module_final_declaration7669);
            performance_final_section583=performance_final_section();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, performance_final_section583.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (ColsAST)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "performance_module_final_declaration"

    public static class module_body_init_declaration_return extends ParserRuleReturnScope {
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "module_body_init_declaration"
    // RParser.g:1199:1: module_body_init_declaration : fac= FAC_INIT body_init_final_section ;
    public final RParser.module_body_init_declaration_return module_body_init_declaration() throws RecognitionException {
        RParser.module_body_init_declaration_return retval = new RParser.module_body_init_declaration_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        Token fac=null;
        RParser.body_init_final_section_return body_init_final_section584 = null;


        ColsAST fac_tree=null;

        try {
            // RParser.g:1200:5: (fac= FAC_INIT body_init_final_section )
            // RParser.g:1200:9: fac= FAC_INIT body_init_final_section
            {
            root_0 = (ColsAST)adaptor.nil();

            fac=(Token)match(input,FAC_INIT,FOLLOW_FAC_INIT_in_module_body_init_declaration7691); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            fac_tree = (ColsAST)adaptor.create(fac);
            root_0 = (ColsAST)adaptor.becomeRoot(fac_tree, root_0);
            }
            pushFollow(FOLLOW_body_init_final_section_in_module_body_init_declaration7694);
            body_init_final_section584=body_init_final_section();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, body_init_final_section584.getTree());
            if ( state.backtracking==0 ) {
               checkFacInit(root_0); 
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (ColsAST)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "module_body_init_declaration"

    public static class module_body_final_declaration_return extends ParserRuleReturnScope {
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "module_body_final_declaration"
    // RParser.g:1204:1: module_body_final_declaration : fac= FAC_FINAL body_init_final_section ;
    public final RParser.module_body_final_declaration_return module_body_final_declaration() throws RecognitionException {
        RParser.module_body_final_declaration_return retval = new RParser.module_body_final_declaration_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        Token fac=null;
        RParser.body_init_final_section_return body_init_final_section585 = null;


        ColsAST fac_tree=null;

        try {
            // RParser.g:1205:5: (fac= FAC_FINAL body_init_final_section )
            // RParser.g:1205:9: fac= FAC_FINAL body_init_final_section
            {
            root_0 = (ColsAST)adaptor.nil();

            fac=(Token)match(input,FAC_FINAL,FOLLOW_FAC_FINAL_in_module_body_final_declaration7725); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            fac_tree = (ColsAST)adaptor.create(fac);
            root_0 = (ColsAST)adaptor.becomeRoot(fac_tree, root_0);
            }
            pushFollow(FOLLOW_body_init_final_section_in_module_body_final_declaration7728);
            body_init_final_section585=body_init_final_section();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, body_init_final_section585.getTree());
            if ( state.backtracking==0 ) {
               checkFacFinal(root_0); 
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (ColsAST)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "module_body_final_declaration"

    public static class module_facility_init_declaration_return extends ParserRuleReturnScope {
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "module_facility_init_declaration"
    // RParser.g:1209:1: module_facility_init_declaration : fac= FAC_INIT facility_init_final_section ;
    public final RParser.module_facility_init_declaration_return module_facility_init_declaration() throws RecognitionException {
        RParser.module_facility_init_declaration_return retval = new RParser.module_facility_init_declaration_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        Token fac=null;
        RParser.facility_init_final_section_return facility_init_final_section586 = null;


        ColsAST fac_tree=null;

        try {
            // RParser.g:1210:5: (fac= FAC_INIT facility_init_final_section )
            // RParser.g:1210:9: fac= FAC_INIT facility_init_final_section
            {
            root_0 = (ColsAST)adaptor.nil();

            fac=(Token)match(input,FAC_INIT,FOLLOW_FAC_INIT_in_module_facility_init_declaration7759); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            fac_tree = (ColsAST)adaptor.create(fac);
            root_0 = (ColsAST)adaptor.becomeRoot(fac_tree, root_0);
            }
            pushFollow(FOLLOW_facility_init_final_section_in_module_facility_init_declaration7762);
            facility_init_final_section586=facility_init_final_section();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, facility_init_final_section586.getTree());
            if ( state.backtracking==0 ) {
               checkFacInit(root_0); 
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (ColsAST)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "module_facility_init_declaration"

    public static class module_facility_final_declaration_return extends ParserRuleReturnScope {
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "module_facility_final_declaration"
    // RParser.g:1214:1: module_facility_final_declaration : fac= FAC_FINAL facility_init_final_section ;
    public final RParser.module_facility_final_declaration_return module_facility_final_declaration() throws RecognitionException {
        RParser.module_facility_final_declaration_return retval = new RParser.module_facility_final_declaration_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        Token fac=null;
        RParser.facility_init_final_section_return facility_init_final_section587 = null;


        ColsAST fac_tree=null;

        try {
            // RParser.g:1215:5: (fac= FAC_FINAL facility_init_final_section )
            // RParser.g:1215:9: fac= FAC_FINAL facility_init_final_section
            {
            root_0 = (ColsAST)adaptor.nil();

            fac=(Token)match(input,FAC_FINAL,FOLLOW_FAC_FINAL_in_module_facility_final_declaration7793); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            fac_tree = (ColsAST)adaptor.create(fac);
            root_0 = (ColsAST)adaptor.becomeRoot(fac_tree, root_0);
            }
            pushFollow(FOLLOW_facility_init_final_section_in_module_facility_final_declaration7796);
            facility_init_final_section587=facility_init_final_section();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, facility_init_final_section587.getTree());
            if ( state.backtracking==0 ) {
               checkFacFinal(root_0); 
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (ColsAST)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "module_facility_final_declaration"

    public static class type_concept_init_declaration_return extends ParserRuleReturnScope {
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "type_concept_init_declaration"
    // RParser.g:1221:1: type_concept_init_declaration : INITIALIZATION concept_init_final_section ;
    public final RParser.type_concept_init_declaration_return type_concept_init_declaration() throws RecognitionException {
        RParser.type_concept_init_declaration_return retval = new RParser.type_concept_init_declaration_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        Token INITIALIZATION588=null;
        RParser.concept_init_final_section_return concept_init_final_section589 = null;


        ColsAST INITIALIZATION588_tree=null;

        try {
            // RParser.g:1222:5: ( INITIALIZATION concept_init_final_section )
            // RParser.g:1222:9: INITIALIZATION concept_init_final_section
            {
            root_0 = (ColsAST)adaptor.nil();

            INITIALIZATION588=(Token)match(input,INITIALIZATION,FOLLOW_INITIALIZATION_in_type_concept_init_declaration7827); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            INITIALIZATION588_tree = (ColsAST)adaptor.create(INITIALIZATION588);
            root_0 = (ColsAST)adaptor.becomeRoot(INITIALIZATION588_tree, root_0);
            }
            pushFollow(FOLLOW_concept_init_final_section_in_type_concept_init_declaration7830);
            concept_init_final_section589=concept_init_final_section();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, concept_init_final_section589.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (ColsAST)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "type_concept_init_declaration"

    public static class type_concept_final_declaration_return extends ParserRuleReturnScope {
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "type_concept_final_declaration"
    // RParser.g:1225:1: type_concept_final_declaration : FINALIZATION concept_init_final_section ;
    public final RParser.type_concept_final_declaration_return type_concept_final_declaration() throws RecognitionException {
        RParser.type_concept_final_declaration_return retval = new RParser.type_concept_final_declaration_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        Token FINALIZATION590=null;
        RParser.concept_init_final_section_return concept_init_final_section591 = null;


        ColsAST FINALIZATION590_tree=null;

        try {
            // RParser.g:1226:5: ( FINALIZATION concept_init_final_section )
            // RParser.g:1226:9: FINALIZATION concept_init_final_section
            {
            root_0 = (ColsAST)adaptor.nil();

            FINALIZATION590=(Token)match(input,FINALIZATION,FOLLOW_FINALIZATION_in_type_concept_final_declaration7849); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            FINALIZATION590_tree = (ColsAST)adaptor.create(FINALIZATION590);
            root_0 = (ColsAST)adaptor.becomeRoot(FINALIZATION590_tree, root_0);
            }
            pushFollow(FOLLOW_concept_init_final_section_in_type_concept_final_declaration7852);
            concept_init_final_section591=concept_init_final_section();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, concept_init_final_section591.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (ColsAST)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "type_concept_final_declaration"

    public static class performance_type_init_declaration_return extends ParserRuleReturnScope {
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "performance_type_init_declaration"
    // RParser.g:1229:1: performance_type_init_declaration : INITIALIZATION performance_init_section ;
    public final RParser.performance_type_init_declaration_return performance_type_init_declaration() throws RecognitionException {
        RParser.performance_type_init_declaration_return retval = new RParser.performance_type_init_declaration_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        Token INITIALIZATION592=null;
        RParser.performance_init_section_return performance_init_section593 = null;


        ColsAST INITIALIZATION592_tree=null;

        try {
            // RParser.g:1230:5: ( INITIALIZATION performance_init_section )
            // RParser.g:1230:9: INITIALIZATION performance_init_section
            {
            root_0 = (ColsAST)adaptor.nil();

            INITIALIZATION592=(Token)match(input,INITIALIZATION,FOLLOW_INITIALIZATION_in_performance_type_init_declaration7871); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            INITIALIZATION592_tree = (ColsAST)adaptor.create(INITIALIZATION592);
            root_0 = (ColsAST)adaptor.becomeRoot(INITIALIZATION592_tree, root_0);
            }
            pushFollow(FOLLOW_performance_init_section_in_performance_type_init_declaration7875);
            performance_init_section593=performance_init_section();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, performance_init_section593.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (ColsAST)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "performance_type_init_declaration"

    public static class performance_type_final_declaration_return extends ParserRuleReturnScope {
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "performance_type_final_declaration"
    // RParser.g:1233:1: performance_type_final_declaration : FINALIZATION performance_final_section ;
    public final RParser.performance_type_final_declaration_return performance_type_final_declaration() throws RecognitionException {
        RParser.performance_type_final_declaration_return retval = new RParser.performance_type_final_declaration_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        Token FINALIZATION594=null;
        RParser.performance_final_section_return performance_final_section595 = null;


        ColsAST FINALIZATION594_tree=null;

        try {
            // RParser.g:1234:5: ( FINALIZATION performance_final_section )
            // RParser.g:1234:9: FINALIZATION performance_final_section
            {
            root_0 = (ColsAST)adaptor.nil();

            FINALIZATION594=(Token)match(input,FINALIZATION,FOLLOW_FINALIZATION_in_performance_type_final_declaration7894); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            FINALIZATION594_tree = (ColsAST)adaptor.create(FINALIZATION594);
            root_0 = (ColsAST)adaptor.becomeRoot(FINALIZATION594_tree, root_0);
            }
            pushFollow(FOLLOW_performance_final_section_in_performance_type_final_declaration7898);
            performance_final_section595=performance_final_section();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, performance_final_section595.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (ColsAST)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "performance_type_final_declaration"

    public static class type_body_init_declaration_return extends ParserRuleReturnScope {
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "type_body_init_declaration"
    // RParser.g:1237:1: type_body_init_declaration : INITIALIZATION body_init_final_section ;
    public final RParser.type_body_init_declaration_return type_body_init_declaration() throws RecognitionException {
        RParser.type_body_init_declaration_return retval = new RParser.type_body_init_declaration_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        Token INITIALIZATION596=null;
        RParser.body_init_final_section_return body_init_final_section597 = null;


        ColsAST INITIALIZATION596_tree=null;

        try {
            // RParser.g:1238:5: ( INITIALIZATION body_init_final_section )
            // RParser.g:1238:9: INITIALIZATION body_init_final_section
            {
            root_0 = (ColsAST)adaptor.nil();

            INITIALIZATION596=(Token)match(input,INITIALIZATION,FOLLOW_INITIALIZATION_in_type_body_init_declaration7921); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            INITIALIZATION596_tree = (ColsAST)adaptor.create(INITIALIZATION596);
            root_0 = (ColsAST)adaptor.becomeRoot(INITIALIZATION596_tree, root_0);
            }
            pushFollow(FOLLOW_body_init_final_section_in_type_body_init_declaration7924);
            body_init_final_section597=body_init_final_section();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, body_init_final_section597.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (ColsAST)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "type_body_init_declaration"

    public static class type_body_final_declaration_return extends ParserRuleReturnScope {
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "type_body_final_declaration"
    // RParser.g:1241:1: type_body_final_declaration : FINALIZATION body_init_final_section ;
    public final RParser.type_body_final_declaration_return type_body_final_declaration() throws RecognitionException {
        RParser.type_body_final_declaration_return retval = new RParser.type_body_final_declaration_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        Token FINALIZATION598=null;
        RParser.body_init_final_section_return body_init_final_section599 = null;


        ColsAST FINALIZATION598_tree=null;

        try {
            // RParser.g:1242:5: ( FINALIZATION body_init_final_section )
            // RParser.g:1242:9: FINALIZATION body_init_final_section
            {
            root_0 = (ColsAST)adaptor.nil();

            FINALIZATION598=(Token)match(input,FINALIZATION,FOLLOW_FINALIZATION_in_type_body_final_declaration7943); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            FINALIZATION598_tree = (ColsAST)adaptor.create(FINALIZATION598);
            root_0 = (ColsAST)adaptor.becomeRoot(FINALIZATION598_tree, root_0);
            }
            pushFollow(FOLLOW_body_init_final_section_in_type_body_final_declaration7946);
            body_init_final_section599=body_init_final_section();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, body_init_final_section599.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (ColsAST)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "type_body_final_declaration"

    public static class type_facility_init_declaration_return extends ParserRuleReturnScope {
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "type_facility_init_declaration"
    // RParser.g:1245:1: type_facility_init_declaration : INITIALIZATION facility_init_final_section ;
    public final RParser.type_facility_init_declaration_return type_facility_init_declaration() throws RecognitionException {
        RParser.type_facility_init_declaration_return retval = new RParser.type_facility_init_declaration_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        Token INITIALIZATION600=null;
        RParser.facility_init_final_section_return facility_init_final_section601 = null;


        ColsAST INITIALIZATION600_tree=null;

        try {
            // RParser.g:1246:5: ( INITIALIZATION facility_init_final_section )
            // RParser.g:1246:9: INITIALIZATION facility_init_final_section
            {
            root_0 = (ColsAST)adaptor.nil();

            INITIALIZATION600=(Token)match(input,INITIALIZATION,FOLLOW_INITIALIZATION_in_type_facility_init_declaration7965); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            INITIALIZATION600_tree = (ColsAST)adaptor.create(INITIALIZATION600);
            root_0 = (ColsAST)adaptor.becomeRoot(INITIALIZATION600_tree, root_0);
            }
            pushFollow(FOLLOW_facility_init_final_section_in_type_facility_init_declaration7968);
            facility_init_final_section601=facility_init_final_section();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, facility_init_final_section601.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (ColsAST)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "type_facility_init_declaration"

    public static class type_facility_final_declaration_return extends ParserRuleReturnScope {
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "type_facility_final_declaration"
    // RParser.g:1249:1: type_facility_final_declaration : FINALIZATION facility_init_final_section ;
    public final RParser.type_facility_final_declaration_return type_facility_final_declaration() throws RecognitionException {
        RParser.type_facility_final_declaration_return retval = new RParser.type_facility_final_declaration_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        Token FINALIZATION602=null;
        RParser.facility_init_final_section_return facility_init_final_section603 = null;


        ColsAST FINALIZATION602_tree=null;

        try {
            // RParser.g:1250:5: ( FINALIZATION facility_init_final_section )
            // RParser.g:1250:9: FINALIZATION facility_init_final_section
            {
            root_0 = (ColsAST)adaptor.nil();

            FINALIZATION602=(Token)match(input,FINALIZATION,FOLLOW_FINALIZATION_in_type_facility_final_declaration7987); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            FINALIZATION602_tree = (ColsAST)adaptor.create(FINALIZATION602);
            root_0 = (ColsAST)adaptor.becomeRoot(FINALIZATION602_tree, root_0);
            }
            pushFollow(FOLLOW_facility_init_final_section_in_type_facility_final_declaration7990);
            facility_init_final_section603=facility_init_final_section();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, facility_init_final_section603.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (ColsAST)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "type_facility_final_declaration"

    public static class concept_init_final_section_return extends ParserRuleReturnScope {
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "concept_init_final_section"
    // RParser.g:1255:1: concept_init_final_section : ( affects_clause )* ( requires_clause )? ( ensures_clause )? ;
    public final RParser.concept_init_final_section_return concept_init_final_section() throws RecognitionException {
        RParser.concept_init_final_section_return retval = new RParser.concept_init_final_section_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        RParser.affects_clause_return affects_clause604 = null;

        RParser.requires_clause_return requires_clause605 = null;

        RParser.ensures_clause_return ensures_clause606 = null;



        try {
            // RParser.g:1256:5: ( ( affects_clause )* ( requires_clause )? ( ensures_clause )? )
            // RParser.g:1256:9: ( affects_clause )* ( requires_clause )? ( ensures_clause )?
            {
            root_0 = (ColsAST)adaptor.nil();

            // RParser.g:1256:9: ( affects_clause )*
            loop172:
            do {
                int alt172=2;
                int LA172_0 = input.LA(1);

                if ( (LA172_0==ALTERS||LA172_0==CLEARS||LA172_0==EVALUATES||LA172_0==PRESERVES||LA172_0==REASSIGNS||LA172_0==REPLACES||LA172_0==RESTORES||LA172_0==UPDATES) ) {
                    alt172=1;
                }


                switch (alt172) {
            	case 1 :
            	    // RParser.g:1256:10: affects_clause
            	    {
            	    pushFollow(FOLLOW_affects_clause_in_concept_init_final_section8012);
            	    affects_clause604=affects_clause();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, affects_clause604.getTree());

            	    }
            	    break;

            	default :
            	    break loop172;
                }
            } while (true);

            // RParser.g:1257:9: ( requires_clause )?
            int alt173=2;
            int LA173_0 = input.LA(1);

            if ( (LA173_0==REQUIRES) ) {
                alt173=1;
            }
            switch (alt173) {
                case 1 :
                    // RParser.g:1257:10: requires_clause
                    {
                    pushFollow(FOLLOW_requires_clause_in_concept_init_final_section8025);
                    requires_clause605=requires_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, requires_clause605.getTree());

                    }
                    break;

            }

            // RParser.g:1258:9: ( ensures_clause )?
            int alt174=2;
            int LA174_0 = input.LA(1);

            if ( (LA174_0==ENSURES) ) {
                alt174=1;
            }
            switch (alt174) {
                case 1 :
                    // RParser.g:1258:10: ensures_clause
                    {
                    pushFollow(FOLLOW_ensures_clause_in_concept_init_final_section8038);
                    ensures_clause606=ensures_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, ensures_clause606.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (ColsAST)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "concept_init_final_section"

    public static class performance_init_section_return extends ParserRuleReturnScope {
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "performance_init_section"
    // RParser.g:1261:1: performance_init_section : ( duration_clause )? ( mainp_disp_clause )? ;
    public final RParser.performance_init_section_return performance_init_section() throws RecognitionException {
        RParser.performance_init_section_return retval = new RParser.performance_init_section_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        RParser.duration_clause_return duration_clause607 = null;

        RParser.mainp_disp_clause_return mainp_disp_clause608 = null;



        try {
            // RParser.g:1262:5: ( ( duration_clause )? ( mainp_disp_clause )? )
            // RParser.g:1262:9: ( duration_clause )? ( mainp_disp_clause )?
            {
            root_0 = (ColsAST)adaptor.nil();

            // RParser.g:1262:9: ( duration_clause )?
            int alt175=2;
            int LA175_0 = input.LA(1);

            if ( (LA175_0==DURATION) ) {
                alt175=1;
            }
            switch (alt175) {
                case 1 :
                    // RParser.g:1262:10: duration_clause
                    {
                    pushFollow(FOLLOW_duration_clause_in_performance_init_section8060);
                    duration_clause607=duration_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, duration_clause607.getTree());

                    }
                    break;

            }

            // RParser.g:1263:9: ( mainp_disp_clause )?
            int alt176=2;
            int LA176_0 = input.LA(1);

            if ( (LA176_0==MAINP_DISP) ) {
                alt176=1;
            }
            switch (alt176) {
                case 1 :
                    // RParser.g:1263:10: mainp_disp_clause
                    {
                    pushFollow(FOLLOW_mainp_disp_clause_in_performance_init_section8073);
                    mainp_disp_clause608=mainp_disp_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, mainp_disp_clause608.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (ColsAST)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "performance_init_section"

    public static class performance_final_section_return extends ParserRuleReturnScope {
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "performance_final_section"
    // RParser.g:1266:1: performance_final_section : ( duration_clause )? ( mainp_disp_clause )? ;
    public final RParser.performance_final_section_return performance_final_section() throws RecognitionException {
        RParser.performance_final_section_return retval = new RParser.performance_final_section_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        RParser.duration_clause_return duration_clause609 = null;

        RParser.mainp_disp_clause_return mainp_disp_clause610 = null;



        try {
            // RParser.g:1267:5: ( ( duration_clause )? ( mainp_disp_clause )? )
            // RParser.g:1267:9: ( duration_clause )? ( mainp_disp_clause )?
            {
            root_0 = (ColsAST)adaptor.nil();

            // RParser.g:1267:9: ( duration_clause )?
            int alt177=2;
            int LA177_0 = input.LA(1);

            if ( (LA177_0==DURATION) ) {
                alt177=1;
            }
            switch (alt177) {
                case 1 :
                    // RParser.g:1267:10: duration_clause
                    {
                    pushFollow(FOLLOW_duration_clause_in_performance_final_section8095);
                    duration_clause609=duration_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, duration_clause609.getTree());

                    }
                    break;

            }

            // RParser.g:1268:9: ( mainp_disp_clause )?
            int alt178=2;
            int LA178_0 = input.LA(1);

            if ( (LA178_0==MAINP_DISP) ) {
                alt178=1;
            }
            switch (alt178) {
                case 1 :
                    // RParser.g:1268:10: mainp_disp_clause
                    {
                    pushFollow(FOLLOW_mainp_disp_clause_in_performance_final_section8108);
                    mainp_disp_clause610=mainp_disp_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, mainp_disp_clause610.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (ColsAST)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "performance_final_section"

    public static class body_init_final_section_return extends ParserRuleReturnScope {
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "body_init_final_section"
    // RParser.g:1271:1: body_init_final_section : ( affects_clause )* ( facility_declaration )* ( variable_declaration )* ( aux_variable_declaration )* statement_sequence END SEMICOLON ;
    public final RParser.body_init_final_section_return body_init_final_section() throws RecognitionException {
        RParser.body_init_final_section_return retval = new RParser.body_init_final_section_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        Token END616=null;
        Token SEMICOLON617=null;
        RParser.affects_clause_return affects_clause611 = null;

        RParser.facility_declaration_return facility_declaration612 = null;

        RParser.variable_declaration_return variable_declaration613 = null;

        RParser.aux_variable_declaration_return aux_variable_declaration614 = null;

        RParser.statement_sequence_return statement_sequence615 = null;


        ColsAST END616_tree=null;
        ColsAST SEMICOLON617_tree=null;

        try {
            // RParser.g:1272:5: ( ( affects_clause )* ( facility_declaration )* ( variable_declaration )* ( aux_variable_declaration )* statement_sequence END SEMICOLON )
            // RParser.g:1272:9: ( affects_clause )* ( facility_declaration )* ( variable_declaration )* ( aux_variable_declaration )* statement_sequence END SEMICOLON
            {
            root_0 = (ColsAST)adaptor.nil();

            // RParser.g:1272:9: ( affects_clause )*
            loop179:
            do {
                int alt179=2;
                alt179 = dfa179.predict(input);
                switch (alt179) {
            	case 1 :
            	    // RParser.g:1272:10: affects_clause
            	    {
            	    pushFollow(FOLLOW_affects_clause_in_body_init_final_section8130);
            	    affects_clause611=affects_clause();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, affects_clause611.getTree());

            	    }
            	    break;

            	default :
            	    break loop179;
                }
            } while (true);

            // RParser.g:1273:9: ( facility_declaration )*
            loop180:
            do {
                int alt180=2;
                alt180 = dfa180.predict(input);
                switch (alt180) {
            	case 1 :
            	    // RParser.g:1273:10: facility_declaration
            	    {
            	    pushFollow(FOLLOW_facility_declaration_in_body_init_final_section8143);
            	    facility_declaration612=facility_declaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, facility_declaration612.getTree());

            	    }
            	    break;

            	default :
            	    break loop180;
                }
            } while (true);

            // RParser.g:1274:9: ( variable_declaration )*
            loop181:
            do {
                int alt181=2;
                alt181 = dfa181.predict(input);
                switch (alt181) {
            	case 1 :
            	    // RParser.g:1274:10: variable_declaration
            	    {
            	    pushFollow(FOLLOW_variable_declaration_in_body_init_final_section8156);
            	    variable_declaration613=variable_declaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, variable_declaration613.getTree());

            	    }
            	    break;

            	default :
            	    break loop181;
                }
            } while (true);

            // RParser.g:1275:9: ( aux_variable_declaration )*
            loop182:
            do {
                int alt182=2;
                alt182 = dfa182.predict(input);
                switch (alt182) {
            	case 1 :
            	    // RParser.g:1275:10: aux_variable_declaration
            	    {
            	    pushFollow(FOLLOW_aux_variable_declaration_in_body_init_final_section8169);
            	    aux_variable_declaration614=aux_variable_declaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, aux_variable_declaration614.getTree());

            	    }
            	    break;

            	default :
            	    break loop182;
                }
            } while (true);

            pushFollow(FOLLOW_statement_sequence_in_body_init_final_section8181);
            statement_sequence615=statement_sequence();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, statement_sequence615.getTree());
            END616=(Token)match(input,END,FOLLOW_END_in_body_init_final_section8191); if (state.failed) return retval;
            SEMICOLON617=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_body_init_final_section8194); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (ColsAST)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "body_init_final_section"

    public static class facility_init_final_section_return extends ParserRuleReturnScope {
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "facility_init_final_section"
    // RParser.g:1280:1: facility_init_final_section : ( affects_clause )* ( requires_clause )? ( ensures_clause )? ( facility_declaration )* ( variable_declaration )* ( aux_variable_declaration )* statement_sequence END SEMICOLON ;
    public final RParser.facility_init_final_section_return facility_init_final_section() throws RecognitionException {
        RParser.facility_init_final_section_return retval = new RParser.facility_init_final_section_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        Token END625=null;
        Token SEMICOLON626=null;
        RParser.affects_clause_return affects_clause618 = null;

        RParser.requires_clause_return requires_clause619 = null;

        RParser.ensures_clause_return ensures_clause620 = null;

        RParser.facility_declaration_return facility_declaration621 = null;

        RParser.variable_declaration_return variable_declaration622 = null;

        RParser.aux_variable_declaration_return aux_variable_declaration623 = null;

        RParser.statement_sequence_return statement_sequence624 = null;


        ColsAST END625_tree=null;
        ColsAST SEMICOLON626_tree=null;

        try {
            // RParser.g:1281:5: ( ( affects_clause )* ( requires_clause )? ( ensures_clause )? ( facility_declaration )* ( variable_declaration )* ( aux_variable_declaration )* statement_sequence END SEMICOLON )
            // RParser.g:1281:9: ( affects_clause )* ( requires_clause )? ( ensures_clause )? ( facility_declaration )* ( variable_declaration )* ( aux_variable_declaration )* statement_sequence END SEMICOLON
            {
            root_0 = (ColsAST)adaptor.nil();

            // RParser.g:1281:9: ( affects_clause )*
            loop183:
            do {
                int alt183=2;
                alt183 = dfa183.predict(input);
                switch (alt183) {
            	case 1 :
            	    // RParser.g:1281:10: affects_clause
            	    {
            	    pushFollow(FOLLOW_affects_clause_in_facility_init_final_section8215);
            	    affects_clause618=affects_clause();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, affects_clause618.getTree());

            	    }
            	    break;

            	default :
            	    break loop183;
                }
            } while (true);

            // RParser.g:1282:9: ( requires_clause )?
            int alt184=2;
            alt184 = dfa184.predict(input);
            switch (alt184) {
                case 1 :
                    // RParser.g:1282:10: requires_clause
                    {
                    pushFollow(FOLLOW_requires_clause_in_facility_init_final_section8228);
                    requires_clause619=requires_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, requires_clause619.getTree());

                    }
                    break;

            }

            // RParser.g:1283:9: ( ensures_clause )?
            int alt185=2;
            alt185 = dfa185.predict(input);
            switch (alt185) {
                case 1 :
                    // RParser.g:1283:10: ensures_clause
                    {
                    pushFollow(FOLLOW_ensures_clause_in_facility_init_final_section8241);
                    ensures_clause620=ensures_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, ensures_clause620.getTree());

                    }
                    break;

            }

            // RParser.g:1284:9: ( facility_declaration )*
            loop186:
            do {
                int alt186=2;
                alt186 = dfa186.predict(input);
                switch (alt186) {
            	case 1 :
            	    // RParser.g:1284:10: facility_declaration
            	    {
            	    pushFollow(FOLLOW_facility_declaration_in_facility_init_final_section8254);
            	    facility_declaration621=facility_declaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, facility_declaration621.getTree());

            	    }
            	    break;

            	default :
            	    break loop186;
                }
            } while (true);

            // RParser.g:1285:9: ( variable_declaration )*
            loop187:
            do {
                int alt187=2;
                alt187 = dfa187.predict(input);
                switch (alt187) {
            	case 1 :
            	    // RParser.g:1285:10: variable_declaration
            	    {
            	    pushFollow(FOLLOW_variable_declaration_in_facility_init_final_section8267);
            	    variable_declaration622=variable_declaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, variable_declaration622.getTree());

            	    }
            	    break;

            	default :
            	    break loop187;
                }
            } while (true);

            // RParser.g:1286:9: ( aux_variable_declaration )*
            loop188:
            do {
                int alt188=2;
                alt188 = dfa188.predict(input);
                switch (alt188) {
            	case 1 :
            	    // RParser.g:1286:10: aux_variable_declaration
            	    {
            	    pushFollow(FOLLOW_aux_variable_declaration_in_facility_init_final_section8280);
            	    aux_variable_declaration623=aux_variable_declaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, aux_variable_declaration623.getTree());

            	    }
            	    break;

            	default :
            	    break loop188;
                }
            } while (true);

            pushFollow(FOLLOW_statement_sequence_in_facility_init_final_section8292);
            statement_sequence624=statement_sequence();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, statement_sequence624.getTree());
            END625=(Token)match(input,END,FOLLOW_END_in_facility_init_final_section8302); if (state.failed) return retval;
            SEMICOLON626=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_facility_init_final_section8305); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (ColsAST)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "facility_init_final_section"

    public static class statement_return extends ParserRuleReturnScope {
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "statement"
    // RParser.g:1295:1: statement : ( if_statement -> ^( STATEMENT if_statement ) | selection_statement -> ^( STATEMENT selection_statement ) | while_loop_statement -> ^( STATEMENT while_loop_statement ) | iterate_loop_statement -> ^( STATEMENT iterate_loop_statement ) | ( variable_expression SWAP_OP )=> swap_statement -> ^( STATEMENT swap_statement ) | ( variable_expression ASSIGN_OP )=> function_assignment -> ^( STATEMENT function_assignment ) | ( qualified_ident LPAREN )=> procedure_operation_call -> ^( STATEMENT procedure_operation_call ) | remember_statement -> ^( STATEMENT remember_statement ) | forget_statement -> ^( STATEMENT forget_statement ) | confirm_statement -> ^( STATEMENT confirm_statement ) | assume_statement -> ^( STATEMENT assume_statement ) | aux_code_statement -> ^( STATEMENT aux_code_statement ) ) ;
    public final RParser.statement_return statement() throws RecognitionException {
        RParser.statement_return retval = new RParser.statement_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        RParser.if_statement_return if_statement627 = null;

        RParser.selection_statement_return selection_statement628 = null;

        RParser.while_loop_statement_return while_loop_statement629 = null;

        RParser.iterate_loop_statement_return iterate_loop_statement630 = null;

        RParser.swap_statement_return swap_statement631 = null;

        RParser.function_assignment_return function_assignment632 = null;

        RParser.procedure_operation_call_return procedure_operation_call633 = null;

        RParser.remember_statement_return remember_statement634 = null;

        RParser.forget_statement_return forget_statement635 = null;

        RParser.confirm_statement_return confirm_statement636 = null;

        RParser.assume_statement_return assume_statement637 = null;

        RParser.aux_code_statement_return aux_code_statement638 = null;


        RewriteRuleSubtreeStream stream_confirm_statement=new RewriteRuleSubtreeStream(adaptor,"rule confirm_statement");
        RewriteRuleSubtreeStream stream_swap_statement=new RewriteRuleSubtreeStream(adaptor,"rule swap_statement");
        RewriteRuleSubtreeStream stream_remember_statement=new RewriteRuleSubtreeStream(adaptor,"rule remember_statement");
        RewriteRuleSubtreeStream stream_selection_statement=new RewriteRuleSubtreeStream(adaptor,"rule selection_statement");
        RewriteRuleSubtreeStream stream_function_assignment=new RewriteRuleSubtreeStream(adaptor,"rule function_assignment");
        RewriteRuleSubtreeStream stream_if_statement=new RewriteRuleSubtreeStream(adaptor,"rule if_statement");
        RewriteRuleSubtreeStream stream_forget_statement=new RewriteRuleSubtreeStream(adaptor,"rule forget_statement");
        RewriteRuleSubtreeStream stream_iterate_loop_statement=new RewriteRuleSubtreeStream(adaptor,"rule iterate_loop_statement");
        RewriteRuleSubtreeStream stream_procedure_operation_call=new RewriteRuleSubtreeStream(adaptor,"rule procedure_operation_call");
        RewriteRuleSubtreeStream stream_while_loop_statement=new RewriteRuleSubtreeStream(adaptor,"rule while_loop_statement");
        RewriteRuleSubtreeStream stream_assume_statement=new RewriteRuleSubtreeStream(adaptor,"rule assume_statement");
        RewriteRuleSubtreeStream stream_aux_code_statement=new RewriteRuleSubtreeStream(adaptor,"rule aux_code_statement");
        try {
            // RParser.g:1296:5: ( ( if_statement -> ^( STATEMENT if_statement ) | selection_statement -> ^( STATEMENT selection_statement ) | while_loop_statement -> ^( STATEMENT while_loop_statement ) | iterate_loop_statement -> ^( STATEMENT iterate_loop_statement ) | ( variable_expression SWAP_OP )=> swap_statement -> ^( STATEMENT swap_statement ) | ( variable_expression ASSIGN_OP )=> function_assignment -> ^( STATEMENT function_assignment ) | ( qualified_ident LPAREN )=> procedure_operation_call -> ^( STATEMENT procedure_operation_call ) | remember_statement -> ^( STATEMENT remember_statement ) | forget_statement -> ^( STATEMENT forget_statement ) | confirm_statement -> ^( STATEMENT confirm_statement ) | assume_statement -> ^( STATEMENT assume_statement ) | aux_code_statement -> ^( STATEMENT aux_code_statement ) ) )
            // RParser.g:1296:9: ( if_statement -> ^( STATEMENT if_statement ) | selection_statement -> ^( STATEMENT selection_statement ) | while_loop_statement -> ^( STATEMENT while_loop_statement ) | iterate_loop_statement -> ^( STATEMENT iterate_loop_statement ) | ( variable_expression SWAP_OP )=> swap_statement -> ^( STATEMENT swap_statement ) | ( variable_expression ASSIGN_OP )=> function_assignment -> ^( STATEMENT function_assignment ) | ( qualified_ident LPAREN )=> procedure_operation_call -> ^( STATEMENT procedure_operation_call ) | remember_statement -> ^( STATEMENT remember_statement ) | forget_statement -> ^( STATEMENT forget_statement ) | confirm_statement -> ^( STATEMENT confirm_statement ) | assume_statement -> ^( STATEMENT assume_statement ) | aux_code_statement -> ^( STATEMENT aux_code_statement ) )
            {
            // RParser.g:1296:9: ( if_statement -> ^( STATEMENT if_statement ) | selection_statement -> ^( STATEMENT selection_statement ) | while_loop_statement -> ^( STATEMENT while_loop_statement ) | iterate_loop_statement -> ^( STATEMENT iterate_loop_statement ) | ( variable_expression SWAP_OP )=> swap_statement -> ^( STATEMENT swap_statement ) | ( variable_expression ASSIGN_OP )=> function_assignment -> ^( STATEMENT function_assignment ) | ( qualified_ident LPAREN )=> procedure_operation_call -> ^( STATEMENT procedure_operation_call ) | remember_statement -> ^( STATEMENT remember_statement ) | forget_statement -> ^( STATEMENT forget_statement ) | confirm_statement -> ^( STATEMENT confirm_statement ) | assume_statement -> ^( STATEMENT assume_statement ) | aux_code_statement -> ^( STATEMENT aux_code_statement ) )
            int alt189=12;
            alt189 = dfa189.predict(input);
            switch (alt189) {
                case 1 :
                    // RParser.g:1296:13: if_statement
                    {
                    pushFollow(FOLLOW_if_statement_in_statement8333);
                    if_statement627=if_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_if_statement.add(if_statement627.getTree());


                    // AST REWRITE
                    // elements: if_statement
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (ColsAST)adaptor.nil();
                    // 1296:26: -> ^( STATEMENT if_statement )
                    {
                        // RParser.g:1296:29: ^( STATEMENT if_statement )
                        {
                        ColsAST root_1 = (ColsAST)adaptor.nil();
                        root_1 = (ColsAST)adaptor.becomeRoot((ColsAST)adaptor.create(STATEMENT, "STATEMENT"), root_1);

                        adaptor.addChild(root_1, stream_if_statement.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // RParser.g:1297:13: selection_statement
                    {
                    pushFollow(FOLLOW_selection_statement_in_statement8355);
                    selection_statement628=selection_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_selection_statement.add(selection_statement628.getTree());


                    // AST REWRITE
                    // elements: selection_statement
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (ColsAST)adaptor.nil();
                    // 1297:33: -> ^( STATEMENT selection_statement )
                    {
                        // RParser.g:1297:36: ^( STATEMENT selection_statement )
                        {
                        ColsAST root_1 = (ColsAST)adaptor.nil();
                        root_1 = (ColsAST)adaptor.becomeRoot((ColsAST)adaptor.create(STATEMENT, "STATEMENT"), root_1);

                        adaptor.addChild(root_1, stream_selection_statement.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // RParser.g:1298:13: while_loop_statement
                    {
                    pushFollow(FOLLOW_while_loop_statement_in_statement8377);
                    while_loop_statement629=while_loop_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_while_loop_statement.add(while_loop_statement629.getTree());


                    // AST REWRITE
                    // elements: while_loop_statement
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (ColsAST)adaptor.nil();
                    // 1298:34: -> ^( STATEMENT while_loop_statement )
                    {
                        // RParser.g:1298:37: ^( STATEMENT while_loop_statement )
                        {
                        ColsAST root_1 = (ColsAST)adaptor.nil();
                        root_1 = (ColsAST)adaptor.becomeRoot((ColsAST)adaptor.create(STATEMENT, "STATEMENT"), root_1);

                        adaptor.addChild(root_1, stream_while_loop_statement.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 4 :
                    // RParser.g:1299:13: iterate_loop_statement
                    {
                    pushFollow(FOLLOW_iterate_loop_statement_in_statement8399);
                    iterate_loop_statement630=iterate_loop_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_iterate_loop_statement.add(iterate_loop_statement630.getTree());


                    // AST REWRITE
                    // elements: iterate_loop_statement
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (ColsAST)adaptor.nil();
                    // 1299:36: -> ^( STATEMENT iterate_loop_statement )
                    {
                        // RParser.g:1299:39: ^( STATEMENT iterate_loop_statement )
                        {
                        ColsAST root_1 = (ColsAST)adaptor.nil();
                        root_1 = (ColsAST)adaptor.becomeRoot((ColsAST)adaptor.create(STATEMENT, "STATEMENT"), root_1);

                        adaptor.addChild(root_1, stream_iterate_loop_statement.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 5 :
                    // RParser.g:1300:13: ( variable_expression SWAP_OP )=> swap_statement
                    {
                    pushFollow(FOLLOW_swap_statement_in_statement8428);
                    swap_statement631=swap_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_swap_statement.add(swap_statement631.getTree());


                    // AST REWRITE
                    // elements: swap_statement
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (ColsAST)adaptor.nil();
                    // 1300:60: -> ^( STATEMENT swap_statement )
                    {
                        // RParser.g:1300:63: ^( STATEMENT swap_statement )
                        {
                        ColsAST root_1 = (ColsAST)adaptor.nil();
                        root_1 = (ColsAST)adaptor.becomeRoot((ColsAST)adaptor.create(STATEMENT, "STATEMENT"), root_1);

                        adaptor.addChild(root_1, stream_swap_statement.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 6 :
                    // RParser.g:1301:13: ( variable_expression ASSIGN_OP )=> function_assignment
                    {
                    pushFollow(FOLLOW_function_assignment_in_statement8457);
                    function_assignment632=function_assignment();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_function_assignment.add(function_assignment632.getTree());


                    // AST REWRITE
                    // elements: function_assignment
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (ColsAST)adaptor.nil();
                    // 1301:67: -> ^( STATEMENT function_assignment )
                    {
                        // RParser.g:1301:70: ^( STATEMENT function_assignment )
                        {
                        ColsAST root_1 = (ColsAST)adaptor.nil();
                        root_1 = (ColsAST)adaptor.becomeRoot((ColsAST)adaptor.create(STATEMENT, "STATEMENT"), root_1);

                        adaptor.addChild(root_1, stream_function_assignment.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 7 :
                    // RParser.g:1302:13: ( qualified_ident LPAREN )=> procedure_operation_call
                    {
                    pushFollow(FOLLOW_procedure_operation_call_in_statement8486);
                    procedure_operation_call633=procedure_operation_call();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_procedure_operation_call.add(procedure_operation_call633.getTree());


                    // AST REWRITE
                    // elements: procedure_operation_call
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (ColsAST)adaptor.nil();
                    // 1302:65: -> ^( STATEMENT procedure_operation_call )
                    {
                        // RParser.g:1302:68: ^( STATEMENT procedure_operation_call )
                        {
                        ColsAST root_1 = (ColsAST)adaptor.nil();
                        root_1 = (ColsAST)adaptor.becomeRoot((ColsAST)adaptor.create(STATEMENT, "STATEMENT"), root_1);

                        adaptor.addChild(root_1, stream_procedure_operation_call.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 8 :
                    // RParser.g:1303:13: remember_statement
                    {
                    pushFollow(FOLLOW_remember_statement_in_statement8508);
                    remember_statement634=remember_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_remember_statement.add(remember_statement634.getTree());


                    // AST REWRITE
                    // elements: remember_statement
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (ColsAST)adaptor.nil();
                    // 1303:32: -> ^( STATEMENT remember_statement )
                    {
                        // RParser.g:1303:35: ^( STATEMENT remember_statement )
                        {
                        ColsAST root_1 = (ColsAST)adaptor.nil();
                        root_1 = (ColsAST)adaptor.becomeRoot((ColsAST)adaptor.create(STATEMENT, "STATEMENT"), root_1);

                        adaptor.addChild(root_1, stream_remember_statement.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 9 :
                    // RParser.g:1304:13: forget_statement
                    {
                    pushFollow(FOLLOW_forget_statement_in_statement8530);
                    forget_statement635=forget_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_forget_statement.add(forget_statement635.getTree());


                    // AST REWRITE
                    // elements: forget_statement
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (ColsAST)adaptor.nil();
                    // 1304:30: -> ^( STATEMENT forget_statement )
                    {
                        // RParser.g:1304:33: ^( STATEMENT forget_statement )
                        {
                        ColsAST root_1 = (ColsAST)adaptor.nil();
                        root_1 = (ColsAST)adaptor.becomeRoot((ColsAST)adaptor.create(STATEMENT, "STATEMENT"), root_1);

                        adaptor.addChild(root_1, stream_forget_statement.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 10 :
                    // RParser.g:1305:13: confirm_statement
                    {
                    pushFollow(FOLLOW_confirm_statement_in_statement8552);
                    confirm_statement636=confirm_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_confirm_statement.add(confirm_statement636.getTree());


                    // AST REWRITE
                    // elements: confirm_statement
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (ColsAST)adaptor.nil();
                    // 1305:31: -> ^( STATEMENT confirm_statement )
                    {
                        // RParser.g:1305:34: ^( STATEMENT confirm_statement )
                        {
                        ColsAST root_1 = (ColsAST)adaptor.nil();
                        root_1 = (ColsAST)adaptor.becomeRoot((ColsAST)adaptor.create(STATEMENT, "STATEMENT"), root_1);

                        adaptor.addChild(root_1, stream_confirm_statement.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 11 :
                    // RParser.g:1306:13: assume_statement
                    {
                    pushFollow(FOLLOW_assume_statement_in_statement8574);
                    assume_statement637=assume_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_assume_statement.add(assume_statement637.getTree());


                    // AST REWRITE
                    // elements: assume_statement
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (ColsAST)adaptor.nil();
                    // 1306:30: -> ^( STATEMENT assume_statement )
                    {
                        // RParser.g:1306:33: ^( STATEMENT assume_statement )
                        {
                        ColsAST root_1 = (ColsAST)adaptor.nil();
                        root_1 = (ColsAST)adaptor.becomeRoot((ColsAST)adaptor.create(STATEMENT, "STATEMENT"), root_1);

                        adaptor.addChild(root_1, stream_assume_statement.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 12 :
                    // RParser.g:1307:13: aux_code_statement
                    {
                    pushFollow(FOLLOW_aux_code_statement_in_statement8596);
                    aux_code_statement638=aux_code_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_aux_code_statement.add(aux_code_statement638.getTree());


                    // AST REWRITE
                    // elements: aux_code_statement
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (ColsAST)adaptor.nil();
                    // 1307:32: -> ^( STATEMENT aux_code_statement )
                    {
                        // RParser.g:1307:35: ^( STATEMENT aux_code_statement )
                        {
                        ColsAST root_1 = (ColsAST)adaptor.nil();
                        root_1 = (ColsAST)adaptor.becomeRoot((ColsAST)adaptor.create(STATEMENT, "STATEMENT"), root_1);

                        adaptor.addChild(root_1, stream_aux_code_statement.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (ColsAST)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "statement"

    public static class in_aux_statement_return extends ParserRuleReturnScope {
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "in_aux_statement"
    // RParser.g:1311:1: in_aux_statement : ( if_statement -> ^( STATEMENT if_statement ) | selection_statement -> ^( STATEMENT selection_statement ) | while_loop_statement -> ^( STATEMENT while_loop_statement ) | iterate_loop_statement -> ^( STATEMENT iterate_loop_statement ) | ( variable_expression SWAP_OP )=> swap_statement -> ^( STATEMENT swap_statement ) | ( variable_expression ASSIGN_OP )=> function_assignment -> ^( STATEMENT function_assignment ) | ( qualified_ident LPAREN )=> procedure_operation_call -> ^( STATEMENT procedure_operation_call ) | remember_statement -> ^( STATEMENT remember_statement ) | forget_statement -> ^( STATEMENT forget_statement ) | confirm_statement -> ^( STATEMENT confirm_statement ) | assume_statement -> ^( STATEMENT assume_statement ) | aux_code_statement -> ^( STATEMENT aux_code_statement ) ) ;
    public final RParser.in_aux_statement_return in_aux_statement() throws RecognitionException {
        RParser.in_aux_statement_return retval = new RParser.in_aux_statement_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        RParser.if_statement_return if_statement639 = null;

        RParser.selection_statement_return selection_statement640 = null;

        RParser.while_loop_statement_return while_loop_statement641 = null;

        RParser.iterate_loop_statement_return iterate_loop_statement642 = null;

        RParser.swap_statement_return swap_statement643 = null;

        RParser.function_assignment_return function_assignment644 = null;

        RParser.procedure_operation_call_return procedure_operation_call645 = null;

        RParser.remember_statement_return remember_statement646 = null;

        RParser.forget_statement_return forget_statement647 = null;

        RParser.confirm_statement_return confirm_statement648 = null;

        RParser.assume_statement_return assume_statement649 = null;

        RParser.aux_code_statement_return aux_code_statement650 = null;


        RewriteRuleSubtreeStream stream_confirm_statement=new RewriteRuleSubtreeStream(adaptor,"rule confirm_statement");
        RewriteRuleSubtreeStream stream_swap_statement=new RewriteRuleSubtreeStream(adaptor,"rule swap_statement");
        RewriteRuleSubtreeStream stream_remember_statement=new RewriteRuleSubtreeStream(adaptor,"rule remember_statement");
        RewriteRuleSubtreeStream stream_selection_statement=new RewriteRuleSubtreeStream(adaptor,"rule selection_statement");
        RewriteRuleSubtreeStream stream_function_assignment=new RewriteRuleSubtreeStream(adaptor,"rule function_assignment");
        RewriteRuleSubtreeStream stream_if_statement=new RewriteRuleSubtreeStream(adaptor,"rule if_statement");
        RewriteRuleSubtreeStream stream_forget_statement=new RewriteRuleSubtreeStream(adaptor,"rule forget_statement");
        RewriteRuleSubtreeStream stream_iterate_loop_statement=new RewriteRuleSubtreeStream(adaptor,"rule iterate_loop_statement");
        RewriteRuleSubtreeStream stream_procedure_operation_call=new RewriteRuleSubtreeStream(adaptor,"rule procedure_operation_call");
        RewriteRuleSubtreeStream stream_while_loop_statement=new RewriteRuleSubtreeStream(adaptor,"rule while_loop_statement");
        RewriteRuleSubtreeStream stream_assume_statement=new RewriteRuleSubtreeStream(adaptor,"rule assume_statement");
        RewriteRuleSubtreeStream stream_aux_code_statement=new RewriteRuleSubtreeStream(adaptor,"rule aux_code_statement");
        try {
            // RParser.g:1312:5: ( ( if_statement -> ^( STATEMENT if_statement ) | selection_statement -> ^( STATEMENT selection_statement ) | while_loop_statement -> ^( STATEMENT while_loop_statement ) | iterate_loop_statement -> ^( STATEMENT iterate_loop_statement ) | ( variable_expression SWAP_OP )=> swap_statement -> ^( STATEMENT swap_statement ) | ( variable_expression ASSIGN_OP )=> function_assignment -> ^( STATEMENT function_assignment ) | ( qualified_ident LPAREN )=> procedure_operation_call -> ^( STATEMENT procedure_operation_call ) | remember_statement -> ^( STATEMENT remember_statement ) | forget_statement -> ^( STATEMENT forget_statement ) | confirm_statement -> ^( STATEMENT confirm_statement ) | assume_statement -> ^( STATEMENT assume_statement ) | aux_code_statement -> ^( STATEMENT aux_code_statement ) ) )
            // RParser.g:1312:9: ( if_statement -> ^( STATEMENT if_statement ) | selection_statement -> ^( STATEMENT selection_statement ) | while_loop_statement -> ^( STATEMENT while_loop_statement ) | iterate_loop_statement -> ^( STATEMENT iterate_loop_statement ) | ( variable_expression SWAP_OP )=> swap_statement -> ^( STATEMENT swap_statement ) | ( variable_expression ASSIGN_OP )=> function_assignment -> ^( STATEMENT function_assignment ) | ( qualified_ident LPAREN )=> procedure_operation_call -> ^( STATEMENT procedure_operation_call ) | remember_statement -> ^( STATEMENT remember_statement ) | forget_statement -> ^( STATEMENT forget_statement ) | confirm_statement -> ^( STATEMENT confirm_statement ) | assume_statement -> ^( STATEMENT assume_statement ) | aux_code_statement -> ^( STATEMENT aux_code_statement ) )
            {
            // RParser.g:1312:9: ( if_statement -> ^( STATEMENT if_statement ) | selection_statement -> ^( STATEMENT selection_statement ) | while_loop_statement -> ^( STATEMENT while_loop_statement ) | iterate_loop_statement -> ^( STATEMENT iterate_loop_statement ) | ( variable_expression SWAP_OP )=> swap_statement -> ^( STATEMENT swap_statement ) | ( variable_expression ASSIGN_OP )=> function_assignment -> ^( STATEMENT function_assignment ) | ( qualified_ident LPAREN )=> procedure_operation_call -> ^( STATEMENT procedure_operation_call ) | remember_statement -> ^( STATEMENT remember_statement ) | forget_statement -> ^( STATEMENT forget_statement ) | confirm_statement -> ^( STATEMENT confirm_statement ) | assume_statement -> ^( STATEMENT assume_statement ) | aux_code_statement -> ^( STATEMENT aux_code_statement ) )
            int alt190=12;
            alt190 = dfa190.predict(input);
            switch (alt190) {
                case 1 :
                    // RParser.g:1312:13: if_statement
                    {
                    pushFollow(FOLLOW_if_statement_in_in_aux_statement8637);
                    if_statement639=if_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_if_statement.add(if_statement639.getTree());


                    // AST REWRITE
                    // elements: if_statement
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (ColsAST)adaptor.nil();
                    // 1312:26: -> ^( STATEMENT if_statement )
                    {
                        // RParser.g:1312:29: ^( STATEMENT if_statement )
                        {
                        ColsAST root_1 = (ColsAST)adaptor.nil();
                        root_1 = (ColsAST)adaptor.becomeRoot((ColsAST)adaptor.create(STATEMENT, "STATEMENT"), root_1);

                        adaptor.addChild(root_1, stream_if_statement.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // RParser.g:1313:13: selection_statement
                    {
                    pushFollow(FOLLOW_selection_statement_in_in_aux_statement8659);
                    selection_statement640=selection_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_selection_statement.add(selection_statement640.getTree());


                    // AST REWRITE
                    // elements: selection_statement
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (ColsAST)adaptor.nil();
                    // 1313:33: -> ^( STATEMENT selection_statement )
                    {
                        // RParser.g:1313:36: ^( STATEMENT selection_statement )
                        {
                        ColsAST root_1 = (ColsAST)adaptor.nil();
                        root_1 = (ColsAST)adaptor.becomeRoot((ColsAST)adaptor.create(STATEMENT, "STATEMENT"), root_1);

                        adaptor.addChild(root_1, stream_selection_statement.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // RParser.g:1314:13: while_loop_statement
                    {
                    pushFollow(FOLLOW_while_loop_statement_in_in_aux_statement8681);
                    while_loop_statement641=while_loop_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_while_loop_statement.add(while_loop_statement641.getTree());


                    // AST REWRITE
                    // elements: while_loop_statement
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (ColsAST)adaptor.nil();
                    // 1314:34: -> ^( STATEMENT while_loop_statement )
                    {
                        // RParser.g:1314:37: ^( STATEMENT while_loop_statement )
                        {
                        ColsAST root_1 = (ColsAST)adaptor.nil();
                        root_1 = (ColsAST)adaptor.becomeRoot((ColsAST)adaptor.create(STATEMENT, "STATEMENT"), root_1);

                        adaptor.addChild(root_1, stream_while_loop_statement.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 4 :
                    // RParser.g:1315:13: iterate_loop_statement
                    {
                    pushFollow(FOLLOW_iterate_loop_statement_in_in_aux_statement8703);
                    iterate_loop_statement642=iterate_loop_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_iterate_loop_statement.add(iterate_loop_statement642.getTree());


                    // AST REWRITE
                    // elements: iterate_loop_statement
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (ColsAST)adaptor.nil();
                    // 1315:36: -> ^( STATEMENT iterate_loop_statement )
                    {
                        // RParser.g:1315:39: ^( STATEMENT iterate_loop_statement )
                        {
                        ColsAST root_1 = (ColsAST)adaptor.nil();
                        root_1 = (ColsAST)adaptor.becomeRoot((ColsAST)adaptor.create(STATEMENT, "STATEMENT"), root_1);

                        adaptor.addChild(root_1, stream_iterate_loop_statement.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 5 :
                    // RParser.g:1316:13: ( variable_expression SWAP_OP )=> swap_statement
                    {
                    pushFollow(FOLLOW_swap_statement_in_in_aux_statement8732);
                    swap_statement643=swap_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_swap_statement.add(swap_statement643.getTree());


                    // AST REWRITE
                    // elements: swap_statement
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (ColsAST)adaptor.nil();
                    // 1316:60: -> ^( STATEMENT swap_statement )
                    {
                        // RParser.g:1316:63: ^( STATEMENT swap_statement )
                        {
                        ColsAST root_1 = (ColsAST)adaptor.nil();
                        root_1 = (ColsAST)adaptor.becomeRoot((ColsAST)adaptor.create(STATEMENT, "STATEMENT"), root_1);

                        adaptor.addChild(root_1, stream_swap_statement.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 6 :
                    // RParser.g:1317:13: ( variable_expression ASSIGN_OP )=> function_assignment
                    {
                    pushFollow(FOLLOW_function_assignment_in_in_aux_statement8761);
                    function_assignment644=function_assignment();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_function_assignment.add(function_assignment644.getTree());


                    // AST REWRITE
                    // elements: function_assignment
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (ColsAST)adaptor.nil();
                    // 1317:67: -> ^( STATEMENT function_assignment )
                    {
                        // RParser.g:1317:70: ^( STATEMENT function_assignment )
                        {
                        ColsAST root_1 = (ColsAST)adaptor.nil();
                        root_1 = (ColsAST)adaptor.becomeRoot((ColsAST)adaptor.create(STATEMENT, "STATEMENT"), root_1);

                        adaptor.addChild(root_1, stream_function_assignment.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 7 :
                    // RParser.g:1318:13: ( qualified_ident LPAREN )=> procedure_operation_call
                    {
                    pushFollow(FOLLOW_procedure_operation_call_in_in_aux_statement8790);
                    procedure_operation_call645=procedure_operation_call();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_procedure_operation_call.add(procedure_operation_call645.getTree());


                    // AST REWRITE
                    // elements: procedure_operation_call
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (ColsAST)adaptor.nil();
                    // 1318:65: -> ^( STATEMENT procedure_operation_call )
                    {
                        // RParser.g:1318:68: ^( STATEMENT procedure_operation_call )
                        {
                        ColsAST root_1 = (ColsAST)adaptor.nil();
                        root_1 = (ColsAST)adaptor.becomeRoot((ColsAST)adaptor.create(STATEMENT, "STATEMENT"), root_1);

                        adaptor.addChild(root_1, stream_procedure_operation_call.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 8 :
                    // RParser.g:1319:13: remember_statement
                    {
                    pushFollow(FOLLOW_remember_statement_in_in_aux_statement8812);
                    remember_statement646=remember_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_remember_statement.add(remember_statement646.getTree());


                    // AST REWRITE
                    // elements: remember_statement
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (ColsAST)adaptor.nil();
                    // 1319:32: -> ^( STATEMENT remember_statement )
                    {
                        // RParser.g:1319:35: ^( STATEMENT remember_statement )
                        {
                        ColsAST root_1 = (ColsAST)adaptor.nil();
                        root_1 = (ColsAST)adaptor.becomeRoot((ColsAST)adaptor.create(STATEMENT, "STATEMENT"), root_1);

                        adaptor.addChild(root_1, stream_remember_statement.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 9 :
                    // RParser.g:1320:13: forget_statement
                    {
                    pushFollow(FOLLOW_forget_statement_in_in_aux_statement8834);
                    forget_statement647=forget_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_forget_statement.add(forget_statement647.getTree());


                    // AST REWRITE
                    // elements: forget_statement
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (ColsAST)adaptor.nil();
                    // 1320:30: -> ^( STATEMENT forget_statement )
                    {
                        // RParser.g:1320:33: ^( STATEMENT forget_statement )
                        {
                        ColsAST root_1 = (ColsAST)adaptor.nil();
                        root_1 = (ColsAST)adaptor.becomeRoot((ColsAST)adaptor.create(STATEMENT, "STATEMENT"), root_1);

                        adaptor.addChild(root_1, stream_forget_statement.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 10 :
                    // RParser.g:1321:13: confirm_statement
                    {
                    pushFollow(FOLLOW_confirm_statement_in_in_aux_statement8856);
                    confirm_statement648=confirm_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_confirm_statement.add(confirm_statement648.getTree());


                    // AST REWRITE
                    // elements: confirm_statement
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (ColsAST)adaptor.nil();
                    // 1321:31: -> ^( STATEMENT confirm_statement )
                    {
                        // RParser.g:1321:34: ^( STATEMENT confirm_statement )
                        {
                        ColsAST root_1 = (ColsAST)adaptor.nil();
                        root_1 = (ColsAST)adaptor.becomeRoot((ColsAST)adaptor.create(STATEMENT, "STATEMENT"), root_1);

                        adaptor.addChild(root_1, stream_confirm_statement.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 11 :
                    // RParser.g:1322:13: assume_statement
                    {
                    pushFollow(FOLLOW_assume_statement_in_in_aux_statement8878);
                    assume_statement649=assume_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_assume_statement.add(assume_statement649.getTree());


                    // AST REWRITE
                    // elements: assume_statement
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (ColsAST)adaptor.nil();
                    // 1322:30: -> ^( STATEMENT assume_statement )
                    {
                        // RParser.g:1322:33: ^( STATEMENT assume_statement )
                        {
                        ColsAST root_1 = (ColsAST)adaptor.nil();
                        root_1 = (ColsAST)adaptor.becomeRoot((ColsAST)adaptor.create(STATEMENT, "STATEMENT"), root_1);

                        adaptor.addChild(root_1, stream_assume_statement.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 12 :
                    // RParser.g:1323:13: aux_code_statement
                    {
                    pushFollow(FOLLOW_aux_code_statement_in_in_aux_statement8900);
                    aux_code_statement650=aux_code_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_aux_code_statement.add(aux_code_statement650.getTree());


                    // AST REWRITE
                    // elements: aux_code_statement
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (ColsAST)adaptor.nil();
                    // 1323:32: -> ^( STATEMENT aux_code_statement )
                    {
                        // RParser.g:1323:35: ^( STATEMENT aux_code_statement )
                        {
                        ColsAST root_1 = (ColsAST)adaptor.nil();
                        root_1 = (ColsAST)adaptor.becomeRoot((ColsAST)adaptor.create(STATEMENT, "STATEMENT"), root_1);

                        adaptor.addChild(root_1, stream_aux_code_statement.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (ColsAST)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "in_aux_statement"

    public static class statement_sequence_return extends ParserRuleReturnScope {
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "statement_sequence"
    // RParser.g:1328:1: statement_sequence : ( statement SEMICOLON )* -> ^( STATEMENT_SEQUENCE ( statement )* ) ;
    public final RParser.statement_sequence_return statement_sequence() throws RecognitionException {
        RParser.statement_sequence_return retval = new RParser.statement_sequence_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        Token SEMICOLON652=null;
        RParser.statement_return statement651 = null;


        ColsAST SEMICOLON652_tree=null;
        RewriteRuleTokenStream stream_SEMICOLON=new RewriteRuleTokenStream(adaptor,"token SEMICOLON");
        RewriteRuleSubtreeStream stream_statement=new RewriteRuleSubtreeStream(adaptor,"rule statement");
        try {
            // RParser.g:1329:5: ( ( statement SEMICOLON )* -> ^( STATEMENT_SEQUENCE ( statement )* ) )
            // RParser.g:1329:9: ( statement SEMICOLON )*
            {
            // RParser.g:1329:9: ( statement SEMICOLON )*
            loop191:
            do {
                int alt191=2;
                alt191 = dfa191.predict(input);
                switch (alt191) {
            	case 1 :
            	    // RParser.g:1329:10: statement SEMICOLON
            	    {
            	    pushFollow(FOLLOW_statement_in_statement_sequence8939);
            	    statement651=statement();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_statement.add(statement651.getTree());
            	    SEMICOLON652=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_statement_sequence8941); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_SEMICOLON.add(SEMICOLON652);


            	    }
            	    break;

            	default :
            	    break loop191;
                }
            } while (true);



            // AST REWRITE
            // elements: statement
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (ColsAST)adaptor.nil();
            // 1329:32: -> ^( STATEMENT_SEQUENCE ( statement )* )
            {
                // RParser.g:1329:35: ^( STATEMENT_SEQUENCE ( statement )* )
                {
                ColsAST root_1 = (ColsAST)adaptor.nil();
                root_1 = (ColsAST)adaptor.becomeRoot((ColsAST)adaptor.create(STATEMENT_SEQUENCE, "STATEMENT_SEQUENCE"), root_1);

                // RParser.g:1329:56: ( statement )*
                while ( stream_statement.hasNext() ) {
                    adaptor.addChild(root_1, stream_statement.nextTree());

                }
                stream_statement.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (ColsAST)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "statement_sequence"

    public static class in_aux_statement_sequence_return extends ParserRuleReturnScope {
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "in_aux_statement_sequence"
    // RParser.g:1332:1: in_aux_statement_sequence : ( in_aux_statement SEMICOLON )* -> ^( STATEMENT_SEQUENCE ( in_aux_statement )* ) ;
    public final RParser.in_aux_statement_sequence_return in_aux_statement_sequence() throws RecognitionException {
        RParser.in_aux_statement_sequence_return retval = new RParser.in_aux_statement_sequence_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        Token SEMICOLON654=null;
        RParser.in_aux_statement_return in_aux_statement653 = null;


        ColsAST SEMICOLON654_tree=null;
        RewriteRuleTokenStream stream_SEMICOLON=new RewriteRuleTokenStream(adaptor,"token SEMICOLON");
        RewriteRuleSubtreeStream stream_in_aux_statement=new RewriteRuleSubtreeStream(adaptor,"rule in_aux_statement");
        try {
            // RParser.g:1333:5: ( ( in_aux_statement SEMICOLON )* -> ^( STATEMENT_SEQUENCE ( in_aux_statement )* ) )
            // RParser.g:1333:9: ( in_aux_statement SEMICOLON )*
            {
            // RParser.g:1333:9: ( in_aux_statement SEMICOLON )*
            loop192:
            do {
                int alt192=2;
                alt192 = dfa192.predict(input);
                switch (alt192) {
            	case 1 :
            	    // RParser.g:1333:10: in_aux_statement SEMICOLON
            	    {
            	    pushFollow(FOLLOW_in_aux_statement_in_in_aux_statement_sequence8976);
            	    in_aux_statement653=in_aux_statement();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_in_aux_statement.add(in_aux_statement653.getTree());
            	    SEMICOLON654=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_in_aux_statement_sequence8978); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_SEMICOLON.add(SEMICOLON654);


            	    }
            	    break;

            	default :
            	    break loop192;
                }
            } while (true);



            // AST REWRITE
            // elements: in_aux_statement
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (ColsAST)adaptor.nil();
            // 1333:39: -> ^( STATEMENT_SEQUENCE ( in_aux_statement )* )
            {
                // RParser.g:1333:42: ^( STATEMENT_SEQUENCE ( in_aux_statement )* )
                {
                ColsAST root_1 = (ColsAST)adaptor.nil();
                root_1 = (ColsAST)adaptor.becomeRoot((ColsAST)adaptor.create(STATEMENT_SEQUENCE, "STATEMENT_SEQUENCE"), root_1);

                // RParser.g:1333:63: ( in_aux_statement )*
                while ( stream_in_aux_statement.hasNext() ) {
                    adaptor.addChild(root_1, stream_in_aux_statement.nextTree());

                }
                stream_in_aux_statement.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (ColsAST)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "in_aux_statement_sequence"

    public static class function_assignment_return extends ParserRuleReturnScope {
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "function_assignment"
    // RParser.g:1338:1: function_assignment : variable_expression ASSIGN_OP program_expression ;
    public final RParser.function_assignment_return function_assignment() throws RecognitionException {
        RParser.function_assignment_return retval = new RParser.function_assignment_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        Token ASSIGN_OP656=null;
        RParser.variable_expression_return variable_expression655 = null;

        RParser.program_expression_return program_expression657 = null;


        ColsAST ASSIGN_OP656_tree=null;

        try {
            // RParser.g:1339:5: ( variable_expression ASSIGN_OP program_expression )
            // RParser.g:1339:9: variable_expression ASSIGN_OP program_expression
            {
            root_0 = (ColsAST)adaptor.nil();

            pushFollow(FOLLOW_variable_expression_in_function_assignment9010);
            variable_expression655=variable_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, variable_expression655.getTree());
            ASSIGN_OP656=(Token)match(input,ASSIGN_OP,FOLLOW_ASSIGN_OP_in_function_assignment9012); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ASSIGN_OP656_tree = (ColsAST)adaptor.create(ASSIGN_OP656);
            root_0 = (ColsAST)adaptor.becomeRoot(ASSIGN_OP656_tree, root_0);
            }
            pushFollow(FOLLOW_program_expression_in_function_assignment9015);
            program_expression657=program_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, program_expression657.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (ColsAST)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "function_assignment"

    public static class forget_statement_return extends ParserRuleReturnScope {
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "forget_statement"
    // RParser.g:1344:1: forget_statement : FORGET ;
    public final RParser.forget_statement_return forget_statement() throws RecognitionException {
        RParser.forget_statement_return retval = new RParser.forget_statement_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        Token FORGET658=null;

        ColsAST FORGET658_tree=null;

        try {
            // RParser.g:1345:5: ( FORGET )
            // RParser.g:1345:9: FORGET
            {
            root_0 = (ColsAST)adaptor.nil();

            FORGET658=(Token)match(input,FORGET,FOLLOW_FORGET_in_forget_statement9036); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            FORGET658_tree = (ColsAST)adaptor.create(FORGET658);
            adaptor.addChild(root_0, FORGET658_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (ColsAST)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "forget_statement"

    public static class remember_statement_return extends ParserRuleReturnScope {
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "remember_statement"
    // RParser.g:1348:1: remember_statement : REMEMBER ;
    public final RParser.remember_statement_return remember_statement() throws RecognitionException {
        RParser.remember_statement_return retval = new RParser.remember_statement_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        Token REMEMBER659=null;

        ColsAST REMEMBER659_tree=null;

        try {
            // RParser.g:1349:5: ( REMEMBER )
            // RParser.g:1349:9: REMEMBER
            {
            root_0 = (ColsAST)adaptor.nil();

            REMEMBER659=(Token)match(input,REMEMBER,FOLLOW_REMEMBER_in_remember_statement9055); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REMEMBER659_tree = (ColsAST)adaptor.create(REMEMBER659);
            adaptor.addChild(root_0, REMEMBER659_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (ColsAST)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "remember_statement"

    public static class if_statement_return extends ParserRuleReturnScope {
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "if_statement"
    // RParser.g:1354:1: if_statement : IF condition THEN statement_sequence ( elsif_item )* ( else_part )? END ;
    public final RParser.if_statement_return if_statement() throws RecognitionException {
        RParser.if_statement_return retval = new RParser.if_statement_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        Token IF660=null;
        Token THEN662=null;
        Token END666=null;
        RParser.condition_return condition661 = null;

        RParser.statement_sequence_return statement_sequence663 = null;

        RParser.elsif_item_return elsif_item664 = null;

        RParser.else_part_return else_part665 = null;


        ColsAST IF660_tree=null;
        ColsAST THEN662_tree=null;
        ColsAST END666_tree=null;

        try {
            // RParser.g:1355:5: ( IF condition THEN statement_sequence ( elsif_item )* ( else_part )? END )
            // RParser.g:1355:9: IF condition THEN statement_sequence ( elsif_item )* ( else_part )? END
            {
            root_0 = (ColsAST)adaptor.nil();

            IF660=(Token)match(input,IF,FOLLOW_IF_in_if_statement9076); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            IF660_tree = (ColsAST)adaptor.create(IF660);
            root_0 = (ColsAST)adaptor.becomeRoot(IF660_tree, root_0);
            }
            pushFollow(FOLLOW_condition_in_if_statement9079);
            condition661=condition();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, condition661.getTree());
            THEN662=(Token)match(input,THEN,FOLLOW_THEN_in_if_statement9089); if (state.failed) return retval;
            pushFollow(FOLLOW_statement_sequence_in_if_statement9092);
            statement_sequence663=statement_sequence();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, statement_sequence663.getTree());
            // RParser.g:1357:9: ( elsif_item )*
            loop193:
            do {
                int alt193=2;
                int LA193_0 = input.LA(1);

                if ( (LA193_0==ELSIF) ) {
                    alt193=1;
                }


                switch (alt193) {
            	case 1 :
            	    // RParser.g:1357:10: elsif_item
            	    {
            	    pushFollow(FOLLOW_elsif_item_in_if_statement9103);
            	    elsif_item664=elsif_item();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, elsif_item664.getTree());

            	    }
            	    break;

            	default :
            	    break loop193;
                }
            } while (true);

            // RParser.g:1358:9: ( else_part )?
            int alt194=2;
            int LA194_0 = input.LA(1);

            if ( (LA194_0==ELSE) ) {
                alt194=1;
            }
            switch (alt194) {
                case 1 :
                    // RParser.g:1358:10: else_part
                    {
                    pushFollow(FOLLOW_else_part_in_if_statement9116);
                    else_part665=else_part();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, else_part665.getTree());

                    }
                    break;

            }

            END666=(Token)match(input,END,FOLLOW_END_in_if_statement9120); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (ColsAST)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "if_statement"

    public static class elsif_item_return extends ParserRuleReturnScope {
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "elsif_item"
    // RParser.g:1361:1: elsif_item : ELSIF condition THEN statement_sequence ;
    public final RParser.elsif_item_return elsif_item() throws RecognitionException {
        RParser.elsif_item_return retval = new RParser.elsif_item_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        Token ELSIF667=null;
        Token THEN669=null;
        RParser.condition_return condition668 = null;

        RParser.statement_sequence_return statement_sequence670 = null;


        ColsAST ELSIF667_tree=null;
        ColsAST THEN669_tree=null;

        try {
            // RParser.g:1362:5: ( ELSIF condition THEN statement_sequence )
            // RParser.g:1362:9: ELSIF condition THEN statement_sequence
            {
            root_0 = (ColsAST)adaptor.nil();

            ELSIF667=(Token)match(input,ELSIF,FOLLOW_ELSIF_in_elsif_item9140); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ELSIF667_tree = (ColsAST)adaptor.create(ELSIF667);
            root_0 = (ColsAST)adaptor.becomeRoot(ELSIF667_tree, root_0);
            }
            pushFollow(FOLLOW_condition_in_elsif_item9143);
            condition668=condition();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, condition668.getTree());
            THEN669=(Token)match(input,THEN,FOLLOW_THEN_in_elsif_item9153); if (state.failed) return retval;
            pushFollow(FOLLOW_statement_sequence_in_elsif_item9156);
            statement_sequence670=statement_sequence();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, statement_sequence670.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (ColsAST)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "elsif_item"

    public static class else_part_return extends ParserRuleReturnScope {
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "else_part"
    // RParser.g:1366:1: else_part : ELSE statement_sequence ;
    public final RParser.else_part_return else_part() throws RecognitionException {
        RParser.else_part_return retval = new RParser.else_part_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        Token ELSE671=null;
        RParser.statement_sequence_return statement_sequence672 = null;


        ColsAST ELSE671_tree=null;

        try {
            // RParser.g:1367:5: ( ELSE statement_sequence )
            // RParser.g:1367:9: ELSE statement_sequence
            {
            root_0 = (ColsAST)adaptor.nil();

            ELSE671=(Token)match(input,ELSE,FOLLOW_ELSE_in_else_part9175); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ELSE671_tree = (ColsAST)adaptor.create(ELSE671);
            root_0 = (ColsAST)adaptor.becomeRoot(ELSE671_tree, root_0);
            }
            pushFollow(FOLLOW_statement_sequence_in_else_part9178);
            statement_sequence672=statement_sequence();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, statement_sequence672.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (ColsAST)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "else_part"

    public static class condition_return extends ParserRuleReturnScope {
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "condition"
    // RParser.g:1370:1: condition : program_expression ;
    public final RParser.condition_return condition() throws RecognitionException {
        RParser.condition_return retval = new RParser.condition_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        RParser.program_expression_return program_expression673 = null;



        try {
            // RParser.g:1371:5: ( program_expression )
            // RParser.g:1371:9: program_expression
            {
            root_0 = (ColsAST)adaptor.nil();

            pushFollow(FOLLOW_program_expression_in_condition9197);
            program_expression673=program_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, program_expression673.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (ColsAST)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "condition"

    public static class aux_code_statement_return extends ParserRuleReturnScope {
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "aux_code_statement"
    // RParser.g:1375:1: aux_code_statement : AUX_CODE in_aux_statement_sequence END ;
    public final RParser.aux_code_statement_return aux_code_statement() throws RecognitionException {
        RParser.aux_code_statement_return retval = new RParser.aux_code_statement_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        Token AUX_CODE674=null;
        Token END676=null;
        RParser.in_aux_statement_sequence_return in_aux_statement_sequence675 = null;


        ColsAST AUX_CODE674_tree=null;
        ColsAST END676_tree=null;

        try {
            // RParser.g:1376:5: ( AUX_CODE in_aux_statement_sequence END )
            // RParser.g:1376:9: AUX_CODE in_aux_statement_sequence END
            {
            root_0 = (ColsAST)adaptor.nil();

            AUX_CODE674=(Token)match(input,AUX_CODE,FOLLOW_AUX_CODE_in_aux_code_statement9217); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            AUX_CODE674_tree = (ColsAST)adaptor.create(AUX_CODE674);
            root_0 = (ColsAST)adaptor.becomeRoot(AUX_CODE674_tree, root_0);
            }
            pushFollow(FOLLOW_in_aux_statement_sequence_in_aux_code_statement9228);
            in_aux_statement_sequence675=in_aux_statement_sequence();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, in_aux_statement_sequence675.getTree());
            END676=(Token)match(input,END,FOLLOW_END_in_aux_code_statement9230); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (ColsAST)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "aux_code_statement"

    public static class iterate_loop_statement_return extends ParserRuleReturnScope {
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "iterate_loop_statement"
    // RParser.g:1383:1: iterate_loop_statement : ITERATE ( changing_clause )? maintaining_clause ( decreasing_clause )? iterate_item_sequence REPEAT ;
    public final RParser.iterate_loop_statement_return iterate_loop_statement() throws RecognitionException {
        RParser.iterate_loop_statement_return retval = new RParser.iterate_loop_statement_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        Token ITERATE677=null;
        Token REPEAT682=null;
        RParser.changing_clause_return changing_clause678 = null;

        RParser.maintaining_clause_return maintaining_clause679 = null;

        RParser.decreasing_clause_return decreasing_clause680 = null;

        RParser.iterate_item_sequence_return iterate_item_sequence681 = null;


        ColsAST ITERATE677_tree=null;
        ColsAST REPEAT682_tree=null;

        try {
            // RParser.g:1384:5: ( ITERATE ( changing_clause )? maintaining_clause ( decreasing_clause )? iterate_item_sequence REPEAT )
            // RParser.g:1384:9: ITERATE ( changing_clause )? maintaining_clause ( decreasing_clause )? iterate_item_sequence REPEAT
            {
            root_0 = (ColsAST)adaptor.nil();

            ITERATE677=(Token)match(input,ITERATE,FOLLOW_ITERATE_in_iterate_loop_statement9253); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ITERATE677_tree = (ColsAST)adaptor.create(ITERATE677);
            root_0 = (ColsAST)adaptor.becomeRoot(ITERATE677_tree, root_0);
            }
            // RParser.g:1385:9: ( changing_clause )?
            int alt195=2;
            int LA195_0 = input.LA(1);

            if ( (LA195_0==CHANGING) ) {
                alt195=1;
            }
            switch (alt195) {
                case 1 :
                    // RParser.g:1385:10: changing_clause
                    {
                    pushFollow(FOLLOW_changing_clause_in_iterate_loop_statement9265);
                    changing_clause678=changing_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, changing_clause678.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_maintaining_clause_in_iterate_loop_statement9281);
            maintaining_clause679=maintaining_clause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, maintaining_clause679.getTree());
            // RParser.g:1387:9: ( decreasing_clause )?
            int alt196=2;
            alt196 = dfa196.predict(input);
            switch (alt196) {
                case 1 :
                    // RParser.g:1387:10: decreasing_clause
                    {
                    pushFollow(FOLLOW_decreasing_clause_in_iterate_loop_statement9292);
                    decreasing_clause680=decreasing_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, decreasing_clause680.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_iterate_item_sequence_in_iterate_loop_statement9304);
            iterate_item_sequence681=iterate_item_sequence();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, iterate_item_sequence681.getTree());
            REPEAT682=(Token)match(input,REPEAT,FOLLOW_REPEAT_in_iterate_loop_statement9306); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (ColsAST)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "iterate_loop_statement"

    public static class iterate_item_sequence_return extends ParserRuleReturnScope {
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "iterate_item_sequence"
    // RParser.g:1391:1: iterate_item_sequence : ( iterate_item SEMICOLON )+ ;
    public final RParser.iterate_item_sequence_return iterate_item_sequence() throws RecognitionException {
        RParser.iterate_item_sequence_return retval = new RParser.iterate_item_sequence_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        Token SEMICOLON684=null;
        RParser.iterate_item_return iterate_item683 = null;


        ColsAST SEMICOLON684_tree=null;

        try {
            // RParser.g:1392:5: ( ( iterate_item SEMICOLON )+ )
            // RParser.g:1392:9: ( iterate_item SEMICOLON )+
            {
            root_0 = (ColsAST)adaptor.nil();

            // RParser.g:1392:9: ( iterate_item SEMICOLON )+
            int cnt197=0;
            loop197:
            do {
                int alt197=2;
                alt197 = dfa197.predict(input);
                switch (alt197) {
            	case 1 :
            	    // RParser.g:1392:10: iterate_item SEMICOLON
            	    {
            	    pushFollow(FOLLOW_iterate_item_in_iterate_item_sequence9327);
            	    iterate_item683=iterate_item();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, iterate_item683.getTree());
            	    SEMICOLON684=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_iterate_item_sequence9329); if (state.failed) return retval;

            	    }
            	    break;

            	default :
            	    if ( cnt197 >= 1 ) break loop197;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(197, input);
                        throw eee;
                }
                cnt197++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (ColsAST)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "iterate_item_sequence"

    public static class iterate_item_return extends ParserRuleReturnScope {
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "iterate_item"
    // RParser.g:1395:1: iterate_item : ( statement | iterate_exit_statement );
    public final RParser.iterate_item_return iterate_item() throws RecognitionException {
        RParser.iterate_item_return retval = new RParser.iterate_item_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        RParser.statement_return statement685 = null;

        RParser.iterate_exit_statement_return iterate_exit_statement686 = null;



        try {
            // RParser.g:1396:5: ( statement | iterate_exit_statement )
            int alt198=2;
            alt198 = dfa198.predict(input);
            switch (alt198) {
                case 1 :
                    // RParser.g:1396:9: statement
                    {
                    root_0 = (ColsAST)adaptor.nil();

                    pushFollow(FOLLOW_statement_in_iterate_item9351);
                    statement685=statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, statement685.getTree());

                    }
                    break;
                case 2 :
                    // RParser.g:1397:9: iterate_exit_statement
                    {
                    root_0 = (ColsAST)adaptor.nil();

                    pushFollow(FOLLOW_iterate_exit_statement_in_iterate_item9361);
                    iterate_exit_statement686=iterate_exit_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, iterate_exit_statement686.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (ColsAST)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "iterate_item"

    public static class iterate_exit_statement_return extends ParserRuleReturnScope {
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "iterate_exit_statement"
    // RParser.g:1400:1: iterate_exit_statement : WHEN condition DO statement_sequence EXIT ;
    public final RParser.iterate_exit_statement_return iterate_exit_statement() throws RecognitionException {
        RParser.iterate_exit_statement_return retval = new RParser.iterate_exit_statement_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        Token WHEN687=null;
        Token DO689=null;
        Token EXIT691=null;
        RParser.condition_return condition688 = null;

        RParser.statement_sequence_return statement_sequence690 = null;


        ColsAST WHEN687_tree=null;
        ColsAST DO689_tree=null;
        ColsAST EXIT691_tree=null;

        try {
            // RParser.g:1401:5: ( WHEN condition DO statement_sequence EXIT )
            // RParser.g:1401:9: WHEN condition DO statement_sequence EXIT
            {
            root_0 = (ColsAST)adaptor.nil();

            WHEN687=(Token)match(input,WHEN,FOLLOW_WHEN_in_iterate_exit_statement9380); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            WHEN687_tree = (ColsAST)adaptor.create(WHEN687);
            root_0 = (ColsAST)adaptor.becomeRoot(WHEN687_tree, root_0);
            }
            if ( state.backtracking==0 ) {
               WHEN687.setType(ITERATE_EXIT); 
            }
            pushFollow(FOLLOW_condition_in_iterate_exit_statement9385);
            condition688=condition();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, condition688.getTree());
            DO689=(Token)match(input,DO,FOLLOW_DO_in_iterate_exit_statement9395); if (state.failed) return retval;
            pushFollow(FOLLOW_statement_sequence_in_iterate_exit_statement9398);
            statement_sequence690=statement_sequence();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, statement_sequence690.getTree());
            EXIT691=(Token)match(input,EXIT,FOLLOW_EXIT_in_iterate_exit_statement9400); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (ColsAST)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "iterate_exit_statement"

    public static class procedure_operation_call_return extends ParserRuleReturnScope {
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "procedure_operation_call"
    // RParser.g:1407:1: procedure_operation_call : qualified_ident operation_argument_section -> ^( FUNCTION qualified_ident operation_argument_section ) ;
    public final RParser.procedure_operation_call_return procedure_operation_call() throws RecognitionException {
        RParser.procedure_operation_call_return retval = new RParser.procedure_operation_call_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        RParser.qualified_ident_return qualified_ident692 = null;

        RParser.operation_argument_section_return operation_argument_section693 = null;


        RewriteRuleSubtreeStream stream_operation_argument_section=new RewriteRuleSubtreeStream(adaptor,"rule operation_argument_section");
        RewriteRuleSubtreeStream stream_qualified_ident=new RewriteRuleSubtreeStream(adaptor,"rule qualified_ident");
        try {
            // RParser.g:1408:5: ( qualified_ident operation_argument_section -> ^( FUNCTION qualified_ident operation_argument_section ) )
            // RParser.g:1408:9: qualified_ident operation_argument_section
            {
            pushFollow(FOLLOW_qualified_ident_in_procedure_operation_call9427);
            qualified_ident692=qualified_ident();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_qualified_ident.add(qualified_ident692.getTree());
            pushFollow(FOLLOW_operation_argument_section_in_procedure_operation_call9429);
            operation_argument_section693=operation_argument_section();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_operation_argument_section.add(operation_argument_section693.getTree());


            // AST REWRITE
            // elements: qualified_ident, operation_argument_section
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (ColsAST)adaptor.nil();
            // 1409:9: -> ^( FUNCTION qualified_ident operation_argument_section )
            {
                // RParser.g:1409:12: ^( FUNCTION qualified_ident operation_argument_section )
                {
                ColsAST root_1 = (ColsAST)adaptor.nil();
                root_1 = (ColsAST)adaptor.becomeRoot((ColsAST)adaptor.create(FUNCTION, "FUNCTION"), root_1);

                adaptor.addChild(root_1, stream_qualified_ident.nextTree());
                adaptor.addChild(root_1, stream_operation_argument_section.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (ColsAST)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "procedure_operation_call"

    public static class operation_argument_section_return extends ParserRuleReturnScope {
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "operation_argument_section"
    // RParser.g:1412:1: operation_argument_section : LPAREN ( program_expression ( COMMA program_expression )* )? RPAREN -> ^( PARAMS ( program_expression )* ) ;
    public final RParser.operation_argument_section_return operation_argument_section() throws RecognitionException {
        RParser.operation_argument_section_return retval = new RParser.operation_argument_section_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        Token LPAREN694=null;
        Token COMMA696=null;
        Token RPAREN698=null;
        RParser.program_expression_return program_expression695 = null;

        RParser.program_expression_return program_expression697 = null;


        ColsAST LPAREN694_tree=null;
        ColsAST COMMA696_tree=null;
        ColsAST RPAREN698_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_program_expression=new RewriteRuleSubtreeStream(adaptor,"rule program_expression");
        try {
            // RParser.g:1413:5: ( LPAREN ( program_expression ( COMMA program_expression )* )? RPAREN -> ^( PARAMS ( program_expression )* ) )
            // RParser.g:1413:9: LPAREN ( program_expression ( COMMA program_expression )* )? RPAREN
            {
            LPAREN694=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_operation_argument_section9466); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN694);

            // RParser.g:1414:9: ( program_expression ( COMMA program_expression )* )?
            int alt200=2;
            int LA200_0 = input.LA(1);

            if ( (LA200_0==NOT||LA200_0==IDENTIFIER||LA200_0==NUMERIC_LITERAL||LA200_0==CHARACTER_LITERAL||LA200_0==LPAREN||LA200_0==MINUS||LA200_0==STRING_LITERAL) ) {
                alt200=1;
            }
            switch (alt200) {
                case 1 :
                    // RParser.g:1414:13: program_expression ( COMMA program_expression )*
                    {
                    pushFollow(FOLLOW_program_expression_in_operation_argument_section9480);
                    program_expression695=program_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_program_expression.add(program_expression695.getTree());
                    // RParser.g:1415:13: ( COMMA program_expression )*
                    loop199:
                    do {
                        int alt199=2;
                        int LA199_0 = input.LA(1);

                        if ( (LA199_0==COMMA) ) {
                            alt199=1;
                        }


                        switch (alt199) {
                    	case 1 :
                    	    // RParser.g:1415:14: COMMA program_expression
                    	    {
                    	    COMMA696=(Token)match(input,COMMA,FOLLOW_COMMA_in_operation_argument_section9495); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA696);

                    	    pushFollow(FOLLOW_program_expression_in_operation_argument_section9497);
                    	    program_expression697=program_expression();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_program_expression.add(program_expression697.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop199;
                        }
                    } while (true);


                    }
                    break;

            }

            RPAREN698=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_operation_argument_section9512); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN698);



            // AST REWRITE
            // elements: program_expression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (ColsAST)adaptor.nil();
            // 1416:19: -> ^( PARAMS ( program_expression )* )
            {
                // RParser.g:1416:22: ^( PARAMS ( program_expression )* )
                {
                ColsAST root_1 = (ColsAST)adaptor.nil();
                root_1 = (ColsAST)adaptor.becomeRoot((ColsAST)adaptor.create(PARAMS, "PARAMS"), root_1);

                // RParser.g:1416:31: ( program_expression )*
                while ( stream_program_expression.hasNext() ) {
                    adaptor.addChild(root_1, stream_program_expression.nextTree());

                }
                stream_program_expression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (ColsAST)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "operation_argument_section"

    public static class selection_statement_return extends ParserRuleReturnScope {
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "selection_statement"
    // RParser.g:1421:1: selection_statement : CASE program_expression OF selection_alternative_sequence ( default_alternative )? END ;
    public final RParser.selection_statement_return selection_statement() throws RecognitionException {
        RParser.selection_statement_return retval = new RParser.selection_statement_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        Token CASE699=null;
        Token OF701=null;
        Token END704=null;
        RParser.program_expression_return program_expression700 = null;

        RParser.selection_alternative_sequence_return selection_alternative_sequence702 = null;

        RParser.default_alternative_return default_alternative703 = null;


        ColsAST CASE699_tree=null;
        ColsAST OF701_tree=null;
        ColsAST END704_tree=null;

        try {
            // RParser.g:1422:5: ( CASE program_expression OF selection_alternative_sequence ( default_alternative )? END )
            // RParser.g:1422:9: CASE program_expression OF selection_alternative_sequence ( default_alternative )? END
            {
            root_0 = (ColsAST)adaptor.nil();

            CASE699=(Token)match(input,CASE,FOLLOW_CASE_in_selection_statement9542); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            CASE699_tree = (ColsAST)adaptor.create(CASE699);
            root_0 = (ColsAST)adaptor.becomeRoot(CASE699_tree, root_0);
            }
            pushFollow(FOLLOW_program_expression_in_selection_statement9545);
            program_expression700=program_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, program_expression700.getTree());
            OF701=(Token)match(input,OF,FOLLOW_OF_in_selection_statement9555); if (state.failed) return retval;
            pushFollow(FOLLOW_selection_alternative_sequence_in_selection_statement9558);
            selection_alternative_sequence702=selection_alternative_sequence();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, selection_alternative_sequence702.getTree());
            // RParser.g:1424:9: ( default_alternative )?
            int alt201=2;
            int LA201_0 = input.LA(1);

            if ( (LA201_0==DEFAULT) ) {
                alt201=1;
            }
            switch (alt201) {
                case 1 :
                    // RParser.g:1424:10: default_alternative
                    {
                    pushFollow(FOLLOW_default_alternative_in_selection_statement9569);
                    default_alternative703=default_alternative();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, default_alternative703.getTree());

                    }
                    break;

            }

            END704=(Token)match(input,END,FOLLOW_END_in_selection_statement9573); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (ColsAST)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "selection_statement"

    public static class selection_alternative_sequence_return extends ParserRuleReturnScope {
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "selection_alternative_sequence"
    // RParser.g:1427:1: selection_alternative_sequence : ( selection_alternative )+ ;
    public final RParser.selection_alternative_sequence_return selection_alternative_sequence() throws RecognitionException {
        RParser.selection_alternative_sequence_return retval = new RParser.selection_alternative_sequence_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        RParser.selection_alternative_return selection_alternative705 = null;



        try {
            // RParser.g:1428:5: ( ( selection_alternative )+ )
            // RParser.g:1428:9: ( selection_alternative )+
            {
            root_0 = (ColsAST)adaptor.nil();

            // RParser.g:1428:9: ( selection_alternative )+
            int cnt202=0;
            loop202:
            do {
                int alt202=2;
                int LA202_0 = input.LA(1);

                if ( (LA202_0==WHEN) ) {
                    alt202=1;
                }


                switch (alt202) {
            	case 1 :
            	    // RParser.g:1428:10: selection_alternative
            	    {
            	    pushFollow(FOLLOW_selection_alternative_in_selection_alternative_sequence9594);
            	    selection_alternative705=selection_alternative();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, selection_alternative705.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt202 >= 1 ) break loop202;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(202, input);
                        throw eee;
                }
                cnt202++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (ColsAST)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "selection_alternative_sequence"

    public static class selection_alternative_return extends ParserRuleReturnScope {
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "selection_alternative"
    // RParser.g:1431:1: selection_alternative : WHEN choices DO statement_sequence ;
    public final RParser.selection_alternative_return selection_alternative() throws RecognitionException {
        RParser.selection_alternative_return retval = new RParser.selection_alternative_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        Token WHEN706=null;
        Token DO708=null;
        RParser.choices_return choices707 = null;

        RParser.statement_sequence_return statement_sequence709 = null;


        ColsAST WHEN706_tree=null;
        ColsAST DO708_tree=null;

        try {
            // RParser.g:1432:5: ( WHEN choices DO statement_sequence )
            // RParser.g:1432:9: WHEN choices DO statement_sequence
            {
            root_0 = (ColsAST)adaptor.nil();

            WHEN706=(Token)match(input,WHEN,FOLLOW_WHEN_in_selection_alternative9615); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            WHEN706_tree = (ColsAST)adaptor.create(WHEN706);
            root_0 = (ColsAST)adaptor.becomeRoot(WHEN706_tree, root_0);
            }
            pushFollow(FOLLOW_choices_in_selection_alternative9618);
            choices707=choices();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, choices707.getTree());
            DO708=(Token)match(input,DO,FOLLOW_DO_in_selection_alternative9628); if (state.failed) return retval;
            pushFollow(FOLLOW_statement_sequence_in_selection_alternative9631);
            statement_sequence709=statement_sequence();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, statement_sequence709.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (ColsAST)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "selection_alternative"

    public static class default_alternative_return extends ParserRuleReturnScope {
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "default_alternative"
    // RParser.g:1436:1: default_alternative : DEFAULT statement_sequence ;
    public final RParser.default_alternative_return default_alternative() throws RecognitionException {
        RParser.default_alternative_return retval = new RParser.default_alternative_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        Token DEFAULT710=null;
        RParser.statement_sequence_return statement_sequence711 = null;


        ColsAST DEFAULT710_tree=null;

        try {
            // RParser.g:1437:5: ( DEFAULT statement_sequence )
            // RParser.g:1437:9: DEFAULT statement_sequence
            {
            root_0 = (ColsAST)adaptor.nil();

            DEFAULT710=(Token)match(input,DEFAULT,FOLLOW_DEFAULT_in_default_alternative9650); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            DEFAULT710_tree = (ColsAST)adaptor.create(DEFAULT710);
            root_0 = (ColsAST)adaptor.becomeRoot(DEFAULT710_tree, root_0);
            }
            pushFollow(FOLLOW_statement_sequence_in_default_alternative9653);
            statement_sequence711=statement_sequence();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, statement_sequence711.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (ColsAST)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "default_alternative"

    public static class choice_return extends ParserRuleReturnScope {
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "choice"
    // RParser.g:1440:1: choice : program_expression ;
    public final RParser.choice_return choice() throws RecognitionException {
        RParser.choice_return retval = new RParser.choice_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        RParser.program_expression_return program_expression712 = null;



        try {
            // RParser.g:1441:5: ( program_expression )
            // RParser.g:1441:9: program_expression
            {
            root_0 = (ColsAST)adaptor.nil();

            pushFollow(FOLLOW_program_expression_in_choice9672);
            program_expression712=program_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, program_expression712.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (ColsAST)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "choice"

    public static class choices_return extends ParserRuleReturnScope {
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "choices"
    // RParser.g:1444:1: choices : choice ( DBL_BAR choice )* -> ^( CHOICES ( choice )+ ) ;
    public final RParser.choices_return choices() throws RecognitionException {
        RParser.choices_return retval = new RParser.choices_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        Token DBL_BAR714=null;
        RParser.choice_return choice713 = null;

        RParser.choice_return choice715 = null;


        ColsAST DBL_BAR714_tree=null;
        RewriteRuleTokenStream stream_DBL_BAR=new RewriteRuleTokenStream(adaptor,"token DBL_BAR");
        RewriteRuleSubtreeStream stream_choice=new RewriteRuleSubtreeStream(adaptor,"rule choice");
        try {
            // RParser.g:1445:5: ( choice ( DBL_BAR choice )* -> ^( CHOICES ( choice )+ ) )
            // RParser.g:1445:9: choice ( DBL_BAR choice )*
            {
            pushFollow(FOLLOW_choice_in_choices9691);
            choice713=choice();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_choice.add(choice713.getTree());
            // RParser.g:1446:9: ( DBL_BAR choice )*
            loop203:
            do {
                int alt203=2;
                int LA203_0 = input.LA(1);

                if ( (LA203_0==DBL_BAR) ) {
                    alt203=1;
                }


                switch (alt203) {
            	case 1 :
            	    // RParser.g:1446:10: DBL_BAR choice
            	    {
            	    DBL_BAR714=(Token)match(input,DBL_BAR,FOLLOW_DBL_BAR_in_choices9702); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_DBL_BAR.add(DBL_BAR714);

            	    pushFollow(FOLLOW_choice_in_choices9704);
            	    choice715=choice();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_choice.add(choice715.getTree());

            	    }
            	    break;

            	default :
            	    break loop203;
                }
            } while (true);



            // AST REWRITE
            // elements: choice
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (ColsAST)adaptor.nil();
            // 1446:27: -> ^( CHOICES ( choice )+ )
            {
                // RParser.g:1446:30: ^( CHOICES ( choice )+ )
                {
                ColsAST root_1 = (ColsAST)adaptor.nil();
                root_1 = (ColsAST)adaptor.becomeRoot((ColsAST)adaptor.create(CHOICES, "CHOICES"), root_1);

                if ( !(stream_choice.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_choice.hasNext() ) {
                    adaptor.addChild(root_1, stream_choice.nextTree());

                }
                stream_choice.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (ColsAST)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "choices"

    public static class swap_statement_return extends ParserRuleReturnScope {
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "swap_statement"
    // RParser.g:1451:1: swap_statement : variable_expression SWAP_OP variable_expression ;
    public final RParser.swap_statement_return swap_statement() throws RecognitionException {
        RParser.swap_statement_return retval = new RParser.swap_statement_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        Token SWAP_OP717=null;
        RParser.variable_expression_return variable_expression716 = null;

        RParser.variable_expression_return variable_expression718 = null;


        ColsAST SWAP_OP717_tree=null;

        try {
            // RParser.g:1452:5: ( variable_expression SWAP_OP variable_expression )
            // RParser.g:1452:9: variable_expression SWAP_OP variable_expression
            {
            root_0 = (ColsAST)adaptor.nil();

            pushFollow(FOLLOW_variable_expression_in_swap_statement9736);
            variable_expression716=variable_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, variable_expression716.getTree());
            SWAP_OP717=(Token)match(input,SWAP_OP,FOLLOW_SWAP_OP_in_swap_statement9738); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SWAP_OP717_tree = (ColsAST)adaptor.create(SWAP_OP717);
            root_0 = (ColsAST)adaptor.becomeRoot(SWAP_OP717_tree, root_0);
            }
            pushFollow(FOLLOW_variable_expression_in_swap_statement9741);
            variable_expression718=variable_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, variable_expression718.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (ColsAST)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "swap_statement"

    public static class confirm_statement_return extends ParserRuleReturnScope {
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "confirm_statement"
    // RParser.g:1457:1: confirm_statement : CONFIRM math_expression ;
    public final RParser.confirm_statement_return confirm_statement() throws RecognitionException {
        RParser.confirm_statement_return retval = new RParser.confirm_statement_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        Token CONFIRM719=null;
        RParser.math_expression_return math_expression720 = null;


        ColsAST CONFIRM719_tree=null;

        try {
            // RParser.g:1458:5: ( CONFIRM math_expression )
            // RParser.g:1458:9: CONFIRM math_expression
            {
            root_0 = (ColsAST)adaptor.nil();

            CONFIRM719=(Token)match(input,CONFIRM,FOLLOW_CONFIRM_in_confirm_statement9766); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            CONFIRM719_tree = (ColsAST)adaptor.create(CONFIRM719);
            root_0 = (ColsAST)adaptor.becomeRoot(CONFIRM719_tree, root_0);
            }
            pushFollow(FOLLOW_math_expression_in_confirm_statement9769);
            math_expression720=math_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, math_expression720.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (ColsAST)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "confirm_statement"

    public static class assume_statement_return extends ParserRuleReturnScope {
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "assume_statement"
    // RParser.g:1463:1: assume_statement : ASSUME math_expression ;
    public final RParser.assume_statement_return assume_statement() throws RecognitionException {
        RParser.assume_statement_return retval = new RParser.assume_statement_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        Token ASSUME721=null;
        RParser.math_expression_return math_expression722 = null;


        ColsAST ASSUME721_tree=null;

        try {
            // RParser.g:1464:5: ( ASSUME math_expression )
            // RParser.g:1464:9: ASSUME math_expression
            {
            root_0 = (ColsAST)adaptor.nil();

            ASSUME721=(Token)match(input,ASSUME,FOLLOW_ASSUME_in_assume_statement9794); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ASSUME721_tree = (ColsAST)adaptor.create(ASSUME721);
            root_0 = (ColsAST)adaptor.becomeRoot(ASSUME721_tree, root_0);
            }
            pushFollow(FOLLOW_math_expression_in_assume_statement9797);
            math_expression722=math_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, math_expression722.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (ColsAST)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "assume_statement"

    public static class while_loop_statement_return extends ParserRuleReturnScope {
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "while_loop_statement"
    // RParser.g:1469:1: while_loop_statement : WHILE condition ( changing_clause )? ( maintaining_clause )? ( decreasing_clause )? ( elapsed_time_clause )? DO statement_sequence END ;
    public final RParser.while_loop_statement_return while_loop_statement() throws RecognitionException {
        RParser.while_loop_statement_return retval = new RParser.while_loop_statement_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        Token WHILE723=null;
        Token DO729=null;
        Token END731=null;
        RParser.condition_return condition724 = null;

        RParser.changing_clause_return changing_clause725 = null;

        RParser.maintaining_clause_return maintaining_clause726 = null;

        RParser.decreasing_clause_return decreasing_clause727 = null;

        RParser.elapsed_time_clause_return elapsed_time_clause728 = null;

        RParser.statement_sequence_return statement_sequence730 = null;


        ColsAST WHILE723_tree=null;
        ColsAST DO729_tree=null;
        ColsAST END731_tree=null;

        try {
            // RParser.g:1470:5: ( WHILE condition ( changing_clause )? ( maintaining_clause )? ( decreasing_clause )? ( elapsed_time_clause )? DO statement_sequence END )
            // RParser.g:1470:9: WHILE condition ( changing_clause )? ( maintaining_clause )? ( decreasing_clause )? ( elapsed_time_clause )? DO statement_sequence END
            {
            root_0 = (ColsAST)adaptor.nil();

            WHILE723=(Token)match(input,WHILE,FOLLOW_WHILE_in_while_loop_statement9818); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            WHILE723_tree = (ColsAST)adaptor.create(WHILE723);
            root_0 = (ColsAST)adaptor.becomeRoot(WHILE723_tree, root_0);
            }
            pushFollow(FOLLOW_condition_in_while_loop_statement9821);
            condition724=condition();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, condition724.getTree());
            // RParser.g:1471:9: ( changing_clause )?
            int alt204=2;
            int LA204_0 = input.LA(1);

            if ( (LA204_0==CHANGING) ) {
                alt204=1;
            }
            switch (alt204) {
                case 1 :
                    // RParser.g:1471:9: changing_clause
                    {
                    pushFollow(FOLLOW_changing_clause_in_while_loop_statement9831);
                    changing_clause725=changing_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, changing_clause725.getTree());

                    }
                    break;

            }

            // RParser.g:1472:9: ( maintaining_clause )?
            int alt205=2;
            int LA205_0 = input.LA(1);

            if ( (LA205_0==MAINTAINING) ) {
                alt205=1;
            }
            switch (alt205) {
                case 1 :
                    // RParser.g:1472:9: maintaining_clause
                    {
                    pushFollow(FOLLOW_maintaining_clause_in_while_loop_statement9846);
                    maintaining_clause726=maintaining_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, maintaining_clause726.getTree());

                    }
                    break;

            }

            // RParser.g:1473:9: ( decreasing_clause )?
            int alt206=2;
            int LA206_0 = input.LA(1);

            if ( (LA206_0==DECREASING) ) {
                alt206=1;
            }
            switch (alt206) {
                case 1 :
                    // RParser.g:1473:9: decreasing_clause
                    {
                    pushFollow(FOLLOW_decreasing_clause_in_while_loop_statement9857);
                    decreasing_clause727=decreasing_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, decreasing_clause727.getTree());

                    }
                    break;

            }

            // RParser.g:1474:9: ( elapsed_time_clause )?
            int alt207=2;
            int LA207_0 = input.LA(1);

            if ( (LA207_0==ELAPSED_TIME) ) {
                alt207=1;
            }
            switch (alt207) {
                case 1 :
                    // RParser.g:1474:9: elapsed_time_clause
                    {
                    pushFollow(FOLLOW_elapsed_time_clause_in_while_loop_statement9868);
                    elapsed_time_clause728=elapsed_time_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, elapsed_time_clause728.getTree());

                    }
                    break;

            }

            DO729=(Token)match(input,DO,FOLLOW_DO_in_while_loop_statement9879); if (state.failed) return retval;
            pushFollow(FOLLOW_statement_sequence_in_while_loop_statement9882);
            statement_sequence730=statement_sequence();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, statement_sequence730.getTree());
            END731=(Token)match(input,END,FOLLOW_END_in_while_loop_statement9884); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (ColsAST)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "while_loop_statement"

    public static class maintaining_clause_return extends ParserRuleReturnScope {
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "maintaining_clause"
    // RParser.g:1478:1: maintaining_clause : MAINTAINING math_expression SEMICOLON ;
    public final RParser.maintaining_clause_return maintaining_clause() throws RecognitionException {
        RParser.maintaining_clause_return retval = new RParser.maintaining_clause_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        Token MAINTAINING732=null;
        Token SEMICOLON734=null;
        RParser.math_expression_return math_expression733 = null;


        ColsAST MAINTAINING732_tree=null;
        ColsAST SEMICOLON734_tree=null;

        try {
            // RParser.g:1479:5: ( MAINTAINING math_expression SEMICOLON )
            // RParser.g:1479:9: MAINTAINING math_expression SEMICOLON
            {
            root_0 = (ColsAST)adaptor.nil();

            MAINTAINING732=(Token)match(input,MAINTAINING,FOLLOW_MAINTAINING_in_maintaining_clause9904); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            MAINTAINING732_tree = (ColsAST)adaptor.create(MAINTAINING732);
            root_0 = (ColsAST)adaptor.becomeRoot(MAINTAINING732_tree, root_0);
            }
            pushFollow(FOLLOW_math_expression_in_maintaining_clause9907);
            math_expression733=math_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, math_expression733.getTree());
            SEMICOLON734=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_maintaining_clause9909); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (ColsAST)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "maintaining_clause"

    public static class decreasing_clause_return extends ParserRuleReturnScope {
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "decreasing_clause"
    // RParser.g:1482:1: decreasing_clause : DECREASING adding_expression SEMICOLON ;
    public final RParser.decreasing_clause_return decreasing_clause() throws RecognitionException {
        RParser.decreasing_clause_return retval = new RParser.decreasing_clause_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        Token DECREASING735=null;
        Token SEMICOLON737=null;
        RParser.adding_expression_return adding_expression736 = null;


        ColsAST DECREASING735_tree=null;
        ColsAST SEMICOLON737_tree=null;

        try {
            // RParser.g:1483:5: ( DECREASING adding_expression SEMICOLON )
            // RParser.g:1483:9: DECREASING adding_expression SEMICOLON
            {
            root_0 = (ColsAST)adaptor.nil();

            DECREASING735=(Token)match(input,DECREASING,FOLLOW_DECREASING_in_decreasing_clause9929); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            DECREASING735_tree = (ColsAST)adaptor.create(DECREASING735);
            root_0 = (ColsAST)adaptor.becomeRoot(DECREASING735_tree, root_0);
            }
            pushFollow(FOLLOW_adding_expression_in_decreasing_clause9932);
            adding_expression736=adding_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, adding_expression736.getTree());
            SEMICOLON737=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_decreasing_clause9934); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (ColsAST)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "decreasing_clause"

    public static class elapsed_time_clause_return extends ParserRuleReturnScope {
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "elapsed_time_clause"
    // RParser.g:1486:1: elapsed_time_clause : ELAPSED_TIME math_expression SEMICOLON ;
    public final RParser.elapsed_time_clause_return elapsed_time_clause() throws RecognitionException {
        RParser.elapsed_time_clause_return retval = new RParser.elapsed_time_clause_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        Token ELAPSED_TIME738=null;
        Token SEMICOLON740=null;
        RParser.math_expression_return math_expression739 = null;


        ColsAST ELAPSED_TIME738_tree=null;
        ColsAST SEMICOLON740_tree=null;

        try {
            // RParser.g:1487:5: ( ELAPSED_TIME math_expression SEMICOLON )
            // RParser.g:1487:9: ELAPSED_TIME math_expression SEMICOLON
            {
            root_0 = (ColsAST)adaptor.nil();

            ELAPSED_TIME738=(Token)match(input,ELAPSED_TIME,FOLLOW_ELAPSED_TIME_in_elapsed_time_clause9954); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ELAPSED_TIME738_tree = (ColsAST)adaptor.create(ELAPSED_TIME738);
            root_0 = (ColsAST)adaptor.becomeRoot(ELAPSED_TIME738_tree, root_0);
            }
            pushFollow(FOLLOW_math_expression_in_elapsed_time_clause9957);
            math_expression739=math_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, math_expression739.getTree());
            SEMICOLON740=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_elapsed_time_clause9959); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (ColsAST)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "elapsed_time_clause"

    public static class changing_clause_return extends ParserRuleReturnScope {
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "changing_clause"
    // RParser.g:1490:1: changing_clause : CHANGING variable_expression ( COMMA variable_expression )* SEMICOLON ;
    public final RParser.changing_clause_return changing_clause() throws RecognitionException {
        RParser.changing_clause_return retval = new RParser.changing_clause_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        Token CHANGING741=null;
        Token COMMA743=null;
        Token SEMICOLON745=null;
        RParser.variable_expression_return variable_expression742 = null;

        RParser.variable_expression_return variable_expression744 = null;


        ColsAST CHANGING741_tree=null;
        ColsAST COMMA743_tree=null;
        ColsAST SEMICOLON745_tree=null;

        try {
            // RParser.g:1491:5: ( CHANGING variable_expression ( COMMA variable_expression )* SEMICOLON )
            // RParser.g:1491:9: CHANGING variable_expression ( COMMA variable_expression )* SEMICOLON
            {
            root_0 = (ColsAST)adaptor.nil();

            CHANGING741=(Token)match(input,CHANGING,FOLLOW_CHANGING_in_changing_clause9979); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            CHANGING741_tree = (ColsAST)adaptor.create(CHANGING741);
            root_0 = (ColsAST)adaptor.becomeRoot(CHANGING741_tree, root_0);
            }
            pushFollow(FOLLOW_variable_expression_in_changing_clause9982);
            variable_expression742=variable_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, variable_expression742.getTree());
            // RParser.g:1492:9: ( COMMA variable_expression )*
            loop208:
            do {
                int alt208=2;
                int LA208_0 = input.LA(1);

                if ( (LA208_0==COMMA) ) {
                    alt208=1;
                }


                switch (alt208) {
            	case 1 :
            	    // RParser.g:1492:10: COMMA variable_expression
            	    {
            	    COMMA743=(Token)match(input,COMMA,FOLLOW_COMMA_in_changing_clause9993); if (state.failed) return retval;
            	    pushFollow(FOLLOW_variable_expression_in_changing_clause9996);
            	    variable_expression744=variable_expression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, variable_expression744.getTree());

            	    }
            	    break;

            	default :
            	    break loop208;
                }
            } while (true);

            SEMICOLON745=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_changing_clause10000); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (ColsAST)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "changing_clause"

    public static class program_type_expression_return extends ParserRuleReturnScope {
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "program_type_expression"
    // RParser.g:1499:1: program_type_expression : ( ( qualified_ident -> ^( TYPEX qualified_ident ) ) | ( ARRAY array_range OF program_type_expression -> ^( ARRAY array_range program_type_expression ) ) ) ;
    public final RParser.program_type_expression_return program_type_expression() throws RecognitionException {
        RParser.program_type_expression_return retval = new RParser.program_type_expression_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        Token ARRAY747=null;
        Token OF749=null;
        RParser.qualified_ident_return qualified_ident746 = null;

        RParser.array_range_return array_range748 = null;

        RParser.program_type_expression_return program_type_expression750 = null;


        ColsAST ARRAY747_tree=null;
        ColsAST OF749_tree=null;
        RewriteRuleTokenStream stream_OF=new RewriteRuleTokenStream(adaptor,"token OF");
        RewriteRuleTokenStream stream_ARRAY=new RewriteRuleTokenStream(adaptor,"token ARRAY");
        RewriteRuleSubtreeStream stream_program_type_expression=new RewriteRuleSubtreeStream(adaptor,"rule program_type_expression");
        RewriteRuleSubtreeStream stream_array_range=new RewriteRuleSubtreeStream(adaptor,"rule array_range");
        RewriteRuleSubtreeStream stream_qualified_ident=new RewriteRuleSubtreeStream(adaptor,"rule qualified_ident");
        try {
            // RParser.g:1500:5: ( ( ( qualified_ident -> ^( TYPEX qualified_ident ) ) | ( ARRAY array_range OF program_type_expression -> ^( ARRAY array_range program_type_expression ) ) ) )
            // RParser.g:1500:9: ( ( qualified_ident -> ^( TYPEX qualified_ident ) ) | ( ARRAY array_range OF program_type_expression -> ^( ARRAY array_range program_type_expression ) ) )
            {
            // RParser.g:1500:9: ( ( qualified_ident -> ^( TYPEX qualified_ident ) ) | ( ARRAY array_range OF program_type_expression -> ^( ARRAY array_range program_type_expression ) ) )
            int alt209=2;
            int LA209_0 = input.LA(1);

            if ( (LA209_0==IDENTIFIER) ) {
                alt209=1;
            }
            else if ( (LA209_0==ARRAY) ) {
                alt209=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 209, 0, input);

                throw nvae;
            }
            switch (alt209) {
                case 1 :
                    // RParser.g:1500:13: ( qualified_ident -> ^( TYPEX qualified_ident ) )
                    {
                    // RParser.g:1500:13: ( qualified_ident -> ^( TYPEX qualified_ident ) )
                    // RParser.g:1500:14: qualified_ident
                    {
                    pushFollow(FOLLOW_qualified_ident_in_program_type_expression10029);
                    qualified_ident746=qualified_ident();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_qualified_ident.add(qualified_ident746.getTree());


                    // AST REWRITE
                    // elements: qualified_ident
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (ColsAST)adaptor.nil();
                    // 1500:30: -> ^( TYPEX qualified_ident )
                    {
                        // RParser.g:1500:33: ^( TYPEX qualified_ident )
                        {
                        ColsAST root_1 = (ColsAST)adaptor.nil();
                        root_1 = (ColsAST)adaptor.becomeRoot((ColsAST)adaptor.create(TYPEX, "TYPEX"), root_1);

                        adaptor.addChild(root_1, stream_qualified_ident.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }


                    }
                    break;
                case 2 :
                    // RParser.g:1501:13: ( ARRAY array_range OF program_type_expression -> ^( ARRAY array_range program_type_expression ) )
                    {
                    // RParser.g:1501:13: ( ARRAY array_range OF program_type_expression -> ^( ARRAY array_range program_type_expression ) )
                    // RParser.g:1501:14: ARRAY array_range OF program_type_expression
                    {
                    ARRAY747=(Token)match(input,ARRAY,FOLLOW_ARRAY_in_program_type_expression10053); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ARRAY.add(ARRAY747);

                    pushFollow(FOLLOW_array_range_in_program_type_expression10055);
                    array_range748=array_range();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_array_range.add(array_range748.getTree());
                    OF749=(Token)match(input,OF,FOLLOW_OF_in_program_type_expression10069); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_OF.add(OF749);

                    pushFollow(FOLLOW_program_type_expression_in_program_type_expression10071);
                    program_type_expression750=program_type_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_program_type_expression.add(program_type_expression750.getTree());


                    // AST REWRITE
                    // elements: program_type_expression, array_range, ARRAY
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (ColsAST)adaptor.nil();
                    // 1503:13: -> ^( ARRAY array_range program_type_expression )
                    {
                        // RParser.g:1503:16: ^( ARRAY array_range program_type_expression )
                        {
                        ColsAST root_1 = (ColsAST)adaptor.nil();
                        root_1 = (ColsAST)adaptor.becomeRoot(stream_ARRAY.nextNode(), root_1);

                        adaptor.addChild(root_1, stream_array_range.nextTree());
                        adaptor.addChild(root_1, stream_program_type_expression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (ColsAST)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "program_type_expression"

    public static class structural_program_type_expression_return extends ParserRuleReturnScope {
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "structural_program_type_expression"
    // RParser.g:1507:1: structural_program_type_expression : ( RECORD ( record_variable_declaration_group SEMICOLON )+ END | program_type_expression );
    public final RParser.structural_program_type_expression_return structural_program_type_expression() throws RecognitionException {
        RParser.structural_program_type_expression_return retval = new RParser.structural_program_type_expression_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        Token RECORD751=null;
        Token SEMICOLON753=null;
        Token END754=null;
        RParser.record_variable_declaration_group_return record_variable_declaration_group752 = null;

        RParser.program_type_expression_return program_type_expression755 = null;


        ColsAST RECORD751_tree=null;
        ColsAST SEMICOLON753_tree=null;
        ColsAST END754_tree=null;

        try {
            // RParser.g:1508:5: ( RECORD ( record_variable_declaration_group SEMICOLON )+ END | program_type_expression )
            int alt211=2;
            int LA211_0 = input.LA(1);

            if ( (LA211_0==RECORD) ) {
                alt211=1;
            }
            else if ( (LA211_0==ARRAY||LA211_0==IDENTIFIER) ) {
                alt211=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 211, 0, input);

                throw nvae;
            }
            switch (alt211) {
                case 1 :
                    // RParser.g:1508:9: RECORD ( record_variable_declaration_group SEMICOLON )+ END
                    {
                    root_0 = (ColsAST)adaptor.nil();

                    RECORD751=(Token)match(input,RECORD,FOLLOW_RECORD_in_structural_program_type_expression10123); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RECORD751_tree = (ColsAST)adaptor.create(RECORD751);
                    root_0 = (ColsAST)adaptor.becomeRoot(RECORD751_tree, root_0);
                    }
                    // RParser.g:1509:9: ( record_variable_declaration_group SEMICOLON )+
                    int cnt210=0;
                    loop210:
                    do {
                        int alt210=2;
                        int LA210_0 = input.LA(1);

                        if ( (LA210_0==IDENTIFIER) ) {
                            alt210=1;
                        }


                        switch (alt210) {
                    	case 1 :
                    	    // RParser.g:1509:10: record_variable_declaration_group SEMICOLON
                    	    {
                    	    pushFollow(FOLLOW_record_variable_declaration_group_in_structural_program_type_expression10135);
                    	    record_variable_declaration_group752=record_variable_declaration_group();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, record_variable_declaration_group752.getTree());
                    	    SEMICOLON753=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_structural_program_type_expression10137); if (state.failed) return retval;

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt210 >= 1 ) break loop210;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(210, input);
                                throw eee;
                        }
                        cnt210++;
                    } while (true);

                    END754=(Token)match(input,END,FOLLOW_END_in_structural_program_type_expression10150); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // RParser.g:1511:9: program_type_expression
                    {
                    root_0 = (ColsAST)adaptor.nil();

                    pushFollow(FOLLOW_program_type_expression_in_structural_program_type_expression10161);
                    program_type_expression755=program_type_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, program_type_expression755.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (ColsAST)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "structural_program_type_expression"

    public static class record_variable_declaration_group_return extends ParserRuleReturnScope {
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "record_variable_declaration_group"
    // RParser.g:1514:1: record_variable_declaration_group : variable_id_list COLON program_type_expression -> ^( VAR variable_id_list program_type_expression ) ;
    public final RParser.record_variable_declaration_group_return record_variable_declaration_group() throws RecognitionException {
        RParser.record_variable_declaration_group_return retval = new RParser.record_variable_declaration_group_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        Token COLON757=null;
        RParser.variable_id_list_return variable_id_list756 = null;

        RParser.program_type_expression_return program_type_expression758 = null;


        ColsAST COLON757_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleSubtreeStream stream_variable_id_list=new RewriteRuleSubtreeStream(adaptor,"rule variable_id_list");
        RewriteRuleSubtreeStream stream_program_type_expression=new RewriteRuleSubtreeStream(adaptor,"rule program_type_expression");
        try {
            // RParser.g:1515:5: ( variable_id_list COLON program_type_expression -> ^( VAR variable_id_list program_type_expression ) )
            // RParser.g:1515:9: variable_id_list COLON program_type_expression
            {
            pushFollow(FOLLOW_variable_id_list_in_record_variable_declaration_group10180);
            variable_id_list756=variable_id_list();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_variable_id_list.add(variable_id_list756.getTree());
            COLON757=(Token)match(input,COLON,FOLLOW_COLON_in_record_variable_declaration_group10182); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COLON.add(COLON757);

            pushFollow(FOLLOW_program_type_expression_in_record_variable_declaration_group10184);
            program_type_expression758=program_type_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_program_type_expression.add(program_type_expression758.getTree());


            // AST REWRITE
            // elements: variable_id_list, program_type_expression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (ColsAST)adaptor.nil();
            // 1516:9: -> ^( VAR variable_id_list program_type_expression )
            {
                // RParser.g:1516:12: ^( VAR variable_id_list program_type_expression )
                {
                ColsAST root_1 = (ColsAST)adaptor.nil();
                root_1 = (ColsAST)adaptor.becomeRoot((ColsAST)adaptor.create(VAR, "VAR"), root_1);

                adaptor.addChild(root_1, stream_variable_id_list.nextTree());
                adaptor.addChild(root_1, stream_program_type_expression.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (ColsAST)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "record_variable_declaration_group"

    public static class record_aux_variable_declaration_group_return extends ParserRuleReturnScope {
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "record_aux_variable_declaration_group"
    // RParser.g:1519:1: record_aux_variable_declaration_group : AUX_VAR variable_id_list program_type_expression ;
    public final RParser.record_aux_variable_declaration_group_return record_aux_variable_declaration_group() throws RecognitionException {
        RParser.record_aux_variable_declaration_group_return retval = new RParser.record_aux_variable_declaration_group_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        Token AUX_VAR759=null;
        RParser.variable_id_list_return variable_id_list760 = null;

        RParser.program_type_expression_return program_type_expression761 = null;


        ColsAST AUX_VAR759_tree=null;

        try {
            // RParser.g:1520:5: ( AUX_VAR variable_id_list program_type_expression )
            // RParser.g:1520:9: AUX_VAR variable_id_list program_type_expression
            {
            root_0 = (ColsAST)adaptor.nil();

            AUX_VAR759=(Token)match(input,AUX_VAR,FOLLOW_AUX_VAR_in_record_aux_variable_declaration_group10225); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            AUX_VAR759_tree = (ColsAST)adaptor.create(AUX_VAR759);
            root_0 = (ColsAST)adaptor.becomeRoot(AUX_VAR759_tree, root_0);
            }
            pushFollow(FOLLOW_variable_id_list_in_record_aux_variable_declaration_group10228);
            variable_id_list760=variable_id_list();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, variable_id_list760.getTree());
            pushFollow(FOLLOW_program_type_expression_in_record_aux_variable_declaration_group10230);
            program_type_expression761=program_type_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, program_type_expression761.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (ColsAST)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "record_aux_variable_declaration_group"

    public static class array_range_return extends ParserRuleReturnScope {
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "array_range"
    // RParser.g:1523:1: array_range : program_expression RANGE program_expression ;
    public final RParser.array_range_return array_range() throws RecognitionException {
        RParser.array_range_return retval = new RParser.array_range_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        Token RANGE763=null;
        RParser.program_expression_return program_expression762 = null;

        RParser.program_expression_return program_expression764 = null;


        ColsAST RANGE763_tree=null;

        try {
            // RParser.g:1524:5: ( program_expression RANGE program_expression )
            // RParser.g:1524:9: program_expression RANGE program_expression
            {
            root_0 = (ColsAST)adaptor.nil();

            pushFollow(FOLLOW_program_expression_in_array_range10249);
            program_expression762=program_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, program_expression762.getTree());
            RANGE763=(Token)match(input,RANGE,FOLLOW_RANGE_in_array_range10251); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RANGE763_tree = (ColsAST)adaptor.create(RANGE763);
            root_0 = (ColsAST)adaptor.becomeRoot(RANGE763_tree, root_0);
            }
            pushFollow(FOLLOW_program_expression_in_array_range10254);
            program_expression764=program_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, program_expression764.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (ColsAST)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "array_range"

    public static class variable_declaration_group_return extends ParserRuleReturnScope {
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "variable_declaration_group"
    // RParser.g:1527:1: variable_declaration_group : variable_id_list COLON program_type_expression ;
    public final RParser.variable_declaration_group_return variable_declaration_group() throws RecognitionException {
        RParser.variable_declaration_group_return retval = new RParser.variable_declaration_group_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        Token COLON766=null;
        RParser.variable_id_list_return variable_id_list765 = null;

        RParser.program_type_expression_return program_type_expression767 = null;


        ColsAST COLON766_tree=null;

        try {
            // RParser.g:1528:5: ( variable_id_list COLON program_type_expression )
            // RParser.g:1528:9: variable_id_list COLON program_type_expression
            {
            root_0 = (ColsAST)adaptor.nil();

            pushFollow(FOLLOW_variable_id_list_in_variable_declaration_group10273);
            variable_id_list765=variable_id_list();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, variable_id_list765.getTree());
            COLON766=(Token)match(input,COLON,FOLLOW_COLON_in_variable_declaration_group10275); if (state.failed) return retval;
            pushFollow(FOLLOW_program_type_expression_in_variable_declaration_group10278);
            program_type_expression767=program_type_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, program_type_expression767.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (ColsAST)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "variable_declaration_group"

    public static class aux_variable_declaration_group_return extends ParserRuleReturnScope {
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "aux_variable_declaration_group"
    // RParser.g:1531:1: aux_variable_declaration_group : variable_id_list COLON program_type_expression ;
    public final RParser.aux_variable_declaration_group_return aux_variable_declaration_group() throws RecognitionException {
        RParser.aux_variable_declaration_group_return retval = new RParser.aux_variable_declaration_group_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        Token COLON769=null;
        RParser.variable_id_list_return variable_id_list768 = null;

        RParser.program_type_expression_return program_type_expression770 = null;


        ColsAST COLON769_tree=null;

        try {
            // RParser.g:1532:5: ( variable_id_list COLON program_type_expression )
            // RParser.g:1532:9: variable_id_list COLON program_type_expression
            {
            root_0 = (ColsAST)adaptor.nil();

            pushFollow(FOLLOW_variable_id_list_in_aux_variable_declaration_group10301);
            variable_id_list768=variable_id_list();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, variable_id_list768.getTree());
            COLON769=(Token)match(input,COLON,FOLLOW_COLON_in_aux_variable_declaration_group10303); if (state.failed) return retval;
            pushFollow(FOLLOW_program_type_expression_in_aux_variable_declaration_group10306);
            program_type_expression770=program_type_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, program_type_expression770.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (ColsAST)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "aux_variable_declaration_group"

    public static class variable_id_list_return extends ParserRuleReturnScope {
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "variable_id_list"
    // RParser.g:1535:1: variable_id_list : ident ( COMMA ident )* ;
    public final RParser.variable_id_list_return variable_id_list() throws RecognitionException {
        RParser.variable_id_list_return retval = new RParser.variable_id_list_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        Token COMMA772=null;
        RParser.ident_return ident771 = null;

        RParser.ident_return ident773 = null;


        ColsAST COMMA772_tree=null;

        try {
            // RParser.g:1536:5: ( ident ( COMMA ident )* )
            // RParser.g:1536:9: ident ( COMMA ident )*
            {
            root_0 = (ColsAST)adaptor.nil();

            pushFollow(FOLLOW_ident_in_variable_id_list10325);
            ident771=ident();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, ident771.getTree());
            // RParser.g:1536:15: ( COMMA ident )*
            loop212:
            do {
                int alt212=2;
                int LA212_0 = input.LA(1);

                if ( (LA212_0==COMMA) ) {
                    alt212=1;
                }


                switch (alt212) {
            	case 1 :
            	    // RParser.g:1536:16: COMMA ident
            	    {
            	    COMMA772=(Token)match(input,COMMA,FOLLOW_COMMA_in_variable_id_list10328); if (state.failed) return retval;
            	    pushFollow(FOLLOW_ident_in_variable_id_list10331);
            	    ident773=ident();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, ident773.getTree());

            	    }
            	    break;

            	default :
            	    break loop212;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (ColsAST)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "variable_id_list"

    public static class math_type_expression_return extends ParserRuleReturnScope {
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "math_type_expression"
    // RParser.g:1544:1: math_type_expression : infix_expression ;
    public final RParser.math_type_expression_return math_type_expression() throws RecognitionException {
        RParser.math_type_expression_return retval = new RParser.math_type_expression_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        RParser.infix_expression_return infix_expression774 = null;



        try {
            // RParser.g:1545:5: ( infix_expression )
            // RParser.g:1547:5: infix_expression
            {
            root_0 = (ColsAST)adaptor.nil();

            pushFollow(FOLLOW_infix_expression_in_math_type_expression10367);
            infix_expression774=infix_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, infix_expression774.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (ColsAST)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "math_type_expression"

    public static class type_expression_argument_list_return extends ParserRuleReturnScope {
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "type_expression_argument_list"
    // RParser.g:1599:1: type_expression_argument_list : LPAREN math_type_expression ( COMMA math_type_expression )* RPAREN -> ^( PARAMS math_type_expression ( math_type_expression )* ) ;
    public final RParser.type_expression_argument_list_return type_expression_argument_list() throws RecognitionException {
        RParser.type_expression_argument_list_return retval = new RParser.type_expression_argument_list_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        Token LPAREN775=null;
        Token COMMA777=null;
        Token RPAREN779=null;
        RParser.math_type_expression_return math_type_expression776 = null;

        RParser.math_type_expression_return math_type_expression778 = null;


        ColsAST LPAREN775_tree=null;
        ColsAST COMMA777_tree=null;
        ColsAST RPAREN779_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_math_type_expression=new RewriteRuleSubtreeStream(adaptor,"rule math_type_expression");
        try {
            // RParser.g:1600:5: ( LPAREN math_type_expression ( COMMA math_type_expression )* RPAREN -> ^( PARAMS math_type_expression ( math_type_expression )* ) )
            // RParser.g:1600:9: LPAREN math_type_expression ( COMMA math_type_expression )* RPAREN
            {
            LPAREN775=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_type_expression_argument_list10388); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN775);

            pushFollow(FOLLOW_math_type_expression_in_type_expression_argument_list10390);
            math_type_expression776=math_type_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_math_type_expression.add(math_type_expression776.getTree());
            // RParser.g:1601:9: ( COMMA math_type_expression )*
            loop213:
            do {
                int alt213=2;
                int LA213_0 = input.LA(1);

                if ( (LA213_0==COMMA) ) {
                    alt213=1;
                }


                switch (alt213) {
            	case 1 :
            	    // RParser.g:1601:10: COMMA math_type_expression
            	    {
            	    COMMA777=(Token)match(input,COMMA,FOLLOW_COMMA_in_type_expression_argument_list10401); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA777);

            	    pushFollow(FOLLOW_math_type_expression_in_type_expression_argument_list10403);
            	    math_type_expression778=math_type_expression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_math_type_expression.add(math_type_expression778.getTree());

            	    }
            	    break;

            	default :
            	    break loop213;
                }
            } while (true);

            RPAREN779=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_type_expression_argument_list10407); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN779);



            // AST REWRITE
            // elements: math_type_expression, math_type_expression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (ColsAST)adaptor.nil();
            // 1601:46: -> ^( PARAMS math_type_expression ( math_type_expression )* )
            {
                // RParser.g:1601:49: ^( PARAMS math_type_expression ( math_type_expression )* )
                {
                ColsAST root_1 = (ColsAST)adaptor.nil();
                root_1 = (ColsAST)adaptor.becomeRoot((ColsAST)adaptor.create(PARAMS, "PARAMS"), root_1);

                adaptor.addChild(root_1, stream_math_type_expression.nextTree());
                // RParser.g:1601:79: ( math_type_expression )*
                while ( stream_math_type_expression.hasNext() ) {
                    adaptor.addChild(root_1, stream_math_type_expression.nextTree());

                }
                stream_math_type_expression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (ColsAST)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "type_expression_argument_list"

    public static class cartprod_variable_declaration_group_return extends ParserRuleReturnScope {
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "cartprod_variable_declaration_group"
    // RParser.g:1604:1: cartprod_variable_declaration_group : math_variable_declaration_group -> ^( VAR math_variable_declaration_group ) ;
    public final RParser.cartprod_variable_declaration_group_return cartprod_variable_declaration_group() throws RecognitionException {
        RParser.cartprod_variable_declaration_group_return retval = new RParser.cartprod_variable_declaration_group_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        RParser.math_variable_declaration_group_return math_variable_declaration_group780 = null;


        RewriteRuleSubtreeStream stream_math_variable_declaration_group=new RewriteRuleSubtreeStream(adaptor,"rule math_variable_declaration_group");
        try {
            // RParser.g:1605:5: ( math_variable_declaration_group -> ^( VAR math_variable_declaration_group ) )
            // RParser.g:1605:9: math_variable_declaration_group
            {
            pushFollow(FOLLOW_math_variable_declaration_group_in_cartprod_variable_declaration_group10437);
            math_variable_declaration_group780=math_variable_declaration_group();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_math_variable_declaration_group.add(math_variable_declaration_group780.getTree());


            // AST REWRITE
            // elements: math_variable_declaration_group
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (ColsAST)adaptor.nil();
            // 1605:41: -> ^( VAR math_variable_declaration_group )
            {
                // RParser.g:1605:44: ^( VAR math_variable_declaration_group )
                {
                ColsAST root_1 = (ColsAST)adaptor.nil();
                root_1 = (ColsAST)adaptor.becomeRoot((ColsAST)adaptor.create(VAR, "VAR"), root_1);

                adaptor.addChild(root_1, stream_math_variable_declaration_group.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (ColsAST)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "cartprod_variable_declaration_group"

    public static class structural_math_variable_declaration_group_return extends ParserRuleReturnScope {
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "structural_math_variable_declaration_group"
    // RParser.g:1608:1: structural_math_variable_declaration_group : variable_id_list COLON math_type_expression ;
    public final RParser.structural_math_variable_declaration_group_return structural_math_variable_declaration_group() throws RecognitionException {
        RParser.structural_math_variable_declaration_group_return retval = new RParser.structural_math_variable_declaration_group_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        Token COLON782=null;
        RParser.variable_id_list_return variable_id_list781 = null;

        RParser.math_type_expression_return math_type_expression783 = null;


        ColsAST COLON782_tree=null;

        try {
            // RParser.g:1609:5: ( variable_id_list COLON math_type_expression )
            // RParser.g:1609:9: variable_id_list COLON math_type_expression
            {
            root_0 = (ColsAST)adaptor.nil();

            pushFollow(FOLLOW_variable_id_list_in_structural_math_variable_declaration_group10464);
            variable_id_list781=variable_id_list();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, variable_id_list781.getTree());
            COLON782=(Token)match(input,COLON,FOLLOW_COLON_in_structural_math_variable_declaration_group10466); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            COLON782_tree = (ColsAST)adaptor.create(COLON782);
            adaptor.addChild(root_0, COLON782_tree);
            }
            pushFollow(FOLLOW_math_type_expression_in_structural_math_variable_declaration_group10468);
            math_type_expression783=math_type_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, math_type_expression783.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (ColsAST)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "structural_math_variable_declaration_group"

    public static class math_variable_declaration_group_return extends ParserRuleReturnScope {
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "math_variable_declaration_group"
    // RParser.g:1612:1: math_variable_declaration_group : variable_id_list COLON math_type_expression ;
    public final RParser.math_variable_declaration_group_return math_variable_declaration_group() throws RecognitionException {
        RParser.math_variable_declaration_group_return retval = new RParser.math_variable_declaration_group_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        Token COLON785=null;
        RParser.variable_id_list_return variable_id_list784 = null;

        RParser.math_type_expression_return math_type_expression786 = null;


        ColsAST COLON785_tree=null;

        try {
            // RParser.g:1613:5: ( variable_id_list COLON math_type_expression )
            // RParser.g:1613:9: variable_id_list COLON math_type_expression
            {
            root_0 = (ColsAST)adaptor.nil();

            pushFollow(FOLLOW_variable_id_list_in_math_variable_declaration_group10487);
            variable_id_list784=variable_id_list();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, variable_id_list784.getTree());
            COLON785=(Token)match(input,COLON,FOLLOW_COLON_in_math_variable_declaration_group10489); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            COLON785_tree = (ColsAST)adaptor.create(COLON785);
            adaptor.addChild(root_0, COLON785_tree);
            }
            pushFollow(FOLLOW_math_type_expression_in_math_variable_declaration_group10491);
            math_type_expression786=math_type_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, math_type_expression786.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (ColsAST)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "math_variable_declaration_group"

    public static class math_variable_declaration_return extends ParserRuleReturnScope {
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "math_variable_declaration"
    // RParser.g:1616:1: math_variable_declaration : ident COLON math_type_expression ;
    public final RParser.math_variable_declaration_return math_variable_declaration() throws RecognitionException {
        RParser.math_variable_declaration_return retval = new RParser.math_variable_declaration_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        Token COLON788=null;
        RParser.ident_return ident787 = null;

        RParser.math_type_expression_return math_type_expression789 = null;


        ColsAST COLON788_tree=null;

        try {
            // RParser.g:1617:5: ( ident COLON math_type_expression )
            // RParser.g:1617:9: ident COLON math_type_expression
            {
            root_0 = (ColsAST)adaptor.nil();

            pushFollow(FOLLOW_ident_in_math_variable_declaration10511);
            ident787=ident();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, ident787.getTree());
            COLON788=(Token)match(input,COLON,FOLLOW_COLON_in_math_variable_declaration10513); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            COLON788_tree = (ColsAST)adaptor.create(COLON788);
            adaptor.addChild(root_0, COLON788_tree);
            }
            pushFollow(FOLLOW_math_type_expression_in_math_variable_declaration10515);
            math_type_expression789=math_type_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, math_type_expression789.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (ColsAST)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "math_variable_declaration"

    public static class implicit_type_parameter_group_return extends ParserRuleReturnScope {
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "implicit_type_parameter_group"
    // RParser.g:1620:1: implicit_type_parameter_group : variable_id_list COLON math_expression ;
    public final RParser.implicit_type_parameter_group_return implicit_type_parameter_group() throws RecognitionException {
        RParser.implicit_type_parameter_group_return retval = new RParser.implicit_type_parameter_group_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        Token COLON791=null;
        RParser.variable_id_list_return variable_id_list790 = null;

        RParser.math_expression_return math_expression792 = null;


        ColsAST COLON791_tree=null;

        try {
            // RParser.g:1621:5: ( variable_id_list COLON math_expression )
            // RParser.g:1621:9: variable_id_list COLON math_expression
            {
            root_0 = (ColsAST)adaptor.nil();

            pushFollow(FOLLOW_variable_id_list_in_implicit_type_parameter_group10538);
            variable_id_list790=variable_id_list();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, variable_id_list790.getTree());
            COLON791=(Token)match(input,COLON,FOLLOW_COLON_in_implicit_type_parameter_group10540); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            COLON791_tree = (ColsAST)adaptor.create(COLON791);
            adaptor.addChild(root_0, COLON791_tree);
            }
            pushFollow(FOLLOW_math_expression_in_implicit_type_parameter_group10542);
            math_expression792=math_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, math_expression792.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (ColsAST)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "implicit_type_parameter_group"

    public static class math_expression_return extends ParserRuleReturnScope {
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "math_expression"
    // RParser.g:1628:1: math_expression : ( ( ( ident ident COLON )=> iterated_construct ) -> ^( EXPR iterated_construct ) | quantified_expression -> ^( EXPR quantified_expression ) ) ;
    public final RParser.math_expression_return math_expression() throws RecognitionException {
        RParser.math_expression_return retval = new RParser.math_expression_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        RParser.iterated_construct_return iterated_construct793 = null;

        RParser.quantified_expression_return quantified_expression794 = null;


        RewriteRuleSubtreeStream stream_quantified_expression=new RewriteRuleSubtreeStream(adaptor,"rule quantified_expression");
        RewriteRuleSubtreeStream stream_iterated_construct=new RewriteRuleSubtreeStream(adaptor,"rule iterated_construct");
        try {
            // RParser.g:1629:5: ( ( ( ( ident ident COLON )=> iterated_construct ) -> ^( EXPR iterated_construct ) | quantified_expression -> ^( EXPR quantified_expression ) ) )
            // RParser.g:1629:9: ( ( ( ident ident COLON )=> iterated_construct ) -> ^( EXPR iterated_construct ) | quantified_expression -> ^( EXPR quantified_expression ) )
            {
            // RParser.g:1629:9: ( ( ( ident ident COLON )=> iterated_construct ) -> ^( EXPR iterated_construct ) | quantified_expression -> ^( EXPR quantified_expression ) )
            int alt214=2;
            alt214 = dfa214.predict(input);
            switch (alt214) {
                case 1 :
                    // RParser.g:1629:13: ( ( ident ident COLON )=> iterated_construct )
                    {
                    // RParser.g:1629:13: ( ( ident ident COLON )=> iterated_construct )
                    // RParser.g:1629:14: ( ident ident COLON )=> iterated_construct
                    {
                    pushFollow(FOLLOW_iterated_construct_in_math_expression10580);
                    iterated_construct793=iterated_construct();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_iterated_construct.add(iterated_construct793.getTree());

                    }



                    // AST REWRITE
                    // elements: iterated_construct
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (ColsAST)adaptor.nil();
                    // 1629:57: -> ^( EXPR iterated_construct )
                    {
                        // RParser.g:1629:60: ^( EXPR iterated_construct )
                        {
                        ColsAST root_1 = (ColsAST)adaptor.nil();
                        root_1 = (ColsAST)adaptor.becomeRoot((ColsAST)adaptor.create(EXPR, "EXPR"), root_1);

                        adaptor.addChild(root_1, stream_iterated_construct.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // RParser.g:1630:13: quantified_expression
                    {
                    pushFollow(FOLLOW_quantified_expression_in_math_expression10603);
                    quantified_expression794=quantified_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_quantified_expression.add(quantified_expression794.getTree());


                    // AST REWRITE
                    // elements: quantified_expression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (ColsAST)adaptor.nil();
                    // 1630:35: -> ^( EXPR quantified_expression )
                    {
                        // RParser.g:1630:38: ^( EXPR quantified_expression )
                        {
                        ColsAST root_1 = (ColsAST)adaptor.nil();
                        root_1 = (ColsAST)adaptor.becomeRoot((ColsAST)adaptor.create(EXPR, "EXPR"), root_1);

                        adaptor.addChild(root_1, stream_quantified_expression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (ColsAST)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "math_expression"

    public static class quantified_expression_return extends ParserRuleReturnScope {
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "quantified_expression"
    // RParser.g:1638:1: quantified_expression : ( implies_expression | FOR ALL math_variable_declaration_group ( where_clause )? COMMA quantified_expression -> ^( FORALL math_variable_declaration_group ( where_clause )? quantified_expression ) | ( THERE EXISTS UNIQUE )=> THERE EXISTS UNIQUE math_variable_declaration_group ( where_clause )? ( ( SUCH THAT ) | COMMA ) quantified_expression -> ^( EXISTS_UNIQUE math_variable_declaration_group ( where_clause )? quantified_expression ) | THERE EXISTS math_variable_declaration_group ( where_clause )? ( ( SUCH THAT ) | COMMA ) quantified_expression );
    public final RParser.quantified_expression_return quantified_expression() throws RecognitionException {
        RParser.quantified_expression_return retval = new RParser.quantified_expression_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        Token FOR796=null;
        Token ALL797=null;
        Token COMMA800=null;
        Token THERE802=null;
        Token EXISTS803=null;
        Token UNIQUE804=null;
        Token SUCH807=null;
        Token THAT808=null;
        Token COMMA809=null;
        Token THERE811=null;
        Token EXISTS812=null;
        Token SUCH815=null;
        Token THAT816=null;
        Token COMMA817=null;
        RParser.implies_expression_return implies_expression795 = null;

        RParser.math_variable_declaration_group_return math_variable_declaration_group798 = null;

        RParser.where_clause_return where_clause799 = null;

        RParser.quantified_expression_return quantified_expression801 = null;

        RParser.math_variable_declaration_group_return math_variable_declaration_group805 = null;

        RParser.where_clause_return where_clause806 = null;

        RParser.quantified_expression_return quantified_expression810 = null;

        RParser.math_variable_declaration_group_return math_variable_declaration_group813 = null;

        RParser.where_clause_return where_clause814 = null;

        RParser.quantified_expression_return quantified_expression818 = null;


        ColsAST FOR796_tree=null;
        ColsAST ALL797_tree=null;
        ColsAST COMMA800_tree=null;
        ColsAST THERE802_tree=null;
        ColsAST EXISTS803_tree=null;
        ColsAST UNIQUE804_tree=null;
        ColsAST SUCH807_tree=null;
        ColsAST THAT808_tree=null;
        ColsAST COMMA809_tree=null;
        ColsAST THERE811_tree=null;
        ColsAST EXISTS812_tree=null;
        ColsAST SUCH815_tree=null;
        ColsAST THAT816_tree=null;
        ColsAST COMMA817_tree=null;
        RewriteRuleTokenStream stream_UNIQUE=new RewriteRuleTokenStream(adaptor,"token UNIQUE");
        RewriteRuleTokenStream stream_FOR=new RewriteRuleTokenStream(adaptor,"token FOR");
        RewriteRuleTokenStream stream_THAT=new RewriteRuleTokenStream(adaptor,"token THAT");
        RewriteRuleTokenStream stream_EXISTS=new RewriteRuleTokenStream(adaptor,"token EXISTS");
        RewriteRuleTokenStream stream_SUCH=new RewriteRuleTokenStream(adaptor,"token SUCH");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_THERE=new RewriteRuleTokenStream(adaptor,"token THERE");
        RewriteRuleTokenStream stream_ALL=new RewriteRuleTokenStream(adaptor,"token ALL");
        RewriteRuleSubtreeStream stream_quantified_expression=new RewriteRuleSubtreeStream(adaptor,"rule quantified_expression");
        RewriteRuleSubtreeStream stream_where_clause=new RewriteRuleSubtreeStream(adaptor,"rule where_clause");
        RewriteRuleSubtreeStream stream_math_variable_declaration_group=new RewriteRuleSubtreeStream(adaptor,"rule math_variable_declaration_group");
        try {
            // RParser.g:1639:5: ( implies_expression | FOR ALL math_variable_declaration_group ( where_clause )? COMMA quantified_expression -> ^( FORALL math_variable_declaration_group ( where_clause )? quantified_expression ) | ( THERE EXISTS UNIQUE )=> THERE EXISTS UNIQUE math_variable_declaration_group ( where_clause )? ( ( SUCH THAT ) | COMMA ) quantified_expression -> ^( EXISTS_UNIQUE math_variable_declaration_group ( where_clause )? quantified_expression ) | THERE EXISTS math_variable_declaration_group ( where_clause )? ( ( SUCH THAT ) | COMMA ) quantified_expression )
            int alt220=4;
            alt220 = dfa220.predict(input);
            switch (alt220) {
                case 1 :
                    // RParser.g:1639:9: implies_expression
                    {
                    root_0 = (ColsAST)adaptor.nil();

                    pushFollow(FOLLOW_implies_expression_in_quantified_expression10644);
                    implies_expression795=implies_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, implies_expression795.getTree());

                    }
                    break;
                case 2 :
                    // RParser.g:1640:9: FOR ALL math_variable_declaration_group ( where_clause )? COMMA quantified_expression
                    {
                    FOR796=(Token)match(input,FOR,FOLLOW_FOR_in_quantified_expression10654); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_FOR.add(FOR796);

                    ALL797=(Token)match(input,ALL,FOLLOW_ALL_in_quantified_expression10656); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ALL.add(ALL797);

                    pushFollow(FOLLOW_math_variable_declaration_group_in_quantified_expression10658);
                    math_variable_declaration_group798=math_variable_declaration_group();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_math_variable_declaration_group.add(math_variable_declaration_group798.getTree());
                    // RParser.g:1641:9: ( where_clause )?
                    int alt215=2;
                    int LA215_0 = input.LA(1);

                    if ( (LA215_0==WHERE) ) {
                        alt215=1;
                    }
                    switch (alt215) {
                        case 1 :
                            // RParser.g:1641:9: where_clause
                            {
                            pushFollow(FOLLOW_where_clause_in_quantified_expression10668);
                            where_clause799=where_clause();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_where_clause.add(where_clause799.getTree());

                            }
                            break;

                    }

                    COMMA800=(Token)match(input,COMMA,FOLLOW_COMMA_in_quantified_expression10671); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COMMA.add(COMMA800);

                    pushFollow(FOLLOW_quantified_expression_in_quantified_expression10673);
                    quantified_expression801=quantified_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_quantified_expression.add(quantified_expression801.getTree());


                    // AST REWRITE
                    // elements: where_clause, quantified_expression, math_variable_declaration_group
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (ColsAST)adaptor.nil();
                    // 1641:51: -> ^( FORALL math_variable_declaration_group ( where_clause )? quantified_expression )
                    {
                        // RParser.g:1642:9: ^( FORALL math_variable_declaration_group ( where_clause )? quantified_expression )
                        {
                        ColsAST root_1 = (ColsAST)adaptor.nil();
                        root_1 = (ColsAST)adaptor.becomeRoot((ColsAST)adaptor.create(FORALL, "FORALL"), root_1);

                        adaptor.addChild(root_1, stream_math_variable_declaration_group.nextTree());
                        // RParser.g:1643:9: ( where_clause )?
                        if ( stream_where_clause.hasNext() ) {
                            adaptor.addChild(root_1, stream_where_clause.nextTree());

                        }
                        stream_where_clause.reset();
                        adaptor.addChild(root_1, stream_quantified_expression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // RParser.g:1644:9: ( THERE EXISTS UNIQUE )=> THERE EXISTS UNIQUE math_variable_declaration_group ( where_clause )? ( ( SUCH THAT ) | COMMA ) quantified_expression
                    {
                    THERE802=(Token)match(input,THERE,FOLLOW_THERE_in_quantified_expression10722); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_THERE.add(THERE802);

                    EXISTS803=(Token)match(input,EXISTS,FOLLOW_EXISTS_in_quantified_expression10724); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EXISTS.add(EXISTS803);

                    UNIQUE804=(Token)match(input,UNIQUE,FOLLOW_UNIQUE_in_quantified_expression10726); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_UNIQUE.add(UNIQUE804);

                    pushFollow(FOLLOW_math_variable_declaration_group_in_quantified_expression10728);
                    math_variable_declaration_group805=math_variable_declaration_group();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_math_variable_declaration_group.add(math_variable_declaration_group805.getTree());
                    // RParser.g:1645:9: ( where_clause )?
                    int alt216=2;
                    int LA216_0 = input.LA(1);

                    if ( (LA216_0==WHERE) ) {
                        alt216=1;
                    }
                    switch (alt216) {
                        case 1 :
                            // RParser.g:1645:9: where_clause
                            {
                            pushFollow(FOLLOW_where_clause_in_quantified_expression10738);
                            where_clause806=where_clause();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_where_clause.add(where_clause806.getTree());

                            }
                            break;

                    }

                    // RParser.g:1645:23: ( ( SUCH THAT ) | COMMA )
                    int alt217=2;
                    int LA217_0 = input.LA(1);

                    if ( (LA217_0==SUCH) ) {
                        alt217=1;
                    }
                    else if ( (LA217_0==COMMA) ) {
                        alt217=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 217, 0, input);

                        throw nvae;
                    }
                    switch (alt217) {
                        case 1 :
                            // RParser.g:1645:24: ( SUCH THAT )
                            {
                            // RParser.g:1645:24: ( SUCH THAT )
                            // RParser.g:1645:25: SUCH THAT
                            {
                            SUCH807=(Token)match(input,SUCH,FOLLOW_SUCH_in_quantified_expression10743); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_SUCH.add(SUCH807);

                            THAT808=(Token)match(input,THAT,FOLLOW_THAT_in_quantified_expression10745); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_THAT.add(THAT808);


                            }


                            }
                            break;
                        case 2 :
                            // RParser.g:1645:38: COMMA
                            {
                            COMMA809=(Token)match(input,COMMA,FOLLOW_COMMA_in_quantified_expression10750); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_COMMA.add(COMMA809);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_quantified_expression_in_quantified_expression10753);
                    quantified_expression810=quantified_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_quantified_expression.add(quantified_expression810.getTree());


                    // AST REWRITE
                    // elements: math_variable_declaration_group, quantified_expression, where_clause
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (ColsAST)adaptor.nil();
                    // 1645:67: -> ^( EXISTS_UNIQUE math_variable_declaration_group ( where_clause )? quantified_expression )
                    {
                        // RParser.g:1646:9: ^( EXISTS_UNIQUE math_variable_declaration_group ( where_clause )? quantified_expression )
                        {
                        ColsAST root_1 = (ColsAST)adaptor.nil();
                        root_1 = (ColsAST)adaptor.becomeRoot((ColsAST)adaptor.create(EXISTS_UNIQUE, "EXISTS_UNIQUE"), root_1);

                        adaptor.addChild(root_1, stream_math_variable_declaration_group.nextTree());
                        // RParser.g:1647:9: ( where_clause )?
                        if ( stream_where_clause.hasNext() ) {
                            adaptor.addChild(root_1, stream_where_clause.nextTree());

                        }
                        stream_where_clause.reset();
                        adaptor.addChild(root_1, stream_quantified_expression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 4 :
                    // RParser.g:1648:9: THERE EXISTS math_variable_declaration_group ( where_clause )? ( ( SUCH THAT ) | COMMA ) quantified_expression
                    {
                    root_0 = (ColsAST)adaptor.nil();

                    THERE811=(Token)match(input,THERE,FOLLOW_THERE_in_quantified_expression10792); if (state.failed) return retval;
                    EXISTS812=(Token)match(input,EXISTS,FOLLOW_EXISTS_in_quantified_expression10795); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    EXISTS812_tree = (ColsAST)adaptor.create(EXISTS812);
                    root_0 = (ColsAST)adaptor.becomeRoot(EXISTS812_tree, root_0);
                    }
                    pushFollow(FOLLOW_math_variable_declaration_group_in_quantified_expression10798);
                    math_variable_declaration_group813=math_variable_declaration_group();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, math_variable_declaration_group813.getTree());
                    // RParser.g:1649:9: ( where_clause )?
                    int alt218=2;
                    int LA218_0 = input.LA(1);

                    if ( (LA218_0==WHERE) ) {
                        alt218=1;
                    }
                    switch (alt218) {
                        case 1 :
                            // RParser.g:1649:9: where_clause
                            {
                            pushFollow(FOLLOW_where_clause_in_quantified_expression10808);
                            where_clause814=where_clause();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, where_clause814.getTree());

                            }
                            break;

                    }

                    // RParser.g:1649:23: ( ( SUCH THAT ) | COMMA )
                    int alt219=2;
                    int LA219_0 = input.LA(1);

                    if ( (LA219_0==SUCH) ) {
                        alt219=1;
                    }
                    else if ( (LA219_0==COMMA) ) {
                        alt219=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 219, 0, input);

                        throw nvae;
                    }
                    switch (alt219) {
                        case 1 :
                            // RParser.g:1649:24: ( SUCH THAT )
                            {
                            // RParser.g:1649:24: ( SUCH THAT )
                            // RParser.g:1649:25: SUCH THAT
                            {
                            SUCH815=(Token)match(input,SUCH,FOLLOW_SUCH_in_quantified_expression10813); if (state.failed) return retval;
                            THAT816=(Token)match(input,THAT,FOLLOW_THAT_in_quantified_expression10816); if (state.failed) return retval;

                            }


                            }
                            break;
                        case 2 :
                            // RParser.g:1649:40: COMMA
                            {
                            COMMA817=(Token)match(input,COMMA,FOLLOW_COMMA_in_quantified_expression10822); if (state.failed) return retval;

                            }
                            break;

                    }

                    pushFollow(FOLLOW_quantified_expression_in_quantified_expression10826);
                    quantified_expression818=quantified_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantified_expression818.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (ColsAST)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "quantified_expression"

    public static class implies_expression_return extends ParserRuleReturnScope {
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "implies_expression"
    // RParser.g:1652:1: implies_expression : ( logical_expression ( IMPLIES logical_expression | IFF logical_expression )? | IF logical_expression THEN logical_expression ( ELSE logical_expression )? ) ;
    public final RParser.implies_expression_return implies_expression() throws RecognitionException {
        RParser.implies_expression_return retval = new RParser.implies_expression_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        Token IMPLIES820=null;
        Token IFF822=null;
        Token IF824=null;
        Token THEN826=null;
        Token ELSE828=null;
        RParser.logical_expression_return logical_expression819 = null;

        RParser.logical_expression_return logical_expression821 = null;

        RParser.logical_expression_return logical_expression823 = null;

        RParser.logical_expression_return logical_expression825 = null;

        RParser.logical_expression_return logical_expression827 = null;

        RParser.logical_expression_return logical_expression829 = null;


        ColsAST IMPLIES820_tree=null;
        ColsAST IFF822_tree=null;
        ColsAST IF824_tree=null;
        ColsAST THEN826_tree=null;
        ColsAST ELSE828_tree=null;

        try {
            // RParser.g:1653:5: ( ( logical_expression ( IMPLIES logical_expression | IFF logical_expression )? | IF logical_expression THEN logical_expression ( ELSE logical_expression )? ) )
            // RParser.g:1653:9: ( logical_expression ( IMPLIES logical_expression | IFF logical_expression )? | IF logical_expression THEN logical_expression ( ELSE logical_expression )? )
            {
            root_0 = (ColsAST)adaptor.nil();

            // RParser.g:1653:9: ( logical_expression ( IMPLIES logical_expression | IFF logical_expression )? | IF logical_expression THEN logical_expression ( ELSE logical_expression )? )
            int alt223=2;
            alt223 = dfa223.predict(input);
            switch (alt223) {
                case 1 :
                    // RParser.g:1653:13: logical_expression ( IMPLIES logical_expression | IFF logical_expression )?
                    {
                    pushFollow(FOLLOW_logical_expression_in_implies_expression10849);
                    logical_expression819=logical_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, logical_expression819.getTree());
                    // RParser.g:1654:13: ( IMPLIES logical_expression | IFF logical_expression )?
                    int alt221=3;
                    int LA221_0 = input.LA(1);

                    if ( (LA221_0==IMPLIES) ) {
                        alt221=1;
                    }
                    else if ( (LA221_0==IFF) ) {
                        alt221=2;
                    }
                    switch (alt221) {
                        case 1 :
                            // RParser.g:1654:17: IMPLIES logical_expression
                            {
                            IMPLIES820=(Token)match(input,IMPLIES,FOLLOW_IMPLIES_in_implies_expression10868); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            IMPLIES820_tree = (ColsAST)adaptor.create(IMPLIES820);
                            root_0 = (ColsAST)adaptor.becomeRoot(IMPLIES820_tree, root_0);
                            }
                            pushFollow(FOLLOW_logical_expression_in_implies_expression10871);
                            logical_expression821=logical_expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, logical_expression821.getTree());

                            }
                            break;
                        case 2 :
                            // RParser.g:1655:17: IFF logical_expression
                            {
                            IFF822=(Token)match(input,IFF,FOLLOW_IFF_in_implies_expression10889); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            IFF822_tree = (ColsAST)adaptor.create(IFF822);
                            root_0 = (ColsAST)adaptor.becomeRoot(IFF822_tree, root_0);
                            }
                            pushFollow(FOLLOW_logical_expression_in_implies_expression10892);
                            logical_expression823=logical_expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, logical_expression823.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // RParser.g:1658:13: IF logical_expression THEN logical_expression ( ELSE logical_expression )?
                    {
                    IF824=(Token)match(input,IF,FOLLOW_IF_in_implies_expression10935); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    IF824_tree = (ColsAST)adaptor.create(IF824);
                    root_0 = (ColsAST)adaptor.becomeRoot(IF824_tree, root_0);
                    }
                    pushFollow(FOLLOW_logical_expression_in_implies_expression10938);
                    logical_expression825=logical_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, logical_expression825.getTree());
                    THEN826=(Token)match(input,THEN,FOLLOW_THEN_in_implies_expression10952); if (state.failed) return retval;
                    pushFollow(FOLLOW_logical_expression_in_implies_expression10955);
                    logical_expression827=logical_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, logical_expression827.getTree());
                    // RParser.g:1667:13: ( ELSE logical_expression )?
                    int alt222=2;
                    int LA222_0 = input.LA(1);

                    if ( (LA222_0==ELSE) ) {
                        alt222=1;
                    }
                    switch (alt222) {
                        case 1 :
                            // RParser.g:1667:14: ELSE logical_expression
                            {
                            ELSE828=(Token)match(input,ELSE,FOLLOW_ELSE_in_implies_expression11089); if (state.failed) return retval;
                            pushFollow(FOLLOW_logical_expression_in_implies_expression11092);
                            logical_expression829=logical_expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, logical_expression829.getTree());

                            }
                            break;

                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (ColsAST)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "implies_expression"

    public static class logical_expression_return extends ParserRuleReturnScope {
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "logical_expression"
    // RParser.g:1672:1: logical_expression : relational_expression ( ( AND | OR ) relational_expression )* ;
    public final RParser.logical_expression_return logical_expression() throws RecognitionException {
        RParser.logical_expression_return retval = new RParser.logical_expression_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        Token AND831=null;
        Token OR832=null;
        RParser.relational_expression_return relational_expression830 = null;

        RParser.relational_expression_return relational_expression833 = null;


        ColsAST AND831_tree=null;
        ColsAST OR832_tree=null;

        try {
            // RParser.g:1673:5: ( relational_expression ( ( AND | OR ) relational_expression )* )
            // RParser.g:1673:9: relational_expression ( ( AND | OR ) relational_expression )*
            {
            root_0 = (ColsAST)adaptor.nil();

            pushFollow(FOLLOW_relational_expression_in_logical_expression11136);
            relational_expression830=relational_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, relational_expression830.getTree());
            // RParser.g:1674:9: ( ( AND | OR ) relational_expression )*
            loop225:
            do {
                int alt225=2;
                int LA225_0 = input.LA(1);

                if ( (LA225_0==AND||LA225_0==OR) ) {
                    alt225=1;
                }


                switch (alt225) {
            	case 1 :
            	    // RParser.g:1674:13: ( AND | OR ) relational_expression
            	    {
            	    // RParser.g:1674:13: ( AND | OR )
            	    int alt224=2;
            	    int LA224_0 = input.LA(1);

            	    if ( (LA224_0==AND) ) {
            	        alt224=1;
            	    }
            	    else if ( (LA224_0==OR) ) {
            	        alt224=2;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 224, 0, input);

            	        throw nvae;
            	    }
            	    switch (alt224) {
            	        case 1 :
            	            // RParser.g:1674:17: AND
            	            {
            	            AND831=(Token)match(input,AND,FOLLOW_AND_in_logical_expression11154); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            AND831_tree = (ColsAST)adaptor.create(AND831);
            	            root_0 = (ColsAST)adaptor.becomeRoot(AND831_tree, root_0);
            	            }

            	            }
            	            break;
            	        case 2 :
            	            // RParser.g:1675:17: OR
            	            {
            	            OR832=(Token)match(input,OR,FOLLOW_OR_in_logical_expression11173); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            OR832_tree = (ColsAST)adaptor.create(OR832);
            	            root_0 = (ColsAST)adaptor.becomeRoot(OR832_tree, root_0);
            	            }

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_relational_expression_in_logical_expression11202);
            	    relational_expression833=relational_expression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, relational_expression833.getTree());

            	    }
            	    break;

            	default :
            	    break loop225;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (ColsAST)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "logical_expression"

    public static class relational_expression_return extends ParserRuleReturnScope {
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "relational_expression"
    // RParser.g:1681:1: relational_expression : ( ( infix_expression ( LT | LT_EQL ) infix_expression ( LT | LT_EQL ) )=> between_expression | infix_expression ( ( EQL | NOT_EQL | LT | LT_EQL | GT | GT_EQL | IN | NOT_IN | SUBSET | NOT_SUBSET | PROP_SUBSET | NOT_PROP_SUBSET | SUBSTR | NOT_SUBSTR | PROP_SUBSTR | NOT_PROP_SUBSTR ) infix_expression )? );
    public final RParser.relational_expression_return relational_expression() throws RecognitionException {
        RParser.relational_expression_return retval = new RParser.relational_expression_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        Token EQL836=null;
        Token NOT_EQL837=null;
        Token LT838=null;
        Token LT_EQL839=null;
        Token GT840=null;
        Token GT_EQL841=null;
        Token IN842=null;
        Token NOT_IN843=null;
        Token SUBSET844=null;
        Token NOT_SUBSET845=null;
        Token PROP_SUBSET846=null;
        Token NOT_PROP_SUBSET847=null;
        Token SUBSTR848=null;
        Token NOT_SUBSTR849=null;
        Token PROP_SUBSTR850=null;
        Token NOT_PROP_SUBSTR851=null;
        RParser.between_expression_return between_expression834 = null;

        RParser.infix_expression_return infix_expression835 = null;

        RParser.infix_expression_return infix_expression852 = null;


        ColsAST EQL836_tree=null;
        ColsAST NOT_EQL837_tree=null;
        ColsAST LT838_tree=null;
        ColsAST LT_EQL839_tree=null;
        ColsAST GT840_tree=null;
        ColsAST GT_EQL841_tree=null;
        ColsAST IN842_tree=null;
        ColsAST NOT_IN843_tree=null;
        ColsAST SUBSET844_tree=null;
        ColsAST NOT_SUBSET845_tree=null;
        ColsAST PROP_SUBSET846_tree=null;
        ColsAST NOT_PROP_SUBSET847_tree=null;
        ColsAST SUBSTR848_tree=null;
        ColsAST NOT_SUBSTR849_tree=null;
        ColsAST PROP_SUBSTR850_tree=null;
        ColsAST NOT_PROP_SUBSTR851_tree=null;

        try {
            // RParser.g:1682:5: ( ( infix_expression ( LT | LT_EQL ) infix_expression ( LT | LT_EQL ) )=> between_expression | infix_expression ( ( EQL | NOT_EQL | LT | LT_EQL | GT | GT_EQL | IN | NOT_IN | SUBSET | NOT_SUBSET | PROP_SUBSET | NOT_PROP_SUBSET | SUBSTR | NOT_SUBSTR | PROP_SUBSTR | NOT_PROP_SUBSTR ) infix_expression )? )
            int alt228=2;
            alt228 = dfa228.predict(input);
            switch (alt228) {
                case 1 :
                    // RParser.g:1682:9: ( infix_expression ( LT | LT_EQL ) infix_expression ( LT | LT_EQL ) )=> between_expression
                    {
                    root_0 = (ColsAST)adaptor.nil();

                    pushFollow(FOLLOW_between_expression_in_relational_expression11264);
                    between_expression834=between_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, between_expression834.getTree());

                    }
                    break;
                case 2 :
                    // RParser.g:1685:9: infix_expression ( ( EQL | NOT_EQL | LT | LT_EQL | GT | GT_EQL | IN | NOT_IN | SUBSET | NOT_SUBSET | PROP_SUBSET | NOT_PROP_SUBSET | SUBSTR | NOT_SUBSTR | PROP_SUBSTR | NOT_PROP_SUBSTR ) infix_expression )?
                    {
                    root_0 = (ColsAST)adaptor.nil();

                    pushFollow(FOLLOW_infix_expression_in_relational_expression11279);
                    infix_expression835=infix_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, infix_expression835.getTree());
                    // RParser.g:1686:9: ( ( EQL | NOT_EQL | LT | LT_EQL | GT | GT_EQL | IN | NOT_IN | SUBSET | NOT_SUBSET | PROP_SUBSET | NOT_PROP_SUBSET | SUBSTR | NOT_SUBSTR | PROP_SUBSTR | NOT_PROP_SUBSTR ) infix_expression )?
                    int alt227=2;
                    int LA227_0 = input.LA(1);

                    if ( ((LA227_0>=IN && LA227_0<=SUBSTR)||(LA227_0>=NOT_EQL && LA227_0<=GT)||(LA227_0>=PROP_SUBSTR && LA227_0<=NOT_PROP_SUBSTR)) ) {
                        alt227=1;
                    }
                    switch (alt227) {
                        case 1 :
                            // RParser.g:1686:13: ( EQL | NOT_EQL | LT | LT_EQL | GT | GT_EQL | IN | NOT_IN | SUBSET | NOT_SUBSET | PROP_SUBSET | NOT_PROP_SUBSET | SUBSTR | NOT_SUBSTR | PROP_SUBSTR | NOT_PROP_SUBSTR ) infix_expression
                            {
                            // RParser.g:1686:13: ( EQL | NOT_EQL | LT | LT_EQL | GT | GT_EQL | IN | NOT_IN | SUBSET | NOT_SUBSET | PROP_SUBSET | NOT_PROP_SUBSET | SUBSTR | NOT_SUBSTR | PROP_SUBSTR | NOT_PROP_SUBSTR )
                            int alt226=16;
                            alt226 = dfa226.predict(input);
                            switch (alt226) {
                                case 1 :
                                    // RParser.g:1686:17: EQL
                                    {
                                    EQL836=(Token)match(input,EQL,FOLLOW_EQL_in_relational_expression11297); if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                    EQL836_tree = (ColsAST)adaptor.create(EQL836);
                                    root_0 = (ColsAST)adaptor.becomeRoot(EQL836_tree, root_0);
                                    }

                                    }
                                    break;
                                case 2 :
                                    // RParser.g:1687:17: NOT_EQL
                                    {
                                    NOT_EQL837=(Token)match(input,NOT_EQL,FOLLOW_NOT_EQL_in_relational_expression11316); if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                    NOT_EQL837_tree = (ColsAST)adaptor.create(NOT_EQL837);
                                    root_0 = (ColsAST)adaptor.becomeRoot(NOT_EQL837_tree, root_0);
                                    }

                                    }
                                    break;
                                case 3 :
                                    // RParser.g:1688:17: LT
                                    {
                                    LT838=(Token)match(input,LT,FOLLOW_LT_in_relational_expression11335); if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                    LT838_tree = (ColsAST)adaptor.create(LT838);
                                    root_0 = (ColsAST)adaptor.becomeRoot(LT838_tree, root_0);
                                    }

                                    }
                                    break;
                                case 4 :
                                    // RParser.g:1689:17: LT_EQL
                                    {
                                    LT_EQL839=(Token)match(input,LT_EQL,FOLLOW_LT_EQL_in_relational_expression11354); if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                    LT_EQL839_tree = (ColsAST)adaptor.create(LT_EQL839);
                                    root_0 = (ColsAST)adaptor.becomeRoot(LT_EQL839_tree, root_0);
                                    }

                                    }
                                    break;
                                case 5 :
                                    // RParser.g:1690:17: GT
                                    {
                                    GT840=(Token)match(input,GT,FOLLOW_GT_in_relational_expression11373); if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                    GT840_tree = (ColsAST)adaptor.create(GT840);
                                    root_0 = (ColsAST)adaptor.becomeRoot(GT840_tree, root_0);
                                    }

                                    }
                                    break;
                                case 6 :
                                    // RParser.g:1691:17: GT_EQL
                                    {
                                    GT_EQL841=(Token)match(input,GT_EQL,FOLLOW_GT_EQL_in_relational_expression11392); if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                    GT_EQL841_tree = (ColsAST)adaptor.create(GT_EQL841);
                                    root_0 = (ColsAST)adaptor.becomeRoot(GT_EQL841_tree, root_0);
                                    }

                                    }
                                    break;
                                case 7 :
                                    // RParser.g:1692:17: IN
                                    {
                                    IN842=(Token)match(input,IN,FOLLOW_IN_in_relational_expression11411); if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                    IN842_tree = (ColsAST)adaptor.create(IN842);
                                    root_0 = (ColsAST)adaptor.becomeRoot(IN842_tree, root_0);
                                    }

                                    }
                                    break;
                                case 8 :
                                    // RParser.g:1693:17: NOT_IN
                                    {
                                    NOT_IN843=(Token)match(input,NOT_IN,FOLLOW_NOT_IN_in_relational_expression11430); if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                    NOT_IN843_tree = (ColsAST)adaptor.create(NOT_IN843);
                                    root_0 = (ColsAST)adaptor.becomeRoot(NOT_IN843_tree, root_0);
                                    }

                                    }
                                    break;
                                case 9 :
                                    // RParser.g:1694:17: SUBSET
                                    {
                                    SUBSET844=(Token)match(input,SUBSET,FOLLOW_SUBSET_in_relational_expression11449); if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                    SUBSET844_tree = (ColsAST)adaptor.create(SUBSET844);
                                    root_0 = (ColsAST)adaptor.becomeRoot(SUBSET844_tree, root_0);
                                    }

                                    }
                                    break;
                                case 10 :
                                    // RParser.g:1695:17: NOT_SUBSET
                                    {
                                    NOT_SUBSET845=(Token)match(input,NOT_SUBSET,FOLLOW_NOT_SUBSET_in_relational_expression11468); if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                    NOT_SUBSET845_tree = (ColsAST)adaptor.create(NOT_SUBSET845);
                                    root_0 = (ColsAST)adaptor.becomeRoot(NOT_SUBSET845_tree, root_0);
                                    }

                                    }
                                    break;
                                case 11 :
                                    // RParser.g:1696:17: PROP_SUBSET
                                    {
                                    PROP_SUBSET846=(Token)match(input,PROP_SUBSET,FOLLOW_PROP_SUBSET_in_relational_expression11487); if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                    PROP_SUBSET846_tree = (ColsAST)adaptor.create(PROP_SUBSET846);
                                    root_0 = (ColsAST)adaptor.becomeRoot(PROP_SUBSET846_tree, root_0);
                                    }

                                    }
                                    break;
                                case 12 :
                                    // RParser.g:1697:17: NOT_PROP_SUBSET
                                    {
                                    NOT_PROP_SUBSET847=(Token)match(input,NOT_PROP_SUBSET,FOLLOW_NOT_PROP_SUBSET_in_relational_expression11506); if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                    NOT_PROP_SUBSET847_tree = (ColsAST)adaptor.create(NOT_PROP_SUBSET847);
                                    root_0 = (ColsAST)adaptor.becomeRoot(NOT_PROP_SUBSET847_tree, root_0);
                                    }

                                    }
                                    break;
                                case 13 :
                                    // RParser.g:1698:17: SUBSTR
                                    {
                                    SUBSTR848=(Token)match(input,SUBSTR,FOLLOW_SUBSTR_in_relational_expression11525); if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                    SUBSTR848_tree = (ColsAST)adaptor.create(SUBSTR848);
                                    root_0 = (ColsAST)adaptor.becomeRoot(SUBSTR848_tree, root_0);
                                    }

                                    }
                                    break;
                                case 14 :
                                    // RParser.g:1699:17: NOT_SUBSTR
                                    {
                                    NOT_SUBSTR849=(Token)match(input,NOT_SUBSTR,FOLLOW_NOT_SUBSTR_in_relational_expression11544); if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                    NOT_SUBSTR849_tree = (ColsAST)adaptor.create(NOT_SUBSTR849);
                                    root_0 = (ColsAST)adaptor.becomeRoot(NOT_SUBSTR849_tree, root_0);
                                    }

                                    }
                                    break;
                                case 15 :
                                    // RParser.g:1700:17: PROP_SUBSTR
                                    {
                                    PROP_SUBSTR850=(Token)match(input,PROP_SUBSTR,FOLLOW_PROP_SUBSTR_in_relational_expression11563); if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                    PROP_SUBSTR850_tree = (ColsAST)adaptor.create(PROP_SUBSTR850);
                                    root_0 = (ColsAST)adaptor.becomeRoot(PROP_SUBSTR850_tree, root_0);
                                    }

                                    }
                                    break;
                                case 16 :
                                    // RParser.g:1701:17: NOT_PROP_SUBSTR
                                    {
                                    NOT_PROP_SUBSTR851=(Token)match(input,NOT_PROP_SUBSTR,FOLLOW_NOT_PROP_SUBSTR_in_relational_expression11582); if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                    NOT_PROP_SUBSTR851_tree = (ColsAST)adaptor.create(NOT_PROP_SUBSTR851);
                                    root_0 = (ColsAST)adaptor.becomeRoot(NOT_PROP_SUBSTR851_tree, root_0);
                                    }

                                    }
                                    break;

                            }

                            pushFollow(FOLLOW_infix_expression_in_relational_expression11611);
                            infix_expression852=infix_expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, infix_expression852.getTree());

                            }
                            break;

                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (ColsAST)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "relational_expression"

    public static class between_expression_return extends ParserRuleReturnScope {
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "between_expression"
    // RParser.g:1707:1: between_expression : infix_expression (id1= LT | id1= LT_EQL ) infix_expression (id2= LT | id2= LT_EQL ) infix_expression -> ^( BETWEEN_EXPR infix_expression $id1 infix_expression $id2 infix_expression ) ;
    public final RParser.between_expression_return between_expression() throws RecognitionException {
        RParser.between_expression_return retval = new RParser.between_expression_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        Token id1=null;
        Token id2=null;
        RParser.infix_expression_return infix_expression853 = null;

        RParser.infix_expression_return infix_expression854 = null;

        RParser.infix_expression_return infix_expression855 = null;


        ColsAST id1_tree=null;
        ColsAST id2_tree=null;
        RewriteRuleTokenStream stream_LT_EQL=new RewriteRuleTokenStream(adaptor,"token LT_EQL");
        RewriteRuleTokenStream stream_LT=new RewriteRuleTokenStream(adaptor,"token LT");
        RewriteRuleSubtreeStream stream_infix_expression=new RewriteRuleSubtreeStream(adaptor,"rule infix_expression");
        try {
            // RParser.g:1708:5: ( infix_expression (id1= LT | id1= LT_EQL ) infix_expression (id2= LT | id2= LT_EQL ) infix_expression -> ^( BETWEEN_EXPR infix_expression $id1 infix_expression $id2 infix_expression ) )
            // RParser.g:1708:9: infix_expression (id1= LT | id1= LT_EQL ) infix_expression (id2= LT | id2= LT_EQL ) infix_expression
            {
            pushFollow(FOLLOW_infix_expression_in_between_expression11641);
            infix_expression853=infix_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_infix_expression.add(infix_expression853.getTree());
            // RParser.g:1709:13: (id1= LT | id1= LT_EQL )
            int alt229=2;
            int LA229_0 = input.LA(1);

            if ( (LA229_0==LT) ) {
                alt229=1;
            }
            else if ( (LA229_0==LT_EQL) ) {
                alt229=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 229, 0, input);

                throw nvae;
            }
            switch (alt229) {
                case 1 :
                    // RParser.g:1709:17: id1= LT
                    {
                    id1=(Token)match(input,LT,FOLLOW_LT_in_between_expression11661); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LT.add(id1);


                    }
                    break;
                case 2 :
                    // RParser.g:1710:17: id1= LT_EQL
                    {
                    id1=(Token)match(input,LT_EQL,FOLLOW_LT_EQL_in_between_expression11681); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LT_EQL.add(id1);


                    }
                    break;

            }

            pushFollow(FOLLOW_infix_expression_in_between_expression11705);
            infix_expression854=infix_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_infix_expression.add(infix_expression854.getTree());
            // RParser.g:1713:13: (id2= LT | id2= LT_EQL )
            int alt230=2;
            int LA230_0 = input.LA(1);

            if ( (LA230_0==LT) ) {
                alt230=1;
            }
            else if ( (LA230_0==LT_EQL) ) {
                alt230=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 230, 0, input);

                throw nvae;
            }
            switch (alt230) {
                case 1 :
                    // RParser.g:1713:17: id2= LT
                    {
                    id2=(Token)match(input,LT,FOLLOW_LT_in_between_expression11725); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LT.add(id2);


                    }
                    break;
                case 2 :
                    // RParser.g:1714:17: id2= LT_EQL
                    {
                    id2=(Token)match(input,LT_EQL,FOLLOW_LT_EQL_in_between_expression11745); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LT_EQL.add(id2);


                    }
                    break;

            }

            pushFollow(FOLLOW_infix_expression_in_between_expression11769);
            infix_expression855=infix_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_infix_expression.add(infix_expression855.getTree());


            // AST REWRITE
            // elements: id1, infix_expression, infix_expression, id2, infix_expression
            // token labels: id2, id1
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_id2=new RewriteRuleTokenStream(adaptor,"token id2",id2);
            RewriteRuleTokenStream stream_id1=new RewriteRuleTokenStream(adaptor,"token id1",id1);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (ColsAST)adaptor.nil();
            // 1717:9: -> ^( BETWEEN_EXPR infix_expression $id1 infix_expression $id2 infix_expression )
            {
                // RParser.g:1717:12: ^( BETWEEN_EXPR infix_expression $id1 infix_expression $id2 infix_expression )
                {
                ColsAST root_1 = (ColsAST)adaptor.nil();
                root_1 = (ColsAST)adaptor.becomeRoot((ColsAST)adaptor.create(BETWEEN_EXPR, "BETWEEN_EXPR"), root_1);

                adaptor.addChild(root_1, stream_infix_expression.nextTree());
                adaptor.addChild(root_1, stream_id1.nextNode());
                adaptor.addChild(root_1, stream_infix_expression.nextTree());
                adaptor.addChild(root_1, stream_id2.nextNode());
                adaptor.addChild(root_1, stream_infix_expression.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (ColsAST)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "between_expression"

    public static class infix_expression_return extends ParserRuleReturnScope {
        public ColsAST ast = null;
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "infix_expression"
    // RParser.g:1720:1: infix_expression returns [ColsAST ast = null] : ( ( function_type_expression ( ( RANGE | FREE_OPERATOR ) function_type_expression )? ) | BOOLEAN );
    public final RParser.infix_expression_return infix_expression() throws RecognitionException {
        RParser.infix_expression_return retval = new RParser.infix_expression_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        Token RANGE857=null;
        Token FREE_OPERATOR858=null;
        Token BOOLEAN860=null;
        RParser.function_type_expression_return function_type_expression856 = null;

        RParser.function_type_expression_return function_type_expression859 = null;


        ColsAST RANGE857_tree=null;
        ColsAST FREE_OPERATOR858_tree=null;
        ColsAST BOOLEAN860_tree=null;

        try {
            // RParser.g:1721:5: ( ( function_type_expression ( ( RANGE | FREE_OPERATOR ) function_type_expression )? ) | BOOLEAN )
            int alt233=2;
            alt233 = dfa233.predict(input);
            switch (alt233) {
                case 1 :
                    // RParser.g:1724:9: ( function_type_expression ( ( RANGE | FREE_OPERATOR ) function_type_expression )? )
                    {
                    root_0 = (ColsAST)adaptor.nil();

                    // RParser.g:1724:9: ( function_type_expression ( ( RANGE | FREE_OPERATOR ) function_type_expression )? )
                    // RParser.g:1724:10: function_type_expression ( ( RANGE | FREE_OPERATOR ) function_type_expression )?
                    {
                    pushFollow(FOLLOW_function_type_expression_in_infix_expression11849);
                    function_type_expression856=function_type_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, function_type_expression856.getTree());
                    // RParser.g:1725:9: ( ( RANGE | FREE_OPERATOR ) function_type_expression )?
                    int alt232=2;
                    int LA232_0 = input.LA(1);

                    if ( (LA232_0==RANGE||LA232_0==FREE_OPERATOR) ) {
                        alt232=1;
                    }
                    switch (alt232) {
                        case 1 :
                            // RParser.g:1725:13: ( RANGE | FREE_OPERATOR ) function_type_expression
                            {
                            // RParser.g:1725:13: ( RANGE | FREE_OPERATOR )
                            int alt231=2;
                            int LA231_0 = input.LA(1);

                            if ( (LA231_0==RANGE) ) {
                                alt231=1;
                            }
                            else if ( (LA231_0==FREE_OPERATOR) ) {
                                alt231=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 231, 0, input);

                                throw nvae;
                            }
                            switch (alt231) {
                                case 1 :
                                    // RParser.g:1725:17: RANGE
                                    {
                                    RANGE857=(Token)match(input,RANGE,FOLLOW_RANGE_in_infix_expression11867); if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                    RANGE857_tree = (ColsAST)adaptor.create(RANGE857);
                                    root_0 = (ColsAST)adaptor.becomeRoot(RANGE857_tree, root_0);
                                    }

                                    }
                                    break;
                                case 2 :
                                    // RParser.g:1726:17: FREE_OPERATOR
                                    {
                                    FREE_OPERATOR858=(Token)match(input,FREE_OPERATOR,FOLLOW_FREE_OPERATOR_in_infix_expression11886); if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                    FREE_OPERATOR858_tree = (ColsAST)adaptor.create(FREE_OPERATOR858);
                                    root_0 = (ColsAST)adaptor.becomeRoot(FREE_OPERATOR858_tree, root_0);
                                    }

                                    }
                                    break;

                            }

                            pushFollow(FOLLOW_function_type_expression_in_infix_expression11915);
                            function_type_expression859=function_type_expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, function_type_expression859.getTree());

                            }
                            break;

                    }


                    }


                    }
                    break;
                case 2 :
                    // RParser.g:1730:11: BOOLEAN
                    {
                    root_0 = (ColsAST)adaptor.nil();

                    BOOLEAN860=(Token)match(input,BOOLEAN,FOLLOW_BOOLEAN_in_infix_expression11939); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    BOOLEAN860_tree = (ColsAST)adaptor.create(BOOLEAN860);
                    adaptor.addChild(root_0, BOOLEAN860_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (ColsAST)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "infix_expression"

    public static class function_type_expression_return extends ParserRuleReturnScope {
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "function_type_expression"
    // RParser.g:1733:1: function_type_expression : adding_expression ( FUNCARROW adding_expression )* ;
    public final RParser.function_type_expression_return function_type_expression() throws RecognitionException {
        RParser.function_type_expression_return retval = new RParser.function_type_expression_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        Token FUNCARROW862=null;
        RParser.adding_expression_return adding_expression861 = null;

        RParser.adding_expression_return adding_expression863 = null;


        ColsAST FUNCARROW862_tree=null;

        try {
            // RParser.g:1734:5: ( adding_expression ( FUNCARROW adding_expression )* )
            // RParser.g:1734:8: adding_expression ( FUNCARROW adding_expression )*
            {
            root_0 = (ColsAST)adaptor.nil();

            pushFollow(FOLLOW_adding_expression_in_function_type_expression11961);
            adding_expression861=adding_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, adding_expression861.getTree());
            // RParser.g:1734:26: ( FUNCARROW adding_expression )*
            loop234:
            do {
                int alt234=2;
                int LA234_0 = input.LA(1);

                if ( (LA234_0==FUNCARROW) ) {
                    alt234=1;
                }


                switch (alt234) {
            	case 1 :
            	    // RParser.g:1734:27: FUNCARROW adding_expression
            	    {
            	    FUNCARROW862=(Token)match(input,FUNCARROW,FOLLOW_FUNCARROW_in_function_type_expression11964); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    FUNCARROW862_tree = (ColsAST)adaptor.create(FUNCARROW862);
            	    root_0 = (ColsAST)adaptor.becomeRoot(FUNCARROW862_tree, root_0);
            	    }
            	    pushFollow(FOLLOW_adding_expression_in_function_type_expression11967);
            	    adding_expression863=adding_expression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, adding_expression863.getTree());

            	    }
            	    break;

            	default :
            	    break loop234;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (ColsAST)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "function_type_expression"

    public static class adding_expression_return extends ParserRuleReturnScope {
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "adding_expression"
    // RParser.g:1736:1: adding_expression : multiplying_expression ( ( PLUS | MINUS | CAT | UNION | INTERSECT | WITHOUT ) multiplying_expression )* ;
    public final RParser.adding_expression_return adding_expression() throws RecognitionException {
        RParser.adding_expression_return retval = new RParser.adding_expression_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        Token PLUS865=null;
        Token MINUS866=null;
        Token CAT867=null;
        Token UNION868=null;
        Token INTERSECT869=null;
        Token WITHOUT870=null;
        RParser.multiplying_expression_return multiplying_expression864 = null;

        RParser.multiplying_expression_return multiplying_expression871 = null;


        ColsAST PLUS865_tree=null;
        ColsAST MINUS866_tree=null;
        ColsAST CAT867_tree=null;
        ColsAST UNION868_tree=null;
        ColsAST INTERSECT869_tree=null;
        ColsAST WITHOUT870_tree=null;

        try {
            // RParser.g:1737:5: ( multiplying_expression ( ( PLUS | MINUS | CAT | UNION | INTERSECT | WITHOUT ) multiplying_expression )* )
            // RParser.g:1737:9: multiplying_expression ( ( PLUS | MINUS | CAT | UNION | INTERSECT | WITHOUT ) multiplying_expression )*
            {
            root_0 = (ColsAST)adaptor.nil();

            pushFollow(FOLLOW_multiplying_expression_in_adding_expression11983);
            multiplying_expression864=multiplying_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, multiplying_expression864.getTree());
            // RParser.g:1738:9: ( ( PLUS | MINUS | CAT | UNION | INTERSECT | WITHOUT ) multiplying_expression )*
            loop236:
            do {
                int alt236=2;
                int LA236_0 = input.LA(1);

                if ( (LA236_0==INTERSECT||LA236_0==CAT||LA236_0==UNION||LA236_0==WITHOUT||(LA236_0>=PLUS && LA236_0<=MINUS)) ) {
                    alt236=1;
                }


                switch (alt236) {
            	case 1 :
            	    // RParser.g:1738:13: ( PLUS | MINUS | CAT | UNION | INTERSECT | WITHOUT ) multiplying_expression
            	    {
            	    // RParser.g:1738:13: ( PLUS | MINUS | CAT | UNION | INTERSECT | WITHOUT )
            	    int alt235=6;
            	    switch ( input.LA(1) ) {
            	    case PLUS:
            	        {
            	        alt235=1;
            	        }
            	        break;
            	    case MINUS:
            	        {
            	        alt235=2;
            	        }
            	        break;
            	    case CAT:
            	        {
            	        alt235=3;
            	        }
            	        break;
            	    case UNION:
            	        {
            	        alt235=4;
            	        }
            	        break;
            	    case INTERSECT:
            	        {
            	        alt235=5;
            	        }
            	        break;
            	    case WITHOUT:
            	        {
            	        alt235=6;
            	        }
            	        break;
            	    default:
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 235, 0, input);

            	        throw nvae;
            	    }

            	    switch (alt235) {
            	        case 1 :
            	            // RParser.g:1738:17: PLUS
            	            {
            	            PLUS865=(Token)match(input,PLUS,FOLLOW_PLUS_in_adding_expression12001); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            PLUS865_tree = (ColsAST)adaptor.create(PLUS865);
            	            root_0 = (ColsAST)adaptor.becomeRoot(PLUS865_tree, root_0);
            	            }

            	            }
            	            break;
            	        case 2 :
            	            // RParser.g:1739:17: MINUS
            	            {
            	            MINUS866=(Token)match(input,MINUS,FOLLOW_MINUS_in_adding_expression12020); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            MINUS866_tree = (ColsAST)adaptor.create(MINUS866);
            	            root_0 = (ColsAST)adaptor.becomeRoot(MINUS866_tree, root_0);
            	            }

            	            }
            	            break;
            	        case 3 :
            	            // RParser.g:1740:17: CAT
            	            {
            	            CAT867=(Token)match(input,CAT,FOLLOW_CAT_in_adding_expression12039); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            CAT867_tree = (ColsAST)adaptor.create(CAT867);
            	            root_0 = (ColsAST)adaptor.becomeRoot(CAT867_tree, root_0);
            	            }

            	            }
            	            break;
            	        case 4 :
            	            // RParser.g:1741:17: UNION
            	            {
            	            UNION868=(Token)match(input,UNION,FOLLOW_UNION_in_adding_expression12058); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            UNION868_tree = (ColsAST)adaptor.create(UNION868);
            	            root_0 = (ColsAST)adaptor.becomeRoot(UNION868_tree, root_0);
            	            }

            	            }
            	            break;
            	        case 5 :
            	            // RParser.g:1742:17: INTERSECT
            	            {
            	            INTERSECT869=(Token)match(input,INTERSECT,FOLLOW_INTERSECT_in_adding_expression12077); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            INTERSECT869_tree = (ColsAST)adaptor.create(INTERSECT869);
            	            root_0 = (ColsAST)adaptor.becomeRoot(INTERSECT869_tree, root_0);
            	            }

            	            }
            	            break;
            	        case 6 :
            	            // RParser.g:1743:17: WITHOUT
            	            {
            	            WITHOUT870=(Token)match(input,WITHOUT,FOLLOW_WITHOUT_in_adding_expression12096); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            WITHOUT870_tree = (ColsAST)adaptor.create(WITHOUT870);
            	            root_0 = (ColsAST)adaptor.becomeRoot(WITHOUT870_tree, root_0);
            	            }

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_multiplying_expression_in_adding_expression12125);
            	    multiplying_expression871=multiplying_expression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, multiplying_expression871.getTree());

            	    }
            	    break;

            	default :
            	    break loop236;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (ColsAST)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "adding_expression"

    public static class multiplying_expression_return extends ParserRuleReturnScope {
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "multiplying_expression"
    // RParser.g:1749:1: multiplying_expression : exponential_expression ( ( MULTIPLY | DIVIDE | MOD | REM | DIV ) exponential_expression )* ;
    public final RParser.multiplying_expression_return multiplying_expression() throws RecognitionException {
        RParser.multiplying_expression_return retval = new RParser.multiplying_expression_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        Token MULTIPLY873=null;
        Token DIVIDE874=null;
        Token MOD875=null;
        Token REM876=null;
        Token DIV877=null;
        RParser.exponential_expression_return exponential_expression872 = null;

        RParser.exponential_expression_return exponential_expression878 = null;


        ColsAST MULTIPLY873_tree=null;
        ColsAST DIVIDE874_tree=null;
        ColsAST MOD875_tree=null;
        ColsAST REM876_tree=null;
        ColsAST DIV877_tree=null;

        try {
            // RParser.g:1750:5: ( exponential_expression ( ( MULTIPLY | DIVIDE | MOD | REM | DIV ) exponential_expression )* )
            // RParser.g:1750:9: exponential_expression ( ( MULTIPLY | DIVIDE | MOD | REM | DIV ) exponential_expression )*
            {
            root_0 = (ColsAST)adaptor.nil();

            pushFollow(FOLLOW_exponential_expression_in_multiplying_expression12155);
            exponential_expression872=exponential_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, exponential_expression872.getTree());
            // RParser.g:1751:9: ( ( MULTIPLY | DIVIDE | MOD | REM | DIV ) exponential_expression )*
            loop238:
            do {
                int alt238=2;
                int LA238_0 = input.LA(1);

                if ( (LA238_0==DIV||LA238_0==MOD||LA238_0==REM||(LA238_0>=MULTIPLY && LA238_0<=DIVIDE)) ) {
                    alt238=1;
                }


                switch (alt238) {
            	case 1 :
            	    // RParser.g:1751:13: ( MULTIPLY | DIVIDE | MOD | REM | DIV ) exponential_expression
            	    {
            	    // RParser.g:1751:13: ( MULTIPLY | DIVIDE | MOD | REM | DIV )
            	    int alt237=5;
            	    switch ( input.LA(1) ) {
            	    case MULTIPLY:
            	        {
            	        alt237=1;
            	        }
            	        break;
            	    case DIVIDE:
            	        {
            	        alt237=2;
            	        }
            	        break;
            	    case MOD:
            	        {
            	        alt237=3;
            	        }
            	        break;
            	    case REM:
            	        {
            	        alt237=4;
            	        }
            	        break;
            	    case DIV:
            	        {
            	        alt237=5;
            	        }
            	        break;
            	    default:
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 237, 0, input);

            	        throw nvae;
            	    }

            	    switch (alt237) {
            	        case 1 :
            	            // RParser.g:1751:17: MULTIPLY
            	            {
            	            MULTIPLY873=(Token)match(input,MULTIPLY,FOLLOW_MULTIPLY_in_multiplying_expression12173); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            MULTIPLY873_tree = (ColsAST)adaptor.create(MULTIPLY873);
            	            root_0 = (ColsAST)adaptor.becomeRoot(MULTIPLY873_tree, root_0);
            	            }

            	            }
            	            break;
            	        case 2 :
            	            // RParser.g:1752:17: DIVIDE
            	            {
            	            DIVIDE874=(Token)match(input,DIVIDE,FOLLOW_DIVIDE_in_multiplying_expression12193); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            DIVIDE874_tree = (ColsAST)adaptor.create(DIVIDE874);
            	            root_0 = (ColsAST)adaptor.becomeRoot(DIVIDE874_tree, root_0);
            	            }

            	            }
            	            break;
            	        case 3 :
            	            // RParser.g:1753:17: MOD
            	            {
            	            MOD875=(Token)match(input,MOD,FOLLOW_MOD_in_multiplying_expression12212); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            MOD875_tree = (ColsAST)adaptor.create(MOD875);
            	            root_0 = (ColsAST)adaptor.becomeRoot(MOD875_tree, root_0);
            	            }

            	            }
            	            break;
            	        case 4 :
            	            // RParser.g:1754:17: REM
            	            {
            	            REM876=(Token)match(input,REM,FOLLOW_REM_in_multiplying_expression12231); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            REM876_tree = (ColsAST)adaptor.create(REM876);
            	            root_0 = (ColsAST)adaptor.becomeRoot(REM876_tree, root_0);
            	            }

            	            }
            	            break;
            	        case 5 :
            	            // RParser.g:1755:17: DIV
            	            {
            	            DIV877=(Token)match(input,DIV,FOLLOW_DIV_in_multiplying_expression12250); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            DIV877_tree = (ColsAST)adaptor.create(DIV877);
            	            root_0 = (ColsAST)adaptor.becomeRoot(DIV877_tree, root_0);
            	            }

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_exponential_expression_in_multiplying_expression12279);
            	    exponential_expression878=exponential_expression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, exponential_expression878.getTree());

            	    }
            	    break;

            	default :
            	    break loop238;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (ColsAST)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "multiplying_expression"

    public static class exponential_expression_return extends ParserRuleReturnScope {
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "exponential_expression"
    // RParser.g:1761:1: exponential_expression : prefix_expression ( EXP exponential_expression )? ;
    public final RParser.exponential_expression_return exponential_expression() throws RecognitionException {
        RParser.exponential_expression_return retval = new RParser.exponential_expression_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        Token EXP880=null;
        RParser.prefix_expression_return prefix_expression879 = null;

        RParser.exponential_expression_return exponential_expression881 = null;


        ColsAST EXP880_tree=null;

        try {
            // RParser.g:1762:5: ( prefix_expression ( EXP exponential_expression )? )
            // RParser.g:1762:9: prefix_expression ( EXP exponential_expression )?
            {
            root_0 = (ColsAST)adaptor.nil();

            pushFollow(FOLLOW_prefix_expression_in_exponential_expression12309);
            prefix_expression879=prefix_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, prefix_expression879.getTree());
            // RParser.g:1763:9: ( EXP exponential_expression )?
            int alt239=2;
            int LA239_0 = input.LA(1);

            if ( (LA239_0==EXP) ) {
                alt239=1;
            }
            switch (alt239) {
                case 1 :
                    // RParser.g:1763:10: EXP exponential_expression
                    {
                    EXP880=(Token)match(input,EXP,FOLLOW_EXP_in_exponential_expression12320); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    EXP880_tree = (ColsAST)adaptor.create(EXP880);
                    root_0 = (ColsAST)adaptor.becomeRoot(EXP880_tree, root_0);
                    }
                    pushFollow(FOLLOW_exponential_expression_in_exponential_expression12323);
                    exponential_expression881=exponential_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, exponential_expression881.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (ColsAST)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "exponential_expression"

    public static class prefix_expression_return extends ParserRuleReturnScope {
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prefix_expression"
    // RParser.g:1766:1: prefix_expression : ( unary_expression | FREE_OPERATOR prefix_expression );
    public final RParser.prefix_expression_return prefix_expression() throws RecognitionException {
        RParser.prefix_expression_return retval = new RParser.prefix_expression_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        Token FREE_OPERATOR883=null;
        RParser.unary_expression_return unary_expression882 = null;

        RParser.prefix_expression_return prefix_expression884 = null;


        ColsAST FREE_OPERATOR883_tree=null;

        try {
            // RParser.g:1767:5: ( unary_expression | FREE_OPERATOR prefix_expression )
            int alt240=2;
            alt240 = dfa240.predict(input);
            switch (alt240) {
                case 1 :
                    // RParser.g:1767:9: unary_expression
                    {
                    root_0 = (ColsAST)adaptor.nil();

                    pushFollow(FOLLOW_unary_expression_in_prefix_expression12344);
                    unary_expression882=unary_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, unary_expression882.getTree());

                    }
                    break;
                case 2 :
                    // RParser.g:1768:9: FREE_OPERATOR prefix_expression
                    {
                    root_0 = (ColsAST)adaptor.nil();

                    FREE_OPERATOR883=(Token)match(input,FREE_OPERATOR,FOLLOW_FREE_OPERATOR_in_prefix_expression12354); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    FREE_OPERATOR883_tree = (ColsAST)adaptor.create(FREE_OPERATOR883);
                    root_0 = (ColsAST)adaptor.becomeRoot(FREE_OPERATOR883_tree, root_0);
                    }
                    if ( state.backtracking==0 ) {
                       FREE_OPERATOR883.setType(UNARY_FREE_OP); 
                    }
                    pushFollow(FOLLOW_prefix_expression_in_prefix_expression12367);
                    prefix_expression884=prefix_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, prefix_expression884.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (ColsAST)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "prefix_expression"

    public static class unary_expression_return extends ParserRuleReturnScope {
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unary_expression"
    // RParser.g:1772:1: unary_expression : ( primitive_expression | NOT unary_expression | COMPLEMENT unary_expression | MINUS unary_expression );
    public final RParser.unary_expression_return unary_expression() throws RecognitionException {
        RParser.unary_expression_return retval = new RParser.unary_expression_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        Token NOT886=null;
        Token COMPLEMENT888=null;
        Token MINUS890=null;
        RParser.primitive_expression_return primitive_expression885 = null;

        RParser.unary_expression_return unary_expression887 = null;

        RParser.unary_expression_return unary_expression889 = null;

        RParser.unary_expression_return unary_expression891 = null;


        ColsAST NOT886_tree=null;
        ColsAST COMPLEMENT888_tree=null;
        ColsAST MINUS890_tree=null;

        try {
            // RParser.g:1773:5: ( primitive_expression | NOT unary_expression | COMPLEMENT unary_expression | MINUS unary_expression )
            int alt241=4;
            alt241 = dfa241.predict(input);
            switch (alt241) {
                case 1 :
                    // RParser.g:1773:9: primitive_expression
                    {
                    root_0 = (ColsAST)adaptor.nil();

                    pushFollow(FOLLOW_primitive_expression_in_unary_expression12386);
                    primitive_expression885=primitive_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, primitive_expression885.getTree());

                    }
                    break;
                case 2 :
                    // RParser.g:1774:9: NOT unary_expression
                    {
                    root_0 = (ColsAST)adaptor.nil();

                    NOT886=(Token)match(input,NOT,FOLLOW_NOT_in_unary_expression12396); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NOT886_tree = (ColsAST)adaptor.create(NOT886);
                    root_0 = (ColsAST)adaptor.becomeRoot(NOT886_tree, root_0);
                    }
                    pushFollow(FOLLOW_unary_expression_in_unary_expression12399);
                    unary_expression887=unary_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, unary_expression887.getTree());

                    }
                    break;
                case 3 :
                    // RParser.g:1775:9: COMPLEMENT unary_expression
                    {
                    root_0 = (ColsAST)adaptor.nil();

                    COMPLEMENT888=(Token)match(input,COMPLEMENT,FOLLOW_COMPLEMENT_in_unary_expression12409); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COMPLEMENT888_tree = (ColsAST)adaptor.create(COMPLEMENT888);
                    root_0 = (ColsAST)adaptor.becomeRoot(COMPLEMENT888_tree, root_0);
                    }
                    pushFollow(FOLLOW_unary_expression_in_unary_expression12412);
                    unary_expression889=unary_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, unary_expression889.getTree());

                    }
                    break;
                case 4 :
                    // RParser.g:1776:9: MINUS unary_expression
                    {
                    root_0 = (ColsAST)adaptor.nil();

                    MINUS890=(Token)match(input,MINUS,FOLLOW_MINUS_in_unary_expression12422); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MINUS890_tree = (ColsAST)adaptor.create(MINUS890);
                    root_0 = (ColsAST)adaptor.becomeRoot(MINUS890_tree, root_0);
                    }
                    if ( state.backtracking==0 ) {
                       MINUS890.setType(UNARY_MINUS); 
                    }
                    pushFollow(FOLLOW_unary_expression_in_unary_expression12427);
                    unary_expression891=unary_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, unary_expression891.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (ColsAST)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "unary_expression"

    public static class primitive_expression_return extends ParserRuleReturnScope {
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "primitive_expression"
    // RParser.g:1779:1: primitive_expression : ( alternative_expression | ( ident ident COLON )=> iterated_construct | ( ident DOT NUMERIC_LITERAL )=> qualified_numeric_literal | dot_expression | lambda_expression | literal_expression | outfix_expression | set_constructor | ( LPAREN math_expression COMMA )=> tuple_expression | tagged_cartesian_product_type_expression | nested_expression );
    public final RParser.primitive_expression_return primitive_expression() throws RecognitionException {
        RParser.primitive_expression_return retval = new RParser.primitive_expression_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        RParser.alternative_expression_return alternative_expression892 = null;

        RParser.iterated_construct_return iterated_construct893 = null;

        RParser.qualified_numeric_literal_return qualified_numeric_literal894 = null;

        RParser.dot_expression_return dot_expression895 = null;

        RParser.lambda_expression_return lambda_expression896 = null;

        RParser.literal_expression_return literal_expression897 = null;

        RParser.outfix_expression_return outfix_expression898 = null;

        RParser.set_constructor_return set_constructor899 = null;

        RParser.tuple_expression_return tuple_expression900 = null;

        RParser.tagged_cartesian_product_type_expression_return tagged_cartesian_product_type_expression901 = null;

        RParser.nested_expression_return nested_expression902 = null;



        try {
            // RParser.g:1780:5: ( alternative_expression | ( ident ident COLON )=> iterated_construct | ( ident DOT NUMERIC_LITERAL )=> qualified_numeric_literal | dot_expression | lambda_expression | literal_expression | outfix_expression | set_constructor | ( LPAREN math_expression COMMA )=> tuple_expression | tagged_cartesian_product_type_expression | nested_expression )
            int alt242=11;
            alt242 = dfa242.predict(input);
            switch (alt242) {
                case 1 :
                    // RParser.g:1780:9: alternative_expression
                    {
                    root_0 = (ColsAST)adaptor.nil();

                    pushFollow(FOLLOW_alternative_expression_in_primitive_expression12446);
                    alternative_expression892=alternative_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, alternative_expression892.getTree());

                    }
                    break;
                case 2 :
                    // RParser.g:1781:9: ( ident ident COLON )=> iterated_construct
                    {
                    root_0 = (ColsAST)adaptor.nil();

                    pushFollow(FOLLOW_iterated_construct_in_primitive_expression12466);
                    iterated_construct893=iterated_construct();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, iterated_construct893.getTree());

                    }
                    break;
                case 3 :
                    // RParser.g:1782:9: ( ident DOT NUMERIC_LITERAL )=> qualified_numeric_literal
                    {
                    root_0 = (ColsAST)adaptor.nil();

                    pushFollow(FOLLOW_qualified_numeric_literal_in_primitive_expression12486);
                    qualified_numeric_literal894=qualified_numeric_literal();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, qualified_numeric_literal894.getTree());

                    }
                    break;
                case 4 :
                    // RParser.g:1783:9: dot_expression
                    {
                    root_0 = (ColsAST)adaptor.nil();

                    pushFollow(FOLLOW_dot_expression_in_primitive_expression12496);
                    dot_expression895=dot_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dot_expression895.getTree());

                    }
                    break;
                case 5 :
                    // RParser.g:1784:9: lambda_expression
                    {
                    root_0 = (ColsAST)adaptor.nil();

                    pushFollow(FOLLOW_lambda_expression_in_primitive_expression12506);
                    lambda_expression896=lambda_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lambda_expression896.getTree());

                    }
                    break;
                case 6 :
                    // RParser.g:1785:9: literal_expression
                    {
                    root_0 = (ColsAST)adaptor.nil();

                    pushFollow(FOLLOW_literal_expression_in_primitive_expression12516);
                    literal_expression897=literal_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, literal_expression897.getTree());

                    }
                    break;
                case 7 :
                    // RParser.g:1786:9: outfix_expression
                    {
                    root_0 = (ColsAST)adaptor.nil();

                    pushFollow(FOLLOW_outfix_expression_in_primitive_expression12526);
                    outfix_expression898=outfix_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, outfix_expression898.getTree());

                    }
                    break;
                case 8 :
                    // RParser.g:1787:9: set_constructor
                    {
                    root_0 = (ColsAST)adaptor.nil();

                    pushFollow(FOLLOW_set_constructor_in_primitive_expression12536);
                    set_constructor899=set_constructor();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, set_constructor899.getTree());

                    }
                    break;
                case 9 :
                    // RParser.g:1788:9: ( LPAREN math_expression COMMA )=> tuple_expression
                    {
                    root_0 = (ColsAST)adaptor.nil();

                    pushFollow(FOLLOW_tuple_expression_in_primitive_expression12556);
                    tuple_expression900=tuple_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, tuple_expression900.getTree());

                    }
                    break;
                case 10 :
                    // RParser.g:1789:9: tagged_cartesian_product_type_expression
                    {
                    root_0 = (ColsAST)adaptor.nil();

                    pushFollow(FOLLOW_tagged_cartesian_product_type_expression_in_primitive_expression12566);
                    tagged_cartesian_product_type_expression901=tagged_cartesian_product_type_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, tagged_cartesian_product_type_expression901.getTree());

                    }
                    break;
                case 11 :
                    // RParser.g:1790:9: nested_expression
                    {
                    root_0 = (ColsAST)adaptor.nil();

                    pushFollow(FOLLOW_nested_expression_in_primitive_expression12576);
                    nested_expression902=nested_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nested_expression902.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (ColsAST)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "primitive_expression"

    public static class tagged_cartesian_product_type_expression_return extends ParserRuleReturnScope {
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "tagged_cartesian_product_type_expression"
    // RParser.g:1793:1: tagged_cartesian_product_type_expression : CARTPROD ( cartprod_variable_declaration_group SEMICOLON )+ END ;
    public final RParser.tagged_cartesian_product_type_expression_return tagged_cartesian_product_type_expression() throws RecognitionException {
        RParser.tagged_cartesian_product_type_expression_return retval = new RParser.tagged_cartesian_product_type_expression_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        Token CARTPROD903=null;
        Token SEMICOLON905=null;
        Token END906=null;
        RParser.cartprod_variable_declaration_group_return cartprod_variable_declaration_group904 = null;


        ColsAST CARTPROD903_tree=null;
        ColsAST SEMICOLON905_tree=null;
        ColsAST END906_tree=null;

        try {
            // RParser.g:1794:5: ( CARTPROD ( cartprod_variable_declaration_group SEMICOLON )+ END )
            // RParser.g:1794:9: CARTPROD ( cartprod_variable_declaration_group SEMICOLON )+ END
            {
            root_0 = (ColsAST)adaptor.nil();

            CARTPROD903=(Token)match(input,CARTPROD,FOLLOW_CARTPROD_in_tagged_cartesian_product_type_expression12599); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            CARTPROD903_tree = (ColsAST)adaptor.create(CARTPROD903);
            root_0 = (ColsAST)adaptor.becomeRoot(CARTPROD903_tree, root_0);
            }
            // RParser.g:1795:9: ( cartprod_variable_declaration_group SEMICOLON )+
            int cnt243=0;
            loop243:
            do {
                int alt243=2;
                int LA243_0 = input.LA(1);

                if ( (LA243_0==IDENTIFIER) ) {
                    alt243=1;
                }


                switch (alt243) {
            	case 1 :
            	    // RParser.g:1795:10: cartprod_variable_declaration_group SEMICOLON
            	    {
            	    pushFollow(FOLLOW_cartprod_variable_declaration_group_in_tagged_cartesian_product_type_expression12611);
            	    cartprod_variable_declaration_group904=cartprod_variable_declaration_group();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, cartprod_variable_declaration_group904.getTree());
            	    SEMICOLON905=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_tagged_cartesian_product_type_expression12613); if (state.failed) return retval;

            	    }
            	    break;

            	default :
            	    if ( cnt243 >= 1 ) break loop243;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(243, input);
                        throw eee;
                }
                cnt243++;
            } while (true);

            END906=(Token)match(input,END,FOLLOW_END_in_tagged_cartesian_product_type_expression12626); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (ColsAST)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "tagged_cartesian_product_type_expression"

    public static class dot_expression_return extends ParserRuleReturnScope {
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "dot_expression"
    // RParser.g:1802:1: dot_expression : ( ( function_expression DOT )=> function_expression ( DOT clean_function_expression )* -> ^( DOT function_expression ( clean_function_expression )* ) | function_expression );
    public final RParser.dot_expression_return dot_expression() throws RecognitionException {
        RParser.dot_expression_return retval = new RParser.dot_expression_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        Token DOT908=null;
        RParser.function_expression_return function_expression907 = null;

        RParser.clean_function_expression_return clean_function_expression909 = null;

        RParser.function_expression_return function_expression910 = null;


        ColsAST DOT908_tree=null;
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleSubtreeStream stream_function_expression=new RewriteRuleSubtreeStream(adaptor,"rule function_expression");
        RewriteRuleSubtreeStream stream_clean_function_expression=new RewriteRuleSubtreeStream(adaptor,"rule clean_function_expression");
        try {
            // RParser.g:1803:5: ( ( function_expression DOT )=> function_expression ( DOT clean_function_expression )* -> ^( DOT function_expression ( clean_function_expression )* ) | function_expression )
            int alt245=2;
            int LA245_0 = input.LA(1);

            if ( (LA245_0==HASH) ) {
                int LA245_1 = input.LA(2);

                if ( (synpred19_RParser()) ) {
                    alt245=1;
                }
                else if ( (true) ) {
                    alt245=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 245, 1, input);

                    throw nvae;
                }
            }
            else if ( (LA245_0==IDENTIFIER) ) {
                int LA245_2 = input.LA(2);

                if ( (synpred19_RParser()) ) {
                    alt245=1;
                }
                else if ( (true) ) {
                    alt245=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 245, 2, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 245, 0, input);

                throw nvae;
            }
            switch (alt245) {
                case 1 :
                    // RParser.g:1803:9: ( function_expression DOT )=> function_expression ( DOT clean_function_expression )*
                    {
                    pushFollow(FOLLOW_function_expression_in_dot_expression12661);
                    function_expression907=function_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_function_expression.add(function_expression907.getTree());
                    // RParser.g:1804:29: ( DOT clean_function_expression )*
                    loop244:
                    do {
                        int alt244=2;
                        int LA244_0 = input.LA(1);

                        if ( (LA244_0==DOT) ) {
                            alt244=1;
                        }


                        switch (alt244) {
                    	case 1 :
                    	    // RParser.g:1804:30: DOT clean_function_expression
                    	    {
                    	    DOT908=(Token)match(input,DOT,FOLLOW_DOT_in_dot_expression12664); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_DOT.add(DOT908);

                    	    pushFollow(FOLLOW_clean_function_expression_in_dot_expression12666);
                    	    clean_function_expression909=clean_function_expression();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_clean_function_expression.add(clean_function_expression909.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop244;
                        }
                    } while (true);



                    // AST REWRITE
                    // elements: function_expression, DOT, clean_function_expression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (ColsAST)adaptor.nil();
                    // 1805:13: -> ^( DOT function_expression ( clean_function_expression )* )
                    {
                        // RParser.g:1805:16: ^( DOT function_expression ( clean_function_expression )* )
                        {
                        ColsAST root_1 = (ColsAST)adaptor.nil();
                        root_1 = (ColsAST)adaptor.becomeRoot(stream_DOT.nextNode(), root_1);

                        adaptor.addChild(root_1, stream_function_expression.nextTree());
                        // RParser.g:1805:42: ( clean_function_expression )*
                        while ( stream_clean_function_expression.hasNext() ) {
                            adaptor.addChild(root_1, stream_clean_function_expression.nextTree());

                        }
                        stream_clean_function_expression.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // RParser.g:1806:9: function_expression
                    {
                    root_0 = (ColsAST)adaptor.nil();

                    pushFollow(FOLLOW_function_expression_in_dot_expression12701);
                    function_expression910=function_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, function_expression910.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (ColsAST)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "dot_expression"

    public static class function_expression_return extends ParserRuleReturnScope {
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "function_expression"
    // RParser.g:1809:1: function_expression : ( HASH clean_function_expression | clean_function_expression );
    public final RParser.function_expression_return function_expression() throws RecognitionException {
        RParser.function_expression_return retval = new RParser.function_expression_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        Token HASH911=null;
        RParser.clean_function_expression_return clean_function_expression912 = null;

        RParser.clean_function_expression_return clean_function_expression913 = null;


        ColsAST HASH911_tree=null;

        try {
            // RParser.g:1810:5: ( HASH clean_function_expression | clean_function_expression )
            int alt246=2;
            int LA246_0 = input.LA(1);

            if ( (LA246_0==HASH) ) {
                alt246=1;
            }
            else if ( (LA246_0==IDENTIFIER) ) {
                alt246=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 246, 0, input);

                throw nvae;
            }
            switch (alt246) {
                case 1 :
                    // RParser.g:1810:9: HASH clean_function_expression
                    {
                    root_0 = (ColsAST)adaptor.nil();

                    HASH911=(Token)match(input,HASH,FOLLOW_HASH_in_function_expression12720); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    HASH911_tree = (ColsAST)adaptor.create(HASH911);
                    root_0 = (ColsAST)adaptor.becomeRoot(HASH911_tree, root_0);
                    }
                    pushFollow(FOLLOW_clean_function_expression_in_function_expression12723);
                    clean_function_expression912=clean_function_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, clean_function_expression912.getTree());

                    }
                    break;
                case 2 :
                    // RParser.g:1811:9: clean_function_expression
                    {
                    root_0 = (ColsAST)adaptor.nil();

                    pushFollow(FOLLOW_clean_function_expression_in_function_expression12733);
                    clean_function_expression913=clean_function_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, clean_function_expression913.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (ColsAST)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "function_expression"

    public static class clean_function_expression_return extends ParserRuleReturnScope {
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "clean_function_expression"
    // RParser.g:1814:1: clean_function_expression : ( ( ident ( hat_expression )? ( function_argument_list )+ )=> ident ( hat_expression )? ( function_argument_list )+ -> ^( FUNCTION ident ( hat_expression )? ( function_argument_list )+ ) | ident );
    public final RParser.clean_function_expression_return clean_function_expression() throws RecognitionException {
        RParser.clean_function_expression_return retval = new RParser.clean_function_expression_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        RParser.ident_return ident914 = null;

        RParser.hat_expression_return hat_expression915 = null;

        RParser.function_argument_list_return function_argument_list916 = null;

        RParser.ident_return ident917 = null;


        RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
        RewriteRuleSubtreeStream stream_hat_expression=new RewriteRuleSubtreeStream(adaptor,"rule hat_expression");
        RewriteRuleSubtreeStream stream_function_argument_list=new RewriteRuleSubtreeStream(adaptor,"rule function_argument_list");
        try {
            // RParser.g:1815:5: ( ( ident ( hat_expression )? ( function_argument_list )+ )=> ident ( hat_expression )? ( function_argument_list )+ -> ^( FUNCTION ident ( hat_expression )? ( function_argument_list )+ ) | ident )
            int alt249=2;
            int LA249_0 = input.LA(1);

            if ( (LA249_0==IDENTIFIER) ) {
                int LA249_1 = input.LA(2);

                if ( (synpred20_RParser()) ) {
                    alt249=1;
                }
                else if ( (true) ) {
                    alt249=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 249, 1, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 249, 0, input);

                throw nvae;
            }
            switch (alt249) {
                case 1 :
                    // RParser.g:1815:9: ( ident ( hat_expression )? ( function_argument_list )+ )=> ident ( hat_expression )? ( function_argument_list )+
                    {
                    pushFollow(FOLLOW_ident_in_clean_function_expression12763);
                    ident914=ident();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_ident.add(ident914.getTree());
                    // RParser.g:1815:65: ( hat_expression )?
                    int alt247=2;
                    int LA247_0 = input.LA(1);

                    if ( (LA247_0==CARAT) ) {
                        alt247=1;
                    }
                    switch (alt247) {
                        case 1 :
                            // RParser.g:1815:65: hat_expression
                            {
                            pushFollow(FOLLOW_hat_expression_in_clean_function_expression12765);
                            hat_expression915=hat_expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_hat_expression.add(hat_expression915.getTree());

                            }
                            break;

                    }

                    // RParser.g:1815:81: ( function_argument_list )+
                    int cnt248=0;
                    loop248:
                    do {
                        int alt248=2;
                        int LA248_0 = input.LA(1);

                        if ( (LA248_0==LPAREN) ) {
                            alt248=1;
                        }


                        switch (alt248) {
                    	case 1 :
                    	    // RParser.g:1815:81: function_argument_list
                    	    {
                    	    pushFollow(FOLLOW_function_argument_list_in_clean_function_expression12768);
                    	    function_argument_list916=function_argument_list();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_function_argument_list.add(function_argument_list916.getTree());

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt248 >= 1 ) break loop248;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(248, input);
                                throw eee;
                        }
                        cnt248++;
                    } while (true);



                    // AST REWRITE
                    // elements: function_argument_list, hat_expression, ident
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (ColsAST)adaptor.nil();
                    // 1815:105: -> ^( FUNCTION ident ( hat_expression )? ( function_argument_list )+ )
                    {
                        // RParser.g:1816:9: ^( FUNCTION ident ( hat_expression )? ( function_argument_list )+ )
                        {
                        ColsAST root_1 = (ColsAST)adaptor.nil();
                        root_1 = (ColsAST)adaptor.becomeRoot((ColsAST)adaptor.create(FUNCTION, "FUNCTION"), root_1);

                        adaptor.addChild(root_1, stream_ident.nextTree());
                        // RParser.g:1816:26: ( hat_expression )?
                        if ( stream_hat_expression.hasNext() ) {
                            adaptor.addChild(root_1, stream_hat_expression.nextTree());

                        }
                        stream_hat_expression.reset();
                        if ( !(stream_function_argument_list.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_function_argument_list.hasNext() ) {
                            adaptor.addChild(root_1, stream_function_argument_list.nextTree());

                        }
                        stream_function_argument_list.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // RParser.g:1817:9: ident
                    {
                    root_0 = (ColsAST)adaptor.nil();

                    pushFollow(FOLLOW_ident_in_clean_function_expression12801);
                    ident917=ident();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, ident917.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (ColsAST)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "clean_function_expression"

    public static class hat_expression_return extends ParserRuleReturnScope {
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "hat_expression"
    // RParser.g:1825:1: hat_expression : CARAT ( qualified_ident | nested_expression ) ;
    public final RParser.hat_expression_return hat_expression() throws RecognitionException {
        RParser.hat_expression_return retval = new RParser.hat_expression_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        Token CARAT918=null;
        RParser.qualified_ident_return qualified_ident919 = null;

        RParser.nested_expression_return nested_expression920 = null;


        ColsAST CARAT918_tree=null;

        try {
            // RParser.g:1826:5: ( CARAT ( qualified_ident | nested_expression ) )
            // RParser.g:1826:9: CARAT ( qualified_ident | nested_expression )
            {
            root_0 = (ColsAST)adaptor.nil();

            CARAT918=(Token)match(input,CARAT,FOLLOW_CARAT_in_hat_expression12835); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            CARAT918_tree = (ColsAST)adaptor.create(CARAT918);
            root_0 = (ColsAST)adaptor.becomeRoot(CARAT918_tree, root_0);
            }
            // RParser.g:1826:16: ( qualified_ident | nested_expression )
            int alt250=2;
            int LA250_0 = input.LA(1);

            if ( (LA250_0==IDENTIFIER) ) {
                alt250=1;
            }
            else if ( (LA250_0==LPAREN) ) {
                alt250=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 250, 0, input);

                throw nvae;
            }
            switch (alt250) {
                case 1 :
                    // RParser.g:1826:17: qualified_ident
                    {
                    pushFollow(FOLLOW_qualified_ident_in_hat_expression12839);
                    qualified_ident919=qualified_ident();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, qualified_ident919.getTree());

                    }
                    break;
                case 2 :
                    // RParser.g:1826:35: nested_expression
                    {
                    pushFollow(FOLLOW_nested_expression_in_hat_expression12843);
                    nested_expression920=nested_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nested_expression920.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (ColsAST)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "hat_expression"

    public static class function_argument_list_return extends ParserRuleReturnScope {
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "function_argument_list"
    // RParser.g:1829:1: function_argument_list : LPAREN math_expression ( COMMA math_expression )* RPAREN -> ^( PARAMS ( math_expression )+ ) ;
    public final RParser.function_argument_list_return function_argument_list() throws RecognitionException {
        RParser.function_argument_list_return retval = new RParser.function_argument_list_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        Token LPAREN921=null;
        Token COMMA923=null;
        Token RPAREN925=null;
        RParser.math_expression_return math_expression922 = null;

        RParser.math_expression_return math_expression924 = null;


        ColsAST LPAREN921_tree=null;
        ColsAST COMMA923_tree=null;
        ColsAST RPAREN925_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_math_expression=new RewriteRuleSubtreeStream(adaptor,"rule math_expression");
        try {
            // RParser.g:1830:5: ( LPAREN math_expression ( COMMA math_expression )* RPAREN -> ^( PARAMS ( math_expression )+ ) )
            // RParser.g:1830:9: LPAREN math_expression ( COMMA math_expression )* RPAREN
            {
            LPAREN921=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_function_argument_list12863); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN921);

            pushFollow(FOLLOW_math_expression_in_function_argument_list12865);
            math_expression922=math_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_math_expression.add(math_expression922.getTree());
            // RParser.g:1830:32: ( COMMA math_expression )*
            loop251:
            do {
                int alt251=2;
                int LA251_0 = input.LA(1);

                if ( (LA251_0==COMMA) ) {
                    alt251=1;
                }


                switch (alt251) {
            	case 1 :
            	    // RParser.g:1830:33: COMMA math_expression
            	    {
            	    COMMA923=(Token)match(input,COMMA,FOLLOW_COMMA_in_function_argument_list12868); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA923);

            	    pushFollow(FOLLOW_math_expression_in_function_argument_list12870);
            	    math_expression924=math_expression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_math_expression.add(math_expression924.getTree());

            	    }
            	    break;

            	default :
            	    break loop251;
                }
            } while (true);

            RPAREN925=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_function_argument_list12874); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN925);



            // AST REWRITE
            // elements: math_expression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (ColsAST)adaptor.nil();
            // 1830:64: -> ^( PARAMS ( math_expression )+ )
            {
                // RParser.g:1830:67: ^( PARAMS ( math_expression )+ )
                {
                ColsAST root_1 = (ColsAST)adaptor.nil();
                root_1 = (ColsAST)adaptor.becomeRoot((ColsAST)adaptor.create(PARAMS, "PARAMS"), root_1);

                if ( !(stream_math_expression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_math_expression.hasNext() ) {
                    adaptor.addChild(root_1, stream_math_expression.nextTree());

                }
                stream_math_expression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (ColsAST)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "function_argument_list"

    public static class alternative_expression_return extends ParserRuleReturnScope {
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "alternative_expression"
    // RParser.g:1837:1: alternative_expression : DBL_LBRACE ( alternative_expression_item )+ DBL_RBRACE ;
    public final RParser.alternative_expression_return alternative_expression() throws RecognitionException {
        RParser.alternative_expression_return retval = new RParser.alternative_expression_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        Token DBL_LBRACE926=null;
        Token DBL_RBRACE928=null;
        RParser.alternative_expression_item_return alternative_expression_item927 = null;


        ColsAST DBL_LBRACE926_tree=null;
        ColsAST DBL_RBRACE928_tree=null;

        try {
            // RParser.g:1838:5: ( DBL_LBRACE ( alternative_expression_item )+ DBL_RBRACE )
            // RParser.g:1838:9: DBL_LBRACE ( alternative_expression_item )+ DBL_RBRACE
            {
            root_0 = (ColsAST)adaptor.nil();

            if ( state.backtracking==0 ) {
               otherwise = false; 
            }
            DBL_LBRACE926=(Token)match(input,DBL_LBRACE,FOLLOW_DBL_LBRACE_in_alternative_expression12916); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            DBL_LBRACE926_tree = (ColsAST)adaptor.create(DBL_LBRACE926);
            root_0 = (ColsAST)adaptor.becomeRoot(DBL_LBRACE926_tree, root_0);
            }
            // RParser.g:1842:9: ( alternative_expression_item )+
            int cnt252=0;
            loop252:
            do {
                int alt252=2;
                alt252 = dfa252.predict(input);
                switch (alt252) {
            	case 1 :
            	    // RParser.g:1842:10: alternative_expression_item
            	    {
            	    pushFollow(FOLLOW_alternative_expression_item_in_alternative_expression12946);
            	    alternative_expression_item927=alternative_expression_item();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, alternative_expression_item927.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt252 >= 1 ) break loop252;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(252, input);
                        throw eee;
                }
                cnt252++;
            } while (true);

            DBL_RBRACE928=(Token)match(input,DBL_RBRACE,FOLLOW_DBL_RBRACE_in_alternative_expression12958); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (ColsAST)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "alternative_expression"

    public static class alternative_expression_item_return extends ParserRuleReturnScope {
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "alternative_expression_item"
    // RParser.g:1848:1: alternative_expression_item : exp= adding_expression ( IF relational_expression | OTHERWISE ) SEMICOLON ;
    public final RParser.alternative_expression_item_return alternative_expression_item() throws RecognitionException {
        RParser.alternative_expression_item_return retval = new RParser.alternative_expression_item_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        Token IF929=null;
        Token OTHERWISE931=null;
        Token SEMICOLON932=null;
        RParser.adding_expression_return exp = null;

        RParser.relational_expression_return relational_expression930 = null;


        ColsAST IF929_tree=null;
        ColsAST OTHERWISE931_tree=null;
        ColsAST SEMICOLON932_tree=null;

        try {
            // RParser.g:1849:5: (exp= adding_expression ( IF relational_expression | OTHERWISE ) SEMICOLON )
            // RParser.g:1849:9: exp= adding_expression ( IF relational_expression | OTHERWISE ) SEMICOLON
            {
            root_0 = (ColsAST)adaptor.nil();

            pushFollow(FOLLOW_adding_expression_in_alternative_expression_item12998);
            exp=adding_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, exp.getTree());
            if ( state.backtracking==0 ) {
               checkOtherwiseItem((ColsAST)exp.getTree()); 
            }
            // RParser.g:1850:9: ( IF relational_expression | OTHERWISE )
            int alt253=2;
            int LA253_0 = input.LA(1);

            if ( (LA253_0==IF) ) {
                alt253=1;
            }
            else if ( (LA253_0==OTHERWISE) ) {
                alt253=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 253, 0, input);

                throw nvae;
            }
            switch (alt253) {
                case 1 :
                    // RParser.g:1850:13: IF relational_expression
                    {
                    IF929=(Token)match(input,IF,FOLLOW_IF_in_alternative_expression_item13014); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    IF929_tree = (ColsAST)adaptor.create(IF929);
                    root_0 = (ColsAST)adaptor.becomeRoot(IF929_tree, root_0);
                    }
                    pushFollow(FOLLOW_relational_expression_in_alternative_expression_item13017);
                    relational_expression930=relational_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, relational_expression930.getTree());

                    }
                    break;
                case 2 :
                    // RParser.g:1851:13: OTHERWISE
                    {
                    OTHERWISE931=(Token)match(input,OTHERWISE,FOLLOW_OTHERWISE_in_alternative_expression_item13031); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    OTHERWISE931_tree = (ColsAST)adaptor.create(OTHERWISE931);
                    root_0 = (ColsAST)adaptor.becomeRoot(OTHERWISE931_tree, root_0);
                    }
                    if ( state.backtracking==0 ) {
                       otherwise = true; 
                    }

                    }
                    break;

            }

            SEMICOLON932=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_alternative_expression_item13054); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (ColsAST)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "alternative_expression_item"

    public static class iterated_construct_return extends ParserRuleReturnScope {
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "iterated_construct"
    // RParser.g:1856:1: iterated_construct : id= ident ident COLON math_type_expression ( where_clause )? ( COMMA | OF ) LBRACE math_expression RBRACE -> ^( ITERATION ident ident math_type_expression ( where_clause )? math_expression ) ;
    public final RParser.iterated_construct_return iterated_construct() throws RecognitionException {
        RParser.iterated_construct_return retval = new RParser.iterated_construct_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        Token COLON934=null;
        Token COMMA937=null;
        Token OF938=null;
        Token LBRACE939=null;
        Token RBRACE941=null;
        RParser.ident_return id = null;

        RParser.ident_return ident933 = null;

        RParser.math_type_expression_return math_type_expression935 = null;

        RParser.where_clause_return where_clause936 = null;

        RParser.math_expression_return math_expression940 = null;


        ColsAST COLON934_tree=null;
        ColsAST COMMA937_tree=null;
        ColsAST OF938_tree=null;
        ColsAST LBRACE939_tree=null;
        ColsAST RBRACE941_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_RBRACE=new RewriteRuleTokenStream(adaptor,"token RBRACE");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_OF=new RewriteRuleTokenStream(adaptor,"token OF");
        RewriteRuleTokenStream stream_LBRACE=new RewriteRuleTokenStream(adaptor,"token LBRACE");
        RewriteRuleSubtreeStream stream_math_type_expression=new RewriteRuleSubtreeStream(adaptor,"rule math_type_expression");
        RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
        RewriteRuleSubtreeStream stream_where_clause=new RewriteRuleSubtreeStream(adaptor,"rule where_clause");
        RewriteRuleSubtreeStream stream_math_expression=new RewriteRuleSubtreeStream(adaptor,"rule math_expression");
        try {
            // RParser.g:1857:5: (id= ident ident COLON math_type_expression ( where_clause )? ( COMMA | OF ) LBRACE math_expression RBRACE -> ^( ITERATION ident ident math_type_expression ( where_clause )? math_expression ) )
            // RParser.g:1857:9: id= ident ident COLON math_type_expression ( where_clause )? ( COMMA | OF ) LBRACE math_expression RBRACE
            {
            pushFollow(FOLLOW_ident_in_iterated_construct13076);
            id=ident();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_ident.add(id.getTree());
            if ( state.backtracking==0 ) {
               checkIteratedIdent(id.tree); 
            }
            pushFollow(FOLLOW_ident_in_iterated_construct13088);
            ident933=ident();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_ident.add(ident933.getTree());
            COLON934=(Token)match(input,COLON,FOLLOW_COLON_in_iterated_construct13098); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COLON.add(COLON934);

            pushFollow(FOLLOW_math_type_expression_in_iterated_construct13100);
            math_type_expression935=math_type_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_math_type_expression.add(math_type_expression935.getTree());
            // RParser.g:1860:9: ( where_clause )?
            int alt254=2;
            int LA254_0 = input.LA(1);

            if ( (LA254_0==WHERE) ) {
                alt254=1;
            }
            switch (alt254) {
                case 1 :
                    // RParser.g:1860:10: where_clause
                    {
                    pushFollow(FOLLOW_where_clause_in_iterated_construct13112);
                    where_clause936=where_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_where_clause.add(where_clause936.getTree());

                    }
                    break;

            }

            // RParser.g:1861:9: ( COMMA | OF )
            int alt255=2;
            int LA255_0 = input.LA(1);

            if ( (LA255_0==COMMA) ) {
                alt255=1;
            }
            else if ( (LA255_0==OF) ) {
                alt255=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 255, 0, input);

                throw nvae;
            }
            switch (alt255) {
                case 1 :
                    // RParser.g:1861:10: COMMA
                    {
                    COMMA937=(Token)match(input,COMMA,FOLLOW_COMMA_in_iterated_construct13125); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COMMA.add(COMMA937);


                    }
                    break;
                case 2 :
                    // RParser.g:1861:18: OF
                    {
                    OF938=(Token)match(input,OF,FOLLOW_OF_in_iterated_construct13129); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_OF.add(OF938);


                    }
                    break;

            }

            LBRACE939=(Token)match(input,LBRACE,FOLLOW_LBRACE_in_iterated_construct13132); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LBRACE.add(LBRACE939);

            pushFollow(FOLLOW_math_expression_in_iterated_construct13134);
            math_expression940=math_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_math_expression.add(math_expression940.getTree());
            RBRACE941=(Token)match(input,RBRACE,FOLLOW_RBRACE_in_iterated_construct13136); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RBRACE.add(RBRACE941);



            // AST REWRITE
            // elements: ident, math_expression, where_clause, math_type_expression, ident
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (ColsAST)adaptor.nil();
            // 1862:9: -> ^( ITERATION ident ident math_type_expression ( where_clause )? math_expression )
            {
                // RParser.g:1862:12: ^( ITERATION ident ident math_type_expression ( where_clause )? math_expression )
                {
                ColsAST root_1 = (ColsAST)adaptor.nil();
                root_1 = (ColsAST)adaptor.becomeRoot((ColsAST)adaptor.create(ITERATION, "ITERATION"), root_1);

                adaptor.addChild(root_1, stream_ident.nextTree());
                adaptor.addChild(root_1, stream_ident.nextTree());
                adaptor.addChild(root_1, stream_math_type_expression.nextTree());
                // RParser.g:1862:57: ( where_clause )?
                if ( stream_where_clause.hasNext() ) {
                    adaptor.addChild(root_1, stream_where_clause.nextTree());

                }
                stream_where_clause.reset();
                adaptor.addChild(root_1, stream_math_expression.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (ColsAST)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "iterated_construct"

    public static class lambda_expression_return extends ParserRuleReturnScope {
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "lambda_expression"
    // RParser.g:1866:1: lambda_expression : LAMBDA ident COLON ( ( ident DOT ident DOT )=> certain_qualified_ident | ident ) DOT LPAREN math_expression RPAREN ;
    public final RParser.lambda_expression_return lambda_expression() throws RecognitionException {
        RParser.lambda_expression_return retval = new RParser.lambda_expression_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        Token LAMBDA942=null;
        Token COLON944=null;
        Token DOT947=null;
        Token LPAREN948=null;
        Token RPAREN950=null;
        RParser.ident_return ident943 = null;

        RParser.certain_qualified_ident_return certain_qualified_ident945 = null;

        RParser.ident_return ident946 = null;

        RParser.math_expression_return math_expression949 = null;


        ColsAST LAMBDA942_tree=null;
        ColsAST COLON944_tree=null;
        ColsAST DOT947_tree=null;
        ColsAST LPAREN948_tree=null;
        ColsAST RPAREN950_tree=null;

        try {
            // RParser.g:1867:5: ( LAMBDA ident COLON ( ( ident DOT ident DOT )=> certain_qualified_ident | ident ) DOT LPAREN math_expression RPAREN )
            // RParser.g:1867:9: LAMBDA ident COLON ( ( ident DOT ident DOT )=> certain_qualified_ident | ident ) DOT LPAREN math_expression RPAREN
            {
            root_0 = (ColsAST)adaptor.nil();

            LAMBDA942=(Token)match(input,LAMBDA,FOLLOW_LAMBDA_in_lambda_expression13183); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LAMBDA942_tree = (ColsAST)adaptor.create(LAMBDA942);
            root_0 = (ColsAST)adaptor.becomeRoot(LAMBDA942_tree, root_0);
            }
            pushFollow(FOLLOW_ident_in_lambda_expression13186);
            ident943=ident();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, ident943.getTree());
            COLON944=(Token)match(input,COLON,FOLLOW_COLON_in_lambda_expression13188); if (state.failed) return retval;
            // RParser.g:1868:9: ( ( ident DOT ident DOT )=> certain_qualified_ident | ident )
            int alt256=2;
            int LA256_0 = input.LA(1);

            if ( (LA256_0==IDENTIFIER) ) {
                int LA256_1 = input.LA(2);

                if ( (synpred21_RParser()) ) {
                    alt256=1;
                }
                else if ( (true) ) {
                    alt256=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 256, 1, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 256, 0, input);

                throw nvae;
            }
            switch (alt256) {
                case 1 :
                    // RParser.g:1868:13: ( ident DOT ident DOT )=> certain_qualified_ident
                    {
                    pushFollow(FOLLOW_certain_qualified_ident_in_lambda_expression13215);
                    certain_qualified_ident945=certain_qualified_ident();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, certain_qualified_ident945.getTree());

                    }
                    break;
                case 2 :
                    // RParser.g:1869:13: ident
                    {
                    pushFollow(FOLLOW_ident_in_lambda_expression13229);
                    ident946=ident();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, ident946.getTree());

                    }
                    break;

            }

            DOT947=(Token)match(input,DOT,FOLLOW_DOT_in_lambda_expression13249); if (state.failed) return retval;
            LPAREN948=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_lambda_expression13252); if (state.failed) return retval;
            pushFollow(FOLLOW_math_expression_in_lambda_expression13255);
            math_expression949=math_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, math_expression949.getTree());
            RPAREN950=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_lambda_expression13257); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (ColsAST)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "lambda_expression"

    public static class literal_expression_return extends ParserRuleReturnScope {
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "literal_expression"
    // RParser.g:1874:1: literal_expression : ( NUMERIC_LITERAL | CHARACTER_LITERAL | STRING_LITERAL );
    public final RParser.literal_expression_return literal_expression() throws RecognitionException {
        RParser.literal_expression_return retval = new RParser.literal_expression_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        Token set951=null;

        ColsAST set951_tree=null;

        try {
            // RParser.g:1876:5: ( NUMERIC_LITERAL | CHARACTER_LITERAL | STRING_LITERAL )
            // RParser.g:
            {
            root_0 = (ColsAST)adaptor.nil();

            set951=(Token)input.LT(1);
            if ( input.LA(1)==NUMERIC_LITERAL||input.LA(1)==CHARACTER_LITERAL||input.LA(1)==STRING_LITERAL ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (ColsAST)adaptor.create(set951));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (ColsAST)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "literal_expression"

    public static class program_literal_expression_return extends ParserRuleReturnScope {
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "program_literal_expression"
    // RParser.g:1881:1: program_literal_expression : ( NUMERIC_LITERAL | CHARACTER_LITERAL | STRING_LITERAL );
    public final RParser.program_literal_expression_return program_literal_expression() throws RecognitionException {
        RParser.program_literal_expression_return retval = new RParser.program_literal_expression_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        Token set952=null;

        ColsAST set952_tree=null;

        try {
            // RParser.g:1882:5: ( NUMERIC_LITERAL | CHARACTER_LITERAL | STRING_LITERAL )
            // RParser.g:
            {
            root_0 = (ColsAST)adaptor.nil();

            set952=(Token)input.LT(1);
            if ( input.LA(1)==NUMERIC_LITERAL||input.LA(1)==CHARACTER_LITERAL||input.LA(1)==STRING_LITERAL ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (ColsAST)adaptor.create(set952));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (ColsAST)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "program_literal_expression"

    public static class qualified_numeric_literal_return extends ParserRuleReturnScope {
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "qualified_numeric_literal"
    // RParser.g:1887:1: qualified_numeric_literal : ident DOT NUMERIC_LITERAL -> ^( QUALNUM ident NUMERIC_LITERAL ) ;
    public final RParser.qualified_numeric_literal_return qualified_numeric_literal() throws RecognitionException {
        RParser.qualified_numeric_literal_return retval = new RParser.qualified_numeric_literal_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        Token DOT954=null;
        Token NUMERIC_LITERAL955=null;
        RParser.ident_return ident953 = null;


        ColsAST DOT954_tree=null;
        ColsAST NUMERIC_LITERAL955_tree=null;
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleTokenStream stream_NUMERIC_LITERAL=new RewriteRuleTokenStream(adaptor,"token NUMERIC_LITERAL");
        RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
        try {
            // RParser.g:1888:5: ( ident DOT NUMERIC_LITERAL -> ^( QUALNUM ident NUMERIC_LITERAL ) )
            // RParser.g:1888:9: ident DOT NUMERIC_LITERAL
            {
            pushFollow(FOLLOW_ident_in_qualified_numeric_literal13368);
            ident953=ident();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_ident.add(ident953.getTree());
            DOT954=(Token)match(input,DOT,FOLLOW_DOT_in_qualified_numeric_literal13370); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_DOT.add(DOT954);

            NUMERIC_LITERAL955=(Token)match(input,NUMERIC_LITERAL,FOLLOW_NUMERIC_LITERAL_in_qualified_numeric_literal13372); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_NUMERIC_LITERAL.add(NUMERIC_LITERAL955);



            // AST REWRITE
            // elements: NUMERIC_LITERAL, ident
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (ColsAST)adaptor.nil();
            // 1888:35: -> ^( QUALNUM ident NUMERIC_LITERAL )
            {
                // RParser.g:1888:38: ^( QUALNUM ident NUMERIC_LITERAL )
                {
                ColsAST root_1 = (ColsAST)adaptor.nil();
                root_1 = (ColsAST)adaptor.becomeRoot((ColsAST)adaptor.create(QUALNUM, "QUALNUM"), root_1);

                adaptor.addChild(root_1, stream_ident.nextTree());
                adaptor.addChild(root_1, stream_NUMERIC_LITERAL.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (ColsAST)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "qualified_numeric_literal"

    public static class nested_expression_return extends ParserRuleReturnScope {
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nested_expression"
    // RParser.g:1891:1: nested_expression : LPAREN math_expression RPAREN -> ^( NESTED math_expression ) ;
    public final RParser.nested_expression_return nested_expression() throws RecognitionException {
        RParser.nested_expression_return retval = new RParser.nested_expression_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        Token LPAREN956=null;
        Token RPAREN958=null;
        RParser.math_expression_return math_expression957 = null;


        ColsAST LPAREN956_tree=null;
        ColsAST RPAREN958_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_math_expression=new RewriteRuleSubtreeStream(adaptor,"rule math_expression");
        try {
            // RParser.g:1892:5: ( LPAREN math_expression RPAREN -> ^( NESTED math_expression ) )
            // RParser.g:1892:9: LPAREN math_expression RPAREN
            {
            LPAREN956=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_nested_expression13401); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN956);

            pushFollow(FOLLOW_math_expression_in_nested_expression13403);
            math_expression957=math_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_math_expression.add(math_expression957.getTree());
            RPAREN958=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_nested_expression13405); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN958);



            // AST REWRITE
            // elements: math_expression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (ColsAST)adaptor.nil();
            // 1892:39: -> ^( NESTED math_expression )
            {
                // RParser.g:1892:42: ^( NESTED math_expression )
                {
                ColsAST root_1 = (ColsAST)adaptor.nil();
                root_1 = (ColsAST)adaptor.becomeRoot((ColsAST)adaptor.create(NESTED, "NESTED"), root_1);

                adaptor.addChild(root_1, stream_math_expression.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (ColsAST)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nested_expression"

    public static class outfix_expression_return extends ParserRuleReturnScope {
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "outfix_expression"
    // RParser.g:1895:1: outfix_expression : ( (lt= LT infix_expression GT ) -> ^( ANGLE[$lt] infix_expression ) | (ll= LL math_expression GG ) -> ^( DBL_ANGLE[$ll] math_expression ) | BAR math_expression BAR | DBL_BAR math_expression DBL_BAR );
    public final RParser.outfix_expression_return outfix_expression() throws RecognitionException {
        RParser.outfix_expression_return retval = new RParser.outfix_expression_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        Token lt=null;
        Token ll=null;
        Token GT960=null;
        Token GG962=null;
        Token BAR963=null;
        Token BAR965=null;
        Token DBL_BAR966=null;
        Token DBL_BAR968=null;
        RParser.infix_expression_return infix_expression959 = null;

        RParser.math_expression_return math_expression961 = null;

        RParser.math_expression_return math_expression964 = null;

        RParser.math_expression_return math_expression967 = null;


        ColsAST lt_tree=null;
        ColsAST ll_tree=null;
        ColsAST GT960_tree=null;
        ColsAST GG962_tree=null;
        ColsAST BAR963_tree=null;
        ColsAST BAR965_tree=null;
        ColsAST DBL_BAR966_tree=null;
        ColsAST DBL_BAR968_tree=null;
        RewriteRuleTokenStream stream_GT=new RewriteRuleTokenStream(adaptor,"token GT");
        RewriteRuleTokenStream stream_LT=new RewriteRuleTokenStream(adaptor,"token LT");
        RewriteRuleTokenStream stream_LL=new RewriteRuleTokenStream(adaptor,"token LL");
        RewriteRuleTokenStream stream_GG=new RewriteRuleTokenStream(adaptor,"token GG");
        RewriteRuleSubtreeStream stream_infix_expression=new RewriteRuleSubtreeStream(adaptor,"rule infix_expression");
        RewriteRuleSubtreeStream stream_math_expression=new RewriteRuleSubtreeStream(adaptor,"rule math_expression");
        try {
            // RParser.g:1896:5: ( (lt= LT infix_expression GT ) -> ^( ANGLE[$lt] infix_expression ) | (ll= LL math_expression GG ) -> ^( DBL_ANGLE[$ll] math_expression ) | BAR math_expression BAR | DBL_BAR math_expression DBL_BAR )
            int alt257=4;
            switch ( input.LA(1) ) {
            case LT:
                {
                alt257=1;
                }
                break;
            case LL:
                {
                alt257=2;
                }
                break;
            case BAR:
                {
                alt257=3;
                }
                break;
            case DBL_BAR:
                {
                alt257=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 257, 0, input);

                throw nvae;
            }

            switch (alt257) {
                case 1 :
                    // RParser.g:1896:9: (lt= LT infix_expression GT )
                    {
                    // RParser.g:1896:9: (lt= LT infix_expression GT )
                    // RParser.g:1896:10: lt= LT infix_expression GT
                    {
                    lt=(Token)match(input,LT,FOLLOW_LT_in_outfix_expression13435); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LT.add(lt);

                    pushFollow(FOLLOW_infix_expression_in_outfix_expression13437);
                    infix_expression959=infix_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_infix_expression.add(infix_expression959.getTree());
                    GT960=(Token)match(input,GT,FOLLOW_GT_in_outfix_expression13439); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_GT.add(GT960);


                    }



                    // AST REWRITE
                    // elements: infix_expression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (ColsAST)adaptor.nil();
                    // 1896:36: -> ^( ANGLE[$lt] infix_expression )
                    {
                        // RParser.g:1896:39: ^( ANGLE[$lt] infix_expression )
                        {
                        ColsAST root_1 = (ColsAST)adaptor.nil();
                        root_1 = (ColsAST)adaptor.becomeRoot((ColsAST)adaptor.create(ANGLE, lt), root_1);

                        adaptor.addChild(root_1, stream_infix_expression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // RParser.g:1897:9: (ll= LL math_expression GG )
                    {
                    // RParser.g:1897:9: (ll= LL math_expression GG )
                    // RParser.g:1897:10: ll= LL math_expression GG
                    {
                    ll=(Token)match(input,LL,FOLLOW_LL_in_outfix_expression13461); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LL.add(ll);

                    pushFollow(FOLLOW_math_expression_in_outfix_expression13464);
                    math_expression961=math_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_math_expression.add(math_expression961.getTree());
                    GG962=(Token)match(input,GG,FOLLOW_GG_in_outfix_expression13466); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_GG.add(GG962);


                    }



                    // AST REWRITE
                    // elements: math_expression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (ColsAST)adaptor.nil();
                    // 1897:37: -> ^( DBL_ANGLE[$ll] math_expression )
                    {
                        // RParser.g:1897:40: ^( DBL_ANGLE[$ll] math_expression )
                        {
                        ColsAST root_1 = (ColsAST)adaptor.nil();
                        root_1 = (ColsAST)adaptor.becomeRoot((ColsAST)adaptor.create(DBL_ANGLE, ll), root_1);

                        adaptor.addChild(root_1, stream_math_expression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // RParser.g:1898:9: BAR math_expression BAR
                    {
                    root_0 = (ColsAST)adaptor.nil();

                    BAR963=(Token)match(input,BAR,FOLLOW_BAR_in_outfix_expression13486); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    BAR963_tree = (ColsAST)adaptor.create(BAR963);
                    root_0 = (ColsAST)adaptor.becomeRoot(BAR963_tree, root_0);
                    }
                    pushFollow(FOLLOW_math_expression_in_outfix_expression13489);
                    math_expression964=math_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, math_expression964.getTree());
                    BAR965=(Token)match(input,BAR,FOLLOW_BAR_in_outfix_expression13491); if (state.failed) return retval;

                    }
                    break;
                case 4 :
                    // RParser.g:1899:9: DBL_BAR math_expression DBL_BAR
                    {
                    root_0 = (ColsAST)adaptor.nil();

                    DBL_BAR966=(Token)match(input,DBL_BAR,FOLLOW_DBL_BAR_in_outfix_expression13502); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DBL_BAR966_tree = (ColsAST)adaptor.create(DBL_BAR966);
                    root_0 = (ColsAST)adaptor.becomeRoot(DBL_BAR966_tree, root_0);
                    }
                    pushFollow(FOLLOW_math_expression_in_outfix_expression13505);
                    math_expression967=math_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, math_expression967.getTree());
                    DBL_BAR968=(Token)match(input,DBL_BAR,FOLLOW_DBL_BAR_in_outfix_expression13507); if (state.failed) return retval;

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (ColsAST)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "outfix_expression"

    public static class parenthesized_expression_return extends ParserRuleReturnScope {
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "parenthesized_expression"
    // RParser.g:1902:1: parenthesized_expression : LPAREN math_expression RPAREN ;
    public final RParser.parenthesized_expression_return parenthesized_expression() throws RecognitionException {
        RParser.parenthesized_expression_return retval = new RParser.parenthesized_expression_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        Token LPAREN969=null;
        Token RPAREN971=null;
        RParser.math_expression_return math_expression970 = null;


        ColsAST LPAREN969_tree=null;
        ColsAST RPAREN971_tree=null;

        try {
            // RParser.g:1903:5: ( LPAREN math_expression RPAREN )
            // RParser.g:1903:9: LPAREN math_expression RPAREN
            {
            root_0 = (ColsAST)adaptor.nil();

            LPAREN969=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_parenthesized_expression13527); if (state.failed) return retval;
            pushFollow(FOLLOW_math_expression_in_parenthesized_expression13530);
            math_expression970=math_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, math_expression970.getTree());
            RPAREN971=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_parenthesized_expression13532); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (ColsAST)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "parenthesized_expression"

    public static class set_constructor_return extends ParserRuleReturnScope {
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "set_constructor"
    // RParser.g:1906:1: set_constructor : LBRACE ident COLON math_type_expression ( where_clause )? BAR math_expression RBRACE ;
    public final RParser.set_constructor_return set_constructor() throws RecognitionException {
        RParser.set_constructor_return retval = new RParser.set_constructor_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        Token LBRACE972=null;
        Token COLON974=null;
        Token BAR977=null;
        Token RBRACE979=null;
        RParser.ident_return ident973 = null;

        RParser.math_type_expression_return math_type_expression975 = null;

        RParser.where_clause_return where_clause976 = null;

        RParser.math_expression_return math_expression978 = null;


        ColsAST LBRACE972_tree=null;
        ColsAST COLON974_tree=null;
        ColsAST BAR977_tree=null;
        ColsAST RBRACE979_tree=null;

        try {
            // RParser.g:1907:5: ( LBRACE ident COLON math_type_expression ( where_clause )? BAR math_expression RBRACE )
            // RParser.g:1907:9: LBRACE ident COLON math_type_expression ( where_clause )? BAR math_expression RBRACE
            {
            root_0 = (ColsAST)adaptor.nil();

            LBRACE972=(Token)match(input,LBRACE,FOLLOW_LBRACE_in_set_constructor13552); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LBRACE972_tree = (ColsAST)adaptor.create(LBRACE972);
            root_0 = (ColsAST)adaptor.becomeRoot(LBRACE972_tree, root_0);
            }
            pushFollow(FOLLOW_ident_in_set_constructor13555);
            ident973=ident();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, ident973.getTree());
            COLON974=(Token)match(input,COLON,FOLLOW_COLON_in_set_constructor13565); if (state.failed) return retval;
            pushFollow(FOLLOW_math_type_expression_in_set_constructor13568);
            math_type_expression975=math_type_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, math_type_expression975.getTree());
            // RParser.g:1909:9: ( where_clause )?
            int alt258=2;
            int LA258_0 = input.LA(1);

            if ( (LA258_0==WHERE) ) {
                alt258=1;
            }
            switch (alt258) {
                case 1 :
                    // RParser.g:1909:10: where_clause
                    {
                    pushFollow(FOLLOW_where_clause_in_set_constructor13579);
                    where_clause976=where_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, where_clause976.getTree());

                    }
                    break;

            }

            BAR977=(Token)match(input,BAR,FOLLOW_BAR_in_set_constructor13583); if (state.failed) return retval;
            pushFollow(FOLLOW_math_expression_in_set_constructor13594);
            math_expression978=math_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, math_expression978.getTree());
            RBRACE979=(Token)match(input,RBRACE,FOLLOW_RBRACE_in_set_constructor13596); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (ColsAST)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "set_constructor"

    public static class tuple_expression_return extends ParserRuleReturnScope {
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "tuple_expression"
    // RParser.g:1913:1: tuple_expression : LPAREN math_expression ( COMMA math_expression )* RPAREN -> ^( TUPLE ( math_expression )+ ) ;
    public final RParser.tuple_expression_return tuple_expression() throws RecognitionException {
        RParser.tuple_expression_return retval = new RParser.tuple_expression_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        Token LPAREN980=null;
        Token COMMA982=null;
        Token RPAREN984=null;
        RParser.math_expression_return math_expression981 = null;

        RParser.math_expression_return math_expression983 = null;


        ColsAST LPAREN980_tree=null;
        ColsAST COMMA982_tree=null;
        ColsAST RPAREN984_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_math_expression=new RewriteRuleSubtreeStream(adaptor,"rule math_expression");
        try {
            // RParser.g:1914:5: ( LPAREN math_expression ( COMMA math_expression )* RPAREN -> ^( TUPLE ( math_expression )+ ) )
            // RParser.g:1914:9: LPAREN math_expression ( COMMA math_expression )* RPAREN
            {
            LPAREN980=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_tuple_expression13616); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN980);

            pushFollow(FOLLOW_math_expression_in_tuple_expression13618);
            math_expression981=math_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_math_expression.add(math_expression981.getTree());
            // RParser.g:1914:32: ( COMMA math_expression )*
            loop259:
            do {
                int alt259=2;
                int LA259_0 = input.LA(1);

                if ( (LA259_0==COMMA) ) {
                    alt259=1;
                }


                switch (alt259) {
            	case 1 :
            	    // RParser.g:1914:33: COMMA math_expression
            	    {
            	    COMMA982=(Token)match(input,COMMA,FOLLOW_COMMA_in_tuple_expression13621); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA982);

            	    pushFollow(FOLLOW_math_expression_in_tuple_expression13623);
            	    math_expression983=math_expression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_math_expression.add(math_expression983.getTree());

            	    }
            	    break;

            	default :
            	    break loop259;
                }
            } while (true);

            RPAREN984=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_tuple_expression13627); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN984);



            // AST REWRITE
            // elements: math_expression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (ColsAST)adaptor.nil();
            // 1914:64: -> ^( TUPLE ( math_expression )+ )
            {
                // RParser.g:1914:67: ^( TUPLE ( math_expression )+ )
                {
                ColsAST root_1 = (ColsAST)adaptor.nil();
                root_1 = (ColsAST)adaptor.becomeRoot((ColsAST)adaptor.create(TUPLE, "TUPLE"), root_1);

                if ( !(stream_math_expression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_math_expression.hasNext() ) {
                    adaptor.addChild(root_1, stream_math_expression.nextTree());

                }
                stream_math_expression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (ColsAST)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "tuple_expression"

    public static class where_clause_return extends ParserRuleReturnScope {
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "where_clause"
    // RParser.g:1917:1: where_clause : WHERE math_expression ;
    public final RParser.where_clause_return where_clause() throws RecognitionException {
        RParser.where_clause_return retval = new RParser.where_clause_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        Token WHERE985=null;
        RParser.math_expression_return math_expression986 = null;


        ColsAST WHERE985_tree=null;

        try {
            // RParser.g:1918:5: ( WHERE math_expression )
            // RParser.g:1918:9: WHERE math_expression
            {
            root_0 = (ColsAST)adaptor.nil();

            WHERE985=(Token)match(input,WHERE,FOLLOW_WHERE_in_where_clause13655); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            WHERE985_tree = (ColsAST)adaptor.create(WHERE985);
            root_0 = (ColsAST)adaptor.becomeRoot(WHERE985_tree, root_0);
            }
            pushFollow(FOLLOW_math_expression_in_where_clause13658);
            math_expression986=math_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, math_expression986.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (ColsAST)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "where_clause"

    public static class program_expression_return extends ParserRuleReturnScope {
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "program_expression"
    // RParser.g:1925:1: program_expression : program_logical_expression -> ^( EXPR program_logical_expression ) ;
    public final RParser.program_expression_return program_expression() throws RecognitionException {
        RParser.program_expression_return retval = new RParser.program_expression_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        RParser.program_logical_expression_return program_logical_expression987 = null;


        RewriteRuleSubtreeStream stream_program_logical_expression=new RewriteRuleSubtreeStream(adaptor,"rule program_logical_expression");
        try {
            // RParser.g:1926:5: ( program_logical_expression -> ^( EXPR program_logical_expression ) )
            // RParser.g:1926:9: program_logical_expression
            {
            pushFollow(FOLLOW_program_logical_expression_in_program_expression13681);
            program_logical_expression987=program_logical_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_program_logical_expression.add(program_logical_expression987.getTree());


            // AST REWRITE
            // elements: program_logical_expression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (ColsAST)adaptor.nil();
            // 1926:36: -> ^( EXPR program_logical_expression )
            {
                // RParser.g:1926:39: ^( EXPR program_logical_expression )
                {
                ColsAST root_1 = (ColsAST)adaptor.nil();
                root_1 = (ColsAST)adaptor.becomeRoot((ColsAST)adaptor.create(EXPR, "EXPR"), root_1);

                adaptor.addChild(root_1, stream_program_logical_expression.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (ColsAST)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "program_expression"

    public static class program_logical_expression_return extends ParserRuleReturnScope {
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "program_logical_expression"
    // RParser.g:1929:1: program_logical_expression : program_relational_expression ( ( AND | OR ) program_relational_expression )* ;
    public final RParser.program_logical_expression_return program_logical_expression() throws RecognitionException {
        RParser.program_logical_expression_return retval = new RParser.program_logical_expression_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        Token AND989=null;
        Token OR990=null;
        RParser.program_relational_expression_return program_relational_expression988 = null;

        RParser.program_relational_expression_return program_relational_expression991 = null;


        ColsAST AND989_tree=null;
        ColsAST OR990_tree=null;

        try {
            // RParser.g:1930:5: ( program_relational_expression ( ( AND | OR ) program_relational_expression )* )
            // RParser.g:1930:9: program_relational_expression ( ( AND | OR ) program_relational_expression )*
            {
            root_0 = (ColsAST)adaptor.nil();

            pushFollow(FOLLOW_program_relational_expression_in_program_logical_expression13708);
            program_relational_expression988=program_relational_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, program_relational_expression988.getTree());
            // RParser.g:1931:9: ( ( AND | OR ) program_relational_expression )*
            loop261:
            do {
                int alt261=2;
                int LA261_0 = input.LA(1);

                if ( (LA261_0==AND||LA261_0==OR) ) {
                    alt261=1;
                }


                switch (alt261) {
            	case 1 :
            	    // RParser.g:1931:13: ( AND | OR ) program_relational_expression
            	    {
            	    // RParser.g:1931:13: ( AND | OR )
            	    int alt260=2;
            	    int LA260_0 = input.LA(1);

            	    if ( (LA260_0==AND) ) {
            	        alt260=1;
            	    }
            	    else if ( (LA260_0==OR) ) {
            	        alt260=2;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 260, 0, input);

            	        throw nvae;
            	    }
            	    switch (alt260) {
            	        case 1 :
            	            // RParser.g:1931:17: AND
            	            {
            	            AND989=(Token)match(input,AND,FOLLOW_AND_in_program_logical_expression13726); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            AND989_tree = (ColsAST)adaptor.create(AND989);
            	            root_0 = (ColsAST)adaptor.becomeRoot(AND989_tree, root_0);
            	            }

            	            }
            	            break;
            	        case 2 :
            	            // RParser.g:1932:17: OR
            	            {
            	            OR990=(Token)match(input,OR,FOLLOW_OR_in_program_logical_expression13745); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            OR990_tree = (ColsAST)adaptor.create(OR990);
            	            root_0 = (ColsAST)adaptor.becomeRoot(OR990_tree, root_0);
            	            }

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_program_relational_expression_in_program_logical_expression13774);
            	    program_relational_expression991=program_relational_expression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, program_relational_expression991.getTree());

            	    }
            	    break;

            	default :
            	    break loop261;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (ColsAST)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "program_logical_expression"

    public static class program_relational_expression_return extends ParserRuleReturnScope {
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "program_relational_expression"
    // RParser.g:1938:1: program_relational_expression : program_adding_expression ( ( EQL | NOT_EQL | LT | LT_EQL | GT | GT_EQL ) program_adding_expression )? ;
    public final RParser.program_relational_expression_return program_relational_expression() throws RecognitionException {
        RParser.program_relational_expression_return retval = new RParser.program_relational_expression_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        Token EQL993=null;
        Token NOT_EQL994=null;
        Token LT995=null;
        Token LT_EQL996=null;
        Token GT997=null;
        Token GT_EQL998=null;
        RParser.program_adding_expression_return program_adding_expression992 = null;

        RParser.program_adding_expression_return program_adding_expression999 = null;


        ColsAST EQL993_tree=null;
        ColsAST NOT_EQL994_tree=null;
        ColsAST LT995_tree=null;
        ColsAST LT_EQL996_tree=null;
        ColsAST GT997_tree=null;
        ColsAST GT_EQL998_tree=null;

        try {
            // RParser.g:1939:5: ( program_adding_expression ( ( EQL | NOT_EQL | LT | LT_EQL | GT | GT_EQL ) program_adding_expression )? )
            // RParser.g:1939:9: program_adding_expression ( ( EQL | NOT_EQL | LT | LT_EQL | GT | GT_EQL ) program_adding_expression )?
            {
            root_0 = (ColsAST)adaptor.nil();

            pushFollow(FOLLOW_program_adding_expression_in_program_relational_expression13804);
            program_adding_expression992=program_adding_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, program_adding_expression992.getTree());
            // RParser.g:1940:9: ( ( EQL | NOT_EQL | LT | LT_EQL | GT | GT_EQL ) program_adding_expression )?
            int alt263=2;
            int LA263_0 = input.LA(1);

            if ( ((LA263_0>=NOT_EQL && LA263_0<=GT)) ) {
                alt263=1;
            }
            switch (alt263) {
                case 1 :
                    // RParser.g:1940:13: ( EQL | NOT_EQL | LT | LT_EQL | GT | GT_EQL ) program_adding_expression
                    {
                    // RParser.g:1940:13: ( EQL | NOT_EQL | LT | LT_EQL | GT | GT_EQL )
                    int alt262=6;
                    switch ( input.LA(1) ) {
                    case EQL:
                        {
                        alt262=1;
                        }
                        break;
                    case NOT_EQL:
                        {
                        alt262=2;
                        }
                        break;
                    case LT:
                        {
                        alt262=3;
                        }
                        break;
                    case LT_EQL:
                        {
                        alt262=4;
                        }
                        break;
                    case GT:
                        {
                        alt262=5;
                        }
                        break;
                    case GT_EQL:
                        {
                        alt262=6;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 262, 0, input);

                        throw nvae;
                    }

                    switch (alt262) {
                        case 1 :
                            // RParser.g:1940:17: EQL
                            {
                            EQL993=(Token)match(input,EQL,FOLLOW_EQL_in_program_relational_expression13822); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            EQL993_tree = (ColsAST)adaptor.create(EQL993);
                            root_0 = (ColsAST)adaptor.becomeRoot(EQL993_tree, root_0);
                            }

                            }
                            break;
                        case 2 :
                            // RParser.g:1941:17: NOT_EQL
                            {
                            NOT_EQL994=(Token)match(input,NOT_EQL,FOLLOW_NOT_EQL_in_program_relational_expression13841); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            NOT_EQL994_tree = (ColsAST)adaptor.create(NOT_EQL994);
                            root_0 = (ColsAST)adaptor.becomeRoot(NOT_EQL994_tree, root_0);
                            }

                            }
                            break;
                        case 3 :
                            // RParser.g:1942:17: LT
                            {
                            LT995=(Token)match(input,LT,FOLLOW_LT_in_program_relational_expression13860); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            LT995_tree = (ColsAST)adaptor.create(LT995);
                            root_0 = (ColsAST)adaptor.becomeRoot(LT995_tree, root_0);
                            }

                            }
                            break;
                        case 4 :
                            // RParser.g:1943:17: LT_EQL
                            {
                            LT_EQL996=(Token)match(input,LT_EQL,FOLLOW_LT_EQL_in_program_relational_expression13879); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            LT_EQL996_tree = (ColsAST)adaptor.create(LT_EQL996);
                            root_0 = (ColsAST)adaptor.becomeRoot(LT_EQL996_tree, root_0);
                            }

                            }
                            break;
                        case 5 :
                            // RParser.g:1944:17: GT
                            {
                            GT997=(Token)match(input,GT,FOLLOW_GT_in_program_relational_expression13898); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            GT997_tree = (ColsAST)adaptor.create(GT997);
                            root_0 = (ColsAST)adaptor.becomeRoot(GT997_tree, root_0);
                            }

                            }
                            break;
                        case 6 :
                            // RParser.g:1945:17: GT_EQL
                            {
                            GT_EQL998=(Token)match(input,GT_EQL,FOLLOW_GT_EQL_in_program_relational_expression13917); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            GT_EQL998_tree = (ColsAST)adaptor.create(GT_EQL998);
                            root_0 = (ColsAST)adaptor.becomeRoot(GT_EQL998_tree, root_0);
                            }

                            }
                            break;

                    }

                    pushFollow(FOLLOW_program_adding_expression_in_program_relational_expression13946);
                    program_adding_expression999=program_adding_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, program_adding_expression999.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (ColsAST)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "program_relational_expression"

    public static class program_adding_expression_return extends ParserRuleReturnScope {
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "program_adding_expression"
    // RParser.g:1951:1: program_adding_expression : program_multiplying_expression ( ( PLUS | MINUS ) program_multiplying_expression )* ;
    public final RParser.program_adding_expression_return program_adding_expression() throws RecognitionException {
        RParser.program_adding_expression_return retval = new RParser.program_adding_expression_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        Token PLUS1001=null;
        Token MINUS1002=null;
        RParser.program_multiplying_expression_return program_multiplying_expression1000 = null;

        RParser.program_multiplying_expression_return program_multiplying_expression1003 = null;


        ColsAST PLUS1001_tree=null;
        ColsAST MINUS1002_tree=null;

        try {
            // RParser.g:1952:5: ( program_multiplying_expression ( ( PLUS | MINUS ) program_multiplying_expression )* )
            // RParser.g:1952:9: program_multiplying_expression ( ( PLUS | MINUS ) program_multiplying_expression )*
            {
            root_0 = (ColsAST)adaptor.nil();

            pushFollow(FOLLOW_program_multiplying_expression_in_program_adding_expression13976);
            program_multiplying_expression1000=program_multiplying_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, program_multiplying_expression1000.getTree());
            // RParser.g:1953:9: ( ( PLUS | MINUS ) program_multiplying_expression )*
            loop265:
            do {
                int alt265=2;
                int LA265_0 = input.LA(1);

                if ( ((LA265_0>=PLUS && LA265_0<=MINUS)) ) {
                    alt265=1;
                }


                switch (alt265) {
            	case 1 :
            	    // RParser.g:1953:13: ( PLUS | MINUS ) program_multiplying_expression
            	    {
            	    // RParser.g:1953:13: ( PLUS | MINUS )
            	    int alt264=2;
            	    int LA264_0 = input.LA(1);

            	    if ( (LA264_0==PLUS) ) {
            	        alt264=1;
            	    }
            	    else if ( (LA264_0==MINUS) ) {
            	        alt264=2;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 264, 0, input);

            	        throw nvae;
            	    }
            	    switch (alt264) {
            	        case 1 :
            	            // RParser.g:1953:17: PLUS
            	            {
            	            PLUS1001=(Token)match(input,PLUS,FOLLOW_PLUS_in_program_adding_expression13994); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            PLUS1001_tree = (ColsAST)adaptor.create(PLUS1001);
            	            root_0 = (ColsAST)adaptor.becomeRoot(PLUS1001_tree, root_0);
            	            }

            	            }
            	            break;
            	        case 2 :
            	            // RParser.g:1954:17: MINUS
            	            {
            	            MINUS1002=(Token)match(input,MINUS,FOLLOW_MINUS_in_program_adding_expression14013); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            MINUS1002_tree = (ColsAST)adaptor.create(MINUS1002);
            	            root_0 = (ColsAST)adaptor.becomeRoot(MINUS1002_tree, root_0);
            	            }

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_program_multiplying_expression_in_program_adding_expression14042);
            	    program_multiplying_expression1003=program_multiplying_expression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, program_multiplying_expression1003.getTree());

            	    }
            	    break;

            	default :
            	    break loop265;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (ColsAST)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "program_adding_expression"

    public static class program_multiplying_expression_return extends ParserRuleReturnScope {
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "program_multiplying_expression"
    // RParser.g:1960:1: program_multiplying_expression : program_exponential_expression ( ( MULTIPLY | DIVIDE | MOD | REM | DIV ) program_exponential_expression )* ;
    public final RParser.program_multiplying_expression_return program_multiplying_expression() throws RecognitionException {
        RParser.program_multiplying_expression_return retval = new RParser.program_multiplying_expression_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        Token MULTIPLY1005=null;
        Token DIVIDE1006=null;
        Token MOD1007=null;
        Token REM1008=null;
        Token DIV1009=null;
        RParser.program_exponential_expression_return program_exponential_expression1004 = null;

        RParser.program_exponential_expression_return program_exponential_expression1010 = null;


        ColsAST MULTIPLY1005_tree=null;
        ColsAST DIVIDE1006_tree=null;
        ColsAST MOD1007_tree=null;
        ColsAST REM1008_tree=null;
        ColsAST DIV1009_tree=null;

        try {
            // RParser.g:1961:5: ( program_exponential_expression ( ( MULTIPLY | DIVIDE | MOD | REM | DIV ) program_exponential_expression )* )
            // RParser.g:1961:9: program_exponential_expression ( ( MULTIPLY | DIVIDE | MOD | REM | DIV ) program_exponential_expression )*
            {
            root_0 = (ColsAST)adaptor.nil();

            pushFollow(FOLLOW_program_exponential_expression_in_program_multiplying_expression14072);
            program_exponential_expression1004=program_exponential_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, program_exponential_expression1004.getTree());
            // RParser.g:1962:9: ( ( MULTIPLY | DIVIDE | MOD | REM | DIV ) program_exponential_expression )*
            loop267:
            do {
                int alt267=2;
                int LA267_0 = input.LA(1);

                if ( (LA267_0==DIV||LA267_0==MOD||LA267_0==REM||(LA267_0>=MULTIPLY && LA267_0<=DIVIDE)) ) {
                    alt267=1;
                }


                switch (alt267) {
            	case 1 :
            	    // RParser.g:1962:13: ( MULTIPLY | DIVIDE | MOD | REM | DIV ) program_exponential_expression
            	    {
            	    // RParser.g:1962:13: ( MULTIPLY | DIVIDE | MOD | REM | DIV )
            	    int alt266=5;
            	    switch ( input.LA(1) ) {
            	    case MULTIPLY:
            	        {
            	        alt266=1;
            	        }
            	        break;
            	    case DIVIDE:
            	        {
            	        alt266=2;
            	        }
            	        break;
            	    case MOD:
            	        {
            	        alt266=3;
            	        }
            	        break;
            	    case REM:
            	        {
            	        alt266=4;
            	        }
            	        break;
            	    case DIV:
            	        {
            	        alt266=5;
            	        }
            	        break;
            	    default:
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 266, 0, input);

            	        throw nvae;
            	    }

            	    switch (alt266) {
            	        case 1 :
            	            // RParser.g:1962:17: MULTIPLY
            	            {
            	            MULTIPLY1005=(Token)match(input,MULTIPLY,FOLLOW_MULTIPLY_in_program_multiplying_expression14090); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            MULTIPLY1005_tree = (ColsAST)adaptor.create(MULTIPLY1005);
            	            root_0 = (ColsAST)adaptor.becomeRoot(MULTIPLY1005_tree, root_0);
            	            }

            	            }
            	            break;
            	        case 2 :
            	            // RParser.g:1963:17: DIVIDE
            	            {
            	            DIVIDE1006=(Token)match(input,DIVIDE,FOLLOW_DIVIDE_in_program_multiplying_expression14110); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            DIVIDE1006_tree = (ColsAST)adaptor.create(DIVIDE1006);
            	            root_0 = (ColsAST)adaptor.becomeRoot(DIVIDE1006_tree, root_0);
            	            }

            	            }
            	            break;
            	        case 3 :
            	            // RParser.g:1964:17: MOD
            	            {
            	            MOD1007=(Token)match(input,MOD,FOLLOW_MOD_in_program_multiplying_expression14129); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            MOD1007_tree = (ColsAST)adaptor.create(MOD1007);
            	            root_0 = (ColsAST)adaptor.becomeRoot(MOD1007_tree, root_0);
            	            }

            	            }
            	            break;
            	        case 4 :
            	            // RParser.g:1965:17: REM
            	            {
            	            REM1008=(Token)match(input,REM,FOLLOW_REM_in_program_multiplying_expression14148); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            REM1008_tree = (ColsAST)adaptor.create(REM1008);
            	            root_0 = (ColsAST)adaptor.becomeRoot(REM1008_tree, root_0);
            	            }

            	            }
            	            break;
            	        case 5 :
            	            // RParser.g:1966:17: DIV
            	            {
            	            DIV1009=(Token)match(input,DIV,FOLLOW_DIV_in_program_multiplying_expression14167); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            DIV1009_tree = (ColsAST)adaptor.create(DIV1009);
            	            root_0 = (ColsAST)adaptor.becomeRoot(DIV1009_tree, root_0);
            	            }

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_program_exponential_expression_in_program_multiplying_expression14196);
            	    program_exponential_expression1010=program_exponential_expression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, program_exponential_expression1010.getTree());

            	    }
            	    break;

            	default :
            	    break loop267;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (ColsAST)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "program_multiplying_expression"

    public static class program_exponential_expression_return extends ParserRuleReturnScope {
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "program_exponential_expression"
    // RParser.g:1972:1: program_exponential_expression : program_unary_expression ( EXP program_exponential_expression )? ;
    public final RParser.program_exponential_expression_return program_exponential_expression() throws RecognitionException {
        RParser.program_exponential_expression_return retval = new RParser.program_exponential_expression_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        Token EXP1012=null;
        RParser.program_unary_expression_return program_unary_expression1011 = null;

        RParser.program_exponential_expression_return program_exponential_expression1013 = null;


        ColsAST EXP1012_tree=null;

        try {
            // RParser.g:1973:5: ( program_unary_expression ( EXP program_exponential_expression )? )
            // RParser.g:1973:9: program_unary_expression ( EXP program_exponential_expression )?
            {
            root_0 = (ColsAST)adaptor.nil();

            pushFollow(FOLLOW_program_unary_expression_in_program_exponential_expression14226);
            program_unary_expression1011=program_unary_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, program_unary_expression1011.getTree());
            // RParser.g:1974:9: ( EXP program_exponential_expression )?
            int alt268=2;
            int LA268_0 = input.LA(1);

            if ( (LA268_0==EXP) ) {
                alt268=1;
            }
            switch (alt268) {
                case 1 :
                    // RParser.g:1974:10: EXP program_exponential_expression
                    {
                    EXP1012=(Token)match(input,EXP,FOLLOW_EXP_in_program_exponential_expression14237); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    EXP1012_tree = (ColsAST)adaptor.create(EXP1012);
                    root_0 = (ColsAST)adaptor.becomeRoot(EXP1012_tree, root_0);
                    }
                    pushFollow(FOLLOW_program_exponential_expression_in_program_exponential_expression14240);
                    program_exponential_expression1013=program_exponential_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, program_exponential_expression1013.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (ColsAST)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "program_exponential_expression"

    public static class program_unary_expression_return extends ParserRuleReturnScope {
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "program_unary_expression"
    // RParser.g:1977:1: program_unary_expression : ( program_primitive_expression | NOT program_unary_expression | m= MINUS program_unary_expression -> ^( UNARY_MINUS[$m] program_unary_expression ) );
    public final RParser.program_unary_expression_return program_unary_expression() throws RecognitionException {
        RParser.program_unary_expression_return retval = new RParser.program_unary_expression_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        Token m=null;
        Token NOT1015=null;
        RParser.program_primitive_expression_return program_primitive_expression1014 = null;

        RParser.program_unary_expression_return program_unary_expression1016 = null;

        RParser.program_unary_expression_return program_unary_expression1017 = null;


        ColsAST m_tree=null;
        ColsAST NOT1015_tree=null;
        RewriteRuleTokenStream stream_MINUS=new RewriteRuleTokenStream(adaptor,"token MINUS");
        RewriteRuleSubtreeStream stream_program_unary_expression=new RewriteRuleSubtreeStream(adaptor,"rule program_unary_expression");
        try {
            // RParser.g:1978:5: ( program_primitive_expression | NOT program_unary_expression | m= MINUS program_unary_expression -> ^( UNARY_MINUS[$m] program_unary_expression ) )
            int alt269=3;
            switch ( input.LA(1) ) {
            case IDENTIFIER:
            case NUMERIC_LITERAL:
            case CHARACTER_LITERAL:
            case LPAREN:
            case STRING_LITERAL:
                {
                alt269=1;
                }
                break;
            case NOT:
                {
                alt269=2;
                }
                break;
            case MINUS:
                {
                alt269=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 269, 0, input);

                throw nvae;
            }

            switch (alt269) {
                case 1 :
                    // RParser.g:1978:9: program_primitive_expression
                    {
                    root_0 = (ColsAST)adaptor.nil();

                    pushFollow(FOLLOW_program_primitive_expression_in_program_unary_expression14261);
                    program_primitive_expression1014=program_primitive_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, program_primitive_expression1014.getTree());

                    }
                    break;
                case 2 :
                    // RParser.g:1979:9: NOT program_unary_expression
                    {
                    root_0 = (ColsAST)adaptor.nil();

                    NOT1015=(Token)match(input,NOT,FOLLOW_NOT_in_program_unary_expression14271); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NOT1015_tree = (ColsAST)adaptor.create(NOT1015);
                    root_0 = (ColsAST)adaptor.becomeRoot(NOT1015_tree, root_0);
                    }
                    pushFollow(FOLLOW_program_unary_expression_in_program_unary_expression14274);
                    program_unary_expression1016=program_unary_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, program_unary_expression1016.getTree());

                    }
                    break;
                case 3 :
                    // RParser.g:1980:9: m= MINUS program_unary_expression
                    {
                    m=(Token)match(input,MINUS,FOLLOW_MINUS_in_program_unary_expression14286); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_MINUS.add(m);

                    pushFollow(FOLLOW_program_unary_expression_in_program_unary_expression14288);
                    program_unary_expression1017=program_unary_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_program_unary_expression.add(program_unary_expression1017.getTree());


                    // AST REWRITE
                    // elements: program_unary_expression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (ColsAST)adaptor.nil();
                    // 1980:42: -> ^( UNARY_MINUS[$m] program_unary_expression )
                    {
                        // RParser.g:1980:45: ^( UNARY_MINUS[$m] program_unary_expression )
                        {
                        ColsAST root_1 = (ColsAST)adaptor.nil();
                        root_1 = (ColsAST)adaptor.becomeRoot((ColsAST)adaptor.create(UNARY_MINUS, m), root_1);

                        adaptor.addChild(root_1, stream_program_unary_expression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (ColsAST)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "program_unary_expression"

    public static class program_primitive_expression_return extends ParserRuleReturnScope {
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "program_primitive_expression"
    // RParser.g:1983:1: program_primitive_expression : ( program_literal_expression | program_variable_expression | program_nested_expression );
    public final RParser.program_primitive_expression_return program_primitive_expression() throws RecognitionException {
        RParser.program_primitive_expression_return retval = new RParser.program_primitive_expression_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        RParser.program_literal_expression_return program_literal_expression1018 = null;

        RParser.program_variable_expression_return program_variable_expression1019 = null;

        RParser.program_nested_expression_return program_nested_expression1020 = null;



        try {
            // RParser.g:1984:5: ( program_literal_expression | program_variable_expression | program_nested_expression )
            int alt270=3;
            switch ( input.LA(1) ) {
            case NUMERIC_LITERAL:
            case CHARACTER_LITERAL:
            case STRING_LITERAL:
                {
                alt270=1;
                }
                break;
            case IDENTIFIER:
                {
                alt270=2;
                }
                break;
            case LPAREN:
                {
                alt270=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 270, 0, input);

                throw nvae;
            }

            switch (alt270) {
                case 1 :
                    // RParser.g:1984:9: program_literal_expression
                    {
                    root_0 = (ColsAST)adaptor.nil();

                    pushFollow(FOLLOW_program_literal_expression_in_program_primitive_expression14316);
                    program_literal_expression1018=program_literal_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, program_literal_expression1018.getTree());

                    }
                    break;
                case 2 :
                    // RParser.g:1985:9: program_variable_expression
                    {
                    root_0 = (ColsAST)adaptor.nil();

                    pushFollow(FOLLOW_program_variable_expression_in_program_primitive_expression14326);
                    program_variable_expression1019=program_variable_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, program_variable_expression1019.getTree());

                    }
                    break;
                case 3 :
                    // RParser.g:1986:9: program_nested_expression
                    {
                    root_0 = (ColsAST)adaptor.nil();

                    pushFollow(FOLLOW_program_nested_expression_in_program_primitive_expression14336);
                    program_nested_expression1020=program_nested_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, program_nested_expression1020.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (ColsAST)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "program_primitive_expression"

    public static class program_variable_expression_return extends ParserRuleReturnScope {
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "program_variable_expression"
    // RParser.g:1989:1: program_variable_expression : ( ( ident ( DOT ident )* LPAREN )=> program_dot_expression | variable_expression );
    public final RParser.program_variable_expression_return program_variable_expression() throws RecognitionException {
        RParser.program_variable_expression_return retval = new RParser.program_variable_expression_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        RParser.program_dot_expression_return program_dot_expression1021 = null;

        RParser.variable_expression_return variable_expression1022 = null;



        try {
            // RParser.g:1990:5: ( ( ident ( DOT ident )* LPAREN )=> program_dot_expression | variable_expression )
            int alt271=2;
            int LA271_0 = input.LA(1);

            if ( (LA271_0==IDENTIFIER) ) {
                int LA271_1 = input.LA(2);

                if ( (synpred22_RParser()) ) {
                    alt271=1;
                }
                else if ( (true) ) {
                    alt271=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 271, 1, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 271, 0, input);

                throw nvae;
            }
            switch (alt271) {
                case 1 :
                    // RParser.g:1990:9: ( ident ( DOT ident )* LPAREN )=> program_dot_expression
                    {
                    root_0 = (ColsAST)adaptor.nil();

                    pushFollow(FOLLOW_program_dot_expression_in_program_variable_expression14370);
                    program_dot_expression1021=program_dot_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, program_dot_expression1021.getTree());

                    }
                    break;
                case 2 :
                    // RParser.g:1991:9: variable_expression
                    {
                    root_0 = (ColsAST)adaptor.nil();

                    pushFollow(FOLLOW_variable_expression_in_program_variable_expression14380);
                    variable_expression1022=variable_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, variable_expression1022.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (ColsAST)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "program_variable_expression"

    public static class program_dot_expression_return extends ParserRuleReturnScope {
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "program_dot_expression"
    // RParser.g:1994:1: program_dot_expression : ( ( ident DOT )=> ident ( DOT program_function_expression )+ -> ^( PROGDOT ident ( program_function_expression )+ ) | program_function_expression );
    public final RParser.program_dot_expression_return program_dot_expression() throws RecognitionException {
        RParser.program_dot_expression_return retval = new RParser.program_dot_expression_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        Token DOT1024=null;
        RParser.ident_return ident1023 = null;

        RParser.program_function_expression_return program_function_expression1025 = null;

        RParser.program_function_expression_return program_function_expression1026 = null;


        ColsAST DOT1024_tree=null;
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
        RewriteRuleSubtreeStream stream_program_function_expression=new RewriteRuleSubtreeStream(adaptor,"rule program_function_expression");
        try {
            // RParser.g:1995:5: ( ( ident DOT )=> ident ( DOT program_function_expression )+ -> ^( PROGDOT ident ( program_function_expression )+ ) | program_function_expression )
            int alt273=2;
            int LA273_0 = input.LA(1);

            if ( (LA273_0==IDENTIFIER) ) {
                int LA273_1 = input.LA(2);

                if ( (synpred23_RParser()) ) {
                    alt273=1;
                }
                else if ( (true) ) {
                    alt273=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 273, 1, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 273, 0, input);

                throw nvae;
            }
            switch (alt273) {
                case 1 :
                    // RParser.g:1995:9: ( ident DOT )=> ident ( DOT program_function_expression )+
                    {
                    pushFollow(FOLLOW_ident_in_program_dot_expression14415);
                    ident1023=ident();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_ident.add(ident1023.getTree());
                    // RParser.g:1997:9: ( DOT program_function_expression )+
                    int cnt272=0;
                    loop272:
                    do {
                        int alt272=2;
                        int LA272_0 = input.LA(1);

                        if ( (LA272_0==DOT) ) {
                            alt272=1;
                        }


                        switch (alt272) {
                    	case 1 :
                    	    // RParser.g:1997:10: DOT program_function_expression
                    	    {
                    	    DOT1024=(Token)match(input,DOT,FOLLOW_DOT_in_program_dot_expression14426); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_DOT.add(DOT1024);

                    	    pushFollow(FOLLOW_program_function_expression_in_program_dot_expression14428);
                    	    program_function_expression1025=program_function_expression();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_program_function_expression.add(program_function_expression1025.getTree());

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt272 >= 1 ) break loop272;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(272, input);
                                throw eee;
                        }
                        cnt272++;
                    } while (true);



                    // AST REWRITE
                    // elements: ident, program_function_expression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (ColsAST)adaptor.nil();
                    // 1997:44: -> ^( PROGDOT ident ( program_function_expression )+ )
                    {
                        // RParser.g:1997:47: ^( PROGDOT ident ( program_function_expression )+ )
                        {
                        ColsAST root_1 = (ColsAST)adaptor.nil();
                        root_1 = (ColsAST)adaptor.becomeRoot((ColsAST)adaptor.create(PROGDOT, "PROGDOT"), root_1);

                        adaptor.addChild(root_1, stream_ident.nextTree());
                        if ( !(stream_program_function_expression.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_program_function_expression.hasNext() ) {
                            adaptor.addChild(root_1, stream_program_function_expression.nextTree());

                        }
                        stream_program_function_expression.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // RParser.g:1998:9: program_function_expression
                    {
                    root_0 = (ColsAST)adaptor.nil();

                    pushFollow(FOLLOW_program_function_expression_in_program_dot_expression14451);
                    program_function_expression1026=program_function_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, program_function_expression1026.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (ColsAST)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "program_dot_expression"

    public static class program_function_expression_return extends ParserRuleReturnScope {
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "program_function_expression"
    // RParser.g:2001:1: program_function_expression : ( ident program_function_argument_list -> ^( FUNCTION ident program_function_argument_list ) ) ;
    public final RParser.program_function_expression_return program_function_expression() throws RecognitionException {
        RParser.program_function_expression_return retval = new RParser.program_function_expression_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        RParser.ident_return ident1027 = null;

        RParser.program_function_argument_list_return program_function_argument_list1028 = null;


        RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
        RewriteRuleSubtreeStream stream_program_function_argument_list=new RewriteRuleSubtreeStream(adaptor,"rule program_function_argument_list");
        try {
            // RParser.g:2002:5: ( ( ident program_function_argument_list -> ^( FUNCTION ident program_function_argument_list ) ) )
            // RParser.g:2002:9: ( ident program_function_argument_list -> ^( FUNCTION ident program_function_argument_list ) )
            {
            // RParser.g:2002:9: ( ident program_function_argument_list -> ^( FUNCTION ident program_function_argument_list ) )
            // RParser.g:2002:11: ident program_function_argument_list
            {
            pushFollow(FOLLOW_ident_in_program_function_expression14472);
            ident1027=ident();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_ident.add(ident1027.getTree());
            pushFollow(FOLLOW_program_function_argument_list_in_program_function_expression14474);
            program_function_argument_list1028=program_function_argument_list();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_program_function_argument_list.add(program_function_argument_list1028.getTree());


            // AST REWRITE
            // elements: ident, program_function_argument_list
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (ColsAST)adaptor.nil();
            // 2002:48: -> ^( FUNCTION ident program_function_argument_list )
            {
                // RParser.g:2002:51: ^( FUNCTION ident program_function_argument_list )
                {
                ColsAST root_1 = (ColsAST)adaptor.nil();
                root_1 = (ColsAST)adaptor.becomeRoot((ColsAST)adaptor.create(FUNCTION, "FUNCTION"), root_1);

                adaptor.addChild(root_1, stream_ident.nextTree());
                adaptor.addChild(root_1, stream_program_function_argument_list.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (ColsAST)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "program_function_expression"

    public static class program_function_argument_list_return extends ParserRuleReturnScope {
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "program_function_argument_list"
    // RParser.g:2006:1: program_function_argument_list : LPAREN ( program_expression ( COMMA program_expression )* )? RPAREN -> ^( PARAMS ( program_expression )* ) ;
    public final RParser.program_function_argument_list_return program_function_argument_list() throws RecognitionException {
        RParser.program_function_argument_list_return retval = new RParser.program_function_argument_list_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        Token LPAREN1029=null;
        Token COMMA1031=null;
        Token RPAREN1033=null;
        RParser.program_expression_return program_expression1030 = null;

        RParser.program_expression_return program_expression1032 = null;


        ColsAST LPAREN1029_tree=null;
        ColsAST COMMA1031_tree=null;
        ColsAST RPAREN1033_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_program_expression=new RewriteRuleSubtreeStream(adaptor,"rule program_expression");
        try {
            // RParser.g:2007:5: ( LPAREN ( program_expression ( COMMA program_expression )* )? RPAREN -> ^( PARAMS ( program_expression )* ) )
            // RParser.g:2007:9: LPAREN ( program_expression ( COMMA program_expression )* )? RPAREN
            {
            LPAREN1029=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_program_function_argument_list14513); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN1029);

            // RParser.g:2007:16: ( program_expression ( COMMA program_expression )* )?
            int alt275=2;
            int LA275_0 = input.LA(1);

            if ( (LA275_0==NOT||LA275_0==IDENTIFIER||LA275_0==NUMERIC_LITERAL||LA275_0==CHARACTER_LITERAL||LA275_0==LPAREN||LA275_0==MINUS||LA275_0==STRING_LITERAL) ) {
                alt275=1;
            }
            switch (alt275) {
                case 1 :
                    // RParser.g:2007:17: program_expression ( COMMA program_expression )*
                    {
                    pushFollow(FOLLOW_program_expression_in_program_function_argument_list14516);
                    program_expression1030=program_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_program_expression.add(program_expression1030.getTree());
                    // RParser.g:2007:36: ( COMMA program_expression )*
                    loop274:
                    do {
                        int alt274=2;
                        int LA274_0 = input.LA(1);

                        if ( (LA274_0==COMMA) ) {
                            alt274=1;
                        }


                        switch (alt274) {
                    	case 1 :
                    	    // RParser.g:2007:37: COMMA program_expression
                    	    {
                    	    COMMA1031=(Token)match(input,COMMA,FOLLOW_COMMA_in_program_function_argument_list14519); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA1031);

                    	    pushFollow(FOLLOW_program_expression_in_program_function_argument_list14521);
                    	    program_expression1032=program_expression();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_program_expression.add(program_expression1032.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop274;
                        }
                    } while (true);


                    }
                    break;

            }

            RPAREN1033=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_program_function_argument_list14527); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN1033);



            // AST REWRITE
            // elements: program_expression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (ColsAST)adaptor.nil();
            // 2008:9: -> ^( PARAMS ( program_expression )* )
            {
                // RParser.g:2008:12: ^( PARAMS ( program_expression )* )
                {
                ColsAST root_1 = (ColsAST)adaptor.nil();
                root_1 = (ColsAST)adaptor.becomeRoot((ColsAST)adaptor.create(PARAMS, "PARAMS"), root_1);

                // RParser.g:2008:21: ( program_expression )*
                while ( stream_program_expression.hasNext() ) {
                    adaptor.addChild(root_1, stream_program_expression.nextTree());

                }
                stream_program_expression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (ColsAST)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "program_function_argument_list"

    public static class program_nested_expression_return extends ParserRuleReturnScope {
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "program_nested_expression"
    // RParser.g:2011:1: program_nested_expression : LPAREN program_expression RPAREN -> ^( NESTED program_expression ) ;
    public final RParser.program_nested_expression_return program_nested_expression() throws RecognitionException {
        RParser.program_nested_expression_return retval = new RParser.program_nested_expression_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        Token LPAREN1034=null;
        Token RPAREN1036=null;
        RParser.program_expression_return program_expression1035 = null;


        ColsAST LPAREN1034_tree=null;
        ColsAST RPAREN1036_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_program_expression=new RewriteRuleSubtreeStream(adaptor,"rule program_expression");
        try {
            // RParser.g:2012:5: ( LPAREN program_expression RPAREN -> ^( NESTED program_expression ) )
            // RParser.g:2012:9: LPAREN program_expression RPAREN
            {
            LPAREN1034=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_program_nested_expression14563); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN1034);

            pushFollow(FOLLOW_program_expression_in_program_nested_expression14565);
            program_expression1035=program_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_program_expression.add(program_expression1035.getTree());
            RPAREN1036=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_program_nested_expression14567); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN1036);



            // AST REWRITE
            // elements: program_expression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (ColsAST)adaptor.nil();
            // 2012:42: -> ^( NESTED program_expression )
            {
                // RParser.g:2012:45: ^( NESTED program_expression )
                {
                ColsAST root_1 = (ColsAST)adaptor.nil();
                root_1 = (ColsAST)adaptor.becomeRoot((ColsAST)adaptor.create(NESTED, "NESTED"), root_1);

                adaptor.addChild(root_1, stream_program_expression.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (ColsAST)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "program_nested_expression"

    public static class variable_expression_return extends ParserRuleReturnScope {
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "variable_expression"
    // RParser.g:2019:1: variable_expression : ( ( variable_array_expression DOT )=> variable_array_expression ( DOT variable_array_expression )+ -> ^( VARDOT ( variable_array_expression )+ ) | variable_array_expression );
    public final RParser.variable_expression_return variable_expression() throws RecognitionException {
        RParser.variable_expression_return retval = new RParser.variable_expression_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        Token DOT1038=null;
        RParser.variable_array_expression_return variable_array_expression1037 = null;

        RParser.variable_array_expression_return variable_array_expression1039 = null;

        RParser.variable_array_expression_return variable_array_expression1040 = null;


        ColsAST DOT1038_tree=null;
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleSubtreeStream stream_variable_array_expression=new RewriteRuleSubtreeStream(adaptor,"rule variable_array_expression");
        try {
            // RParser.g:2020:5: ( ( variable_array_expression DOT )=> variable_array_expression ( DOT variable_array_expression )+ -> ^( VARDOT ( variable_array_expression )+ ) | variable_array_expression )
            int alt277=2;
            int LA277_0 = input.LA(1);

            if ( (LA277_0==IDENTIFIER) ) {
                int LA277_1 = input.LA(2);

                if ( (synpred24_RParser()) ) {
                    alt277=1;
                }
                else if ( (true) ) {
                    alt277=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 277, 1, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 277, 0, input);

                throw nvae;
            }
            switch (alt277) {
                case 1 :
                    // RParser.g:2020:9: ( variable_array_expression DOT )=> variable_array_expression ( DOT variable_array_expression )+
                    {
                    pushFollow(FOLLOW_variable_array_expression_in_variable_expression14614);
                    variable_array_expression1037=variable_array_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_variable_array_expression.add(variable_array_expression1037.getTree());
                    // RParser.g:2022:9: ( DOT variable_array_expression )+
                    int cnt276=0;
                    loop276:
                    do {
                        int alt276=2;
                        int LA276_0 = input.LA(1);

                        if ( (LA276_0==DOT) ) {
                            alt276=1;
                        }


                        switch (alt276) {
                    	case 1 :
                    	    // RParser.g:2022:10: DOT variable_array_expression
                    	    {
                    	    DOT1038=(Token)match(input,DOT,FOLLOW_DOT_in_variable_expression14625); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_DOT.add(DOT1038);

                    	    pushFollow(FOLLOW_variable_array_expression_in_variable_expression14627);
                    	    variable_array_expression1039=variable_array_expression();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_variable_array_expression.add(variable_array_expression1039.getTree());

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt276 >= 1 ) break loop276;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(276, input);
                                throw eee;
                        }
                        cnt276++;
                    } while (true);



                    // AST REWRITE
                    // elements: variable_array_expression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (ColsAST)adaptor.nil();
                    // 2022:42: -> ^( VARDOT ( variable_array_expression )+ )
                    {
                        // RParser.g:2022:45: ^( VARDOT ( variable_array_expression )+ )
                        {
                        ColsAST root_1 = (ColsAST)adaptor.nil();
                        root_1 = (ColsAST)adaptor.becomeRoot((ColsAST)adaptor.create(VARDOT, "VARDOT"), root_1);

                        if ( !(stream_variable_array_expression.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_variable_array_expression.hasNext() ) {
                            adaptor.addChild(root_1, stream_variable_array_expression.nextTree());

                        }
                        stream_variable_array_expression.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // RParser.g:2023:9: variable_array_expression
                    {
                    root_0 = (ColsAST)adaptor.nil();

                    pushFollow(FOLLOW_variable_array_expression_in_variable_expression14648);
                    variable_array_expression1040=variable_array_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, variable_array_expression1040.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (ColsAST)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "variable_expression"

    public static class variable_array_expression_return extends ParserRuleReturnScope {
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "variable_array_expression"
    // RParser.g:2026:1: variable_array_expression : ( ident -> ^( ident ) ) ( variable_array_argument_list -> ^( ARRAYFUNCTION ident variable_array_argument_list ) )? ;
    public final RParser.variable_array_expression_return variable_array_expression() throws RecognitionException {
        RParser.variable_array_expression_return retval = new RParser.variable_array_expression_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        RParser.ident_return ident1041 = null;

        RParser.variable_array_argument_list_return variable_array_argument_list1042 = null;


        RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
        RewriteRuleSubtreeStream stream_variable_array_argument_list=new RewriteRuleSubtreeStream(adaptor,"rule variable_array_argument_list");
        try {
            // RParser.g:2027:5: ( ( ident -> ^( ident ) ) ( variable_array_argument_list -> ^( ARRAYFUNCTION ident variable_array_argument_list ) )? )
            // RParser.g:2027:9: ( ident -> ^( ident ) ) ( variable_array_argument_list -> ^( ARRAYFUNCTION ident variable_array_argument_list ) )?
            {
            // RParser.g:2027:9: ( ident -> ^( ident ) )
            // RParser.g:2027:10: ident
            {
            pushFollow(FOLLOW_ident_in_variable_array_expression14668);
            ident1041=ident();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_ident.add(ident1041.getTree());


            // AST REWRITE
            // elements: ident
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (ColsAST)adaptor.nil();
            // 2027:16: -> ^( ident )
            {
                // RParser.g:2027:19: ^( ident )
                {
                ColsAST root_1 = (ColsAST)adaptor.nil();
                root_1 = (ColsAST)adaptor.becomeRoot(stream_ident.nextNode(), root_1);

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            // RParser.g:2028:9: ( variable_array_argument_list -> ^( ARRAYFUNCTION ident variable_array_argument_list ) )?
            int alt278=2;
            int LA278_0 = input.LA(1);

            if ( (LA278_0==LSQBRACK) ) {
                alt278=1;
            }
            switch (alt278) {
                case 1 :
                    // RParser.g:2028:13: variable_array_argument_list
                    {
                    pushFollow(FOLLOW_variable_array_argument_list_in_variable_array_expression14689);
                    variable_array_argument_list1042=variable_array_argument_list();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_variable_array_argument_list.add(variable_array_argument_list1042.getTree());


                    // AST REWRITE
                    // elements: variable_array_argument_list, ident
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (ColsAST)adaptor.nil();
                    // 2028:42: -> ^( ARRAYFUNCTION ident variable_array_argument_list )
                    {
                        // RParser.g:2028:45: ^( ARRAYFUNCTION ident variable_array_argument_list )
                        {
                        ColsAST root_1 = (ColsAST)adaptor.nil();
                        root_1 = (ColsAST)adaptor.becomeRoot((ColsAST)adaptor.create(ARRAYFUNCTION, "ARRAYFUNCTION"), root_1);

                        adaptor.addChild(root_1, stream_ident.nextTree());
                        adaptor.addChild(root_1, stream_variable_array_argument_list.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (ColsAST)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "variable_array_expression"

    public static class variable_array_argument_list_return extends ParserRuleReturnScope {
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "variable_array_argument_list"
    // RParser.g:2032:1: variable_array_argument_list : LSQBRACK ( program_expression )? RSQBRACK -> ^( PARAMS ( program_expression )? ) ;
    public final RParser.variable_array_argument_list_return variable_array_argument_list() throws RecognitionException {
        RParser.variable_array_argument_list_return retval = new RParser.variable_array_argument_list_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        Token LSQBRACK1043=null;
        Token RSQBRACK1045=null;
        RParser.program_expression_return program_expression1044 = null;


        ColsAST LSQBRACK1043_tree=null;
        ColsAST RSQBRACK1045_tree=null;
        RewriteRuleTokenStream stream_RSQBRACK=new RewriteRuleTokenStream(adaptor,"token RSQBRACK");
        RewriteRuleTokenStream stream_LSQBRACK=new RewriteRuleTokenStream(adaptor,"token LSQBRACK");
        RewriteRuleSubtreeStream stream_program_expression=new RewriteRuleSubtreeStream(adaptor,"rule program_expression");
        try {
            // RParser.g:2033:5: ( LSQBRACK ( program_expression )? RSQBRACK -> ^( PARAMS ( program_expression )? ) )
            // RParser.g:2033:9: LSQBRACK ( program_expression )? RSQBRACK
            {
            LSQBRACK1043=(Token)match(input,LSQBRACK,FOLLOW_LSQBRACK_in_variable_array_argument_list14729); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LSQBRACK.add(LSQBRACK1043);

            // RParser.g:2033:18: ( program_expression )?
            int alt279=2;
            int LA279_0 = input.LA(1);

            if ( (LA279_0==NOT||LA279_0==IDENTIFIER||LA279_0==NUMERIC_LITERAL||LA279_0==CHARACTER_LITERAL||LA279_0==LPAREN||LA279_0==MINUS||LA279_0==STRING_LITERAL) ) {
                alt279=1;
            }
            switch (alt279) {
                case 1 :
                    // RParser.g:2033:19: program_expression
                    {
                    pushFollow(FOLLOW_program_expression_in_variable_array_argument_list14732);
                    program_expression1044=program_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_program_expression.add(program_expression1044.getTree());

                    }
                    break;

            }

            RSQBRACK1045=(Token)match(input,RSQBRACK,FOLLOW_RSQBRACK_in_variable_array_argument_list14736); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RSQBRACK.add(RSQBRACK1045);



            // AST REWRITE
            // elements: program_expression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (ColsAST)adaptor.nil();
            // 2033:49: -> ^( PARAMS ( program_expression )? )
            {
                // RParser.g:2033:52: ^( PARAMS ( program_expression )? )
                {
                ColsAST root_1 = (ColsAST)adaptor.nil();
                root_1 = (ColsAST)adaptor.becomeRoot((ColsAST)adaptor.create(PARAMS, "PARAMS"), root_1);

                // RParser.g:2033:61: ( program_expression )?
                if ( stream_program_expression.hasNext() ) {
                    adaptor.addChild(root_1, stream_program_expression.nextTree());

                }
                stream_program_expression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (ColsAST)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "variable_array_argument_list"

    public static class certain_qualified_ident_return extends ParserRuleReturnScope {
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "certain_qualified_ident"
    // RParser.g:2040:1: certain_qualified_ident : ident DOT ident -> ^( IDENTIFIER ident ident ) ;
    public final RParser.certain_qualified_ident_return certain_qualified_ident() throws RecognitionException {
        RParser.certain_qualified_ident_return retval = new RParser.certain_qualified_ident_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        Token DOT1047=null;
        RParser.ident_return ident1046 = null;

        RParser.ident_return ident1048 = null;


        ColsAST DOT1047_tree=null;
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
        try {
            // RParser.g:2041:5: ( ident DOT ident -> ^( IDENTIFIER ident ident ) )
            // RParser.g:2041:9: ident DOT ident
            {
            pushFollow(FOLLOW_ident_in_certain_qualified_ident14768);
            ident1046=ident();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_ident.add(ident1046.getTree());
            DOT1047=(Token)match(input,DOT,FOLLOW_DOT_in_certain_qualified_ident14770); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_DOT.add(DOT1047);

            pushFollow(FOLLOW_ident_in_certain_qualified_ident14772);
            ident1048=ident();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_ident.add(ident1048.getTree());


            // AST REWRITE
            // elements: ident, ident
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (ColsAST)adaptor.nil();
            // 2041:25: -> ^( IDENTIFIER ident ident )
            {
                // RParser.g:2041:28: ^( IDENTIFIER ident ident )
                {
                ColsAST root_1 = (ColsAST)adaptor.nil();
                root_1 = (ColsAST)adaptor.becomeRoot((ColsAST)adaptor.create(IDENTIFIER, "IDENTIFIER"), root_1);

                adaptor.addChild(root_1, stream_ident.nextTree());
                adaptor.addChild(root_1, stream_ident.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (ColsAST)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "certain_qualified_ident"

    public static class qualified_ident_return extends ParserRuleReturnScope {
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "qualified_ident"
    // RParser.g:2044:1: qualified_ident : ident ( DOT ident )? -> ^( IDENTIFIER ident ( ident )? ) ;
    public final RParser.qualified_ident_return qualified_ident() throws RecognitionException {
        RParser.qualified_ident_return retval = new RParser.qualified_ident_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        Token DOT1050=null;
        RParser.ident_return ident1049 = null;

        RParser.ident_return ident1051 = null;


        ColsAST DOT1050_tree=null;
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
        try {
            // RParser.g:2045:5: ( ident ( DOT ident )? -> ^( IDENTIFIER ident ( ident )? ) )
            // RParser.g:2045:9: ident ( DOT ident )?
            {
            pushFollow(FOLLOW_ident_in_qualified_ident14801);
            ident1049=ident();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_ident.add(ident1049.getTree());
            // RParser.g:2045:15: ( DOT ident )?
            int alt280=2;
            int LA280_0 = input.LA(1);

            if ( (LA280_0==DOT) ) {
                alt280=1;
            }
            switch (alt280) {
                case 1 :
                    // RParser.g:2045:16: DOT ident
                    {
                    DOT1050=(Token)match(input,DOT,FOLLOW_DOT_in_qualified_ident14804); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOT.add(DOT1050);

                    pushFollow(FOLLOW_ident_in_qualified_ident14806);
                    ident1051=ident();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_ident.add(ident1051.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: ident, ident
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (ColsAST)adaptor.nil();
            // 2045:28: -> ^( IDENTIFIER ident ( ident )? )
            {
                // RParser.g:2045:31: ^( IDENTIFIER ident ( ident )? )
                {
                ColsAST root_1 = (ColsAST)adaptor.nil();
                root_1 = (ColsAST)adaptor.becomeRoot((ColsAST)adaptor.create(IDENTIFIER, "IDENTIFIER"), root_1);

                adaptor.addChild(root_1, stream_ident.nextTree());
                // RParser.g:2045:50: ( ident )?
                if ( stream_ident.hasNext() ) {
                    adaptor.addChild(root_1, stream_ident.nextTree());

                }
                stream_ident.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (ColsAST)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "qualified_ident"

    public static class ident_return extends ParserRuleReturnScope {
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "ident"
    // RParser.g:2048:1: ident : IDENTIFIER ;
    public final RParser.ident_return ident() throws RecognitionException {
        RParser.ident_return retval = new RParser.ident_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        Token IDENTIFIER1052=null;

        ColsAST IDENTIFIER1052_tree=null;

        try {
            // RParser.g:2049:5: ( IDENTIFIER )
            // RParser.g:2049:9: IDENTIFIER
            {
            root_0 = (ColsAST)adaptor.nil();

            IDENTIFIER1052=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_ident14839); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            IDENTIFIER1052_tree = (ColsAST)adaptor.create(IDENTIFIER1052);
            adaptor.addChild(root_0, IDENTIFIER1052_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (ColsAST)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "ident"

    public static class math_theorem_ident_return extends ParserRuleReturnScope {
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "math_theorem_ident"
    // RParser.g:2052:1: math_theorem_ident : ( ident | NUMERIC_LITERAL );
    public final RParser.math_theorem_ident_return math_theorem_ident() throws RecognitionException {
        RParser.math_theorem_ident_return retval = new RParser.math_theorem_ident_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        Token NUMERIC_LITERAL1054=null;
        RParser.ident_return ident1053 = null;


        ColsAST NUMERIC_LITERAL1054_tree=null;

        try {
            // RParser.g:2053:5: ( ident | NUMERIC_LITERAL )
            int alt281=2;
            int LA281_0 = input.LA(1);

            if ( (LA281_0==IDENTIFIER) ) {
                alt281=1;
            }
            else if ( (LA281_0==NUMERIC_LITERAL) ) {
                alt281=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 281, 0, input);

                throw nvae;
            }
            switch (alt281) {
                case 1 :
                    // RParser.g:2053:9: ident
                    {
                    root_0 = (ColsAST)adaptor.nil();

                    pushFollow(FOLLOW_ident_in_math_theorem_ident14858);
                    ident1053=ident();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, ident1053.getTree());

                    }
                    break;
                case 2 :
                    // RParser.g:2054:9: NUMERIC_LITERAL
                    {
                    root_0 = (ColsAST)adaptor.nil();

                    NUMERIC_LITERAL1054=(Token)match(input,NUMERIC_LITERAL,FOLLOW_NUMERIC_LITERAL_in_math_theorem_ident14868); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NUMERIC_LITERAL1054_tree = (ColsAST)adaptor.create(NUMERIC_LITERAL1054);
                    adaptor.addChild(root_0, NUMERIC_LITERAL1054_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (ColsAST)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "math_theorem_ident"

    public static class proof_module_return extends ParserRuleReturnScope {
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "proof_module"
    // RParser.g:2061:1: proof_module : ( PROOF UNIT id1= ident SEMICOLON ( module_formal_param_section )? ( uses_list )? SEMICOLON -> ^( PROOFS_FOR ident ( module_formal_param_section )? ( uses_list )? ) | PROOFS_FOR id1= ident SEMICOLON ( module_formal_param_section )? ( uses_list )? SEMICOLON );
    public final RParser.proof_module_return proof_module() throws RecognitionException {
        RParser.proof_module_return retval = new RParser.proof_module_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        Token PROOF1055=null;
        Token UNIT1056=null;
        Token SEMICOLON1057=null;
        Token SEMICOLON1060=null;
        Token PROOFS_FOR1061=null;
        Token SEMICOLON1062=null;
        Token SEMICOLON1065=null;
        RParser.ident_return id1 = null;

        RParser.module_formal_param_section_return module_formal_param_section1058 = null;

        RParser.uses_list_return uses_list1059 = null;

        RParser.module_formal_param_section_return module_formal_param_section1063 = null;

        RParser.uses_list_return uses_list1064 = null;


        ColsAST PROOF1055_tree=null;
        ColsAST UNIT1056_tree=null;
        ColsAST SEMICOLON1057_tree=null;
        ColsAST SEMICOLON1060_tree=null;
        ColsAST PROOFS_FOR1061_tree=null;
        ColsAST SEMICOLON1062_tree=null;
        ColsAST SEMICOLON1065_tree=null;
        RewriteRuleTokenStream stream_UNIT=new RewriteRuleTokenStream(adaptor,"token UNIT");
        RewriteRuleTokenStream stream_SEMICOLON=new RewriteRuleTokenStream(adaptor,"token SEMICOLON");
        RewriteRuleTokenStream stream_PROOF=new RewriteRuleTokenStream(adaptor,"token PROOF");
        RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
        RewriteRuleSubtreeStream stream_module_formal_param_section=new RewriteRuleSubtreeStream(adaptor,"rule module_formal_param_section");
        RewriteRuleSubtreeStream stream_uses_list=new RewriteRuleSubtreeStream(adaptor,"rule uses_list");
        try {
            // RParser.g:2062:5: ( PROOF UNIT id1= ident SEMICOLON ( module_formal_param_section )? ( uses_list )? SEMICOLON -> ^( PROOFS_FOR ident ( module_formal_param_section )? ( uses_list )? ) | PROOFS_FOR id1= ident SEMICOLON ( module_formal_param_section )? ( uses_list )? SEMICOLON )
            int alt286=2;
            int LA286_0 = input.LA(1);

            if ( (LA286_0==PROOF) ) {
                alt286=1;
            }
            else if ( (LA286_0==PROOFS_FOR) ) {
                alt286=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 286, 0, input);

                throw nvae;
            }
            switch (alt286) {
                case 1 :
                    // RParser.g:2062:9: PROOF UNIT id1= ident SEMICOLON ( module_formal_param_section )? ( uses_list )? SEMICOLON
                    {
                    PROOF1055=(Token)match(input,PROOF,FOLLOW_PROOF_in_proof_module14895); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_PROOF.add(PROOF1055);

                    UNIT1056=(Token)match(input,UNIT,FOLLOW_UNIT_in_proof_module14897); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_UNIT.add(UNIT1056);

                    pushFollow(FOLLOW_ident_in_proof_module14901);
                    id1=ident();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_ident.add(id1.getTree());
                    SEMICOLON1057=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_proof_module14903); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SEMICOLON.add(SEMICOLON1057);

                    // RParser.g:2063:9: ( module_formal_param_section )?
                    int alt282=2;
                    int LA282_0 = input.LA(1);

                    if ( (LA282_0==LPAREN) ) {
                        alt282=1;
                    }
                    switch (alt282) {
                        case 1 :
                            // RParser.g:2063:9: module_formal_param_section
                            {
                            pushFollow(FOLLOW_module_formal_param_section_in_proof_module14913);
                            module_formal_param_section1058=module_formal_param_section();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_module_formal_param_section.add(module_formal_param_section1058.getTree());

                            }
                            break;

                    }

                    // RParser.g:2064:9: ( uses_list )?
                    int alt283=2;
                    int LA283_0 = input.LA(1);

                    if ( (LA283_0==USES) ) {
                        alt283=1;
                    }
                    switch (alt283) {
                        case 1 :
                            // RParser.g:2064:9: uses_list
                            {
                            pushFollow(FOLLOW_uses_list_in_proof_module14924);
                            uses_list1059=uses_list();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_uses_list.add(uses_list1059.getTree());

                            }
                            break;

                    }

                    SEMICOLON1060=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_proof_module14936); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SEMICOLON.add(SEMICOLON1060);



                    // AST REWRITE
                    // elements: module_formal_param_section, ident, uses_list
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (ColsAST)adaptor.nil();
                    // 2065:19: -> ^( PROOFS_FOR ident ( module_formal_param_section )? ( uses_list )? )
                    {
                        // RParser.g:2066:9: ^( PROOFS_FOR ident ( module_formal_param_section )? ( uses_list )? )
                        {
                        ColsAST root_1 = (ColsAST)adaptor.nil();
                        root_1 = (ColsAST)adaptor.becomeRoot((ColsAST)adaptor.create(PROOFS_FOR, "PROOFS_FOR"), root_1);

                        adaptor.addChild(root_1, stream_ident.nextTree());
                        // RParser.g:2067:9: ( module_formal_param_section )?
                        if ( stream_module_formal_param_section.hasNext() ) {
                            adaptor.addChild(root_1, stream_module_formal_param_section.nextTree());

                        }
                        stream_module_formal_param_section.reset();
                        // RParser.g:2068:9: ( uses_list )?
                        if ( stream_uses_list.hasNext() ) {
                            adaptor.addChild(root_1, stream_uses_list.nextTree());

                        }
                        stream_uses_list.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // RParser.g:2070:9: PROOFS_FOR id1= ident SEMICOLON ( module_formal_param_section )? ( uses_list )? SEMICOLON
                    {
                    root_0 = (ColsAST)adaptor.nil();

                    PROOFS_FOR1061=(Token)match(input,PROOFS_FOR,FOLLOW_PROOFS_FOR_in_proof_module14994); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PROOFS_FOR1061_tree = (ColsAST)adaptor.create(PROOFS_FOR1061);
                    root_0 = (ColsAST)adaptor.becomeRoot(PROOFS_FOR1061_tree, root_0);
                    }
                    pushFollow(FOLLOW_ident_in_proof_module14999);
                    id1=ident();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, id1.getTree());
                    SEMICOLON1062=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_proof_module15001); if (state.failed) return retval;
                    // RParser.g:2071:9: ( module_formal_param_section )?
                    int alt284=2;
                    int LA284_0 = input.LA(1);

                    if ( (LA284_0==LPAREN) ) {
                        alt284=1;
                    }
                    switch (alt284) {
                        case 1 :
                            // RParser.g:2071:9: module_formal_param_section
                            {
                            pushFollow(FOLLOW_module_formal_param_section_in_proof_module15012);
                            module_formal_param_section1063=module_formal_param_section();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, module_formal_param_section1063.getTree());

                            }
                            break;

                    }

                    // RParser.g:2072:9: ( uses_list )?
                    int alt285=2;
                    int LA285_0 = input.LA(1);

                    if ( (LA285_0==USES) ) {
                        alt285=1;
                    }
                    switch (alt285) {
                        case 1 :
                            // RParser.g:2072:9: uses_list
                            {
                            pushFollow(FOLLOW_uses_list_in_proof_module15023);
                            uses_list1064=uses_list();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, uses_list1064.getTree());

                            }
                            break;

                    }

                    SEMICOLON1065=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_proof_module15035); if (state.failed) return retval;

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (ColsAST)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "proof_module"

    public static class proof_module_body_return extends ParserRuleReturnScope {
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "proof_module_body"
    // RParser.g:2076:1: proof_module_body : ( math_item_sequence -> ^( PROOFBODY math_item_sequence ) | proof -> ^( PROOFBODY proof ) ) ;
    public final RParser.proof_module_body_return proof_module_body() throws RecognitionException {
        RParser.proof_module_body_return retval = new RParser.proof_module_body_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        RParser.math_item_sequence_return math_item_sequence1066 = null;

        RParser.proof_return proof1067 = null;


        RewriteRuleSubtreeStream stream_proof=new RewriteRuleSubtreeStream(adaptor,"rule proof");
        RewriteRuleSubtreeStream stream_math_item_sequence=new RewriteRuleSubtreeStream(adaptor,"rule math_item_sequence");
        try {
            // RParser.g:2077:5: ( ( math_item_sequence -> ^( PROOFBODY math_item_sequence ) | proof -> ^( PROOFBODY proof ) ) )
            // RParser.g:2077:9: ( math_item_sequence -> ^( PROOFBODY math_item_sequence ) | proof -> ^( PROOFBODY proof ) )
            {
            // RParser.g:2077:9: ( math_item_sequence -> ^( PROOFBODY math_item_sequence ) | proof -> ^( PROOFBODY proof ) )
            int alt287=2;
            int LA287_0 = input.LA(1);

            if ( (LA287_0==AXIOM||LA287_0==CATEGORICAL||LA287_0==COMMUTATIVITY||LA287_0==COROLLARY||LA287_0==DEFINITION||LA287_0==IMPLICIT||LA287_0==INDUCTIVE||LA287_0==LEMMA||LA287_0==PROPERTY||LA287_0==THEOREM||LA287_0==TYPE) ) {
                alt287=1;
            }
            else if ( (LA287_0==PROOF) ) {
                alt287=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 287, 0, input);

                throw nvae;
            }
            switch (alt287) {
                case 1 :
                    // RParser.g:2077:10: math_item_sequence
                    {
                    pushFollow(FOLLOW_math_item_sequence_in_proof_module_body15060);
                    math_item_sequence1066=math_item_sequence();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_math_item_sequence.add(math_item_sequence1066.getTree());


                    // AST REWRITE
                    // elements: math_item_sequence
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (ColsAST)adaptor.nil();
                    // 2077:29: -> ^( PROOFBODY math_item_sequence )
                    {
                        // RParser.g:2077:32: ^( PROOFBODY math_item_sequence )
                        {
                        ColsAST root_1 = (ColsAST)adaptor.nil();
                        root_1 = (ColsAST)adaptor.becomeRoot((ColsAST)adaptor.create(PROOFBODY, "PROOFBODY"), root_1);

                        adaptor.addChild(root_1, stream_math_item_sequence.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // RParser.g:2078:9: proof
                    {
                    pushFollow(FOLLOW_proof_in_proof_module_body15078);
                    proof1067=proof();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_proof.add(proof1067.getTree());


                    // AST REWRITE
                    // elements: proof
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (ColsAST)adaptor.nil();
                    // 2078:15: -> ^( PROOFBODY proof )
                    {
                        // RParser.g:2078:18: ^( PROOFBODY proof )
                        {
                        ColsAST root_1 = (ColsAST)adaptor.nil();
                        root_1 = (ColsAST)adaptor.becomeRoot((ColsAST)adaptor.create(PROOFBODY, "PROOFBODY"), root_1);

                        adaptor.addChild(root_1, stream_proof.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (ColsAST)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "proof_module_body"

    public static class proof_return extends ParserRuleReturnScope {
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "proof"
    // RParser.g:2081:1: proof : PROOF OF math_item_reference COLON ( ( LSQBRACK IDENTIFIER RSQBRACK LPAREN BASECASE )=> base_case_statement_head | ( LPAREN BASECASE )=> base_case_statement_body | ( LSQBRACK IDENTIFIER RSQBRACK LPAREN INDUCTIVECASE )=> inductive_case_statement_head | ( LPAREN INDUCTIVECASE )=> inductive_case_statement_body | ( LSQBRACK IDENTIFIER RSQBRACK )=> headed_proof_expression | proof_expression )* QED ;
    public final RParser.proof_return proof() throws RecognitionException {
        RParser.proof_return retval = new RParser.proof_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        Token PROOF1068=null;
        Token OF1069=null;
        Token COLON1071=null;
        Token QED1078=null;
        RParser.math_item_reference_return math_item_reference1070 = null;

        RParser.base_case_statement_head_return base_case_statement_head1072 = null;

        RParser.base_case_statement_body_return base_case_statement_body1073 = null;

        RParser.inductive_case_statement_head_return inductive_case_statement_head1074 = null;

        RParser.inductive_case_statement_body_return inductive_case_statement_body1075 = null;

        RParser.headed_proof_expression_return headed_proof_expression1076 = null;

        RParser.proof_expression_return proof_expression1077 = null;


        ColsAST PROOF1068_tree=null;
        ColsAST OF1069_tree=null;
        ColsAST COLON1071_tree=null;
        ColsAST QED1078_tree=null;

        try {
            // RParser.g:2082:5: ( PROOF OF math_item_reference COLON ( ( LSQBRACK IDENTIFIER RSQBRACK LPAREN BASECASE )=> base_case_statement_head | ( LPAREN BASECASE )=> base_case_statement_body | ( LSQBRACK IDENTIFIER RSQBRACK LPAREN INDUCTIVECASE )=> inductive_case_statement_head | ( LPAREN INDUCTIVECASE )=> inductive_case_statement_body | ( LSQBRACK IDENTIFIER RSQBRACK )=> headed_proof_expression | proof_expression )* QED )
            // RParser.g:2082:9: PROOF OF math_item_reference COLON ( ( LSQBRACK IDENTIFIER RSQBRACK LPAREN BASECASE )=> base_case_statement_head | ( LPAREN BASECASE )=> base_case_statement_body | ( LSQBRACK IDENTIFIER RSQBRACK LPAREN INDUCTIVECASE )=> inductive_case_statement_head | ( LPAREN INDUCTIVECASE )=> inductive_case_statement_body | ( LSQBRACK IDENTIFIER RSQBRACK )=> headed_proof_expression | proof_expression )* QED
            {
            root_0 = (ColsAST)adaptor.nil();

            PROOF1068=(Token)match(input,PROOF,FOLLOW_PROOF_in_proof15110); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            PROOF1068_tree = (ColsAST)adaptor.create(PROOF1068);
            root_0 = (ColsAST)adaptor.becomeRoot(PROOF1068_tree, root_0);
            }
            OF1069=(Token)match(input,OF,FOLLOW_OF_in_proof15113); if (state.failed) return retval;
            pushFollow(FOLLOW_math_item_reference_in_proof15124);
            math_item_reference1070=math_item_reference();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, math_item_reference1070.getTree());
            COLON1071=(Token)match(input,COLON,FOLLOW_COLON_in_proof15134); if (state.failed) return retval;
            // RParser.g:2085:9: ( ( LSQBRACK IDENTIFIER RSQBRACK LPAREN BASECASE )=> base_case_statement_head | ( LPAREN BASECASE )=> base_case_statement_body | ( LSQBRACK IDENTIFIER RSQBRACK LPAREN INDUCTIVECASE )=> inductive_case_statement_head | ( LPAREN INDUCTIVECASE )=> inductive_case_statement_body | ( LSQBRACK IDENTIFIER RSQBRACK )=> headed_proof_expression | proof_expression )*
            loop288:
            do {
                int alt288=7;
                alt288 = dfa288.predict(input);
                switch (alt288) {
            	case 1 :
            	    // RParser.g:2085:11: ( LSQBRACK IDENTIFIER RSQBRACK LPAREN BASECASE )=> base_case_statement_head
            	    {
            	    pushFollow(FOLLOW_base_case_statement_head_in_proof15161);
            	    base_case_statement_head1072=base_case_statement_head();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, base_case_statement_head1072.getTree());

            	    }
            	    break;
            	case 2 :
            	    // RParser.g:2086:11: ( LPAREN BASECASE )=> base_case_statement_body
            	    {
            	    pushFollow(FOLLOW_base_case_statement_body_in_proof15181);
            	    base_case_statement_body1073=base_case_statement_body();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, base_case_statement_body1073.getTree());

            	    }
            	    break;
            	case 3 :
            	    // RParser.g:2087:11: ( LSQBRACK IDENTIFIER RSQBRACK LPAREN INDUCTIVECASE )=> inductive_case_statement_head
            	    {
            	    pushFollow(FOLLOW_inductive_case_statement_head_in_proof15207);
            	    inductive_case_statement_head1074=inductive_case_statement_head();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, inductive_case_statement_head1074.getTree());

            	    }
            	    break;
            	case 4 :
            	    // RParser.g:2088:11: ( LPAREN INDUCTIVECASE )=> inductive_case_statement_body
            	    {
            	    pushFollow(FOLLOW_inductive_case_statement_body_in_proof15227);
            	    inductive_case_statement_body1075=inductive_case_statement_body();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, inductive_case_statement_body1075.getTree());

            	    }
            	    break;
            	case 5 :
            	    // RParser.g:2089:11: ( LSQBRACK IDENTIFIER RSQBRACK )=> headed_proof_expression
            	    {
            	    pushFollow(FOLLOW_headed_proof_expression_in_proof15249);
            	    headed_proof_expression1076=headed_proof_expression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, headed_proof_expression1076.getTree());

            	    }
            	    break;
            	case 6 :
            	    // RParser.g:2090:11: proof_expression
            	    {
            	    pushFollow(FOLLOW_proof_expression_in_proof15261);
            	    proof_expression1077=proof_expression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, proof_expression1077.getTree());

            	    }
            	    break;

            	default :
            	    break loop288;
                }
            } while (true);

            QED1078=(Token)match(input,QED,FOLLOW_QED_in_proof15274); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (ColsAST)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "proof"

    public static class base_case_statement_head_return extends ParserRuleReturnScope {
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "base_case_statement_head"
    // RParser.g:2094:1: base_case_statement_head : LSQBRACK IDENTIFIER RSQBRACK base_case_statement_body ;
    public final RParser.base_case_statement_head_return base_case_statement_head() throws RecognitionException {
        RParser.base_case_statement_head_return retval = new RParser.base_case_statement_head_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        Token LSQBRACK1079=null;
        Token IDENTIFIER1080=null;
        Token RSQBRACK1081=null;
        RParser.base_case_statement_body_return base_case_statement_body1082 = null;


        ColsAST LSQBRACK1079_tree=null;
        ColsAST IDENTIFIER1080_tree=null;
        ColsAST RSQBRACK1081_tree=null;

        try {
            // RParser.g:2095:5: ( LSQBRACK IDENTIFIER RSQBRACK base_case_statement_body )
            // RParser.g:2095:9: LSQBRACK IDENTIFIER RSQBRACK base_case_statement_body
            {
            root_0 = (ColsAST)adaptor.nil();

            LSQBRACK1079=(Token)match(input,LSQBRACK,FOLLOW_LSQBRACK_in_base_case_statement_head15298); if (state.failed) return retval;
            IDENTIFIER1080=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_base_case_statement_head15301); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            IDENTIFIER1080_tree = (ColsAST)adaptor.create(IDENTIFIER1080);
            root_0 = (ColsAST)adaptor.becomeRoot(IDENTIFIER1080_tree, root_0);
            }
            RSQBRACK1081=(Token)match(input,RSQBRACK,FOLLOW_RSQBRACK_in_base_case_statement_head15304); if (state.failed) return retval;
            pushFollow(FOLLOW_base_case_statement_body_in_base_case_statement_head15307);
            base_case_statement_body1082=base_case_statement_body();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, base_case_statement_body1082.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (ColsAST)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "base_case_statement_head"

    public static class base_case_statement_body_return extends ParserRuleReturnScope {
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "base_case_statement_body"
    // RParser.g:2098:1: base_case_statement_body : LPAREN BASECASE RPAREN proof_expression ;
    public final RParser.base_case_statement_body_return base_case_statement_body() throws RecognitionException {
        RParser.base_case_statement_body_return retval = new RParser.base_case_statement_body_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        Token LPAREN1083=null;
        Token BASECASE1084=null;
        Token RPAREN1085=null;
        RParser.proof_expression_return proof_expression1086 = null;


        ColsAST LPAREN1083_tree=null;
        ColsAST BASECASE1084_tree=null;
        ColsAST RPAREN1085_tree=null;

        try {
            // RParser.g:2099:5: ( LPAREN BASECASE RPAREN proof_expression )
            // RParser.g:2099:9: LPAREN BASECASE RPAREN proof_expression
            {
            root_0 = (ColsAST)adaptor.nil();

            LPAREN1083=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_base_case_statement_body15330); if (state.failed) return retval;
            BASECASE1084=(Token)match(input,BASECASE,FOLLOW_BASECASE_in_base_case_statement_body15333); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            BASECASE1084_tree = (ColsAST)adaptor.create(BASECASE1084);
            root_0 = (ColsAST)adaptor.becomeRoot(BASECASE1084_tree, root_0);
            }
            RPAREN1085=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_base_case_statement_body15336); if (state.failed) return retval;
            pushFollow(FOLLOW_proof_expression_in_base_case_statement_body15339);
            proof_expression1086=proof_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, proof_expression1086.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (ColsAST)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "base_case_statement_body"

    public static class inductive_case_statement_head_return extends ParserRuleReturnScope {
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inductive_case_statement_head"
    // RParser.g:2102:1: inductive_case_statement_head : LSQBRACK IDENTIFIER RSQBRACK inductive_case_statement_body ;
    public final RParser.inductive_case_statement_head_return inductive_case_statement_head() throws RecognitionException {
        RParser.inductive_case_statement_head_return retval = new RParser.inductive_case_statement_head_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        Token LSQBRACK1087=null;
        Token IDENTIFIER1088=null;
        Token RSQBRACK1089=null;
        RParser.inductive_case_statement_body_return inductive_case_statement_body1090 = null;


        ColsAST LSQBRACK1087_tree=null;
        ColsAST IDENTIFIER1088_tree=null;
        ColsAST RSQBRACK1089_tree=null;

        try {
            // RParser.g:2103:5: ( LSQBRACK IDENTIFIER RSQBRACK inductive_case_statement_body )
            // RParser.g:2103:9: LSQBRACK IDENTIFIER RSQBRACK inductive_case_statement_body
            {
            root_0 = (ColsAST)adaptor.nil();

            LSQBRACK1087=(Token)match(input,LSQBRACK,FOLLOW_LSQBRACK_in_inductive_case_statement_head15362); if (state.failed) return retval;
            IDENTIFIER1088=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_inductive_case_statement_head15365); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            IDENTIFIER1088_tree = (ColsAST)adaptor.create(IDENTIFIER1088);
            root_0 = (ColsAST)adaptor.becomeRoot(IDENTIFIER1088_tree, root_0);
            }
            RSQBRACK1089=(Token)match(input,RSQBRACK,FOLLOW_RSQBRACK_in_inductive_case_statement_head15368); if (state.failed) return retval;
            pushFollow(FOLLOW_inductive_case_statement_body_in_inductive_case_statement_head15371);
            inductive_case_statement_body1090=inductive_case_statement_body();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, inductive_case_statement_body1090.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (ColsAST)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "inductive_case_statement_head"

    public static class inductive_case_statement_body_return extends ParserRuleReturnScope {
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inductive_case_statement_body"
    // RParser.g:2106:1: inductive_case_statement_body : LPAREN INDUCTIVECASE RPAREN proof_expression ;
    public final RParser.inductive_case_statement_body_return inductive_case_statement_body() throws RecognitionException {
        RParser.inductive_case_statement_body_return retval = new RParser.inductive_case_statement_body_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        Token LPAREN1091=null;
        Token INDUCTIVECASE1092=null;
        Token RPAREN1093=null;
        RParser.proof_expression_return proof_expression1094 = null;


        ColsAST LPAREN1091_tree=null;
        ColsAST INDUCTIVECASE1092_tree=null;
        ColsAST RPAREN1093_tree=null;

        try {
            // RParser.g:2107:5: ( LPAREN INDUCTIVECASE RPAREN proof_expression )
            // RParser.g:2107:9: LPAREN INDUCTIVECASE RPAREN proof_expression
            {
            root_0 = (ColsAST)adaptor.nil();

            LPAREN1091=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_inductive_case_statement_body15394); if (state.failed) return retval;
            INDUCTIVECASE1092=(Token)match(input,INDUCTIVECASE,FOLLOW_INDUCTIVECASE_in_inductive_case_statement_body15397); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            INDUCTIVECASE1092_tree = (ColsAST)adaptor.create(INDUCTIVECASE1092);
            root_0 = (ColsAST)adaptor.becomeRoot(INDUCTIVECASE1092_tree, root_0);
            }
            RPAREN1093=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_inductive_case_statement_body15400); if (state.failed) return retval;
            pushFollow(FOLLOW_proof_expression_in_inductive_case_statement_body15403);
            proof_expression1094=proof_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, proof_expression1094.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (ColsAST)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "inductive_case_statement_body"

    public static class math_item_reference_return extends ParserRuleReturnScope {
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "math_item_reference"
    // RParser.g:2110:1: math_item_reference : ( theorem_name -> ^( MATHITEMREF theorem_name ) | lemma_name -> ^( MATHITEMREF lemma_name ) | property_name -> ^( MATHITEMREF property_name ) | corollary_name -> ^( MATHITEMREF corollary_name ) ) ;
    public final RParser.math_item_reference_return math_item_reference() throws RecognitionException {
        RParser.math_item_reference_return retval = new RParser.math_item_reference_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        RParser.theorem_name_return theorem_name1095 = null;

        RParser.lemma_name_return lemma_name1096 = null;

        RParser.property_name_return property_name1097 = null;

        RParser.corollary_name_return corollary_name1098 = null;


        RewriteRuleSubtreeStream stream_theorem_name=new RewriteRuleSubtreeStream(adaptor,"rule theorem_name");
        RewriteRuleSubtreeStream stream_property_name=new RewriteRuleSubtreeStream(adaptor,"rule property_name");
        RewriteRuleSubtreeStream stream_corollary_name=new RewriteRuleSubtreeStream(adaptor,"rule corollary_name");
        RewriteRuleSubtreeStream stream_lemma_name=new RewriteRuleSubtreeStream(adaptor,"rule lemma_name");
        try {
            // RParser.g:2111:5: ( ( theorem_name -> ^( MATHITEMREF theorem_name ) | lemma_name -> ^( MATHITEMREF lemma_name ) | property_name -> ^( MATHITEMREF property_name ) | corollary_name -> ^( MATHITEMREF corollary_name ) ) )
            // RParser.g:2112:5: ( theorem_name -> ^( MATHITEMREF theorem_name ) | lemma_name -> ^( MATHITEMREF lemma_name ) | property_name -> ^( MATHITEMREF property_name ) | corollary_name -> ^( MATHITEMREF corollary_name ) )
            {
            // RParser.g:2112:5: ( theorem_name -> ^( MATHITEMREF theorem_name ) | lemma_name -> ^( MATHITEMREF lemma_name ) | property_name -> ^( MATHITEMREF property_name ) | corollary_name -> ^( MATHITEMREF corollary_name ) )
            int alt289=4;
            switch ( input.LA(1) ) {
            case THEOREM:
                {
                alt289=1;
                }
                break;
            case LEMMA:
                {
                alt289=2;
                }
                break;
            case PROPERTY:
                {
                alt289=3;
                }
                break;
            case COROLLARY:
                {
                alt289=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 289, 0, input);

                throw nvae;
            }

            switch (alt289) {
                case 1 :
                    // RParser.g:2112:9: theorem_name
                    {
                    pushFollow(FOLLOW_theorem_name_in_math_item_reference15428);
                    theorem_name1095=theorem_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_theorem_name.add(theorem_name1095.getTree());


                    // AST REWRITE
                    // elements: theorem_name
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (ColsAST)adaptor.nil();
                    // 2112:22: -> ^( MATHITEMREF theorem_name )
                    {
                        // RParser.g:2112:25: ^( MATHITEMREF theorem_name )
                        {
                        ColsAST root_1 = (ColsAST)adaptor.nil();
                        root_1 = (ColsAST)adaptor.becomeRoot((ColsAST)adaptor.create(MATHITEMREF, "MATHITEMREF"), root_1);

                        adaptor.addChild(root_1, stream_theorem_name.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // RParser.g:2113:9: lemma_name
                    {
                    pushFollow(FOLLOW_lemma_name_in_math_item_reference15446);
                    lemma_name1096=lemma_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_lemma_name.add(lemma_name1096.getTree());


                    // AST REWRITE
                    // elements: lemma_name
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (ColsAST)adaptor.nil();
                    // 2113:20: -> ^( MATHITEMREF lemma_name )
                    {
                        // RParser.g:2113:23: ^( MATHITEMREF lemma_name )
                        {
                        ColsAST root_1 = (ColsAST)adaptor.nil();
                        root_1 = (ColsAST)adaptor.becomeRoot((ColsAST)adaptor.create(MATHITEMREF, "MATHITEMREF"), root_1);

                        adaptor.addChild(root_1, stream_lemma_name.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // RParser.g:2114:9: property_name
                    {
                    pushFollow(FOLLOW_property_name_in_math_item_reference15464);
                    property_name1097=property_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_property_name.add(property_name1097.getTree());


                    // AST REWRITE
                    // elements: property_name
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (ColsAST)adaptor.nil();
                    // 2114:23: -> ^( MATHITEMREF property_name )
                    {
                        // RParser.g:2114:26: ^( MATHITEMREF property_name )
                        {
                        ColsAST root_1 = (ColsAST)adaptor.nil();
                        root_1 = (ColsAST)adaptor.becomeRoot((ColsAST)adaptor.create(MATHITEMREF, "MATHITEMREF"), root_1);

                        adaptor.addChild(root_1, stream_property_name.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 4 :
                    // RParser.g:2115:9: corollary_name
                    {
                    pushFollow(FOLLOW_corollary_name_in_math_item_reference15482);
                    corollary_name1098=corollary_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_corollary_name.add(corollary_name1098.getTree());


                    // AST REWRITE
                    // elements: corollary_name
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (ColsAST)adaptor.nil();
                    // 2115:24: -> ^( MATHITEMREF corollary_name )
                    {
                        // RParser.g:2115:27: ^( MATHITEMREF corollary_name )
                        {
                        ColsAST root_1 = (ColsAST)adaptor.nil();
                        root_1 = (ColsAST)adaptor.becomeRoot((ColsAST)adaptor.create(MATHITEMREF, "MATHITEMREF"), root_1);

                        adaptor.addChild(root_1, stream_corollary_name.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (ColsAST)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "math_item_reference"

    public static class theorem_name_return extends ParserRuleReturnScope {
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "theorem_name"
    // RParser.g:2119:1: theorem_name : THEOREM ident ;
    public final RParser.theorem_name_return theorem_name() throws RecognitionException {
        RParser.theorem_name_return retval = new RParser.theorem_name_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        Token THEOREM1099=null;
        RParser.ident_return ident1100 = null;


        ColsAST THEOREM1099_tree=null;

        try {
            // RParser.g:2120:5: ( THEOREM ident )
            // RParser.g:2120:9: THEOREM ident
            {
            root_0 = (ColsAST)adaptor.nil();

            THEOREM1099=(Token)match(input,THEOREM,FOLLOW_THEOREM_in_theorem_name15519); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            THEOREM1099_tree = (ColsAST)adaptor.create(THEOREM1099);
            root_0 = (ColsAST)adaptor.becomeRoot(THEOREM1099_tree, root_0);
            }
            pushFollow(FOLLOW_ident_in_theorem_name15522);
            ident1100=ident();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, ident1100.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (ColsAST)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "theorem_name"

    public static class lemma_name_return extends ParserRuleReturnScope {
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "lemma_name"
    // RParser.g:2123:1: lemma_name : LEMMA ident ;
    public final RParser.lemma_name_return lemma_name() throws RecognitionException {
        RParser.lemma_name_return retval = new RParser.lemma_name_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        Token LEMMA1101=null;
        RParser.ident_return ident1102 = null;


        ColsAST LEMMA1101_tree=null;

        try {
            // RParser.g:2124:5: ( LEMMA ident )
            // RParser.g:2124:9: LEMMA ident
            {
            root_0 = (ColsAST)adaptor.nil();

            LEMMA1101=(Token)match(input,LEMMA,FOLLOW_LEMMA_in_lemma_name15545); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LEMMA1101_tree = (ColsAST)adaptor.create(LEMMA1101);
            root_0 = (ColsAST)adaptor.becomeRoot(LEMMA1101_tree, root_0);
            }
            pushFollow(FOLLOW_ident_in_lemma_name15548);
            ident1102=ident();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, ident1102.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (ColsAST)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "lemma_name"

    public static class property_name_return extends ParserRuleReturnScope {
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "property_name"
    // RParser.g:2127:1: property_name : PROPERTY ident ;
    public final RParser.property_name_return property_name() throws RecognitionException {
        RParser.property_name_return retval = new RParser.property_name_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        Token PROPERTY1103=null;
        RParser.ident_return ident1104 = null;


        ColsAST PROPERTY1103_tree=null;

        try {
            // RParser.g:2128:5: ( PROPERTY ident )
            // RParser.g:2128:9: PROPERTY ident
            {
            root_0 = (ColsAST)adaptor.nil();

            PROPERTY1103=(Token)match(input,PROPERTY,FOLLOW_PROPERTY_in_property_name15567); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            PROPERTY1103_tree = (ColsAST)adaptor.create(PROPERTY1103);
            root_0 = (ColsAST)adaptor.becomeRoot(PROPERTY1103_tree, root_0);
            }
            pushFollow(FOLLOW_ident_in_property_name15570);
            ident1104=ident();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, ident1104.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (ColsAST)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "property_name"

    public static class corollary_name_return extends ParserRuleReturnScope {
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "corollary_name"
    // RParser.g:2131:1: corollary_name : COROLLARY math_theorem_ident ;
    public final RParser.corollary_name_return corollary_name() throws RecognitionException {
        RParser.corollary_name_return retval = new RParser.corollary_name_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        Token COROLLARY1105=null;
        RParser.math_theorem_ident_return math_theorem_ident1106 = null;


        ColsAST COROLLARY1105_tree=null;

        try {
            // RParser.g:2132:5: ( COROLLARY math_theorem_ident )
            // RParser.g:2132:9: COROLLARY math_theorem_ident
            {
            root_0 = (ColsAST)adaptor.nil();

            COROLLARY1105=(Token)match(input,COROLLARY,FOLLOW_COROLLARY_in_corollary_name15593); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            COROLLARY1105_tree = (ColsAST)adaptor.create(COROLLARY1105);
            root_0 = (ColsAST)adaptor.becomeRoot(COROLLARY1105_tree, root_0);
            }
            pushFollow(FOLLOW_math_theorem_ident_in_corollary_name15596);
            math_theorem_ident1106=math_theorem_ident();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, math_theorem_ident1106.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (ColsAST)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "corollary_name"

    public static class proof_expression_list_return extends ParserRuleReturnScope {
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "proof_expression_list"
    // RParser.g:2135:1: proof_expression_list : ( ( LSQBRACK IDENTIFIER RSQBRACK DEDUCTION )=> () | ( DEDUCTION )=> () | ( LSQBRACK IDENTIFIER RSQBRACK )=> headed_proof_expression -> ^( PROOFEXPRLIST headed_proof_expression ) | proof_expression -> ^( PROOFEXPRLIST proof_expression ) )* ;
    public final RParser.proof_expression_list_return proof_expression_list() throws RecognitionException {
        RParser.proof_expression_list_return retval = new RParser.proof_expression_list_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        RParser.headed_proof_expression_return headed_proof_expression1107 = null;

        RParser.proof_expression_return proof_expression1108 = null;


        RewriteRuleSubtreeStream stream_proof_expression=new RewriteRuleSubtreeStream(adaptor,"rule proof_expression");
        RewriteRuleSubtreeStream stream_headed_proof_expression=new RewriteRuleSubtreeStream(adaptor,"rule headed_proof_expression");
        try {
            // RParser.g:2136:5: ( ( ( LSQBRACK IDENTIFIER RSQBRACK DEDUCTION )=> () | ( DEDUCTION )=> () | ( LSQBRACK IDENTIFIER RSQBRACK )=> headed_proof_expression -> ^( PROOFEXPRLIST headed_proof_expression ) | proof_expression -> ^( PROOFEXPRLIST proof_expression ) )* )
            // RParser.g:2136:9: ( ( LSQBRACK IDENTIFIER RSQBRACK DEDUCTION )=> () | ( DEDUCTION )=> () | ( LSQBRACK IDENTIFIER RSQBRACK )=> headed_proof_expression -> ^( PROOFEXPRLIST headed_proof_expression ) | proof_expression -> ^( PROOFEXPRLIST proof_expression ) )*
            {
            // RParser.g:2136:9: ( ( LSQBRACK IDENTIFIER RSQBRACK DEDUCTION )=> () | ( DEDUCTION )=> () | ( LSQBRACK IDENTIFIER RSQBRACK )=> headed_proof_expression -> ^( PROOFEXPRLIST headed_proof_expression ) | proof_expression -> ^( PROOFEXPRLIST proof_expression ) )*
            loop290:
            do {
                int alt290=5;
                alt290 = dfa290.predict(input);
                switch (alt290) {
            	case 1 :
            	    // RParser.g:2136:11: ( LSQBRACK IDENTIFIER RSQBRACK DEDUCTION )=> ()
            	    {
            	    // RParser.g:2136:55: ()
            	    // RParser.g:2136:56: 
            	    {
            	    }

            	    if ( state.backtracking==0 ) {
            	       break; 
            	    }

            	    }
            	    break;
            	case 2 :
            	    // RParser.g:2137:11: ( DEDUCTION )=> ()
            	    {
            	    // RParser.g:2137:26: ()
            	    // RParser.g:2137:27: 
            	    {
            	    }

            	    if ( state.backtracking==0 ) {
            	       break; 
            	    }

            	    }
            	    break;
            	case 3 :
            	    // RParser.g:2138:11: ( LSQBRACK IDENTIFIER RSQBRACK )=> headed_proof_expression
            	    {
            	    pushFollow(FOLLOW_headed_proof_expression_in_proof_expression_list15679);
            	    headed_proof_expression1107=headed_proof_expression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_headed_proof_expression.add(headed_proof_expression1107.getTree());


            	    // AST REWRITE
            	    // elements: headed_proof_expression
            	    // token labels: 
            	    // rule labels: retval
            	    // token list labels: 
            	    // rule list labels: 
            	    // wildcard labels: 
            	    if ( state.backtracking==0 ) {
            	    retval.tree = root_0;
            	    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            	    root_0 = (ColsAST)adaptor.nil();
            	    // 2138:69: -> ^( PROOFEXPRLIST headed_proof_expression )
            	    {
            	        // RParser.g:2138:72: ^( PROOFEXPRLIST headed_proof_expression )
            	        {
            	        ColsAST root_1 = (ColsAST)adaptor.nil();
            	        root_1 = (ColsAST)adaptor.becomeRoot((ColsAST)adaptor.create(PROOFEXPRLIST, "PROOFEXPRLIST"), root_1);

            	        adaptor.addChild(root_1, stream_headed_proof_expression.nextTree());

            	        adaptor.addChild(root_0, root_1);
            	        }

            	    }

            	    retval.tree = root_0;}
            	    }
            	    break;
            	case 4 :
            	    // RParser.g:2139:11: proof_expression
            	    {
            	    pushFollow(FOLLOW_proof_expression_in_proof_expression_list15699);
            	    proof_expression1108=proof_expression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_proof_expression.add(proof_expression1108.getTree());


            	    // AST REWRITE
            	    // elements: proof_expression
            	    // token labels: 
            	    // rule labels: retval
            	    // token list labels: 
            	    // rule list labels: 
            	    // wildcard labels: 
            	    if ( state.backtracking==0 ) {
            	    retval.tree = root_0;
            	    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            	    root_0 = (ColsAST)adaptor.nil();
            	    // 2139:28: -> ^( PROOFEXPRLIST proof_expression )
            	    {
            	        // RParser.g:2139:31: ^( PROOFEXPRLIST proof_expression )
            	        {
            	        ColsAST root_1 = (ColsAST)adaptor.nil();
            	        root_1 = (ColsAST)adaptor.becomeRoot((ColsAST)adaptor.create(PROOFEXPRLIST, "PROOFEXPRLIST"), root_1);

            	        adaptor.addChild(root_1, stream_proof_expression.nextTree());

            	        adaptor.addChild(root_0, root_1);
            	        }

            	    }

            	    retval.tree = root_0;}
            	    }
            	    break;

            	default :
            	    break loop290;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (ColsAST)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "proof_expression_list"

    public static class headed_proof_expression_return extends ParserRuleReturnScope {
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "headed_proof_expression"
    // RParser.g:2143:1: headed_proof_expression : LSQBRACK IDENTIFIER RSQBRACK proof_expression ;
    public final RParser.headed_proof_expression_return headed_proof_expression() throws RecognitionException {
        RParser.headed_proof_expression_return retval = new RParser.headed_proof_expression_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        Token LSQBRACK1109=null;
        Token IDENTIFIER1110=null;
        Token RSQBRACK1111=null;
        RParser.proof_expression_return proof_expression1112 = null;


        ColsAST LSQBRACK1109_tree=null;
        ColsAST IDENTIFIER1110_tree=null;
        ColsAST RSQBRACK1111_tree=null;

        try {
            // RParser.g:2144:5: ( LSQBRACK IDENTIFIER RSQBRACK proof_expression )
            // RParser.g:2144:9: LSQBRACK IDENTIFIER RSQBRACK proof_expression
            {
            root_0 = (ColsAST)adaptor.nil();

            LSQBRACK1109=(Token)match(input,LSQBRACK,FOLLOW_LSQBRACK_in_headed_proof_expression15741); if (state.failed) return retval;
            IDENTIFIER1110=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_headed_proof_expression15744); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            IDENTIFIER1110_tree = (ColsAST)adaptor.create(IDENTIFIER1110);
            root_0 = (ColsAST)adaptor.becomeRoot(IDENTIFIER1110_tree, root_0);
            }
            RSQBRACK1111=(Token)match(input,RSQBRACK,FOLLOW_RSQBRACK_in_headed_proof_expression15747); if (state.failed) return retval;
            pushFollow(FOLLOW_proof_expression_in_headed_proof_expression15750);
            proof_expression1112=proof_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, proof_expression1112.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (ColsAST)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "headed_proof_expression"

    public static class proof_expression_return extends ParserRuleReturnScope {
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "proof_expression"
    // RParser.g:2147:1: proof_expression : ( goal_declaration | standard_definition_declaration | supposition_deduction_pair | justification_declaration ) ;
    public final RParser.proof_expression_return proof_expression() throws RecognitionException {
        RParser.proof_expression_return retval = new RParser.proof_expression_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        RParser.goal_declaration_return goal_declaration1113 = null;

        RParser.standard_definition_declaration_return standard_definition_declaration1114 = null;

        RParser.supposition_deduction_pair_return supposition_deduction_pair1115 = null;

        RParser.justification_declaration_return justification_declaration1116 = null;



        try {
            // RParser.g:2148:5: ( ( goal_declaration | standard_definition_declaration | supposition_deduction_pair | justification_declaration ) )
            // RParser.g:2149:5: ( goal_declaration | standard_definition_declaration | supposition_deduction_pair | justification_declaration )
            {
            root_0 = (ColsAST)adaptor.nil();

            // RParser.g:2149:5: ( goal_declaration | standard_definition_declaration | supposition_deduction_pair | justification_declaration )
            int alt291=4;
            alt291 = dfa291.predict(input);
            switch (alt291) {
                case 1 :
                    // RParser.g:2149:9: goal_declaration
                    {
                    pushFollow(FOLLOW_goal_declaration_in_proof_expression15775);
                    goal_declaration1113=goal_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, goal_declaration1113.getTree());

                    }
                    break;
                case 2 :
                    // RParser.g:2150:9: standard_definition_declaration
                    {
                    pushFollow(FOLLOW_standard_definition_declaration_in_proof_expression15785);
                    standard_definition_declaration1114=standard_definition_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, standard_definition_declaration1114.getTree());

                    }
                    break;
                case 3 :
                    // RParser.g:2151:9: supposition_deduction_pair
                    {
                    pushFollow(FOLLOW_supposition_deduction_pair_in_proof_expression15795);
                    supposition_deduction_pair1115=supposition_deduction_pair();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, supposition_deduction_pair1115.getTree());

                    }
                    break;
                case 4 :
                    // RParser.g:2152:9: justification_declaration
                    {
                    pushFollow(FOLLOW_justification_declaration_in_proof_expression15805);
                    justification_declaration1116=justification_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, justification_declaration1116.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (ColsAST)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "proof_expression"

    public static class goal_declaration_return extends ParserRuleReturnScope {
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "goal_declaration"
    // RParser.g:2156:1: goal_declaration : GOAL math_expression SEMICOLON ;
    public final RParser.goal_declaration_return goal_declaration() throws RecognitionException {
        RParser.goal_declaration_return retval = new RParser.goal_declaration_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        Token GOAL1117=null;
        Token SEMICOLON1119=null;
        RParser.math_expression_return math_expression1118 = null;


        ColsAST GOAL1117_tree=null;
        ColsAST SEMICOLON1119_tree=null;

        try {
            // RParser.g:2157:5: ( GOAL math_expression SEMICOLON )
            // RParser.g:2157:9: GOAL math_expression SEMICOLON
            {
            root_0 = (ColsAST)adaptor.nil();

            GOAL1117=(Token)match(input,GOAL,FOLLOW_GOAL_in_goal_declaration15834); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            GOAL1117_tree = (ColsAST)adaptor.create(GOAL1117);
            root_0 = (ColsAST)adaptor.becomeRoot(GOAL1117_tree, root_0);
            }
            pushFollow(FOLLOW_math_expression_in_goal_declaration15837);
            math_expression1118=math_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, math_expression1118.getTree());
            SEMICOLON1119=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_goal_declaration15839); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (ColsAST)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "goal_declaration"

    public static class supposition_deduction_pair_return extends ParserRuleReturnScope {
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "supposition_deduction_pair"
    // RParser.g:2160:1: supposition_deduction_pair : supposition_declaration SEMICOLON proof_expression_list ( LSQBRACK IDENTIFIER RSQBRACK )? deduction_declaration SEMICOLON -> ^( SUPDEDUC supposition_declaration proof_expression_list ( IDENTIFIER )? deduction_declaration ) ;
    public final RParser.supposition_deduction_pair_return supposition_deduction_pair() throws RecognitionException {
        RParser.supposition_deduction_pair_return retval = new RParser.supposition_deduction_pair_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        Token SEMICOLON1121=null;
        Token LSQBRACK1123=null;
        Token IDENTIFIER1124=null;
        Token RSQBRACK1125=null;
        Token SEMICOLON1127=null;
        RParser.supposition_declaration_return supposition_declaration1120 = null;

        RParser.proof_expression_list_return proof_expression_list1122 = null;

        RParser.deduction_declaration_return deduction_declaration1126 = null;


        ColsAST SEMICOLON1121_tree=null;
        ColsAST LSQBRACK1123_tree=null;
        ColsAST IDENTIFIER1124_tree=null;
        ColsAST RSQBRACK1125_tree=null;
        ColsAST SEMICOLON1127_tree=null;
        RewriteRuleTokenStream stream_SEMICOLON=new RewriteRuleTokenStream(adaptor,"token SEMICOLON");
        RewriteRuleTokenStream stream_RSQBRACK=new RewriteRuleTokenStream(adaptor,"token RSQBRACK");
        RewriteRuleTokenStream stream_LSQBRACK=new RewriteRuleTokenStream(adaptor,"token LSQBRACK");
        RewriteRuleTokenStream stream_IDENTIFIER=new RewriteRuleTokenStream(adaptor,"token IDENTIFIER");
        RewriteRuleSubtreeStream stream_supposition_declaration=new RewriteRuleSubtreeStream(adaptor,"rule supposition_declaration");
        RewriteRuleSubtreeStream stream_proof_expression_list=new RewriteRuleSubtreeStream(adaptor,"rule proof_expression_list");
        RewriteRuleSubtreeStream stream_deduction_declaration=new RewriteRuleSubtreeStream(adaptor,"rule deduction_declaration");
        try {
            // RParser.g:2161:5: ( supposition_declaration SEMICOLON proof_expression_list ( LSQBRACK IDENTIFIER RSQBRACK )? deduction_declaration SEMICOLON -> ^( SUPDEDUC supposition_declaration proof_expression_list ( IDENTIFIER )? deduction_declaration ) )
            // RParser.g:2161:9: supposition_declaration SEMICOLON proof_expression_list ( LSQBRACK IDENTIFIER RSQBRACK )? deduction_declaration SEMICOLON
            {
            pushFollow(FOLLOW_supposition_declaration_in_supposition_deduction_pair15863);
            supposition_declaration1120=supposition_declaration();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_supposition_declaration.add(supposition_declaration1120.getTree());
            SEMICOLON1121=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_supposition_deduction_pair15865); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SEMICOLON.add(SEMICOLON1121);

            pushFollow(FOLLOW_proof_expression_list_in_supposition_deduction_pair15875);
            proof_expression_list1122=proof_expression_list();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_proof_expression_list.add(proof_expression_list1122.getTree());
            // RParser.g:2163:9: ( LSQBRACK IDENTIFIER RSQBRACK )?
            int alt292=2;
            int LA292_0 = input.LA(1);

            if ( (LA292_0==LSQBRACK) ) {
                alt292=1;
            }
            switch (alt292) {
                case 1 :
                    // RParser.g:2163:10: LSQBRACK IDENTIFIER RSQBRACK
                    {
                    LSQBRACK1123=(Token)match(input,LSQBRACK,FOLLOW_LSQBRACK_in_supposition_deduction_pair15886); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LSQBRACK.add(LSQBRACK1123);

                    IDENTIFIER1124=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_supposition_deduction_pair15888); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENTIFIER.add(IDENTIFIER1124);

                    RSQBRACK1125=(Token)match(input,RSQBRACK,FOLLOW_RSQBRACK_in_supposition_deduction_pair15890); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RSQBRACK.add(RSQBRACK1125);


                    }
                    break;

            }

            pushFollow(FOLLOW_deduction_declaration_in_supposition_deduction_pair15902);
            deduction_declaration1126=deduction_declaration();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_deduction_declaration.add(deduction_declaration1126.getTree());
            SEMICOLON1127=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_supposition_deduction_pair15904); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SEMICOLON.add(SEMICOLON1127);



            // AST REWRITE
            // elements: deduction_declaration, proof_expression_list, IDENTIFIER, supposition_declaration
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (ColsAST)adaptor.nil();
            // 2165:9: -> ^( SUPDEDUC supposition_declaration proof_expression_list ( IDENTIFIER )? deduction_declaration )
            {
                // RParser.g:2165:12: ^( SUPDEDUC supposition_declaration proof_expression_list ( IDENTIFIER )? deduction_declaration )
                {
                ColsAST root_1 = (ColsAST)adaptor.nil();
                root_1 = (ColsAST)adaptor.becomeRoot((ColsAST)adaptor.create(SUPDEDUC, "SUPDEDUC"), root_1);

                adaptor.addChild(root_1, stream_supposition_declaration.nextTree());
                adaptor.addChild(root_1, stream_proof_expression_list.nextTree());
                // RParser.g:2165:69: ( IDENTIFIER )?
                if ( stream_IDENTIFIER.hasNext() ) {
                    adaptor.addChild(root_1, stream_IDENTIFIER.nextNode());

                }
                stream_IDENTIFIER.reset();
                adaptor.addChild(root_1, stream_deduction_declaration.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (ColsAST)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "supposition_deduction_pair"

    public static class supposition_declaration_return extends ParserRuleReturnScope {
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "supposition_declaration"
    // RParser.g:2168:1: supposition_declaration : SUPPOSITION ( ( ( ident COLON )=> ( math_variable_declarations ( AND math_expression )? ) ) | ( ( ident COMMA ident )=> ( math_variable_declarations ( AND math_expression )? ) ) ) ;
    public final RParser.supposition_declaration_return supposition_declaration() throws RecognitionException {
        RParser.supposition_declaration_return retval = new RParser.supposition_declaration_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        Token SUPPOSITION1128=null;
        Token AND1130=null;
        Token AND1133=null;
        RParser.math_variable_declarations_return math_variable_declarations1129 = null;

        RParser.math_expression_return math_expression1131 = null;

        RParser.math_variable_declarations_return math_variable_declarations1132 = null;

        RParser.math_expression_return math_expression1134 = null;


        ColsAST SUPPOSITION1128_tree=null;
        ColsAST AND1130_tree=null;
        ColsAST AND1133_tree=null;

        try {
            // RParser.g:2169:5: ( SUPPOSITION ( ( ( ident COLON )=> ( math_variable_declarations ( AND math_expression )? ) ) | ( ( ident COMMA ident )=> ( math_variable_declarations ( AND math_expression )? ) ) ) )
            // RParser.g:2169:9: SUPPOSITION ( ( ( ident COLON )=> ( math_variable_declarations ( AND math_expression )? ) ) | ( ( ident COMMA ident )=> ( math_variable_declarations ( AND math_expression )? ) ) )
            {
            root_0 = (ColsAST)adaptor.nil();

            SUPPOSITION1128=(Token)match(input,SUPPOSITION,FOLLOW_SUPPOSITION_in_supposition_declaration15950); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SUPPOSITION1128_tree = (ColsAST)adaptor.create(SUPPOSITION1128);
            root_0 = (ColsAST)adaptor.becomeRoot(SUPPOSITION1128_tree, root_0);
            }
            // RParser.g:2170:9: ( ( ( ident COLON )=> ( math_variable_declarations ( AND math_expression )? ) ) | ( ( ident COMMA ident )=> ( math_variable_declarations ( AND math_expression )? ) ) )
            int alt295=2;
            int LA295_0 = input.LA(1);

            if ( (LA295_0==IDENTIFIER) ) {
                int LA295_1 = input.LA(2);

                if ( (synpred33_RParser()) ) {
                    alt295=1;
                }
                else if ( (synpred34_RParser()) ) {
                    alt295=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 295, 1, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 295, 0, input);

                throw nvae;
            }
            switch (alt295) {
                case 1 :
                    // RParser.g:2171:11: ( ( ident COLON )=> ( math_variable_declarations ( AND math_expression )? ) )
                    {
                    // RParser.g:2171:11: ( ( ident COLON )=> ( math_variable_declarations ( AND math_expression )? ) )
                    // RParser.g:2171:12: ( ident COLON )=> ( math_variable_declarations ( AND math_expression )? )
                    {
                    // RParser.g:2171:29: ( math_variable_declarations ( AND math_expression )? )
                    // RParser.g:2171:30: math_variable_declarations ( AND math_expression )?
                    {
                    pushFollow(FOLLOW_math_variable_declarations_in_supposition_declaration15983);
                    math_variable_declarations1129=math_variable_declarations();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, math_variable_declarations1129.getTree());
                    // RParser.g:2171:57: ( AND math_expression )?
                    int alt293=2;
                    int LA293_0 = input.LA(1);

                    if ( (LA293_0==AND) ) {
                        alt293=1;
                    }
                    switch (alt293) {
                        case 1 :
                            // RParser.g:2171:58: AND math_expression
                            {
                            AND1130=(Token)match(input,AND,FOLLOW_AND_in_supposition_declaration15986); if (state.failed) return retval;
                            pushFollow(FOLLOW_math_expression_in_supposition_declaration15989);
                            math_expression1131=math_expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, math_expression1131.getTree());

                            }
                            break;

                    }


                    }


                    }


                    }
                    break;
                case 2 :
                    // RParser.g:2172:13: ( ( ident COMMA ident )=> ( math_variable_declarations ( AND math_expression )? ) )
                    {
                    // RParser.g:2172:13: ( ( ident COMMA ident )=> ( math_variable_declarations ( AND math_expression )? ) )
                    // RParser.g:2172:14: ( ident COMMA ident )=> ( math_variable_declarations ( AND math_expression )? )
                    {
                    // RParser.g:2172:37: ( math_variable_declarations ( AND math_expression )? )
                    // RParser.g:2172:38: math_variable_declarations ( AND math_expression )?
                    {
                    pushFollow(FOLLOW_math_variable_declarations_in_supposition_declaration16019);
                    math_variable_declarations1132=math_variable_declarations();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, math_variable_declarations1132.getTree());
                    // RParser.g:2172:65: ( AND math_expression )?
                    int alt294=2;
                    int LA294_0 = input.LA(1);

                    if ( (LA294_0==AND) ) {
                        alt294=1;
                    }
                    switch (alt294) {
                        case 1 :
                            // RParser.g:2172:66: AND math_expression
                            {
                            AND1133=(Token)match(input,AND,FOLLOW_AND_in_supposition_declaration16022); if (state.failed) return retval;
                            pushFollow(FOLLOW_math_expression_in_supposition_declaration16025);
                            math_expression1134=math_expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, math_expression1134.getTree());

                            }
                            break;

                    }


                    }


                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (ColsAST)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "supposition_declaration"

    public static class math_variable_declarations_return extends ParserRuleReturnScope {
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "math_variable_declarations"
    // RParser.g:2177:1: math_variable_declarations : math_variable_declaration_group ( COMMA math_variable_declaration_group )* -> ^( DECLARATIONS ( math_variable_declaration_group )+ ) ;
    public final RParser.math_variable_declarations_return math_variable_declarations() throws RecognitionException {
        RParser.math_variable_declarations_return retval = new RParser.math_variable_declarations_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        Token COMMA1136=null;
        RParser.math_variable_declaration_group_return math_variable_declaration_group1135 = null;

        RParser.math_variable_declaration_group_return math_variable_declaration_group1137 = null;


        ColsAST COMMA1136_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_math_variable_declaration_group=new RewriteRuleSubtreeStream(adaptor,"rule math_variable_declaration_group");
        try {
            // RParser.g:2178:5: ( math_variable_declaration_group ( COMMA math_variable_declaration_group )* -> ^( DECLARATIONS ( math_variable_declaration_group )+ ) )
            // RParser.g:2178:9: math_variable_declaration_group ( COMMA math_variable_declaration_group )*
            {
            pushFollow(FOLLOW_math_variable_declaration_group_in_math_variable_declarations16073);
            math_variable_declaration_group1135=math_variable_declaration_group();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_math_variable_declaration_group.add(math_variable_declaration_group1135.getTree());
            // RParser.g:2178:41: ( COMMA math_variable_declaration_group )*
            loop296:
            do {
                int alt296=2;
                int LA296_0 = input.LA(1);

                if ( (LA296_0==COMMA) ) {
                    alt296=1;
                }


                switch (alt296) {
            	case 1 :
            	    // RParser.g:2178:42: COMMA math_variable_declaration_group
            	    {
            	    COMMA1136=(Token)match(input,COMMA,FOLLOW_COMMA_in_math_variable_declarations16076); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA1136);

            	    pushFollow(FOLLOW_math_variable_declaration_group_in_math_variable_declarations16078);
            	    math_variable_declaration_group1137=math_variable_declaration_group();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_math_variable_declaration_group.add(math_variable_declaration_group1137.getTree());

            	    }
            	    break;

            	default :
            	    break loop296;
                }
            } while (true);



            // AST REWRITE
            // elements: math_variable_declaration_group
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (ColsAST)adaptor.nil();
            // 2179:9: -> ^( DECLARATIONS ( math_variable_declaration_group )+ )
            {
                // RParser.g:2179:12: ^( DECLARATIONS ( math_variable_declaration_group )+ )
                {
                ColsAST root_1 = (ColsAST)adaptor.nil();
                root_1 = (ColsAST)adaptor.becomeRoot((ColsAST)adaptor.create(DECLARATIONS, "DECLARATIONS"), root_1);

                if ( !(stream_math_variable_declaration_group.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_math_variable_declaration_group.hasNext() ) {
                    adaptor.addChild(root_1, stream_math_variable_declaration_group.nextTree());

                }
                stream_math_variable_declaration_group.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (ColsAST)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "math_variable_declarations"

    public static class deduction_declaration_return extends ParserRuleReturnScope {
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "deduction_declaration"
    // RParser.g:2182:1: deduction_declaration : DEDUCTION math_expression ;
    public final RParser.deduction_declaration_return deduction_declaration() throws RecognitionException {
        RParser.deduction_declaration_return retval = new RParser.deduction_declaration_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        Token DEDUCTION1138=null;
        RParser.math_expression_return math_expression1139 = null;


        ColsAST DEDUCTION1138_tree=null;

        try {
            // RParser.g:2183:5: ( DEDUCTION math_expression )
            // RParser.g:2183:9: DEDUCTION math_expression
            {
            root_0 = (ColsAST)adaptor.nil();

            DEDUCTION1138=(Token)match(input,DEDUCTION,FOLLOW_DEDUCTION_in_deduction_declaration16120); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            DEDUCTION1138_tree = (ColsAST)adaptor.create(DEDUCTION1138);
            root_0 = (ColsAST)adaptor.becomeRoot(DEDUCTION1138_tree, root_0);
            }
            pushFollow(FOLLOW_math_expression_in_deduction_declaration16123);
            math_expression1139=math_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, math_expression1139.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (ColsAST)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "deduction_declaration"

    public static class justification_declaration_return extends ParserRuleReturnScope {
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "justification_declaration"
    // RParser.g:2186:1: justification_declaration : math_expression justification SEMICOLON -> ^( SIMPLIFICATION math_expression justification ) ;
    public final RParser.justification_declaration_return justification_declaration() throws RecognitionException {
        RParser.justification_declaration_return retval = new RParser.justification_declaration_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        Token SEMICOLON1142=null;
        RParser.math_expression_return math_expression1140 = null;

        RParser.justification_return justification1141 = null;


        ColsAST SEMICOLON1142_tree=null;
        RewriteRuleTokenStream stream_SEMICOLON=new RewriteRuleTokenStream(adaptor,"token SEMICOLON");
        RewriteRuleSubtreeStream stream_math_expression=new RewriteRuleSubtreeStream(adaptor,"rule math_expression");
        RewriteRuleSubtreeStream stream_justification=new RewriteRuleSubtreeStream(adaptor,"rule justification");
        try {
            // RParser.g:2187:5: ( math_expression justification SEMICOLON -> ^( SIMPLIFICATION math_expression justification ) )
            // RParser.g:2187:9: math_expression justification SEMICOLON
            {
            pushFollow(FOLLOW_math_expression_in_justification_declaration16146);
            math_expression1140=math_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_math_expression.add(math_expression1140.getTree());
            pushFollow(FOLLOW_justification_in_justification_declaration16148);
            justification1141=justification();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_justification.add(justification1141.getTree());
            SEMICOLON1142=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_justification_declaration16150); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SEMICOLON.add(SEMICOLON1142);



            // AST REWRITE
            // elements: justification, math_expression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (ColsAST)adaptor.nil();
            // 2187:49: -> ^( SIMPLIFICATION math_expression justification )
            {
                // RParser.g:2187:52: ^( SIMPLIFICATION math_expression justification )
                {
                ColsAST root_1 = (ColsAST)adaptor.nil();
                root_1 = (ColsAST)adaptor.becomeRoot((ColsAST)adaptor.create(SIMPLIFICATION, "SIMPLIFICATION"), root_1);

                adaptor.addChild(root_1, stream_math_expression.nextTree());
                adaptor.addChild(root_1, stream_justification.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (ColsAST)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "justification_declaration"

    public static class justification_return extends ParserRuleReturnScope {
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "justification"
    // RParser.g:2190:1: justification : BY ( ( hyp_desig COMMA )=> double_hyp_rule_justification | ( hyp_desig AMPERSAND )=> single_hyp_rule_justification | ( hyp_desig )=> hyp_desig | simple_justification | ( DEFINITION )=> def_justification ) ;
    public final RParser.justification_return justification() throws RecognitionException {
        RParser.justification_return retval = new RParser.justification_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        Token BY1143=null;
        RParser.double_hyp_rule_justification_return double_hyp_rule_justification1144 = null;

        RParser.single_hyp_rule_justification_return single_hyp_rule_justification1145 = null;

        RParser.hyp_desig_return hyp_desig1146 = null;

        RParser.simple_justification_return simple_justification1147 = null;

        RParser.def_justification_return def_justification1148 = null;


        ColsAST BY1143_tree=null;

        try {
            // RParser.g:2191:5: ( BY ( ( hyp_desig COMMA )=> double_hyp_rule_justification | ( hyp_desig AMPERSAND )=> single_hyp_rule_justification | ( hyp_desig )=> hyp_desig | simple_justification | ( DEFINITION )=> def_justification ) )
            // RParser.g:2191:9: BY ( ( hyp_desig COMMA )=> double_hyp_rule_justification | ( hyp_desig AMPERSAND )=> single_hyp_rule_justification | ( hyp_desig )=> hyp_desig | simple_justification | ( DEFINITION )=> def_justification )
            {
            root_0 = (ColsAST)adaptor.nil();

            BY1143=(Token)match(input,BY,FOLLOW_BY_in_justification16183); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            BY1143_tree = (ColsAST)adaptor.create(BY1143);
            root_0 = (ColsAST)adaptor.becomeRoot(BY1143_tree, root_0);
            }
            // RParser.g:2192:9: ( ( hyp_desig COMMA )=> double_hyp_rule_justification | ( hyp_desig AMPERSAND )=> single_hyp_rule_justification | ( hyp_desig )=> hyp_desig | simple_justification | ( DEFINITION )=> def_justification )
            int alt297=5;
            alt297 = dfa297.predict(input);
            switch (alt297) {
                case 1 :
                    // RParser.g:2192:11: ( hyp_desig COMMA )=> double_hyp_rule_justification
                    {
                    pushFollow(FOLLOW_double_hyp_rule_justification_in_justification16204);
                    double_hyp_rule_justification1144=double_hyp_rule_justification();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, double_hyp_rule_justification1144.getTree());

                    }
                    break;
                case 2 :
                    // RParser.g:2193:9: ( hyp_desig AMPERSAND )=> single_hyp_rule_justification
                    {
                    pushFollow(FOLLOW_single_hyp_rule_justification_in_justification16222);
                    single_hyp_rule_justification1145=single_hyp_rule_justification();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, single_hyp_rule_justification1145.getTree());

                    }
                    break;
                case 3 :
                    // RParser.g:2194:9: ( hyp_desig )=> hyp_desig
                    {
                    pushFollow(FOLLOW_hyp_desig_in_justification16238);
                    hyp_desig1146=hyp_desig();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, hyp_desig1146.getTree());

                    }
                    break;
                case 4 :
                    // RParser.g:2195:9: simple_justification
                    {
                    pushFollow(FOLLOW_simple_justification_in_justification16248);
                    simple_justification1147=simple_justification();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, simple_justification1147.getTree());

                    }
                    break;
                case 5 :
                    // RParser.g:2196:9: ( DEFINITION )=> def_justification
                    {
                    pushFollow(FOLLOW_def_justification_in_justification16264);
                    def_justification1148=def_justification();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, def_justification1148.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (ColsAST)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "justification"

    public static class double_hyp_rule_justification_return extends ParserRuleReturnScope {
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "double_hyp_rule_justification"
    // RParser.g:2200:1: double_hyp_rule_justification : hyp_desig COMMA hyp_desig ( AMPERSAND rules_set_1 )? ;
    public final RParser.double_hyp_rule_justification_return double_hyp_rule_justification() throws RecognitionException {
        RParser.double_hyp_rule_justification_return retval = new RParser.double_hyp_rule_justification_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        Token COMMA1150=null;
        Token AMPERSAND1152=null;
        RParser.hyp_desig_return hyp_desig1149 = null;

        RParser.hyp_desig_return hyp_desig1151 = null;

        RParser.rules_set_1_return rules_set_11153 = null;


        ColsAST COMMA1150_tree=null;
        ColsAST AMPERSAND1152_tree=null;

        try {
            // RParser.g:2201:5: ( hyp_desig COMMA hyp_desig ( AMPERSAND rules_set_1 )? )
            // RParser.g:2201:9: hyp_desig COMMA hyp_desig ( AMPERSAND rules_set_1 )?
            {
            root_0 = (ColsAST)adaptor.nil();

            pushFollow(FOLLOW_hyp_desig_in_double_hyp_rule_justification16292);
            hyp_desig1149=hyp_desig();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, hyp_desig1149.getTree());
            COMMA1150=(Token)match(input,COMMA,FOLLOW_COMMA_in_double_hyp_rule_justification16294); if (state.failed) return retval;
            pushFollow(FOLLOW_hyp_desig_in_double_hyp_rule_justification16297);
            hyp_desig1151=hyp_desig();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, hyp_desig1151.getTree());
            // RParser.g:2202:7: ( AMPERSAND rules_set_1 )?
            int alt298=2;
            int LA298_0 = input.LA(1);

            if ( (LA298_0==AMPERSAND) ) {
                alt298=1;
            }
            switch (alt298) {
                case 1 :
                    // RParser.g:2202:8: AMPERSAND rules_set_1
                    {
                    AMPERSAND1152=(Token)match(input,AMPERSAND,FOLLOW_AMPERSAND_in_double_hyp_rule_justification16306); if (state.failed) return retval;
                    pushFollow(FOLLOW_rules_set_1_in_double_hyp_rule_justification16309);
                    rules_set_11153=rules_set_1();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rules_set_11153.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (ColsAST)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "double_hyp_rule_justification"

    public static class single_hyp_rule_justification_return extends ParserRuleReturnScope {
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "single_hyp_rule_justification"
    // RParser.g:2205:1: single_hyp_rule_justification : hyp_desig AMPERSAND ( rules_set_1 | rules_set_2 | def_justification ) ;
    public final RParser.single_hyp_rule_justification_return single_hyp_rule_justification() throws RecognitionException {
        RParser.single_hyp_rule_justification_return retval = new RParser.single_hyp_rule_justification_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        Token AMPERSAND1155=null;
        RParser.hyp_desig_return hyp_desig1154 = null;

        RParser.rules_set_1_return rules_set_11156 = null;

        RParser.rules_set_2_return rules_set_21157 = null;

        RParser.def_justification_return def_justification1158 = null;


        ColsAST AMPERSAND1155_tree=null;

        try {
            // RParser.g:2206:5: ( hyp_desig AMPERSAND ( rules_set_1 | rules_set_2 | def_justification ) )
            // RParser.g:2206:9: hyp_desig AMPERSAND ( rules_set_1 | rules_set_2 | def_justification )
            {
            root_0 = (ColsAST)adaptor.nil();

            pushFollow(FOLLOW_hyp_desig_in_single_hyp_rule_justification16330);
            hyp_desig1154=hyp_desig();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, hyp_desig1154.getTree());
            AMPERSAND1155=(Token)match(input,AMPERSAND,FOLLOW_AMPERSAND_in_single_hyp_rule_justification16332); if (state.failed) return retval;
            // RParser.g:2206:30: ( rules_set_1 | rules_set_2 | def_justification )
            int alt299=3;
            alt299 = dfa299.predict(input);
            switch (alt299) {
                case 1 :
                    // RParser.g:2206:31: rules_set_1
                    {
                    pushFollow(FOLLOW_rules_set_1_in_single_hyp_rule_justification16336);
                    rules_set_11156=rules_set_1();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rules_set_11156.getTree());

                    }
                    break;
                case 2 :
                    // RParser.g:2206:45: rules_set_2
                    {
                    pushFollow(FOLLOW_rules_set_2_in_single_hyp_rule_justification16340);
                    rules_set_21157=rules_set_2();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rules_set_21157.getTree());

                    }
                    break;
                case 3 :
                    // RParser.g:2206:59: def_justification
                    {
                    pushFollow(FOLLOW_def_justification_in_single_hyp_rule_justification16344);
                    def_justification1158=def_justification();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, def_justification1158.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (ColsAST)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "single_hyp_rule_justification"

    public static class def_justification_return extends ParserRuleReturnScope {
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "def_justification"
    // RParser.g:2209:1: def_justification : ( DEFINITION ( ( UNIQUE )=> ( UNIQUE ) | ( fn_name ) ) | LPAREN ident RPAREN OF DEFINITION fn_name ( FROM ident )? -> ^( INDEXED_DEFINITION ident fn_name ( ident )? ) ) ;
    public final RParser.def_justification_return def_justification() throws RecognitionException {
        RParser.def_justification_return retval = new RParser.def_justification_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        Token DEFINITION1159=null;
        Token UNIQUE1160=null;
        Token LPAREN1162=null;
        Token RPAREN1164=null;
        Token OF1165=null;
        Token DEFINITION1166=null;
        Token FROM1168=null;
        RParser.fn_name_return fn_name1161 = null;

        RParser.ident_return ident1163 = null;

        RParser.fn_name_return fn_name1167 = null;

        RParser.ident_return ident1169 = null;


        ColsAST DEFINITION1159_tree=null;
        ColsAST UNIQUE1160_tree=null;
        ColsAST LPAREN1162_tree=null;
        ColsAST RPAREN1164_tree=null;
        ColsAST OF1165_tree=null;
        ColsAST DEFINITION1166_tree=null;
        ColsAST FROM1168_tree=null;
        RewriteRuleTokenStream stream_DEFINITION=new RewriteRuleTokenStream(adaptor,"token DEFINITION");
        RewriteRuleTokenStream stream_UNIQUE=new RewriteRuleTokenStream(adaptor,"token UNIQUE");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_FROM=new RewriteRuleTokenStream(adaptor,"token FROM");
        RewriteRuleTokenStream stream_OF=new RewriteRuleTokenStream(adaptor,"token OF");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
        RewriteRuleSubtreeStream stream_fn_name=new RewriteRuleSubtreeStream(adaptor,"rule fn_name");
        try {
            // RParser.g:2210:5: ( ( DEFINITION ( ( UNIQUE )=> ( UNIQUE ) | ( fn_name ) ) | LPAREN ident RPAREN OF DEFINITION fn_name ( FROM ident )? -> ^( INDEXED_DEFINITION ident fn_name ( ident )? ) ) )
            // RParser.g:2211:5: ( DEFINITION ( ( UNIQUE )=> ( UNIQUE ) | ( fn_name ) ) | LPAREN ident RPAREN OF DEFINITION fn_name ( FROM ident )? -> ^( INDEXED_DEFINITION ident fn_name ( ident )? ) )
            {
            // RParser.g:2211:5: ( DEFINITION ( ( UNIQUE )=> ( UNIQUE ) | ( fn_name ) ) | LPAREN ident RPAREN OF DEFINITION fn_name ( FROM ident )? -> ^( INDEXED_DEFINITION ident fn_name ( ident )? ) )
            int alt302=2;
            int LA302_0 = input.LA(1);

            if ( (LA302_0==DEFINITION) ) {
                alt302=1;
            }
            else if ( (LA302_0==LPAREN) ) {
                alt302=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 302, 0, input);

                throw nvae;
            }
            switch (alt302) {
                case 1 :
                    // RParser.g:2211:7: DEFINITION ( ( UNIQUE )=> ( UNIQUE ) | ( fn_name ) )
                    {
                    DEFINITION1159=(Token)match(input,DEFINITION,FOLLOW_DEFINITION_in_def_justification16371); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DEFINITION.add(DEFINITION1159);

                    // RParser.g:2211:18: ( ( UNIQUE )=> ( UNIQUE ) | ( fn_name ) )
                    int alt300=2;
                    int LA300_0 = input.LA(1);

                    if ( (LA300_0==UNIQUE) && (synpred39_RParser())) {
                        alt300=1;
                    }
                    else if ( (LA300_0==ABS||LA300_0==AND||LA300_0==COMPLEMENT||LA300_0==DIV||LA300_0==IFF||LA300_0==IMPLIES||LA300_0==INTERSECT||(LA300_0>=IN && LA300_0<=SUBSTR)||LA300_0==MOD||(LA300_0>=NOT && LA300_0<=CAT)||LA300_0==OR||LA300_0==REM||LA300_0==UNION||LA300_0==WITHOUT||LA300_0==IDENTIFIER||(LA300_0>=PLUS && LA300_0<=MINUS)||(LA300_0>=MULTIPLY && LA300_0<=GT)||(LA300_0>=XOR && LA300_0<=ORELSE)) ) {
                        alt300=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 300, 0, input);

                        throw nvae;
                    }
                    switch (alt300) {
                        case 1 :
                            // RParser.g:2211:19: ( UNIQUE )=> ( UNIQUE )
                            {
                            // RParser.g:2211:31: ( UNIQUE )
                            // RParser.g:2211:32: UNIQUE
                            {
                            UNIQUE1160=(Token)match(input,UNIQUE,FOLLOW_UNIQUE_in_def_justification16381); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_UNIQUE.add(UNIQUE1160);


                            }


                            }
                            break;
                        case 2 :
                            // RParser.g:2211:42: ( fn_name )
                            {
                            // RParser.g:2211:42: ( fn_name )
                            // RParser.g:2211:43: fn_name
                            {
                            pushFollow(FOLLOW_fn_name_in_def_justification16387);
                            fn_name1161=fn_name();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_fn_name.add(fn_name1161.getTree());

                            }


                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // RParser.g:2212:7: LPAREN ident RPAREN OF DEFINITION fn_name ( FROM ident )?
                    {
                    LPAREN1162=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_def_justification16397); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN1162);

                    pushFollow(FOLLOW_ident_in_def_justification16399);
                    ident1163=ident();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_ident.add(ident1163.getTree());
                    RPAREN1164=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_def_justification16401); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN1164);

                    OF1165=(Token)match(input,OF,FOLLOW_OF_in_def_justification16403); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_OF.add(OF1165);

                    DEFINITION1166=(Token)match(input,DEFINITION,FOLLOW_DEFINITION_in_def_justification16405); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DEFINITION.add(DEFINITION1166);

                    pushFollow(FOLLOW_fn_name_in_def_justification16407);
                    fn_name1167=fn_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_fn_name.add(fn_name1167.getTree());
                    // RParser.g:2212:49: ( FROM ident )?
                    int alt301=2;
                    int LA301_0 = input.LA(1);

                    if ( (LA301_0==FROM) ) {
                        alt301=1;
                    }
                    switch (alt301) {
                        case 1 :
                            // RParser.g:2212:50: FROM ident
                            {
                            FROM1168=(Token)match(input,FROM,FOLLOW_FROM_in_def_justification16410); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_FROM.add(FROM1168);

                            pushFollow(FOLLOW_ident_in_def_justification16412);
                            ident1169=ident();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_ident.add(ident1169.getTree());

                            }
                            break;

                    }



                    // AST REWRITE
                    // elements: ident, ident, fn_name
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (ColsAST)adaptor.nil();
                    // 2212:63: -> ^( INDEXED_DEFINITION ident fn_name ( ident )? )
                    {
                        // RParser.g:2212:66: ^( INDEXED_DEFINITION ident fn_name ( ident )? )
                        {
                        ColsAST root_1 = (ColsAST)adaptor.nil();
                        root_1 = (ColsAST)adaptor.becomeRoot((ColsAST)adaptor.create(INDEXED_DEFINITION, "INDEXED_DEFINITION"), root_1);

                        adaptor.addChild(root_1, stream_ident.nextTree());
                        adaptor.addChild(root_1, stream_fn_name.nextTree());
                        // RParser.g:2212:101: ( ident )?
                        if ( stream_ident.hasNext() ) {
                            adaptor.addChild(root_1, stream_ident.nextTree());

                        }
                        stream_ident.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (ColsAST)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "def_justification"

    public static class simple_justification_return extends ParserRuleReturnScope {
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "simple_justification"
    // RParser.g:2216:1: simple_justification : ( rules_set_2 | rules_set_3 );
    public final RParser.simple_justification_return simple_justification() throws RecognitionException {
        RParser.simple_justification_return retval = new RParser.simple_justification_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        RParser.rules_set_2_return rules_set_21170 = null;

        RParser.rules_set_3_return rules_set_31171 = null;



        try {
            // RParser.g:2217:5: ( rules_set_2 | rules_set_3 )
            int alt303=2;
            int LA303_0 = input.LA(1);

            if ( (LA303_0==CONJUNCT||LA303_0==EXISTENTIAL||LA303_0==OR||LA303_0==QUANTIFIER||LA303_0==REDUCTIO||LA303_0==UNIVERSAL) ) {
                alt303=1;
            }
            else if ( (LA303_0==EXCLUDED) ) {
                alt303=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 303, 0, input);

                throw nvae;
            }
            switch (alt303) {
                case 1 :
                    // RParser.g:2217:9: rules_set_2
                    {
                    root_0 = (ColsAST)adaptor.nil();

                    pushFollow(FOLLOW_rules_set_2_in_simple_justification16452);
                    rules_set_21170=rules_set_2();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rules_set_21170.getTree());

                    }
                    break;
                case 2 :
                    // RParser.g:2217:23: rules_set_3
                    {
                    root_0 = (ColsAST)adaptor.nil();

                    pushFollow(FOLLOW_rules_set_3_in_simple_justification16456);
                    rules_set_31171=rules_set_3();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rules_set_31171.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (ColsAST)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "simple_justification"

    public static class rules_set_1_return extends ParserRuleReturnScope {
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rules_set_1"
    // RParser.g:2220:1: rules_set_1 : ( MODUS PONENS -> ^( RULE1 MODUS_PONENS ) | AND RULE -> ^( RULE1 AND_RULE ) | CONTRADICTION -> ^( RULE1 CONTRADICTION ) | EQUALITY -> ^( RULE1 EQUALITY ) | ALTERNATIVE ELIMINATION -> ^( RULE1 ALTERNATIVE_ELIMINATION ) | COMMON CONCLUSION -> ^( RULE1 COMMON_CONCLUSION ) ) ;
    public final RParser.rules_set_1_return rules_set_1() throws RecognitionException {
        RParser.rules_set_1_return retval = new RParser.rules_set_1_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        Token MODUS1172=null;
        Token PONENS1173=null;
        Token AND1174=null;
        Token RULE1175=null;
        Token CONTRADICTION1176=null;
        Token EQUALITY1177=null;
        Token ALTERNATIVE1178=null;
        Token ELIMINATION1179=null;
        Token COMMON1180=null;
        Token CONCLUSION1181=null;

        ColsAST MODUS1172_tree=null;
        ColsAST PONENS1173_tree=null;
        ColsAST AND1174_tree=null;
        ColsAST RULE1175_tree=null;
        ColsAST CONTRADICTION1176_tree=null;
        ColsAST EQUALITY1177_tree=null;
        ColsAST ALTERNATIVE1178_tree=null;
        ColsAST ELIMINATION1179_tree=null;
        ColsAST COMMON1180_tree=null;
        ColsAST CONCLUSION1181_tree=null;
        RewriteRuleTokenStream stream_EQUALITY=new RewriteRuleTokenStream(adaptor,"token EQUALITY");
        RewriteRuleTokenStream stream_ALTERNATIVE=new RewriteRuleTokenStream(adaptor,"token ALTERNATIVE");
        RewriteRuleTokenStream stream_COMMON=new RewriteRuleTokenStream(adaptor,"token COMMON");
        RewriteRuleTokenStream stream_MODUS=new RewriteRuleTokenStream(adaptor,"token MODUS");
        RewriteRuleTokenStream stream_RULE=new RewriteRuleTokenStream(adaptor,"token RULE");
        RewriteRuleTokenStream stream_AND=new RewriteRuleTokenStream(adaptor,"token AND");
        RewriteRuleTokenStream stream_ELIMINATION=new RewriteRuleTokenStream(adaptor,"token ELIMINATION");
        RewriteRuleTokenStream stream_PONENS=new RewriteRuleTokenStream(adaptor,"token PONENS");
        RewriteRuleTokenStream stream_CONCLUSION=new RewriteRuleTokenStream(adaptor,"token CONCLUSION");
        RewriteRuleTokenStream stream_CONTRADICTION=new RewriteRuleTokenStream(adaptor,"token CONTRADICTION");

        try {
            // RParser.g:2221:5: ( ( MODUS PONENS -> ^( RULE1 MODUS_PONENS ) | AND RULE -> ^( RULE1 AND_RULE ) | CONTRADICTION -> ^( RULE1 CONTRADICTION ) | EQUALITY -> ^( RULE1 EQUALITY ) | ALTERNATIVE ELIMINATION -> ^( RULE1 ALTERNATIVE_ELIMINATION ) | COMMON CONCLUSION -> ^( RULE1 COMMON_CONCLUSION ) ) )
            // RParser.g:2222:5: ( MODUS PONENS -> ^( RULE1 MODUS_PONENS ) | AND RULE -> ^( RULE1 AND_RULE ) | CONTRADICTION -> ^( RULE1 CONTRADICTION ) | EQUALITY -> ^( RULE1 EQUALITY ) | ALTERNATIVE ELIMINATION -> ^( RULE1 ALTERNATIVE_ELIMINATION ) | COMMON CONCLUSION -> ^( RULE1 COMMON_CONCLUSION ) )
            {
            // RParser.g:2222:5: ( MODUS PONENS -> ^( RULE1 MODUS_PONENS ) | AND RULE -> ^( RULE1 AND_RULE ) | CONTRADICTION -> ^( RULE1 CONTRADICTION ) | EQUALITY -> ^( RULE1 EQUALITY ) | ALTERNATIVE ELIMINATION -> ^( RULE1 ALTERNATIVE_ELIMINATION ) | COMMON CONCLUSION -> ^( RULE1 COMMON_CONCLUSION ) )
            int alt304=6;
            switch ( input.LA(1) ) {
            case MODUS:
                {
                alt304=1;
                }
                break;
            case AND:
                {
                alt304=2;
                }
                break;
            case CONTRADICTION:
                {
                alt304=3;
                }
                break;
            case EQUALITY:
                {
                alt304=4;
                }
                break;
            case ALTERNATIVE:
                {
                alt304=5;
                }
                break;
            case COMMON:
                {
                alt304=6;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 304, 0, input);

                throw nvae;
            }

            switch (alt304) {
                case 1 :
                    // RParser.g:2222:7: MODUS PONENS
                    {
                    MODUS1172=(Token)match(input,MODUS,FOLLOW_MODUS_in_rules_set_116479); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_MODUS.add(MODUS1172);

                    PONENS1173=(Token)match(input,PONENS,FOLLOW_PONENS_in_rules_set_116481); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_PONENS.add(PONENS1173);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (ColsAST)adaptor.nil();
                    // 2222:20: -> ^( RULE1 MODUS_PONENS )
                    {
                        // RParser.g:2222:23: ^( RULE1 MODUS_PONENS )
                        {
                        ColsAST root_1 = (ColsAST)adaptor.nil();
                        root_1 = (ColsAST)adaptor.becomeRoot((ColsAST)adaptor.create(RULE1, "RULE1"), root_1);

                        adaptor.addChild(root_1, (ColsAST)adaptor.create(MODUS_PONENS, "MODUS_PONENS"));

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // RParser.g:2223:9: AND RULE
                    {
                    AND1174=(Token)match(input,AND,FOLLOW_AND_in_rules_set_116499); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AND.add(AND1174);

                    RULE1175=(Token)match(input,RULE,FOLLOW_RULE_in_rules_set_116501); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RULE.add(RULE1175);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (ColsAST)adaptor.nil();
                    // 2223:18: -> ^( RULE1 AND_RULE )
                    {
                        // RParser.g:2223:21: ^( RULE1 AND_RULE )
                        {
                        ColsAST root_1 = (ColsAST)adaptor.nil();
                        root_1 = (ColsAST)adaptor.becomeRoot((ColsAST)adaptor.create(RULE1, "RULE1"), root_1);

                        adaptor.addChild(root_1, (ColsAST)adaptor.create(AND_RULE, "AND_RULE"));

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // RParser.g:2224:9: CONTRADICTION
                    {
                    CONTRADICTION1176=(Token)match(input,CONTRADICTION,FOLLOW_CONTRADICTION_in_rules_set_116519); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CONTRADICTION.add(CONTRADICTION1176);



                    // AST REWRITE
                    // elements: CONTRADICTION
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (ColsAST)adaptor.nil();
                    // 2224:23: -> ^( RULE1 CONTRADICTION )
                    {
                        // RParser.g:2224:26: ^( RULE1 CONTRADICTION )
                        {
                        ColsAST root_1 = (ColsAST)adaptor.nil();
                        root_1 = (ColsAST)adaptor.becomeRoot((ColsAST)adaptor.create(RULE1, "RULE1"), root_1);

                        adaptor.addChild(root_1, stream_CONTRADICTION.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 4 :
                    // RParser.g:2225:9: EQUALITY
                    {
                    EQUALITY1177=(Token)match(input,EQUALITY,FOLLOW_EQUALITY_in_rules_set_116537); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EQUALITY.add(EQUALITY1177);



                    // AST REWRITE
                    // elements: EQUALITY
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (ColsAST)adaptor.nil();
                    // 2225:18: -> ^( RULE1 EQUALITY )
                    {
                        // RParser.g:2225:21: ^( RULE1 EQUALITY )
                        {
                        ColsAST root_1 = (ColsAST)adaptor.nil();
                        root_1 = (ColsAST)adaptor.becomeRoot((ColsAST)adaptor.create(RULE1, "RULE1"), root_1);

                        adaptor.addChild(root_1, stream_EQUALITY.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 5 :
                    // RParser.g:2226:9: ALTERNATIVE ELIMINATION
                    {
                    ALTERNATIVE1178=(Token)match(input,ALTERNATIVE,FOLLOW_ALTERNATIVE_in_rules_set_116555); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ALTERNATIVE.add(ALTERNATIVE1178);

                    ELIMINATION1179=(Token)match(input,ELIMINATION,FOLLOW_ELIMINATION_in_rules_set_116557); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ELIMINATION.add(ELIMINATION1179);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (ColsAST)adaptor.nil();
                    // 2226:33: -> ^( RULE1 ALTERNATIVE_ELIMINATION )
                    {
                        // RParser.g:2226:36: ^( RULE1 ALTERNATIVE_ELIMINATION )
                        {
                        ColsAST root_1 = (ColsAST)adaptor.nil();
                        root_1 = (ColsAST)adaptor.becomeRoot((ColsAST)adaptor.create(RULE1, "RULE1"), root_1);

                        adaptor.addChild(root_1, (ColsAST)adaptor.create(ALTERNATIVE_ELIMINATION, "ALTERNATIVE_ELIMINATION"));

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 6 :
                    // RParser.g:2227:9: COMMON CONCLUSION
                    {
                    COMMON1180=(Token)match(input,COMMON,FOLLOW_COMMON_in_rules_set_116575); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COMMON.add(COMMON1180);

                    CONCLUSION1181=(Token)match(input,CONCLUSION,FOLLOW_CONCLUSION_in_rules_set_116577); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CONCLUSION.add(CONCLUSION1181);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (ColsAST)adaptor.nil();
                    // 2227:27: -> ^( RULE1 COMMON_CONCLUSION )
                    {
                        // RParser.g:2227:30: ^( RULE1 COMMON_CONCLUSION )
                        {
                        ColsAST root_1 = (ColsAST)adaptor.nil();
                        root_1 = (ColsAST)adaptor.becomeRoot((ColsAST)adaptor.create(RULE1, "RULE1"), root_1);

                        adaptor.addChild(root_1, (ColsAST)adaptor.create(COMMON_CONCLUSION, "COMMON_CONCLUSION"));

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (ColsAST)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "rules_set_1"

    public static class rules_set_2_return extends ParserRuleReturnScope {
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rules_set_2"
    // RParser.g:2231:1: rules_set_2 : ( REDUCTIO AD ABSURDUM -> ^( RULE2 REDUCTIO_AD_ABSURDUM ) | ( UNIVERSAL GENERALIZATION )=> UNIVERSAL GENERALIZATION -> ^( RULE2 UNIVERSAL_GENERALIZATION ) | UNIVERSAL INSTANTIATION -> ^( RULE2 UNIVERSAL_INSTANTIATION ) | ( EXISTENTIAL GENERALIZATION )=> EXISTENTIAL GENERALIZATION -> ^( RULE2 EXISTENTIAL_GENERALIZATION ) | EXISTENTIAL INSTANTIATION -> ^( RULE2 EXISTENTIAL_INSTANTIATION ) | OR RULE -> ^( RULE2 OR_RULE ) | CONJUNCT ELIMINATION -> ^( RULE2 CONJUNCT_ELIMINATION ) | QUANTIFIER DISTRIBUTION -> ^( RULE2 QUANTIFIER_DISTRIBUTION ) ) ;
    public final RParser.rules_set_2_return rules_set_2() throws RecognitionException {
        RParser.rules_set_2_return retval = new RParser.rules_set_2_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        Token REDUCTIO1182=null;
        Token AD1183=null;
        Token ABSURDUM1184=null;
        Token UNIVERSAL1185=null;
        Token GENERALIZATION1186=null;
        Token UNIVERSAL1187=null;
        Token INSTANTIATION1188=null;
        Token EXISTENTIAL1189=null;
        Token GENERALIZATION1190=null;
        Token EXISTENTIAL1191=null;
        Token INSTANTIATION1192=null;
        Token OR1193=null;
        Token RULE1194=null;
        Token CONJUNCT1195=null;
        Token ELIMINATION1196=null;
        Token QUANTIFIER1197=null;
        Token DISTRIBUTION1198=null;

        ColsAST REDUCTIO1182_tree=null;
        ColsAST AD1183_tree=null;
        ColsAST ABSURDUM1184_tree=null;
        ColsAST UNIVERSAL1185_tree=null;
        ColsAST GENERALIZATION1186_tree=null;
        ColsAST UNIVERSAL1187_tree=null;
        ColsAST INSTANTIATION1188_tree=null;
        ColsAST EXISTENTIAL1189_tree=null;
        ColsAST GENERALIZATION1190_tree=null;
        ColsAST EXISTENTIAL1191_tree=null;
        ColsAST INSTANTIATION1192_tree=null;
        ColsAST OR1193_tree=null;
        ColsAST RULE1194_tree=null;
        ColsAST CONJUNCT1195_tree=null;
        ColsAST ELIMINATION1196_tree=null;
        ColsAST QUANTIFIER1197_tree=null;
        ColsAST DISTRIBUTION1198_tree=null;
        RewriteRuleTokenStream stream_GENERALIZATION=new RewriteRuleTokenStream(adaptor,"token GENERALIZATION");
        RewriteRuleTokenStream stream_RULE=new RewriteRuleTokenStream(adaptor,"token RULE");
        RewriteRuleTokenStream stream_INSTANTIATION=new RewriteRuleTokenStream(adaptor,"token INSTANTIATION");
        RewriteRuleTokenStream stream_ABSURDUM=new RewriteRuleTokenStream(adaptor,"token ABSURDUM");
        RewriteRuleTokenStream stream_OR=new RewriteRuleTokenStream(adaptor,"token OR");
        RewriteRuleTokenStream stream_AD=new RewriteRuleTokenStream(adaptor,"token AD");
        RewriteRuleTokenStream stream_EXISTENTIAL=new RewriteRuleTokenStream(adaptor,"token EXISTENTIAL");
        RewriteRuleTokenStream stream_QUANTIFIER=new RewriteRuleTokenStream(adaptor,"token QUANTIFIER");
        RewriteRuleTokenStream stream_ELIMINATION=new RewriteRuleTokenStream(adaptor,"token ELIMINATION");
        RewriteRuleTokenStream stream_UNIVERSAL=new RewriteRuleTokenStream(adaptor,"token UNIVERSAL");
        RewriteRuleTokenStream stream_DISTRIBUTION=new RewriteRuleTokenStream(adaptor,"token DISTRIBUTION");
        RewriteRuleTokenStream stream_REDUCTIO=new RewriteRuleTokenStream(adaptor,"token REDUCTIO");
        RewriteRuleTokenStream stream_CONJUNCT=new RewriteRuleTokenStream(adaptor,"token CONJUNCT");

        try {
            // RParser.g:2232:5: ( ( REDUCTIO AD ABSURDUM -> ^( RULE2 REDUCTIO_AD_ABSURDUM ) | ( UNIVERSAL GENERALIZATION )=> UNIVERSAL GENERALIZATION -> ^( RULE2 UNIVERSAL_GENERALIZATION ) | UNIVERSAL INSTANTIATION -> ^( RULE2 UNIVERSAL_INSTANTIATION ) | ( EXISTENTIAL GENERALIZATION )=> EXISTENTIAL GENERALIZATION -> ^( RULE2 EXISTENTIAL_GENERALIZATION ) | EXISTENTIAL INSTANTIATION -> ^( RULE2 EXISTENTIAL_INSTANTIATION ) | OR RULE -> ^( RULE2 OR_RULE ) | CONJUNCT ELIMINATION -> ^( RULE2 CONJUNCT_ELIMINATION ) | QUANTIFIER DISTRIBUTION -> ^( RULE2 QUANTIFIER_DISTRIBUTION ) ) )
            // RParser.g:2233:5: ( REDUCTIO AD ABSURDUM -> ^( RULE2 REDUCTIO_AD_ABSURDUM ) | ( UNIVERSAL GENERALIZATION )=> UNIVERSAL GENERALIZATION -> ^( RULE2 UNIVERSAL_GENERALIZATION ) | UNIVERSAL INSTANTIATION -> ^( RULE2 UNIVERSAL_INSTANTIATION ) | ( EXISTENTIAL GENERALIZATION )=> EXISTENTIAL GENERALIZATION -> ^( RULE2 EXISTENTIAL_GENERALIZATION ) | EXISTENTIAL INSTANTIATION -> ^( RULE2 EXISTENTIAL_INSTANTIATION ) | OR RULE -> ^( RULE2 OR_RULE ) | CONJUNCT ELIMINATION -> ^( RULE2 CONJUNCT_ELIMINATION ) | QUANTIFIER DISTRIBUTION -> ^( RULE2 QUANTIFIER_DISTRIBUTION ) )
            {
            // RParser.g:2233:5: ( REDUCTIO AD ABSURDUM -> ^( RULE2 REDUCTIO_AD_ABSURDUM ) | ( UNIVERSAL GENERALIZATION )=> UNIVERSAL GENERALIZATION -> ^( RULE2 UNIVERSAL_GENERALIZATION ) | UNIVERSAL INSTANTIATION -> ^( RULE2 UNIVERSAL_INSTANTIATION ) | ( EXISTENTIAL GENERALIZATION )=> EXISTENTIAL GENERALIZATION -> ^( RULE2 EXISTENTIAL_GENERALIZATION ) | EXISTENTIAL INSTANTIATION -> ^( RULE2 EXISTENTIAL_INSTANTIATION ) | OR RULE -> ^( RULE2 OR_RULE ) | CONJUNCT ELIMINATION -> ^( RULE2 CONJUNCT_ELIMINATION ) | QUANTIFIER DISTRIBUTION -> ^( RULE2 QUANTIFIER_DISTRIBUTION ) )
            int alt305=8;
            alt305 = dfa305.predict(input);
            switch (alt305) {
                case 1 :
                    // RParser.g:2233:7: REDUCTIO AD ABSURDUM
                    {
                    REDUCTIO1182=(Token)match(input,REDUCTIO,FOLLOW_REDUCTIO_in_rules_set_216619); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_REDUCTIO.add(REDUCTIO1182);

                    AD1183=(Token)match(input,AD,FOLLOW_AD_in_rules_set_216621); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AD.add(AD1183);

                    ABSURDUM1184=(Token)match(input,ABSURDUM,FOLLOW_ABSURDUM_in_rules_set_216623); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ABSURDUM.add(ABSURDUM1184);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (ColsAST)adaptor.nil();
                    // 2233:28: -> ^( RULE2 REDUCTIO_AD_ABSURDUM )
                    {
                        // RParser.g:2233:31: ^( RULE2 REDUCTIO_AD_ABSURDUM )
                        {
                        ColsAST root_1 = (ColsAST)adaptor.nil();
                        root_1 = (ColsAST)adaptor.becomeRoot((ColsAST)adaptor.create(RULE2, "RULE2"), root_1);

                        adaptor.addChild(root_1, (ColsAST)adaptor.create(REDUCTIO_AD_ABSURDUM, "REDUCTIO_AD_ABSURDUM"));

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // RParser.g:2234:9: ( UNIVERSAL GENERALIZATION )=> UNIVERSAL GENERALIZATION
                    {
                    UNIVERSAL1185=(Token)match(input,UNIVERSAL,FOLLOW_UNIVERSAL_in_rules_set_216648); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_UNIVERSAL.add(UNIVERSAL1185);

                    GENERALIZATION1186=(Token)match(input,GENERALIZATION,FOLLOW_GENERALIZATION_in_rules_set_216650); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_GENERALIZATION.add(GENERALIZATION1186);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (ColsAST)adaptor.nil();
                    // 2234:63: -> ^( RULE2 UNIVERSAL_GENERALIZATION )
                    {
                        // RParser.g:2234:66: ^( RULE2 UNIVERSAL_GENERALIZATION )
                        {
                        ColsAST root_1 = (ColsAST)adaptor.nil();
                        root_1 = (ColsAST)adaptor.becomeRoot((ColsAST)adaptor.create(RULE2, "RULE2"), root_1);

                        adaptor.addChild(root_1, (ColsAST)adaptor.create(UNIVERSAL_GENERALIZATION, "UNIVERSAL_GENERALIZATION"));

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // RParser.g:2235:9: UNIVERSAL INSTANTIATION
                    {
                    UNIVERSAL1187=(Token)match(input,UNIVERSAL,FOLLOW_UNIVERSAL_in_rules_set_216668); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_UNIVERSAL.add(UNIVERSAL1187);

                    INSTANTIATION1188=(Token)match(input,INSTANTIATION,FOLLOW_INSTANTIATION_in_rules_set_216670); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_INSTANTIATION.add(INSTANTIATION1188);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (ColsAST)adaptor.nil();
                    // 2235:33: -> ^( RULE2 UNIVERSAL_INSTANTIATION )
                    {
                        // RParser.g:2235:36: ^( RULE2 UNIVERSAL_INSTANTIATION )
                        {
                        ColsAST root_1 = (ColsAST)adaptor.nil();
                        root_1 = (ColsAST)adaptor.becomeRoot((ColsAST)adaptor.create(RULE2, "RULE2"), root_1);

                        adaptor.addChild(root_1, (ColsAST)adaptor.create(UNIVERSAL_INSTANTIATION, "UNIVERSAL_INSTANTIATION"));

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 4 :
                    // RParser.g:2236:9: ( EXISTENTIAL GENERALIZATION )=> EXISTENTIAL GENERALIZATION
                    {
                    EXISTENTIAL1189=(Token)match(input,EXISTENTIAL,FOLLOW_EXISTENTIAL_in_rules_set_216695); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EXISTENTIAL.add(EXISTENTIAL1189);

                    GENERALIZATION1190=(Token)match(input,GENERALIZATION,FOLLOW_GENERALIZATION_in_rules_set_216697); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_GENERALIZATION.add(GENERALIZATION1190);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (ColsAST)adaptor.nil();
                    // 2236:67: -> ^( RULE2 EXISTENTIAL_GENERALIZATION )
                    {
                        // RParser.g:2236:70: ^( RULE2 EXISTENTIAL_GENERALIZATION )
                        {
                        ColsAST root_1 = (ColsAST)adaptor.nil();
                        root_1 = (ColsAST)adaptor.becomeRoot((ColsAST)adaptor.create(RULE2, "RULE2"), root_1);

                        adaptor.addChild(root_1, (ColsAST)adaptor.create(EXISTENTIAL_GENERALIZATION, "EXISTENTIAL_GENERALIZATION"));

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 5 :
                    // RParser.g:2237:9: EXISTENTIAL INSTANTIATION
                    {
                    EXISTENTIAL1191=(Token)match(input,EXISTENTIAL,FOLLOW_EXISTENTIAL_in_rules_set_216715); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EXISTENTIAL.add(EXISTENTIAL1191);

                    INSTANTIATION1192=(Token)match(input,INSTANTIATION,FOLLOW_INSTANTIATION_in_rules_set_216717); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_INSTANTIATION.add(INSTANTIATION1192);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (ColsAST)adaptor.nil();
                    // 2237:36: -> ^( RULE2 EXISTENTIAL_INSTANTIATION )
                    {
                        // RParser.g:2237:39: ^( RULE2 EXISTENTIAL_INSTANTIATION )
                        {
                        ColsAST root_1 = (ColsAST)adaptor.nil();
                        root_1 = (ColsAST)adaptor.becomeRoot((ColsAST)adaptor.create(RULE2, "RULE2"), root_1);

                        adaptor.addChild(root_1, (ColsAST)adaptor.create(EXISTENTIAL_INSTANTIATION, "EXISTENTIAL_INSTANTIATION"));

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 6 :
                    // RParser.g:2238:9: OR RULE
                    {
                    OR1193=(Token)match(input,OR,FOLLOW_OR_in_rules_set_216736); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_OR.add(OR1193);

                    RULE1194=(Token)match(input,RULE,FOLLOW_RULE_in_rules_set_216738); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RULE.add(RULE1194);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (ColsAST)adaptor.nil();
                    // 2238:18: -> ^( RULE2 OR_RULE )
                    {
                        // RParser.g:2238:21: ^( RULE2 OR_RULE )
                        {
                        ColsAST root_1 = (ColsAST)adaptor.nil();
                        root_1 = (ColsAST)adaptor.becomeRoot((ColsAST)adaptor.create(RULE2, "RULE2"), root_1);

                        adaptor.addChild(root_1, (ColsAST)adaptor.create(OR_RULE, "OR_RULE"));

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 7 :
                    // RParser.g:2239:9: CONJUNCT ELIMINATION
                    {
                    CONJUNCT1195=(Token)match(input,CONJUNCT,FOLLOW_CONJUNCT_in_rules_set_216757); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CONJUNCT.add(CONJUNCT1195);

                    ELIMINATION1196=(Token)match(input,ELIMINATION,FOLLOW_ELIMINATION_in_rules_set_216759); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ELIMINATION.add(ELIMINATION1196);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (ColsAST)adaptor.nil();
                    // 2239:30: -> ^( RULE2 CONJUNCT_ELIMINATION )
                    {
                        // RParser.g:2239:33: ^( RULE2 CONJUNCT_ELIMINATION )
                        {
                        ColsAST root_1 = (ColsAST)adaptor.nil();
                        root_1 = (ColsAST)adaptor.becomeRoot((ColsAST)adaptor.create(RULE2, "RULE2"), root_1);

                        adaptor.addChild(root_1, (ColsAST)adaptor.create(CONJUNCT_ELIMINATION, "CONJUNCT_ELIMINATION"));

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 8 :
                    // RParser.g:2240:9: QUANTIFIER DISTRIBUTION
                    {
                    QUANTIFIER1197=(Token)match(input,QUANTIFIER,FOLLOW_QUANTIFIER_in_rules_set_216777); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_QUANTIFIER.add(QUANTIFIER1197);

                    DISTRIBUTION1198=(Token)match(input,DISTRIBUTION,FOLLOW_DISTRIBUTION_in_rules_set_216779); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DISTRIBUTION.add(DISTRIBUTION1198);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (ColsAST)adaptor.nil();
                    // 2240:33: -> ^( RULE2 QUANTIFIER_DISTRIBUTION )
                    {
                        // RParser.g:2240:36: ^( RULE2 QUANTIFIER_DISTRIBUTION )
                        {
                        ColsAST root_1 = (ColsAST)adaptor.nil();
                        root_1 = (ColsAST)adaptor.becomeRoot((ColsAST)adaptor.create(RULE2, "RULE2"), root_1);

                        adaptor.addChild(root_1, (ColsAST)adaptor.create(QUANTIFIER_DISTRIBUTION, "QUANTIFIER_DISTRIBUTION"));

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (ColsAST)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "rules_set_2"

    public static class rules_set_3_return extends ParserRuleReturnScope {
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rules_set_3"
    // RParser.g:2244:1: rules_set_3 : EXCLUDED MIDDLE -> ^( RULE3 EXCLUDED_MIDDLE ) ;
    public final RParser.rules_set_3_return rules_set_3() throws RecognitionException {
        RParser.rules_set_3_return retval = new RParser.rules_set_3_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        Token EXCLUDED1199=null;
        Token MIDDLE1200=null;

        ColsAST EXCLUDED1199_tree=null;
        ColsAST MIDDLE1200_tree=null;
        RewriteRuleTokenStream stream_EXCLUDED=new RewriteRuleTokenStream(adaptor,"token EXCLUDED");
        RewriteRuleTokenStream stream_MIDDLE=new RewriteRuleTokenStream(adaptor,"token MIDDLE");

        try {
            // RParser.g:2245:5: ( EXCLUDED MIDDLE -> ^( RULE3 EXCLUDED_MIDDLE ) )
            // RParser.g:2245:9: EXCLUDED MIDDLE
            {
            EXCLUDED1199=(Token)match(input,EXCLUDED,FOLLOW_EXCLUDED_in_rules_set_316814); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EXCLUDED.add(EXCLUDED1199);

            MIDDLE1200=(Token)match(input,MIDDLE,FOLLOW_MIDDLE_in_rules_set_316816); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_MIDDLE.add(MIDDLE1200);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (ColsAST)adaptor.nil();
            // 2245:25: -> ^( RULE3 EXCLUDED_MIDDLE )
            {
                // RParser.g:2245:28: ^( RULE3 EXCLUDED_MIDDLE )
                {
                ColsAST root_1 = (ColsAST)adaptor.nil();
                root_1 = (ColsAST)adaptor.becomeRoot((ColsAST)adaptor.create(RULE3, "RULE3"), root_1);

                adaptor.addChild(root_1, (ColsAST)adaptor.create(EXCLUDED_MIDDLE, "EXCLUDED_MIDDLE"));

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (ColsAST)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "rules_set_3"

    public static class hyp_desig_return extends ParserRuleReturnScope {
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "hyp_desig"
    // RParser.g:2248:1: hyp_desig : ( SELF -> ^( HYPDESIG SELF ) | lemma_call -> ^( HYPDESIG lemma_call ) | theorem_call -> ^( HYPDESIG theorem_call ) | corollary_name -> ^( HYPDESIG corollary_name ) | supposition_call -> ^( HYPDESIG supposition_call ) | definition_call -> ^( HYPDESIG definition_call ) | reference_marker_call -> ^( HYPDESIG reference_marker_call ) ) ;
    public final RParser.hyp_desig_return hyp_desig() throws RecognitionException {
        RParser.hyp_desig_return retval = new RParser.hyp_desig_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        Token SELF1201=null;
        RParser.lemma_call_return lemma_call1202 = null;

        RParser.theorem_call_return theorem_call1203 = null;

        RParser.corollary_name_return corollary_name1204 = null;

        RParser.supposition_call_return supposition_call1205 = null;

        RParser.definition_call_return definition_call1206 = null;

        RParser.reference_marker_call_return reference_marker_call1207 = null;


        ColsAST SELF1201_tree=null;
        RewriteRuleTokenStream stream_SELF=new RewriteRuleTokenStream(adaptor,"token SELF");
        RewriteRuleSubtreeStream stream_supposition_call=new RewriteRuleSubtreeStream(adaptor,"rule supposition_call");
        RewriteRuleSubtreeStream stream_definition_call=new RewriteRuleSubtreeStream(adaptor,"rule definition_call");
        RewriteRuleSubtreeStream stream_corollary_name=new RewriteRuleSubtreeStream(adaptor,"rule corollary_name");
        RewriteRuleSubtreeStream stream_theorem_call=new RewriteRuleSubtreeStream(adaptor,"rule theorem_call");
        RewriteRuleSubtreeStream stream_reference_marker_call=new RewriteRuleSubtreeStream(adaptor,"rule reference_marker_call");
        RewriteRuleSubtreeStream stream_lemma_call=new RewriteRuleSubtreeStream(adaptor,"rule lemma_call");
        try {
            // RParser.g:2249:5: ( ( SELF -> ^( HYPDESIG SELF ) | lemma_call -> ^( HYPDESIG lemma_call ) | theorem_call -> ^( HYPDESIG theorem_call ) | corollary_name -> ^( HYPDESIG corollary_name ) | supposition_call -> ^( HYPDESIG supposition_call ) | definition_call -> ^( HYPDESIG definition_call ) | reference_marker_call -> ^( HYPDESIG reference_marker_call ) ) )
            // RParser.g:2250:5: ( SELF -> ^( HYPDESIG SELF ) | lemma_call -> ^( HYPDESIG lemma_call ) | theorem_call -> ^( HYPDESIG theorem_call ) | corollary_name -> ^( HYPDESIG corollary_name ) | supposition_call -> ^( HYPDESIG supposition_call ) | definition_call -> ^( HYPDESIG definition_call ) | reference_marker_call -> ^( HYPDESIG reference_marker_call ) )
            {
            // RParser.g:2250:5: ( SELF -> ^( HYPDESIG SELF ) | lemma_call -> ^( HYPDESIG lemma_call ) | theorem_call -> ^( HYPDESIG theorem_call ) | corollary_name -> ^( HYPDESIG corollary_name ) | supposition_call -> ^( HYPDESIG supposition_call ) | definition_call -> ^( HYPDESIG definition_call ) | reference_marker_call -> ^( HYPDESIG reference_marker_call ) )
            int alt306=7;
            switch ( input.LA(1) ) {
            case SELF:
                {
                alt306=1;
                }
                break;
            case LEMMA:
                {
                alt306=2;
                }
                break;
            case THEOREM:
                {
                alt306=3;
                }
                break;
            case COROLLARY:
                {
                alt306=4;
                }
                break;
            case SUPPOSITION:
                {
                alt306=5;
                }
                break;
            case DEFINITION:
            case LPAREN:
                {
                alt306=6;
                }
                break;
            case IDENTIFIER:
                {
                alt306=7;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 306, 0, input);

                throw nvae;
            }

            switch (alt306) {
                case 1 :
                    // RParser.g:2250:7: SELF
                    {
                    SELF1201=(Token)match(input,SELF,FOLLOW_SELF_in_hyp_desig16850); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SELF.add(SELF1201);



                    // AST REWRITE
                    // elements: SELF
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (ColsAST)adaptor.nil();
                    // 2250:12: -> ^( HYPDESIG SELF )
                    {
                        // RParser.g:2250:15: ^( HYPDESIG SELF )
                        {
                        ColsAST root_1 = (ColsAST)adaptor.nil();
                        root_1 = (ColsAST)adaptor.becomeRoot((ColsAST)adaptor.create(HYPDESIG, "HYPDESIG"), root_1);

                        adaptor.addChild(root_1, stream_SELF.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // RParser.g:2251:7: lemma_call
                    {
                    pushFollow(FOLLOW_lemma_call_in_hyp_desig16866);
                    lemma_call1202=lemma_call();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_lemma_call.add(lemma_call1202.getTree());


                    // AST REWRITE
                    // elements: lemma_call
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (ColsAST)adaptor.nil();
                    // 2251:18: -> ^( HYPDESIG lemma_call )
                    {
                        // RParser.g:2251:21: ^( HYPDESIG lemma_call )
                        {
                        ColsAST root_1 = (ColsAST)adaptor.nil();
                        root_1 = (ColsAST)adaptor.becomeRoot((ColsAST)adaptor.create(HYPDESIG, "HYPDESIG"), root_1);

                        adaptor.addChild(root_1, stream_lemma_call.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // RParser.g:2252:7: theorem_call
                    {
                    pushFollow(FOLLOW_theorem_call_in_hyp_desig16882);
                    theorem_call1203=theorem_call();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_theorem_call.add(theorem_call1203.getTree());


                    // AST REWRITE
                    // elements: theorem_call
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (ColsAST)adaptor.nil();
                    // 2252:20: -> ^( HYPDESIG theorem_call )
                    {
                        // RParser.g:2252:23: ^( HYPDESIG theorem_call )
                        {
                        ColsAST root_1 = (ColsAST)adaptor.nil();
                        root_1 = (ColsAST)adaptor.becomeRoot((ColsAST)adaptor.create(HYPDESIG, "HYPDESIG"), root_1);

                        adaptor.addChild(root_1, stream_theorem_call.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 4 :
                    // RParser.g:2253:7: corollary_name
                    {
                    pushFollow(FOLLOW_corollary_name_in_hyp_desig16898);
                    corollary_name1204=corollary_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_corollary_name.add(corollary_name1204.getTree());


                    // AST REWRITE
                    // elements: corollary_name
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (ColsAST)adaptor.nil();
                    // 2253:22: -> ^( HYPDESIG corollary_name )
                    {
                        // RParser.g:2253:25: ^( HYPDESIG corollary_name )
                        {
                        ColsAST root_1 = (ColsAST)adaptor.nil();
                        root_1 = (ColsAST)adaptor.becomeRoot((ColsAST)adaptor.create(HYPDESIG, "HYPDESIG"), root_1);

                        adaptor.addChild(root_1, stream_corollary_name.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 5 :
                    // RParser.g:2254:7: supposition_call
                    {
                    pushFollow(FOLLOW_supposition_call_in_hyp_desig16914);
                    supposition_call1205=supposition_call();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_supposition_call.add(supposition_call1205.getTree());


                    // AST REWRITE
                    // elements: supposition_call
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (ColsAST)adaptor.nil();
                    // 2254:24: -> ^( HYPDESIG supposition_call )
                    {
                        // RParser.g:2254:27: ^( HYPDESIG supposition_call )
                        {
                        ColsAST root_1 = (ColsAST)adaptor.nil();
                        root_1 = (ColsAST)adaptor.becomeRoot((ColsAST)adaptor.create(HYPDESIG, "HYPDESIG"), root_1);

                        adaptor.addChild(root_1, stream_supposition_call.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 6 :
                    // RParser.g:2255:7: definition_call
                    {
                    pushFollow(FOLLOW_definition_call_in_hyp_desig16930);
                    definition_call1206=definition_call();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_definition_call.add(definition_call1206.getTree());


                    // AST REWRITE
                    // elements: definition_call
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (ColsAST)adaptor.nil();
                    // 2255:23: -> ^( HYPDESIG definition_call )
                    {
                        // RParser.g:2255:26: ^( HYPDESIG definition_call )
                        {
                        ColsAST root_1 = (ColsAST)adaptor.nil();
                        root_1 = (ColsAST)adaptor.becomeRoot((ColsAST)adaptor.create(HYPDESIG, "HYPDESIG"), root_1);

                        adaptor.addChild(root_1, stream_definition_call.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 7 :
                    // RParser.g:2256:7: reference_marker_call
                    {
                    pushFollow(FOLLOW_reference_marker_call_in_hyp_desig16946);
                    reference_marker_call1207=reference_marker_call();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_reference_marker_call.add(reference_marker_call1207.getTree());


                    // AST REWRITE
                    // elements: reference_marker_call
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (ColsAST)adaptor.nil();
                    // 2256:30: -> ^( HYPDESIG reference_marker_call )
                    {
                        // RParser.g:2256:33: ^( HYPDESIG reference_marker_call )
                        {
                        ColsAST root_1 = (ColsAST)adaptor.nil();
                        root_1 = (ColsAST)adaptor.becomeRoot((ColsAST)adaptor.create(HYPDESIG, "HYPDESIG"), root_1);

                        adaptor.addChild(root_1, stream_reference_marker_call.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (ColsAST)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "hyp_desig"

    public static class lemma_call_return extends ParserRuleReturnScope {
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "lemma_call"
    // RParser.g:2260:1: lemma_call : LEMMA ident ;
    public final RParser.lemma_call_return lemma_call() throws RecognitionException {
        RParser.lemma_call_return retval = new RParser.lemma_call_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        Token LEMMA1208=null;
        RParser.ident_return ident1209 = null;


        ColsAST LEMMA1208_tree=null;

        try {
            // RParser.g:2261:5: ( LEMMA ident )
            // RParser.g:2261:9: LEMMA ident
            {
            root_0 = (ColsAST)adaptor.nil();

            LEMMA1208=(Token)match(input,LEMMA,FOLLOW_LEMMA_in_lemma_call16980); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LEMMA1208_tree = (ColsAST)adaptor.create(LEMMA1208);
            root_0 = (ColsAST)adaptor.becomeRoot(LEMMA1208_tree, root_0);
            }
            pushFollow(FOLLOW_ident_in_lemma_call16983);
            ident1209=ident();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, ident1209.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (ColsAST)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "lemma_call"

    public static class theorem_call_return extends ParserRuleReturnScope {
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "theorem_call"
    // RParser.g:2264:1: theorem_call : THEOREM ident ;
    public final RParser.theorem_call_return theorem_call() throws RecognitionException {
        RParser.theorem_call_return retval = new RParser.theorem_call_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        Token THEOREM1210=null;
        RParser.ident_return ident1211 = null;


        ColsAST THEOREM1210_tree=null;

        try {
            // RParser.g:2265:5: ( THEOREM ident )
            // RParser.g:2265:9: THEOREM ident
            {
            root_0 = (ColsAST)adaptor.nil();

            THEOREM1210=(Token)match(input,THEOREM,FOLLOW_THEOREM_in_theorem_call17002); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            THEOREM1210_tree = (ColsAST)adaptor.create(THEOREM1210);
            root_0 = (ColsAST)adaptor.becomeRoot(THEOREM1210_tree, root_0);
            }
            pushFollow(FOLLOW_ident_in_theorem_call17005);
            ident1211=ident();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, ident1211.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (ColsAST)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "theorem_call"

    public static class supposition_call_return extends ParserRuleReturnScope {
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "supposition_call"
    // RParser.g:2268:1: supposition_call : SUPPOSITION ;
    public final RParser.supposition_call_return supposition_call() throws RecognitionException {
        RParser.supposition_call_return retval = new RParser.supposition_call_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        Token SUPPOSITION1212=null;

        ColsAST SUPPOSITION1212_tree=null;

        try {
            // RParser.g:2269:5: ( SUPPOSITION )
            // RParser.g:2269:9: SUPPOSITION
            {
            root_0 = (ColsAST)adaptor.nil();

            SUPPOSITION1212=(Token)match(input,SUPPOSITION,FOLLOW_SUPPOSITION_in_supposition_call17024); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SUPPOSITION1212_tree = (ColsAST)adaptor.create(SUPPOSITION1212);
            adaptor.addChild(root_0, SUPPOSITION1212_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (ColsAST)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "supposition_call"

    public static class definition_call_return extends ParserRuleReturnScope {
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "definition_call"
    // RParser.g:2272:1: definition_call : ( LPAREN ident RPAREN OF )? DEFINITION fn_name ( LPAREN qualified_ident ( COMMA ident ) RPAREN )? ( FROM ident )? ;
    public final RParser.definition_call_return definition_call() throws RecognitionException {
        RParser.definition_call_return retval = new RParser.definition_call_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        Token LPAREN1213=null;
        Token RPAREN1215=null;
        Token OF1216=null;
        Token DEFINITION1217=null;
        Token LPAREN1219=null;
        Token COMMA1221=null;
        Token RPAREN1223=null;
        Token FROM1224=null;
        RParser.ident_return ident1214 = null;

        RParser.fn_name_return fn_name1218 = null;

        RParser.qualified_ident_return qualified_ident1220 = null;

        RParser.ident_return ident1222 = null;

        RParser.ident_return ident1225 = null;


        ColsAST LPAREN1213_tree=null;
        ColsAST RPAREN1215_tree=null;
        ColsAST OF1216_tree=null;
        ColsAST DEFINITION1217_tree=null;
        ColsAST LPAREN1219_tree=null;
        ColsAST COMMA1221_tree=null;
        ColsAST RPAREN1223_tree=null;
        ColsAST FROM1224_tree=null;

        try {
            // RParser.g:2273:5: ( ( LPAREN ident RPAREN OF )? DEFINITION fn_name ( LPAREN qualified_ident ( COMMA ident ) RPAREN )? ( FROM ident )? )
            // RParser.g:2273:9: ( LPAREN ident RPAREN OF )? DEFINITION fn_name ( LPAREN qualified_ident ( COMMA ident ) RPAREN )? ( FROM ident )?
            {
            root_0 = (ColsAST)adaptor.nil();

            // RParser.g:2273:9: ( LPAREN ident RPAREN OF )?
            int alt307=2;
            int LA307_0 = input.LA(1);

            if ( (LA307_0==LPAREN) ) {
                alt307=1;
            }
            switch (alt307) {
                case 1 :
                    // RParser.g:2273:10: LPAREN ident RPAREN OF
                    {
                    LPAREN1213=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_definition_call17044); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LPAREN1213_tree = (ColsAST)adaptor.create(LPAREN1213);
                    adaptor.addChild(root_0, LPAREN1213_tree);
                    }
                    pushFollow(FOLLOW_ident_in_definition_call17046);
                    ident1214=ident();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, ident1214.getTree());
                    RPAREN1215=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_definition_call17048); if (state.failed) return retval;
                    OF1216=(Token)match(input,OF,FOLLOW_OF_in_definition_call17051); if (state.failed) return retval;

                    }
                    break;

            }

            DEFINITION1217=(Token)match(input,DEFINITION,FOLLOW_DEFINITION_in_definition_call17063); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            DEFINITION1217_tree = (ColsAST)adaptor.create(DEFINITION1217);
            root_0 = (ColsAST)adaptor.becomeRoot(DEFINITION1217_tree, root_0);
            }
            pushFollow(FOLLOW_fn_name_in_definition_call17066);
            fn_name1218=fn_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, fn_name1218.getTree());
            // RParser.g:2274:27: ( LPAREN qualified_ident ( COMMA ident ) RPAREN )?
            int alt308=2;
            int LA308_0 = input.LA(1);

            if ( (LA308_0==LPAREN) ) {
                alt308=1;
            }
            switch (alt308) {
                case 1 :
                    // RParser.g:2274:28: LPAREN qualified_ident ( COMMA ident ) RPAREN
                    {
                    LPAREN1219=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_definition_call17069); if (state.failed) return retval;
                    pushFollow(FOLLOW_qualified_ident_in_definition_call17072);
                    qualified_ident1220=qualified_ident();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, qualified_ident1220.getTree());
                    // RParser.g:2274:52: ( COMMA ident )
                    // RParser.g:2274:53: COMMA ident
                    {
                    COMMA1221=(Token)match(input,COMMA,FOLLOW_COMMA_in_definition_call17075); if (state.failed) return retval;
                    pushFollow(FOLLOW_ident_in_definition_call17078);
                    ident1222=ident();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, ident1222.getTree());

                    }

                    RPAREN1223=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_definition_call17081); if (state.failed) return retval;

                    }
                    break;

            }

            // RParser.g:2275:7: ( FROM ident )?
            int alt309=2;
            int LA309_0 = input.LA(1);

            if ( (LA309_0==FROM) ) {
                alt309=1;
            }
            switch (alt309) {
                case 1 :
                    // RParser.g:2275:8: FROM ident
                    {
                    FROM1224=(Token)match(input,FROM,FOLLOW_FROM_in_definition_call17093); if (state.failed) return retval;
                    pushFollow(FOLLOW_ident_in_definition_call17096);
                    ident1225=ident();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, ident1225.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (ColsAST)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "definition_call"

    public static class reference_marker_call_return extends ParserRuleReturnScope {
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "reference_marker_call"
    // RParser.g:2278:1: reference_marker_call : ident -> ^( REFCALL ident ) ;
    public final RParser.reference_marker_call_return reference_marker_call() throws RecognitionException {
        RParser.reference_marker_call_return retval = new RParser.reference_marker_call_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        RParser.ident_return ident1226 = null;


        RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
        try {
            // RParser.g:2279:5: ( ident -> ^( REFCALL ident ) )
            // RParser.g:2279:9: ident
            {
            pushFollow(FOLLOW_ident_in_reference_marker_call17121);
            ident1226=ident();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_ident.add(ident1226.getTree());


            // AST REWRITE
            // elements: ident
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (ColsAST)adaptor.nil();
            // 2279:15: -> ^( REFCALL ident )
            {
                // RParser.g:2279:18: ^( REFCALL ident )
                {
                ColsAST root_1 = (ColsAST)adaptor.nil();
                root_1 = (ColsAST)adaptor.becomeRoot((ColsAST)adaptor.create(REFCALL, "REFCALL"), root_1);

                adaptor.addChild(root_1, stream_ident.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (ColsAST)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "reference_marker_call"

    public static class fn_name_return extends ParserRuleReturnScope {
        ColsAST tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "fn_name"
    // RParser.g:2282:1: fn_name : ( infix_symbol | prefix_symbol | ident );
    public final RParser.fn_name_return fn_name() throws RecognitionException {
        RParser.fn_name_return retval = new RParser.fn_name_return();
        retval.start = input.LT(1);

        ColsAST root_0 = null;

        RParser.infix_symbol_return infix_symbol1227 = null;

        RParser.prefix_symbol_return prefix_symbol1228 = null;

        RParser.ident_return ident1229 = null;



        try {
            // RParser.g:2283:5: ( infix_symbol | prefix_symbol | ident )
            int alt310=3;
            switch ( input.LA(1) ) {
            case AND:
            case COMPLEMENT:
            case DIV:
            case IFF:
            case IMPLIES:
            case INTERSECT:
            case IN:
            case NOT_IN:
            case NOT_PROP_SUBSET:
            case NOT_SUBSET:
            case NOT_SUBSTR:
            case PROP_SUBSET:
            case SUBSET:
            case SUBSTR:
            case MOD:
            case CAT:
            case OR:
            case REM:
            case UNION:
            case WITHOUT:
            case PLUS:
            case MINUS:
            case MULTIPLY:
            case DIVIDE:
            case EXP:
            case RANGE:
            case NOT_EQL:
            case GT_EQL:
            case LT_EQL:
            case EQL:
            case LT:
            case GT:
            case XOR:
            case ANDTHEN:
            case ORELSE:
                {
                alt310=1;
                }
                break;
            case ABS:
            case NOT:
                {
                alt310=2;
                }
                break;
            case IDENTIFIER:
                {
                alt310=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 310, 0, input);

                throw nvae;
            }

            switch (alt310) {
                case 1 :
                    // RParser.g:2283:9: infix_symbol
                    {
                    root_0 = (ColsAST)adaptor.nil();

                    pushFollow(FOLLOW_infix_symbol_in_fn_name17148);
                    infix_symbol1227=infix_symbol();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, infix_symbol1227.getTree());

                    }
                    break;
                case 2 :
                    // RParser.g:2283:24: prefix_symbol
                    {
                    root_0 = (ColsAST)adaptor.nil();

                    pushFollow(FOLLOW_prefix_symbol_in_fn_name17152);
                    prefix_symbol1228=prefix_symbol();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, prefix_symbol1228.getTree());

                    }
                    break;
                case 3 :
                    // RParser.g:2283:40: ident
                    {
                    root_0 = (ColsAST)adaptor.nil();

                    pushFollow(FOLLOW_ident_in_fn_name17156);
                    ident1229=ident();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, ident1229.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (ColsAST)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (ColsAST)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "fn_name"

    // $ANTLR start synpred1_RParser
    public final void synpred1_RParser_fragment() throws RecognitionException {   
        // RParser.g:496:13: ( ident OF )
        // RParser.g:496:14: ident OF
        {
        pushFollow(FOLLOW_ident_in_synpred1_RParser1679);
        ident();

        state._fsp--;
        if (state.failed) return ;
        match(input,OF,FOLLOW_OF_in_synpred1_RParser1681); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred1_RParser

    // $ANTLR start synpred2_RParser
    public final void synpred2_RParser_fragment() throws RecognitionException {   
        // RParser.g:518:9: ( ENHANCED BY ident module_argument_section )
        // RParser.g:518:10: ENHANCED BY ident module_argument_section
        {
        match(input,ENHANCED,FOLLOW_ENHANCED_in_synpred2_RParser1911); if (state.failed) return ;
        match(input,BY,FOLLOW_BY_in_synpred2_RParser1913); if (state.failed) return ;
        pushFollow(FOLLOW_ident_in_synpred2_RParser1916);
        ident();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_module_argument_section_in_synpred2_RParser1926);
        module_argument_section();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred2_RParser

    // $ANTLR start synpred3_RParser
    public final void synpred3_RParser_fragment() throws RecognitionException {   
        // RParser.g:549:9: ( OPERATION ident operation_formal_param_section ( COLON program_type_expression )? SEMICOLON ( affects_clause )* ( requires_clause )? ( ensures_clause )? RECURSIVE )
        // RParser.g:549:10: OPERATION ident operation_formal_param_section ( COLON program_type_expression )? SEMICOLON ( affects_clause )* ( requires_clause )? ( ensures_clause )? RECURSIVE
        {
        match(input,OPERATION,FOLLOW_OPERATION_in_synpred3_RParser2153); if (state.failed) return ;
        pushFollow(FOLLOW_ident_in_synpred3_RParser2155);
        ident();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_operation_formal_param_section_in_synpred3_RParser2165);
        operation_formal_param_section();

        state._fsp--;
        if (state.failed) return ;
        // RParser.g:551:9: ( COLON program_type_expression )?
        int alt311=2;
        int LA311_0 = input.LA(1);

        if ( (LA311_0==COLON) ) {
            alt311=1;
        }
        switch (alt311) {
            case 1 :
                // RParser.g:551:10: COLON program_type_expression
                {
                match(input,COLON,FOLLOW_COLON_in_synpred3_RParser2176); if (state.failed) return ;
                pushFollow(FOLLOW_program_type_expression_in_synpred3_RParser2178);
                program_type_expression();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        match(input,SEMICOLON,FOLLOW_SEMICOLON_in_synpred3_RParser2182); if (state.failed) return ;
        // RParser.g:552:9: ( affects_clause )*
        loop312:
        do {
            int alt312=2;
            int LA312_0 = input.LA(1);

            if ( (LA312_0==ALTERS||LA312_0==CLEARS||LA312_0==EVALUATES||LA312_0==PRESERVES||LA312_0==REASSIGNS||LA312_0==REPLACES||LA312_0==RESTORES||LA312_0==UPDATES) ) {
                alt312=1;
            }


            switch (alt312) {
        	case 1 :
        	    // RParser.g:552:9: affects_clause
        	    {
        	    pushFollow(FOLLOW_affects_clause_in_synpred3_RParser2192);
        	    affects_clause();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    break loop312;
            }
        } while (true);

        // RParser.g:553:9: ( requires_clause )?
        int alt313=2;
        int LA313_0 = input.LA(1);

        if ( (LA313_0==REQUIRES) ) {
            alt313=1;
        }
        switch (alt313) {
            case 1 :
                // RParser.g:553:9: requires_clause
                {
                pushFollow(FOLLOW_requires_clause_in_synpred3_RParser2203);
                requires_clause();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        // RParser.g:554:9: ( ensures_clause )?
        int alt314=2;
        int LA314_0 = input.LA(1);

        if ( (LA314_0==ENSURES) ) {
            alt314=1;
        }
        switch (alt314) {
            case 1 :
                // RParser.g:554:9: ensures_clause
                {
                pushFollow(FOLLOW_ensures_clause_in_synpred3_RParser2214);
                ensures_clause();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        match(input,RECURSIVE,FOLLOW_RECURSIVE_in_synpred3_RParser2225); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred3_RParser

    // $ANTLR start synpred4_RParser
    public final void synpred4_RParser_fragment() throws RecognitionException {   
        // RParser.g:597:9: ( OPERATION ident operation_formal_param_section ( COLON program_type_expression )? SEMICOLON ( affects_clause )* ( requires_clause )? ( ensures_clause )? RECURSIVE )
        // RParser.g:597:10: OPERATION ident operation_formal_param_section ( COLON program_type_expression )? SEMICOLON ( affects_clause )* ( requires_clause )? ( ensures_clause )? RECURSIVE
        {
        match(input,OPERATION,FOLLOW_OPERATION_in_synpred4_RParser2595); if (state.failed) return ;
        pushFollow(FOLLOW_ident_in_synpred4_RParser2597);
        ident();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_operation_formal_param_section_in_synpred4_RParser2607);
        operation_formal_param_section();

        state._fsp--;
        if (state.failed) return ;
        // RParser.g:599:9: ( COLON program_type_expression )?
        int alt315=2;
        int LA315_0 = input.LA(1);

        if ( (LA315_0==COLON) ) {
            alt315=1;
        }
        switch (alt315) {
            case 1 :
                // RParser.g:599:10: COLON program_type_expression
                {
                match(input,COLON,FOLLOW_COLON_in_synpred4_RParser2618); if (state.failed) return ;
                pushFollow(FOLLOW_program_type_expression_in_synpred4_RParser2620);
                program_type_expression();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        match(input,SEMICOLON,FOLLOW_SEMICOLON_in_synpred4_RParser2624); if (state.failed) return ;
        // RParser.g:600:9: ( affects_clause )*
        loop316:
        do {
            int alt316=2;
            int LA316_0 = input.LA(1);

            if ( (LA316_0==ALTERS||LA316_0==CLEARS||LA316_0==EVALUATES||LA316_0==PRESERVES||LA316_0==REASSIGNS||LA316_0==REPLACES||LA316_0==RESTORES||LA316_0==UPDATES) ) {
                alt316=1;
            }


            switch (alt316) {
        	case 1 :
        	    // RParser.g:600:9: affects_clause
        	    {
        	    pushFollow(FOLLOW_affects_clause_in_synpred4_RParser2634);
        	    affects_clause();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    break loop316;
            }
        } while (true);

        // RParser.g:601:9: ( requires_clause )?
        int alt317=2;
        int LA317_0 = input.LA(1);

        if ( (LA317_0==REQUIRES) ) {
            alt317=1;
        }
        switch (alt317) {
            case 1 :
                // RParser.g:601:9: requires_clause
                {
                pushFollow(FOLLOW_requires_clause_in_synpred4_RParser2645);
                requires_clause();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        // RParser.g:602:9: ( ensures_clause )?
        int alt318=2;
        int LA318_0 = input.LA(1);

        if ( (LA318_0==ENSURES) ) {
            alt318=1;
        }
        switch (alt318) {
            case 1 :
                // RParser.g:602:9: ensures_clause
                {
                pushFollow(FOLLOW_ensures_clause_in_synpred4_RParser2656);
                ensures_clause();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        match(input,RECURSIVE,FOLLOW_RECURSIVE_in_synpred4_RParser2667); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred4_RParser

    // $ANTLR start synpred5_RParser
    public final void synpred5_RParser_fragment() throws RecognitionException {   
        // RParser.g:786:9: ( ENHANCED BY ident module_argument_section )
        // RParser.g:786:10: ENHANCED BY ident module_argument_section
        {
        match(input,ENHANCED,FOLLOW_ENHANCED_in_synpred5_RParser3676); if (state.failed) return ;
        match(input,BY,FOLLOW_BY_in_synpred5_RParser3678); if (state.failed) return ;
        pushFollow(FOLLOW_ident_in_synpred5_RParser3681);
        ident();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_module_argument_section_in_synpred5_RParser3691);
        module_argument_section();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred5_RParser

    // $ANTLR start synpred6_RParser
    public final void synpred6_RParser_fragment() throws RecognitionException {   
        // RParser.g:810:9: ( qualified_ident )
        // RParser.g:810:10: qualified_ident
        {
        pushFollow(FOLLOW_qualified_ident_in_synpred6_RParser3873);
        qualified_ident();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred6_RParser

    // $ANTLR start synpred7_RParser
    public final void synpred7_RParser_fragment() throws RecognitionException {   
        // RParser.g:1300:13: ( variable_expression SWAP_OP )
        // RParser.g:1300:14: variable_expression SWAP_OP
        {
        pushFollow(FOLLOW_variable_expression_in_synpred7_RParser8422);
        variable_expression();

        state._fsp--;
        if (state.failed) return ;
        match(input,SWAP_OP,FOLLOW_SWAP_OP_in_synpred7_RParser8424); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred7_RParser

    // $ANTLR start synpred8_RParser
    public final void synpred8_RParser_fragment() throws RecognitionException {   
        // RParser.g:1301:13: ( variable_expression ASSIGN_OP )
        // RParser.g:1301:14: variable_expression ASSIGN_OP
        {
        pushFollow(FOLLOW_variable_expression_in_synpred8_RParser8451);
        variable_expression();

        state._fsp--;
        if (state.failed) return ;
        match(input,ASSIGN_OP,FOLLOW_ASSIGN_OP_in_synpred8_RParser8453); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred8_RParser

    // $ANTLR start synpred9_RParser
    public final void synpred9_RParser_fragment() throws RecognitionException {   
        // RParser.g:1302:13: ( qualified_ident LPAREN )
        // RParser.g:1302:14: qualified_ident LPAREN
        {
        pushFollow(FOLLOW_qualified_ident_in_synpred9_RParser8480);
        qualified_ident();

        state._fsp--;
        if (state.failed) return ;
        match(input,LPAREN,FOLLOW_LPAREN_in_synpred9_RParser8482); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred9_RParser

    // $ANTLR start synpred10_RParser
    public final void synpred10_RParser_fragment() throws RecognitionException {   
        // RParser.g:1316:13: ( variable_expression SWAP_OP )
        // RParser.g:1316:14: variable_expression SWAP_OP
        {
        pushFollow(FOLLOW_variable_expression_in_synpred10_RParser8726);
        variable_expression();

        state._fsp--;
        if (state.failed) return ;
        match(input,SWAP_OP,FOLLOW_SWAP_OP_in_synpred10_RParser8728); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred10_RParser

    // $ANTLR start synpred11_RParser
    public final void synpred11_RParser_fragment() throws RecognitionException {   
        // RParser.g:1317:13: ( variable_expression ASSIGN_OP )
        // RParser.g:1317:14: variable_expression ASSIGN_OP
        {
        pushFollow(FOLLOW_variable_expression_in_synpred11_RParser8755);
        variable_expression();

        state._fsp--;
        if (state.failed) return ;
        match(input,ASSIGN_OP,FOLLOW_ASSIGN_OP_in_synpred11_RParser8757); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred11_RParser

    // $ANTLR start synpred12_RParser
    public final void synpred12_RParser_fragment() throws RecognitionException {   
        // RParser.g:1318:13: ( qualified_ident LPAREN )
        // RParser.g:1318:14: qualified_ident LPAREN
        {
        pushFollow(FOLLOW_qualified_ident_in_synpred12_RParser8784);
        qualified_ident();

        state._fsp--;
        if (state.failed) return ;
        match(input,LPAREN,FOLLOW_LPAREN_in_synpred12_RParser8786); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred12_RParser

    // $ANTLR start synpred13_RParser
    public final void synpred13_RParser_fragment() throws RecognitionException {   
        // RParser.g:1629:14: ( ident ident COLON )
        // RParser.g:1629:15: ident ident COLON
        {
        pushFollow(FOLLOW_ident_in_synpred13_RParser10571);
        ident();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_ident_in_synpred13_RParser10573);
        ident();

        state._fsp--;
        if (state.failed) return ;
        match(input,COLON,FOLLOW_COLON_in_synpred13_RParser10575); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred13_RParser

    // $ANTLR start synpred14_RParser
    public final void synpred14_RParser_fragment() throws RecognitionException {   
        // RParser.g:1644:9: ( THERE EXISTS UNIQUE )
        // RParser.g:1644:10: THERE EXISTS UNIQUE
        {
        match(input,THERE,FOLLOW_THERE_in_synpred14_RParser10714); if (state.failed) return ;
        match(input,EXISTS,FOLLOW_EXISTS_in_synpred14_RParser10716); if (state.failed) return ;
        match(input,UNIQUE,FOLLOW_UNIQUE_in_synpred14_RParser10718); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred14_RParser

    // $ANTLR start synpred15_RParser
    public final void synpred15_RParser_fragment() throws RecognitionException {   
        // RParser.g:1682:9: ( infix_expression ( LT | LT_EQL ) infix_expression ( LT | LT_EQL ) )
        // RParser.g:1682:10: infix_expression ( LT | LT_EQL ) infix_expression ( LT | LT_EQL )
        {
        pushFollow(FOLLOW_infix_expression_in_synpred15_RParser11233);
        infix_expression();

        state._fsp--;
        if (state.failed) return ;
        if ( input.LA(1)==LT_EQL||input.LA(1)==LT ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }

        pushFollow(FOLLOW_infix_expression_in_synpred15_RParser11241);
        infix_expression();

        state._fsp--;
        if (state.failed) return ;
        if ( input.LA(1)==LT_EQL||input.LA(1)==LT ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        }
    }
    // $ANTLR end synpred15_RParser

    // $ANTLR start synpred16_RParser
    public final void synpred16_RParser_fragment() throws RecognitionException {   
        // RParser.g:1781:9: ( ident ident COLON )
        // RParser.g:1781:10: ident ident COLON
        {
        pushFollow(FOLLOW_ident_in_synpred16_RParser12457);
        ident();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_ident_in_synpred16_RParser12459);
        ident();

        state._fsp--;
        if (state.failed) return ;
        match(input,COLON,FOLLOW_COLON_in_synpred16_RParser12461); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred16_RParser

    // $ANTLR start synpred17_RParser
    public final void synpred17_RParser_fragment() throws RecognitionException {   
        // RParser.g:1782:9: ( ident DOT NUMERIC_LITERAL )
        // RParser.g:1782:10: ident DOT NUMERIC_LITERAL
        {
        pushFollow(FOLLOW_ident_in_synpred17_RParser12477);
        ident();

        state._fsp--;
        if (state.failed) return ;
        match(input,DOT,FOLLOW_DOT_in_synpred17_RParser12479); if (state.failed) return ;
        match(input,NUMERIC_LITERAL,FOLLOW_NUMERIC_LITERAL_in_synpred17_RParser12481); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred17_RParser

    // $ANTLR start synpred18_RParser
    public final void synpred18_RParser_fragment() throws RecognitionException {   
        // RParser.g:1788:9: ( LPAREN math_expression COMMA )
        // RParser.g:1788:10: LPAREN math_expression COMMA
        {
        match(input,LPAREN,FOLLOW_LPAREN_in_synpred18_RParser12547); if (state.failed) return ;
        pushFollow(FOLLOW_math_expression_in_synpred18_RParser12549);
        math_expression();

        state._fsp--;
        if (state.failed) return ;
        match(input,COMMA,FOLLOW_COMMA_in_synpred18_RParser12551); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred18_RParser

    // $ANTLR start synpred19_RParser
    public final void synpred19_RParser_fragment() throws RecognitionException {   
        // RParser.g:1803:9: ( function_expression DOT )
        // RParser.g:1803:10: function_expression DOT
        {
        pushFollow(FOLLOW_function_expression_in_synpred19_RParser12646);
        function_expression();

        state._fsp--;
        if (state.failed) return ;
        match(input,DOT,FOLLOW_DOT_in_synpred19_RParser12648); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred19_RParser

    // $ANTLR start synpred20_RParser
    public final void synpred20_RParser_fragment() throws RecognitionException {   
        // RParser.g:1815:9: ( ident ( hat_expression )? ( function_argument_list )+ )
        // RParser.g:1815:10: ident ( hat_expression )? ( function_argument_list )+
        {
        pushFollow(FOLLOW_ident_in_synpred20_RParser12753);
        ident();

        state._fsp--;
        if (state.failed) return ;
        // RParser.g:1815:16: ( hat_expression )?
        int alt319=2;
        int LA319_0 = input.LA(1);

        if ( (LA319_0==CARAT) ) {
            alt319=1;
        }
        switch (alt319) {
            case 1 :
                // RParser.g:1815:16: hat_expression
                {
                pushFollow(FOLLOW_hat_expression_in_synpred20_RParser12755);
                hat_expression();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        // RParser.g:1815:32: ( function_argument_list )+
        int cnt320=0;
        loop320:
        do {
            int alt320=2;
            int LA320_0 = input.LA(1);

            if ( (LA320_0==LPAREN) ) {
                alt320=1;
            }


            switch (alt320) {
        	case 1 :
        	    // RParser.g:1815:32: function_argument_list
        	    {
        	    pushFollow(FOLLOW_function_argument_list_in_synpred20_RParser12758);
        	    function_argument_list();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    if ( cnt320 >= 1 ) break loop320;
        	    if (state.backtracking>0) {state.failed=true; return ;}
                    EarlyExitException eee =
                        new EarlyExitException(320, input);
                    throw eee;
            }
            cnt320++;
        } while (true);


        }
    }
    // $ANTLR end synpred20_RParser

    // $ANTLR start synpred21_RParser
    public final void synpred21_RParser_fragment() throws RecognitionException {   
        // RParser.g:1868:13: ( ident DOT ident DOT )
        // RParser.g:1868:14: ident DOT ident DOT
        {
        pushFollow(FOLLOW_ident_in_synpred21_RParser13204);
        ident();

        state._fsp--;
        if (state.failed) return ;
        match(input,DOT,FOLLOW_DOT_in_synpred21_RParser13206); if (state.failed) return ;
        pushFollow(FOLLOW_ident_in_synpred21_RParser13208);
        ident();

        state._fsp--;
        if (state.failed) return ;
        match(input,DOT,FOLLOW_DOT_in_synpred21_RParser13210); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred21_RParser

    // $ANTLR start synpred22_RParser
    public final void synpred22_RParser_fragment() throws RecognitionException {   
        // RParser.g:1990:9: ( ident ( DOT ident )* LPAREN )
        // RParser.g:1990:10: ident ( DOT ident )* LPAREN
        {
        pushFollow(FOLLOW_ident_in_synpred22_RParser14356);
        ident();

        state._fsp--;
        if (state.failed) return ;
        // RParser.g:1990:16: ( DOT ident )*
        loop321:
        do {
            int alt321=2;
            int LA321_0 = input.LA(1);

            if ( (LA321_0==DOT) ) {
                alt321=1;
            }


            switch (alt321) {
        	case 1 :
        	    // RParser.g:1990:17: DOT ident
        	    {
        	    match(input,DOT,FOLLOW_DOT_in_synpred22_RParser14359); if (state.failed) return ;
        	    pushFollow(FOLLOW_ident_in_synpred22_RParser14361);
        	    ident();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    break loop321;
            }
        } while (true);

        match(input,LPAREN,FOLLOW_LPAREN_in_synpred22_RParser14365); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred22_RParser

    // $ANTLR start synpred23_RParser
    public final void synpred23_RParser_fragment() throws RecognitionException {   
        // RParser.g:1995:9: ( ident DOT )
        // RParser.g:1995:10: ident DOT
        {
        pushFollow(FOLLOW_ident_in_synpred23_RParser14400);
        ident();

        state._fsp--;
        if (state.failed) return ;
        match(input,DOT,FOLLOW_DOT_in_synpred23_RParser14402); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred23_RParser

    // $ANTLR start synpred24_RParser
    public final void synpred24_RParser_fragment() throws RecognitionException {   
        // RParser.g:2020:9: ( variable_array_expression DOT )
        // RParser.g:2020:10: variable_array_expression DOT
        {
        pushFollow(FOLLOW_variable_array_expression_in_synpred24_RParser14599);
        variable_array_expression();

        state._fsp--;
        if (state.failed) return ;
        match(input,DOT,FOLLOW_DOT_in_synpred24_RParser14601); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred24_RParser

    // $ANTLR start synpred25_RParser
    public final void synpred25_RParser_fragment() throws RecognitionException {   
        // RParser.g:2085:11: ( LSQBRACK IDENTIFIER RSQBRACK LPAREN BASECASE )
        // RParser.g:2085:12: LSQBRACK IDENTIFIER RSQBRACK LPAREN BASECASE
        {
        match(input,LSQBRACK,FOLLOW_LSQBRACK_in_synpred25_RParser15148); if (state.failed) return ;
        match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_synpred25_RParser15150); if (state.failed) return ;
        match(input,RSQBRACK,FOLLOW_RSQBRACK_in_synpred25_RParser15152); if (state.failed) return ;
        match(input,LPAREN,FOLLOW_LPAREN_in_synpred25_RParser15154); if (state.failed) return ;
        match(input,BASECASE,FOLLOW_BASECASE_in_synpred25_RParser15156); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred25_RParser

    // $ANTLR start synpred26_RParser
    public final void synpred26_RParser_fragment() throws RecognitionException {   
        // RParser.g:2086:11: ( LPAREN BASECASE )
        // RParser.g:2086:12: LPAREN BASECASE
        {
        match(input,LPAREN,FOLLOW_LPAREN_in_synpred26_RParser15174); if (state.failed) return ;
        match(input,BASECASE,FOLLOW_BASECASE_in_synpred26_RParser15176); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred26_RParser

    // $ANTLR start synpred27_RParser
    public final void synpred27_RParser_fragment() throws RecognitionException {   
        // RParser.g:2087:11: ( LSQBRACK IDENTIFIER RSQBRACK LPAREN INDUCTIVECASE )
        // RParser.g:2087:12: LSQBRACK IDENTIFIER RSQBRACK LPAREN INDUCTIVECASE
        {
        match(input,LSQBRACK,FOLLOW_LSQBRACK_in_synpred27_RParser15194); if (state.failed) return ;
        match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_synpred27_RParser15196); if (state.failed) return ;
        match(input,RSQBRACK,FOLLOW_RSQBRACK_in_synpred27_RParser15198); if (state.failed) return ;
        match(input,LPAREN,FOLLOW_LPAREN_in_synpred27_RParser15200); if (state.failed) return ;
        match(input,INDUCTIVECASE,FOLLOW_INDUCTIVECASE_in_synpred27_RParser15202); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred27_RParser

    // $ANTLR start synpred28_RParser
    public final void synpred28_RParser_fragment() throws RecognitionException {   
        // RParser.g:2088:11: ( LPAREN INDUCTIVECASE )
        // RParser.g:2088:12: LPAREN INDUCTIVECASE
        {
        match(input,LPAREN,FOLLOW_LPAREN_in_synpred28_RParser15220); if (state.failed) return ;
        match(input,INDUCTIVECASE,FOLLOW_INDUCTIVECASE_in_synpred28_RParser15222); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred28_RParser

    // $ANTLR start synpred29_RParser
    public final void synpred29_RParser_fragment() throws RecognitionException {   
        // RParser.g:2089:11: ( LSQBRACK IDENTIFIER RSQBRACK )
        // RParser.g:2089:12: LSQBRACK IDENTIFIER RSQBRACK
        {
        match(input,LSQBRACK,FOLLOW_LSQBRACK_in_synpred29_RParser15240); if (state.failed) return ;
        match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_synpred29_RParser15242); if (state.failed) return ;
        match(input,RSQBRACK,FOLLOW_RSQBRACK_in_synpred29_RParser15244); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred29_RParser

    // $ANTLR start synpred30_RParser
    public final void synpred30_RParser_fragment() throws RecognitionException {   
        // RParser.g:2136:11: ( LSQBRACK IDENTIFIER RSQBRACK DEDUCTION )
        // RParser.g:2136:12: LSQBRACK IDENTIFIER RSQBRACK DEDUCTION
        {
        match(input,LSQBRACK,FOLLOW_LSQBRACK_in_synpred30_RParser15622); if (state.failed) return ;
        match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_synpred30_RParser15624); if (state.failed) return ;
        match(input,RSQBRACK,FOLLOW_RSQBRACK_in_synpred30_RParser15626); if (state.failed) return ;
        match(input,DEDUCTION,FOLLOW_DEDUCTION_in_synpred30_RParser15628); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred30_RParser

    // $ANTLR start synpred31_RParser
    public final void synpred31_RParser_fragment() throws RecognitionException {   
        // RParser.g:2137:11: ( DEDUCTION )
        // RParser.g:2137:12: DEDUCTION
        {
        match(input,DEDUCTION,FOLLOW_DEDUCTION_in_synpred31_RParser15649); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred31_RParser

    // $ANTLR start synpred32_RParser
    public final void synpred32_RParser_fragment() throws RecognitionException {   
        // RParser.g:2138:11: ( LSQBRACK IDENTIFIER RSQBRACK )
        // RParser.g:2138:12: LSQBRACK IDENTIFIER RSQBRACK
        {
        match(input,LSQBRACK,FOLLOW_LSQBRACK_in_synpred32_RParser15670); if (state.failed) return ;
        match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_synpred32_RParser15672); if (state.failed) return ;
        match(input,RSQBRACK,FOLLOW_RSQBRACK_in_synpred32_RParser15674); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred32_RParser

    // $ANTLR start synpred33_RParser
    public final void synpred33_RParser_fragment() throws RecognitionException {   
        // RParser.g:2171:12: ( ident COLON )
        // RParser.g:2171:13: ident COLON
        {
        pushFollow(FOLLOW_ident_in_synpred33_RParser15975);
        ident();

        state._fsp--;
        if (state.failed) return ;
        match(input,COLON,FOLLOW_COLON_in_synpred33_RParser15977); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred33_RParser

    // $ANTLR start synpred34_RParser
    public final void synpred34_RParser_fragment() throws RecognitionException {   
        // RParser.g:2172:14: ( ident COMMA ident )
        // RParser.g:2172:15: ident COMMA ident
        {
        pushFollow(FOLLOW_ident_in_synpred34_RParser16009);
        ident();

        state._fsp--;
        if (state.failed) return ;
        match(input,COMMA,FOLLOW_COMMA_in_synpred34_RParser16011); if (state.failed) return ;
        pushFollow(FOLLOW_ident_in_synpred34_RParser16013);
        ident();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred34_RParser

    // $ANTLR start synpred35_RParser
    public final void synpred35_RParser_fragment() throws RecognitionException {   
        // RParser.g:2192:11: ( hyp_desig COMMA )
        // RParser.g:2192:12: hyp_desig COMMA
        {
        pushFollow(FOLLOW_hyp_desig_in_synpred35_RParser16197);
        hyp_desig();

        state._fsp--;
        if (state.failed) return ;
        match(input,COMMA,FOLLOW_COMMA_in_synpred35_RParser16199); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred35_RParser

    // $ANTLR start synpred36_RParser
    public final void synpred36_RParser_fragment() throws RecognitionException {   
        // RParser.g:2193:9: ( hyp_desig AMPERSAND )
        // RParser.g:2193:10: hyp_desig AMPERSAND
        {
        pushFollow(FOLLOW_hyp_desig_in_synpred36_RParser16215);
        hyp_desig();

        state._fsp--;
        if (state.failed) return ;
        match(input,AMPERSAND,FOLLOW_AMPERSAND_in_synpred36_RParser16217); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred36_RParser

    // $ANTLR start synpred37_RParser
    public final void synpred37_RParser_fragment() throws RecognitionException {   
        // RParser.g:2194:9: ( hyp_desig )
        // RParser.g:2194:10: hyp_desig
        {
        pushFollow(FOLLOW_hyp_desig_in_synpred37_RParser16233);
        hyp_desig();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred37_RParser

    // $ANTLR start synpred38_RParser
    public final void synpred38_RParser_fragment() throws RecognitionException {   
        // RParser.g:2196:9: ( DEFINITION )
        // RParser.g:2196:10: DEFINITION
        {
        match(input,DEFINITION,FOLLOW_DEFINITION_in_synpred38_RParser16259); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred38_RParser

    // $ANTLR start synpred39_RParser
    public final void synpred39_RParser_fragment() throws RecognitionException {   
        // RParser.g:2211:19: ( UNIQUE )
        // RParser.g:2211:20: UNIQUE
        {
        match(input,UNIQUE,FOLLOW_UNIQUE_in_synpred39_RParser16375); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred39_RParser

    // $ANTLR start synpred40_RParser
    public final void synpred40_RParser_fragment() throws RecognitionException {   
        // RParser.g:2234:9: ( UNIVERSAL GENERALIZATION )
        // RParser.g:2234:10: UNIVERSAL GENERALIZATION
        {
        match(input,UNIVERSAL,FOLLOW_UNIVERSAL_in_synpred40_RParser16642); if (state.failed) return ;
        match(input,GENERALIZATION,FOLLOW_GENERALIZATION_in_synpred40_RParser16644); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred40_RParser

    // $ANTLR start synpred41_RParser
    public final void synpred41_RParser_fragment() throws RecognitionException {   
        // RParser.g:2236:9: ( EXISTENTIAL GENERALIZATION )
        // RParser.g:2236:10: EXISTENTIAL GENERALIZATION
        {
        match(input,EXISTENTIAL,FOLLOW_EXISTENTIAL_in_synpred41_RParser16689); if (state.failed) return ;
        match(input,GENERALIZATION,FOLLOW_GENERALIZATION_in_synpred41_RParser16691); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred41_RParser

    // Delegated rules

    public final boolean synpred31_RParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred31_RParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred28_RParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred28_RParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred26_RParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred26_RParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred30_RParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred30_RParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred17_RParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred17_RParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred22_RParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred22_RParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred6_RParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred6_RParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred16_RParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred16_RParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred33_RParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred33_RParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred4_RParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred4_RParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred2_RParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred2_RParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred37_RParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred37_RParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred10_RParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred10_RParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred8_RParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred8_RParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred5_RParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred5_RParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred14_RParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred14_RParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred18_RParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred18_RParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred34_RParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred34_RParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred25_RParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred25_RParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred12_RParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred12_RParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred7_RParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred7_RParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred1_RParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred1_RParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred39_RParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred39_RParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred23_RParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred23_RParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred41_RParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred41_RParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred15_RParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred15_RParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred9_RParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred9_RParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred32_RParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred32_RParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred19_RParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred19_RParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred11_RParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred11_RParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred36_RParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred36_RParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred35_RParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred35_RParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred29_RParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred29_RParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred38_RParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred38_RParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred20_RParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred20_RParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred3_RParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred3_RParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred21_RParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred21_RParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred40_RParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred40_RParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred13_RParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred13_RParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred24_RParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred24_RParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred27_RParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred27_RParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }


    protected DFA14 dfa14 = new DFA14(this);
    protected DFA22 dfa22 = new DFA22(this);
    protected DFA34 dfa34 = new DFA34(this);
    protected DFA35 dfa35 = new DFA35(this);
    protected DFA36 dfa36 = new DFA36(this);
    protected DFA45 dfa45 = new DFA45(this);
    protected DFA46 dfa46 = new DFA46(this);
    protected DFA48 dfa48 = new DFA48(this);
    protected DFA49 dfa49 = new DFA49(this);
    protected DFA56 dfa56 = new DFA56(this);
    protected DFA57 dfa57 = new DFA57(this);
    protected DFA66 dfa66 = new DFA66(this);
    protected DFA95 dfa95 = new DFA95(this);
    protected DFA96 dfa96 = new DFA96(this);
    protected DFA97 dfa97 = new DFA97(this);
    protected DFA98 dfa98 = new DFA98(this);
    protected DFA104 dfa104 = new DFA104(this);
    protected DFA105 dfa105 = new DFA105(this);
    protected DFA106 dfa106 = new DFA106(this);
    protected DFA121 dfa121 = new DFA121(this);
    protected DFA122 dfa122 = new DFA122(this);
    protected DFA123 dfa123 = new DFA123(this);
    protected DFA124 dfa124 = new DFA124(this);
    protected DFA125 dfa125 = new DFA125(this);
    protected DFA128 dfa128 = new DFA128(this);
    protected DFA129 dfa129 = new DFA129(this);
    protected DFA130 dfa130 = new DFA130(this);
    protected DFA131 dfa131 = new DFA131(this);
    protected DFA132 dfa132 = new DFA132(this);
    protected DFA138 dfa138 = new DFA138(this);
    protected DFA142 dfa142 = new DFA142(this);
    protected DFA146 dfa146 = new DFA146(this);
    protected DFA151 dfa151 = new DFA151(this);
    protected DFA155 dfa155 = new DFA155(this);
    protected DFA159 dfa159 = new DFA159(this);
    protected DFA164 dfa164 = new DFA164(this);
    protected DFA165 dfa165 = new DFA165(this);
    protected DFA179 dfa179 = new DFA179(this);
    protected DFA180 dfa180 = new DFA180(this);
    protected DFA181 dfa181 = new DFA181(this);
    protected DFA182 dfa182 = new DFA182(this);
    protected DFA183 dfa183 = new DFA183(this);
    protected DFA184 dfa184 = new DFA184(this);
    protected DFA185 dfa185 = new DFA185(this);
    protected DFA186 dfa186 = new DFA186(this);
    protected DFA187 dfa187 = new DFA187(this);
    protected DFA188 dfa188 = new DFA188(this);
    protected DFA189 dfa189 = new DFA189(this);
    protected DFA190 dfa190 = new DFA190(this);
    protected DFA191 dfa191 = new DFA191(this);
    protected DFA192 dfa192 = new DFA192(this);
    protected DFA196 dfa196 = new DFA196(this);
    protected DFA197 dfa197 = new DFA197(this);
    protected DFA198 dfa198 = new DFA198(this);
    protected DFA214 dfa214 = new DFA214(this);
    protected DFA220 dfa220 = new DFA220(this);
    protected DFA223 dfa223 = new DFA223(this);
    protected DFA228 dfa228 = new DFA228(this);
    protected DFA226 dfa226 = new DFA226(this);
    protected DFA233 dfa233 = new DFA233(this);
    protected DFA240 dfa240 = new DFA240(this);
    protected DFA241 dfa241 = new DFA241(this);
    protected DFA242 dfa242 = new DFA242(this);
    protected DFA252 dfa252 = new DFA252(this);
    protected DFA288 dfa288 = new DFA288(this);
    protected DFA290 dfa290 = new DFA290(this);
    protected DFA291 dfa291 = new DFA291(this);
    protected DFA297 dfa297 = new DFA297(this);
    protected DFA299 dfa299 = new DFA299(this);
    protected DFA305 dfa305 = new DFA305(this);
    static final String DFA14_eotS =
        "\12\uffff";
    static final String DFA14_eofS =
        "\12\uffff";
    static final String DFA14_minS =
        "\1\26\11\uffff";
    static final String DFA14_maxS =
        "\1\u009b\11\uffff";
    static final String DFA14_acceptS =
        "\1\uffff\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11";
    static final String DFA14_specialS =
        "\12\uffff}>";
    static final String[] DFA14_transitionS = {
            "\1\10\11\uffff\1\1\1\uffff\1\3\6\uffff\1\11\1\10\24\uffff\1"+
            "\5\1\4\1\6\7\uffff\1\10\1\uffff\1\10\34\uffff\1\7\52\uffff\2"+
            "\6\6\uffff\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA14_eot = DFA.unpackEncodedString(DFA14_eotS);
    static final short[] DFA14_eof = DFA.unpackEncodedString(DFA14_eofS);
    static final char[] DFA14_min = DFA.unpackEncodedStringToUnsignedChars(DFA14_minS);
    static final char[] DFA14_max = DFA.unpackEncodedStringToUnsignedChars(DFA14_maxS);
    static final short[] DFA14_accept = DFA.unpackEncodedString(DFA14_acceptS);
    static final short[] DFA14_special = DFA.unpackEncodedString(DFA14_specialS);
    static final short[][] DFA14_transition;

    static {
        int numStates = DFA14_transitionS.length;
        DFA14_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA14_transition[i] = DFA.unpackEncodedString(DFA14_transitionS[i]);
        }
    }

    class DFA14 extends DFA {

        public DFA14(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 14;
            this.eot = DFA14_eot;
            this.eof = DFA14_eof;
            this.min = DFA14_min;
            this.max = DFA14_max;
            this.accept = DFA14_accept;
            this.special = DFA14_special;
            this.transition = DFA14_transition;
        }
        public String getDescription() {
            return "415:1: concept_item : ( confirm_math_type_declaration | concept_state_variable_declaration | constraint_clause | module_concept_init_declaration | module_concept_final_declaration | type_declaration | operation_declaration | definition_declaration | defines_declaration );";
        }
    }
    static final String DFA22_eotS =
        "\12\uffff";
    static final String DFA22_eofS =
        "\12\uffff";
    static final String DFA22_minS =
        "\1\26\11\uffff";
    static final String DFA22_maxS =
        "\1\u009b\11\uffff";
    static final String DFA22_acceptS =
        "\1\uffff\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11";
    static final String DFA22_specialS =
        "\12\uffff}>";
    static final String[] DFA22_transitionS = {
            "\1\10\11\uffff\1\1\1\uffff\1\3\6\uffff\1\11\1\10\26\uffff\1"+
            "\6\7\uffff\1\10\1\uffff\1\10\34\uffff\1\7\2\uffff\1\5\1\4\46"+
            "\uffff\2\6\6\uffff\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA22_eot = DFA.unpackEncodedString(DFA22_eotS);
    static final short[] DFA22_eof = DFA.unpackEncodedString(DFA22_eofS);
    static final char[] DFA22_min = DFA.unpackEncodedStringToUnsignedChars(DFA22_minS);
    static final char[] DFA22_max = DFA.unpackEncodedStringToUnsignedChars(DFA22_maxS);
    static final short[] DFA22_accept = DFA.unpackEncodedString(DFA22_acceptS);
    static final short[] DFA22_special = DFA.unpackEncodedString(DFA22_specialS);
    static final short[][] DFA22_transition;

    static {
        int numStates = DFA22_transitionS.length;
        DFA22_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA22_transition[i] = DFA.unpackEncodedString(DFA22_transitionS[i]);
        }
    }

    class DFA22 extends DFA {

        public DFA22(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 22;
            this.eot = DFA22_eot;
            this.eof = DFA22_eof;
            this.min = DFA22_min;
            this.max = DFA22_max;
            this.accept = DFA22_accept;
            this.special = DFA22_special;
            this.transition = DFA22_transition;
        }
        public String getDescription() {
            return "449:1: performance_item : ( confirm_math_type_declaration | concept_state_variable_declaration | constraint_clause | performance_module_init_declaration | performance_module_final_declaration | performance_type_declaration | performance_operation_declaration | definition_declaration | defines_declaration );";
        }
    }
    static final String DFA34_eotS =
        "\23\uffff";
    static final String DFA34_eofS =
        "\23\uffff";
    static final String DFA34_minS =
        "\1\20\22\uffff";
    static final String DFA34_maxS =
        "\1\u009b\22\uffff";
    static final String DFA34_acceptS =
        "\1\uffff\1\1\1\2\20\uffff";
    static final String DFA34_specialS =
        "\23\uffff}>";
    static final String[] DFA34_transitionS = {
            "\1\2\5\uffff\1\2\15\uffff\1\2\1\uffff\1\2\3\uffff\1\2\7\uffff"+
            "\1\2\13\uffff\3\2\10\uffff\1\2\1\uffff\1\2\34\uffff\1\2\6\uffff"+
            "\1\2\13\uffff\1\2\7\uffff\1\2\17\uffff\1\2\6\uffff\1\1\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA34_eot = DFA.unpackEncodedString(DFA34_eotS);
    static final short[] DFA34_eof = DFA.unpackEncodedString(DFA34_eofS);
    static final char[] DFA34_min = DFA.unpackEncodedStringToUnsignedChars(DFA34_minS);
    static final char[] DFA34_max = DFA.unpackEncodedStringToUnsignedChars(DFA34_maxS);
    static final short[] DFA34_accept = DFA.unpackEncodedString(DFA34_acceptS);
    static final short[] DFA34_special = DFA.unpackEncodedString(DFA34_specialS);
    static final short[][] DFA34_transition;

    static {
        int numStates = DFA34_transitionS.length;
        DFA34_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA34_transition[i] = DFA.unpackEncodedString(DFA34_transitionS[i]);
        }
    }

    class DFA34 extends DFA {

        public DFA34(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 34;
            this.eot = DFA34_eot;
            this.eof = DFA34_eof;
            this.min = DFA34_min;
            this.max = DFA34_max;
            this.accept = DFA34_accept;
            this.special = DFA34_special;
            this.transition = DFA34_transition;
        }
        public String getDescription() {
            return "499:9: ( uses_list )?";
        }
    }
    static final String DFA35_eotS =
        "\22\uffff";
    static final String DFA35_eofS =
        "\22\uffff";
    static final String DFA35_minS =
        "\1\20\21\uffff";
    static final String DFA35_maxS =
        "\1\u009b\21\uffff";
    static final String DFA35_acceptS =
        "\1\uffff\1\1\1\2\17\uffff";
    static final String DFA35_specialS =
        "\22\uffff}>";
    static final String[] DFA35_transitionS = {
            "\1\2\5\uffff\1\2\15\uffff\1\2\1\uffff\1\2\3\uffff\1\2\7\uffff"+
            "\1\2\13\uffff\3\2\10\uffff\1\2\1\uffff\1\2\34\uffff\1\2\6\uffff"+
            "\1\2\13\uffff\1\2\7\uffff\1\1\17\uffff\1\2\7\uffff\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA35_eot = DFA.unpackEncodedString(DFA35_eotS);
    static final short[] DFA35_eof = DFA.unpackEncodedString(DFA35_eofS);
    static final char[] DFA35_min = DFA.unpackEncodedStringToUnsignedChars(DFA35_minS);
    static final char[] DFA35_max = DFA.unpackEncodedStringToUnsignedChars(DFA35_maxS);
    static final short[] DFA35_accept = DFA.unpackEncodedString(DFA35_acceptS);
    static final short[] DFA35_special = DFA.unpackEncodedString(DFA35_specialS);
    static final short[][] DFA35_transition;

    static {
        int numStates = DFA35_transitionS.length;
        DFA35_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA35_transition[i] = DFA.unpackEncodedString(DFA35_transitionS[i]);
        }
    }

    class DFA35 extends DFA {

        public DFA35(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 35;
            this.eot = DFA35_eot;
            this.eof = DFA35_eof;
            this.min = DFA35_min;
            this.max = DFA35_max;
            this.accept = DFA35_accept;
            this.special = DFA35_special;
            this.transition = DFA35_transition;
        }
        public String getDescription() {
            return "500:9: ( requires_clause )?";
        }
    }
    static final String DFA36_eotS =
        "\21\uffff";
    static final String DFA36_eofS =
        "\21\uffff";
    static final String DFA36_minS =
        "\1\20\20\uffff";
    static final String DFA36_maxS =
        "\1\u009b\20\uffff";
    static final String DFA36_acceptS =
        "\1\uffff\1\1\16\uffff\1\2";
    static final String DFA36_specialS =
        "\21\uffff}>";
    static final String[] DFA36_transitionS = {
            "\1\1\5\uffff\1\1\15\uffff\1\1\1\uffff\1\1\3\uffff\1\1\7\uffff"+
            "\1\20\13\uffff\3\1\10\uffff\1\1\1\uffff\1\1\34\uffff\1\1\6\uffff"+
            "\1\1\13\uffff\1\1\27\uffff\1\1\7\uffff\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA36_eot = DFA.unpackEncodedString(DFA36_eotS);
    static final short[] DFA36_eof = DFA.unpackEncodedString(DFA36_eofS);
    static final char[] DFA36_min = DFA.unpackEncodedStringToUnsignedChars(DFA36_minS);
    static final char[] DFA36_max = DFA.unpackEncodedStringToUnsignedChars(DFA36_maxS);
    static final short[] DFA36_accept = DFA.unpackEncodedString(DFA36_acceptS);
    static final short[] DFA36_special = DFA.unpackEncodedString(DFA36_specialS);
    static final short[][] DFA36_transition;

    static {
        int numStates = DFA36_transitionS.length;
        DFA36_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA36_transition[i] = DFA.unpackEncodedString(DFA36_transitionS[i]);
        }
    }

    class DFA36 extends DFA {

        public DFA36(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 36;
            this.eot = DFA36_eot;
            this.eof = DFA36_eof;
            this.min = DFA36_min;
            this.max = DFA36_max;
            this.accept = DFA36_accept;
            this.special = DFA36_special;
            this.transition = DFA36_transition;
        }
        public String getDescription() {
            return "501:9: ( body_item_sequence )?";
        }
    }
    static final String DFA45_eotS =
        "\21\uffff";
    static final String DFA45_eofS =
        "\21\uffff";
    static final String DFA45_minS =
        "\1\20\20\uffff";
    static final String DFA45_maxS =
        "\1\u009b\20\uffff";
    static final String DFA45_acceptS =
        "\1\uffff\1\2\1\1\16\uffff";
    static final String DFA45_specialS =
        "\21\uffff}>";
    static final String[] DFA45_transitionS = {
            "\1\2\5\uffff\1\2\15\uffff\1\2\1\uffff\1\2\3\uffff\1\2\7\uffff"+
            "\1\1\13\uffff\3\2\10\uffff\1\2\1\uffff\1\2\34\uffff\1\2\6\uffff"+
            "\1\2\13\uffff\1\2\27\uffff\1\2\7\uffff\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA45_eot = DFA.unpackEncodedString(DFA45_eotS);
    static final short[] DFA45_eof = DFA.unpackEncodedString(DFA45_eofS);
    static final char[] DFA45_min = DFA.unpackEncodedStringToUnsignedChars(DFA45_minS);
    static final char[] DFA45_max = DFA.unpackEncodedStringToUnsignedChars(DFA45_maxS);
    static final short[] DFA45_accept = DFA.unpackEncodedString(DFA45_acceptS);
    static final short[] DFA45_special = DFA.unpackEncodedString(DFA45_specialS);
    static final short[][] DFA45_transition;

    static {
        int numStates = DFA45_transitionS.length;
        DFA45_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA45_transition[i] = DFA.unpackEncodedString(DFA45_transitionS[i]);
        }
    }

    class DFA45 extends DFA {

        public DFA45(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 45;
            this.eot = DFA45_eot;
            this.eof = DFA45_eof;
            this.min = DFA45_min;
            this.max = DFA45_max;
            this.accept = DFA45_accept;
            this.special = DFA45_special;
            this.transition = DFA45_transition;
        }
        public String getDescription() {
            return "()+ loopback of 538:9: ( body_item )+";
        }
    }
    static final String DFA46_eotS =
        "\22\uffff";
    static final String DFA46_eofS =
        "\22\uffff";
    static final String DFA46_minS =
        "\1\20\7\uffff\1\0\11\uffff";
    static final String DFA46_maxS =
        "\1\u009b\7\uffff\1\0\11\uffff";
    static final String DFA46_acceptS =
        "\1\uffff\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\uffff\1\12\1\13\1\14\3\uffff"+
        "\1\15\1\10\1\11";
    static final String DFA46_specialS =
        "\10\uffff\1\0\11\uffff}>";
    static final String[] DFA46_transitionS = {
            "\1\7\5\uffff\1\13\15\uffff\1\3\1\uffff\1\2\3\uffff\1\13\23\uffff"+
            "\1\17\1\5\1\4\10\uffff\1\13\1\uffff\1\13\34\uffff\1\10\6\uffff"+
            "\1\11\13\uffff\1\12\27\uffff\1\6\7\uffff\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA46_eot = DFA.unpackEncodedString(DFA46_eotS);
    static final short[] DFA46_eof = DFA.unpackEncodedString(DFA46_eofS);
    static final char[] DFA46_min = DFA.unpackEncodedStringToUnsignedChars(DFA46_minS);
    static final char[] DFA46_max = DFA.unpackEncodedStringToUnsignedChars(DFA46_maxS);
    static final short[] DFA46_accept = DFA.unpackEncodedString(DFA46_acceptS);
    static final short[] DFA46_special = DFA.unpackEncodedString(DFA46_specialS);
    static final short[][] DFA46_transition;

    static {
        int numStates = DFA46_transitionS.length;
        DFA46_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA46_transition[i] = DFA.unpackEncodedString(DFA46_transitionS[i]);
        }
    }

    class DFA46 extends DFA {

        public DFA46(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 46;
            this.eot = DFA46_eot;
            this.eof = DFA46_eof;
            this.min = DFA46_min;
            this.max = DFA46_max;
            this.accept = DFA46_accept;
            this.special = DFA46_special;
            this.transition = DFA46_transition;
        }
        public String getDescription() {
            return "541:1: body_item : ( state_variable_declaration | correspondence_clause | convention_clause | module_body_init_declaration | module_body_final_declaration | type_representation_declaration | aux_operation_declaration | ( OPERATION ident operation_formal_param_section ( COLON program_type_expression )? SEMICOLON ( affects_clause )* ( requires_clause )? ( ensures_clause )? RECURSIVE )=> operation_recursive_procedure_declaration | operation_procedure_declaration | procedure_declaration | recursive_procedure_declaration | definition_declaration | facility_declaration );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA46_8 = input.LA(1);

                         
                        int index46_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_RParser()) ) {s = 16;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index46_8);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 46, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA48_eotS =
        "\15\uffff";
    static final String DFA48_eofS =
        "\15\uffff";
    static final String DFA48_minS =
        "\1\26\14\uffff";
    static final String DFA48_maxS =
        "\1\u009b\14\uffff";
    static final String DFA48_acceptS =
        "\1\uffff\1\1\1\2\12\uffff";
    static final String DFA48_specialS =
        "\15\uffff}>";
    static final String[] DFA48_transitionS = {
            "\1\2\23\uffff\1\2\7\uffff\1\2\13\uffff\3\2\10\uffff\1\2\1\uffff"+
            "\1\2\34\uffff\1\2\52\uffff\1\2\6\uffff\1\1\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA48_eot = DFA.unpackEncodedString(DFA48_eotS);
    static final short[] DFA48_eof = DFA.unpackEncodedString(DFA48_eofS);
    static final char[] DFA48_min = DFA.unpackEncodedStringToUnsignedChars(DFA48_minS);
    static final char[] DFA48_max = DFA.unpackEncodedStringToUnsignedChars(DFA48_maxS);
    static final short[] DFA48_accept = DFA.unpackEncodedString(DFA48_acceptS);
    static final short[] DFA48_special = DFA.unpackEncodedString(DFA48_specialS);
    static final short[][] DFA48_transition;

    static {
        int numStates = DFA48_transitionS.length;
        DFA48_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA48_transition[i] = DFA.unpackEncodedString(DFA48_transitionS[i]);
        }
    }

    class DFA48 extends DFA {

        public DFA48(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 48;
            this.eot = DFA48_eot;
            this.eof = DFA48_eof;
            this.min = DFA48_min;
            this.max = DFA48_max;
            this.accept = DFA48_accept;
            this.special = DFA48_special;
            this.transition = DFA48_transition;
        }
        public String getDescription() {
            return "571:24: ( uses_list )?";
        }
    }
    static final String DFA49_eotS =
        "\14\uffff";
    static final String DFA49_eofS =
        "\14\uffff";
    static final String DFA49_minS =
        "\1\26\13\uffff";
    static final String DFA49_maxS =
        "\1\u009b\13\uffff";
    static final String DFA49_acceptS =
        "\1\uffff\1\1\11\uffff\1\2";
    static final String DFA49_specialS =
        "\14\uffff}>";
    static final String[] DFA49_transitionS = {
            "\1\1\23\uffff\1\1\7\uffff\1\13\13\uffff\3\1\10\uffff\1\1\1\uffff"+
            "\1\1\34\uffff\1\1\52\uffff\1\1\7\uffff\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA49_eot = DFA.unpackEncodedString(DFA49_eotS);
    static final short[] DFA49_eof = DFA.unpackEncodedString(DFA49_eofS);
    static final char[] DFA49_min = DFA.unpackEncodedStringToUnsignedChars(DFA49_minS);
    static final char[] DFA49_max = DFA.unpackEncodedStringToUnsignedChars(DFA49_maxS);
    static final short[] DFA49_accept = DFA.unpackEncodedString(DFA49_acceptS);
    static final short[] DFA49_special = DFA.unpackEncodedString(DFA49_specialS);
    static final short[][] DFA49_transition;

    static {
        int numStates = DFA49_transitionS.length;
        DFA49_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA49_transition[i] = DFA.unpackEncodedString(DFA49_transitionS[i]);
        }
    }

    class DFA49 extends DFA {

        public DFA49(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 49;
            this.eot = DFA49_eot;
            this.eof = DFA49_eof;
            this.min = DFA49_min;
            this.max = DFA49_max;
            this.accept = DFA49_accept;
            this.special = DFA49_special;
            this.transition = DFA49_transition;
        }
        public String getDescription() {
            return "572:13: ( facility_item_sequence )?";
        }
    }
    static final String DFA56_eotS =
        "\14\uffff";
    static final String DFA56_eofS =
        "\14\uffff";
    static final String DFA56_minS =
        "\1\26\13\uffff";
    static final String DFA56_maxS =
        "\1\u009b\13\uffff";
    static final String DFA56_acceptS =
        "\1\uffff\1\2\1\1\11\uffff";
    static final String DFA56_specialS =
        "\14\uffff}>";
    static final String[] DFA56_transitionS = {
            "\1\2\23\uffff\1\2\7\uffff\1\1\13\uffff\3\2\10\uffff\1\2\1\uffff"+
            "\1\2\34\uffff\1\2\52\uffff\1\2\7\uffff\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA56_eot = DFA.unpackEncodedString(DFA56_eotS);
    static final short[] DFA56_eof = DFA.unpackEncodedString(DFA56_eofS);
    static final char[] DFA56_min = DFA.unpackEncodedStringToUnsignedChars(DFA56_minS);
    static final char[] DFA56_max = DFA.unpackEncodedStringToUnsignedChars(DFA56_maxS);
    static final short[] DFA56_accept = DFA.unpackEncodedString(DFA56_acceptS);
    static final short[] DFA56_special = DFA.unpackEncodedString(DFA56_specialS);
    static final short[][] DFA56_transition;

    static {
        int numStates = DFA56_transitionS.length;
        DFA56_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA56_transition[i] = DFA.unpackEncodedString(DFA56_transitionS[i]);
        }
    }

    class DFA56 extends DFA {

        public DFA56(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 56;
            this.eot = DFA56_eot;
            this.eof = DFA56_eof;
            this.min = DFA56_min;
            this.max = DFA56_max;
            this.accept = DFA56_accept;
            this.special = DFA56_special;
            this.transition = DFA56_transition;
        }
        public String getDescription() {
            return "()+ loopback of 589:9: ( facility_item )+";
        }
    }
    static final String DFA57_eotS =
        "\15\uffff";
    static final String DFA57_eofS =
        "\15\uffff";
    static final String DFA57_minS =
        "\1\26\4\uffff\1\0\7\uffff";
    static final String DFA57_maxS =
        "\1\u009b\4\uffff\1\0\7\uffff";
    static final String DFA57_acceptS =
        "\1\uffff\1\1\1\2\1\3\1\4\1\uffff\1\7\3\uffff\1\10\1\5\1\6";
    static final String DFA57_specialS =
        "\5\uffff\1\0\7\uffff}>";
    static final String[] DFA57_transitionS = {
            "\1\6\23\uffff\1\6\23\uffff\1\12\1\3\1\2\10\uffff\1\6\1\uffff"+
            "\1\6\34\uffff\1\5\52\uffff\1\4\7\uffff\1\1",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA57_eot = DFA.unpackEncodedString(DFA57_eotS);
    static final short[] DFA57_eof = DFA.unpackEncodedString(DFA57_eofS);
    static final char[] DFA57_min = DFA.unpackEncodedStringToUnsignedChars(DFA57_minS);
    static final char[] DFA57_max = DFA.unpackEncodedStringToUnsignedChars(DFA57_maxS);
    static final short[] DFA57_accept = DFA.unpackEncodedString(DFA57_acceptS);
    static final short[] DFA57_special = DFA.unpackEncodedString(DFA57_specialS);
    static final short[][] DFA57_transition;

    static {
        int numStates = DFA57_transitionS.length;
        DFA57_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA57_transition[i] = DFA.unpackEncodedString(DFA57_transitionS[i]);
        }
    }

    class DFA57 extends DFA {

        public DFA57(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 57;
            this.eot = DFA57_eot;
            this.eof = DFA57_eof;
            this.min = DFA57_min;
            this.max = DFA57_max;
            this.accept = DFA57_accept;
            this.special = DFA57_special;
            this.transition = DFA57_transition;
        }
        public String getDescription() {
            return "592:1: facility_item : ( state_variable_declaration | module_facility_init_declaration | module_facility_final_declaration | facility_type_declaration | ( OPERATION ident operation_formal_param_section ( COLON program_type_expression )? SEMICOLON ( affects_clause )* ( requires_clause )? ( ensures_clause )? RECURSIVE )=> operation_recursive_procedure_declaration | operation_procedure_declaration | definition_declaration | facility_declaration );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA57_5 = input.LA(1);

                         
                        int index57_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_RParser()) ) {s = 11;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index57_5);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 57, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA66_eotS =
        "\24\uffff";
    static final String DFA66_eofS =
        "\24\uffff";
    static final String DFA66_minS =
        "\1\22\23\uffff";
    static final String DFA66_maxS =
        "\1\u00d4\23\uffff";
    static final String DFA66_acceptS =
        "\1\uffff\1\2\21\uffff\1\1";
    static final String DFA66_specialS =
        "\24\uffff}>";
    static final String[] DFA66_transitionS = {
            "\1\1\2\uffff\1\1\7\uffff\1\1\46\uffff\1\23\2\uffff\1\1\23\uffff"+
            "\1\1\11\uffff\1\1\76\uffff\1\1\7\uffff\1\1\1\uffff\1\1\1\uffff"+
            "\1\1\1\uffff\1\1\1\uffff\1\1\3\uffff\1\1\2\uffff\1\1\11\uffff"+
            "\1\1\1\uffff\1\1\6\uffff\2\1\2\uffff\1\1\1\uffff\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA66_eot = DFA.unpackEncodedString(DFA66_eotS);
    static final short[] DFA66_eof = DFA.unpackEncodedString(DFA66_eofS);
    static final char[] DFA66_min = DFA.unpackEncodedStringToUnsignedChars(DFA66_minS);
    static final char[] DFA66_max = DFA.unpackEncodedStringToUnsignedChars(DFA66_maxS);
    static final short[] DFA66_accept = DFA.unpackEncodedString(DFA66_acceptS);
    static final short[] DFA66_special = DFA.unpackEncodedString(DFA66_specialS);
    static final short[][] DFA66_transition;

    static {
        int numStates = DFA66_transitionS.length;
        DFA66_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA66_transition[i] = DFA.unpackEncodedString(DFA66_transitionS[i]);
        }
    }

    class DFA66 extends DFA {

        public DFA66(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 66;
            this.eot = DFA66_eot;
            this.eof = DFA66_eof;
            this.min = DFA66_min;
            this.max = DFA66_max;
            this.accept = DFA66_accept;
            this.special = DFA66_special;
            this.transition = DFA66_transition;
        }
        public String getDescription() {
            return "()+ loopback of 741:9: ( FOR ALL math_variable_declaration_group COMMA )+";
        }
    }
    static final String DFA95_eotS =
        "\20\uffff";
    static final String DFA95_eofS =
        "\20\uffff";
    static final String DFA95_minS =
        "\1\14\17\uffff";
    static final String DFA95_maxS =
        "\1\u00a4\17\uffff";
    static final String DFA95_acceptS =
        "\1\uffff\1\1\1\2\15\uffff";
    static final String DFA95_specialS =
        "\20\uffff}>";
    static final String[] DFA95_transitionS = {
            "\3\2\10\uffff\1\2\10\uffff\1\2\6\uffff\1\1\12\uffff\1\2\13\uffff"+
            "\1\2\6\uffff\1\2\1\uffff\1\2\22\uffff\1\2\44\uffff\1\2\33\uffff"+
            "\1\2\3\uffff\1\2\4\uffff\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA95_eot = DFA.unpackEncodedString(DFA95_eotS);
    static final short[] DFA95_eof = DFA.unpackEncodedString(DFA95_eofS);
    static final char[] DFA95_min = DFA.unpackEncodedStringToUnsignedChars(DFA95_minS);
    static final char[] DFA95_max = DFA.unpackEncodedStringToUnsignedChars(DFA95_maxS);
    static final short[] DFA95_accept = DFA.unpackEncodedString(DFA95_acceptS);
    static final short[] DFA95_special = DFA.unpackEncodedString(DFA95_specialS);
    static final short[][] DFA95_transition;

    static {
        int numStates = DFA95_transitionS.length;
        DFA95_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA95_transition[i] = DFA.unpackEncodedString(DFA95_transitionS[i]);
        }
    }

    class DFA95 extends DFA {

        public DFA95(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 95;
            this.eot = DFA95_eot;
            this.eof = DFA95_eof;
            this.min = DFA95_min;
            this.max = DFA95_max;
            this.accept = DFA95_accept;
            this.special = DFA95_special;
            this.transition = DFA95_transition;
        }
        public String getDescription() {
            return "931:9: ( decreasing_clause )?";
        }
    }
    static final String DFA96_eotS =
        "\17\uffff";
    static final String DFA96_eofS =
        "\17\uffff";
    static final String DFA96_minS =
        "\1\14\16\uffff";
    static final String DFA96_maxS =
        "\1\u00a4\16\uffff";
    static final String DFA96_acceptS =
        "\1\uffff\1\2\14\uffff\1\1";
    static final String DFA96_specialS =
        "\17\uffff}>";
    static final String[] DFA96_transitionS = {
            "\3\1\10\uffff\1\1\10\uffff\1\1\21\uffff\1\1\13\uffff\1\16\6"+
            "\uffff\1\1\1\uffff\1\1\22\uffff\1\1\44\uffff\1\1\33\uffff\1"+
            "\1\3\uffff\1\1\4\uffff\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA96_eot = DFA.unpackEncodedString(DFA96_eotS);
    static final short[] DFA96_eof = DFA.unpackEncodedString(DFA96_eofS);
    static final char[] DFA96_min = DFA.unpackEncodedStringToUnsignedChars(DFA96_minS);
    static final char[] DFA96_max = DFA.unpackEncodedStringToUnsignedChars(DFA96_maxS);
    static final short[] DFA96_accept = DFA.unpackEncodedString(DFA96_acceptS);
    static final short[] DFA96_special = DFA.unpackEncodedString(DFA96_specialS);
    static final short[][] DFA96_transition;

    static {
        int numStates = DFA96_transitionS.length;
        DFA96_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA96_transition[i] = DFA.unpackEncodedString(DFA96_transitionS[i]);
        }
    }

    class DFA96 extends DFA {

        public DFA96(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 96;
            this.eot = DFA96_eot;
            this.eof = DFA96_eof;
            this.min = DFA96_min;
            this.max = DFA96_max;
            this.accept = DFA96_accept;
            this.special = DFA96_special;
            this.transition = DFA96_transition;
        }
        public String getDescription() {
            return "()* loopback of 932:9: ( facility_declaration )*";
        }
    }
    static final String DFA97_eotS =
        "\16\uffff";
    static final String DFA97_eofS =
        "\16\uffff";
    static final String DFA97_minS =
        "\1\14\15\uffff";
    static final String DFA97_maxS =
        "\1\u00a4\15\uffff";
    static final String DFA97_acceptS =
        "\1\uffff\1\2\13\uffff\1\1";
    static final String DFA97_specialS =
        "\16\uffff}>";
    static final String[] DFA97_transitionS = {
            "\3\1\10\uffff\1\1\10\uffff\1\1\21\uffff\1\1\22\uffff\1\1\1\uffff"+
            "\1\1\22\uffff\1\1\44\uffff\1\1\33\uffff\1\15\3\uffff\1\1\4\uffff"+
            "\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA97_eot = DFA.unpackEncodedString(DFA97_eotS);
    static final short[] DFA97_eof = DFA.unpackEncodedString(DFA97_eofS);
    static final char[] DFA97_min = DFA.unpackEncodedStringToUnsignedChars(DFA97_minS);
    static final char[] DFA97_max = DFA.unpackEncodedStringToUnsignedChars(DFA97_maxS);
    static final short[] DFA97_accept = DFA.unpackEncodedString(DFA97_acceptS);
    static final short[] DFA97_special = DFA.unpackEncodedString(DFA97_specialS);
    static final short[][] DFA97_transition;

    static {
        int numStates = DFA97_transitionS.length;
        DFA97_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA97_transition[i] = DFA.unpackEncodedString(DFA97_transitionS[i]);
        }
    }

    class DFA97 extends DFA {

        public DFA97(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 97;
            this.eot = DFA97_eot;
            this.eof = DFA97_eof;
            this.min = DFA97_min;
            this.max = DFA97_max;
            this.accept = DFA97_accept;
            this.special = DFA97_special;
            this.transition = DFA97_transition;
        }
        public String getDescription() {
            return "()* loopback of 933:9: ( variable_declaration )*";
        }
    }
    static final String DFA98_eotS =
        "\15\uffff";
    static final String DFA98_eofS =
        "\15\uffff";
    static final String DFA98_minS =
        "\1\14\14\uffff";
    static final String DFA98_maxS =
        "\1\u00a4\14\uffff";
    static final String DFA98_acceptS =
        "\1\uffff\1\2\12\uffff\1\1";
    static final String DFA98_specialS =
        "\15\uffff}>";
    static final String[] DFA98_transitionS = {
            "\2\1\1\14\10\uffff\1\1\10\uffff\1\1\21\uffff\1\1\22\uffff\1"+
            "\1\1\uffff\1\1\22\uffff\1\1\44\uffff\1\1\37\uffff\1\1\4\uffff"+
            "\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA98_eot = DFA.unpackEncodedString(DFA98_eotS);
    static final short[] DFA98_eof = DFA.unpackEncodedString(DFA98_eofS);
    static final char[] DFA98_min = DFA.unpackEncodedStringToUnsignedChars(DFA98_minS);
    static final char[] DFA98_max = DFA.unpackEncodedStringToUnsignedChars(DFA98_maxS);
    static final short[] DFA98_accept = DFA.unpackEncodedString(DFA98_acceptS);
    static final short[] DFA98_special = DFA.unpackEncodedString(DFA98_specialS);
    static final short[][] DFA98_transition;

    static {
        int numStates = DFA98_transitionS.length;
        DFA98_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA98_transition[i] = DFA.unpackEncodedString(DFA98_transitionS[i]);
        }
    }

    class DFA98 extends DFA {

        public DFA98(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 98;
            this.eot = DFA98_eot;
            this.eof = DFA98_eof;
            this.min = DFA98_min;
            this.max = DFA98_max;
            this.accept = DFA98_accept;
            this.special = DFA98_special;
            this.transition = DFA98_transition;
        }
        public String getDescription() {
            return "()* loopback of 934:9: ( aux_variable_declaration )*";
        }
    }
    static final String DFA104_eotS =
        "\17\uffff";
    static final String DFA104_eofS =
        "\17\uffff";
    static final String DFA104_minS =
        "\1\14\16\uffff";
    static final String DFA104_maxS =
        "\1\u00a4\16\uffff";
    static final String DFA104_acceptS =
        "\1\uffff\1\2\14\uffff\1\1";
    static final String DFA104_specialS =
        "\17\uffff}>";
    static final String[] DFA104_transitionS = {
            "\3\1\10\uffff\1\1\10\uffff\1\1\21\uffff\1\1\13\uffff\1\16\6"+
            "\uffff\1\1\1\uffff\1\1\22\uffff\1\1\44\uffff\1\1\33\uffff\1"+
            "\1\3\uffff\1\1\4\uffff\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA104_eot = DFA.unpackEncodedString(DFA104_eotS);
    static final short[] DFA104_eof = DFA.unpackEncodedString(DFA104_eofS);
    static final char[] DFA104_min = DFA.unpackEncodedStringToUnsignedChars(DFA104_minS);
    static final char[] DFA104_max = DFA.unpackEncodedStringToUnsignedChars(DFA104_maxS);
    static final short[] DFA104_accept = DFA.unpackEncodedString(DFA104_acceptS);
    static final short[] DFA104_special = DFA.unpackEncodedString(DFA104_specialS);
    static final short[][] DFA104_transition;

    static {
        int numStates = DFA104_transitionS.length;
        DFA104_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA104_transition[i] = DFA.unpackEncodedString(DFA104_transitionS[i]);
        }
    }

    class DFA104 extends DFA {

        public DFA104(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 104;
            this.eot = DFA104_eot;
            this.eof = DFA104_eof;
            this.min = DFA104_min;
            this.max = DFA104_max;
            this.accept = DFA104_accept;
            this.special = DFA104_special;
            this.transition = DFA104_transition;
        }
        public String getDescription() {
            return "()* loopback of 949:9: ( facility_declaration )*";
        }
    }
    static final String DFA105_eotS =
        "\16\uffff";
    static final String DFA105_eofS =
        "\16\uffff";
    static final String DFA105_minS =
        "\1\14\15\uffff";
    static final String DFA105_maxS =
        "\1\u00a4\15\uffff";
    static final String DFA105_acceptS =
        "\1\uffff\1\2\13\uffff\1\1";
    static final String DFA105_specialS =
        "\16\uffff}>";
    static final String[] DFA105_transitionS = {
            "\3\1\10\uffff\1\1\10\uffff\1\1\21\uffff\1\1\22\uffff\1\1\1\uffff"+
            "\1\1\22\uffff\1\1\44\uffff\1\1\33\uffff\1\15\3\uffff\1\1\4\uffff"+
            "\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA105_eot = DFA.unpackEncodedString(DFA105_eotS);
    static final short[] DFA105_eof = DFA.unpackEncodedString(DFA105_eofS);
    static final char[] DFA105_min = DFA.unpackEncodedStringToUnsignedChars(DFA105_minS);
    static final char[] DFA105_max = DFA.unpackEncodedStringToUnsignedChars(DFA105_maxS);
    static final short[] DFA105_accept = DFA.unpackEncodedString(DFA105_acceptS);
    static final short[] DFA105_special = DFA.unpackEncodedString(DFA105_specialS);
    static final short[][] DFA105_transition;

    static {
        int numStates = DFA105_transitionS.length;
        DFA105_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA105_transition[i] = DFA.unpackEncodedString(DFA105_transitionS[i]);
        }
    }

    class DFA105 extends DFA {

        public DFA105(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 105;
            this.eot = DFA105_eot;
            this.eof = DFA105_eof;
            this.min = DFA105_min;
            this.max = DFA105_max;
            this.accept = DFA105_accept;
            this.special = DFA105_special;
            this.transition = DFA105_transition;
        }
        public String getDescription() {
            return "()* loopback of 950:9: ( variable_declaration )*";
        }
    }
    static final String DFA106_eotS =
        "\15\uffff";
    static final String DFA106_eofS =
        "\15\uffff";
    static final String DFA106_minS =
        "\1\14\14\uffff";
    static final String DFA106_maxS =
        "\1\u00a4\14\uffff";
    static final String DFA106_acceptS =
        "\1\uffff\1\2\12\uffff\1\1";
    static final String DFA106_specialS =
        "\15\uffff}>";
    static final String[] DFA106_transitionS = {
            "\2\1\1\14\10\uffff\1\1\10\uffff\1\1\21\uffff\1\1\22\uffff\1"+
            "\1\1\uffff\1\1\22\uffff\1\1\44\uffff\1\1\37\uffff\1\1\4\uffff"+
            "\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA106_eot = DFA.unpackEncodedString(DFA106_eotS);
    static final short[] DFA106_eof = DFA.unpackEncodedString(DFA106_eofS);
    static final char[] DFA106_min = DFA.unpackEncodedStringToUnsignedChars(DFA106_minS);
    static final char[] DFA106_max = DFA.unpackEncodedStringToUnsignedChars(DFA106_maxS);
    static final short[] DFA106_accept = DFA.unpackEncodedString(DFA106_acceptS);
    static final short[] DFA106_special = DFA.unpackEncodedString(DFA106_specialS);
    static final short[][] DFA106_transition;

    static {
        int numStates = DFA106_transitionS.length;
        DFA106_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA106_transition[i] = DFA.unpackEncodedString(DFA106_transitionS[i]);
        }
    }

    class DFA106 extends DFA {

        public DFA106(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 106;
            this.eot = DFA106_eot;
            this.eof = DFA106_eof;
            this.min = DFA106_min;
            this.max = DFA106_max;
            this.accept = DFA106_accept;
            this.special = DFA106_special;
            this.transition = DFA106_transition;
        }
        public String getDescription() {
            return "()* loopback of 951:9: ( aux_variable_declaration )*";
        }
    }
    static final String DFA121_eotS =
        "\21\uffff";
    static final String DFA121_eofS =
        "\21\uffff";
    static final String DFA121_minS =
        "\1\10\20\uffff";
    static final String DFA121_maxS =
        "\1\u00a4\20\uffff";
    static final String DFA121_acceptS =
        "\1\uffff\1\2\16\uffff\1\1";
    static final String DFA121_specialS =
        "\21\uffff}>";
    static final String[] DFA121_transitionS = {
            "\1\20\3\uffff\3\1\10\uffff\1\1\1\uffff\1\20\6\uffff\1\1\6\uffff"+
            "\1\1\12\uffff\1\1\5\uffff\1\20\5\uffff\1\1\6\uffff\1\1\1\uffff"+
            "\1\1\22\uffff\1\1\23\uffff\1\20\12\uffff\1\20\5\uffff\1\1\1"+
            "\uffff\1\20\3\uffff\1\20\23\uffff\1\20\1\uffff\1\1\3\uffff\1"+
            "\1\4\uffff\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA121_eot = DFA.unpackEncodedString(DFA121_eotS);
    static final short[] DFA121_eof = DFA.unpackEncodedString(DFA121_eofS);
    static final char[] DFA121_min = DFA.unpackEncodedStringToUnsignedChars(DFA121_minS);
    static final char[] DFA121_max = DFA.unpackEncodedStringToUnsignedChars(DFA121_maxS);
    static final short[] DFA121_accept = DFA.unpackEncodedString(DFA121_acceptS);
    static final short[] DFA121_special = DFA.unpackEncodedString(DFA121_specialS);
    static final short[][] DFA121_transition;

    static {
        int numStates = DFA121_transitionS.length;
        DFA121_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA121_transition[i] = DFA.unpackEncodedString(DFA121_transitionS[i]);
        }
    }

    class DFA121 extends DFA {

        public DFA121(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 121;
            this.eot = DFA121_eot;
            this.eof = DFA121_eof;
            this.min = DFA121_min;
            this.max = DFA121_max;
            this.accept = DFA121_accept;
            this.special = DFA121_special;
            this.transition = DFA121_transition;
        }
        public String getDescription() {
            return "()* loopback of 1005:9: ( affects_clause )*";
        }
    }
    static final String DFA122_eotS =
        "\20\uffff";
    static final String DFA122_eofS =
        "\20\uffff";
    static final String DFA122_minS =
        "\1\14\17\uffff";
    static final String DFA122_maxS =
        "\1\u00a4\17\uffff";
    static final String DFA122_acceptS =
        "\1\uffff\1\1\1\2\15\uffff";
    static final String DFA122_specialS =
        "\20\uffff}>";
    static final String[] DFA122_transitionS = {
            "\3\2\10\uffff\1\2\10\uffff\1\2\6\uffff\1\1\12\uffff\1\2\13\uffff"+
            "\1\2\6\uffff\1\2\1\uffff\1\2\22\uffff\1\2\44\uffff\1\2\33\uffff"+
            "\1\2\3\uffff\1\2\4\uffff\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA122_eot = DFA.unpackEncodedString(DFA122_eotS);
    static final short[] DFA122_eof = DFA.unpackEncodedString(DFA122_eofS);
    static final char[] DFA122_min = DFA.unpackEncodedStringToUnsignedChars(DFA122_minS);
    static final char[] DFA122_max = DFA.unpackEncodedStringToUnsignedChars(DFA122_maxS);
    static final short[] DFA122_accept = DFA.unpackEncodedString(DFA122_acceptS);
    static final short[] DFA122_special = DFA.unpackEncodedString(DFA122_specialS);
    static final short[][] DFA122_transition;

    static {
        int numStates = DFA122_transitionS.length;
        DFA122_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA122_transition[i] = DFA.unpackEncodedString(DFA122_transitionS[i]);
        }
    }

    class DFA122 extends DFA {

        public DFA122(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 122;
            this.eot = DFA122_eot;
            this.eof = DFA122_eof;
            this.min = DFA122_min;
            this.max = DFA122_max;
            this.accept = DFA122_accept;
            this.special = DFA122_special;
            this.transition = DFA122_transition;
        }
        public String getDescription() {
            return "1006:9: ( decreasing_clause )?";
        }
    }
    static final String DFA123_eotS =
        "\17\uffff";
    static final String DFA123_eofS =
        "\17\uffff";
    static final String DFA123_minS =
        "\1\14\16\uffff";
    static final String DFA123_maxS =
        "\1\u00a4\16\uffff";
    static final String DFA123_acceptS =
        "\1\uffff\1\2\14\uffff\1\1";
    static final String DFA123_specialS =
        "\17\uffff}>";
    static final String[] DFA123_transitionS = {
            "\3\1\10\uffff\1\1\10\uffff\1\1\21\uffff\1\1\13\uffff\1\16\6"+
            "\uffff\1\1\1\uffff\1\1\22\uffff\1\1\44\uffff\1\1\33\uffff\1"+
            "\1\3\uffff\1\1\4\uffff\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA123_eot = DFA.unpackEncodedString(DFA123_eotS);
    static final short[] DFA123_eof = DFA.unpackEncodedString(DFA123_eofS);
    static final char[] DFA123_min = DFA.unpackEncodedStringToUnsignedChars(DFA123_minS);
    static final char[] DFA123_max = DFA.unpackEncodedStringToUnsignedChars(DFA123_maxS);
    static final short[] DFA123_accept = DFA.unpackEncodedString(DFA123_acceptS);
    static final short[] DFA123_special = DFA.unpackEncodedString(DFA123_specialS);
    static final short[][] DFA123_transition;

    static {
        int numStates = DFA123_transitionS.length;
        DFA123_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA123_transition[i] = DFA.unpackEncodedString(DFA123_transitionS[i]);
        }
    }

    class DFA123 extends DFA {

        public DFA123(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 123;
            this.eot = DFA123_eot;
            this.eof = DFA123_eof;
            this.min = DFA123_min;
            this.max = DFA123_max;
            this.accept = DFA123_accept;
            this.special = DFA123_special;
            this.transition = DFA123_transition;
        }
        public String getDescription() {
            return "()* loopback of 1007:9: ( facility_declaration )*";
        }
    }
    static final String DFA124_eotS =
        "\16\uffff";
    static final String DFA124_eofS =
        "\16\uffff";
    static final String DFA124_minS =
        "\1\14\15\uffff";
    static final String DFA124_maxS =
        "\1\u00a4\15\uffff";
    static final String DFA124_acceptS =
        "\1\uffff\1\2\13\uffff\1\1";
    static final String DFA124_specialS =
        "\16\uffff}>";
    static final String[] DFA124_transitionS = {
            "\3\1\10\uffff\1\1\10\uffff\1\1\21\uffff\1\1\22\uffff\1\1\1\uffff"+
            "\1\1\22\uffff\1\1\44\uffff\1\1\33\uffff\1\15\3\uffff\1\1\4\uffff"+
            "\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA124_eot = DFA.unpackEncodedString(DFA124_eotS);
    static final short[] DFA124_eof = DFA.unpackEncodedString(DFA124_eofS);
    static final char[] DFA124_min = DFA.unpackEncodedStringToUnsignedChars(DFA124_minS);
    static final char[] DFA124_max = DFA.unpackEncodedStringToUnsignedChars(DFA124_maxS);
    static final short[] DFA124_accept = DFA.unpackEncodedString(DFA124_acceptS);
    static final short[] DFA124_special = DFA.unpackEncodedString(DFA124_specialS);
    static final short[][] DFA124_transition;

    static {
        int numStates = DFA124_transitionS.length;
        DFA124_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA124_transition[i] = DFA.unpackEncodedString(DFA124_transitionS[i]);
        }
    }

    class DFA124 extends DFA {

        public DFA124(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 124;
            this.eot = DFA124_eot;
            this.eof = DFA124_eof;
            this.min = DFA124_min;
            this.max = DFA124_max;
            this.accept = DFA124_accept;
            this.special = DFA124_special;
            this.transition = DFA124_transition;
        }
        public String getDescription() {
            return "()* loopback of 1008:9: ( variable_declaration )*";
        }
    }
    static final String DFA125_eotS =
        "\15\uffff";
    static final String DFA125_eofS =
        "\15\uffff";
    static final String DFA125_minS =
        "\1\14\14\uffff";
    static final String DFA125_maxS =
        "\1\u00a4\14\uffff";
    static final String DFA125_acceptS =
        "\1\uffff\1\2\12\uffff\1\1";
    static final String DFA125_specialS =
        "\15\uffff}>";
    static final String[] DFA125_transitionS = {
            "\2\1\1\14\10\uffff\1\1\10\uffff\1\1\21\uffff\1\1\22\uffff\1"+
            "\1\1\uffff\1\1\22\uffff\1\1\44\uffff\1\1\37\uffff\1\1\4\uffff"+
            "\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA125_eot = DFA.unpackEncodedString(DFA125_eotS);
    static final short[] DFA125_eof = DFA.unpackEncodedString(DFA125_eofS);
    static final char[] DFA125_min = DFA.unpackEncodedStringToUnsignedChars(DFA125_minS);
    static final char[] DFA125_max = DFA.unpackEncodedStringToUnsignedChars(DFA125_maxS);
    static final short[] DFA125_accept = DFA.unpackEncodedString(DFA125_acceptS);
    static final short[] DFA125_special = DFA.unpackEncodedString(DFA125_specialS);
    static final short[][] DFA125_transition;

    static {
        int numStates = DFA125_transitionS.length;
        DFA125_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA125_transition[i] = DFA.unpackEncodedString(DFA125_transitionS[i]);
        }
    }

    class DFA125 extends DFA {

        public DFA125(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 125;
            this.eot = DFA125_eot;
            this.eof = DFA125_eof;
            this.min = DFA125_min;
            this.max = DFA125_max;
            this.accept = DFA125_accept;
            this.special = DFA125_special;
            this.transition = DFA125_transition;
        }
        public String getDescription() {
            return "()* loopback of 1009:9: ( aux_variable_declaration )*";
        }
    }
    static final String DFA128_eotS =
        "\21\uffff";
    static final String DFA128_eofS =
        "\21\uffff";
    static final String DFA128_minS =
        "\1\10\20\uffff";
    static final String DFA128_maxS =
        "\1\u00a4\20\uffff";
    static final String DFA128_acceptS =
        "\1\uffff\1\2\16\uffff\1\1";
    static final String DFA128_specialS =
        "\21\uffff}>";
    static final String[] DFA128_transitionS = {
            "\1\20\3\uffff\3\1\10\uffff\1\1\1\uffff\1\20\6\uffff\1\1\6\uffff"+
            "\1\1\12\uffff\1\1\5\uffff\1\20\5\uffff\1\1\6\uffff\1\1\1\uffff"+
            "\1\1\22\uffff\1\1\23\uffff\1\20\12\uffff\1\20\5\uffff\1\1\1"+
            "\uffff\1\20\3\uffff\1\20\23\uffff\1\20\1\uffff\1\1\3\uffff\1"+
            "\1\4\uffff\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA128_eot = DFA.unpackEncodedString(DFA128_eotS);
    static final short[] DFA128_eof = DFA.unpackEncodedString(DFA128_eofS);
    static final char[] DFA128_min = DFA.unpackEncodedStringToUnsignedChars(DFA128_minS);
    static final char[] DFA128_max = DFA.unpackEncodedStringToUnsignedChars(DFA128_maxS);
    static final short[] DFA128_accept = DFA.unpackEncodedString(DFA128_acceptS);
    static final short[] DFA128_special = DFA.unpackEncodedString(DFA128_specialS);
    static final short[][] DFA128_transition;

    static {
        int numStates = DFA128_transitionS.length;
        DFA128_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA128_transition[i] = DFA.unpackEncodedString(DFA128_transitionS[i]);
        }
    }

    class DFA128 extends DFA {

        public DFA128(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 128;
            this.eot = DFA128_eot;
            this.eof = DFA128_eof;
            this.min = DFA128_min;
            this.max = DFA128_max;
            this.accept = DFA128_accept;
            this.special = DFA128_special;
            this.transition = DFA128_transition;
        }
        public String getDescription() {
            return "()* loopback of 1019:9: ( affects_clause )*";
        }
    }
    static final String DFA129_eotS =
        "\20\uffff";
    static final String DFA129_eofS =
        "\20\uffff";
    static final String DFA129_minS =
        "\1\14\17\uffff";
    static final String DFA129_maxS =
        "\1\u00a4\17\uffff";
    static final String DFA129_acceptS =
        "\1\uffff\1\1\1\2\15\uffff";
    static final String DFA129_specialS =
        "\20\uffff}>";
    static final String[] DFA129_transitionS = {
            "\3\2\10\uffff\1\2\10\uffff\1\2\6\uffff\1\1\12\uffff\1\2\13\uffff"+
            "\1\2\6\uffff\1\2\1\uffff\1\2\22\uffff\1\2\44\uffff\1\2\33\uffff"+
            "\1\2\3\uffff\1\2\4\uffff\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA129_eot = DFA.unpackEncodedString(DFA129_eotS);
    static final short[] DFA129_eof = DFA.unpackEncodedString(DFA129_eofS);
    static final char[] DFA129_min = DFA.unpackEncodedStringToUnsignedChars(DFA129_minS);
    static final char[] DFA129_max = DFA.unpackEncodedStringToUnsignedChars(DFA129_maxS);
    static final short[] DFA129_accept = DFA.unpackEncodedString(DFA129_acceptS);
    static final short[] DFA129_special = DFA.unpackEncodedString(DFA129_specialS);
    static final short[][] DFA129_transition;

    static {
        int numStates = DFA129_transitionS.length;
        DFA129_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA129_transition[i] = DFA.unpackEncodedString(DFA129_transitionS[i]);
        }
    }

    class DFA129 extends DFA {

        public DFA129(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 129;
            this.eot = DFA129_eot;
            this.eof = DFA129_eof;
            this.min = DFA129_min;
            this.max = DFA129_max;
            this.accept = DFA129_accept;
            this.special = DFA129_special;
            this.transition = DFA129_transition;
        }
        public String getDescription() {
            return "1020:9: ( decreasing_clause )?";
        }
    }
    static final String DFA130_eotS =
        "\17\uffff";
    static final String DFA130_eofS =
        "\17\uffff";
    static final String DFA130_minS =
        "\1\14\16\uffff";
    static final String DFA130_maxS =
        "\1\u00a4\16\uffff";
    static final String DFA130_acceptS =
        "\1\uffff\1\2\14\uffff\1\1";
    static final String DFA130_specialS =
        "\17\uffff}>";
    static final String[] DFA130_transitionS = {
            "\3\1\10\uffff\1\1\10\uffff\1\1\21\uffff\1\1\13\uffff\1\16\6"+
            "\uffff\1\1\1\uffff\1\1\22\uffff\1\1\44\uffff\1\1\33\uffff\1"+
            "\1\3\uffff\1\1\4\uffff\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA130_eot = DFA.unpackEncodedString(DFA130_eotS);
    static final short[] DFA130_eof = DFA.unpackEncodedString(DFA130_eofS);
    static final char[] DFA130_min = DFA.unpackEncodedStringToUnsignedChars(DFA130_minS);
    static final char[] DFA130_max = DFA.unpackEncodedStringToUnsignedChars(DFA130_maxS);
    static final short[] DFA130_accept = DFA.unpackEncodedString(DFA130_acceptS);
    static final short[] DFA130_special = DFA.unpackEncodedString(DFA130_specialS);
    static final short[][] DFA130_transition;

    static {
        int numStates = DFA130_transitionS.length;
        DFA130_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA130_transition[i] = DFA.unpackEncodedString(DFA130_transitionS[i]);
        }
    }

    class DFA130 extends DFA {

        public DFA130(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 130;
            this.eot = DFA130_eot;
            this.eof = DFA130_eof;
            this.min = DFA130_min;
            this.max = DFA130_max;
            this.accept = DFA130_accept;
            this.special = DFA130_special;
            this.transition = DFA130_transition;
        }
        public String getDescription() {
            return "()* loopback of 1021:9: ( facility_declaration )*";
        }
    }
    static final String DFA131_eotS =
        "\16\uffff";
    static final String DFA131_eofS =
        "\16\uffff";
    static final String DFA131_minS =
        "\1\14\15\uffff";
    static final String DFA131_maxS =
        "\1\u00a4\15\uffff";
    static final String DFA131_acceptS =
        "\1\uffff\1\2\13\uffff\1\1";
    static final String DFA131_specialS =
        "\16\uffff}>";
    static final String[] DFA131_transitionS = {
            "\3\1\10\uffff\1\1\10\uffff\1\1\21\uffff\1\1\22\uffff\1\1\1\uffff"+
            "\1\1\22\uffff\1\1\44\uffff\1\1\33\uffff\1\15\3\uffff\1\1\4\uffff"+
            "\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA131_eot = DFA.unpackEncodedString(DFA131_eotS);
    static final short[] DFA131_eof = DFA.unpackEncodedString(DFA131_eofS);
    static final char[] DFA131_min = DFA.unpackEncodedStringToUnsignedChars(DFA131_minS);
    static final char[] DFA131_max = DFA.unpackEncodedStringToUnsignedChars(DFA131_maxS);
    static final short[] DFA131_accept = DFA.unpackEncodedString(DFA131_acceptS);
    static final short[] DFA131_special = DFA.unpackEncodedString(DFA131_specialS);
    static final short[][] DFA131_transition;

    static {
        int numStates = DFA131_transitionS.length;
        DFA131_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA131_transition[i] = DFA.unpackEncodedString(DFA131_transitionS[i]);
        }
    }

    class DFA131 extends DFA {

        public DFA131(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 131;
            this.eot = DFA131_eot;
            this.eof = DFA131_eof;
            this.min = DFA131_min;
            this.max = DFA131_max;
            this.accept = DFA131_accept;
            this.special = DFA131_special;
            this.transition = DFA131_transition;
        }
        public String getDescription() {
            return "()* loopback of 1022:9: ( variable_declaration )*";
        }
    }
    static final String DFA132_eotS =
        "\15\uffff";
    static final String DFA132_eofS =
        "\15\uffff";
    static final String DFA132_minS =
        "\1\14\14\uffff";
    static final String DFA132_maxS =
        "\1\u00a4\14\uffff";
    static final String DFA132_acceptS =
        "\1\uffff\1\2\12\uffff\1\1";
    static final String DFA132_specialS =
        "\15\uffff}>";
    static final String[] DFA132_transitionS = {
            "\2\1\1\14\10\uffff\1\1\10\uffff\1\1\21\uffff\1\1\22\uffff\1"+
            "\1\1\uffff\1\1\22\uffff\1\1\44\uffff\1\1\37\uffff\1\1\4\uffff"+
            "\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA132_eot = DFA.unpackEncodedString(DFA132_eotS);
    static final short[] DFA132_eof = DFA.unpackEncodedString(DFA132_eofS);
    static final char[] DFA132_min = DFA.unpackEncodedStringToUnsignedChars(DFA132_minS);
    static final char[] DFA132_max = DFA.unpackEncodedStringToUnsignedChars(DFA132_maxS);
    static final short[] DFA132_accept = DFA.unpackEncodedString(DFA132_acceptS);
    static final short[] DFA132_special = DFA.unpackEncodedString(DFA132_specialS);
    static final short[][] DFA132_transition;

    static {
        int numStates = DFA132_transitionS.length;
        DFA132_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA132_transition[i] = DFA.unpackEncodedString(DFA132_transitionS[i]);
        }
    }

    class DFA132 extends DFA {

        public DFA132(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 132;
            this.eot = DFA132_eot;
            this.eof = DFA132_eof;
            this.min = DFA132_min;
            this.max = DFA132_max;
            this.accept = DFA132_accept;
            this.special = DFA132_special;
            this.transition = DFA132_transition;
        }
        public String getDescription() {
            return "()* loopback of 1023:9: ( aux_variable_declaration )*";
        }
    }
    static final String DFA138_eotS =
        "\22\uffff";
    static final String DFA138_eofS =
        "\22\uffff";
    static final String DFA138_minS =
        "\1\26\21\uffff";
    static final String DFA138_maxS =
        "\1\u009b\21\uffff";
    static final String DFA138_acceptS =
        "\1\uffff\1\1\1\2\17\uffff";
    static final String DFA138_specialS =
        "\22\uffff}>";
    static final String[] DFA138_transitionS = {
            "\1\2\11\uffff\1\2\1\uffff\1\1\6\uffff\2\2\7\uffff\1\2\14\uffff"+
            "\4\2\6\uffff\1\2\1\uffff\1\2\1\uffff\1\2\32\uffff\1\2\52\uffff"+
            "\2\2\6\uffff\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA138_eot = DFA.unpackEncodedString(DFA138_eotS);
    static final short[] DFA138_eof = DFA.unpackEncodedString(DFA138_eofS);
    static final char[] DFA138_min = DFA.unpackEncodedStringToUnsignedChars(DFA138_minS);
    static final char[] DFA138_max = DFA.unpackEncodedStringToUnsignedChars(DFA138_maxS);
    static final short[] DFA138_accept = DFA.unpackEncodedString(DFA138_acceptS);
    static final short[] DFA138_special = DFA.unpackEncodedString(DFA138_specialS);
    static final short[][] DFA138_transition;

    static {
        int numStates = DFA138_transitionS.length;
        DFA138_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA138_transition[i] = DFA.unpackEncodedString(DFA138_transitionS[i]);
        }
    }

    class DFA138 extends DFA {

        public DFA138(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 138;
            this.eot = DFA138_eot;
            this.eof = DFA138_eof;
            this.min = DFA138_min;
            this.max = DFA138_max;
            this.accept = DFA138_accept;
            this.special = DFA138_special;
            this.transition = DFA138_transition;
        }
        public String getDescription() {
            return "1101:9: ( constraint_clause )?";
        }
    }
    static final String DFA142_eotS =
        "\22\uffff";
    static final String DFA142_eofS =
        "\22\uffff";
    static final String DFA142_minS =
        "\1\26\21\uffff";
    static final String DFA142_maxS =
        "\1\u009b\21\uffff";
    static final String DFA142_acceptS =
        "\1\uffff\1\1\1\2\17\uffff";
    static final String DFA142_specialS =
        "\22\uffff}>";
    static final String[] DFA142_transitionS = {
            "\1\2\11\uffff\1\2\1\uffff\1\1\6\uffff\2\2\7\uffff\1\2\14\uffff"+
            "\4\2\6\uffff\1\2\1\uffff\1\2\1\uffff\1\2\32\uffff\1\2\52\uffff"+
            "\2\2\6\uffff\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA142_eot = DFA.unpackEncodedString(DFA142_eotS);
    static final short[] DFA142_eof = DFA.unpackEncodedString(DFA142_eofS);
    static final char[] DFA142_min = DFA.unpackEncodedStringToUnsignedChars(DFA142_minS);
    static final char[] DFA142_max = DFA.unpackEncodedStringToUnsignedChars(DFA142_maxS);
    static final short[] DFA142_accept = DFA.unpackEncodedString(DFA142_acceptS);
    static final short[] DFA142_special = DFA.unpackEncodedString(DFA142_specialS);
    static final short[][] DFA142_transition;

    static {
        int numStates = DFA142_transitionS.length;
        DFA142_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA142_transition[i] = DFA.unpackEncodedString(DFA142_transitionS[i]);
        }
    }

    class DFA142 extends DFA {

        public DFA142(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 142;
            this.eot = DFA142_eot;
            this.eof = DFA142_eof;
            this.min = DFA142_min;
            this.max = DFA142_max;
            this.accept = DFA142_accept;
            this.special = DFA142_special;
            this.transition = DFA142_transition;
        }
        public String getDescription() {
            return "1112:9: ( constraint_clause )?";
        }
    }
    static final String DFA146_eotS =
        "\22\uffff";
    static final String DFA146_eofS =
        "\22\uffff";
    static final String DFA146_minS =
        "\1\26\21\uffff";
    static final String DFA146_maxS =
        "\1\u009b\21\uffff";
    static final String DFA146_acceptS =
        "\1\uffff\1\1\1\2\17\uffff";
    static final String DFA146_specialS =
        "\22\uffff}>";
    static final String[] DFA146_transitionS = {
            "\1\2\11\uffff\1\2\1\uffff\1\1\6\uffff\2\2\7\uffff\1\2\14\uffff"+
            "\4\2\6\uffff\1\2\1\uffff\1\2\1\uffff\1\2\32\uffff\1\2\52\uffff"+
            "\2\2\6\uffff\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA146_eot = DFA.unpackEncodedString(DFA146_eotS);
    static final short[] DFA146_eof = DFA.unpackEncodedString(DFA146_eofS);
    static final char[] DFA146_min = DFA.unpackEncodedStringToUnsignedChars(DFA146_minS);
    static final char[] DFA146_max = DFA.unpackEncodedStringToUnsignedChars(DFA146_maxS);
    static final short[] DFA146_accept = DFA.unpackEncodedString(DFA146_acceptS);
    static final short[] DFA146_special = DFA.unpackEncodedString(DFA146_specialS);
    static final short[][] DFA146_transition;

    static {
        int numStates = DFA146_transitionS.length;
        DFA146_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA146_transition[i] = DFA.unpackEncodedString(DFA146_transitionS[i]);
        }
    }

    class DFA146 extends DFA {

        public DFA146(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 146;
            this.eot = DFA146_eot;
            this.eof = DFA146_eof;
            this.min = DFA146_min;
            this.max = DFA146_max;
            this.accept = DFA146_accept;
            this.special = DFA146_special;
            this.transition = DFA146_transition;
        }
        public String getDescription() {
            return "1123:9: ( constraint_clause )?";
        }
    }
    static final String DFA151_eotS =
        "\22\uffff";
    static final String DFA151_eofS =
        "\22\uffff";
    static final String DFA151_minS =
        "\1\26\21\uffff";
    static final String DFA151_maxS =
        "\1\u009b\21\uffff";
    static final String DFA151_acceptS =
        "\1\uffff\1\1\1\2\17\uffff";
    static final String DFA151_specialS =
        "\22\uffff}>";
    static final String[] DFA151_transitionS = {
            "\1\2\11\uffff\1\2\1\uffff\1\1\6\uffff\2\2\7\uffff\1\2\16\uffff"+
            "\2\2\6\uffff\1\2\1\uffff\1\2\1\uffff\1\2\32\uffff\1\2\2\uffff"+
            "\2\2\46\uffff\2\2\6\uffff\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA151_eot = DFA.unpackEncodedString(DFA151_eotS);
    static final short[] DFA151_eof = DFA.unpackEncodedString(DFA151_eofS);
    static final char[] DFA151_min = DFA.unpackEncodedStringToUnsignedChars(DFA151_minS);
    static final char[] DFA151_max = DFA.unpackEncodedStringToUnsignedChars(DFA151_maxS);
    static final short[] DFA151_accept = DFA.unpackEncodedString(DFA151_acceptS);
    static final short[] DFA151_special = DFA.unpackEncodedString(DFA151_specialS);
    static final short[][] DFA151_transition;

    static {
        int numStates = DFA151_transitionS.length;
        DFA151_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA151_transition[i] = DFA.unpackEncodedString(DFA151_transitionS[i]);
        }
    }

    class DFA151 extends DFA {

        public DFA151(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 151;
            this.eot = DFA151_eot;
            this.eof = DFA151_eof;
            this.min = DFA151_min;
            this.max = DFA151_max;
            this.accept = DFA151_accept;
            this.special = DFA151_special;
            this.transition = DFA151_transition;
        }
        public String getDescription() {
            return "1132:9: ( constraint_clause )?";
        }
    }
    static final String DFA155_eotS =
        "\22\uffff";
    static final String DFA155_eofS =
        "\22\uffff";
    static final String DFA155_minS =
        "\1\26\21\uffff";
    static final String DFA155_maxS =
        "\1\u009b\21\uffff";
    static final String DFA155_acceptS =
        "\1\uffff\1\1\1\2\17\uffff";
    static final String DFA155_specialS =
        "\22\uffff}>";
    static final String[] DFA155_transitionS = {
            "\1\2\11\uffff\1\2\1\uffff\1\1\6\uffff\2\2\7\uffff\1\2\16\uffff"+
            "\2\2\6\uffff\1\2\1\uffff\1\2\1\uffff\1\2\32\uffff\1\2\2\uffff"+
            "\2\2\46\uffff\2\2\6\uffff\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA155_eot = DFA.unpackEncodedString(DFA155_eotS);
    static final short[] DFA155_eof = DFA.unpackEncodedString(DFA155_eofS);
    static final char[] DFA155_min = DFA.unpackEncodedStringToUnsignedChars(DFA155_minS);
    static final char[] DFA155_max = DFA.unpackEncodedStringToUnsignedChars(DFA155_maxS);
    static final short[] DFA155_accept = DFA.unpackEncodedString(DFA155_acceptS);
    static final short[] DFA155_special = DFA.unpackEncodedString(DFA155_specialS);
    static final short[][] DFA155_transition;

    static {
        int numStates = DFA155_transitionS.length;
        DFA155_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA155_transition[i] = DFA.unpackEncodedString(DFA155_transitionS[i]);
        }
    }

    class DFA155 extends DFA {

        public DFA155(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 155;
            this.eot = DFA155_eot;
            this.eof = DFA155_eof;
            this.min = DFA155_min;
            this.max = DFA155_max;
            this.accept = DFA155_accept;
            this.special = DFA155_special;
            this.transition = DFA155_transition;
        }
        public String getDescription() {
            return "1142:9: ( constraint_clause )?";
        }
    }
    static final String DFA159_eotS =
        "\22\uffff";
    static final String DFA159_eofS =
        "\22\uffff";
    static final String DFA159_minS =
        "\1\26\21\uffff";
    static final String DFA159_maxS =
        "\1\u009b\21\uffff";
    static final String DFA159_acceptS =
        "\1\uffff\1\1\1\2\17\uffff";
    static final String DFA159_specialS =
        "\22\uffff}>";
    static final String[] DFA159_transitionS = {
            "\1\2\11\uffff\1\2\1\uffff\1\1\6\uffff\2\2\7\uffff\1\2\16\uffff"+
            "\2\2\6\uffff\1\2\1\uffff\1\2\1\uffff\1\2\32\uffff\1\2\2\uffff"+
            "\2\2\46\uffff\2\2\6\uffff\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA159_eot = DFA.unpackEncodedString(DFA159_eotS);
    static final short[] DFA159_eof = DFA.unpackEncodedString(DFA159_eofS);
    static final char[] DFA159_min = DFA.unpackEncodedStringToUnsignedChars(DFA159_minS);
    static final char[] DFA159_max = DFA.unpackEncodedStringToUnsignedChars(DFA159_maxS);
    static final short[] DFA159_accept = DFA.unpackEncodedString(DFA159_acceptS);
    static final short[] DFA159_special = DFA.unpackEncodedString(DFA159_specialS);
    static final short[][] DFA159_transition;

    static {
        int numStates = DFA159_transitionS.length;
        DFA159_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA159_transition[i] = DFA.unpackEncodedString(DFA159_transitionS[i]);
        }
    }

    class DFA159 extends DFA {

        public DFA159(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 159;
            this.eot = DFA159_eot;
            this.eof = DFA159_eof;
            this.min = DFA159_min;
            this.max = DFA159_max;
            this.accept = DFA159_accept;
            this.special = DFA159_special;
            this.transition = DFA159_transition;
        }
        public String getDescription() {
            return "1152:9: ( constraint_clause )?";
        }
    }
    static final String DFA164_eotS =
        "\23\uffff";
    static final String DFA164_eofS =
        "\23\uffff";
    static final String DFA164_minS =
        "\1\20\22\uffff";
    static final String DFA164_maxS =
        "\1\u009b\22\uffff";
    static final String DFA164_acceptS =
        "\1\uffff\1\1\1\2\20\uffff";
    static final String DFA164_specialS =
        "\23\uffff}>";
    static final String[] DFA164_transitionS = {
            "\1\2\5\uffff\1\2\15\uffff\1\1\1\uffff\1\2\3\uffff\1\2\7\uffff"+
            "\1\2\13\uffff\3\2\1\uffff\1\2\6\uffff\1\2\1\uffff\1\2\1\uffff"+
            "\1\2\32\uffff\1\2\6\uffff\1\2\13\uffff\1\2\27\uffff\1\2\7\uffff"+
            "\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA164_eot = DFA.unpackEncodedString(DFA164_eotS);
    static final short[] DFA164_eof = DFA.unpackEncodedString(DFA164_eofS);
    static final char[] DFA164_min = DFA.unpackEncodedStringToUnsignedChars(DFA164_minS);
    static final char[] DFA164_max = DFA.unpackEncodedStringToUnsignedChars(DFA164_maxS);
    static final short[] DFA164_accept = DFA.unpackEncodedString(DFA164_acceptS);
    static final short[] DFA164_special = DFA.unpackEncodedString(DFA164_specialS);
    static final short[][] DFA164_transition;

    static {
        int numStates = DFA164_transitionS.length;
        DFA164_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA164_transition[i] = DFA.unpackEncodedString(DFA164_transitionS[i]);
        }
    }

    class DFA164 extends DFA {

        public DFA164(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 164;
            this.eot = DFA164_eot;
            this.eof = DFA164_eof;
            this.min = DFA164_min;
            this.max = DFA164_max;
            this.accept = DFA164_accept;
            this.special = DFA164_special;
            this.transition = DFA164_transition;
        }
        public String getDescription() {
            return "1160:9: ( convention_clause )?";
        }
    }
    static final String DFA165_eotS =
        "\23\uffff";
    static final String DFA165_eofS =
        "\23\uffff";
    static final String DFA165_minS =
        "\1\20\22\uffff";
    static final String DFA165_maxS =
        "\1\u009b\22\uffff";
    static final String DFA165_acceptS =
        "\1\uffff\1\1\1\2\20\uffff";
    static final String DFA165_specialS =
        "\23\uffff}>";
    static final String[] DFA165_transitionS = {
            "\1\2\5\uffff\1\2\15\uffff\1\2\1\uffff\1\1\3\uffff\1\2\7\uffff"+
            "\1\2\13\uffff\3\2\1\uffff\1\2\6\uffff\1\2\1\uffff\1\2\1\uffff"+
            "\1\2\32\uffff\1\2\6\uffff\1\2\13\uffff\1\2\27\uffff\1\2\7\uffff"+
            "\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA165_eot = DFA.unpackEncodedString(DFA165_eotS);
    static final short[] DFA165_eof = DFA.unpackEncodedString(DFA165_eofS);
    static final char[] DFA165_min = DFA.unpackEncodedStringToUnsignedChars(DFA165_minS);
    static final char[] DFA165_max = DFA.unpackEncodedStringToUnsignedChars(DFA165_maxS);
    static final short[] DFA165_accept = DFA.unpackEncodedString(DFA165_acceptS);
    static final short[] DFA165_special = DFA.unpackEncodedString(DFA165_specialS);
    static final short[][] DFA165_transition;

    static {
        int numStates = DFA165_transitionS.length;
        DFA165_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA165_transition[i] = DFA.unpackEncodedString(DFA165_transitionS[i]);
        }
    }

    class DFA165 extends DFA {

        public DFA165(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 165;
            this.eot = DFA165_eot;
            this.eof = DFA165_eof;
            this.min = DFA165_min;
            this.max = DFA165_max;
            this.accept = DFA165_accept;
            this.special = DFA165_special;
            this.transition = DFA165_transition;
        }
        public String getDescription() {
            return "1161:9: ( correspondence_clause )?";
        }
    }
    static final String DFA179_eotS =
        "\20\uffff";
    static final String DFA179_eofS =
        "\20\uffff";
    static final String DFA179_minS =
        "\1\10\17\uffff";
    static final String DFA179_maxS =
        "\1\u00a4\17\uffff";
    static final String DFA179_acceptS =
        "\1\uffff\1\2\15\uffff\1\1";
    static final String DFA179_specialS =
        "\20\uffff}>";
    static final String[] DFA179_transitionS = {
            "\1\17\3\uffff\3\1\10\uffff\1\1\1\uffff\1\17\6\uffff\1\1\21\uffff"+
            "\1\1\5\uffff\1\17\5\uffff\1\1\6\uffff\1\1\1\uffff\1\1\22\uffff"+
            "\1\1\23\uffff\1\17\12\uffff\1\17\5\uffff\1\1\1\uffff\1\17\3"+
            "\uffff\1\17\23\uffff\1\17\1\uffff\1\1\3\uffff\1\1\4\uffff\1"+
            "\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA179_eot = DFA.unpackEncodedString(DFA179_eotS);
    static final short[] DFA179_eof = DFA.unpackEncodedString(DFA179_eofS);
    static final char[] DFA179_min = DFA.unpackEncodedStringToUnsignedChars(DFA179_minS);
    static final char[] DFA179_max = DFA.unpackEncodedStringToUnsignedChars(DFA179_maxS);
    static final short[] DFA179_accept = DFA.unpackEncodedString(DFA179_acceptS);
    static final short[] DFA179_special = DFA.unpackEncodedString(DFA179_specialS);
    static final short[][] DFA179_transition;

    static {
        int numStates = DFA179_transitionS.length;
        DFA179_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA179_transition[i] = DFA.unpackEncodedString(DFA179_transitionS[i]);
        }
    }

    class DFA179 extends DFA {

        public DFA179(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 179;
            this.eot = DFA179_eot;
            this.eof = DFA179_eof;
            this.min = DFA179_min;
            this.max = DFA179_max;
            this.accept = DFA179_accept;
            this.special = DFA179_special;
            this.transition = DFA179_transition;
        }
        public String getDescription() {
            return "()* loopback of 1272:9: ( affects_clause )*";
        }
    }
    static final String DFA180_eotS =
        "\17\uffff";
    static final String DFA180_eofS =
        "\17\uffff";
    static final String DFA180_minS =
        "\1\14\16\uffff";
    static final String DFA180_maxS =
        "\1\u00a4\16\uffff";
    static final String DFA180_acceptS =
        "\1\uffff\1\2\14\uffff\1\1";
    static final String DFA180_specialS =
        "\17\uffff}>";
    static final String[] DFA180_transitionS = {
            "\3\1\10\uffff\1\1\10\uffff\1\1\21\uffff\1\1\13\uffff\1\16\6"+
            "\uffff\1\1\1\uffff\1\1\22\uffff\1\1\44\uffff\1\1\33\uffff\1"+
            "\1\3\uffff\1\1\4\uffff\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA180_eot = DFA.unpackEncodedString(DFA180_eotS);
    static final short[] DFA180_eof = DFA.unpackEncodedString(DFA180_eofS);
    static final char[] DFA180_min = DFA.unpackEncodedStringToUnsignedChars(DFA180_minS);
    static final char[] DFA180_max = DFA.unpackEncodedStringToUnsignedChars(DFA180_maxS);
    static final short[] DFA180_accept = DFA.unpackEncodedString(DFA180_acceptS);
    static final short[] DFA180_special = DFA.unpackEncodedString(DFA180_specialS);
    static final short[][] DFA180_transition;

    static {
        int numStates = DFA180_transitionS.length;
        DFA180_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA180_transition[i] = DFA.unpackEncodedString(DFA180_transitionS[i]);
        }
    }

    class DFA180 extends DFA {

        public DFA180(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 180;
            this.eot = DFA180_eot;
            this.eof = DFA180_eof;
            this.min = DFA180_min;
            this.max = DFA180_max;
            this.accept = DFA180_accept;
            this.special = DFA180_special;
            this.transition = DFA180_transition;
        }
        public String getDescription() {
            return "()* loopback of 1273:9: ( facility_declaration )*";
        }
    }
    static final String DFA181_eotS =
        "\16\uffff";
    static final String DFA181_eofS =
        "\16\uffff";
    static final String DFA181_minS =
        "\1\14\15\uffff";
    static final String DFA181_maxS =
        "\1\u00a4\15\uffff";
    static final String DFA181_acceptS =
        "\1\uffff\1\2\13\uffff\1\1";
    static final String DFA181_specialS =
        "\16\uffff}>";
    static final String[] DFA181_transitionS = {
            "\3\1\10\uffff\1\1\10\uffff\1\1\21\uffff\1\1\22\uffff\1\1\1\uffff"+
            "\1\1\22\uffff\1\1\44\uffff\1\1\33\uffff\1\15\3\uffff\1\1\4\uffff"+
            "\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA181_eot = DFA.unpackEncodedString(DFA181_eotS);
    static final short[] DFA181_eof = DFA.unpackEncodedString(DFA181_eofS);
    static final char[] DFA181_min = DFA.unpackEncodedStringToUnsignedChars(DFA181_minS);
    static final char[] DFA181_max = DFA.unpackEncodedStringToUnsignedChars(DFA181_maxS);
    static final short[] DFA181_accept = DFA.unpackEncodedString(DFA181_acceptS);
    static final short[] DFA181_special = DFA.unpackEncodedString(DFA181_specialS);
    static final short[][] DFA181_transition;

    static {
        int numStates = DFA181_transitionS.length;
        DFA181_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA181_transition[i] = DFA.unpackEncodedString(DFA181_transitionS[i]);
        }
    }

    class DFA181 extends DFA {

        public DFA181(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 181;
            this.eot = DFA181_eot;
            this.eof = DFA181_eof;
            this.min = DFA181_min;
            this.max = DFA181_max;
            this.accept = DFA181_accept;
            this.special = DFA181_special;
            this.transition = DFA181_transition;
        }
        public String getDescription() {
            return "()* loopback of 1274:9: ( variable_declaration )*";
        }
    }
    static final String DFA182_eotS =
        "\15\uffff";
    static final String DFA182_eofS =
        "\15\uffff";
    static final String DFA182_minS =
        "\1\14\14\uffff";
    static final String DFA182_maxS =
        "\1\u00a4\14\uffff";
    static final String DFA182_acceptS =
        "\1\uffff\1\2\12\uffff\1\1";
    static final String DFA182_specialS =
        "\15\uffff}>";
    static final String[] DFA182_transitionS = {
            "\2\1\1\14\10\uffff\1\1\10\uffff\1\1\21\uffff\1\1\22\uffff\1"+
            "\1\1\uffff\1\1\22\uffff\1\1\44\uffff\1\1\37\uffff\1\1\4\uffff"+
            "\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA182_eot = DFA.unpackEncodedString(DFA182_eotS);
    static final short[] DFA182_eof = DFA.unpackEncodedString(DFA182_eofS);
    static final char[] DFA182_min = DFA.unpackEncodedStringToUnsignedChars(DFA182_minS);
    static final char[] DFA182_max = DFA.unpackEncodedStringToUnsignedChars(DFA182_maxS);
    static final short[] DFA182_accept = DFA.unpackEncodedString(DFA182_acceptS);
    static final short[] DFA182_special = DFA.unpackEncodedString(DFA182_specialS);
    static final short[][] DFA182_transition;

    static {
        int numStates = DFA182_transitionS.length;
        DFA182_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA182_transition[i] = DFA.unpackEncodedString(DFA182_transitionS[i]);
        }
    }

    class DFA182 extends DFA {

        public DFA182(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 182;
            this.eot = DFA182_eot;
            this.eof = DFA182_eof;
            this.min = DFA182_min;
            this.max = DFA182_max;
            this.accept = DFA182_accept;
            this.special = DFA182_special;
            this.transition = DFA182_transition;
        }
        public String getDescription() {
            return "()* loopback of 1275:9: ( aux_variable_declaration )*";
        }
    }
    static final String DFA183_eotS =
        "\22\uffff";
    static final String DFA183_eofS =
        "\22\uffff";
    static final String DFA183_minS =
        "\1\10\21\uffff";
    static final String DFA183_maxS =
        "\1\u00a4\21\uffff";
    static final String DFA183_acceptS =
        "\1\uffff\1\2\17\uffff\1\1";
    static final String DFA183_specialS =
        "\22\uffff}>";
    static final String[] DFA183_transitionS = {
            "\1\21\3\uffff\3\1\10\uffff\1\1\1\uffff\1\21\6\uffff\1\1\21\uffff"+
            "\1\1\3\uffff\1\1\1\uffff\1\21\5\uffff\1\1\6\uffff\1\1\1\uffff"+
            "\1\1\22\uffff\1\1\23\uffff\1\21\12\uffff\1\21\5\uffff\1\1\1"+
            "\uffff\1\21\1\uffff\1\1\1\uffff\1\21\23\uffff\1\21\1\uffff\1"+
            "\1\3\uffff\1\1\4\uffff\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA183_eot = DFA.unpackEncodedString(DFA183_eotS);
    static final short[] DFA183_eof = DFA.unpackEncodedString(DFA183_eofS);
    static final char[] DFA183_min = DFA.unpackEncodedStringToUnsignedChars(DFA183_minS);
    static final char[] DFA183_max = DFA.unpackEncodedStringToUnsignedChars(DFA183_maxS);
    static final short[] DFA183_accept = DFA.unpackEncodedString(DFA183_acceptS);
    static final short[] DFA183_special = DFA.unpackEncodedString(DFA183_specialS);
    static final short[][] DFA183_transition;

    static {
        int numStates = DFA183_transitionS.length;
        DFA183_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA183_transition[i] = DFA.unpackEncodedString(DFA183_transitionS[i]);
        }
    }

    class DFA183 extends DFA {

        public DFA183(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 183;
            this.eot = DFA183_eot;
            this.eof = DFA183_eof;
            this.min = DFA183_min;
            this.max = DFA183_max;
            this.accept = DFA183_accept;
            this.special = DFA183_special;
            this.transition = DFA183_transition;
        }
        public String getDescription() {
            return "()* loopback of 1281:9: ( affects_clause )*";
        }
    }
    static final String DFA184_eotS =
        "\21\uffff";
    static final String DFA184_eofS =
        "\21\uffff";
    static final String DFA184_minS =
        "\1\14\20\uffff";
    static final String DFA184_maxS =
        "\1\u00a4\20\uffff";
    static final String DFA184_acceptS =
        "\1\uffff\1\1\1\2\16\uffff";
    static final String DFA184_specialS =
        "\21\uffff}>";
    static final String[] DFA184_transitionS = {
            "\3\2\10\uffff\1\2\10\uffff\1\2\21\uffff\1\2\3\uffff\1\2\7\uffff"+
            "\1\2\6\uffff\1\2\1\uffff\1\2\22\uffff\1\2\44\uffff\1\2\3\uffff"+
            "\1\1\27\uffff\1\2\3\uffff\1\2\4\uffff\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA184_eot = DFA.unpackEncodedString(DFA184_eotS);
    static final short[] DFA184_eof = DFA.unpackEncodedString(DFA184_eofS);
    static final char[] DFA184_min = DFA.unpackEncodedStringToUnsignedChars(DFA184_minS);
    static final char[] DFA184_max = DFA.unpackEncodedStringToUnsignedChars(DFA184_maxS);
    static final short[] DFA184_accept = DFA.unpackEncodedString(DFA184_acceptS);
    static final short[] DFA184_special = DFA.unpackEncodedString(DFA184_specialS);
    static final short[][] DFA184_transition;

    static {
        int numStates = DFA184_transitionS.length;
        DFA184_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA184_transition[i] = DFA.unpackEncodedString(DFA184_transitionS[i]);
        }
    }

    class DFA184 extends DFA {

        public DFA184(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 184;
            this.eot = DFA184_eot;
            this.eof = DFA184_eof;
            this.min = DFA184_min;
            this.max = DFA184_max;
            this.accept = DFA184_accept;
            this.special = DFA184_special;
            this.transition = DFA184_transition;
        }
        public String getDescription() {
            return "1282:9: ( requires_clause )?";
        }
    }
    static final String DFA185_eotS =
        "\20\uffff";
    static final String DFA185_eofS =
        "\20\uffff";
    static final String DFA185_minS =
        "\1\14\17\uffff";
    static final String DFA185_maxS =
        "\1\u00a4\17\uffff";
    static final String DFA185_acceptS =
        "\1\uffff\1\1\1\2\15\uffff";
    static final String DFA185_specialS =
        "\20\uffff}>";
    static final String[] DFA185_transitionS = {
            "\3\2\10\uffff\1\2\10\uffff\1\2\21\uffff\1\2\3\uffff\1\1\7\uffff"+
            "\1\2\6\uffff\1\2\1\uffff\1\2\22\uffff\1\2\44\uffff\1\2\33\uffff"+
            "\1\2\3\uffff\1\2\4\uffff\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA185_eot = DFA.unpackEncodedString(DFA185_eotS);
    static final short[] DFA185_eof = DFA.unpackEncodedString(DFA185_eofS);
    static final char[] DFA185_min = DFA.unpackEncodedStringToUnsignedChars(DFA185_minS);
    static final char[] DFA185_max = DFA.unpackEncodedStringToUnsignedChars(DFA185_maxS);
    static final short[] DFA185_accept = DFA.unpackEncodedString(DFA185_acceptS);
    static final short[] DFA185_special = DFA.unpackEncodedString(DFA185_specialS);
    static final short[][] DFA185_transition;

    static {
        int numStates = DFA185_transitionS.length;
        DFA185_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA185_transition[i] = DFA.unpackEncodedString(DFA185_transitionS[i]);
        }
    }

    class DFA185 extends DFA {

        public DFA185(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 185;
            this.eot = DFA185_eot;
            this.eof = DFA185_eof;
            this.min = DFA185_min;
            this.max = DFA185_max;
            this.accept = DFA185_accept;
            this.special = DFA185_special;
            this.transition = DFA185_transition;
        }
        public String getDescription() {
            return "1283:9: ( ensures_clause )?";
        }
    }
    static final String DFA186_eotS =
        "\17\uffff";
    static final String DFA186_eofS =
        "\17\uffff";
    static final String DFA186_minS =
        "\1\14\16\uffff";
    static final String DFA186_maxS =
        "\1\u00a4\16\uffff";
    static final String DFA186_acceptS =
        "\1\uffff\1\2\14\uffff\1\1";
    static final String DFA186_specialS =
        "\17\uffff}>";
    static final String[] DFA186_transitionS = {
            "\3\1\10\uffff\1\1\10\uffff\1\1\21\uffff\1\1\13\uffff\1\16\6"+
            "\uffff\1\1\1\uffff\1\1\22\uffff\1\1\44\uffff\1\1\33\uffff\1"+
            "\1\3\uffff\1\1\4\uffff\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA186_eot = DFA.unpackEncodedString(DFA186_eotS);
    static final short[] DFA186_eof = DFA.unpackEncodedString(DFA186_eofS);
    static final char[] DFA186_min = DFA.unpackEncodedStringToUnsignedChars(DFA186_minS);
    static final char[] DFA186_max = DFA.unpackEncodedStringToUnsignedChars(DFA186_maxS);
    static final short[] DFA186_accept = DFA.unpackEncodedString(DFA186_acceptS);
    static final short[] DFA186_special = DFA.unpackEncodedString(DFA186_specialS);
    static final short[][] DFA186_transition;

    static {
        int numStates = DFA186_transitionS.length;
        DFA186_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA186_transition[i] = DFA.unpackEncodedString(DFA186_transitionS[i]);
        }
    }

    class DFA186 extends DFA {

        public DFA186(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 186;
            this.eot = DFA186_eot;
            this.eof = DFA186_eof;
            this.min = DFA186_min;
            this.max = DFA186_max;
            this.accept = DFA186_accept;
            this.special = DFA186_special;
            this.transition = DFA186_transition;
        }
        public String getDescription() {
            return "()* loopback of 1284:9: ( facility_declaration )*";
        }
    }
    static final String DFA187_eotS =
        "\16\uffff";
    static final String DFA187_eofS =
        "\16\uffff";
    static final String DFA187_minS =
        "\1\14\15\uffff";
    static final String DFA187_maxS =
        "\1\u00a4\15\uffff";
    static final String DFA187_acceptS =
        "\1\uffff\1\2\13\uffff\1\1";
    static final String DFA187_specialS =
        "\16\uffff}>";
    static final String[] DFA187_transitionS = {
            "\3\1\10\uffff\1\1\10\uffff\1\1\21\uffff\1\1\22\uffff\1\1\1\uffff"+
            "\1\1\22\uffff\1\1\44\uffff\1\1\33\uffff\1\15\3\uffff\1\1\4\uffff"+
            "\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA187_eot = DFA.unpackEncodedString(DFA187_eotS);
    static final short[] DFA187_eof = DFA.unpackEncodedString(DFA187_eofS);
    static final char[] DFA187_min = DFA.unpackEncodedStringToUnsignedChars(DFA187_minS);
    static final char[] DFA187_max = DFA.unpackEncodedStringToUnsignedChars(DFA187_maxS);
    static final short[] DFA187_accept = DFA.unpackEncodedString(DFA187_acceptS);
    static final short[] DFA187_special = DFA.unpackEncodedString(DFA187_specialS);
    static final short[][] DFA187_transition;

    static {
        int numStates = DFA187_transitionS.length;
        DFA187_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA187_transition[i] = DFA.unpackEncodedString(DFA187_transitionS[i]);
        }
    }

    class DFA187 extends DFA {

        public DFA187(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 187;
            this.eot = DFA187_eot;
            this.eof = DFA187_eof;
            this.min = DFA187_min;
            this.max = DFA187_max;
            this.accept = DFA187_accept;
            this.special = DFA187_special;
            this.transition = DFA187_transition;
        }
        public String getDescription() {
            return "()* loopback of 1285:9: ( variable_declaration )*";
        }
    }
    static final String DFA188_eotS =
        "\15\uffff";
    static final String DFA188_eofS =
        "\15\uffff";
    static final String DFA188_minS =
        "\1\14\14\uffff";
    static final String DFA188_maxS =
        "\1\u00a4\14\uffff";
    static final String DFA188_acceptS =
        "\1\uffff\1\2\12\uffff\1\1";
    static final String DFA188_specialS =
        "\15\uffff}>";
    static final String[] DFA188_transitionS = {
            "\2\1\1\14\10\uffff\1\1\10\uffff\1\1\21\uffff\1\1\22\uffff\1"+
            "\1\1\uffff\1\1\22\uffff\1\1\44\uffff\1\1\37\uffff\1\1\4\uffff"+
            "\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA188_eot = DFA.unpackEncodedString(DFA188_eotS);
    static final short[] DFA188_eof = DFA.unpackEncodedString(DFA188_eofS);
    static final char[] DFA188_min = DFA.unpackEncodedStringToUnsignedChars(DFA188_minS);
    static final char[] DFA188_max = DFA.unpackEncodedStringToUnsignedChars(DFA188_maxS);
    static final short[] DFA188_accept = DFA.unpackEncodedString(DFA188_acceptS);
    static final short[] DFA188_special = DFA.unpackEncodedString(DFA188_specialS);
    static final short[][] DFA188_transition;

    static {
        int numStates = DFA188_transitionS.length;
        DFA188_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA188_transition[i] = DFA.unpackEncodedString(DFA188_transitionS[i]);
        }
    }

    class DFA188 extends DFA {

        public DFA188(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 188;
            this.eot = DFA188_eot;
            this.eof = DFA188_eof;
            this.min = DFA188_min;
            this.max = DFA188_max;
            this.accept = DFA188_accept;
            this.special = DFA188_special;
            this.transition = DFA188_transition;
        }
        public String getDescription() {
            return "()* loopback of 1286:9: ( aux_variable_declaration )*";
        }
    }
    static final String DFA189_eotS =
        "\16\uffff";
    static final String DFA189_eofS =
        "\16\uffff";
    static final String DFA189_minS =
        "\1\14\4\uffff\1\0\10\uffff";
    static final String DFA189_maxS =
        "\1\u00a4\4\uffff\1\0\10\uffff";
    static final String DFA189_acceptS =
        "\1\uffff\1\1\1\2\1\3\1\4\1\uffff\1\10\1\11\1\12\1\13\1\14\1\5\1"+
        "\6\1\7";
    static final String DFA189_specialS =
        "\5\uffff\1\0\10\uffff}>";
    static final String[] DFA189_transitionS = {
            "\1\11\1\12\11\uffff\1\2\10\uffff\1\10\44\uffff\1\7\1\uffff\1"+
            "\1\22\uffff\1\4\44\uffff\1\6\37\uffff\1\3\4\uffff\1\5",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA189_eot = DFA.unpackEncodedString(DFA189_eotS);
    static final short[] DFA189_eof = DFA.unpackEncodedString(DFA189_eofS);
    static final char[] DFA189_min = DFA.unpackEncodedStringToUnsignedChars(DFA189_minS);
    static final char[] DFA189_max = DFA.unpackEncodedStringToUnsignedChars(DFA189_maxS);
    static final short[] DFA189_accept = DFA.unpackEncodedString(DFA189_acceptS);
    static final short[] DFA189_special = DFA.unpackEncodedString(DFA189_specialS);
    static final short[][] DFA189_transition;

    static {
        int numStates = DFA189_transitionS.length;
        DFA189_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA189_transition[i] = DFA.unpackEncodedString(DFA189_transitionS[i]);
        }
    }

    class DFA189 extends DFA {

        public DFA189(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 189;
            this.eot = DFA189_eot;
            this.eof = DFA189_eof;
            this.min = DFA189_min;
            this.max = DFA189_max;
            this.accept = DFA189_accept;
            this.special = DFA189_special;
            this.transition = DFA189_transition;
        }
        public String getDescription() {
            return "1296:9: ( if_statement -> ^( STATEMENT if_statement ) | selection_statement -> ^( STATEMENT selection_statement ) | while_loop_statement -> ^( STATEMENT while_loop_statement ) | iterate_loop_statement -> ^( STATEMENT iterate_loop_statement ) | ( variable_expression SWAP_OP )=> swap_statement -> ^( STATEMENT swap_statement ) | ( variable_expression ASSIGN_OP )=> function_assignment -> ^( STATEMENT function_assignment ) | ( qualified_ident LPAREN )=> procedure_operation_call -> ^( STATEMENT procedure_operation_call ) | remember_statement -> ^( STATEMENT remember_statement ) | forget_statement -> ^( STATEMENT forget_statement ) | confirm_statement -> ^( STATEMENT confirm_statement ) | assume_statement -> ^( STATEMENT assume_statement ) | aux_code_statement -> ^( STATEMENT aux_code_statement ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA189_5 = input.LA(1);

                         
                        int index189_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_RParser()) ) {s = 11;}

                        else if ( (synpred8_RParser()) ) {s = 12;}

                        else if ( (synpred9_RParser()) ) {s = 13;}

                         
                        input.seek(index189_5);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 189, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA190_eotS =
        "\16\uffff";
    static final String DFA190_eofS =
        "\16\uffff";
    static final String DFA190_minS =
        "\1\14\4\uffff\1\0\10\uffff";
    static final String DFA190_maxS =
        "\1\u00a4\4\uffff\1\0\10\uffff";
    static final String DFA190_acceptS =
        "\1\uffff\1\1\1\2\1\3\1\4\1\uffff\1\10\1\11\1\12\1\13\1\14\1\5\1"+
        "\6\1\7";
    static final String DFA190_specialS =
        "\5\uffff\1\0\10\uffff}>";
    static final String[] DFA190_transitionS = {
            "\1\11\1\12\11\uffff\1\2\10\uffff\1\10\44\uffff\1\7\1\uffff\1"+
            "\1\22\uffff\1\4\44\uffff\1\6\37\uffff\1\3\4\uffff\1\5",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA190_eot = DFA.unpackEncodedString(DFA190_eotS);
    static final short[] DFA190_eof = DFA.unpackEncodedString(DFA190_eofS);
    static final char[] DFA190_min = DFA.unpackEncodedStringToUnsignedChars(DFA190_minS);
    static final char[] DFA190_max = DFA.unpackEncodedStringToUnsignedChars(DFA190_maxS);
    static final short[] DFA190_accept = DFA.unpackEncodedString(DFA190_acceptS);
    static final short[] DFA190_special = DFA.unpackEncodedString(DFA190_specialS);
    static final short[][] DFA190_transition;

    static {
        int numStates = DFA190_transitionS.length;
        DFA190_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA190_transition[i] = DFA.unpackEncodedString(DFA190_transitionS[i]);
        }
    }

    class DFA190 extends DFA {

        public DFA190(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 190;
            this.eot = DFA190_eot;
            this.eof = DFA190_eof;
            this.min = DFA190_min;
            this.max = DFA190_max;
            this.accept = DFA190_accept;
            this.special = DFA190_special;
            this.transition = DFA190_transition;
        }
        public String getDescription() {
            return "1312:9: ( if_statement -> ^( STATEMENT if_statement ) | selection_statement -> ^( STATEMENT selection_statement ) | while_loop_statement -> ^( STATEMENT while_loop_statement ) | iterate_loop_statement -> ^( STATEMENT iterate_loop_statement ) | ( variable_expression SWAP_OP )=> swap_statement -> ^( STATEMENT swap_statement ) | ( variable_expression ASSIGN_OP )=> function_assignment -> ^( STATEMENT function_assignment ) | ( qualified_ident LPAREN )=> procedure_operation_call -> ^( STATEMENT procedure_operation_call ) | remember_statement -> ^( STATEMENT remember_statement ) | forget_statement -> ^( STATEMENT forget_statement ) | confirm_statement -> ^( STATEMENT confirm_statement ) | assume_statement -> ^( STATEMENT assume_statement ) | aux_code_statement -> ^( STATEMENT aux_code_statement ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA190_5 = input.LA(1);

                         
                        int index190_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_RParser()) ) {s = 11;}

                        else if ( (synpred11_RParser()) ) {s = 12;}

                        else if ( (synpred12_RParser()) ) {s = 13;}

                         
                        input.seek(index190_5);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 190, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA191_eotS =
        "\21\uffff";
    static final String DFA191_eofS =
        "\21\uffff";
    static final String DFA191_minS =
        "\1\14\20\uffff";
    static final String DFA191_maxS =
        "\1\u011e\20\uffff";
    static final String DFA191_acceptS =
        "\1\uffff\1\2\5\uffff\1\1\11\uffff";
    static final String DFA191_specialS =
        "\21\uffff}>";
    static final String[] DFA191_transitionS = {
            "\2\7\11\uffff\1\7\10\uffff\1\7\17\uffff\1\1\1\uffff\1\1\12\uffff"+
            "\1\1\7\uffff\1\7\1\uffff\1\7\22\uffff\1\7\44\uffff\1\7\35\uffff"+
            "\1\1\1\uffff\1\7\4\uffff\1\7\170\uffff\2\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA191_eot = DFA.unpackEncodedString(DFA191_eotS);
    static final short[] DFA191_eof = DFA.unpackEncodedString(DFA191_eofS);
    static final char[] DFA191_min = DFA.unpackEncodedStringToUnsignedChars(DFA191_minS);
    static final char[] DFA191_max = DFA.unpackEncodedStringToUnsignedChars(DFA191_maxS);
    static final short[] DFA191_accept = DFA.unpackEncodedString(DFA191_acceptS);
    static final short[] DFA191_special = DFA.unpackEncodedString(DFA191_specialS);
    static final short[][] DFA191_transition;

    static {
        int numStates = DFA191_transitionS.length;
        DFA191_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA191_transition[i] = DFA.unpackEncodedString(DFA191_transitionS[i]);
        }
    }

    class DFA191 extends DFA {

        public DFA191(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 191;
            this.eot = DFA191_eot;
            this.eof = DFA191_eof;
            this.min = DFA191_min;
            this.max = DFA191_max;
            this.accept = DFA191_accept;
            this.special = DFA191_special;
            this.transition = DFA191_transition;
        }
        public String getDescription() {
            return "()* loopback of 1329:9: ( statement SEMICOLON )*";
        }
    }
    static final String DFA192_eotS =
        "\14\uffff";
    static final String DFA192_eofS =
        "\14\uffff";
    static final String DFA192_minS =
        "\1\14\13\uffff";
    static final String DFA192_maxS =
        "\1\u00a4\13\uffff";
    static final String DFA192_acceptS =
        "\1\uffff\1\2\1\1\11\uffff";
    static final String DFA192_specialS =
        "\14\uffff}>";
    static final String[] DFA192_transitionS = {
            "\2\2\11\uffff\1\2\10\uffff\1\2\21\uffff\1\1\22\uffff\1\2\1\uffff"+
            "\1\2\22\uffff\1\2\44\uffff\1\2\37\uffff\1\2\4\uffff\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA192_eot = DFA.unpackEncodedString(DFA192_eotS);
    static final short[] DFA192_eof = DFA.unpackEncodedString(DFA192_eofS);
    static final char[] DFA192_min = DFA.unpackEncodedStringToUnsignedChars(DFA192_minS);
    static final char[] DFA192_max = DFA.unpackEncodedStringToUnsignedChars(DFA192_maxS);
    static final short[] DFA192_accept = DFA.unpackEncodedString(DFA192_acceptS);
    static final short[] DFA192_special = DFA.unpackEncodedString(DFA192_specialS);
    static final short[][] DFA192_transition;

    static {
        int numStates = DFA192_transitionS.length;
        DFA192_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA192_transition[i] = DFA.unpackEncodedString(DFA192_transitionS[i]);
        }
    }

    class DFA192 extends DFA {

        public DFA192(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 192;
            this.eot = DFA192_eot;
            this.eof = DFA192_eof;
            this.min = DFA192_min;
            this.max = DFA192_max;
            this.accept = DFA192_accept;
            this.special = DFA192_special;
            this.transition = DFA192_transition;
        }
        public String getDescription() {
            return "()* loopback of 1333:9: ( in_aux_statement SEMICOLON )*";
        }
    }
    static final String DFA196_eotS =
        "\15\uffff";
    static final String DFA196_eofS =
        "\15\uffff";
    static final String DFA196_minS =
        "\1\14\14\uffff";
    static final String DFA196_maxS =
        "\1\u00a4\14\uffff";
    static final String DFA196_acceptS =
        "\1\uffff\1\1\1\2\12\uffff";
    static final String DFA196_specialS =
        "\15\uffff}>";
    static final String[] DFA196_transitionS = {
            "\2\2\11\uffff\1\2\10\uffff\1\2\6\uffff\1\1\35\uffff\1\2\1\uffff"+
            "\1\2\22\uffff\1\2\44\uffff\1\2\35\uffff\1\2\1\uffff\1\2\4\uffff"+
            "\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA196_eot = DFA.unpackEncodedString(DFA196_eotS);
    static final short[] DFA196_eof = DFA.unpackEncodedString(DFA196_eofS);
    static final char[] DFA196_min = DFA.unpackEncodedStringToUnsignedChars(DFA196_minS);
    static final char[] DFA196_max = DFA.unpackEncodedStringToUnsignedChars(DFA196_maxS);
    static final short[] DFA196_accept = DFA.unpackEncodedString(DFA196_acceptS);
    static final short[] DFA196_special = DFA.unpackEncodedString(DFA196_specialS);
    static final short[][] DFA196_transition;

    static {
        int numStates = DFA196_transitionS.length;
        DFA196_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA196_transition[i] = DFA.unpackEncodedString(DFA196_transitionS[i]);
        }
    }

    class DFA196 extends DFA {

        public DFA196(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 196;
            this.eot = DFA196_eot;
            this.eof = DFA196_eof;
            this.min = DFA196_min;
            this.max = DFA196_max;
            this.accept = DFA196_accept;
            this.special = DFA196_special;
            this.transition = DFA196_transition;
        }
        public String getDescription() {
            return "1387:9: ( decreasing_clause )?";
        }
    }
    static final String DFA197_eotS =
        "\15\uffff";
    static final String DFA197_eofS =
        "\15\uffff";
    static final String DFA197_minS =
        "\1\14\14\uffff";
    static final String DFA197_maxS =
        "\1\u00a4\14\uffff";
    static final String DFA197_acceptS =
        "\1\uffff\1\2\1\1\12\uffff";
    static final String DFA197_specialS =
        "\15\uffff}>";
    static final String[] DFA197_transitionS = {
            "\2\2\11\uffff\1\2\10\uffff\1\2\44\uffff\1\2\1\uffff\1\2\22\uffff"+
            "\1\2\44\uffff\1\2\1\1\34\uffff\1\2\1\uffff\1\2\4\uffff\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA197_eot = DFA.unpackEncodedString(DFA197_eotS);
    static final short[] DFA197_eof = DFA.unpackEncodedString(DFA197_eofS);
    static final char[] DFA197_min = DFA.unpackEncodedStringToUnsignedChars(DFA197_minS);
    static final char[] DFA197_max = DFA.unpackEncodedStringToUnsignedChars(DFA197_maxS);
    static final short[] DFA197_accept = DFA.unpackEncodedString(DFA197_acceptS);
    static final short[] DFA197_special = DFA.unpackEncodedString(DFA197_specialS);
    static final short[][] DFA197_transition;

    static {
        int numStates = DFA197_transitionS.length;
        DFA197_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA197_transition[i] = DFA.unpackEncodedString(DFA197_transitionS[i]);
        }
    }

    class DFA197 extends DFA {

        public DFA197(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 197;
            this.eot = DFA197_eot;
            this.eof = DFA197_eof;
            this.min = DFA197_min;
            this.max = DFA197_max;
            this.accept = DFA197_accept;
            this.special = DFA197_special;
            this.transition = DFA197_transition;
        }
        public String getDescription() {
            return "()+ loopback of 1392:9: ( iterate_item SEMICOLON )+";
        }
    }
    static final String DFA198_eotS =
        "\14\uffff";
    static final String DFA198_eofS =
        "\14\uffff";
    static final String DFA198_minS =
        "\1\14\13\uffff";
    static final String DFA198_maxS =
        "\1\u00a4\13\uffff";
    static final String DFA198_acceptS =
        "\1\uffff\1\1\11\uffff\1\2";
    static final String DFA198_specialS =
        "\14\uffff}>";
    static final String[] DFA198_transitionS = {
            "\2\1\11\uffff\1\1\10\uffff\1\1\44\uffff\1\1\1\uffff\1\1\22\uffff"+
            "\1\1\44\uffff\1\1\35\uffff\1\13\1\uffff\1\1\4\uffff\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA198_eot = DFA.unpackEncodedString(DFA198_eotS);
    static final short[] DFA198_eof = DFA.unpackEncodedString(DFA198_eofS);
    static final char[] DFA198_min = DFA.unpackEncodedStringToUnsignedChars(DFA198_minS);
    static final char[] DFA198_max = DFA.unpackEncodedStringToUnsignedChars(DFA198_maxS);
    static final short[] DFA198_accept = DFA.unpackEncodedString(DFA198_acceptS);
    static final short[] DFA198_special = DFA.unpackEncodedString(DFA198_specialS);
    static final short[][] DFA198_transition;

    static {
        int numStates = DFA198_transitionS.length;
        DFA198_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA198_transition[i] = DFA.unpackEncodedString(DFA198_transitionS[i]);
        }
    }

    class DFA198 extends DFA {

        public DFA198(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 198;
            this.eot = DFA198_eot;
            this.eof = DFA198_eof;
            this.min = DFA198_min;
            this.max = DFA198_max;
            this.accept = DFA198_accept;
            this.special = DFA198_special;
            this.transition = DFA198_transition;
        }
        public String getDescription() {
            return "1395:1: iterate_item : ( statement | iterate_exit_statement );";
        }
    }
    static final String DFA214_eotS =
        "\26\uffff";
    static final String DFA214_eofS =
        "\26\uffff";
    static final String DFA214_minS =
        "\1\22\1\0\24\uffff";
    static final String DFA214_maxS =
        "\1\u00d4\1\0\24\uffff";
    static final String DFA214_acceptS =
        "\2\uffff\1\2\22\uffff\1\1";
    static final String DFA214_specialS =
        "\1\uffff\1\0\24\uffff}>";
    static final String[] DFA214_transitionS = {
            "\1\2\2\uffff\1\2\7\uffff\1\2\46\uffff\1\2\2\uffff\1\2\23\uffff"+
            "\1\2\11\uffff\1\2\53\uffff\1\2\22\uffff\1\1\7\uffff\1\2\1\uffff"+
            "\1\2\1\uffff\1\2\1\uffff\1\2\1\uffff\1\2\3\uffff\1\2\2\uffff"+
            "\1\2\11\uffff\1\2\1\uffff\1\2\6\uffff\2\2\2\uffff\1\2\1\uffff"+
            "\1\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA214_eot = DFA.unpackEncodedString(DFA214_eotS);
    static final short[] DFA214_eof = DFA.unpackEncodedString(DFA214_eofS);
    static final char[] DFA214_min = DFA.unpackEncodedStringToUnsignedChars(DFA214_minS);
    static final char[] DFA214_max = DFA.unpackEncodedStringToUnsignedChars(DFA214_maxS);
    static final short[] DFA214_accept = DFA.unpackEncodedString(DFA214_acceptS);
    static final short[] DFA214_special = DFA.unpackEncodedString(DFA214_specialS);
    static final short[][] DFA214_transition;

    static {
        int numStates = DFA214_transitionS.length;
        DFA214_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA214_transition[i] = DFA.unpackEncodedString(DFA214_transitionS[i]);
        }
    }

    class DFA214 extends DFA {

        public DFA214(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 214;
            this.eot = DFA214_eot;
            this.eof = DFA214_eof;
            this.min = DFA214_min;
            this.max = DFA214_max;
            this.accept = DFA214_accept;
            this.special = DFA214_special;
            this.transition = DFA214_transition;
        }
        public String getDescription() {
            return "1629:9: ( ( ( ident ident COLON )=> iterated_construct ) -> ^( EXPR iterated_construct ) | quantified_expression -> ^( EXPR quantified_expression ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA214_1 = input.LA(1);

                         
                        int index214_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred13_RParser()) ) {s = 21;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index214_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 214, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA220_eotS =
        "\27\uffff";
    static final String DFA220_eofS =
        "\27\uffff";
    static final String DFA220_minS =
        "\1\22\23\uffff\1\0\2\uffff";
    static final String DFA220_maxS =
        "\1\u00d4\23\uffff\1\0\2\uffff";
    static final String DFA220_acceptS =
        "\1\uffff\1\1\21\uffff\1\2\1\uffff\1\3\1\4";
    static final String DFA220_specialS =
        "\24\uffff\1\0\2\uffff}>";
    static final String[] DFA220_transitionS = {
            "\1\1\2\uffff\1\1\7\uffff\1\1\46\uffff\1\23\2\uffff\1\1\23\uffff"+
            "\1\1\11\uffff\1\1\53\uffff\1\24\22\uffff\1\1\7\uffff\1\1\1\uffff"+
            "\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\1\1\3\uffff\1\1\2\uffff"+
            "\1\1\11\uffff\1\1\1\uffff\1\1\6\uffff\2\1\2\uffff\1\1\1\uffff"+
            "\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            ""
    };

    static final short[] DFA220_eot = DFA.unpackEncodedString(DFA220_eotS);
    static final short[] DFA220_eof = DFA.unpackEncodedString(DFA220_eofS);
    static final char[] DFA220_min = DFA.unpackEncodedStringToUnsignedChars(DFA220_minS);
    static final char[] DFA220_max = DFA.unpackEncodedStringToUnsignedChars(DFA220_maxS);
    static final short[] DFA220_accept = DFA.unpackEncodedString(DFA220_acceptS);
    static final short[] DFA220_special = DFA.unpackEncodedString(DFA220_specialS);
    static final short[][] DFA220_transition;

    static {
        int numStates = DFA220_transitionS.length;
        DFA220_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA220_transition[i] = DFA.unpackEncodedString(DFA220_transitionS[i]);
        }
    }

    class DFA220 extends DFA {

        public DFA220(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 220;
            this.eot = DFA220_eot;
            this.eof = DFA220_eof;
            this.min = DFA220_min;
            this.max = DFA220_max;
            this.accept = DFA220_accept;
            this.special = DFA220_special;
            this.transition = DFA220_transition;
        }
        public String getDescription() {
            return "1638:1: quantified_expression : ( implies_expression | FOR ALL math_variable_declaration_group ( where_clause )? COMMA quantified_expression -> ^( FORALL math_variable_declaration_group ( where_clause )? quantified_expression ) | ( THERE EXISTS UNIQUE )=> THERE EXISTS UNIQUE math_variable_declaration_group ( where_clause )? ( ( SUCH THAT ) | COMMA ) quantified_expression -> ^( EXISTS_UNIQUE math_variable_declaration_group ( where_clause )? quantified_expression ) | THERE EXISTS math_variable_declaration_group ( where_clause )? ( ( SUCH THAT ) | COMMA ) quantified_expression );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA220_20 = input.LA(1);

                         
                        int index220_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred14_RParser()) ) {s = 21;}

                        else if ( (true) ) {s = 22;}

                         
                        input.seek(index220_20);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 220, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA223_eotS =
        "\23\uffff";
    static final String DFA223_eofS =
        "\23\uffff";
    static final String DFA223_minS =
        "\1\22\22\uffff";
    static final String DFA223_maxS =
        "\1\u00d4\22\uffff";
    static final String DFA223_acceptS =
        "\1\uffff\1\1\20\uffff\1\2";
    static final String DFA223_specialS =
        "\23\uffff}>";
    static final String[] DFA223_transitionS = {
            "\1\1\2\uffff\1\1\7\uffff\1\1\51\uffff\1\22\23\uffff\1\1\11\uffff"+
            "\1\1\76\uffff\1\1\7\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff"+
            "\1\1\1\uffff\1\1\3\uffff\1\1\2\uffff\1\1\11\uffff\1\1\1\uffff"+
            "\1\1\6\uffff\2\1\2\uffff\1\1\1\uffff\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA223_eot = DFA.unpackEncodedString(DFA223_eotS);
    static final short[] DFA223_eof = DFA.unpackEncodedString(DFA223_eofS);
    static final char[] DFA223_min = DFA.unpackEncodedStringToUnsignedChars(DFA223_minS);
    static final char[] DFA223_max = DFA.unpackEncodedStringToUnsignedChars(DFA223_maxS);
    static final short[] DFA223_accept = DFA.unpackEncodedString(DFA223_acceptS);
    static final short[] DFA223_special = DFA.unpackEncodedString(DFA223_specialS);
    static final short[][] DFA223_transition;

    static {
        int numStates = DFA223_transitionS.length;
        DFA223_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA223_transition[i] = DFA.unpackEncodedString(DFA223_transitionS[i]);
        }
    }

    class DFA223 extends DFA {

        public DFA223(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 223;
            this.eot = DFA223_eot;
            this.eof = DFA223_eof;
            this.min = DFA223_min;
            this.max = DFA223_max;
            this.accept = DFA223_accept;
            this.special = DFA223_special;
            this.transition = DFA223_transition;
        }
        public String getDescription() {
            return "1653:9: ( logical_expression ( IMPLIES logical_expression | IFF logical_expression )? | IF logical_expression THEN logical_expression ( ELSE logical_expression )? )";
        }
    }
    static final String DFA228_eotS =
        "\24\uffff";
    static final String DFA228_eofS =
        "\24\uffff";
    static final String DFA228_minS =
        "\1\22\21\0\2\uffff";
    static final String DFA228_maxS =
        "\1\u00d4\21\0\2\uffff";
    static final String DFA228_acceptS =
        "\22\uffff\1\1\1\2";
    static final String DFA228_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14"+
        "\1\15\1\16\1\17\1\20\2\uffff}>";
    static final String[] DFA228_transitionS = {
            "\1\21\2\uffff\1\14\7\uffff\1\16\75\uffff\1\4\11\uffff\1\15\76"+
            "\uffff\1\2\7\uffff\1\5\1\uffff\1\5\1\uffff\1\13\1\uffff\1\12"+
            "\1\uffff\1\1\3\uffff\1\3\2\uffff\1\17\11\uffff\1\6\1\uffff\1"+
            "\7\6\uffff\1\10\1\11\2\uffff\1\5\1\uffff\1\20",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            ""
    };

    static final short[] DFA228_eot = DFA.unpackEncodedString(DFA228_eotS);
    static final short[] DFA228_eof = DFA.unpackEncodedString(DFA228_eofS);
    static final char[] DFA228_min = DFA.unpackEncodedStringToUnsignedChars(DFA228_minS);
    static final char[] DFA228_max = DFA.unpackEncodedStringToUnsignedChars(DFA228_maxS);
    static final short[] DFA228_accept = DFA.unpackEncodedString(DFA228_acceptS);
    static final short[] DFA228_special = DFA.unpackEncodedString(DFA228_specialS);
    static final short[][] DFA228_transition;

    static {
        int numStates = DFA228_transitionS.length;
        DFA228_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA228_transition[i] = DFA.unpackEncodedString(DFA228_transitionS[i]);
        }
    }

    class DFA228 extends DFA {

        public DFA228(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 228;
            this.eot = DFA228_eot;
            this.eof = DFA228_eof;
            this.min = DFA228_min;
            this.max = DFA228_max;
            this.accept = DFA228_accept;
            this.special = DFA228_special;
            this.transition = DFA228_transition;
        }
        public String getDescription() {
            return "1681:1: relational_expression : ( ( infix_expression ( LT | LT_EQL ) infix_expression ( LT | LT_EQL ) )=> between_expression | infix_expression ( ( EQL | NOT_EQL | LT | LT_EQL | GT | GT_EQL | IN | NOT_IN | SUBSET | NOT_SUBSET | PROP_SUBSET | NOT_PROP_SUBSET | SUBSTR | NOT_SUBSTR | PROP_SUBSTR | NOT_PROP_SUBSTR ) infix_expression )? );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA228_1 = input.LA(1);

                         
                        int index228_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred15_RParser()) ) {s = 18;}

                        else if ( (true) ) {s = 19;}

                         
                        input.seek(index228_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA228_2 = input.LA(1);

                         
                        int index228_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred15_RParser()) ) {s = 18;}

                        else if ( (true) ) {s = 19;}

                         
                        input.seek(index228_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA228_3 = input.LA(1);

                         
                        int index228_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred15_RParser()) ) {s = 18;}

                        else if ( (true) ) {s = 19;}

                         
                        input.seek(index228_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA228_4 = input.LA(1);

                         
                        int index228_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred15_RParser()) ) {s = 18;}

                        else if ( (true) ) {s = 19;}

                         
                        input.seek(index228_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA228_5 = input.LA(1);

                         
                        int index228_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred15_RParser()) ) {s = 18;}

                        else if ( (true) ) {s = 19;}

                         
                        input.seek(index228_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA228_6 = input.LA(1);

                         
                        int index228_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred15_RParser()) ) {s = 18;}

                        else if ( (true) ) {s = 19;}

                         
                        input.seek(index228_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA228_7 = input.LA(1);

                         
                        int index228_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred15_RParser()) ) {s = 18;}

                        else if ( (true) ) {s = 19;}

                         
                        input.seek(index228_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA228_8 = input.LA(1);

                         
                        int index228_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred15_RParser()) ) {s = 18;}

                        else if ( (true) ) {s = 19;}

                         
                        input.seek(index228_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA228_9 = input.LA(1);

                         
                        int index228_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred15_RParser()) ) {s = 18;}

                        else if ( (true) ) {s = 19;}

                         
                        input.seek(index228_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA228_10 = input.LA(1);

                         
                        int index228_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred15_RParser()) ) {s = 18;}

                        else if ( (true) ) {s = 19;}

                         
                        input.seek(index228_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA228_11 = input.LA(1);

                         
                        int index228_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred15_RParser()) ) {s = 18;}

                        else if ( (true) ) {s = 19;}

                         
                        input.seek(index228_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA228_12 = input.LA(1);

                         
                        int index228_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred15_RParser()) ) {s = 18;}

                        else if ( (true) ) {s = 19;}

                         
                        input.seek(index228_12);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA228_13 = input.LA(1);

                         
                        int index228_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred15_RParser()) ) {s = 18;}

                        else if ( (true) ) {s = 19;}

                         
                        input.seek(index228_13);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA228_14 = input.LA(1);

                         
                        int index228_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred15_RParser()) ) {s = 18;}

                        else if ( (true) ) {s = 19;}

                         
                        input.seek(index228_14);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA228_15 = input.LA(1);

                         
                        int index228_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred15_RParser()) ) {s = 18;}

                        else if ( (true) ) {s = 19;}

                         
                        input.seek(index228_15);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA228_16 = input.LA(1);

                         
                        int index228_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred15_RParser()) ) {s = 18;}

                        else if ( (true) ) {s = 19;}

                         
                        input.seek(index228_16);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA228_17 = input.LA(1);

                         
                        int index228_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred15_RParser()) ) {s = 18;}

                        else if ( (true) ) {s = 19;}

                         
                        input.seek(index228_17);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 228, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA226_eotS =
        "\21\uffff";
    static final String DFA226_eofS =
        "\21\uffff";
    static final String DFA226_minS =
        "\1\122\20\uffff";
    static final String DFA226_maxS =
        "\1\u0120\20\uffff";
    static final String DFA226_acceptS =
        "\1\uffff\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1"+
        "\15\1\16\1\17\1\20";
    static final String DFA226_specialS =
        "\21\uffff}>";
    static final String[] DFA226_transitionS = {
            "\1\7\1\10\1\14\1\12\1\16\1\13\1\11\1\15\147\uffff\1\2\1\6\1"+
            "\4\1\1\1\3\1\5\130\uffff\1\17\1\20",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA226_eot = DFA.unpackEncodedString(DFA226_eotS);
    static final short[] DFA226_eof = DFA.unpackEncodedString(DFA226_eofS);
    static final char[] DFA226_min = DFA.unpackEncodedStringToUnsignedChars(DFA226_minS);
    static final char[] DFA226_max = DFA.unpackEncodedStringToUnsignedChars(DFA226_maxS);
    static final short[] DFA226_accept = DFA.unpackEncodedString(DFA226_acceptS);
    static final short[] DFA226_special = DFA.unpackEncodedString(DFA226_specialS);
    static final short[][] DFA226_transition;

    static {
        int numStates = DFA226_transitionS.length;
        DFA226_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA226_transition[i] = DFA.unpackEncodedString(DFA226_transitionS[i]);
        }
    }

    class DFA226 extends DFA {

        public DFA226(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 226;
            this.eot = DFA226_eot;
            this.eof = DFA226_eof;
            this.min = DFA226_min;
            this.max = DFA226_max;
            this.accept = DFA226_accept;
            this.special = DFA226_special;
            this.transition = DFA226_transition;
        }
        public String getDescription() {
            return "1686:13: ( EQL | NOT_EQL | LT | LT_EQL | GT | GT_EQL | IN | NOT_IN | SUBSET | NOT_SUBSET | PROP_SUBSET | NOT_PROP_SUBSET | SUBSTR | NOT_SUBSTR | PROP_SUBSTR | NOT_PROP_SUBSTR )";
        }
    }
    static final String DFA233_eotS =
        "\22\uffff";
    static final String DFA233_eofS =
        "\22\uffff";
    static final String DFA233_minS =
        "\1\22\21\uffff";
    static final String DFA233_maxS =
        "\1\u00d4\21\uffff";
    static final String DFA233_acceptS =
        "\1\uffff\1\1\17\uffff\1\2";
    static final String DFA233_specialS =
        "\22\uffff}>";
    static final String[] DFA233_transitionS = {
            "\1\21\2\uffff\1\1\7\uffff\1\1\75\uffff\1\1\11\uffff\1\1\76\uffff"+
            "\1\1\7\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff"+
            "\1\1\3\uffff\1\1\2\uffff\1\1\11\uffff\1\1\1\uffff\1\1\6\uffff"+
            "\2\1\2\uffff\1\1\1\uffff\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA233_eot = DFA.unpackEncodedString(DFA233_eotS);
    static final short[] DFA233_eof = DFA.unpackEncodedString(DFA233_eofS);
    static final char[] DFA233_min = DFA.unpackEncodedStringToUnsignedChars(DFA233_minS);
    static final char[] DFA233_max = DFA.unpackEncodedStringToUnsignedChars(DFA233_maxS);
    static final short[] DFA233_accept = DFA.unpackEncodedString(DFA233_acceptS);
    static final short[] DFA233_special = DFA.unpackEncodedString(DFA233_specialS);
    static final short[][] DFA233_transition;

    static {
        int numStates = DFA233_transitionS.length;
        DFA233_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA233_transition[i] = DFA.unpackEncodedString(DFA233_transitionS[i]);
        }
    }

    class DFA233 extends DFA {

        public DFA233(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 233;
            this.eot = DFA233_eot;
            this.eof = DFA233_eof;
            this.min = DFA233_min;
            this.max = DFA233_max;
            this.accept = DFA233_accept;
            this.special = DFA233_special;
            this.transition = DFA233_transition;
        }
        public String getDescription() {
            return "1720:1: infix_expression returns [ColsAST ast = null] : ( ( function_type_expression ( ( RANGE | FREE_OPERATOR ) function_type_expression )? ) | BOOLEAN );";
        }
    }
    static final String DFA240_eotS =
        "\21\uffff";
    static final String DFA240_eofS =
        "\21\uffff";
    static final String DFA240_minS =
        "\1\25\20\uffff";
    static final String DFA240_maxS =
        "\1\u00d4\20\uffff";
    static final String DFA240_acceptS =
        "\1\uffff\1\1\16\uffff\1\2";
    static final String DFA240_specialS =
        "\21\uffff}>";
    static final String[] DFA240_transitionS = {
            "\1\1\7\uffff\1\1\75\uffff\1\1\11\uffff\1\1\76\uffff\1\1\7\uffff"+
            "\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\1\1\3\uffff"+
            "\1\1\2\uffff\1\1\11\uffff\1\1\1\uffff\1\1\6\uffff\2\1\2\uffff"+
            "\1\1\1\uffff\1\20",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA240_eot = DFA.unpackEncodedString(DFA240_eotS);
    static final short[] DFA240_eof = DFA.unpackEncodedString(DFA240_eofS);
    static final char[] DFA240_min = DFA.unpackEncodedStringToUnsignedChars(DFA240_minS);
    static final char[] DFA240_max = DFA.unpackEncodedStringToUnsignedChars(DFA240_maxS);
    static final short[] DFA240_accept = DFA.unpackEncodedString(DFA240_acceptS);
    static final short[] DFA240_special = DFA.unpackEncodedString(DFA240_specialS);
    static final short[][] DFA240_transition;

    static {
        int numStates = DFA240_transitionS.length;
        DFA240_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA240_transition[i] = DFA.unpackEncodedString(DFA240_transitionS[i]);
        }
    }

    class DFA240 extends DFA {

        public DFA240(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 240;
            this.eot = DFA240_eot;
            this.eof = DFA240_eof;
            this.min = DFA240_min;
            this.max = DFA240_max;
            this.accept = DFA240_accept;
            this.special = DFA240_special;
            this.transition = DFA240_transition;
        }
        public String getDescription() {
            return "1766:1: prefix_expression : ( unary_expression | FREE_OPERATOR prefix_expression );";
        }
    }
    static final String DFA241_eotS =
        "\20\uffff";
    static final String DFA241_eofS =
        "\20\uffff";
    static final String DFA241_minS =
        "\1\25\17\uffff";
    static final String DFA241_maxS =
        "\1\u00d2\17\uffff";
    static final String DFA241_acceptS =
        "\1\uffff\1\1\13\uffff\1\2\1\3\1\4";
    static final String DFA241_specialS =
        "\20\uffff}>";
    static final String[] DFA241_transitionS = {
            "\1\1\7\uffff\1\16\75\uffff\1\1\11\uffff\1\15\76\uffff\1\1\7"+
            "\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\1\1\3"+
            "\uffff\1\1\2\uffff\1\17\11\uffff\1\1\1\uffff\1\1\6\uffff\2\1"+
            "\2\uffff\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA241_eot = DFA.unpackEncodedString(DFA241_eotS);
    static final short[] DFA241_eof = DFA.unpackEncodedString(DFA241_eofS);
    static final char[] DFA241_min = DFA.unpackEncodedStringToUnsignedChars(DFA241_minS);
    static final char[] DFA241_max = DFA.unpackEncodedStringToUnsignedChars(DFA241_maxS);
    static final short[] DFA241_accept = DFA.unpackEncodedString(DFA241_acceptS);
    static final short[] DFA241_special = DFA.unpackEncodedString(DFA241_specialS);
    static final short[][] DFA241_transition;

    static {
        int numStates = DFA241_transitionS.length;
        DFA241_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA241_transition[i] = DFA.unpackEncodedString(DFA241_transitionS[i]);
        }
    }

    class DFA241 extends DFA {

        public DFA241(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 241;
            this.eot = DFA241_eot;
            this.eof = DFA241_eof;
            this.min = DFA241_min;
            this.max = DFA241_max;
            this.accept = DFA241_accept;
            this.special = DFA241_special;
            this.transition = DFA241_transition;
        }
        public String getDescription() {
            return "1772:1: unary_expression : ( primitive_expression | NOT unary_expression | COMPLEMENT unary_expression | MINUS unary_expression );";
        }
    }
    static final String DFA242_eotS =
        "\21\uffff";
    static final String DFA242_eofS =
        "\21\uffff";
    static final String DFA242_minS =
        "\1\25\1\uffff\1\0\10\uffff\1\0\5\uffff";
    static final String DFA242_maxS =
        "\1\u00d2\1\uffff\1\0\10\uffff\1\0\5\uffff";
    static final String DFA242_acceptS =
        "\1\uffff\1\1\1\uffff\1\4\1\5\1\6\1\7\3\uffff\1\10\1\uffff\1\12\1"+
        "\2\1\3\1\11\1\13";
    static final String DFA242_specialS =
        "\2\uffff\1\0\10\uffff\1\1\5\uffff}>";
    static final String[] DFA242_transitionS = {
            "\1\14\105\uffff\1\4\110\uffff\1\2\7\uffff\1\5\1\uffff\1\5\1"+
            "\uffff\1\13\1\uffff\1\12\1\uffff\1\1\3\uffff\1\3\14\uffff\1"+
            "\6\1\uffff\1\6\6\uffff\2\6\2\uffff\1\5",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA242_eot = DFA.unpackEncodedString(DFA242_eotS);
    static final short[] DFA242_eof = DFA.unpackEncodedString(DFA242_eofS);
    static final char[] DFA242_min = DFA.unpackEncodedStringToUnsignedChars(DFA242_minS);
    static final char[] DFA242_max = DFA.unpackEncodedStringToUnsignedChars(DFA242_maxS);
    static final short[] DFA242_accept = DFA.unpackEncodedString(DFA242_acceptS);
    static final short[] DFA242_special = DFA.unpackEncodedString(DFA242_specialS);
    static final short[][] DFA242_transition;

    static {
        int numStates = DFA242_transitionS.length;
        DFA242_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA242_transition[i] = DFA.unpackEncodedString(DFA242_transitionS[i]);
        }
    }

    class DFA242 extends DFA {

        public DFA242(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 242;
            this.eot = DFA242_eot;
            this.eof = DFA242_eof;
            this.min = DFA242_min;
            this.max = DFA242_max;
            this.accept = DFA242_accept;
            this.special = DFA242_special;
            this.transition = DFA242_transition;
        }
        public String getDescription() {
            return "1779:1: primitive_expression : ( alternative_expression | ( ident ident COLON )=> iterated_construct | ( ident DOT NUMERIC_LITERAL )=> qualified_numeric_literal | dot_expression | lambda_expression | literal_expression | outfix_expression | set_constructor | ( LPAREN math_expression COMMA )=> tuple_expression | tagged_cartesian_product_type_expression | nested_expression );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA242_2 = input.LA(1);

                         
                        int index242_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred16_RParser()) ) {s = 13;}

                        else if ( (synpred17_RParser()) ) {s = 14;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index242_2);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA242_11 = input.LA(1);

                         
                        int index242_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred18_RParser()) ) {s = 15;}

                        else if ( (true) ) {s = 16;}

                         
                        input.seek(index242_11);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 242, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA252_eotS =
        "\22\uffff";
    static final String DFA252_eofS =
        "\22\uffff";
    static final String DFA252_minS =
        "\1\25\21\uffff";
    static final String DFA252_maxS =
        "\1\u00d4\21\uffff";
    static final String DFA252_acceptS =
        "\1\uffff\1\2\1\1\17\uffff";
    static final String DFA252_specialS =
        "\22\uffff}>";
    static final String[] DFA252_transitionS = {
            "\1\2\7\uffff\1\2\75\uffff\1\2\11\uffff\1\2\76\uffff\1\2\7\uffff"+
            "\1\2\1\uffff\1\2\1\uffff\1\2\1\uffff\1\2\1\uffff\1\2\1\1\2\uffff"+
            "\1\2\2\uffff\1\2\11\uffff\1\2\1\uffff\1\2\6\uffff\2\2\2\uffff"+
            "\1\2\1\uffff\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA252_eot = DFA.unpackEncodedString(DFA252_eotS);
    static final short[] DFA252_eof = DFA.unpackEncodedString(DFA252_eofS);
    static final char[] DFA252_min = DFA.unpackEncodedStringToUnsignedChars(DFA252_minS);
    static final char[] DFA252_max = DFA.unpackEncodedStringToUnsignedChars(DFA252_maxS);
    static final short[] DFA252_accept = DFA.unpackEncodedString(DFA252_acceptS);
    static final short[] DFA252_special = DFA.unpackEncodedString(DFA252_specialS);
    static final short[][] DFA252_transition;

    static {
        int numStates = DFA252_transitionS.length;
        DFA252_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA252_transition[i] = DFA.unpackEncodedString(DFA252_transitionS[i]);
        }
    }

    class DFA252 extends DFA {

        public DFA252(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 252;
            this.eot = DFA252_eot;
            this.eof = DFA252_eof;
            this.min = DFA252_min;
            this.max = DFA252_max;
            this.accept = DFA252_accept;
            this.special = DFA252_special;
            this.transition = DFA252_transition;
        }
        public String getDescription() {
            return "()+ loopback of 1842:9: ( alternative_expression_item )+";
        }
    }
    static final String DFA288_eotS =
        "\37\uffff";
    static final String DFA288_eofS =
        "\37\uffff";
    static final String DFA288_minS =
        "\1\22\1\uffff\2\0\33\uffff";
    static final String DFA288_maxS =
        "\1\u0121\1\uffff\2\0\33\uffff";
    static final String DFA288_acceptS =
        "\1\uffff\1\7\2\uffff\1\6\25\uffff\1\1\1\3\1\5\1\2\1\4";
    static final String DFA288_specialS =
        "\2\uffff\1\0\1\1\33\uffff}>";
    static final String[] DFA288_transitionS = {
            "\1\4\2\uffff\1\4\7\uffff\1\4\14\uffff\1\4\31\uffff\1\4\2\uffff"+
            "\1\4\23\uffff\1\4\11\uffff\1\4\16\uffff\1\1\27\uffff\1\4\4\uffff"+
            "\1\4\22\uffff\1\4\7\uffff\1\4\1\uffff\1\4\1\uffff\1\3\1\uffff"+
            "\1\4\1\uffff\1\4\1\uffff\1\2\1\uffff\1\4\2\uffff\1\4\11\uffff"+
            "\1\4\1\uffff\1\4\6\uffff\2\4\2\uffff\1\4\1\uffff\1\4\114\uffff"+
            "\1\4",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA288_eot = DFA.unpackEncodedString(DFA288_eotS);
    static final short[] DFA288_eof = DFA.unpackEncodedString(DFA288_eofS);
    static final char[] DFA288_min = DFA.unpackEncodedStringToUnsignedChars(DFA288_minS);
    static final char[] DFA288_max = DFA.unpackEncodedStringToUnsignedChars(DFA288_maxS);
    static final short[] DFA288_accept = DFA.unpackEncodedString(DFA288_acceptS);
    static final short[] DFA288_special = DFA.unpackEncodedString(DFA288_specialS);
    static final short[][] DFA288_transition;

    static {
        int numStates = DFA288_transitionS.length;
        DFA288_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA288_transition[i] = DFA.unpackEncodedString(DFA288_transitionS[i]);
        }
    }

    class DFA288 extends DFA {

        public DFA288(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 288;
            this.eot = DFA288_eot;
            this.eof = DFA288_eof;
            this.min = DFA288_min;
            this.max = DFA288_max;
            this.accept = DFA288_accept;
            this.special = DFA288_special;
            this.transition = DFA288_transition;
        }
        public String getDescription() {
            return "()* loopback of 2085:9: ( ( LSQBRACK IDENTIFIER RSQBRACK LPAREN BASECASE )=> base_case_statement_head | ( LPAREN BASECASE )=> base_case_statement_body | ( LSQBRACK IDENTIFIER RSQBRACK LPAREN INDUCTIVECASE )=> inductive_case_statement_head | ( LPAREN INDUCTIVECASE )=> inductive_case_statement_body | ( LSQBRACK IDENTIFIER RSQBRACK )=> headed_proof_expression | proof_expression )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA288_2 = input.LA(1);

                         
                        int index288_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred25_RParser()) ) {s = 26;}

                        else if ( (synpred27_RParser()) ) {s = 27;}

                        else if ( (synpred29_RParser()) ) {s = 28;}

                         
                        input.seek(index288_2);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA288_3 = input.LA(1);

                         
                        int index288_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred26_RParser()) ) {s = 29;}

                        else if ( (synpred28_RParser()) ) {s = 30;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index288_3);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 288, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA290_eotS =
        "\37\uffff";
    static final String DFA290_eofS =
        "\37\uffff";
    static final String DFA290_minS =
        "\1\22\31\0\5\uffff";
    static final String DFA290_maxS =
        "\1\u0121\31\0\5\uffff";
    static final String DFA290_acceptS =
        "\32\uffff\1\1\1\2\1\3\1\5\1\4";
    static final String DFA290_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14"+
        "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\5\uffff}>";
    static final String[] DFA290_transitionS = {
            "\1\26\2\uffff\1\21\7\uffff\1\23\12\uffff\1\2\1\uffff\1\4\31"+
            "\uffff\1\30\2\uffff\1\27\23\uffff\1\11\11\uffff\1\22\46\uffff"+
            "\1\5\4\uffff\1\31\22\uffff\1\6\7\uffff\1\12\1\uffff\1\12\1\uffff"+
            "\1\20\1\uffff\1\17\1\uffff\1\7\1\uffff\1\1\1\uffff\1\10\2\uffff"+
            "\1\24\11\uffff\1\13\1\uffff\1\14\6\uffff\1\15\1\16\2\uffff\1"+
            "\12\1\uffff\1\25\114\uffff\1\3",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA290_eot = DFA.unpackEncodedString(DFA290_eotS);
    static final short[] DFA290_eof = DFA.unpackEncodedString(DFA290_eofS);
    static final char[] DFA290_min = DFA.unpackEncodedStringToUnsignedChars(DFA290_minS);
    static final char[] DFA290_max = DFA.unpackEncodedStringToUnsignedChars(DFA290_maxS);
    static final short[] DFA290_accept = DFA.unpackEncodedString(DFA290_acceptS);
    static final short[] DFA290_special = DFA.unpackEncodedString(DFA290_specialS);
    static final short[][] DFA290_transition;

    static {
        int numStates = DFA290_transitionS.length;
        DFA290_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA290_transition[i] = DFA.unpackEncodedString(DFA290_transitionS[i]);
        }
    }

    class DFA290 extends DFA {

        public DFA290(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 290;
            this.eot = DFA290_eot;
            this.eof = DFA290_eof;
            this.min = DFA290_min;
            this.max = DFA290_max;
            this.accept = DFA290_accept;
            this.special = DFA290_special;
            this.transition = DFA290_transition;
        }
        public String getDescription() {
            return "()* loopback of 2136:9: ( ( LSQBRACK IDENTIFIER RSQBRACK DEDUCTION )=> () | ( DEDUCTION )=> () | ( LSQBRACK IDENTIFIER RSQBRACK )=> headed_proof_expression -> ^( PROOFEXPRLIST headed_proof_expression ) | proof_expression -> ^( PROOFEXPRLIST proof_expression ) )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA290_1 = input.LA(1);

                         
                        int index290_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred30_RParser()) ) {s = 26;}

                        else if ( (synpred31_RParser()) ) {s = 27;}

                        else if ( (synpred32_RParser()) ) {s = 28;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index290_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA290_2 = input.LA(1);

                         
                        int index290_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred30_RParser()) ) {s = 26;}

                        else if ( (synpred31_RParser()) ) {s = 27;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index290_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA290_3 = input.LA(1);

                         
                        int index290_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred30_RParser()) ) {s = 26;}

                        else if ( (synpred31_RParser()) ) {s = 27;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index290_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA290_4 = input.LA(1);

                         
                        int index290_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred30_RParser()) ) {s = 26;}

                        else if ( (synpred31_RParser()) ) {s = 27;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index290_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA290_5 = input.LA(1);

                         
                        int index290_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred30_RParser()) ) {s = 26;}

                        else if ( (synpred31_RParser()) ) {s = 27;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index290_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA290_6 = input.LA(1);

                         
                        int index290_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred30_RParser()) ) {s = 26;}

                        else if ( (synpred31_RParser()) ) {s = 27;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index290_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA290_7 = input.LA(1);

                         
                        int index290_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred30_RParser()) ) {s = 26;}

                        else if ( (synpred31_RParser()) ) {s = 27;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index290_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA290_8 = input.LA(1);

                         
                        int index290_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred30_RParser()) ) {s = 26;}

                        else if ( (synpred31_RParser()) ) {s = 27;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index290_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA290_9 = input.LA(1);

                         
                        int index290_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred30_RParser()) ) {s = 26;}

                        else if ( (synpred31_RParser()) ) {s = 27;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index290_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA290_10 = input.LA(1);

                         
                        int index290_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred30_RParser()) ) {s = 26;}

                        else if ( (synpred31_RParser()) ) {s = 27;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index290_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA290_11 = input.LA(1);

                         
                        int index290_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred30_RParser()) ) {s = 26;}

                        else if ( (synpred31_RParser()) ) {s = 27;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index290_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA290_12 = input.LA(1);

                         
                        int index290_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred30_RParser()) ) {s = 26;}

                        else if ( (synpred31_RParser()) ) {s = 27;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index290_12);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA290_13 = input.LA(1);

                         
                        int index290_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred30_RParser()) ) {s = 26;}

                        else if ( (synpred31_RParser()) ) {s = 27;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index290_13);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA290_14 = input.LA(1);

                         
                        int index290_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred30_RParser()) ) {s = 26;}

                        else if ( (synpred31_RParser()) ) {s = 27;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index290_14);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA290_15 = input.LA(1);

                         
                        int index290_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred30_RParser()) ) {s = 26;}

                        else if ( (synpred31_RParser()) ) {s = 27;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index290_15);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA290_16 = input.LA(1);

                         
                        int index290_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred30_RParser()) ) {s = 26;}

                        else if ( (synpred31_RParser()) ) {s = 27;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index290_16);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA290_17 = input.LA(1);

                         
                        int index290_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred30_RParser()) ) {s = 26;}

                        else if ( (synpred31_RParser()) ) {s = 27;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index290_17);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA290_18 = input.LA(1);

                         
                        int index290_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred30_RParser()) ) {s = 26;}

                        else if ( (synpred31_RParser()) ) {s = 27;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index290_18);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA290_19 = input.LA(1);

                         
                        int index290_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred30_RParser()) ) {s = 26;}

                        else if ( (synpred31_RParser()) ) {s = 27;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index290_19);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA290_20 = input.LA(1);

                         
                        int index290_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred30_RParser()) ) {s = 26;}

                        else if ( (synpred31_RParser()) ) {s = 27;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index290_20);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA290_21 = input.LA(1);

                         
                        int index290_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred30_RParser()) ) {s = 26;}

                        else if ( (synpred31_RParser()) ) {s = 27;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index290_21);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA290_22 = input.LA(1);

                         
                        int index290_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred30_RParser()) ) {s = 26;}

                        else if ( (synpred31_RParser()) ) {s = 27;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index290_22);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA290_23 = input.LA(1);

                         
                        int index290_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred30_RParser()) ) {s = 26;}

                        else if ( (synpred31_RParser()) ) {s = 27;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index290_23);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA290_24 = input.LA(1);

                         
                        int index290_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred30_RParser()) ) {s = 26;}

                        else if ( (synpred31_RParser()) ) {s = 27;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index290_24);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA290_25 = input.LA(1);

                         
                        int index290_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred30_RParser()) ) {s = 26;}

                        else if ( (synpred31_RParser()) ) {s = 27;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index290_25);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 290, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA291_eotS =
        "\30\uffff";
    static final String DFA291_eofS =
        "\30\uffff";
    static final String DFA291_minS =
        "\1\22\27\uffff";
    static final String DFA291_maxS =
        "\1\u0121\27\uffff";
    static final String DFA291_acceptS =
        "\1\uffff\1\1\1\2\1\3\1\4\23\uffff";
    static final String DFA291_specialS =
        "\30\uffff}>";
    static final String[] DFA291_transitionS = {
            "\1\4\2\uffff\1\4\7\uffff\1\4\14\uffff\1\2\31\uffff\1\4\2\uffff"+
            "\1\4\23\uffff\1\4\11\uffff\1\4\46\uffff\1\3\4\uffff\1\4\22\uffff"+
            "\1\4\7\uffff\1\4\1\uffff\1\4\1\uffff\1\4\1\uffff\1\4\1\uffff"+
            "\1\4\3\uffff\1\4\2\uffff\1\4\11\uffff\1\4\1\uffff\1\4\6\uffff"+
            "\2\4\2\uffff\1\4\1\uffff\1\4\114\uffff\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA291_eot = DFA.unpackEncodedString(DFA291_eotS);
    static final short[] DFA291_eof = DFA.unpackEncodedString(DFA291_eofS);
    static final char[] DFA291_min = DFA.unpackEncodedStringToUnsignedChars(DFA291_minS);
    static final char[] DFA291_max = DFA.unpackEncodedStringToUnsignedChars(DFA291_maxS);
    static final short[] DFA291_accept = DFA.unpackEncodedString(DFA291_acceptS);
    static final short[] DFA291_special = DFA.unpackEncodedString(DFA291_specialS);
    static final short[][] DFA291_transition;

    static {
        int numStates = DFA291_transitionS.length;
        DFA291_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA291_transition[i] = DFA.unpackEncodedString(DFA291_transitionS[i]);
        }
    }

    class DFA291 extends DFA {

        public DFA291(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 291;
            this.eot = DFA291_eot;
            this.eof = DFA291_eof;
            this.min = DFA291_min;
            this.max = DFA291_max;
            this.accept = DFA291_accept;
            this.special = DFA291_special;
            this.transition = DFA291_transition;
        }
        public String getDescription() {
            return "2149:5: ( goal_declaration | standard_definition_declaration | supposition_deduction_pair | justification_declaration )";
        }
    }
    static final String DFA297_eotS =
        "\24\uffff";
    static final String DFA297_eofS =
        "\24\uffff";
    static final String DFA297_minS =
        "\1\41\10\0\13\uffff";
    static final String DFA297_maxS =
        "\1\u00b0\10\0\13\uffff";
    static final String DFA297_acceptS =
        "\11\uffff\1\4\6\uffff\1\1\1\2\1\3\1\5";
    static final String DFA297_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\13\uffff}>";
    static final String[] DFA297_transitionS = {
            "\1\11\3\uffff\1\4\4\uffff\1\7\16\uffff\1\11\1\uffff\1\11\40"+
            "\uffff\1\2\14\uffff\1\11\13\uffff\1\11\6\uffff\1\11\12\uffff"+
            "\1\1\4\uffff\1\5\2\uffff\1\3\10\uffff\1\11\13\uffff\1\10\13"+
            "\uffff\1\6",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA297_eot = DFA.unpackEncodedString(DFA297_eotS);
    static final short[] DFA297_eof = DFA.unpackEncodedString(DFA297_eofS);
    static final char[] DFA297_min = DFA.unpackEncodedStringToUnsignedChars(DFA297_minS);
    static final char[] DFA297_max = DFA.unpackEncodedStringToUnsignedChars(DFA297_maxS);
    static final short[] DFA297_accept = DFA.unpackEncodedString(DFA297_acceptS);
    static final short[] DFA297_special = DFA.unpackEncodedString(DFA297_specialS);
    static final short[][] DFA297_transition;

    static {
        int numStates = DFA297_transitionS.length;
        DFA297_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA297_transition[i] = DFA.unpackEncodedString(DFA297_transitionS[i]);
        }
    }

    class DFA297 extends DFA {

        public DFA297(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 297;
            this.eot = DFA297_eot;
            this.eof = DFA297_eof;
            this.min = DFA297_min;
            this.max = DFA297_max;
            this.accept = DFA297_accept;
            this.special = DFA297_special;
            this.transition = DFA297_transition;
        }
        public String getDescription() {
            return "2192:9: ( ( hyp_desig COMMA )=> double_hyp_rule_justification | ( hyp_desig AMPERSAND )=> single_hyp_rule_justification | ( hyp_desig )=> hyp_desig | simple_justification | ( DEFINITION )=> def_justification )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA297_1 = input.LA(1);

                         
                        int index297_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred35_RParser()) ) {s = 16;}

                        else if ( (synpred36_RParser()) ) {s = 17;}

                        else if ( (synpred37_RParser()) ) {s = 18;}

                         
                        input.seek(index297_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA297_2 = input.LA(1);

                         
                        int index297_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred35_RParser()) ) {s = 16;}

                        else if ( (synpred36_RParser()) ) {s = 17;}

                        else if ( (synpred37_RParser()) ) {s = 18;}

                         
                        input.seek(index297_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA297_3 = input.LA(1);

                         
                        int index297_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred35_RParser()) ) {s = 16;}

                        else if ( (synpred36_RParser()) ) {s = 17;}

                        else if ( (synpred37_RParser()) ) {s = 18;}

                         
                        input.seek(index297_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA297_4 = input.LA(1);

                         
                        int index297_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred35_RParser()) ) {s = 16;}

                        else if ( (synpred36_RParser()) ) {s = 17;}

                        else if ( (synpred37_RParser()) ) {s = 18;}

                         
                        input.seek(index297_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA297_5 = input.LA(1);

                         
                        int index297_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred35_RParser()) ) {s = 16;}

                        else if ( (synpred36_RParser()) ) {s = 17;}

                        else if ( (synpred37_RParser()) ) {s = 18;}

                         
                        input.seek(index297_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA297_6 = input.LA(1);

                         
                        int index297_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred35_RParser()) ) {s = 16;}

                        else if ( (synpred36_RParser()) ) {s = 17;}

                        else if ( (synpred37_RParser()) ) {s = 18;}

                        else if ( (synpred38_RParser()) ) {s = 19;}

                         
                        input.seek(index297_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA297_7 = input.LA(1);

                         
                        int index297_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred35_RParser()) ) {s = 16;}

                        else if ( (synpred36_RParser()) ) {s = 17;}

                        else if ( (synpred37_RParser()) ) {s = 18;}

                        else if ( (synpred38_RParser()) ) {s = 19;}

                         
                        input.seek(index297_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA297_8 = input.LA(1);

                         
                        int index297_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred35_RParser()) ) {s = 16;}

                        else if ( (synpred36_RParser()) ) {s = 17;}

                        else if ( (synpred37_RParser()) ) {s = 18;}

                         
                        input.seek(index297_8);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 297, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA299_eotS =
        "\17\uffff";
    static final String DFA299_eofS =
        "\17\uffff";
    static final String DFA299_minS =
        "\1\11\16\uffff";
    static final String DFA299_maxS =
        "\1\u00b0\16\uffff";
    static final String DFA299_acceptS =
        "\1\uffff\1\1\5\uffff\1\2\5\uffff\1\3\1\uffff";
    static final String DFA299_specialS =
        "\17\uffff}>";
    static final String[] DFA299_transitionS = {
            "\2\1\17\uffff\1\1\6\uffff\1\7\1\uffff\1\1\6\uffff\1\15\14\uffff"+
            "\1\1\3\uffff\1\7\50\uffff\1\1\4\uffff\1\7\13\uffff\1\7\6\uffff"+
            "\1\7\33\uffff\1\7\27\uffff\1\15",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA299_eot = DFA.unpackEncodedString(DFA299_eotS);
    static final short[] DFA299_eof = DFA.unpackEncodedString(DFA299_eofS);
    static final char[] DFA299_min = DFA.unpackEncodedStringToUnsignedChars(DFA299_minS);
    static final char[] DFA299_max = DFA.unpackEncodedStringToUnsignedChars(DFA299_maxS);
    static final short[] DFA299_accept = DFA.unpackEncodedString(DFA299_acceptS);
    static final short[] DFA299_special = DFA.unpackEncodedString(DFA299_specialS);
    static final short[][] DFA299_transition;

    static {
        int numStates = DFA299_transitionS.length;
        DFA299_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA299_transition[i] = DFA.unpackEncodedString(DFA299_transitionS[i]);
        }
    }

    class DFA299 extends DFA {

        public DFA299(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 299;
            this.eot = DFA299_eot;
            this.eof = DFA299_eof;
            this.min = DFA299_min;
            this.max = DFA299_max;
            this.accept = DFA299_accept;
            this.special = DFA299_special;
            this.transition = DFA299_transition;
        }
        public String getDescription() {
            return "2206:30: ( rules_set_1 | rules_set_2 | def_justification )";
        }
    }
    static final String DFA305_eotS =
        "\13\uffff";
    static final String DFA305_eofS =
        "\13\uffff";
    static final String DFA305_minS =
        "\1\41\1\uffff\2\0\7\uffff";
    static final String DFA305_maxS =
        "\1\u0098\1\uffff\2\0\7\uffff";
    static final String DFA305_acceptS =
        "\1\uffff\1\1\2\uffff\1\6\1\7\1\10\1\2\1\3\1\4\1\5";
    static final String DFA305_specialS =
        "\2\uffff\1\0\1\1\7\uffff}>";
    static final String[] DFA305_transitionS = {
            "\1\5\31\uffff\1\3\55\uffff\1\4\13\uffff\1\6\6\uffff\1\1\33\uffff"+
            "\1\2",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA305_eot = DFA.unpackEncodedString(DFA305_eotS);
    static final short[] DFA305_eof = DFA.unpackEncodedString(DFA305_eofS);
    static final char[] DFA305_min = DFA.unpackEncodedStringToUnsignedChars(DFA305_minS);
    static final char[] DFA305_max = DFA.unpackEncodedStringToUnsignedChars(DFA305_maxS);
    static final short[] DFA305_accept = DFA.unpackEncodedString(DFA305_acceptS);
    static final short[] DFA305_special = DFA.unpackEncodedString(DFA305_specialS);
    static final short[][] DFA305_transition;

    static {
        int numStates = DFA305_transitionS.length;
        DFA305_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA305_transition[i] = DFA.unpackEncodedString(DFA305_transitionS[i]);
        }
    }

    class DFA305 extends DFA {

        public DFA305(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 305;
            this.eot = DFA305_eot;
            this.eof = DFA305_eof;
            this.min = DFA305_min;
            this.max = DFA305_max;
            this.accept = DFA305_accept;
            this.special = DFA305_special;
            this.transition = DFA305_transition;
        }
        public String getDescription() {
            return "2233:5: ( REDUCTIO AD ABSURDUM -> ^( RULE2 REDUCTIO_AD_ABSURDUM ) | ( UNIVERSAL GENERALIZATION )=> UNIVERSAL GENERALIZATION -> ^( RULE2 UNIVERSAL_GENERALIZATION ) | UNIVERSAL INSTANTIATION -> ^( RULE2 UNIVERSAL_INSTANTIATION ) | ( EXISTENTIAL GENERALIZATION )=> EXISTENTIAL GENERALIZATION -> ^( RULE2 EXISTENTIAL_GENERALIZATION ) | EXISTENTIAL INSTANTIATION -> ^( RULE2 EXISTENTIAL_INSTANTIATION ) | OR RULE -> ^( RULE2 OR_RULE ) | CONJUNCT ELIMINATION -> ^( RULE2 CONJUNCT_ELIMINATION ) | QUANTIFIER DISTRIBUTION -> ^( RULE2 QUANTIFIER_DISTRIBUTION ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA305_2 = input.LA(1);

                         
                        int index305_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred40_RParser()) ) {s = 7;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index305_2);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA305_3 = input.LA(1);

                         
                        int index305_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred41_RParser()) ) {s = 9;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index305_3);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 305, _s, input);
            error(nvae);
            throw nvae;
        }
    }
 

    public static final BitSet FOLLOW_proof_module_in_module589 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_theory_module_in_module603 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_conceptual_module_in_module617 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_performance_module_in_module631 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_realization_body_module_in_module653 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_enhancement_module_in_module667 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_facility_module_in_module681 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_module701 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_THEORY_in_theory_module725 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_ident_in_theory_module730 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0001000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_module_formal_param_section_in_theory_module742 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_SEMICOLON_in_theory_module746 = new BitSet(new long[]{0x0004042010420000L,0x0008000010000A00L,0x0000000004088000L});
    public static final BitSet FOLLOW_uses_list_in_theory_module758 = new BitSet(new long[]{0x0004042010420000L,0x0008000010000A00L,0x0000000000088000L});
    public static final BitSet FOLLOW_math_item_sequence_in_theory_module771 = new BitSet(new long[]{0x0004000000000000L});
    public static final BitSet FOLLOW_END_in_theory_module783 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_ident_in_theory_module789 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_SEMICOLON_in_theory_module804 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_math_item_in_math_item_sequence826 = new BitSet(new long[]{0x0000042010420002L,0x0008000010000A00L,0x0000000000088000L});
    public static final BitSet FOLLOW_definition_declaration_in_math_item847 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_math_assertion_declaration_in_math_item857 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_theorem_declaration_in_math_item867 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MODULE_CONCEPT_in_conceptual_module890 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_ident_in_conceptual_module895 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0001000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_module_formal_param_section_in_conceptual_module908 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_SEMICOLON_in_conceptual_module912 = new BitSet(new long[]{0x8004060500400000L,0x0000010000000A03L,0x000000000C180008L});
    public static final BitSet FOLLOW_uses_list_in_conceptual_module924 = new BitSet(new long[]{0x8004060500400000L,0x0000010000000A03L,0x0000000008180008L});
    public static final BitSet FOLLOW_requires_clause_in_conceptual_module937 = new BitSet(new long[]{0x8004060500400000L,0x0000010000000A03L,0x0000000008180000L});
    public static final BitSet FOLLOW_concept_item_sequence_in_conceptual_module950 = new BitSet(new long[]{0x0004000000000000L});
    public static final BitSet FOLLOW_END_in_conceptual_module962 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_ident_in_conceptual_module968 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_SEMICOLON_in_conceptual_module983 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_concept_item_in_concept_item_sequence1004 = new BitSet(new long[]{0x8000060500400002L,0x0000010000000A03L,0x0000000008180000L});
    public static final BitSet FOLLOW_confirm_math_type_declaration_in_concept_item1027 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_concept_state_variable_declaration_in_concept_item1037 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_constraint_clause_in_concept_item1047 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_module_concept_init_declaration_in_concept_item1057 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_module_concept_final_declaration_in_concept_item1067 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_declaration_in_concept_item1077 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_operation_declaration_in_concept_item1087 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_definition_declaration_in_concept_item1097 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_defines_declaration_in_concept_item1107 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MODULE_PROFILE_in_performance_module1138 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_ident_in_performance_module1143 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0001000000000100L});
    public static final BitSet FOLLOW_module_formal_param_section_in_performance_module1164 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_SHORT_FOR_in_performance_module1168 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_ident_in_performance_module1179 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_FOR_in_performance_module1181 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_ident_in_performance_module1184 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000010L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_FOR_in_performance_module1187 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_ident_in_performance_module1190 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_WITH_PROFILE_in_performance_module1192 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_ident_in_performance_module1195 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_SEMICOLON_in_performance_module1199 = new BitSet(new long[]{0x8004060500400000L,0x0000190000000A03L,0x000000000C180008L});
    public static final BitSet FOLLOW_uses_list_in_performance_module1211 = new BitSet(new long[]{0x8004060500400000L,0x0000190000000A03L,0x0000000008180008L});
    public static final BitSet FOLLOW_requires_clause_in_performance_module1224 = new BitSet(new long[]{0x8004060500400000L,0x0000190000000A03L,0x0000000008180000L});
    public static final BitSet FOLLOW_performance_item_sequence_in_performance_module1237 = new BitSet(new long[]{0x0004000000000000L});
    public static final BitSet FOLLOW_END_in_performance_module1249 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_ident_in_performance_module1255 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_SEMICOLON_in_performance_module1270 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_performance_item_in_performance_item_sequence1291 = new BitSet(new long[]{0x8000060500400002L,0x0000190000000A03L,0x0000000008180000L});
    public static final BitSet FOLLOW_confirm_math_type_declaration_in_performance_item1314 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_concept_state_variable_declaration_in_performance_item1324 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_constraint_clause_in_performance_item1334 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_performance_module_init_declaration_in_performance_item1344 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_performance_module_final_declaration_in_performance_item1354 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_performance_type_declaration_in_performance_item1364 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_performance_operation_declaration_in_performance_item1374 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_definition_declaration_in_performance_item1384 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_defines_declaration_in_performance_item1394 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MODULE_ENHANCEMENT_in_enhancement_module1417 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_ident_in_enhancement_module1422 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000010L,0x0001000000000000L});
    public static final BitSet FOLLOW_module_formal_param_section_in_enhancement_module1435 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_FOR_in_enhancement_module1447 = new BitSet(new long[]{0x0000000040000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_CONCEPT_in_enhancement_module1451 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_ident_in_enhancement_module1456 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_SEMICOLON_in_enhancement_module1458 = new BitSet(new long[]{0x8004060500400000L,0x0000010000000A03L,0x000000000C180008L});
    public static final BitSet FOLLOW_uses_list_in_enhancement_module1470 = new BitSet(new long[]{0x8004060500400000L,0x0000010000000A03L,0x0000000008180008L});
    public static final BitSet FOLLOW_requires_clause_in_enhancement_module1483 = new BitSet(new long[]{0x8004060500400000L,0x0000010000000A03L,0x0000000008180000L});
    public static final BitSet FOLLOW_enhancement_item_sequence_in_enhancement_module1496 = new BitSet(new long[]{0x0004000000000000L});
    public static final BitSet FOLLOW_END_in_enhancement_module1508 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_ident_in_enhancement_module1514 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_SEMICOLON_in_enhancement_module1529 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_enhancement_item_in_enhancement_item_sequence1550 = new BitSet(new long[]{0x8000060500400002L,0x0000010000000A03L,0x0000000008180000L});
    public static final BitSet FOLLOW_concept_state_variable_declaration_in_enhancement_item1571 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_declaration_in_enhancement_item1581 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_operation_declaration_in_enhancement_item1591 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_definition_declaration_in_enhancement_item1601 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_defines_declaration_in_enhancement_item1611 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MODULE_REALIZATION_in_realization_body_module1634 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_ident_in_realization_body_module1639 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000010L,0x0001000200000000L});
    public static final BitSet FOLLOW_WITH_PROFILE_in_realization_body_module1652 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_ident_in_realization_body_module1654 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000010L,0x0001000000000000L});
    public static final BitSet FOLLOW_module_formal_param_section_in_realization_body_module1659 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_FOR_in_realization_body_module1663 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_body_enhancement_section_in_realization_body_module1685 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_body_concept_section_in_realization_body_module1699 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_SEMICOLON_in_realization_body_module1711 = new BitSet(new long[]{0xC004045000410000L,0x0800810000000A01L,0x000000000C080008L});
    public static final BitSet FOLLOW_uses_list_in_realization_body_module1723 = new BitSet(new long[]{0xC004045000410000L,0x0800810000000A01L,0x0000000008080008L});
    public static final BitSet FOLLOW_requires_clause_in_realization_body_module1736 = new BitSet(new long[]{0xC004045000410000L,0x0800810000000A01L,0x0000000008080000L});
    public static final BitSet FOLLOW_body_item_sequence_in_realization_body_module1749 = new BitSet(new long[]{0x0004000000000000L});
    public static final BitSet FOLLOW_END_in_realization_body_module1761 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_ident_in_realization_body_module1767 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_SEMICOLON_in_realization_body_module1782 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ident_in_body_concept_section1802 = new BitSet(new long[]{0x0008000000000002L});
    public static final BitSet FOLLOW_ENHANCED_in_body_concept_section1813 = new BitSet(new long[]{0x0000000000100000L});
    public static final BitSet FOLLOW_BY_in_body_concept_section1815 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_ident_in_body_concept_section1817 = new BitSet(new long[]{0x0008000000000002L});
    public static final BitSet FOLLOW_ident_in_body_enhancement_section1851 = new BitSet(new long[]{0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_OF_in_body_enhancement_section1861 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_ident_in_body_enhancement_section1863 = new BitSet(new long[]{0x0008000000000002L});
    public static final BitSet FOLLOW_added_enhancement_section_in_body_enhancement_section1874 = new BitSet(new long[]{0x0008000000000002L});
    public static final BitSet FOLLOW_ENHANCED_in_added_enhancement_section1939 = new BitSet(new long[]{0x0000000000100000L});
    public static final BitSet FOLLOW_BY_in_added_enhancement_section1942 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_ident_in_added_enhancement_section1945 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_module_argument_section_in_added_enhancement_section1955 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_REALIZED_in_added_enhancement_section1965 = new BitSet(new long[]{0x0000000000100000L});
    public static final BitSet FOLLOW_BY_in_added_enhancement_section1967 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_ident_in_added_enhancement_section1970 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0001000200000000L});
    public static final BitSet FOLLOW_WITH_PROFILE_in_added_enhancement_section1981 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_ident_in_added_enhancement_section1983 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_module_argument_section_in_added_enhancement_section1987 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ENHANCED_in_added_enhancement_section2000 = new BitSet(new long[]{0x0000000000100000L});
    public static final BitSet FOLLOW_BY_in_added_enhancement_section2003 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_ident_in_added_enhancement_section2006 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_REALIZED_in_added_enhancement_section2016 = new BitSet(new long[]{0x0000000000100000L});
    public static final BitSet FOLLOW_BY_in_added_enhancement_section2018 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_ident_in_added_enhancement_section2021 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0001000200000000L});
    public static final BitSet FOLLOW_WITH_PROFILE_in_added_enhancement_section2032 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_ident_in_added_enhancement_section2034 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_module_argument_section_in_added_enhancement_section2038 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_body_item_in_body_item_sequence2061 = new BitSet(new long[]{0xC000045000410002L,0x0800810000000A01L,0x0000000008080000L});
    public static final BitSet FOLLOW_state_variable_declaration_in_body_item2082 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_correspondence_clause_in_body_item2092 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_convention_clause_in_body_item2102 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_module_body_init_declaration_in_body_item2112 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_module_body_final_declaration_in_body_item2122 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_representation_declaration_in_body_item2132 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_aux_operation_declaration_in_body_item2142 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_operation_recursive_procedure_declaration_in_body_item2230 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_operation_procedure_declaration_in_body_item2240 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_procedure_declaration_in_body_item2251 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_recursive_procedure_declaration_in_body_item2261 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_definition_declaration_in_body_item2271 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_facility_declaration_in_body_item2285 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FACILITY_in_facility_module2308 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_ident_in_facility_module2313 = new BitSet(new long[]{0x0000000000000000L,0x0000000000020000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_short_facility_section_in_facility_module2328 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_uses_list_in_facility_module2331 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SEMICOLON_in_facility_module2347 = new BitSet(new long[]{0xC004045000410000L,0x0800810000000A01L,0x000000000C080000L});
    public static final BitSet FOLLOW_uses_list_in_facility_module2351 = new BitSet(new long[]{0xC004045000410000L,0x0800810000000A01L,0x0000000008080000L});
    public static final BitSet FOLLOW_facility_item_sequence_in_facility_module2368 = new BitSet(new long[]{0x0004000000000000L});
    public static final BitSet FOLLOW_END_in_facility_module2384 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_ident_in_facility_module2390 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_SEMICOLON_in_facility_module2409 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IS_in_short_facility_section2439 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_ident_in_short_facility_section2442 = new BitSet(new long[]{0x0008000000000000L,0x0100000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_module_argument_section_in_short_facility_section2452 = new BitSet(new long[]{0x0008000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_facility_enhancement_in_short_facility_section2463 = new BitSet(new long[]{0x0008000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_REALIZED_in_short_facility_section2474 = new BitSet(new long[]{0x0000000000100000L});
    public static final BitSet FOLLOW_BY_in_short_facility_section2477 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_ident_in_short_facility_section2480 = new BitSet(new long[]{0x0008000000000000L,0x0000000000000000L,0x0001000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_module_argument_section_in_short_facility_section2490 = new BitSet(new long[]{0x0008000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_facility_body_enhancement_in_short_facility_section2501 = new BitSet(new long[]{0x0008000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_SEMICOLON_in_short_facility_section2512 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_facility_item_in_facility_item_sequence2533 = new BitSet(new long[]{0xC000045000410002L,0x0800810000000A01L,0x0000000008080000L});
    public static final BitSet FOLLOW_state_variable_declaration_in_facility_item2554 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_module_facility_init_declaration_in_facility_item2564 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_module_facility_final_declaration_in_facility_item2574 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_facility_type_declaration_in_facility_item2584 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_operation_recursive_procedure_declaration_in_facility_item2672 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_operation_procedure_declaration_in_facility_item2682 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_definition_declaration_in_facility_item2697 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_facility_declaration_in_facility_item2708 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_module_formal_param_section2735 = new BitSet(new long[]{0x0100040000000000L,0x0040010000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_module_parameter_in_module_formal_param_section2737 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0002000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_SEMICOLON_in_module_formal_param_section2748 = new BitSet(new long[]{0x0100040000000000L,0x0040010000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_module_parameter_in_module_formal_param_section2750 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0002000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_RPAREN_in_module_formal_param_section2754 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_definition_parameter_in_module_parameter2794 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_constant_parameter_in_module_parameter2814 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_concept_type_parameter_in_module_parameter2826 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_operation_parameter_in_module_parameter2838 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_concept_realization_parameter_in_module_parameter2850 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DEFINITION_in_definition_parameter2869 = new BitSet(new long[]{0x0000000020000010L,0x0000002000000000L,0x0C01101000000000L,0x000000000000C0A0L,0x000000001F000000L});
    public static final BitSet FOLLOW_definition_signature_in_definition_parameter2872 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EVALUATES_in_constant_parameter2891 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_variable_declaration_group_in_constant_parameter2894 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TYPE_in_concept_type_parameter2913 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_ident_in_concept_type_parameter2916 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_operation_declaration_in_operation_parameter2935 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REALIZATION_in_concept_realization_parameter2954 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_ident_in_concept_realization_parameter2957 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_FOR_in_concept_realization_parameter2967 = new BitSet(new long[]{0x0000000040000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_CONCEPT_in_concept_realization_parameter2971 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_ident_in_concept_realization_parameter2976 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_uses_clause_in_uses_list3000 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_USES_in_uses_clause3021 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_ident_in_uses_clause3024 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000800000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_COMMA_in_uses_clause3027 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_ident_in_uses_clause3030 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000800000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_SEMICOLON_in_uses_clause3034 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CONFIRM_in_confirm_math_type_declaration3074 = new BitSet(new long[]{0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_MATH_in_confirm_math_type_declaration3076 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_TYPE_in_confirm_math_type_declaration3078 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_math_variable_declaration_in_confirm_math_type_declaration3080 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_SEMICOLON_in_confirm_math_type_declaration3082 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AXIOM_in_math_assertion_declaration3125 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000101000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_THEOREM_in_math_assertion_declaration3140 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000101000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_PROPERTY_in_math_assertion_declaration3155 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000101000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_LEMMA_in_math_assertion_declaration3170 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000101000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_COROLLARY_in_math_assertion_declaration3185 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000101000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_COMMUTATIVITY_in_math_assertion_declaration3201 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_THEOREM_in_math_assertion_declaration3204 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000101000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_math_theorem_ident_in_math_assertion_declaration3226 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_COLON_in_math_assertion_declaration3230 = new BitSet(new long[]{0x0000000020240000L,0x0000002008000090L,0x0915501000020000L,0x000000000014C0A0L});
    public static final BitSet FOLLOW_math_expression_in_math_assertion_declaration3241 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_SEMICOLON_in_math_assertion_declaration3243 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CONSTRAINT_in_constraint_clause3263 = new BitSet(new long[]{0x0000000020240000L,0x0000002008000090L,0x0915501000020000L,0x000000000014C0A0L});
    public static final BitSet FOLLOW_math_expression_in_constraint_clause3266 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_SEMICOLON_in_constraint_clause3268 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CORR_in_correspondence_clause3288 = new BitSet(new long[]{0x0000000020240000L,0x0000002008000090L,0x0915501000020000L,0x000000000014C0A0L});
    public static final BitSet FOLLOW_math_expression_in_correspondence_clause3291 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_SEMICOLON_in_correspondence_clause3293 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CONVENTION_in_convention_clause3313 = new BitSet(new long[]{0x0000000020240000L,0x0000002008000090L,0x0915501000020000L,0x000000000014C0A0L});
    public static final BitSet FOLLOW_math_expression_in_convention_clause3316 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_SEMICOLON_in_convention_clause3318 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TYPE_in_type_theorem_declaration3346 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_THEOREM_in_type_theorem_declaration3349 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000101000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_math_theorem_ident_in_type_theorem_declaration3353 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_COLON_in_type_theorem_declaration3357 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_FOR_in_type_theorem_declaration3368 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_ALL_in_type_theorem_declaration3370 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_math_variable_declaration_group_in_type_theorem_declaration3373 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_COMMA_in_type_theorem_declaration3375 = new BitSet(new long[]{0x0000000020240000L,0x0000002008000090L,0x0915501000000000L,0x000000000014C0A0L});
    public static final BitSet FOLLOW_implies_expression_in_type_theorem_declaration3388 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_COLON_in_type_theorem_declaration3390 = new BitSet(new long[]{0x0000000020240000L,0x0000002008000000L,0x0915501000000000L,0x000000000014C0A0L});
    public static final BitSet FOLLOW_math_type_expression_in_type_theorem_declaration3393 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_SEMICOLON_in_type_theorem_declaration3395 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_VAR_in_concept_state_variable_declaration3425 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_math_variable_declaration_group_in_concept_state_variable_declaration3428 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_SEMICOLON_in_concept_state_variable_declaration3430 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_VAR_in_state_variable_declaration3450 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_variable_declaration_group_in_state_variable_declaration3453 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_SEMICOLON_in_state_variable_declaration3455 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AUX_VAR_in_state_aux_variable_declaration3479 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_variable_declaration_group_in_state_aux_variable_declaration3482 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_SEMICOLON_in_state_aux_variable_declaration3484 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FACILITY_in_facility_declaration3508 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_ident_in_facility_declaration3511 = new BitSet(new long[]{0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_IS_in_facility_declaration3521 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_ident_in_facility_declaration3524 = new BitSet(new long[]{0x0008000000000000L,0x0100000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_module_argument_section_in_facility_declaration3534 = new BitSet(new long[]{0x0008000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_facility_enhancement_in_facility_declaration3545 = new BitSet(new long[]{0x0008000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_REALIZED_in_facility_declaration3556 = new BitSet(new long[]{0x0000000000100000L});
    public static final BitSet FOLLOW_BY_in_facility_declaration3558 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_ident_in_facility_declaration3561 = new BitSet(new long[]{0x0008000000000000L,0x0000000000000000L,0x0001000200000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_WITH_PROFILE_in_facility_declaration3572 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_ident_in_facility_declaration3574 = new BitSet(new long[]{0x0008000000000000L,0x0000000000000000L,0x0001000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_module_argument_section_in_facility_declaration3578 = new BitSet(new long[]{0x0008000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_facility_body_enhancement_in_facility_declaration3589 = new BitSet(new long[]{0x0008000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_SEMICOLON_in_facility_declaration3600 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ENHANCED_in_facility_enhancement3620 = new BitSet(new long[]{0x0000000000100000L});
    public static final BitSet FOLLOW_BY_in_facility_enhancement3623 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_ident_in_facility_enhancement3626 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_module_argument_section_in_facility_enhancement3636 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ENHANCED_in_facility_body_enhancement3704 = new BitSet(new long[]{0x0000000000100000L});
    public static final BitSet FOLLOW_BY_in_facility_body_enhancement3707 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_ident_in_facility_body_enhancement3710 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_module_argument_section_in_facility_body_enhancement3720 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_REALIZED_in_facility_body_enhancement3730 = new BitSet(new long[]{0x0000000000100000L});
    public static final BitSet FOLLOW_BY_in_facility_body_enhancement3732 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_ident_in_facility_body_enhancement3735 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0001000200000000L});
    public static final BitSet FOLLOW_WITH_PROFILE_in_facility_body_enhancement3746 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_ident_in_facility_body_enhancement3748 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_module_argument_section_in_facility_body_enhancement3752 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ENHANCED_in_facility_body_enhancement3765 = new BitSet(new long[]{0x0000000000100000L});
    public static final BitSet FOLLOW_BY_in_facility_body_enhancement3768 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_ident_in_facility_body_enhancement3771 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_REALIZED_in_facility_body_enhancement3781 = new BitSet(new long[]{0x0000000000100000L});
    public static final BitSet FOLLOW_BY_in_facility_body_enhancement3783 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_ident_in_facility_body_enhancement3786 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0001000200000000L});
    public static final BitSet FOLLOW_WITH_PROFILE_in_facility_body_enhancement3797 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_ident_in_facility_body_enhancement3799 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_module_argument_section_in_facility_body_enhancement3803 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_module_argument_section3825 = new BitSet(new long[]{0x0000000000000000L,0x0000002000000000L,0x0801501000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_module_argument_in_module_argument_section3827 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0002800000000000L});
    public static final BitSet FOLLOW_COMMA_in_module_argument_section3830 = new BitSet(new long[]{0x0000000000000000L,0x0000002000000000L,0x0801501000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_module_argument_in_module_argument_section3832 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0002800000000000L});
    public static final BitSet FOLLOW_RPAREN_in_module_argument_section3836 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_qualified_ident_in_module_argument3877 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_program_expression_in_module_argument3887 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DEFINES_in_defines_declaration3910 = new BitSet(new long[]{0x0000000020000010L,0x0000002000000000L,0x0C01101000000000L,0x000000000000C0A0L,0x000000001F000000L});
    public static final BitSet FOLLOW_definition_signature_in_defines_declaration3913 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_SEMICOLON_in_defines_declaration3915 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_implicit_definition_declaration_in_definition_declaration3935 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inductive_definition_declaration_in_definition_declaration3945 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_standard_definition_declaration_in_definition_declaration3955 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_categorical_definition_declaration_in_definition_declaration3965 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IMPLICIT_in_implicit_definition_declaration3984 = new BitSet(new long[]{0x0000040000000000L});
    public static final BitSet FOLLOW_DEFINITION_in_implicit_definition_declaration3986 = new BitSet(new long[]{0x0000000020000010L,0x0000002000000000L,0x0C01101000000000L,0x000000000000C0A0L,0x000000001F000000L});
    public static final BitSet FOLLOW_definition_signature_in_implicit_definition_declaration3988 = new BitSet(new long[]{0x0000000000000000L,0x0000000000020000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_SEMICOLON_in_implicit_definition_declaration3990 = new BitSet(new long[]{0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_IS_in_implicit_definition_declaration4001 = new BitSet(new long[]{0x0000000020240000L,0x0000002008000090L,0x0915501000020000L,0x000000000014C0A0L});
    public static final BitSet FOLLOW_math_expression_in_implicit_definition_declaration4003 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_SEMICOLON_in_implicit_definition_declaration4005 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INDUCTIVE_in_inductive_definition_declaration4050 = new BitSet(new long[]{0x0000040000000000L});
    public static final BitSet FOLLOW_DEFINITION_in_inductive_definition_declaration4052 = new BitSet(new long[]{0x0000000020000010L,0x0000002000000000L,0x0C01101000000000L,0x000000000000C0A0L,0x000000001F000000L});
    public static final BitSet FOLLOW_definition_signature_in_inductive_definition_declaration4054 = new BitSet(new long[]{0x0000000000000000L,0x0000000000020000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_SEMICOLON_in_inductive_definition_declaration4056 = new BitSet(new long[]{0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_IS_in_inductive_definition_declaration4067 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_indexed_expression_in_inductive_definition_declaration4069 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_SEMICOLON_in_inductive_definition_declaration4071 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_indexed_expression_in_inductive_definition_declaration4073 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_SEMICOLON_in_inductive_definition_declaration4075 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DEFINITION_in_standard_definition_declaration4122 = new BitSet(new long[]{0x0000000020000010L,0x0000002000000000L,0x0C01101000000000L,0x000000000000C0A0L,0x000000001F000000L});
    public static final BitSet FOLLOW_definition_signature_in_standard_definition_declaration4125 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000810L});
    public static final BitSet FOLLOW_EQL_in_standard_definition_declaration4136 = new BitSet(new long[]{0x0000000020240000L,0x0000002008000090L,0x0915501000020000L,0x000000000014C0A0L});
    public static final BitSet FOLLOW_math_expression_in_standard_definition_declaration4139 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_SEMICOLON_in_standard_definition_declaration4143 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CATEGORICAL_in_categorical_definition_declaration4167 = new BitSet(new long[]{0x0000040000000000L});
    public static final BitSet FOLLOW_DEFINITION_in_categorical_definition_declaration4169 = new BitSet(new long[]{0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_INTRODUCES_in_categorical_definition_declaration4171 = new BitSet(new long[]{0x0000000020000010L,0x0000002000000000L,0x0C01101000000000L,0x000000000000C0A0L,0x000000001F000000L});
    public static final BitSet FOLLOW_categorical_definition_construct_in_categorical_definition_declaration4173 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_RELATED_in_categorical_definition_declaration4183 = new BitSet(new long[]{0x0000000000100000L});
    public static final BitSet FOLLOW_BY_in_categorical_definition_declaration4185 = new BitSet(new long[]{0x0000000020240000L,0x0000002008000090L,0x0915501000020000L,0x000000000014C0A0L});
    public static final BitSet FOLLOW_math_expression_in_categorical_definition_declaration4187 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_SEMICOLON_in_categorical_definition_declaration4189 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_infix_definition_construct_in_definition_signature4234 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_outfix_definition_construct_in_definition_signature4248 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_standard_definition_construct_in_definition_signature4262 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_COLON_in_definition_signature4282 = new BitSet(new long[]{0x0000000020240000L,0x0000002008000000L,0x0915501000000000L,0x000000000014C0A0L});
    public static final BitSet FOLLOW_math_type_expression_in_definition_signature4285 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_singleton_definition_parameter_in_infix_definition_construct4304 = new BitSet(new long[]{0x0000100020000400L,0x4000024403FC8500L,0xEC00001100200000L,0x000000000000007FL,0x0000000000E00000L});
    public static final BitSet FOLLOW_ident_in_infix_definition_construct4315 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_infix_symbol_in_infix_definition_construct4319 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_singleton_definition_parameter_in_infix_definition_construct4330 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BAR_in_outfix_definition_construct4349 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_singleton_definition_parameter_in_outfix_definition_construct4351 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_BAR_in_outfix_definition_construct4353 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DBL_BAR_in_outfix_definition_construct4364 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_singleton_definition_parameter_in_outfix_definition_construct4366 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_DBL_BAR_in_outfix_definition_construct4368 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LT_in_outfix_definition_construct4379 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_singleton_definition_parameter_in_outfix_definition_construct4381 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_GT_in_outfix_definition_construct4383 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LL_in_outfix_definition_construct4394 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_singleton_definition_parameter_in_outfix_definition_construct4396 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_GG_in_outfix_definition_construct4398 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ident_in_standard_definition_construct4419 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_prefix_symbol_in_standard_definition_construct4423 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_quant_symbol_in_standard_definition_construct4427 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_NUMERIC_LITERAL_in_standard_definition_construct4431 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_definition_formal_param_section_in_standard_definition_construct4443 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_definition_signature_in_categorical_definition_construct4464 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_COMMA_in_categorical_definition_construct4467 = new BitSet(new long[]{0x0000000020000010L,0x0000002000000000L,0x0C01101000000000L,0x000000000000C0A0L,0x000000001F000000L});
    public static final BitSet FOLLOW_definition_signature_in_categorical_definition_construct4469 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_LPAREN_in_indexed_expression4515 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_ident_in_indexed_expression4520 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_indexed_expression4523 = new BitSet(new long[]{0x0000000020240000L,0x0000002008000090L,0x0915501000020000L,0x000000000014C0A0L});
    public static final BitSet FOLLOW_math_expression_in_indexed_expression4526 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_singleton_definition_parameter4555 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_math_variable_declaration_in_singleton_definition_parameter4557 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_singleton_definition_parameter4559 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_definition_formal_param_section4594 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_math_variable_declaration_group_in_definition_formal_param_section4596 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0002800000000000L});
    public static final BitSet FOLLOW_COMMA_in_definition_formal_param_section4607 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_math_variable_declaration_group_in_definition_formal_param_section4609 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0002800000000000L});
    public static final BitSet FOLLOW_RPAREN_in_definition_formal_param_section4613 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_infix_symbol0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_prefix_symbol0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_quant_symbol0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OPERATION_in_operation_procedure_declaration4888 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_ident_in_operation_procedure_declaration4893 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_operation_formal_param_section_in_operation_procedure_declaration4904 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000C00L});
    public static final BitSet FOLLOW_COLON_in_operation_procedure_declaration4916 = new BitSet(new long[]{0x0000000000000800L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_program_type_expression_in_operation_procedure_declaration4919 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_SEMICOLON_in_operation_procedure_declaration4923 = new BitSet(new long[]{0x0140000002000100L,0x0200C00000000000L,0x000000000200002AL});
    public static final BitSet FOLLOW_affects_clause_in_operation_procedure_declaration4935 = new BitSet(new long[]{0x0140000002000100L,0x0200C00000000000L,0x000000000200002AL});
    public static final BitSet FOLLOW_requires_clause_in_operation_procedure_declaration4948 = new BitSet(new long[]{0x0040000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_ensures_clause_in_operation_procedure_declaration4961 = new BitSet(new long[]{0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_PROCEDURE_in_operation_procedure_declaration4973 = new BitSet(new long[]{0xC00404D100C17000L,0x8800810004000AA1L,0x0000001088080000L});
    public static final BitSet FOLLOW_decreasing_clause_in_operation_procedure_declaration4985 = new BitSet(new long[]{0xC004045100C17000L,0x8800810004000AA1L,0x0000001088080000L});
    public static final BitSet FOLLOW_facility_declaration_in_operation_procedure_declaration4998 = new BitSet(new long[]{0xC004045100C17000L,0x8800810004000AA1L,0x0000001088080000L});
    public static final BitSet FOLLOW_variable_declaration_in_operation_procedure_declaration5011 = new BitSet(new long[]{0x0004000100807000L,0x80000000040000A0L,0x0000001088000000L});
    public static final BitSet FOLLOW_aux_variable_declaration_in_operation_procedure_declaration5024 = new BitSet(new long[]{0x0004000100807000L,0x80000000040000A0L,0x0000001080000000L});
    public static final BitSet FOLLOW_statement_sequence_in_operation_procedure_declaration5036 = new BitSet(new long[]{0x0004000000000000L});
    public static final BitSet FOLLOW_END_in_operation_procedure_declaration5046 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_ident_in_operation_procedure_declaration5052 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_SEMICOLON_in_operation_procedure_declaration5067 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OPERATION_in_operation_recursive_procedure_declaration5091 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_ident_in_operation_recursive_procedure_declaration5095 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_operation_formal_param_section_in_operation_recursive_procedure_declaration5105 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000C00L});
    public static final BitSet FOLLOW_COLON_in_operation_recursive_procedure_declaration5116 = new BitSet(new long[]{0x0000000000000800L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_program_type_expression_in_operation_recursive_procedure_declaration5118 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_SEMICOLON_in_operation_recursive_procedure_declaration5122 = new BitSet(new long[]{0x0140000002000100L,0x0A00400000000000L,0x000000000200002AL});
    public static final BitSet FOLLOW_affects_clause_in_operation_recursive_procedure_declaration5132 = new BitSet(new long[]{0x0140000002000100L,0x0A00400000000000L,0x000000000200002AL});
    public static final BitSet FOLLOW_requires_clause_in_operation_recursive_procedure_declaration5143 = new BitSet(new long[]{0x0040000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_ensures_clause_in_operation_recursive_procedure_declaration5154 = new BitSet(new long[]{0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_RECURSIVE_in_operation_recursive_procedure_declaration5165 = new BitSet(new long[]{0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_PROCEDURE_in_operation_recursive_procedure_declaration5167 = new BitSet(new long[]{0x0000008000000000L});
    public static final BitSet FOLLOW_decreasing_clause_in_operation_recursive_procedure_declaration5177 = new BitSet(new long[]{0xC004045100C17000L,0x8800810004000AA1L,0x0000001088080000L});
    public static final BitSet FOLLOW_facility_declaration_in_operation_recursive_procedure_declaration5187 = new BitSet(new long[]{0xC004045100C17000L,0x8800810004000AA1L,0x0000001088080000L});
    public static final BitSet FOLLOW_variable_declaration_in_operation_recursive_procedure_declaration5198 = new BitSet(new long[]{0x0004000100807000L,0x80000000040000A0L,0x0000001088000000L});
    public static final BitSet FOLLOW_aux_variable_declaration_in_operation_recursive_procedure_declaration5209 = new BitSet(new long[]{0x0004000100807000L,0x80000000040000A0L,0x0000001080000000L});
    public static final BitSet FOLLOW_statement_sequence_in_operation_recursive_procedure_declaration5220 = new BitSet(new long[]{0x0004000000000000L});
    public static final BitSet FOLLOW_END_in_operation_recursive_procedure_declaration5230 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_ident_in_operation_recursive_procedure_declaration5235 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_SEMICOLON_in_operation_recursive_procedure_declaration5249 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OPERATION_in_operation_declaration5393 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_ident_in_operation_declaration5396 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_operation_formal_param_section_in_operation_declaration5407 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000C00L});
    public static final BitSet FOLLOW_COLON_in_operation_declaration5419 = new BitSet(new long[]{0x0000000000000800L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_program_type_expression_in_operation_declaration5422 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_SEMICOLON_in_operation_declaration5426 = new BitSet(new long[]{0x0140000002000102L,0x0200400000000000L,0x000000000200002AL});
    public static final BitSet FOLLOW_affects_clause_in_operation_declaration5438 = new BitSet(new long[]{0x0140000002000102L,0x0200400000000000L,0x000000000200002AL});
    public static final BitSet FOLLOW_requires_clause_in_operation_declaration5451 = new BitSet(new long[]{0x0040000000000002L});
    public static final BitSet FOLLOW_ensures_clause_in_operation_declaration5464 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OPERATION_in_performance_operation_declaration5489 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_ident_in_performance_operation_declaration5492 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_operation_formal_param_section_in_performance_operation_declaration5503 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000C00L});
    public static final BitSet FOLLOW_COLON_in_performance_operation_declaration5515 = new BitSet(new long[]{0x0000000000000800L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_program_type_expression_in_performance_operation_declaration5518 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_SEMICOLON_in_performance_operation_declaration5522 = new BitSet(new long[]{0x0040400000000002L,0x0000000040000000L});
    public static final BitSet FOLLOW_ensures_clause_in_performance_operation_declaration5534 = new BitSet(new long[]{0x0040400000000002L,0x0000000040000000L});
    public static final BitSet FOLLOW_duration_clause_in_performance_operation_declaration5547 = new BitSet(new long[]{0x0000000000000002L,0x0000000040000000L});
    public static final BitSet FOLLOW_mainp_disp_clause_in_performance_operation_declaration5560 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AUXILIARY_in_aux_operation_declaration5581 = new BitSet(new long[]{0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_OPERATION_in_aux_operation_declaration5583 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_ident_in_aux_operation_declaration5585 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_operation_formal_param_section_in_aux_operation_declaration5595 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000C00L});
    public static final BitSet FOLLOW_COLON_in_aux_operation_declaration5606 = new BitSet(new long[]{0x0000000000000800L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_program_type_expression_in_aux_operation_declaration5608 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_SEMICOLON_in_aux_operation_declaration5612 = new BitSet(new long[]{0x0140000002000102L,0x0200400000000000L,0x000000000200002AL});
    public static final BitSet FOLLOW_affects_clause_in_aux_operation_declaration5622 = new BitSet(new long[]{0x0140000002000102L,0x0200400000000000L,0x000000000200002AL});
    public static final BitSet FOLLOW_requires_clause_in_aux_operation_declaration5633 = new BitSet(new long[]{0x0040000000000002L});
    public static final BitSet FOLLOW_ensures_clause_in_aux_operation_declaration5644 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PROCEDURE_in_procedure_declaration5734 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_ident_in_procedure_declaration5739 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_operation_formal_param_section_in_procedure_declaration5750 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000C00L});
    public static final BitSet FOLLOW_COLON_in_procedure_declaration5762 = new BitSet(new long[]{0x0000000000000800L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_program_type_expression_in_procedure_declaration5765 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_SEMICOLON_in_procedure_declaration5769 = new BitSet(new long[]{0xC10404D102C17100L,0x8A00C10004000AA1L,0x000000108A080022L});
    public static final BitSet FOLLOW_affects_clause_in_procedure_declaration5781 = new BitSet(new long[]{0xC10404D102C17100L,0x8A00C10004000AA1L,0x000000108A080022L});
    public static final BitSet FOLLOW_decreasing_clause_in_procedure_declaration5794 = new BitSet(new long[]{0xC004045100C17000L,0x8800810004000AA1L,0x0000001088080000L});
    public static final BitSet FOLLOW_facility_declaration_in_procedure_declaration5807 = new BitSet(new long[]{0xC004045100C17000L,0x8800810004000AA1L,0x0000001088080000L});
    public static final BitSet FOLLOW_variable_declaration_in_procedure_declaration5820 = new BitSet(new long[]{0x0004000100807000L,0x80000000040000A0L,0x0000001088000000L});
    public static final BitSet FOLLOW_aux_variable_declaration_in_procedure_declaration5833 = new BitSet(new long[]{0x0004000100807000L,0x80000000040000A0L,0x0000001080000000L});
    public static final BitSet FOLLOW_statement_sequence_in_procedure_declaration5845 = new BitSet(new long[]{0x0004000000000000L});
    public static final BitSet FOLLOW_END_in_procedure_declaration5855 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_ident_in_procedure_declaration5861 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_SEMICOLON_in_procedure_declaration5876 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RECURSIVE_in_recursive_procedure_declaration5900 = new BitSet(new long[]{0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_PROCEDURE_in_recursive_procedure_declaration5902 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_ident_in_recursive_procedure_declaration5906 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_operation_formal_param_section_in_recursive_procedure_declaration5916 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000C00L});
    public static final BitSet FOLLOW_COLON_in_recursive_procedure_declaration5927 = new BitSet(new long[]{0x0000000000000800L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_program_type_expression_in_recursive_procedure_declaration5929 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_SEMICOLON_in_recursive_procedure_declaration5933 = new BitSet(new long[]{0xC10404D102C17100L,0x8A00C10004000AA1L,0x000000108A080022L});
    public static final BitSet FOLLOW_affects_clause_in_recursive_procedure_declaration5943 = new BitSet(new long[]{0xC10404D102C17100L,0x8A00C10004000AA1L,0x000000108A080022L});
    public static final BitSet FOLLOW_decreasing_clause_in_recursive_procedure_declaration5954 = new BitSet(new long[]{0xC004045100C17000L,0x8800810004000AA1L,0x0000001088080000L});
    public static final BitSet FOLLOW_facility_declaration_in_recursive_procedure_declaration5965 = new BitSet(new long[]{0xC004045100C17000L,0x8800810004000AA1L,0x0000001088080000L});
    public static final BitSet FOLLOW_variable_declaration_in_recursive_procedure_declaration5976 = new BitSet(new long[]{0x0004000100807000L,0x80000000040000A0L,0x0000001088000000L});
    public static final BitSet FOLLOW_aux_variable_declaration_in_recursive_procedure_declaration5987 = new BitSet(new long[]{0x0004000100807000L,0x80000000040000A0L,0x0000001080000000L});
    public static final BitSet FOLLOW_statement_sequence_in_recursive_procedure_declaration6005 = new BitSet(new long[]{0x0004000000000000L});
    public static final BitSet FOLLOW_END_in_recursive_procedure_declaration6015 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_ident_in_recursive_procedure_declaration6020 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_SEMICOLON_in_recursive_procedure_declaration6033 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_operation_formal_param_section6161 = new BitSet(new long[]{0x0100000002000100L,0x0200400000000000L,0x0002000002000022L});
    public static final BitSet FOLLOW_operation_formal_param_group_in_operation_formal_param_section6175 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0002000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_SEMICOLON_in_operation_formal_param_section6190 = new BitSet(new long[]{0x0100000002000100L,0x0200400000000000L,0x0000000002000022L});
    public static final BitSet FOLLOW_operation_formal_param_group_in_operation_formal_param_section6192 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0002000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_RPAREN_in_operation_formal_param_section6207 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_abstract_mode_in_operation_formal_param_group6243 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_variable_declaration_group_in_operation_formal_param_group6245 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_VAR_in_variable_declaration6282 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_variable_declaration_group_in_variable_declaration6285 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_SEMICOLON_in_variable_declaration6287 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AUX_VAR_in_aux_variable_declaration6311 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_aux_variable_declaration_group_in_aux_variable_declaration6314 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_SEMICOLON_in_aux_variable_declaration6316 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_abstract_mode_in_affects_clause6341 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_qualified_ident_in_affects_clause6343 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000800000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_COMMA_in_affects_clause6346 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_qualified_ident_in_affects_clause6348 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000800000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_SEMICOLON_in_affects_clause6352 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_abstract_mode0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REQUIRES_in_requires_clause6489 = new BitSet(new long[]{0x0000000020240000L,0x0000002008000090L,0x0915501000020000L,0x000000000014C0A0L});
    public static final BitSet FOLLOW_math_expression_in_requires_clause6492 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_SEMICOLON_in_requires_clause6494 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ENSURES_in_ensures_clause6514 = new BitSet(new long[]{0x0000000020240000L,0x0000002008000090L,0x0915501000020000L,0x000000000014C0A0L});
    public static final BitSet FOLLOW_math_expression_in_ensures_clause6517 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_SEMICOLON_in_ensures_clause6519 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DURATION_in_duration_clause6539 = new BitSet(new long[]{0x0000000020240000L,0x0000002008000090L,0x0915501000020000L,0x000000000014C0A0L});
    public static final BitSet FOLLOW_math_expression_in_duration_clause6542 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_SEMICOLON_in_duration_clause6544 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MAINP_DISP_in_mainp_disp_clause6564 = new BitSet(new long[]{0x0000000020240000L,0x0000002008000090L,0x0915501000020000L,0x000000000014C0A0L});
    public static final BitSet FOLLOW_math_expression_in_mainp_disp_clause6567 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_SEMICOLON_in_mainp_disp_clause6569 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TYPE_in_type_declaration6599 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_FAMILY_in_type_declaration6601 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_ident_in_type_declaration6604 = new BitSet(new long[]{0x0000000000000000L,0x0000000001020000L});
    public static final BitSet FOLLOW_SUBSET_in_type_declaration6615 = new BitSet(new long[]{0x0000000020240000L,0x0000002008000000L,0x0915501000000000L,0x000000000014C0A0L});
    public static final BitSet FOLLOW_IS_in_type_declaration6620 = new BitSet(new long[]{0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_MODELED_in_type_declaration6622 = new BitSet(new long[]{0x0000000000100000L});
    public static final BitSet FOLLOW_BY_in_type_declaration6624 = new BitSet(new long[]{0x0000000020240000L,0x0000002008000000L,0x0915501000000000L,0x000000000014C0A0L});
    public static final BitSet FOLLOW_math_type_expression_in_type_declaration6636 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_SEMICOLON_in_type_declaration6638 = new BitSet(new long[]{0x0400000000000000L});
    public static final BitSet FOLLOW_EXEMPLAR_in_type_declaration6648 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_ident_in_type_declaration6650 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_SEMICOLON_in_type_declaration6652 = new BitSet(new long[]{0x0000000400000002L,0x0000000000002004L});
    public static final BitSet FOLLOW_constraint_clause_in_type_declaration6662 = new BitSet(new long[]{0x0000000000000002L,0x0000000000002004L});
    public static final BitSet FOLLOW_type_concept_init_declaration_in_type_declaration6673 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000004L});
    public static final BitSet FOLLOW_type_concept_final_declaration_in_type_declaration6684 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FAMILY_in_type_declaration6750 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_ident_in_type_declaration6752 = new BitSet(new long[]{0x0000000000000000L,0x0000000001020000L});
    public static final BitSet FOLLOW_SUBSET_in_type_declaration6763 = new BitSet(new long[]{0x0000000020240000L,0x0000002008000000L,0x0915501000000000L,0x000000000014C0A0L});
    public static final BitSet FOLLOW_IS_in_type_declaration6768 = new BitSet(new long[]{0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_MODELED_in_type_declaration6770 = new BitSet(new long[]{0x0000000000100000L});
    public static final BitSet FOLLOW_BY_in_type_declaration6772 = new BitSet(new long[]{0x0000000020240000L,0x0000002008000000L,0x0915501000000000L,0x000000000014C0A0L});
    public static final BitSet FOLLOW_math_type_expression_in_type_declaration6784 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_SEMICOLON_in_type_declaration6786 = new BitSet(new long[]{0x0400000000000000L});
    public static final BitSet FOLLOW_EXEMPLAR_in_type_declaration6796 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_ident_in_type_declaration6798 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_SEMICOLON_in_type_declaration6800 = new BitSet(new long[]{0x0000000400000002L,0x0000000000002004L});
    public static final BitSet FOLLOW_constraint_clause_in_type_declaration6810 = new BitSet(new long[]{0x0000000000000002L,0x0000000000002004L});
    public static final BitSet FOLLOW_type_concept_init_declaration_in_type_declaration6821 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000004L});
    public static final BitSet FOLLOW_type_concept_final_declaration_in_type_declaration6832 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TYPE_FAMILY_in_type_declaration6898 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_ident_in_type_declaration6901 = new BitSet(new long[]{0x0000000000000000L,0x0000000001020000L});
    public static final BitSet FOLLOW_SUBSET_in_type_declaration6912 = new BitSet(new long[]{0x0000000020240000L,0x0000002008000000L,0x0915501000000000L,0x000000000014C0A0L});
    public static final BitSet FOLLOW_IS_in_type_declaration6918 = new BitSet(new long[]{0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_MODELED_in_type_declaration6921 = new BitSet(new long[]{0x0000000000100000L});
    public static final BitSet FOLLOW_BY_in_type_declaration6924 = new BitSet(new long[]{0x0000000020240000L,0x0000002008000000L,0x0915501000000000L,0x000000000014C0A0L});
    public static final BitSet FOLLOW_math_type_expression_in_type_declaration6937 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_SEMICOLON_in_type_declaration6939 = new BitSet(new long[]{0x0400000000000000L});
    public static final BitSet FOLLOW_EXEMPLAR_in_type_declaration6950 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_ident_in_type_declaration6953 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_SEMICOLON_in_type_declaration6955 = new BitSet(new long[]{0x0000000400000002L,0x0000000000002004L});
    public static final BitSet FOLLOW_constraint_clause_in_type_declaration6966 = new BitSet(new long[]{0x0000000000000002L,0x0000000000002004L});
    public static final BitSet FOLLOW_type_concept_init_declaration_in_type_declaration6977 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000004L});
    public static final BitSet FOLLOW_type_concept_final_declaration_in_type_declaration6988 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TYPE_in_performance_type_declaration7011 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_FAMILY_in_performance_type_declaration7013 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_ident_in_performance_type_declaration7016 = new BitSet(new long[]{0x0000000000000000L,0x0000000001020000L});
    public static final BitSet FOLLOW_SUBSET_in_performance_type_declaration7027 = new BitSet(new long[]{0x0000000020240000L,0x0000002008000000L,0x0915501000000000L,0x000000000014C0A0L});
    public static final BitSet FOLLOW_IS_in_performance_type_declaration7032 = new BitSet(new long[]{0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_MODELED_in_performance_type_declaration7034 = new BitSet(new long[]{0x0000000000100000L});
    public static final BitSet FOLLOW_BY_in_performance_type_declaration7036 = new BitSet(new long[]{0x0000000020240000L,0x0000002008000000L,0x0915501000000000L,0x000000000014C0A0L});
    public static final BitSet FOLLOW_math_type_expression_in_performance_type_declaration7048 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_SEMICOLON_in_performance_type_declaration7050 = new BitSet(new long[]{0x0000000400000002L,0x0000000000002004L});
    public static final BitSet FOLLOW_constraint_clause_in_performance_type_declaration7060 = new BitSet(new long[]{0x0000000000000002L,0x0000000000002004L});
    public static final BitSet FOLLOW_performance_type_init_declaration_in_performance_type_declaration7071 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000004L});
    public static final BitSet FOLLOW_performance_type_final_declaration_in_performance_type_declaration7082 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FAMILY_in_performance_type_declaration7146 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_ident_in_performance_type_declaration7148 = new BitSet(new long[]{0x0000000000000000L,0x0000000001020000L});
    public static final BitSet FOLLOW_SUBSET_in_performance_type_declaration7159 = new BitSet(new long[]{0x0000000020240000L,0x0000002008000000L,0x0915501000000000L,0x000000000014C0A0L});
    public static final BitSet FOLLOW_IS_in_performance_type_declaration7164 = new BitSet(new long[]{0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_MODELED_in_performance_type_declaration7166 = new BitSet(new long[]{0x0000000000100000L});
    public static final BitSet FOLLOW_BY_in_performance_type_declaration7168 = new BitSet(new long[]{0x0000000020240000L,0x0000002008000000L,0x0915501000000000L,0x000000000014C0A0L});
    public static final BitSet FOLLOW_math_type_expression_in_performance_type_declaration7180 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_SEMICOLON_in_performance_type_declaration7182 = new BitSet(new long[]{0x0000000400000002L,0x0000000000002004L});
    public static final BitSet FOLLOW_constraint_clause_in_performance_type_declaration7192 = new BitSet(new long[]{0x0000000000000002L,0x0000000000002004L});
    public static final BitSet FOLLOW_performance_type_init_declaration_in_performance_type_declaration7203 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000004L});
    public static final BitSet FOLLOW_performance_type_final_declaration_in_performance_type_declaration7214 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TYPE_FAMILY_in_performance_type_declaration7278 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_ident_in_performance_type_declaration7281 = new BitSet(new long[]{0x0000000000000000L,0x0000000001020000L});
    public static final BitSet FOLLOW_SUBSET_in_performance_type_declaration7292 = new BitSet(new long[]{0x0000000020240000L,0x0000002008000000L,0x0915501000000000L,0x000000000014C0A0L});
    public static final BitSet FOLLOW_IS_in_performance_type_declaration7297 = new BitSet(new long[]{0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_MODELED_in_performance_type_declaration7300 = new BitSet(new long[]{0x0000000000100000L});
    public static final BitSet FOLLOW_BY_in_performance_type_declaration7303 = new BitSet(new long[]{0x0000000020240000L,0x0000002008000000L,0x0915501000000000L,0x000000000014C0A0L});
    public static final BitSet FOLLOW_math_type_expression_in_performance_type_declaration7315 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_SEMICOLON_in_performance_type_declaration7317 = new BitSet(new long[]{0x0000000400000002L,0x0000000000002004L});
    public static final BitSet FOLLOW_constraint_clause_in_performance_type_declaration7328 = new BitSet(new long[]{0x0000000000000002L,0x0000000000002004L});
    public static final BitSet FOLLOW_performance_type_init_declaration_in_performance_type_declaration7339 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000004L});
    public static final BitSet FOLLOW_performance_type_final_declaration_in_performance_type_declaration7350 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TYPE_in_type_representation_declaration7371 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_ident_in_type_representation_declaration7374 = new BitSet(new long[]{0x0000000000000000L,0x0000000000020000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_EQL_in_type_representation_declaration7377 = new BitSet(new long[]{0x0000000000000800L,0x0400000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_IS_in_type_representation_declaration7383 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_REPRESENTED_in_type_representation_declaration7386 = new BitSet(new long[]{0x0000000000100000L});
    public static final BitSet FOLLOW_BY_in_type_representation_declaration7389 = new BitSet(new long[]{0x0000000000000800L,0x0400000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_structural_program_type_expression_in_type_representation_declaration7402 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_SEMICOLON_in_type_representation_declaration7404 = new BitSet(new long[]{0x0000005000000002L,0x0000000000002004L});
    public static final BitSet FOLLOW_convention_clause_in_type_representation_declaration7416 = new BitSet(new long[]{0x0000004000000002L,0x0000000000002004L});
    public static final BitSet FOLLOW_correspondence_clause_in_type_representation_declaration7429 = new BitSet(new long[]{0x0000000000000002L,0x0000000000002004L});
    public static final BitSet FOLLOW_type_body_init_declaration_in_type_representation_declaration7442 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000004L});
    public static final BitSet FOLLOW_type_body_final_declaration_in_type_representation_declaration7455 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TYPE_in_facility_type_declaration7476 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_ident_in_facility_type_declaration7479 = new BitSet(new long[]{0x0000000000000000L,0x0000000000020000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_EQL_in_facility_type_declaration7482 = new BitSet(new long[]{0x0000000000000800L,0x0400000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_IS_in_facility_type_declaration7488 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_REPRESENTED_in_facility_type_declaration7491 = new BitSet(new long[]{0x0000000000100000L});
    public static final BitSet FOLLOW_BY_in_facility_type_declaration7494 = new BitSet(new long[]{0x0000000000000800L,0x0400000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_structural_program_type_expression_in_facility_type_declaration7507 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_SEMICOLON_in_facility_type_declaration7509 = new BitSet(new long[]{0x0000001000000002L,0x0000000000002004L});
    public static final BitSet FOLLOW_convention_clause_in_facility_type_declaration7521 = new BitSet(new long[]{0x0000000000000002L,0x0000000000002004L});
    public static final BitSet FOLLOW_type_facility_init_declaration_in_facility_type_declaration7534 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000004L});
    public static final BitSet FOLLOW_type_facility_final_declaration_in_facility_type_declaration7548 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FAC_INIT_in_module_concept_init_declaration7578 = new BitSet(new long[]{0x0140000002000100L,0x0200400000000000L,0x000000000200002AL});
    public static final BitSet FOLLOW_concept_init_final_section_in_module_concept_init_declaration7581 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FAC_FINAL_in_module_concept_final_declaration7612 = new BitSet(new long[]{0x0140000002000100L,0x0200400000000000L,0x000000000200002AL});
    public static final BitSet FOLLOW_concept_init_final_section_in_module_concept_final_declaration7615 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PERF_INIT_in_performance_module_init_declaration7644 = new BitSet(new long[]{0x0000400000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_performance_init_section_in_performance_module_init_declaration7647 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PERF_FINAL_in_performance_module_final_declaration7666 = new BitSet(new long[]{0x0000400000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_performance_final_section_in_performance_module_final_declaration7669 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FAC_INIT_in_module_body_init_declaration7691 = new BitSet(new long[]{0xC104045102C17100L,0x8A00C10004000AA1L,0x000000108A080022L});
    public static final BitSet FOLLOW_body_init_final_section_in_module_body_init_declaration7694 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FAC_FINAL_in_module_body_final_declaration7725 = new BitSet(new long[]{0xC104045102C17100L,0x8A00C10004000AA1L,0x000000108A080022L});
    public static final BitSet FOLLOW_body_init_final_section_in_module_body_final_declaration7728 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FAC_INIT_in_module_facility_init_declaration7759 = new BitSet(new long[]{0xC144045102C17100L,0x8A00C10004000AA1L,0x000000108A08002AL});
    public static final BitSet FOLLOW_facility_init_final_section_in_module_facility_init_declaration7762 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FAC_FINAL_in_module_facility_final_declaration7793 = new BitSet(new long[]{0xC144045102C17100L,0x8A00C10004000AA1L,0x000000108A08002AL});
    public static final BitSet FOLLOW_facility_init_final_section_in_module_facility_final_declaration7796 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INITIALIZATION_in_type_concept_init_declaration7827 = new BitSet(new long[]{0x0140000002000100L,0x0200400000000000L,0x000000000200002AL});
    public static final BitSet FOLLOW_concept_init_final_section_in_type_concept_init_declaration7830 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FINALIZATION_in_type_concept_final_declaration7849 = new BitSet(new long[]{0x0140000002000100L,0x0200400000000000L,0x000000000200002AL});
    public static final BitSet FOLLOW_concept_init_final_section_in_type_concept_final_declaration7852 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INITIALIZATION_in_performance_type_init_declaration7871 = new BitSet(new long[]{0x0000400000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_performance_init_section_in_performance_type_init_declaration7875 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FINALIZATION_in_performance_type_final_declaration7894 = new BitSet(new long[]{0x0000400000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_performance_final_section_in_performance_type_final_declaration7898 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INITIALIZATION_in_type_body_init_declaration7921 = new BitSet(new long[]{0xC104045102C17100L,0x8A00C10004000AA1L,0x000000108A080022L});
    public static final BitSet FOLLOW_body_init_final_section_in_type_body_init_declaration7924 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FINALIZATION_in_type_body_final_declaration7943 = new BitSet(new long[]{0xC104045102C17100L,0x8A00C10004000AA1L,0x000000108A080022L});
    public static final BitSet FOLLOW_body_init_final_section_in_type_body_final_declaration7946 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INITIALIZATION_in_type_facility_init_declaration7965 = new BitSet(new long[]{0xC144045102C17100L,0x8A00C10004000AA1L,0x000000108A08002AL});
    public static final BitSet FOLLOW_facility_init_final_section_in_type_facility_init_declaration7968 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FINALIZATION_in_type_facility_final_declaration7987 = new BitSet(new long[]{0xC144045102C17100L,0x8A00C10004000AA1L,0x000000108A08002AL});
    public static final BitSet FOLLOW_facility_init_final_section_in_type_facility_final_declaration7990 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_affects_clause_in_concept_init_final_section8012 = new BitSet(new long[]{0x0140000002000102L,0x0200400000000000L,0x000000000200002AL});
    public static final BitSet FOLLOW_requires_clause_in_concept_init_final_section8025 = new BitSet(new long[]{0x0040000000000002L});
    public static final BitSet FOLLOW_ensures_clause_in_concept_init_final_section8038 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_duration_clause_in_performance_init_section8060 = new BitSet(new long[]{0x0000000000000002L,0x0000000040000000L});
    public static final BitSet FOLLOW_mainp_disp_clause_in_performance_init_section8073 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_duration_clause_in_performance_final_section8095 = new BitSet(new long[]{0x0000000000000002L,0x0000000040000000L});
    public static final BitSet FOLLOW_mainp_disp_clause_in_performance_final_section8108 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_affects_clause_in_body_init_final_section8130 = new BitSet(new long[]{0xC104045102C17100L,0x8A00C10004000AA1L,0x000000108A080022L});
    public static final BitSet FOLLOW_facility_declaration_in_body_init_final_section8143 = new BitSet(new long[]{0xC004045100C17000L,0x8800810004000AA1L,0x0000001088080000L});
    public static final BitSet FOLLOW_variable_declaration_in_body_init_final_section8156 = new BitSet(new long[]{0x0004000100807000L,0x80000000040000A0L,0x0000001088000000L});
    public static final BitSet FOLLOW_aux_variable_declaration_in_body_init_final_section8169 = new BitSet(new long[]{0x0004000100807000L,0x80000000040000A0L,0x0000001080000000L});
    public static final BitSet FOLLOW_statement_sequence_in_body_init_final_section8181 = new BitSet(new long[]{0x0004000000000000L});
    public static final BitSet FOLLOW_END_in_body_init_final_section8191 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_SEMICOLON_in_body_init_final_section8194 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_affects_clause_in_facility_init_final_section8215 = new BitSet(new long[]{0xC144045102C17100L,0x8A00C10004000AA1L,0x000000108A08002AL});
    public static final BitSet FOLLOW_requires_clause_in_facility_init_final_section8228 = new BitSet(new long[]{0xC044045100C17000L,0x8800810004000AA1L,0x0000001088080000L});
    public static final BitSet FOLLOW_ensures_clause_in_facility_init_final_section8241 = new BitSet(new long[]{0xC004045100C17000L,0x8800810004000AA1L,0x0000001088080000L});
    public static final BitSet FOLLOW_facility_declaration_in_facility_init_final_section8254 = new BitSet(new long[]{0xC004045100C17000L,0x8800810004000AA1L,0x0000001088080000L});
    public static final BitSet FOLLOW_variable_declaration_in_facility_init_final_section8267 = new BitSet(new long[]{0x0004000100807000L,0x80000000040000A0L,0x0000001088000000L});
    public static final BitSet FOLLOW_aux_variable_declaration_in_facility_init_final_section8280 = new BitSet(new long[]{0x0004000100807000L,0x80000000040000A0L,0x0000001080000000L});
    public static final BitSet FOLLOW_statement_sequence_in_facility_init_final_section8292 = new BitSet(new long[]{0x0004000000000000L});
    public static final BitSet FOLLOW_END_in_facility_init_final_section8302 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_SEMICOLON_in_facility_init_final_section8305 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_if_statement_in_statement8333 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_selection_statement_in_statement8355 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_while_loop_statement_in_statement8377 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_iterate_loop_statement_in_statement8399 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_swap_statement_in_statement8428 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_function_assignment_in_statement8457 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_procedure_operation_call_in_statement8486 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_remember_statement_in_statement8508 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_forget_statement_in_statement8530 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_confirm_statement_in_statement8552 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_assume_statement_in_statement8574 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_aux_code_statement_in_statement8596 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_if_statement_in_in_aux_statement8637 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_selection_statement_in_in_aux_statement8659 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_while_loop_statement_in_in_aux_statement8681 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_iterate_loop_statement_in_in_aux_statement8703 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_swap_statement_in_in_aux_statement8732 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_function_assignment_in_in_aux_statement8761 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_procedure_operation_call_in_in_aux_statement8790 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_remember_statement_in_in_aux_statement8812 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_forget_statement_in_in_aux_statement8834 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_confirm_statement_in_in_aux_statement8856 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_assume_statement_in_in_aux_statement8878 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_aux_code_statement_in_in_aux_statement8900 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_statement_in_statement_sequence8939 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_SEMICOLON_in_statement_sequence8941 = new BitSet(new long[]{0x0000000100803002L,0x80000000040000A0L,0x0000001080000000L});
    public static final BitSet FOLLOW_in_aux_statement_in_in_aux_statement_sequence8976 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_SEMICOLON_in_in_aux_statement_sequence8978 = new BitSet(new long[]{0x0000000100803002L,0x80000000040000A0L,0x0000001080000000L});
    public static final BitSet FOLLOW_variable_expression_in_function_assignment9010 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_ASSIGN_OP_in_function_assignment9012 = new BitSet(new long[]{0x0000000000000000L,0x0000002000000000L,0x0801501000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_program_expression_in_function_assignment9015 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FORGET_in_forget_statement9036 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REMEMBER_in_remember_statement9055 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IF_in_if_statement9076 = new BitSet(new long[]{0x0000000000000000L,0x0000002000000000L,0x0801501000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_condition_in_if_statement9079 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_THEN_in_if_statement9089 = new BitSet(new long[]{0x0005000100803000L,0x80000000040000A0L,0x0000001080000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_statement_sequence_in_if_statement9092 = new BitSet(new long[]{0x0005000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_elsif_item_in_if_statement9103 = new BitSet(new long[]{0x0005000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_else_part_in_if_statement9116 = new BitSet(new long[]{0x0004000000000000L});
    public static final BitSet FOLLOW_END_in_if_statement9120 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ELSIF_in_elsif_item9140 = new BitSet(new long[]{0x0000000000000000L,0x0000002000000000L,0x0801501000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_condition_in_elsif_item9143 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_THEN_in_elsif_item9153 = new BitSet(new long[]{0x0000000100803000L,0x80000000040000A0L,0x0000001080000000L});
    public static final BitSet FOLLOW_statement_sequence_in_elsif_item9156 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ELSE_in_else_part9175 = new BitSet(new long[]{0x0000000100803000L,0x80000000040000A0L,0x0000001080000000L});
    public static final BitSet FOLLOW_statement_sequence_in_else_part9178 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_program_expression_in_condition9197 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AUX_CODE_in_aux_code_statement9217 = new BitSet(new long[]{0x0004000100803000L,0x80000000040000A0L,0x0000001080000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_in_aux_statement_sequence_in_aux_code_statement9228 = new BitSet(new long[]{0x0004000000000000L});
    public static final BitSet FOLLOW_END_in_aux_code_statement9230 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ITERATE_in_iterate_loop_statement9253 = new BitSet(new long[]{0x0000000001000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_changing_clause_in_iterate_loop_statement9265 = new BitSet(new long[]{0x0000000001000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_maintaining_clause_in_iterate_loop_statement9281 = new BitSet(new long[]{0x0000008100803000L,0x80000000040000A0L,0x00000010A0000000L});
    public static final BitSet FOLLOW_decreasing_clause_in_iterate_loop_statement9292 = new BitSet(new long[]{0x0000008100803000L,0x80000000040000A0L,0x00000010A0000000L});
    public static final BitSet FOLLOW_iterate_item_sequence_in_iterate_loop_statement9304 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_REPEAT_in_iterate_loop_statement9306 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_iterate_item_in_iterate_item_sequence9327 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_SEMICOLON_in_iterate_item_sequence9329 = new BitSet(new long[]{0x0000008100803002L,0x80000000040000A0L,0x00000010A0000000L});
    public static final BitSet FOLLOW_statement_in_iterate_item9351 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_iterate_exit_statement_in_iterate_item9361 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WHEN_in_iterate_exit_statement9380 = new BitSet(new long[]{0x0000000000000000L,0x0000002000000000L,0x0801501000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_condition_in_iterate_exit_statement9385 = new BitSet(new long[]{0x0000200000000000L});
    public static final BitSet FOLLOW_DO_in_iterate_exit_statement9395 = new BitSet(new long[]{0x2000000100803000L,0x80000000040000A0L,0x0000001080000000L});
    public static final BitSet FOLLOW_statement_sequence_in_iterate_exit_statement9398 = new BitSet(new long[]{0x2000000000000000L});
    public static final BitSet FOLLOW_EXIT_in_iterate_exit_statement9400 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_qualified_ident_in_procedure_operation_call9427 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_operation_argument_section_in_procedure_operation_call9429 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_operation_argument_section9466 = new BitSet(new long[]{0x0000000000000000L,0x0000002000000000L,0x0803501000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_program_expression_in_operation_argument_section9480 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0002800000000000L});
    public static final BitSet FOLLOW_COMMA_in_operation_argument_section9495 = new BitSet(new long[]{0x0000000000000000L,0x0000002000000000L,0x0801501000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_program_expression_in_operation_argument_section9497 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0002800000000000L});
    public static final BitSet FOLLOW_RPAREN_in_operation_argument_section9512 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CASE_in_selection_statement9542 = new BitSet(new long[]{0x0000000000000000L,0x0000002000000000L,0x0801501000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_program_expression_in_selection_statement9545 = new BitSet(new long[]{0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_OF_in_selection_statement9555 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_selection_alternative_sequence_in_selection_statement9558 = new BitSet(new long[]{0x0004000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_default_alternative_in_selection_statement9569 = new BitSet(new long[]{0x0004000000000000L});
    public static final BitSet FOLLOW_END_in_selection_statement9573 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_selection_alternative_in_selection_alternative_sequence9594 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_WHEN_in_selection_alternative9615 = new BitSet(new long[]{0x0000000000000000L,0x0000002000000000L,0x0801501000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_choices_in_selection_alternative9618 = new BitSet(new long[]{0x0000200000000000L});
    public static final BitSet FOLLOW_DO_in_selection_alternative9628 = new BitSet(new long[]{0x0000000100803000L,0x80000000040000A0L,0x0000001080000000L});
    public static final BitSet FOLLOW_statement_sequence_in_selection_alternative9631 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DEFAULT_in_default_alternative9650 = new BitSet(new long[]{0x0000000100803000L,0x80000000040000A0L,0x0000001080000000L});
    public static final BitSet FOLLOW_statement_sequence_in_default_alternative9653 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_program_expression_in_choice9672 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_choice_in_choices9691 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_DBL_BAR_in_choices9702 = new BitSet(new long[]{0x0000000000000000L,0x0000002000000000L,0x0801501000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_choice_in_choices9704 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_variable_expression_in_swap_statement9736 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_SWAP_OP_in_swap_statement9738 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_variable_expression_in_swap_statement9741 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CONFIRM_in_confirm_statement9766 = new BitSet(new long[]{0x0000000020240000L,0x0000002008000090L,0x0915501000020000L,0x000000000014C0A0L});
    public static final BitSet FOLLOW_math_expression_in_confirm_statement9769 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ASSUME_in_assume_statement9794 = new BitSet(new long[]{0x0000000020240000L,0x0000002008000090L,0x0915501000020000L,0x000000000014C0A0L});
    public static final BitSet FOLLOW_math_expression_in_assume_statement9797 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WHILE_in_while_loop_statement9818 = new BitSet(new long[]{0x0000000000000000L,0x0000002000000000L,0x0801501000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_condition_in_while_loop_statement9821 = new BitSet(new long[]{0x0000A08001000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_changing_clause_in_while_loop_statement9831 = new BitSet(new long[]{0x0000A08001000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_maintaining_clause_in_while_loop_statement9846 = new BitSet(new long[]{0x0000A08000000000L});
    public static final BitSet FOLLOW_decreasing_clause_in_while_loop_statement9857 = new BitSet(new long[]{0x0000A00000000000L});
    public static final BitSet FOLLOW_elapsed_time_clause_in_while_loop_statement9868 = new BitSet(new long[]{0x0000200000000000L});
    public static final BitSet FOLLOW_DO_in_while_loop_statement9879 = new BitSet(new long[]{0x0004000100803000L,0x80000000040000A0L,0x0000001080000000L});
    public static final BitSet FOLLOW_statement_sequence_in_while_loop_statement9882 = new BitSet(new long[]{0x0004000000000000L});
    public static final BitSet FOLLOW_END_in_while_loop_statement9884 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MAINTAINING_in_maintaining_clause9904 = new BitSet(new long[]{0x0000000020240000L,0x0000002008000090L,0x0915501000020000L,0x000000000014C0A0L});
    public static final BitSet FOLLOW_math_expression_in_maintaining_clause9907 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_SEMICOLON_in_maintaining_clause9909 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DECREASING_in_decreasing_clause9929 = new BitSet(new long[]{0x0000000020200000L,0x0000002008000000L,0x0915501000000000L,0x000000000014C0A0L});
    public static final BitSet FOLLOW_adding_expression_in_decreasing_clause9932 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_SEMICOLON_in_decreasing_clause9934 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ELAPSED_TIME_in_elapsed_time_clause9954 = new BitSet(new long[]{0x0000000020240000L,0x0000002008000090L,0x0915501000020000L,0x000000000014C0A0L});
    public static final BitSet FOLLOW_math_expression_in_elapsed_time_clause9957 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_SEMICOLON_in_elapsed_time_clause9959 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CHANGING_in_changing_clause9979 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_variable_expression_in_changing_clause9982 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000800000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_COMMA_in_changing_clause9993 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_variable_expression_in_changing_clause9996 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000800000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_SEMICOLON_in_changing_clause10000 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_qualified_ident_in_program_type_expression10029 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ARRAY_in_program_type_expression10053 = new BitSet(new long[]{0x0000000000000000L,0x0000002000000000L,0x0801501000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_array_range_in_program_type_expression10055 = new BitSet(new long[]{0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_OF_in_program_type_expression10069 = new BitSet(new long[]{0x0000000000000800L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_program_type_expression_in_program_type_expression10071 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RECORD_in_structural_program_type_expression10123 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_record_variable_declaration_group_in_structural_program_type_expression10135 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_SEMICOLON_in_structural_program_type_expression10137 = new BitSet(new long[]{0x0004000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_END_in_structural_program_type_expression10150 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_program_type_expression_in_structural_program_type_expression10161 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variable_id_list_in_record_variable_declaration_group10180 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_COLON_in_record_variable_declaration_group10182 = new BitSet(new long[]{0x0000000000000800L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_program_type_expression_in_record_variable_declaration_group10184 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AUX_VAR_in_record_aux_variable_declaration_group10225 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_variable_id_list_in_record_aux_variable_declaration_group10228 = new BitSet(new long[]{0x0000000000000800L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_program_type_expression_in_record_aux_variable_declaration_group10230 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_program_expression_in_array_range10249 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_RANGE_in_array_range10251 = new BitSet(new long[]{0x0000000000000000L,0x0000002000000000L,0x0801501000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_program_expression_in_array_range10254 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variable_id_list_in_variable_declaration_group10273 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_COLON_in_variable_declaration_group10275 = new BitSet(new long[]{0x0000000000000800L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_program_type_expression_in_variable_declaration_group10278 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variable_id_list_in_aux_variable_declaration_group10301 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_COLON_in_aux_variable_declaration_group10303 = new BitSet(new long[]{0x0000000000000800L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_program_type_expression_in_aux_variable_declaration_group10306 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ident_in_variable_id_list10325 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_COMMA_in_variable_id_list10328 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_ident_in_variable_id_list10331 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_infix_expression_in_math_type_expression10367 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_type_expression_argument_list10388 = new BitSet(new long[]{0x0000000020240000L,0x0000002008000000L,0x0915501000000000L,0x000000000014C0A0L});
    public static final BitSet FOLLOW_math_type_expression_in_type_expression_argument_list10390 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0002800000000000L});
    public static final BitSet FOLLOW_COMMA_in_type_expression_argument_list10401 = new BitSet(new long[]{0x0000000020240000L,0x0000002008000000L,0x0915501000000000L,0x000000000014C0A0L});
    public static final BitSet FOLLOW_math_type_expression_in_type_expression_argument_list10403 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0002800000000000L});
    public static final BitSet FOLLOW_RPAREN_in_type_expression_argument_list10407 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_math_variable_declaration_group_in_cartprod_variable_declaration_group10437 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variable_id_list_in_structural_math_variable_declaration_group10464 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_COLON_in_structural_math_variable_declaration_group10466 = new BitSet(new long[]{0x0000000020240000L,0x0000002008000000L,0x0915501000000000L,0x000000000014C0A0L});
    public static final BitSet FOLLOW_math_type_expression_in_structural_math_variable_declaration_group10468 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variable_id_list_in_math_variable_declaration_group10487 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_COLON_in_math_variable_declaration_group10489 = new BitSet(new long[]{0x0000000020240000L,0x0000002008000000L,0x0915501000000000L,0x000000000014C0A0L});
    public static final BitSet FOLLOW_math_type_expression_in_math_variable_declaration_group10491 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ident_in_math_variable_declaration10511 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_COLON_in_math_variable_declaration10513 = new BitSet(new long[]{0x0000000020240000L,0x0000002008000000L,0x0915501000000000L,0x000000000014C0A0L});
    public static final BitSet FOLLOW_math_type_expression_in_math_variable_declaration10515 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variable_id_list_in_implicit_type_parameter_group10538 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_COLON_in_implicit_type_parameter_group10540 = new BitSet(new long[]{0x0000000020240000L,0x0000002008000090L,0x0915501000020000L,0x000000000014C0A0L});
    public static final BitSet FOLLOW_math_expression_in_implicit_type_parameter_group10542 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_iterated_construct_in_math_expression10580 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_quantified_expression_in_math_expression10603 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_implies_expression_in_quantified_expression10644 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FOR_in_quantified_expression10654 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_ALL_in_quantified_expression10656 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_math_variable_declaration_group_in_quantified_expression10658 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000800040000000L});
    public static final BitSet FOLLOW_where_clause_in_quantified_expression10668 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_COMMA_in_quantified_expression10671 = new BitSet(new long[]{0x0000000020240000L,0x0000002008000090L,0x0915501000020000L,0x000000000014C0A0L});
    public static final BitSet FOLLOW_quantified_expression_in_quantified_expression10673 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_THERE_in_quantified_expression10722 = new BitSet(new long[]{0x1000000000000000L});
    public static final BitSet FOLLOW_EXISTS_in_quantified_expression10724 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_UNIQUE_in_quantified_expression10726 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_math_variable_declaration_group_in_quantified_expression10728 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000800040000800L});
    public static final BitSet FOLLOW_where_clause_in_quantified_expression10738 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000800000000800L});
    public static final BitSet FOLLOW_SUCH_in_quantified_expression10743 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_THAT_in_quantified_expression10745 = new BitSet(new long[]{0x0000000020240000L,0x0000002008000090L,0x0915501000020000L,0x000000000014C0A0L});
    public static final BitSet FOLLOW_COMMA_in_quantified_expression10750 = new BitSet(new long[]{0x0000000020240000L,0x0000002008000090L,0x0915501000020000L,0x000000000014C0A0L});
    public static final BitSet FOLLOW_quantified_expression_in_quantified_expression10753 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_THERE_in_quantified_expression10792 = new BitSet(new long[]{0x1000000000000000L});
    public static final BitSet FOLLOW_EXISTS_in_quantified_expression10795 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_math_variable_declaration_group_in_quantified_expression10798 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000800040000800L});
    public static final BitSet FOLLOW_where_clause_in_quantified_expression10808 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000800000000800L});
    public static final BitSet FOLLOW_SUCH_in_quantified_expression10813 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_THAT_in_quantified_expression10816 = new BitSet(new long[]{0x0000000020240000L,0x0000002008000090L,0x0915501000020000L,0x000000000014C0A0L});
    public static final BitSet FOLLOW_COMMA_in_quantified_expression10822 = new BitSet(new long[]{0x0000000020240000L,0x0000002008000090L,0x0915501000020000L,0x000000000014C0A0L});
    public static final BitSet FOLLOW_quantified_expression_in_quantified_expression10826 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_logical_expression_in_implies_expression10849 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000500L});
    public static final BitSet FOLLOW_IMPLIES_in_implies_expression10868 = new BitSet(new long[]{0x0000000020240000L,0x0000002008000000L,0x0915501000000000L,0x000000000014C0A0L});
    public static final BitSet FOLLOW_logical_expression_in_implies_expression10871 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IFF_in_implies_expression10889 = new BitSet(new long[]{0x0000000020240000L,0x0000002008000000L,0x0915501000000000L,0x000000000014C0A0L});
    public static final BitSet FOLLOW_logical_expression_in_implies_expression10892 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IF_in_implies_expression10935 = new BitSet(new long[]{0x0000000020240000L,0x0000002008000000L,0x0915501000000000L,0x000000000014C0A0L});
    public static final BitSet FOLLOW_logical_expression_in_implies_expression10938 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_THEN_in_implies_expression10952 = new BitSet(new long[]{0x0000000020240000L,0x0000002008000000L,0x0915501000000000L,0x000000000014C0A0L});
    public static final BitSet FOLLOW_logical_expression_in_implies_expression10955 = new BitSet(new long[]{0x0001000000000002L});
    public static final BitSet FOLLOW_ELSE_in_implies_expression11089 = new BitSet(new long[]{0x0000000020240000L,0x0000002008000000L,0x0915501000000000L,0x000000000014C0A0L});
    public static final BitSet FOLLOW_logical_expression_in_implies_expression11092 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_relational_expression_in_logical_expression11136 = new BitSet(new long[]{0x0000000000000402L,0x0000020000000000L});
    public static final BitSet FOLLOW_AND_in_logical_expression11154 = new BitSet(new long[]{0x0000000020240000L,0x0000002008000000L,0x0915501000000000L,0x000000000014C0A0L});
    public static final BitSet FOLLOW_OR_in_logical_expression11173 = new BitSet(new long[]{0x0000000020240000L,0x0000002008000000L,0x0915501000000000L,0x000000000014C0A0L});
    public static final BitSet FOLLOW_relational_expression_in_logical_expression11202 = new BitSet(new long[]{0x0000000000000402L,0x0000020000000000L});
    public static final BitSet FOLLOW_between_expression_in_relational_expression11264 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_infix_expression_in_relational_expression11279 = new BitSet(new long[]{0x0000000000000002L,0x0000000003FC0000L,0x0000000000000000L,0x000000000000007EL,0x0000000180000000L});
    public static final BitSet FOLLOW_EQL_in_relational_expression11297 = new BitSet(new long[]{0x0000000020240000L,0x0000002008000000L,0x0915501000000000L,0x000000000014C0A0L});
    public static final BitSet FOLLOW_NOT_EQL_in_relational_expression11316 = new BitSet(new long[]{0x0000000020240000L,0x0000002008000000L,0x0915501000000000L,0x000000000014C0A0L});
    public static final BitSet FOLLOW_LT_in_relational_expression11335 = new BitSet(new long[]{0x0000000020240000L,0x0000002008000000L,0x0915501000000000L,0x000000000014C0A0L});
    public static final BitSet FOLLOW_LT_EQL_in_relational_expression11354 = new BitSet(new long[]{0x0000000020240000L,0x0000002008000000L,0x0915501000000000L,0x000000000014C0A0L});
    public static final BitSet FOLLOW_GT_in_relational_expression11373 = new BitSet(new long[]{0x0000000020240000L,0x0000002008000000L,0x0915501000000000L,0x000000000014C0A0L});
    public static final BitSet FOLLOW_GT_EQL_in_relational_expression11392 = new BitSet(new long[]{0x0000000020240000L,0x0000002008000000L,0x0915501000000000L,0x000000000014C0A0L});
    public static final BitSet FOLLOW_IN_in_relational_expression11411 = new BitSet(new long[]{0x0000000020240000L,0x0000002008000000L,0x0915501000000000L,0x000000000014C0A0L});
    public static final BitSet FOLLOW_NOT_IN_in_relational_expression11430 = new BitSet(new long[]{0x0000000020240000L,0x0000002008000000L,0x0915501000000000L,0x000000000014C0A0L});
    public static final BitSet FOLLOW_SUBSET_in_relational_expression11449 = new BitSet(new long[]{0x0000000020240000L,0x0000002008000000L,0x0915501000000000L,0x000000000014C0A0L});
    public static final BitSet FOLLOW_NOT_SUBSET_in_relational_expression11468 = new BitSet(new long[]{0x0000000020240000L,0x0000002008000000L,0x0915501000000000L,0x000000000014C0A0L});
    public static final BitSet FOLLOW_PROP_SUBSET_in_relational_expression11487 = new BitSet(new long[]{0x0000000020240000L,0x0000002008000000L,0x0915501000000000L,0x000000000014C0A0L});
    public static final BitSet FOLLOW_NOT_PROP_SUBSET_in_relational_expression11506 = new BitSet(new long[]{0x0000000020240000L,0x0000002008000000L,0x0915501000000000L,0x000000000014C0A0L});
    public static final BitSet FOLLOW_SUBSTR_in_relational_expression11525 = new BitSet(new long[]{0x0000000020240000L,0x0000002008000000L,0x0915501000000000L,0x000000000014C0A0L});
    public static final BitSet FOLLOW_NOT_SUBSTR_in_relational_expression11544 = new BitSet(new long[]{0x0000000020240000L,0x0000002008000000L,0x0915501000000000L,0x000000000014C0A0L});
    public static final BitSet FOLLOW_PROP_SUBSTR_in_relational_expression11563 = new BitSet(new long[]{0x0000000020240000L,0x0000002008000000L,0x0915501000000000L,0x000000000014C0A0L});
    public static final BitSet FOLLOW_NOT_PROP_SUBSTR_in_relational_expression11582 = new BitSet(new long[]{0x0000000020240000L,0x0000002008000000L,0x0915501000000000L,0x000000000014C0A0L});
    public static final BitSet FOLLOW_infix_expression_in_relational_expression11611 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_infix_expression_in_between_expression11641 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000028L});
    public static final BitSet FOLLOW_LT_in_between_expression11661 = new BitSet(new long[]{0x0000000020240000L,0x0000002008000000L,0x0915501000000000L,0x000000000014C0A0L});
    public static final BitSet FOLLOW_LT_EQL_in_between_expression11681 = new BitSet(new long[]{0x0000000020240000L,0x0000002008000000L,0x0915501000000000L,0x000000000014C0A0L});
    public static final BitSet FOLLOW_infix_expression_in_between_expression11705 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000028L});
    public static final BitSet FOLLOW_LT_in_between_expression11725 = new BitSet(new long[]{0x0000000020240000L,0x0000002008000000L,0x0915501000000000L,0x000000000014C0A0L});
    public static final BitSet FOLLOW_LT_EQL_in_between_expression11745 = new BitSet(new long[]{0x0000000020240000L,0x0000002008000000L,0x0915501000000000L,0x000000000014C0A0L});
    public static final BitSet FOLLOW_infix_expression_in_between_expression11769 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_function_type_expression_in_infix_expression11849 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000100001L});
    public static final BitSet FOLLOW_RANGE_in_infix_expression11867 = new BitSet(new long[]{0x0000000020200000L,0x0000002008000000L,0x0915501000000000L,0x000000000014C0A0L});
    public static final BitSet FOLLOW_FREE_OPERATOR_in_infix_expression11886 = new BitSet(new long[]{0x0000000020200000L,0x0000002008000000L,0x0915501000000000L,0x000000000014C0A0L});
    public static final BitSet FOLLOW_function_type_expression_in_infix_expression11915 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BOOLEAN_in_infix_expression11939 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_adding_expression_in_function_type_expression11961 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_FUNCARROW_in_function_type_expression11964 = new BitSet(new long[]{0x0000000020200000L,0x0000002008000000L,0x0915501000000000L,0x000000000014C0A0L});
    public static final BitSet FOLLOW_adding_expression_in_function_type_expression11967 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_multiplying_expression_in_adding_expression11983 = new BitSet(new long[]{0x0000000000000002L,0x0000004000008000L,0x0C00000100200000L});
    public static final BitSet FOLLOW_PLUS_in_adding_expression12001 = new BitSet(new long[]{0x0000000020200000L,0x0000002008000000L,0x0915501000000000L,0x000000000014C0A0L});
    public static final BitSet FOLLOW_MINUS_in_adding_expression12020 = new BitSet(new long[]{0x0000000020200000L,0x0000002008000000L,0x0915501000000000L,0x000000000014C0A0L});
    public static final BitSet FOLLOW_CAT_in_adding_expression12039 = new BitSet(new long[]{0x0000000020200000L,0x0000002008000000L,0x0915501000000000L,0x000000000014C0A0L});
    public static final BitSet FOLLOW_UNION_in_adding_expression12058 = new BitSet(new long[]{0x0000000020200000L,0x0000002008000000L,0x0915501000000000L,0x000000000014C0A0L});
    public static final BitSet FOLLOW_INTERSECT_in_adding_expression12077 = new BitSet(new long[]{0x0000000020200000L,0x0000002008000000L,0x0915501000000000L,0x000000000014C0A0L});
    public static final BitSet FOLLOW_WITHOUT_in_adding_expression12096 = new BitSet(new long[]{0x0000000020200000L,0x0000002008000000L,0x0915501000000000L,0x000000000014C0A0L});
    public static final BitSet FOLLOW_multiplying_expression_in_adding_expression12125 = new BitSet(new long[]{0x0000000000000002L,0x0000004000008000L,0x0C00000100200000L});
    public static final BitSet FOLLOW_exponential_expression_in_multiplying_expression12155 = new BitSet(new long[]{0x0000100000000002L,0x4000000400000000L,0x6000000000000000L});
    public static final BitSet FOLLOW_MULTIPLY_in_multiplying_expression12173 = new BitSet(new long[]{0x0000000020200000L,0x0000002008000000L,0x0915501000000000L,0x000000000014C0A0L});
    public static final BitSet FOLLOW_DIVIDE_in_multiplying_expression12193 = new BitSet(new long[]{0x0000000020200000L,0x0000002008000000L,0x0915501000000000L,0x000000000014C0A0L});
    public static final BitSet FOLLOW_MOD_in_multiplying_expression12212 = new BitSet(new long[]{0x0000000020200000L,0x0000002008000000L,0x0915501000000000L,0x000000000014C0A0L});
    public static final BitSet FOLLOW_REM_in_multiplying_expression12231 = new BitSet(new long[]{0x0000000020200000L,0x0000002008000000L,0x0915501000000000L,0x000000000014C0A0L});
    public static final BitSet FOLLOW_DIV_in_multiplying_expression12250 = new BitSet(new long[]{0x0000000020200000L,0x0000002008000000L,0x0915501000000000L,0x000000000014C0A0L});
    public static final BitSet FOLLOW_exponential_expression_in_multiplying_expression12279 = new BitSet(new long[]{0x0000100000000002L,0x4000000400000000L,0x6000000000000000L});
    public static final BitSet FOLLOW_prefix_expression_in_exponential_expression12309 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_EXP_in_exponential_expression12320 = new BitSet(new long[]{0x0000000020200000L,0x0000002008000000L,0x0915501000000000L,0x000000000014C0A0L});
    public static final BitSet FOLLOW_exponential_expression_in_exponential_expression12323 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unary_expression_in_prefix_expression12344 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FREE_OPERATOR_in_prefix_expression12354 = new BitSet(new long[]{0x0000000020200000L,0x0000002008000000L,0x0915501000000000L,0x000000000014C0A0L});
    public static final BitSet FOLLOW_prefix_expression_in_prefix_expression12367 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_primitive_expression_in_unary_expression12386 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NOT_in_unary_expression12396 = new BitSet(new long[]{0x0000000020200000L,0x0000002008000000L,0x0915501000000000L,0x000000000004C0A0L});
    public static final BitSet FOLLOW_unary_expression_in_unary_expression12399 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COMPLEMENT_in_unary_expression12409 = new BitSet(new long[]{0x0000000020200000L,0x0000002008000000L,0x0915501000000000L,0x000000000004C0A0L});
    public static final BitSet FOLLOW_unary_expression_in_unary_expression12412 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MINUS_in_unary_expression12422 = new BitSet(new long[]{0x0000000020200000L,0x0000002008000000L,0x0915501000000000L,0x000000000004C0A0L});
    public static final BitSet FOLLOW_unary_expression_in_unary_expression12427 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_alternative_expression_in_primitive_expression12446 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_iterated_construct_in_primitive_expression12466 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_qualified_numeric_literal_in_primitive_expression12486 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_dot_expression_in_primitive_expression12496 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lambda_expression_in_primitive_expression12506 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_literal_expression_in_primitive_expression12516 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_outfix_expression_in_primitive_expression12526 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_constructor_in_primitive_expression12536 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_tuple_expression_in_primitive_expression12556 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_tagged_cartesian_product_type_expression_in_primitive_expression12566 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nested_expression_in_primitive_expression12576 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CARTPROD_in_tagged_cartesian_product_type_expression12599 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_cartprod_variable_declaration_group_in_tagged_cartesian_product_type_expression12611 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_SEMICOLON_in_tagged_cartesian_product_type_expression12613 = new BitSet(new long[]{0x0004000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_END_in_tagged_cartesian_product_type_expression12626 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_function_expression_in_dot_expression12661 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_DOT_in_dot_expression12664 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0100001000000000L});
    public static final BitSet FOLLOW_clean_function_expression_in_dot_expression12666 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_function_expression_in_dot_expression12701 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_HASH_in_function_expression12720 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0100001000000000L});
    public static final BitSet FOLLOW_clean_function_expression_in_function_expression12723 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_clean_function_expression_in_function_expression12733 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ident_in_clean_function_expression12763 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0201000000000000L});
    public static final BitSet FOLLOW_hat_expression_in_clean_function_expression12765 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0201000000000000L});
    public static final BitSet FOLLOW_function_argument_list_in_clean_function_expression12768 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0201000000000000L});
    public static final BitSet FOLLOW_ident_in_clean_function_expression12801 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CARAT_in_hat_expression12835 = new BitSet(new long[]{0x0000000000200000L,0x0000000008000000L,0x0115501000000000L,0x000000000004C0A0L});
    public static final BitSet FOLLOW_qualified_ident_in_hat_expression12839 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nested_expression_in_hat_expression12843 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_function_argument_list12863 = new BitSet(new long[]{0x0000000020240000L,0x0000002008000090L,0x0915501000020000L,0x000000000014C0A0L});
    public static final BitSet FOLLOW_math_expression_in_function_argument_list12865 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0002800000000000L});
    public static final BitSet FOLLOW_COMMA_in_function_argument_list12868 = new BitSet(new long[]{0x0000000020240000L,0x0000002008000090L,0x0915501000020000L,0x000000000014C0A0L});
    public static final BitSet FOLLOW_math_expression_in_function_argument_list12870 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0002800000000000L});
    public static final BitSet FOLLOW_RPAREN_in_function_argument_list12874 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DBL_LBRACE_in_alternative_expression12916 = new BitSet(new long[]{0x0000000020200000L,0x0000002008000000L,0x0915501000000000L,0x000000000014C0A0L});
    public static final BitSet FOLLOW_alternative_expression_item_in_alternative_expression12946 = new BitSet(new long[]{0x0000000020200000L,0x0000002008000000L,0x0935501000000000L,0x000000000014C0A0L});
    public static final BitSet FOLLOW_DBL_RBRACE_in_alternative_expression12958 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_adding_expression_in_alternative_expression_item12998 = new BitSet(new long[]{0x0000000000000000L,0x0000040000000080L});
    public static final BitSet FOLLOW_IF_in_alternative_expression_item13014 = new BitSet(new long[]{0x0000000020240000L,0x0000002008000000L,0x0915501000000000L,0x000000000014C0A0L});
    public static final BitSet FOLLOW_relational_expression_in_alternative_expression_item13017 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_OTHERWISE_in_alternative_expression_item13031 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_SEMICOLON_in_alternative_expression_item13054 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ident_in_iterated_construct13076 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_ident_in_iterated_construct13088 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_COLON_in_iterated_construct13098 = new BitSet(new long[]{0x0000000020240000L,0x0000002008000000L,0x0915501000000000L,0x000000000014C0A0L});
    public static final BitSet FOLLOW_math_type_expression_in_iterated_construct13100 = new BitSet(new long[]{0x0000000000000000L,0x0000008000000000L,0x0000800040000000L});
    public static final BitSet FOLLOW_where_clause_in_iterated_construct13112 = new BitSet(new long[]{0x0000000000000000L,0x0000008000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_COMMA_in_iterated_construct13125 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0004000000000000L});
    public static final BitSet FOLLOW_OF_in_iterated_construct13129 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0004000000000000L});
    public static final BitSet FOLLOW_LBRACE_in_iterated_construct13132 = new BitSet(new long[]{0x0000000020240000L,0x0000002008000090L,0x0915501000020000L,0x000000000014C0A0L});
    public static final BitSet FOLLOW_math_expression_in_iterated_construct13134 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0008000000000000L});
    public static final BitSet FOLLOW_RBRACE_in_iterated_construct13136 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LAMBDA_in_lambda_expression13183 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_ident_in_lambda_expression13186 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_COLON_in_lambda_expression13188 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_certain_qualified_ident_in_lambda_expression13215 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_ident_in_lambda_expression13229 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_DOT_in_lambda_expression13249 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_lambda_expression13252 = new BitSet(new long[]{0x0000000020240000L,0x0000002008000090L,0x0915501000020000L,0x000000000014C0A0L});
    public static final BitSet FOLLOW_math_expression_in_lambda_expression13255 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_lambda_expression13257 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_literal_expression0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_program_literal_expression0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ident_in_qualified_numeric_literal13368 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_DOT_in_qualified_numeric_literal13370 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_NUMERIC_LITERAL_in_qualified_numeric_literal13372 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_nested_expression13401 = new BitSet(new long[]{0x0000000020240000L,0x0000002008000090L,0x0915501000020000L,0x000000000014C0A0L});
    public static final BitSet FOLLOW_math_expression_in_nested_expression13403 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_nested_expression13405 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LT_in_outfix_expression13435 = new BitSet(new long[]{0x0000000020240000L,0x0000002008000000L,0x0915501000000000L,0x000000000014C0A0L});
    public static final BitSet FOLLOW_infix_expression_in_outfix_expression13437 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_GT_in_outfix_expression13439 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LL_in_outfix_expression13461 = new BitSet(new long[]{0x0000000020240000L,0x0000002008000090L,0x0915501000020000L,0x000000000014C0A0L});
    public static final BitSet FOLLOW_math_expression_in_outfix_expression13464 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_GG_in_outfix_expression13466 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BAR_in_outfix_expression13486 = new BitSet(new long[]{0x0000000020240000L,0x0000002008000090L,0x0915501000020000L,0x000000000014C0A0L});
    public static final BitSet FOLLOW_math_expression_in_outfix_expression13489 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_BAR_in_outfix_expression13491 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DBL_BAR_in_outfix_expression13502 = new BitSet(new long[]{0x0000000020240000L,0x0000002008000090L,0x0915501000020000L,0x000000000014C0A0L});
    public static final BitSet FOLLOW_math_expression_in_outfix_expression13505 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_DBL_BAR_in_outfix_expression13507 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_parenthesized_expression13527 = new BitSet(new long[]{0x0000000020240000L,0x0000002008000090L,0x0915501000020000L,0x000000000014C0A0L});
    public static final BitSet FOLLOW_math_expression_in_parenthesized_expression13530 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_parenthesized_expression13532 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LBRACE_in_set_constructor13552 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_ident_in_set_constructor13555 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_COLON_in_set_constructor13565 = new BitSet(new long[]{0x0000000020240000L,0x0000002008000000L,0x0915501000000000L,0x000000000014C0A0L});
    public static final BitSet FOLLOW_math_type_expression_in_set_constructor13568 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000040000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_where_clause_in_set_constructor13579 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_BAR_in_set_constructor13583 = new BitSet(new long[]{0x0000000020240000L,0x0000002008000090L,0x0915501000020000L,0x000000000014C0A0L});
    public static final BitSet FOLLOW_math_expression_in_set_constructor13594 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0008000000000000L});
    public static final BitSet FOLLOW_RBRACE_in_set_constructor13596 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_tuple_expression13616 = new BitSet(new long[]{0x0000000020240000L,0x0000002008000090L,0x0915501000020000L,0x000000000014C0A0L});
    public static final BitSet FOLLOW_math_expression_in_tuple_expression13618 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0002800000000000L});
    public static final BitSet FOLLOW_COMMA_in_tuple_expression13621 = new BitSet(new long[]{0x0000000020240000L,0x0000002008000090L,0x0915501000020000L,0x000000000014C0A0L});
    public static final BitSet FOLLOW_math_expression_in_tuple_expression13623 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0002800000000000L});
    public static final BitSet FOLLOW_RPAREN_in_tuple_expression13627 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WHERE_in_where_clause13655 = new BitSet(new long[]{0x0000000020240000L,0x0000002008000090L,0x0915501000020000L,0x000000000014C0A0L});
    public static final BitSet FOLLOW_math_expression_in_where_clause13658 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_program_logical_expression_in_program_expression13681 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_program_relational_expression_in_program_logical_expression13708 = new BitSet(new long[]{0x0000000000000402L,0x0000020000000000L});
    public static final BitSet FOLLOW_AND_in_program_logical_expression13726 = new BitSet(new long[]{0x0000000000000000L,0x0000002000000000L,0x0801501000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_OR_in_program_logical_expression13745 = new BitSet(new long[]{0x0000000000000000L,0x0000002000000000L,0x0801501000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_program_relational_expression_in_program_logical_expression13774 = new BitSet(new long[]{0x0000000000000402L,0x0000020000000000L});
    public static final BitSet FOLLOW_program_adding_expression_in_program_relational_expression13804 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x000000000000007EL});
    public static final BitSet FOLLOW_EQL_in_program_relational_expression13822 = new BitSet(new long[]{0x0000000000000000L,0x0000002000000000L,0x0801501000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_NOT_EQL_in_program_relational_expression13841 = new BitSet(new long[]{0x0000000000000000L,0x0000002000000000L,0x0801501000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_LT_in_program_relational_expression13860 = new BitSet(new long[]{0x0000000000000000L,0x0000002000000000L,0x0801501000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_LT_EQL_in_program_relational_expression13879 = new BitSet(new long[]{0x0000000000000000L,0x0000002000000000L,0x0801501000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_GT_in_program_relational_expression13898 = new BitSet(new long[]{0x0000000000000000L,0x0000002000000000L,0x0801501000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_GT_EQL_in_program_relational_expression13917 = new BitSet(new long[]{0x0000000000000000L,0x0000002000000000L,0x0801501000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_program_adding_expression_in_program_relational_expression13946 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_program_multiplying_expression_in_program_adding_expression13976 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0C00000000000000L});
    public static final BitSet FOLLOW_PLUS_in_program_adding_expression13994 = new BitSet(new long[]{0x0000000000000000L,0x0000002000000000L,0x0801501000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_MINUS_in_program_adding_expression14013 = new BitSet(new long[]{0x0000000000000000L,0x0000002000000000L,0x0801501000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_program_multiplying_expression_in_program_adding_expression14042 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0C00000000000000L});
    public static final BitSet FOLLOW_program_exponential_expression_in_program_multiplying_expression14072 = new BitSet(new long[]{0x0000100000000002L,0x4000000400000000L,0x6000000000000000L});
    public static final BitSet FOLLOW_MULTIPLY_in_program_multiplying_expression14090 = new BitSet(new long[]{0x0000000000000000L,0x0000002000000000L,0x0801501000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_DIVIDE_in_program_multiplying_expression14110 = new BitSet(new long[]{0x0000000000000000L,0x0000002000000000L,0x0801501000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_MOD_in_program_multiplying_expression14129 = new BitSet(new long[]{0x0000000000000000L,0x0000002000000000L,0x0801501000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_REM_in_program_multiplying_expression14148 = new BitSet(new long[]{0x0000000000000000L,0x0000002000000000L,0x0801501000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_DIV_in_program_multiplying_expression14167 = new BitSet(new long[]{0x0000000000000000L,0x0000002000000000L,0x0801501000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_program_exponential_expression_in_program_multiplying_expression14196 = new BitSet(new long[]{0x0000100000000002L,0x4000000400000000L,0x6000000000000000L});
    public static final BitSet FOLLOW_program_unary_expression_in_program_exponential_expression14226 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_EXP_in_program_exponential_expression14237 = new BitSet(new long[]{0x0000000000000000L,0x0000002000000000L,0x0801501000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_program_exponential_expression_in_program_exponential_expression14240 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_program_primitive_expression_in_program_unary_expression14261 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NOT_in_program_unary_expression14271 = new BitSet(new long[]{0x0000000000000000L,0x0000002000000000L,0x0801501000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_program_unary_expression_in_program_unary_expression14274 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MINUS_in_program_unary_expression14286 = new BitSet(new long[]{0x0000000000000000L,0x0000002000000000L,0x0801501000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_program_unary_expression_in_program_unary_expression14288 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_program_literal_expression_in_program_primitive_expression14316 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_program_variable_expression_in_program_primitive_expression14326 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_program_nested_expression_in_program_primitive_expression14336 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_program_dot_expression_in_program_variable_expression14370 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variable_expression_in_program_variable_expression14380 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ident_in_program_dot_expression14415 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_DOT_in_program_dot_expression14426 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_program_function_expression_in_program_dot_expression14428 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_program_function_expression_in_program_dot_expression14451 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ident_in_program_function_expression14472 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_program_function_argument_list_in_program_function_expression14474 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_program_function_argument_list14513 = new BitSet(new long[]{0x0000000000000000L,0x0000002000000000L,0x0803501000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_program_expression_in_program_function_argument_list14516 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0002800000000000L});
    public static final BitSet FOLLOW_COMMA_in_program_function_argument_list14519 = new BitSet(new long[]{0x0000000000000000L,0x0000002000000000L,0x0801501000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_program_expression_in_program_function_argument_list14521 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0002800000000000L});
    public static final BitSet FOLLOW_RPAREN_in_program_function_argument_list14527 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_program_nested_expression14563 = new BitSet(new long[]{0x0000000000000000L,0x0000002000000000L,0x0801501000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_program_expression_in_program_nested_expression14565 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_program_nested_expression14567 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variable_array_expression_in_variable_expression14614 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_DOT_in_variable_expression14625 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_variable_array_expression_in_variable_expression14627 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_variable_array_expression_in_variable_expression14648 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ident_in_variable_array_expression14668 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_variable_array_argument_list_in_variable_array_expression14689 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LSQBRACK_in_variable_array_argument_list14729 = new BitSet(new long[]{0x0000000000000000L,0x0000002000000000L,0x0881501000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_program_expression_in_variable_array_argument_list14732 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_RSQBRACK_in_variable_array_argument_list14736 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ident_in_certain_qualified_ident14768 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_DOT_in_certain_qualified_ident14770 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_ident_in_certain_qualified_ident14772 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ident_in_qualified_ident14801 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_DOT_in_qualified_ident14804 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_ident_in_qualified_ident14806 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENTIFIER_in_ident14839 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ident_in_math_theorem_ident14858 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NUMERIC_LITERAL_in_math_theorem_ident14868 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PROOF_in_proof_module14895 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_UNIT_in_proof_module14897 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_ident_in_proof_module14901 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_SEMICOLON_in_proof_module14903 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0001000004000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_module_formal_param_section_in_proof_module14913 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000004000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_uses_list_in_proof_module14924 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_SEMICOLON_in_proof_module14936 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PROOFS_FOR_in_proof_module14994 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_ident_in_proof_module14999 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_SEMICOLON_in_proof_module15001 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0001000004000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_module_formal_param_section_in_proof_module15012 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000004000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_uses_list_in_proof_module15023 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_SEMICOLON_in_proof_module15035 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_math_item_sequence_in_proof_module_body15060 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_proof_in_proof_module_body15078 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PROOF_in_proof15110 = new BitSet(new long[]{0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_OF_in_proof15113 = new BitSet(new long[]{0x0000002000000000L,0x0008000010000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_math_item_reference_in_proof15124 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_COLON_in_proof15134 = new BitSet(new long[]{0x0000040020240000L,0x0010002008000090L,0x0955501000021000L,0x000000000014C0A0L,0x0000000200000000L});
    public static final BitSet FOLLOW_base_case_statement_head_in_proof15161 = new BitSet(new long[]{0x0000040020240000L,0x0010002008000090L,0x0955501000021000L,0x000000000014C0A0L,0x0000000200000000L});
    public static final BitSet FOLLOW_base_case_statement_body_in_proof15181 = new BitSet(new long[]{0x0000040020240000L,0x0010002008000090L,0x0955501000021000L,0x000000000014C0A0L,0x0000000200000000L});
    public static final BitSet FOLLOW_inductive_case_statement_head_in_proof15207 = new BitSet(new long[]{0x0000040020240000L,0x0010002008000090L,0x0955501000021000L,0x000000000014C0A0L,0x0000000200000000L});
    public static final BitSet FOLLOW_inductive_case_statement_body_in_proof15227 = new BitSet(new long[]{0x0000040020240000L,0x0010002008000090L,0x0955501000021000L,0x000000000014C0A0L,0x0000000200000000L});
    public static final BitSet FOLLOW_headed_proof_expression_in_proof15249 = new BitSet(new long[]{0x0000040020240000L,0x0010002008000090L,0x0955501000021000L,0x000000000014C0A0L,0x0000000200000000L});
    public static final BitSet FOLLOW_proof_expression_in_proof15261 = new BitSet(new long[]{0x0000040020240000L,0x0010002008000090L,0x0955501000021000L,0x000000000014C0A0L,0x0000000200000000L});
    public static final BitSet FOLLOW_QED_in_proof15274 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LSQBRACK_in_base_case_statement_head15298 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_base_case_statement_head15301 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_RSQBRACK_in_base_case_statement_head15304 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_base_case_statement_body_in_base_case_statement_head15307 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_base_case_statement_body15330 = new BitSet(new long[]{0x0000000000080000L});
    public static final BitSet FOLLOW_BASECASE_in_base_case_statement_body15333 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_base_case_statement_body15336 = new BitSet(new long[]{0x0000040020240000L,0x0000002008000090L,0x0955501000021000L,0x000000000014C0A0L,0x0000000200000000L});
    public static final BitSet FOLLOW_proof_expression_in_base_case_statement_body15339 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LSQBRACK_in_inductive_case_statement_head15362 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_inductive_case_statement_head15365 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_RSQBRACK_in_inductive_case_statement_head15368 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_inductive_case_statement_body_in_inductive_case_statement_head15371 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_inductive_case_statement_body15394 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_INDUCTIVECASE_in_inductive_case_statement_body15397 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_inductive_case_statement_body15400 = new BitSet(new long[]{0x0000040020240000L,0x0000002008000090L,0x0955501000021000L,0x000000000014C0A0L,0x0000000200000000L});
    public static final BitSet FOLLOW_proof_expression_in_inductive_case_statement_body15403 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_theorem_name_in_math_item_reference15428 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lemma_name_in_math_item_reference15446 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_property_name_in_math_item_reference15464 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_corollary_name_in_math_item_reference15482 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_THEOREM_in_theorem_name15519 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_ident_in_theorem_name15522 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEMMA_in_lemma_name15545 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_ident_in_lemma_name15548 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PROPERTY_in_property_name15567 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_ident_in_property_name15570 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COROLLARY_in_corollary_name15593 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000101000000000L});
    public static final BitSet FOLLOW_math_theorem_ident_in_corollary_name15596 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_headed_proof_expression_in_proof_expression_list15679 = new BitSet(new long[]{0x0000040020240002L,0x0000002008000090L,0x0955501000021000L,0x000000000014C0A0L,0x0000000200000000L});
    public static final BitSet FOLLOW_proof_expression_in_proof_expression_list15699 = new BitSet(new long[]{0x0000040020240002L,0x0000002008000090L,0x0955501000021000L,0x000000000014C0A0L,0x0000000200000000L});
    public static final BitSet FOLLOW_LSQBRACK_in_headed_proof_expression15741 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_headed_proof_expression15744 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_RSQBRACK_in_headed_proof_expression15747 = new BitSet(new long[]{0x0000040020240000L,0x0000002008000090L,0x0955501000021000L,0x000000000014C0A0L,0x0000000200000000L});
    public static final BitSet FOLLOW_proof_expression_in_headed_proof_expression15750 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_goal_declaration_in_proof_expression15775 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_standard_definition_declaration_in_proof_expression15785 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_supposition_deduction_pair_in_proof_expression15795 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_justification_declaration_in_proof_expression15805 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_GOAL_in_goal_declaration15834 = new BitSet(new long[]{0x0000000020240000L,0x0000002008000090L,0x0915501000020000L,0x000000000014C0A0L});
    public static final BitSet FOLLOW_math_expression_in_goal_declaration15837 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_SEMICOLON_in_goal_declaration15839 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_supposition_declaration_in_supposition_deduction_pair15863 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_SEMICOLON_in_supposition_deduction_pair15865 = new BitSet(new long[]{0x0000050020240000L,0x0000002008000090L,0x0955501000021000L,0x000000000014C0A0L,0x0000000200000000L});
    public static final BitSet FOLLOW_proof_expression_list_in_supposition_deduction_pair15875 = new BitSet(new long[]{0x0000050020240000L,0x0000002008000090L,0x0955501000021000L,0x000000000014C0A0L,0x0000000200000000L});
    public static final BitSet FOLLOW_LSQBRACK_in_supposition_deduction_pair15886 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_supposition_deduction_pair15888 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_RSQBRACK_in_supposition_deduction_pair15890 = new BitSet(new long[]{0x0000050020240000L,0x0000002008000090L,0x0955501000021000L,0x000000000014C0A0L,0x0000000200000000L});
    public static final BitSet FOLLOW_deduction_declaration_in_supposition_deduction_pair15902 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_SEMICOLON_in_supposition_deduction_pair15904 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SUPPOSITION_in_supposition_declaration15950 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_math_variable_declarations_in_supposition_declaration15983 = new BitSet(new long[]{0x0000000000000402L});
    public static final BitSet FOLLOW_AND_in_supposition_declaration15986 = new BitSet(new long[]{0x0000000020240000L,0x0000002008000090L,0x0915501000020000L,0x000000000014C0A0L});
    public static final BitSet FOLLOW_math_expression_in_supposition_declaration15989 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_math_variable_declarations_in_supposition_declaration16019 = new BitSet(new long[]{0x0000000000000402L});
    public static final BitSet FOLLOW_AND_in_supposition_declaration16022 = new BitSet(new long[]{0x0000000020240000L,0x0000002008000090L,0x0915501000020000L,0x000000000014C0A0L});
    public static final BitSet FOLLOW_math_expression_in_supposition_declaration16025 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_math_variable_declaration_group_in_math_variable_declarations16073 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_COMMA_in_math_variable_declarations16076 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_math_variable_declaration_group_in_math_variable_declarations16078 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_DEDUCTION_in_deduction_declaration16120 = new BitSet(new long[]{0x0000000020240000L,0x0000002008000090L,0x0915501000020000L,0x000000000014C0A0L});
    public static final BitSet FOLLOW_math_expression_in_deduction_declaration16123 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_math_expression_in_justification_declaration16146 = new BitSet(new long[]{0x0000000000100000L});
    public static final BitSet FOLLOW_justification_in_justification_declaration16148 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_SEMICOLON_in_justification_declaration16150 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BY_in_justification16183 = new BitSet(new long[]{0x0A00042200000000L,0x1028020010000000L,0x0001001001009080L});
    public static final BitSet FOLLOW_double_hyp_rule_justification_in_justification16204 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_single_hyp_rule_justification_in_justification16222 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_hyp_desig_in_justification16238 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_simple_justification_in_justification16248 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_def_justification_in_justification16264 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_hyp_desig_in_double_hyp_rule_justification16292 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_COMMA_in_double_hyp_rule_justification16294 = new BitSet(new long[]{0x0000042000000000L,0x0008000010000000L,0x0001001000009080L});
    public static final BitSet FOLLOW_hyp_desig_in_double_hyp_rule_justification16297 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_AMPERSAND_in_double_hyp_rule_justification16306 = new BitSet(new long[]{0x0080000804000600L,0x0000001000000000L});
    public static final BitSet FOLLOW_rules_set_1_in_double_hyp_rule_justification16309 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_hyp_desig_in_single_hyp_rule_justification16330 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_AMPERSAND_in_single_hyp_rule_justification16332 = new BitSet(new long[]{0x0A80042A04000600L,0x1028021010000000L,0x0001001001009080L});
    public static final BitSet FOLLOW_rules_set_1_in_single_hyp_rule_justification16336 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rules_set_2_in_single_hyp_rule_justification16340 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_def_justification_in_single_hyp_rule_justification16344 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DEFINITION_in_def_justification16371 = new BitSet(new long[]{0x0000100020000410L,0x4000026403FC8500L,0xEC00001100600000L,0x000000000000007FL,0x0000000000E00000L});
    public static final BitSet FOLLOW_UNIQUE_in_def_justification16381 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fn_name_in_def_justification16387 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_def_justification16397 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_ident_in_def_justification16399 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_def_justification16401 = new BitSet(new long[]{0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_OF_in_def_justification16403 = new BitSet(new long[]{0x0000040000000000L});
    public static final BitSet FOLLOW_DEFINITION_in_def_justification16405 = new BitSet(new long[]{0x0000100020000410L,0x4000026403FC8500L,0xEC00001100600000L,0x000000000000007FL,0x0000000000E00000L});
    public static final BitSet FOLLOW_fn_name_in_def_justification16407 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000008L});
    public static final BitSet FOLLOW_FROM_in_def_justification16410 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_ident_in_def_justification16412 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rules_set_2_in_simple_justification16452 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rules_set_3_in_simple_justification16456 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MODUS_in_rules_set_116479 = new BitSet(new long[]{0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_PONENS_in_rules_set_116481 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AND_in_rules_set_116499 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_RULE_in_rules_set_116501 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CONTRADICTION_in_rules_set_116519 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EQUALITY_in_rules_set_116537 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ALTERNATIVE_in_rules_set_116555 = new BitSet(new long[]{0x0002000000000000L});
    public static final BitSet FOLLOW_ELIMINATION_in_rules_set_116557 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COMMON_in_rules_set_116575 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_CONCLUSION_in_rules_set_116577 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REDUCTIO_in_rules_set_216619 = new BitSet(new long[]{0x0000000000000020L});
    public static final BitSet FOLLOW_AD_in_rules_set_216621 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_ABSURDUM_in_rules_set_216623 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_UNIVERSAL_in_rules_set_216648 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_GENERALIZATION_in_rules_set_216650 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_UNIVERSAL_in_rules_set_216668 = new BitSet(new long[]{0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_INSTANTIATION_in_rules_set_216670 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EXISTENTIAL_in_rules_set_216695 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_GENERALIZATION_in_rules_set_216697 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EXISTENTIAL_in_rules_set_216715 = new BitSet(new long[]{0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_INSTANTIATION_in_rules_set_216717 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OR_in_rules_set_216736 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_RULE_in_rules_set_216738 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CONJUNCT_in_rules_set_216757 = new BitSet(new long[]{0x0002000000000000L});
    public static final BitSet FOLLOW_ELIMINATION_in_rules_set_216759 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_QUANTIFIER_in_rules_set_216777 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_DISTRIBUTION_in_rules_set_216779 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EXCLUDED_in_rules_set_316814 = new BitSet(new long[]{0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_MIDDLE_in_rules_set_316816 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SELF_in_hyp_desig16850 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lemma_call_in_hyp_desig16866 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_theorem_call_in_hyp_desig16882 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_corollary_name_in_hyp_desig16898 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_supposition_call_in_hyp_desig16914 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_definition_call_in_hyp_desig16930 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_reference_marker_call_in_hyp_desig16946 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEMMA_in_lemma_call16980 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_ident_in_lemma_call16983 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_THEOREM_in_theorem_call17002 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_ident_in_theorem_call17005 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SUPPOSITION_in_supposition_call17024 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_definition_call17044 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_ident_in_definition_call17046 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_definition_call17048 = new BitSet(new long[]{0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_OF_in_definition_call17051 = new BitSet(new long[]{0x0000040000000000L});
    public static final BitSet FOLLOW_DEFINITION_in_definition_call17063 = new BitSet(new long[]{0x0000100020000410L,0x4000026403FC8500L,0xEC00001100600000L,0x000000000000007FL,0x0000000000E00000L});
    public static final BitSet FOLLOW_fn_name_in_definition_call17066 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000008L,0x0001000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_definition_call17069 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_qualified_ident_in_definition_call17072 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_COMMA_in_definition_call17075 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_ident_in_definition_call17078 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_definition_call17081 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000008L});
    public static final BitSet FOLLOW_FROM_in_definition_call17093 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_ident_in_definition_call17096 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ident_in_reference_marker_call17121 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_infix_symbol_in_fn_name17148 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_prefix_symbol_in_fn_name17152 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ident_in_fn_name17156 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ident_in_synpred1_RParser1679 = new BitSet(new long[]{0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_OF_in_synpred1_RParser1681 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ENHANCED_in_synpred2_RParser1911 = new BitSet(new long[]{0x0000000000100000L});
    public static final BitSet FOLLOW_BY_in_synpred2_RParser1913 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_ident_in_synpred2_RParser1916 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_module_argument_section_in_synpred2_RParser1926 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OPERATION_in_synpred3_RParser2153 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_ident_in_synpred3_RParser2155 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_operation_formal_param_section_in_synpred3_RParser2165 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000C00L});
    public static final BitSet FOLLOW_COLON_in_synpred3_RParser2176 = new BitSet(new long[]{0x0000000000000800L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_program_type_expression_in_synpred3_RParser2178 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_SEMICOLON_in_synpred3_RParser2182 = new BitSet(new long[]{0x0140000002000100L,0x0A00400000000000L,0x000000000200002AL});
    public static final BitSet FOLLOW_affects_clause_in_synpred3_RParser2192 = new BitSet(new long[]{0x0140000002000100L,0x0A00400000000000L,0x000000000200002AL});
    public static final BitSet FOLLOW_requires_clause_in_synpred3_RParser2203 = new BitSet(new long[]{0x0040000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_ensures_clause_in_synpred3_RParser2214 = new BitSet(new long[]{0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_RECURSIVE_in_synpred3_RParser2225 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OPERATION_in_synpred4_RParser2595 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_ident_in_synpred4_RParser2597 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_operation_formal_param_section_in_synpred4_RParser2607 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000C00L});
    public static final BitSet FOLLOW_COLON_in_synpred4_RParser2618 = new BitSet(new long[]{0x0000000000000800L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_program_type_expression_in_synpred4_RParser2620 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_SEMICOLON_in_synpred4_RParser2624 = new BitSet(new long[]{0x0140000002000100L,0x0A00400000000000L,0x000000000200002AL});
    public static final BitSet FOLLOW_affects_clause_in_synpred4_RParser2634 = new BitSet(new long[]{0x0140000002000100L,0x0A00400000000000L,0x000000000200002AL});
    public static final BitSet FOLLOW_requires_clause_in_synpred4_RParser2645 = new BitSet(new long[]{0x0040000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_ensures_clause_in_synpred4_RParser2656 = new BitSet(new long[]{0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_RECURSIVE_in_synpred4_RParser2667 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ENHANCED_in_synpred5_RParser3676 = new BitSet(new long[]{0x0000000000100000L});
    public static final BitSet FOLLOW_BY_in_synpred5_RParser3678 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_ident_in_synpred5_RParser3681 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_module_argument_section_in_synpred5_RParser3691 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_qualified_ident_in_synpred6_RParser3873 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variable_expression_in_synpred7_RParser8422 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_SWAP_OP_in_synpred7_RParser8424 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variable_expression_in_synpred8_RParser8451 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_ASSIGN_OP_in_synpred8_RParser8453 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_qualified_ident_in_synpred9_RParser8480 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_synpred9_RParser8482 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variable_expression_in_synpred10_RParser8726 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_SWAP_OP_in_synpred10_RParser8728 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variable_expression_in_synpred11_RParser8755 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_ASSIGN_OP_in_synpred11_RParser8757 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_qualified_ident_in_synpred12_RParser8784 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_synpred12_RParser8786 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ident_in_synpred13_RParser10571 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_ident_in_synpred13_RParser10573 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_COLON_in_synpred13_RParser10575 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_THERE_in_synpred14_RParser10714 = new BitSet(new long[]{0x1000000000000000L});
    public static final BitSet FOLLOW_EXISTS_in_synpred14_RParser10716 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_UNIQUE_in_synpred14_RParser10718 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_infix_expression_in_synpred15_RParser11233 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000028L});
    public static final BitSet FOLLOW_set_in_synpred15_RParser11235 = new BitSet(new long[]{0x0000000020240000L,0x0000002008000000L,0x0915501000000000L,0x000000000014C0A0L});
    public static final BitSet FOLLOW_infix_expression_in_synpred15_RParser11241 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000028L});
    public static final BitSet FOLLOW_set_in_synpred15_RParser11243 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ident_in_synpred16_RParser12457 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_ident_in_synpred16_RParser12459 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_COLON_in_synpred16_RParser12461 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ident_in_synpred17_RParser12477 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_DOT_in_synpred17_RParser12479 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_NUMERIC_LITERAL_in_synpred17_RParser12481 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_synpred18_RParser12547 = new BitSet(new long[]{0x0000000020240000L,0x0000002008000090L,0x0915501000020000L,0x000000000014C0A0L});
    public static final BitSet FOLLOW_math_expression_in_synpred18_RParser12549 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_COMMA_in_synpred18_RParser12551 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_function_expression_in_synpred19_RParser12646 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_DOT_in_synpred19_RParser12648 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ident_in_synpred20_RParser12753 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0201000000000000L});
    public static final BitSet FOLLOW_hat_expression_in_synpred20_RParser12755 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0201000000000000L});
    public static final BitSet FOLLOW_function_argument_list_in_synpred20_RParser12758 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0201000000000000L});
    public static final BitSet FOLLOW_ident_in_synpred21_RParser13204 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_DOT_in_synpred21_RParser13206 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_ident_in_synpred21_RParser13208 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_DOT_in_synpred21_RParser13210 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ident_in_synpred22_RParser14356 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0001040000000000L});
    public static final BitSet FOLLOW_DOT_in_synpred22_RParser14359 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_ident_in_synpred22_RParser14361 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0001040000000000L});
    public static final BitSet FOLLOW_LPAREN_in_synpred22_RParser14365 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ident_in_synpred23_RParser14400 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_DOT_in_synpred23_RParser14402 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variable_array_expression_in_synpred24_RParser14599 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_DOT_in_synpred24_RParser14601 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LSQBRACK_in_synpred25_RParser15148 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_synpred25_RParser15150 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_RSQBRACK_in_synpred25_RParser15152 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_synpred25_RParser15154 = new BitSet(new long[]{0x0000000000080000L});
    public static final BitSet FOLLOW_BASECASE_in_synpred25_RParser15156 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_synpred26_RParser15174 = new BitSet(new long[]{0x0000000000080000L});
    public static final BitSet FOLLOW_BASECASE_in_synpred26_RParser15176 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LSQBRACK_in_synpred27_RParser15194 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_synpred27_RParser15196 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_RSQBRACK_in_synpred27_RParser15198 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_synpred27_RParser15200 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_INDUCTIVECASE_in_synpred27_RParser15202 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_synpred28_RParser15220 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_INDUCTIVECASE_in_synpred28_RParser15222 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LSQBRACK_in_synpred29_RParser15240 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_synpred29_RParser15242 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_RSQBRACK_in_synpred29_RParser15244 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LSQBRACK_in_synpred30_RParser15622 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_synpred30_RParser15624 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_RSQBRACK_in_synpred30_RParser15626 = new BitSet(new long[]{0x0000010000000000L});
    public static final BitSet FOLLOW_DEDUCTION_in_synpred30_RParser15628 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DEDUCTION_in_synpred31_RParser15649 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LSQBRACK_in_synpred32_RParser15670 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_synpred32_RParser15672 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_RSQBRACK_in_synpred32_RParser15674 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ident_in_synpred33_RParser15975 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_COLON_in_synpred33_RParser15977 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ident_in_synpred34_RParser16009 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_COMMA_in_synpred34_RParser16011 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_ident_in_synpred34_RParser16013 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_hyp_desig_in_synpred35_RParser16197 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_COMMA_in_synpred35_RParser16199 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_hyp_desig_in_synpred36_RParser16215 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_AMPERSAND_in_synpred36_RParser16217 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_hyp_desig_in_synpred37_RParser16233 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DEFINITION_in_synpred38_RParser16259 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_UNIQUE_in_synpred39_RParser16375 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_UNIVERSAL_in_synpred40_RParser16642 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_GENERALIZATION_in_synpred40_RParser16644 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EXISTENTIAL_in_synpred41_RParser16689 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_GENERALIZATION_in_synpred41_RParser16691 = new BitSet(new long[]{0x0000000000000002L});

}