// $ANTLR : "RBuilder.g" -> "RBuilder.java"$
 package edu.clemson.cs.r2jt.parsing; 
public interface RBuilderTokenTypes {
	int EOF = 1;
	int NULL_TREE_LOOKAHEAD = 3;
	int ABS = 4;
	int AND = 5;
	int ARRAY = 6;
	int ASSUME = 7;
	int AUXCODE = 8;
	int AXIOM = 9;
	int BASECASE = 10;
	int CARTPROD = 11;
	int CASE = 12;
	int CAT = 13;
	int CHANGING = 14;
	int COMMUTATIVITY = 15;
	int COMPLEMENT = 16;
	int CONCEPT = 17;
	int CONFIRM = 18;
	int CONTRADICTION = 19;
	int COROLLARY = 20;
	int DECREASING = 21;
	int DEDUCTION = 22;
	int DIV = 23;
	int DO = 24;
	int ELSE = 25;
	int END = 26;
	int ENHANCEMENT = 27;
	int ENSURES = 28;
	int EQUALITY = 29;
	int EXEMPLAR = 30;
	int EXIT = 31;
	int FACILITY = 32;
	int FAC_FINAL = 33;
	int FAC_INIT = 34;
	int FINALIZATION = 35;
	int FROM = 36;
	int FOR = 37;
	int FORGET = 38;
	int GOAL = 39;
	int IFF = 40;
	int IMPLIES = 41;
	int IN = 42;
	int INDUCTIVECASE = 43;
	int INITIALIZATION = 44;
	int INTERSECT = 45;
	int IS = 46;
	int ITERATE = 47;
	int LAMBDA = 48;
	int LEMMA = 49;
	int MAINTAINING = 50;
	int MOD = 51;
	int MODULE_CONCEPT = 52;
	int MODULE_ENHANCEMENT = 53;
	int MODULE_REALIZATION = 54;
	int NOT = 55;
	int NOT_IN = 56;
	int NOT_PROP_SUBSET = 57;
	int NOT_SUBSET = 58;
	int NOT_SUBSTR = 59;
	int OF = 60;
	int OR = 61;
	int OTHERWISE = 62;
	int PROOF = 63;
	int PROP_SUBSET = 64;
	int QED = 65;
	int REALIZATION = 66;
	int RECORD = 67;
	int REM = 68;
	int REMEMBER = 69;
	int REPEAT = 70;
	int REQUIRES = 71;
	int SELF = 72;
	int SSET = 73;
	int STATIC = 74;
	int SUBSET = 75;
	int SUBSTR = 76;
	int SUPPOSITION = 77;
	int THEN = 78;
	int THEOREM = 79;
	int TIMES = 80;
	int UNION = 81;
	int UNIQUE = 82;
	int USES = 83;
	int WHEN = 84;
	int WHERE = 85;
	int WHILE = 86;
	int WITHOUT = 87;
	int WORD_SEQUENCE = 88;
	int WS = 89;
	int SL_COMMENT = 90;
	int ML_COMMENT = 91;
	int PROOFS_FOR = 92;
	int THEORY = 93;
	int FORALL = 94;
	int EXISTS_UNIQUE = 95;
	int EXISTS = 96;
	int ST = 97;
	int ALTERS = 98;
	int CLEARS = 99;
	int EVALUATES = 100;
	int PRESERVES = 101;
	int REPLACES = 102;
	int RESTORES = 103;
	int UPDATES = 104;
	int REASSIGNS = 105;
	int ENHANCED_BY = 106;
	int REALIZED_BY = 107;
	int PROCEDURE = 108;
	int RECURSIVE_PROCEDURE = 109;
	int OPERATION = 110;
	int AUX_OPERATION = 111;
	int VARS = 112;
	int VAR = 113;
	int AUXVARS = 114;
	int AUXVAR = 115;
	int DEFINES = 116;
	int DEFINITION = 117;
	int IMPLICIT_DEF = 118;
	int INDUCTIVE_DEF = 119;
	int LOCAL_MATH_TYPE = 120;
	int MATH_TYPE = 121;
	int MATH_SUBTYPE = 122;
	int TYPE_FAMILY = 123;
	int TYPE = 124;
	int CONSTRAINTS = 125;
	int CONSTRAINT = 126;
	int CORR = 127;
	int CONVENTIONS = 128;
	int CONVENTION = 129;
	int BY = 130;
	int PROPERTY = 131;
	int POWERSET = 132;
	int EXCLUDED_MIDDLE = 133;
	int MODUS_PONENS = 134;
	int AND_RULE = 135;
	int ALTERNATIVE_ELIMINATION = 136;
	int COMMON_CONCLUSION = 137;
	int REDUCTIO_AD_ABSURDUM = 138;
	int UNIVERSAL_GENERALIZATION = 139;
	int EXISTENTIAL_GENERALIZATION = 140;
	int OR_RULE = 141;
	int CONJUNCT_ELIMINATION = 142;
	int QUANTIFIER_DISTRIBUTION = 143;
	int UNIVERSAL_INSTANTIATION = 144;
	int EXISTENTIAL_INSTANTIATION = 145;
	int IF = 146;
	int MODELED = 147;
	int REPRESENTED = 148;
	int IDENTIFIER = 149;
	int ALPHABETIC = 150;
	int LETTER = 151;
	int DIGIT = 152;
	int DIGITS = 153;
	int REAL = 154;
	int NUMERIC_LITERAL = 155;
	int CHARACTER_LITERAL = 156;
	int DOT = 157;
	int COMMA = 158;
	int LPAREN = 159;
	int RPAREN = 160;
	int LBRACE = 161;
	int RBRACE = 162;
	int DBL_LBRACE = 163;
	int DBL_RBRACE = 164;
	int LSQBRACK = 165;
	int RSQBRACK = 166;
	int HASH = 167;
	int CARAT = 168;
	int PLUS = 169;
	int MINUS = 170;
	int AMPERSAND = 171;
	int MULTIPLY = 172;
	int DIVIDE = 173;
	int EXP = 174;
	int RANGE = 175;
	int NOT_EQL = 176;
	int GT_EQL = 177;
	int LT_EQL = 178;
	int EQL = 179;
	int LT = 180;
	int GT = 181;
	int LL = 182;
	int GG = 183;
	int FUNCARROW = 184;
	int COLON = 185;
	int SEMICOLON = 186;
	int SWAP_OP = 187;
	int ASSIGN_OP = 188;
	int BAR = 189;
	int DBL_BAR = 190;
	int DQUOTE = 191;
	int TILDE = 192;
	int STRING_LITERAL = 193;
	int FREE_OPERATOR = 194;
	int USABLE = 195;
	int REQUIRED_SYMBOLIC = 196;
	int ESC = 197;
	int AFFECTS = 198;
	int ANGLE = 199;
	int BETWEEN_EXPR = 200;
	int CHOICES = 201;
	int CONFIRM_TYPE = 202;
	int DECLARATIONS = 203;
	int DBL_ANGLE = 204;
	int EXPR = 205;
	int FUNCTION = 206;
	int IDENT = 207;
	int INDEXED_DEFINITION = 208;
	int ITERATE_EXIT = 209;
	int ITERATION = 210;
	int NESTED = 211;
	int PARAMS = 212;
	int SET_EXPR = 213;
	int STATEMENT = 214;
	int STATEMENT_SEQUENCE = 215;
	int TUPLE = 216;
	int TYPEX = 217;
	int UNARY_FREE_OP = 218;
	int UNARY_MINUS = 219;
	int PROOFBODY = 220;
	int MATHITEMREF = 221;
	int PROOFEXPR = 222;
	int SUPDEDUC = 223;
	int SIMPLIFICATION = 224;
	int RULE1 = 225;
	int RULE2 = 226;
	int RULE3 = 227;
	int HYPDESIG = 228;
	int PROOFEXPRLIST = 229;
	int REFCALL = 230;
	int QUALNUM = 231;
	int LOCALVAREXP = 232;
	int XOR = 233;
	int ANDTHEN = 234;
	int ORELSE = 235;
	int BIG_UNION = 236;
	int BIG_INTERSECT = 237;
	int BIG_SUM = 238;
	int BIG_PRODUCT = 239;
	int BIG_CONCAT = 240;
	int ELSIF = 241;
	int DEFAULT = 242;
	int PROP_SUBSTR = 243;
	int NOT_PROP_SUBSTR = 244;
	int UNARY_FREE_OPERATOR = 245;
}
