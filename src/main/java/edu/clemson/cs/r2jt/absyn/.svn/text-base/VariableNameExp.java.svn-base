/*
 * This software is released under the new BSD 2006 license.
 * 
 * Note the new BSD license is equivalent to the MIT License, except for the
 * no-endorsement final clause.
 * 
 * Copyright (c) 2007, Clemson University
 * 
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 *   * Redistributions of source code must retain the above copyright notice,
 *     this list of conditions and the following disclaimer. 
 *   * Redistributions in binary form must reproduce the above copyright
 *     notice, this list of conditions and the following disclaimer in the
 *     documentation and/or other materials provided with the distribution. 
 *   * Neither the name of the Clemson University nor the names of its
 *     contributors may be used to endorse or promote products derived from
 *     this software without specific prior written permission. 
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER
 * OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 * 
 * This sofware has been developed by past and present members of the
 * Reusable Sofware Research Group (RSRG) in the School of Computing at
 * Clemson University.  Contributors to the initial version are:
 * 
 *     Steven Atkinson
 *     Greg Kulczycki
 *     Kunal Chopra
 *     John Hunt
 *     Heather Keown
 *     Ben Markle
 *     Kim Roche
 *     Murali Sitaraman
 */
/*
 * VariableNameExp.java
 *
 * The Resolve Software Composition Workbench Project
 *
 * Copyright (c) 1999-2005
 * Reusable Software Research Group
 * Department of Computer Science
 * Clemson University
 */

package edu.clemson.cs.r2jt.absyn;

import edu.clemson.cs.r2jt.collections.List;
import edu.clemson.cs.r2jt.collections.Map;
import edu.clemson.cs.r2jt.data.Location;
import edu.clemson.cs.r2jt.data.Mode;
import edu.clemson.cs.r2jt.data.PosSymbol;
import edu.clemson.cs.r2jt.data.Symbol;
import edu.clemson.cs.r2jt.type.Type;
import edu.clemson.cs.r2jt.analysis.TypeResolutionException;

public class VariableNameExp extends VariableExp {

    // ===========================================================
    // Variables
    // ===========================================================

    /** The location member. */
    private Location location;

    /** The qualifier member. */
    private PosSymbol qualifier;

    /** The name member. */
    private PosSymbol name;

    // ===========================================================
    // Constructors
    // ===========================================================

    public VariableNameExp() { this(null, null, null); }

    public VariableNameExp(
            Location location,
            PosSymbol qualifier,
            PosSymbol name)
    {
        this.location = location;
        this.qualifier = qualifier;
        this.name = name;
    }
    
    public Exp substituteChildren(java.util.Map<Exp, Exp> substitutions) {
    	return new VariableNameExp(location, qualifier, name);
    }

    // ===========================================================
    // Accessor Methods
    // ===========================================================

    // -----------------------------------------------------------
    // Get Methods
    // -----------------------------------------------------------

    /** Returns the value of the location variable. */
    public Location getLocation() { return location; }

    /** Returns the value of the qualifier variable. */
    public PosSymbol getQualifier() { return qualifier; }

    /** Returns the value of the name variable. */
    public PosSymbol getName() { return name; }

    // -----------------------------------------------------------
    // Set Methods
    // -----------------------------------------------------------

    /** Sets the location variable to the specified value. */
    public void setLocation(Location location) { this.location = location; }

    /** Sets the qualifier variable to the specified value. */
    public void setQualifier(PosSymbol qualifier) { this.qualifier = qualifier; }

    /** Sets the name variable to the specified value. */
    public void setName(PosSymbol name) { this.name = name; }

    // ===========================================================
    // Public Methods
    // ===========================================================

    /** Accepts a ResolveConceptualVisitor. */
    public void accept(ResolveConceptualVisitor v) {
        v.visitVariableNameExp(this);
    }

    /** Accepts a TypeResolutionVisitor. */
    public Type accept(TypeResolutionVisitor v)
        throws TypeResolutionException {
        return v.getVariableNameExpType(this);
    }

    /** Returns a formatted text string of this class. */
    public String asString(int indent, int increment) {

        StringBuffer sb = new StringBuffer();

        printSpace(indent, sb);
        sb.append("VariableNameExp\n");

        if (qualifier != null) {
            sb.append(qualifier.asString(indent+increment,increment));
        }

        if (name != null) {
            sb.append(name.asString(indent+increment,increment));
        }

        return sb.toString();
    }
    
    /** Returns a text string of the Variable */
    public String toString(int indent) {

        StringBuffer sb = new StringBuffer();

        printSpace(indent, sb);

        if (qualifier != null) {
            sb.append(qualifier.toString() + ".");
        }

        if (name != null) {
            sb.append(name.toString());
        }

        return sb.toString();
    }
    
    public String toString() {
    	return name.getName();
    }

    /** Returns true if the variable is found in any sub expression
        of this one. **/
    public boolean containsVar(String varName, boolean IsOldExp) {
        return false;
    }
    
    public Object clone(){
   	 	VariableNameExp clone = new VariableNameExp();
   	 	clone.setName(createPosSymbol(this.getName().toString()));
   	 	clone.setQualifier(this.getQualifier());
   	 	clone.setLocation(this.getLocation());
   	 	return clone;
   }
    
    private PosSymbol createPosSymbol(String name){
    	PosSymbol posSym = new PosSymbol();
    	posSym.setSymbol(Symbol.symbol(name));
    	return posSym;
    	
    }
    
    public Exp replace(Exp old, Exp replacement){
    	if(name != null){
    		if(old instanceof VarExp){
    			if(((VarExp)old).getName().toString().equals(name.toString())){
    				return (Exp)Exp.clone(replacement);
    			}
    		}
    	}
    	return null;
    }
    
    public List<Exp> getSubExpressions() {
    	return new List<Exp>();
    }
    
    public void setSubExpression(int index, Exp e) {
    }
    
    public Exp copy() {
    	Exp result = new VariableNameExp(location, qualifier, name);
    	result.setType(type);
    	
    	return result;
    }
    
    public boolean equivalent(Exp e) {
    	boolean retval = e instanceof VariableNameExp;
    	
    	if (retval) {
    		VariableNameExp eAsVNE = (VariableNameExp) e;
    		
    		retval = posSymbolEquivalent(qualifier, eAsVNE.qualifier) &&
    				posSymbolEquivalent(name, eAsVNE.name);
    	}
    	
    	return retval;
    }

}
