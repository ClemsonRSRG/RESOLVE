/*
 * Template for VC generation details (aka Verbose Mode)
 */
outputVCGenDetails(fileHeader, assertiveCodeBlocks) ::= <<
========================= VC Generation Details  =========================

<fileHeader>

==========================================================================

<assertiveCodeBlocks; separator = "\n">

>>

/*
 * Template for concept header. This gets added to the top
 * of the verbose mode section.
 */
outputConceptHeader(conceptName) ::= <<
    Concept Name:   <conceptName>
>>

/*
 * Template for concept realization header. This gets added to the top
 * of the verbose mode section.
 */
outputConceptRealizHeader(realizName, conceptName) ::= <<
    Concept Realization Name:   <realizName>
    Concept Name:               <conceptName>
>>

/*
 * Template for enhancement header. This gets added to the top
 * of the verbose mode section.
 */
outputEnhancementHeader(enhancementName, conceptName) ::= <<
    Enhancement Name:   <enhancementName>
    Concept Name:       <conceptName>
>>

/*
 * Template for enhancement realization header. This gets added to the top
 * of the verbose mode section.
 */
outputEnhancementRealizHeader(realizName, enhancementName, conceptName) ::= <<
    Enhancement Realization Name:   <realizName>
    Enhancement Name:               <enhancementName>
    Concept Name:                   <conceptName>
>>

/*
 * Template for facility header. This gets added to the top
 * of the verbose mode section.
 */
outputFacilityHeader(facilityName) ::= <<
    Facility Name:   <facilityName>
>>

/*
 * Template for displaying the name of a assertive code block,
 * any branching conditions and each of its transformations
 * through proof rule applications.
 */
outputAssertiveCodeBlock(blockName, branchingConditions, vcGenSteps) ::= <<
========================= <blockName> =========================

<if(branchingConditions)>
<branchingConditions>
<endif>
<vcGenSteps; separator = "\n">
>>

/*
 * Template for displaying the various different branching conditions that
 * generated this assertive code block.
 */
outputBranchingConditions(conditions) ::= <<
---------------------
Branching Conditions
---------------------
<conditions : {condition | <i>. <condition>}; separator = "\n">
---------------------

>>

/*
 * Template for displaying the name for the proof rule applied, the list of
 * free variables at this step and the resulting assertive code block after
 * the application of the proof rule.
 */
outputVCGenStep(proofRuleName, moreDetails, currentStateOfBlock, reductionTrees) ::= <<
Applied <proofRuleName>: <if(moreDetails)>[<moreDetails>]<endif>

<currentStateOfBlock>
<if(reductionTrees)>
Reduction Tree(s):
    <reductionTrees; separator = "\n">
<endif>
_____________________

>>