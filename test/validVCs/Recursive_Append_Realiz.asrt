VCs for Recursive_Append_Realiz.rb generated Mon Oct 07 15:36:17 EDT 2024

================================= VC(s): =================================

VC 0_1:
Requires Clause for Dequeue at Recursive_Append_Realiz.rb(8:3)

Goal:
(1 <= |Q|)

Given(s):
1. (1 <= |Q|)
2. ((|P| + |Q|) <= Max_Length)
3. (1 <= Max_Length)

VC 0_2:
Requires Clause for Enqueue at Recursive_Append_Realiz.rb(9:3)

Goal:
((1 + |P|) <= Max_Length)

Given(s):
1. (1 <= |Q|)
2. (1 <= Max_Length)
3. ((|P| + |Q|) <= Max_Length)

VC 0_3:
Termination of Recursive Call at Recursive_Append_Realiz.rb(10:3)

Goal:
((1 + |Q''|) <= |Q|)

Given(s):
1. (Q = (<E''> o Q''))
2. (1 <= |Q|)
3. ((|P| + |Q|) <= Max_Length)
4. (1 <= Max_Length)

VC 0_4:
Requires Clause for Append at Recursive_Append_Realiz.rb(10:3)

Goal:
((|(P o <E''>)| + |Q''|) <= Max_Length)

Given(s):
1. (Q = (<E''> o Q''))
2. (1 <= |Q|)
3. (1 <= Max_Length)
4. ((|P| + |Q|) <= Max_Length)

VC 0_5:
Ensures Clause of Append at Recursive_Append_Realiz.rb(2:24)

Goal:
(((P o <E''>) o Q'') = (P o Q))

Given(s):
1. (Q = (<E''> o Q''))
2. (1 <= |Q|)
3. ((|P| + |Q|) <= Max_Length)
4. (1 <= Max_Length)

VC 0_6:
Ensures Clause of Append (Condition from "CLEARS" parameter mode) at Recursive_Append_Realiz.rb(2:56)

Goal:
(Empty_String = Empty_String)

Given(s):
1. (1 <= |Q|)
2. ((|P| + |Q|) <= Max_Length)
3. (1 <= Max_Length)

VC 1_1:
Ensures Clause of Append [After Logical Reduction(s)] at Recursive_Append_Realiz.rb(2:24)

Goal:
(P = (P o Q)) or 
(1 <= |Q|)

Given(s):
1. ((|P| + |Q|) <= Max_Length)
2. (1 <= Max_Length)

VC 1_2:
Ensures Clause of Append (Condition from "CLEARS" parameter mode) [After Logical Reduction(s)] at Recursive_Append_Realiz.rb(2:56)

Goal:
(Q = Empty_String) or 
(1 <= |Q|)

Given(s):
1. ((|P| + |Q|) <= Max_Length)
2. (1 <= Max_Length)

========================= VC Generation Details  =========================

    Enhancement Realization Name:   Recursive_Append_Realiz
    Enhancement Name:               Append_Capability
    Concept Name:                   Queue_Template

==========================================================================

========================= Append =========================

---------------------
Branching Conditions
---------------------
1. Expression at Recursive_Append_Realiz.rb(7:7) is true. [Exp: (1 <= |Q|)]
---------------------

Applied Procedure Declaration Rule (Part 1): 

Free Variables:

Statements:
    Assume (((((1 <= Max_Length) and ((min_int <= 0) and (1 <= max_int))) and (1 <= Last_Char_Num)) and (1 <= Max_Char_Str_Len)) and ((|P| + |Q|) <= Max_Length));
    Remember;

VC(s):

_____________________

Applied Procedure Declaration Rule (Part 2): 

Free Variables:
    E : 'Entry'
    P_Val : N

Statements:
    Assume (((((1 <= Max_Length) and ((min_int <= 0) and (1 <= max_int))) and (1 <= Last_Char_Num)) and (1 <= Max_Char_Str_Len)) and ((|P| + |Q|) <= Max_Length));
    Remember;
    _Initialize(E : Entry);
    Assume (P_Val = |Q|);

    If ( Less_Or_Equal(1, Length(Q)) ) then
        Dequeue(E, Q);
        Enqueue(E, P);
        Append(P, Q);
    end;

    Confirm ((P = (#P o #Q)) and (Q = Empty_String));

VC(s):

_____________________

Applied Confirm Rule: 

Free Variables:
    E : 'Entry'
    P_Val : N

Statements:
    Assume (((((1 <= Max_Length) and ((min_int <= 0) and (1 <= max_int))) and (1 <= Last_Char_Num)) and (1 <= Max_Char_Str_Len)) and ((|P| + |Q|) <= Max_Length));
    Remember;
    _Initialize(E : Entry);
    Assume (P_Val = |Q|);

    If ( Less_Or_Equal(1, Length(Q)) ) then
        Dequeue(E, Q);
        Enqueue(E, P);
        Append(P, Q);
    end;


VC(s):
     |- (P = (#P o #Q))

     |- (Q = Empty_String)

Reduction Tree(s):
    strict digraph G {
      1 [ label=" |- ((P = (#P o #Q)) and (Q = Empty_String))" shape="box" ];
      2 [ label=" |- (P = (#P o #Q))" shape="box" color="red" ];
      3 [ label=" |- (Q = Empty_String)" shape="box" color="red" ];
      1 -> 2;
      1 -> 3;
    }

_____________________

Applied If-Part Rule: 

Free Variables:
    E : 'Entry'
    P_Val : N

Statements:
    Assume (((((1 <= Max_Length) and ((min_int <= 0) and (1 <= max_int))) and (1 <= Last_Char_Num)) and (1 <= Max_Char_Str_Len)) and ((|P| + |Q|) <= Max_Length));
    Remember;
    _Initialize(E : Entry);
    Assume (P_Val = |Q|);
    Stipulate (1 <= |Q|);
    Dequeue(E, Q);
    Enqueue(E, P);
    Append(P, Q);

VC(s):
     |- (P = (#P o #Q))

     |- (Q = Empty_String)

_____________________

Applied Call Rule: 

Free Variables:
    E : 'Entry'
    P_Val : N
    P' : Str('Entry')
    Q' : Str('Entry')

Statements:
    Assume (((((1 <= Max_Length) and ((min_int <= 0) and (1 <= max_int))) and (1 <= Last_Char_Num)) and (1 <= Max_Char_Str_Len)) and ((|P| + |Q|) <= Max_Length));
    Remember;
    _Initialize(E : Entry);
    Assume (P_Val = |Q|);
    Stipulate (1 <= |Q|);
    Dequeue(E, Q);
    Enqueue(E, P);
    Confirm ((1 + |Q|) <= P_Val);
    Confirm ((|P| + |Q|) <= Max_Length);
    Assume ((Q' = Empty_String) and (P' = (P o Q)));

VC(s):
     |- (P' = (#P o #Q))

     |- (Q' = Empty_String)

_____________________

Applied Assume Rule: 

Free Variables:
    E : 'Entry'
    P_Val : N
    P' : Str('Entry')
    Q' : Str('Entry')

Statements:
    Assume (((((1 <= Max_Length) and ((min_int <= 0) and (1 <= max_int))) and (1 <= Last_Char_Num)) and (1 <= Max_Char_Str_Len)) and ((|P| + |Q|) <= Max_Length));
    Remember;
    _Initialize(E : Entry);
    Assume (P_Val = |Q|);
    Stipulate (1 <= |Q|);
    Dequeue(E, Q);
    Enqueue(E, P);
    Confirm ((1 + |Q|) <= P_Val);
    Confirm ((|P| + |Q|) <= Max_Length);

VC(s):
     |- ((P o Q) = (#P o #Q))

     |- (Empty_String = Empty_String)

Reduction Tree(s):
    strict digraph G {
      1 [ label="((Q' = Empty_String) and (P' = (P o Q))) |- " shape="box" ];
      2 [ label="(Q' = Empty_String), (P' = (P o Q)) |- " shape="box" color="red" ];
      1 -> 2;
    }

_____________________

Applied Confirm Rule: 

Free Variables:
    E : 'Entry'
    P_Val : N
    P' : Str('Entry')
    Q' : Str('Entry')

Statements:
    Assume (((((1 <= Max_Length) and ((min_int <= 0) and (1 <= max_int))) and (1 <= Last_Char_Num)) and (1 <= Max_Char_Str_Len)) and ((|P| + |Q|) <= Max_Length));
    Remember;
    _Initialize(E : Entry);
    Assume (P_Val = |Q|);
    Stipulate (1 <= |Q|);
    Dequeue(E, Q);
    Enqueue(E, P);
    Confirm ((1 + |Q|) <= P_Val);

VC(s):
     |- ((|P| + |Q|) <= Max_Length)

     |- ((P o Q) = (#P o #Q))

     |- (Empty_String = Empty_String)

_____________________

Applied Confirm Rule: 

Free Variables:
    E : 'Entry'
    P_Val : N
    P' : Str('Entry')
    Q' : Str('Entry')

Statements:
    Assume (((((1 <= Max_Length) and ((min_int <= 0) and (1 <= max_int))) and (1 <= Last_Char_Num)) and (1 <= Max_Char_Str_Len)) and ((|P| + |Q|) <= Max_Length));
    Remember;
    _Initialize(E : Entry);
    Assume (P_Val = |Q|);
    Stipulate (1 <= |Q|);
    Dequeue(E, Q);
    Enqueue(E, P);

VC(s):
     |- ((1 + |Q|) <= P_Val)

     |- ((|P| + |Q|) <= Max_Length)

     |- ((P o Q) = (#P o #Q))

     |- (Empty_String = Empty_String)

_____________________

Applied Call Rule: 

Free Variables:
    E : 'Entry'
    P_Val : N
    P' : Str('Entry')
    Q' : Str('Entry')
    E' : 'Entry'
    P'' : Str('Entry')

Statements:
    Assume (((((1 <= Max_Length) and ((min_int <= 0) and (1 <= max_int))) and (1 <= Last_Char_Num)) and (1 <= Max_Char_Str_Len)) and ((|P| + |Q|) <= Max_Length));
    Remember;
    _Initialize(E : Entry);
    Assume (P_Val = |Q|);
    Stipulate (1 <= |Q|);
    Dequeue(E, Q);
    Confirm ((1 + |P|) <= Max_Length);
    Assume (P'' = (P o <E>));

VC(s):
     |- ((1 + |Q|) <= P_Val)

     |- ((|P''| + |Q|) <= Max_Length)

     |- ((P'' o Q) = (#P o #Q))

     |- (Empty_String = Empty_String)

_____________________

Applied Assume Rule: 

Free Variables:
    E : 'Entry'
    P_Val : N
    P' : Str('Entry')
    Q' : Str('Entry')
    E' : 'Entry'
    P'' : Str('Entry')

Statements:
    Assume (((((1 <= Max_Length) and ((min_int <= 0) and (1 <= max_int))) and (1 <= Last_Char_Num)) and (1 <= Max_Char_Str_Len)) and ((|P| + |Q|) <= Max_Length));
    Remember;
    _Initialize(E : Entry);
    Assume (P_Val = |Q|);
    Stipulate (1 <= |Q|);
    Dequeue(E, Q);
    Confirm ((1 + |P|) <= Max_Length);

VC(s):
     |- ((1 + |Q|) <= P_Val)

     |- ((|(P o <E>)| + |Q|) <= Max_Length)

     |- (((P o <E>) o Q) = (#P o #Q))

     |- (Empty_String = Empty_String)

_____________________

Applied Confirm Rule: 

Free Variables:
    E : 'Entry'
    P_Val : N
    P' : Str('Entry')
    Q' : Str('Entry')
    E' : 'Entry'
    P'' : Str('Entry')

Statements:
    Assume (((((1 <= Max_Length) and ((min_int <= 0) and (1 <= max_int))) and (1 <= Last_Char_Num)) and (1 <= Max_Char_Str_Len)) and ((|P| + |Q|) <= Max_Length));
    Remember;
    _Initialize(E : Entry);
    Assume (P_Val = |Q|);
    Stipulate (1 <= |Q|);
    Dequeue(E, Q);

VC(s):
     |- ((1 + |P|) <= Max_Length)

     |- ((1 + |Q|) <= P_Val)

     |- ((|(P o <E>)| + |Q|) <= Max_Length)

     |- (((P o <E>) o Q) = (#P o #Q))

     |- (Empty_String = Empty_String)

_____________________

Applied Call Rule: 

Free Variables:
    E : 'Entry'
    P_Val : N
    P' : Str('Entry')
    Q' : Str('Entry')
    E' : 'Entry'
    P'' : Str('Entry')
    E'' : 'Entry'
    Q'' : Str('Entry')

Statements:
    Assume (((((1 <= Max_Length) and ((min_int <= 0) and (1 <= max_int))) and (1 <= Last_Char_Num)) and (1 <= Max_Char_Str_Len)) and ((|P| + |Q|) <= Max_Length));
    Remember;
    _Initialize(E : Entry);
    Assume (P_Val = |Q|);
    Stipulate (1 <= |Q|);
    Confirm (1 <= |Q|);
    Assume (Q = (<E''> o Q''));

VC(s):
     |- ((1 + |P|) <= Max_Length)

     |- ((1 + |Q''|) <= P_Val)

     |- ((|(P o <E''>)| + |Q''|) <= Max_Length)

     |- (((P o <E''>) o Q'') = (#P o #Q))

     |- (Empty_String = Empty_String)

_____________________

Applied Assume Rule: 

Free Variables:
    E : 'Entry'
    P_Val : N
    P' : Str('Entry')
    Q' : Str('Entry')
    E' : 'Entry'
    P'' : Str('Entry')
    E'' : 'Entry'
    Q'' : Str('Entry')

Statements:
    Assume (((((1 <= Max_Length) and ((min_int <= 0) and (1 <= max_int))) and (1 <= Last_Char_Num)) and (1 <= Max_Char_Str_Len)) and ((|P| + |Q|) <= Max_Length));
    Remember;
    _Initialize(E : Entry);
    Assume (P_Val = |Q|);
    Stipulate (1 <= |Q|);
    Confirm (1 <= |Q|);

VC(s):
     |- ((1 + |P|) <= Max_Length)

    (Q = (<E''> o Q'')) |- ((1 + |Q''|) <= P_Val)

    (Q = (<E''> o Q'')) |- ((|(P o <E''>)| + |Q''|) <= Max_Length)

    (Q = (<E''> o Q'')) |- (((P o <E''>) o Q'') = (#P o #Q))

     |- (Empty_String = Empty_String)

_____________________

Applied Confirm Rule: 

Free Variables:
    E : 'Entry'
    P_Val : N
    P' : Str('Entry')
    Q' : Str('Entry')
    E' : 'Entry'
    P'' : Str('Entry')
    E'' : 'Entry'
    Q'' : Str('Entry')

Statements:
    Assume (((((1 <= Max_Length) and ((min_int <= 0) and (1 <= max_int))) and (1 <= Last_Char_Num)) and (1 <= Max_Char_Str_Len)) and ((|P| + |Q|) <= Max_Length));
    Remember;
    _Initialize(E : Entry);
    Assume (P_Val = |Q|);
    Stipulate (1 <= |Q|);

VC(s):
     |- (1 <= |Q|)

     |- ((1 + |P|) <= Max_Length)

    (Q = (<E''> o Q'')) |- ((1 + |Q''|) <= P_Val)

    (Q = (<E''> o Q'')) |- ((|(P o <E''>)| + |Q''|) <= Max_Length)

    (Q = (<E''> o Q'')) |- (((P o <E''>) o Q'') = (#P o #Q))

     |- (Empty_String = Empty_String)

_____________________

Applied Stipulate Assume Rule: 

Free Variables:
    E : 'Entry'
    P_Val : N
    P' : Str('Entry')
    Q' : Str('Entry')
    E' : 'Entry'
    P'' : Str('Entry')
    E'' : 'Entry'
    Q'' : Str('Entry')

Statements:
    Assume (((((1 <= Max_Length) and ((min_int <= 0) and (1 <= max_int))) and (1 <= Last_Char_Num)) and (1 <= Max_Char_Str_Len)) and ((|P| + |Q|) <= Max_Length));
    Remember;
    _Initialize(E : Entry);
    Assume (P_Val = |Q|);

VC(s):
    (1 <= |Q|) |- (1 <= |Q|)

    (1 <= |Q|) |- ((1 + |P|) <= Max_Length)

    (Q = (<E''> o Q'')), (1 <= |Q|) |- ((1 + |Q''|) <= P_Val)

    (Q = (<E''> o Q'')), (1 <= |Q|) |- ((|(P o <E''>)| + |Q''|) <= Max_Length)

    (Q = (<E''> o Q'')), (1 <= |Q|) |- (((P o <E''>) o Q'') = (#P o #Q))

    (1 <= |Q|) |- (Empty_String = Empty_String)

_____________________

Applied Assume Rule: 

Free Variables:
    E : 'Entry'
    P_Val : N
    P' : Str('Entry')
    Q' : Str('Entry')
    E' : 'Entry'
    P'' : Str('Entry')
    E'' : 'Entry'
    Q'' : Str('Entry')

Statements:
    Assume (((((1 <= Max_Length) and ((min_int <= 0) and (1 <= max_int))) and (1 <= Last_Char_Num)) and (1 <= Max_Char_Str_Len)) and ((|P| + |Q|) <= Max_Length));
    Remember;
    _Initialize(E : Entry);

VC(s):
    (1 <= |Q|) |- (1 <= |Q|)

    (1 <= |Q|) |- ((1 + |P|) <= Max_Length)

    (Q = (<E''> o Q'')), (1 <= |Q|) |- ((1 + |Q''|) <= |Q|)

    (Q = (<E''> o Q'')), (1 <= |Q|) |- ((|(P o <E''>)| + |Q''|) <= Max_Length)

    (Q = (<E''> o Q'')), (1 <= |Q|) |- (((P o <E''>) o Q'') = (#P o #Q))

    (1 <= |Q|) |- (Empty_String = Empty_String)

_____________________

Applied Variable Declaration/Initialization Rule (Generic Program Type): 

Free Variables:
    E : 'Entry'
    P_Val : N
    P' : Str('Entry')
    Q' : Str('Entry')
    E' : 'Entry'
    P'' : Str('Entry')
    E'' : 'Entry'
    Q'' : Str('Entry')

Statements:
    Assume (((((1 <= Max_Length) and ((min_int <= 0) and (1 <= max_int))) and (1 <= Last_Char_Num)) and (1 <= Max_Char_Str_Len)) and ((|P| + |Q|) <= Max_Length));
    Remember;
    Assume Entry.Is_Initial(E);

VC(s):
    (1 <= |Q|) |- (1 <= |Q|)

    (1 <= |Q|) |- ((1 + |P|) <= Max_Length)

    (Q = (<E''> o Q'')), (1 <= |Q|) |- ((1 + |Q''|) <= |Q|)

    (Q = (<E''> o Q'')), (1 <= |Q|) |- ((|(P o <E''>)| + |Q''|) <= Max_Length)

    (Q = (<E''> o Q'')), (1 <= |Q|) |- (((P o <E''>) o Q'') = (#P o #Q))

    (1 <= |Q|) |- (Empty_String = Empty_String)

_____________________

Applied Assume Rule: 

Free Variables:
    E : 'Entry'
    P_Val : N
    P' : Str('Entry')
    Q' : Str('Entry')
    E' : 'Entry'
    P'' : Str('Entry')
    E'' : 'Entry'
    Q'' : Str('Entry')

Statements:
    Assume (((((1 <= Max_Length) and ((min_int <= 0) and (1 <= max_int))) and (1 <= Last_Char_Num)) and (1 <= Max_Char_Str_Len)) and ((|P| + |Q|) <= Max_Length));
    Remember;

VC(s):
    (1 <= |Q|) |- (1 <= |Q|)

    (1 <= |Q|) |- ((1 + |P|) <= Max_Length)

    (Q = (<E''> o Q'')), (1 <= |Q|) |- ((1 + |Q''|) <= |Q|)

    (Q = (<E''> o Q'')), (1 <= |Q|) |- ((|(P o <E''>)| + |Q''|) <= Max_Length)

    (Q = (<E''> o Q'')), (1 <= |Q|) |- (((P o <E''>) o Q'') = (#P o #Q))

    (1 <= |Q|) |- (Empty_String = Empty_String)

_____________________

Applied Remember Rule: 

Free Variables:
    E : 'Entry'
    P_Val : N
    P' : Str('Entry')
    Q' : Str('Entry')
    E' : 'Entry'
    P'' : Str('Entry')
    E'' : 'Entry'
    Q'' : Str('Entry')

Statements:
    Assume (((((1 <= Max_Length) and ((min_int <= 0) and (1 <= max_int))) and (1 <= Last_Char_Num)) and (1 <= Max_Char_Str_Len)) and ((|P| + |Q|) <= Max_Length));

VC(s):
    (1 <= |Q|) |- (1 <= |Q|)

    (1 <= |Q|) |- ((1 + |P|) <= Max_Length)

    (Q = (<E''> o Q'')), (1 <= |Q|) |- ((1 + |Q''|) <= |Q|)

    (Q = (<E''> o Q'')), (1 <= |Q|) |- ((|(P o <E''>)| + |Q''|) <= Max_Length)

    (Q = (<E''> o Q'')), (1 <= |Q|) |- (((P o <E''>) o Q'') = (P o Q))

    (1 <= |Q|) |- (Empty_String = Empty_String)

_____________________

Applied Assume Rule: 

Free Variables:
    E : 'Entry'
    P_Val : N
    P' : Str('Entry')
    Q' : Str('Entry')
    E' : 'Entry'
    P'' : Str('Entry')
    E'' : 'Entry'
    Q'' : Str('Entry')

Statements:

VC(s):
    (1 <= |Q|), ((|P| + |Q|) <= Max_Length), (1 <= Max_Length) |- (1 <= |Q|)

    (1 <= |Q|), (1 <= Max_Length), ((|P| + |Q|) <= Max_Length) |- ((1 + |P|) <= Max_Length)

    (Q = (<E''> o Q'')), (1 <= |Q|), ((|P| + |Q|) <= Max_Length), (1 <= Max_Length) |- ((1 + |Q''|) <= |Q|)

    (Q = (<E''> o Q'')), (1 <= |Q|), (1 <= Max_Length), ((|P| + |Q|) <= Max_Length) |- ((|(P o <E''>)| + |Q''|) <= Max_Length)

    (Q = (<E''> o Q'')), (1 <= |Q|), ((|P| + |Q|) <= Max_Length), (1 <= Max_Length) |- (((P o <E''>) o Q'') = (P o Q))

    (1 <= |Q|), ((|P| + |Q|) <= Max_Length), (1 <= Max_Length) |- (Empty_String = Empty_String)

Reduction Tree(s):
    strict digraph G {
      1 [ label="(((((1 <= Max_Length) and ((min_int <= 0) and (1 <= max_int))) and (1 <= Last_Char_Num)) and (1 <= Max_Char_Str_Len)) and ((|P| + |Q|) <= Max_Length)) |- " shape="box" ];
      2 [ label="(1 <= Max_Length), (min_int <= 0), (1 <= max_int), (1 <= Last_Char_Num), (1 <= Max_Char_Str_Len), ((|P| + |Q|) <= Max_Length) |- " shape="box" color="red" ];
      1 -> 2;
    }

_____________________

========================= Append =========================

---------------------
Branching Conditions
---------------------
1. Expression at Recursive_Append_Realiz.rb(7:7) is false. [Exp: not((1 <= |Q|))]
---------------------

Applied Else-Part Rule: 

Free Variables:
    E : 'Entry'
    P_Val : N

Statements:
    Assume (((((1 <= Max_Length) and ((min_int <= 0) and (1 <= max_int))) and (1 <= Last_Char_Num)) and (1 <= Max_Char_Str_Len)) and ((|P| + |Q|) <= Max_Length));
    Remember;
    _Initialize(E : Entry);
    Assume (P_Val = |Q|);
    Stipulate not((1 <= |Q|));

VC(s):
     |- (P = (#P o #Q))

     |- (Q = Empty_String)

_____________________

Applied Stipulate Assume Rule: 

Free Variables:
    E : 'Entry'
    P_Val : N

Statements:
    Assume (((((1 <= Max_Length) and ((min_int <= 0) and (1 <= max_int))) and (1 <= Last_Char_Num)) and (1 <= Max_Char_Str_Len)) and ((|P| + |Q|) <= Max_Length));
    Remember;
    _Initialize(E : Entry);
    Assume (P_Val = |Q|);

VC(s):
     |- (P = (#P o #Q)), (1 <= |Q|)

     |- (Q = Empty_String), (1 <= |Q|)

Reduction Tree(s):
    strict digraph G {
      1 [ label="not((1 <= |Q|)) |- (P = (#P o #Q))" shape="box" ];
      2 [ label=" |- (P = (#P o #Q)), (1 <= |Q|)" shape="box" color="red" ];
      1 -> 2;
    }

    strict digraph G {
      1 [ label="not((1 <= |Q|)) |- (Q = Empty_String)" shape="box" ];
      2 [ label=" |- (Q = Empty_String), (1 <= |Q|)" shape="box" color="red" ];
      1 -> 2;
    }

_____________________

Applied Assume Rule: 

Free Variables:
    E : 'Entry'
    P_Val : N

Statements:
    Assume (((((1 <= Max_Length) and ((min_int <= 0) and (1 <= max_int))) and (1 <= Last_Char_Num)) and (1 <= Max_Char_Str_Len)) and ((|P| + |Q|) <= Max_Length));
    Remember;
    _Initialize(E : Entry);

VC(s):
     |- (P = (#P o #Q)), (1 <= |Q|)

     |- (Q = Empty_String), (1 <= |Q|)

_____________________

Applied Variable Declaration/Initialization Rule (Generic Program Type): 

Free Variables:
    E : 'Entry'
    P_Val : N

Statements:
    Assume (((((1 <= Max_Length) and ((min_int <= 0) and (1 <= max_int))) and (1 <= Last_Char_Num)) and (1 <= Max_Char_Str_Len)) and ((|P| + |Q|) <= Max_Length));
    Remember;
    Assume Entry.Is_Initial(E);

VC(s):
     |- (P = (#P o #Q)), (1 <= |Q|)

     |- (Q = Empty_String), (1 <= |Q|)

_____________________

Applied Assume Rule: 

Free Variables:
    E : 'Entry'
    P_Val : N

Statements:
    Assume (((((1 <= Max_Length) and ((min_int <= 0) and (1 <= max_int))) and (1 <= Last_Char_Num)) and (1 <= Max_Char_Str_Len)) and ((|P| + |Q|) <= Max_Length));
    Remember;

VC(s):
     |- (P = (#P o #Q)), (1 <= |Q|)

     |- (Q = Empty_String), (1 <= |Q|)

_____________________

Applied Remember Rule: 

Free Variables:
    E : 'Entry'
    P_Val : N

Statements:
    Assume (((((1 <= Max_Length) and ((min_int <= 0) and (1 <= max_int))) and (1 <= Last_Char_Num)) and (1 <= Max_Char_Str_Len)) and ((|P| + |Q|) <= Max_Length));

VC(s):
     |- (P = (P o Q)), (1 <= |Q|)

     |- (Q = Empty_String), (1 <= |Q|)

_____________________

Applied Assume Rule: 

Free Variables:
    E : 'Entry'
    P_Val : N

Statements:

VC(s):
    ((|P| + |Q|) <= Max_Length), (1 <= Max_Length) |- (P = (P o Q)), (1 <= |Q|)

    ((|P| + |Q|) <= Max_Length), (1 <= Max_Length) |- (Q = Empty_String), (1 <= |Q|)

Reduction Tree(s):
    strict digraph G {
      1 [ label="(((((1 <= Max_Length) and ((min_int <= 0) and (1 <= max_int))) and (1 <= Last_Char_Num)) and (1 <= Max_Char_Str_Len)) and ((|P| + |Q|) <= Max_Length)) |- " shape="box" ];
      2 [ label="(1 <= Max_Length), (min_int <= 0), (1 <= max_int), (1 <= Last_Char_Num), (1 <= Max_Char_Str_Len), ((|P| + |Q|) <= Max_Length) |- " shape="box" color="red" ];
      1 -> 2;
    }

_____________________

