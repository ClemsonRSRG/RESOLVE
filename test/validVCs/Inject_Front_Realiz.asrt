VCs for Inject_Front_Realiz.rb generated Mon Oct 07 15:35:59 EDT 2024

================================= VC(s): =================================

VC 0_1:
Requires Clause for Enqueue at Inject_Front_Realiz.rb(6:2)

Goal:
((1 + |Empty_String|) <= Max_Length)

Given(s):
1. (1 <= Max_Length)
2. ((1 + |Q|) <= Max_Length)

VC 0_2:
Base Case of the Invariant of While Statement at Inject_Front_Realiz.rb(10:15)

Goal:
true

Given(s):

VC 0_3:
Requires Clause for Dequeue at Inject_Front_Realiz.rb(13:3)

Goal:
(1 <= |Q''|)

Given(s):
1. (1 <= |Q''|)

VC 0_4:
Requires Clause for Enqueue at Inject_Front_Realiz.rb(14:3)

Goal:
((1 + |T''|) <= Max_Length)

Given(s):
1. (1 <= |Q''|)
2. (1 <= Max_Length)
3. ((1 + |Q|) <= Max_Length)

VC 0_5:
Inductive Case of Invariant of While Statement at Inject_Front_Realiz.rb(10:15)

Goal:
true

Given(s):
1. (1 <= |Q''|)

VC 0_6:
Termination of While Statement at Inject_Front_Realiz.rb(11:3)

Goal:
((1 + |Q'|) <= |Q''|)

Given(s):
1. (Q'' = (<E''> o Q'))
2. (1 <= |Q''|)

VC 1_1:
Requires Clause for Enqueue at Inject_Front_Realiz.rb(6:2)

Goal:
((1 + |Empty_String|) <= Max_Length)

Given(s):
1. (1 <= Max_Length)
2. ((1 + |Q|) <= Max_Length)

VC 1_2:
Base Case of the Invariant of While Statement at Inject_Front_Realiz.rb(10:15)

Goal:
true

Given(s):

VC 1_3:
Ensures Clause of Inject_at_Front [After Logical Reduction(s)] at Inject_Front_Realiz.rb(3:11)

Goal:
(T' = (<E> o Q)) or 
(1 <= |Q'|)

Given(s):
1. ((1 + |Q|) <= Max_Length)
2. (1 <= Max_Length)

========================= VC Generation Details  =========================

    Enhancement Realization Name:   Inject_Front_Realiz
    Enhancement Name:               Inject_Front_Capability
    Concept Name:                   Queue_Template

==========================================================================

========================= Inject_at_Front =========================

---------------------
Branching Conditions
---------------------
1. Expression at Inject_Front_Realiz.rb(7:10) is true. [Exp: (1 <= |Q|)]
---------------------

Applied Procedure Declaration Rule (Part 1): 

Free Variables:

Statements:
    Assume (((((1 <= Max_Length) and ((min_int <= 0) and (1 <= max_int))) and (1 <= Last_Char_Num)) and (1 <= Max_Char_Str_Len)) and ((1 + |Q|) <= Max_Length));
    Remember;

VC(s):

_____________________

Applied Procedure Declaration Rule (Part 2): 

Free Variables:
    T : Str('Entry')

Statements:
    Assume (((((1 <= Max_Length) and ((min_int <= 0) and (1 <= max_int))) and (1 <= Last_Char_Num)) and (1 <= Max_Char_Str_Len)) and ((1 + |Q|) <= Max_Length));
    Remember;
    _Initialize(T : Queue);
    Enqueue(E, T);

    While ( Less_Or_Equal(1, Length(Q)) )
        changing Q, T, E;
        maintaining true;
        decreasing |Q|;
    do
        Dequeue(E, Q);
        Enqueue(E, T);
    end;

    Q :=: T;
    _Finalize(T : Queue);
    Confirm (Q = (<#E> o #Q));

VC(s):

_____________________

Applied Confirm Rule: 

Free Variables:
    T : Str('Entry')

Statements:
    Assume (((((1 <= Max_Length) and ((min_int <= 0) and (1 <= max_int))) and (1 <= Last_Char_Num)) and (1 <= Max_Char_Str_Len)) and ((1 + |Q|) <= Max_Length));
    Remember;
    _Initialize(T : Queue);
    Enqueue(E, T);

    While ( Less_Or_Equal(1, Length(Q)) )
        changing Q, T, E;
        maintaining true;
        decreasing |Q|;
    do
        Dequeue(E, Q);
        Enqueue(E, T);
    end;

    Q :=: T;
    _Finalize(T : Queue);

VC(s):
     |- (Q = (<#E> o #Q))

_____________________

Applied Variable Finalization Rule (Known Program Type): 

Free Variables:
    T : Str('Entry')

Statements:
    Assume (((((1 <= Max_Length) and ((min_int <= 0) and (1 <= max_int))) and (1 <= Last_Char_Num)) and (1 <= Max_Char_Str_Len)) and ((1 + |Q|) <= Max_Length));
    Remember;
    _Initialize(T : Queue);
    Enqueue(E, T);

    While ( Less_Or_Equal(1, Length(Q)) )
        changing Q, T, E;
        maintaining true;
        decreasing |Q|;
    do
        Dequeue(E, Q);
        Enqueue(E, T);
    end;

    Q :=: T;
    Assume true;

VC(s):
     |- (Q = (<#E> o #Q))

_____________________

Applied Assume Rule and Simplified: 

Free Variables:
    T : Str('Entry')

Statements:
    Assume (((((1 <= Max_Length) and ((min_int <= 0) and (1 <= max_int))) and (1 <= Last_Char_Num)) and (1 <= Max_Char_Str_Len)) and ((1 + |Q|) <= Max_Length));
    Remember;
    _Initialize(T : Queue);
    Enqueue(E, T);

    While ( Less_Or_Equal(1, Length(Q)) )
        changing Q, T, E;
        maintaining true;
        decreasing |Q|;
    do
        Dequeue(E, Q);
        Enqueue(E, T);
    end;

    Q :=: T;

VC(s):
     |- (Q = (<#E> o #Q))

_____________________

Applied Swap Rule: 

Free Variables:
    T : Str('Entry')

Statements:
    Assume (((((1 <= Max_Length) and ((min_int <= 0) and (1 <= max_int))) and (1 <= Last_Char_Num)) and (1 <= Max_Char_Str_Len)) and ((1 + |Q|) <= Max_Length));
    Remember;
    _Initialize(T : Queue);
    Enqueue(E, T);

    While ( Less_Or_Equal(1, Length(Q)) )
        changing Q, T, E;
        maintaining true;
        decreasing |Q|;
    do
        Dequeue(E, Q);
        Enqueue(E, T);
    end;


VC(s):
     |- (T = (<#E> o #Q))

_____________________

Applied While Rule: 

Free Variables:
    T : Str('Entry')
    P_Val' : N

Statements:
    Assume (((((1 <= Max_Length) and ((min_int <= 0) and (1 <= max_int))) and (1 <= Last_Char_Num)) and (1 <= Max_Char_Str_Len)) and ((1 + |Q|) <= Max_Length));
    Remember;
    _Initialize(T : Queue);
    Enqueue(E, T);
    Confirm true;
    Change Q, T, E;
    Assume (true and (P_Val' = |Q|));

    If ( Less_Or_Equal(1, Length(Q)) ) then
        Dequeue(E, Q);
        Enqueue(E, T);
        Confirm (true and ((1 + |Q|) <= P_Val'));
    Else
        VC_Confirm
             |- (T = (<#E> o #Q))

    end;


VC(s):

_____________________

Applied If-Part Rule: 

Free Variables:
    T : Str('Entry')
    P_Val' : N

Statements:
    Assume (((((1 <= Max_Length) and ((min_int <= 0) and (1 <= max_int))) and (1 <= Last_Char_Num)) and (1 <= Max_Char_Str_Len)) and ((1 + |Q|) <= Max_Length));
    Remember;
    _Initialize(T : Queue);
    Enqueue(E, T);
    Confirm true;
    Change Q, T, E;
    Assume (true and (P_Val' = |Q|));
    Stipulate (1 <= |Q|);
    Dequeue(E, Q);
    Enqueue(E, T);
    Confirm (true and ((1 + |Q|) <= P_Val'));

VC(s):

_____________________

Applied Confirm Rule: 

Free Variables:
    T : Str('Entry')
    P_Val' : N

Statements:
    Assume (((((1 <= Max_Length) and ((min_int <= 0) and (1 <= max_int))) and (1 <= Last_Char_Num)) and (1 <= Max_Char_Str_Len)) and ((1 + |Q|) <= Max_Length));
    Remember;
    _Initialize(T : Queue);
    Enqueue(E, T);
    Confirm true;
    Change Q, T, E;
    Assume (true and (P_Val' = |Q|));
    Stipulate (1 <= |Q|);
    Dequeue(E, Q);
    Enqueue(E, T);

VC(s):
     |- true

     |- ((1 + |Q|) <= P_Val')

Reduction Tree(s):
    strict digraph G {
      1 [ label=" |- (true and ((1 + |Q|) <= P_Val'))" shape="box" ];
      2 [ label=" |- true" shape="box" color="red" ];
      3 [ label=" |- ((1 + |Q|) <= P_Val')" shape="box" color="red" ];
      1 -> 2;
      1 -> 3;
    }

_____________________

Applied Call Rule: 

Free Variables:
    T : Str('Entry')
    P_Val' : N
    E' : 'Entry'
    T' : Str('Entry')

Statements:
    Assume (((((1 <= Max_Length) and ((min_int <= 0) and (1 <= max_int))) and (1 <= Last_Char_Num)) and (1 <= Max_Char_Str_Len)) and ((1 + |Q|) <= Max_Length));
    Remember;
    _Initialize(T : Queue);
    Enqueue(E, T);
    Confirm true;
    Change Q, T, E;
    Assume (true and (P_Val' = |Q|));
    Stipulate (1 <= |Q|);
    Dequeue(E, Q);
    Confirm ((1 + |T|) <= Max_Length);
    Assume (T' = (T o <E>));

VC(s):
     |- true

     |- ((1 + |Q|) <= P_Val')

_____________________

Applied Assume Rule: 

Free Variables:
    T : Str('Entry')
    P_Val' : N
    E' : 'Entry'
    T' : Str('Entry')

Statements:
    Assume (((((1 <= Max_Length) and ((min_int <= 0) and (1 <= max_int))) and (1 <= Last_Char_Num)) and (1 <= Max_Char_Str_Len)) and ((1 + |Q|) <= Max_Length));
    Remember;
    _Initialize(T : Queue);
    Enqueue(E, T);
    Confirm true;
    Change Q, T, E;
    Assume (true and (P_Val' = |Q|));
    Stipulate (1 <= |Q|);
    Dequeue(E, Q);
    Confirm ((1 + |T|) <= Max_Length);

VC(s):
     |- true

     |- ((1 + |Q|) <= P_Val')

_____________________

Applied Confirm Rule: 

Free Variables:
    T : Str('Entry')
    P_Val' : N
    E' : 'Entry'
    T' : Str('Entry')

Statements:
    Assume (((((1 <= Max_Length) and ((min_int <= 0) and (1 <= max_int))) and (1 <= Last_Char_Num)) and (1 <= Max_Char_Str_Len)) and ((1 + |Q|) <= Max_Length));
    Remember;
    _Initialize(T : Queue);
    Enqueue(E, T);
    Confirm true;
    Change Q, T, E;
    Assume (true and (P_Val' = |Q|));
    Stipulate (1 <= |Q|);
    Dequeue(E, Q);

VC(s):
     |- ((1 + |T|) <= Max_Length)

     |- true

     |- ((1 + |Q|) <= P_Val')

_____________________

Applied Call Rule: 

Free Variables:
    T : Str('Entry')
    P_Val' : N
    E' : 'Entry'
    T' : Str('Entry')
    E'' : 'Entry'
    Q' : Str('Entry')

Statements:
    Assume (((((1 <= Max_Length) and ((min_int <= 0) and (1 <= max_int))) and (1 <= Last_Char_Num)) and (1 <= Max_Char_Str_Len)) and ((1 + |Q|) <= Max_Length));
    Remember;
    _Initialize(T : Queue);
    Enqueue(E, T);
    Confirm true;
    Change Q, T, E;
    Assume (true and (P_Val' = |Q|));
    Stipulate (1 <= |Q|);
    Confirm (1 <= |Q|);
    Assume (Q = (<E''> o Q'));

VC(s):
     |- ((1 + |T|) <= Max_Length)

     |- true

     |- ((1 + |Q'|) <= P_Val')

_____________________

Applied Assume Rule: 

Free Variables:
    T : Str('Entry')
    P_Val' : N
    E' : 'Entry'
    T' : Str('Entry')
    E'' : 'Entry'
    Q' : Str('Entry')

Statements:
    Assume (((((1 <= Max_Length) and ((min_int <= 0) and (1 <= max_int))) and (1 <= Last_Char_Num)) and (1 <= Max_Char_Str_Len)) and ((1 + |Q|) <= Max_Length));
    Remember;
    _Initialize(T : Queue);
    Enqueue(E, T);
    Confirm true;
    Change Q, T, E;
    Assume (true and (P_Val' = |Q|));
    Stipulate (1 <= |Q|);
    Confirm (1 <= |Q|);

VC(s):
     |- ((1 + |T|) <= Max_Length)

     |- true

    (Q = (<E''> o Q')) |- ((1 + |Q'|) <= P_Val')

_____________________

Applied Confirm Rule: 

Free Variables:
    T : Str('Entry')
    P_Val' : N
    E' : 'Entry'
    T' : Str('Entry')
    E'' : 'Entry'
    Q' : Str('Entry')

Statements:
    Assume (((((1 <= Max_Length) and ((min_int <= 0) and (1 <= max_int))) and (1 <= Last_Char_Num)) and (1 <= Max_Char_Str_Len)) and ((1 + |Q|) <= Max_Length));
    Remember;
    _Initialize(T : Queue);
    Enqueue(E, T);
    Confirm true;
    Change Q, T, E;
    Assume (true and (P_Val' = |Q|));
    Stipulate (1 <= |Q|);

VC(s):
     |- (1 <= |Q|)

     |- ((1 + |T|) <= Max_Length)

     |- true

    (Q = (<E''> o Q')) |- ((1 + |Q'|) <= P_Val')

_____________________

Applied Stipulate Assume Rule: 

Free Variables:
    T : Str('Entry')
    P_Val' : N
    E' : 'Entry'
    T' : Str('Entry')
    E'' : 'Entry'
    Q' : Str('Entry')

Statements:
    Assume (((((1 <= Max_Length) and ((min_int <= 0) and (1 <= max_int))) and (1 <= Last_Char_Num)) and (1 <= Max_Char_Str_Len)) and ((1 + |Q|) <= Max_Length));
    Remember;
    _Initialize(T : Queue);
    Enqueue(E, T);
    Confirm true;
    Change Q, T, E;
    Assume (true and (P_Val' = |Q|));

VC(s):
    (1 <= |Q|) |- (1 <= |Q|)

    (1 <= |Q|) |- ((1 + |T|) <= Max_Length)

    (1 <= |Q|) |- true

    (Q = (<E''> o Q')), (1 <= |Q|) |- ((1 + |Q'|) <= P_Val')

_____________________

Applied Assume Rule: 

Free Variables:
    T : Str('Entry')
    P_Val' : N
    E' : 'Entry'
    T' : Str('Entry')
    E'' : 'Entry'
    Q' : Str('Entry')

Statements:
    Assume (((((1 <= Max_Length) and ((min_int <= 0) and (1 <= max_int))) and (1 <= Last_Char_Num)) and (1 <= Max_Char_Str_Len)) and ((1 + |Q|) <= Max_Length));
    Remember;
    _Initialize(T : Queue);
    Enqueue(E, T);
    Confirm true;
    Change Q, T, E;

VC(s):
    (1 <= |Q|) |- (1 <= |Q|)

    (1 <= |Q|) |- ((1 + |T|) <= Max_Length)

    (1 <= |Q|) |- true

    (Q = (<E''> o Q')), (1 <= |Q|) |- ((1 + |Q'|) <= |Q|)

Reduction Tree(s):
    strict digraph G {
      1 [ label="(true and (P_Val' = |Q|)) |- " shape="box" ];
      2 [ label="true, (P_Val' = |Q|) |- " shape="box" color="red" ];
      1 -> 2;
    }

_____________________

Applied Change Rule: 

Free Variables:
    T : Str('Entry')
    P_Val' : N
    E' : 'Entry'
    T' : Str('Entry')
    E'' : 'Entry'
    Q' : Str('Entry')
    Q'' : Str('Entry')
    T'' : Str('Entry')
    E''' : 'Entry'

Statements:
    Assume (((((1 <= Max_Length) and ((min_int <= 0) and (1 <= max_int))) and (1 <= Last_Char_Num)) and (1 <= Max_Char_Str_Len)) and ((1 + |Q|) <= Max_Length));
    Remember;
    _Initialize(T : Queue);
    Enqueue(E, T);
    Confirm true;

VC(s):
    (1 <= |Q''|) |- (1 <= |Q''|)

    (1 <= |Q''|) |- ((1 + |T''|) <= Max_Length)

    (1 <= |Q''|) |- true

    (Q'' = (<E''> o Q')), (1 <= |Q''|) |- ((1 + |Q'|) <= |Q''|)

_____________________

Applied Confirm Rule: 

Free Variables:
    T : Str('Entry')
    P_Val' : N
    E' : 'Entry'
    T' : Str('Entry')
    E'' : 'Entry'
    Q' : Str('Entry')
    Q'' : Str('Entry')
    T'' : Str('Entry')
    E''' : 'Entry'

Statements:
    Assume (((((1 <= Max_Length) and ((min_int <= 0) and (1 <= max_int))) and (1 <= Last_Char_Num)) and (1 <= Max_Char_Str_Len)) and ((1 + |Q|) <= Max_Length));
    Remember;
    _Initialize(T : Queue);
    Enqueue(E, T);

VC(s):
     |- true

    (1 <= |Q''|) |- (1 <= |Q''|)

    (1 <= |Q''|) |- ((1 + |T''|) <= Max_Length)

    (1 <= |Q''|) |- true

    (Q'' = (<E''> o Q')), (1 <= |Q''|) |- ((1 + |Q'|) <= |Q''|)

_____________________

Applied Call Rule: 

Free Variables:
    T : Str('Entry')
    P_Val' : N
    E' : 'Entry'
    T' : Str('Entry')
    E'' : 'Entry'
    Q' : Str('Entry')
    Q'' : Str('Entry')
    T'' : Str('Entry')
    E''' : 'Entry'
    E'''' : 'Entry'
    T''' : Str('Entry')

Statements:
    Assume (((((1 <= Max_Length) and ((min_int <= 0) and (1 <= max_int))) and (1 <= Last_Char_Num)) and (1 <= Max_Char_Str_Len)) and ((1 + |Q|) <= Max_Length));
    Remember;
    _Initialize(T : Queue);
    Confirm ((1 + |T|) <= Max_Length);
    Assume (T''' = (T o <E>));

VC(s):
     |- true

    (1 <= |Q''|) |- (1 <= |Q''|)

    (1 <= |Q''|) |- ((1 + |T''|) <= Max_Length)

    (1 <= |Q''|) |- true

    (Q'' = (<E''> o Q')), (1 <= |Q''|) |- ((1 + |Q'|) <= |Q''|)

_____________________

Applied Assume Rule: 

Free Variables:
    T : Str('Entry')
    P_Val' : N
    E' : 'Entry'
    T' : Str('Entry')
    E'' : 'Entry'
    Q' : Str('Entry')
    Q'' : Str('Entry')
    T'' : Str('Entry')
    E''' : 'Entry'
    E'''' : 'Entry'
    T''' : Str('Entry')

Statements:
    Assume (((((1 <= Max_Length) and ((min_int <= 0) and (1 <= max_int))) and (1 <= Last_Char_Num)) and (1 <= Max_Char_Str_Len)) and ((1 + |Q|) <= Max_Length));
    Remember;
    _Initialize(T : Queue);
    Confirm ((1 + |T|) <= Max_Length);

VC(s):
     |- true

    (1 <= |Q''|) |- (1 <= |Q''|)

    (1 <= |Q''|) |- ((1 + |T''|) <= Max_Length)

    (1 <= |Q''|) |- true

    (Q'' = (<E''> o Q')), (1 <= |Q''|) |- ((1 + |Q'|) <= |Q''|)

_____________________

Applied Confirm Rule: 

Free Variables:
    T : Str('Entry')
    P_Val' : N
    E' : 'Entry'
    T' : Str('Entry')
    E'' : 'Entry'
    Q' : Str('Entry')
    Q'' : Str('Entry')
    T'' : Str('Entry')
    E''' : 'Entry'
    E'''' : 'Entry'
    T''' : Str('Entry')

Statements:
    Assume (((((1 <= Max_Length) and ((min_int <= 0) and (1 <= max_int))) and (1 <= Last_Char_Num)) and (1 <= Max_Char_Str_Len)) and ((1 + |Q|) <= Max_Length));
    Remember;
    _Initialize(T : Queue);

VC(s):
     |- ((1 + |T|) <= Max_Length)

     |- true

    (1 <= |Q''|) |- (1 <= |Q''|)

    (1 <= |Q''|) |- ((1 + |T''|) <= Max_Length)

    (1 <= |Q''|) |- true

    (Q'' = (<E''> o Q')), (1 <= |Q''|) |- ((1 + |Q'|) <= |Q''|)

_____________________

Applied Variable Declaration/Initialization Rule (Known Program Type): 

Free Variables:
    T : Str('Entry')
    P_Val' : N
    E' : 'Entry'
    T' : Str('Entry')
    E'' : 'Entry'
    Q' : Str('Entry')
    Q'' : Str('Entry')
    T'' : Str('Entry')
    E''' : 'Entry'
    E'''' : 'Entry'
    T''' : Str('Entry')

Statements:
    Assume (((((1 <= Max_Length) and ((min_int <= 0) and (1 <= max_int))) and (1 <= Last_Char_Num)) and (1 <= Max_Char_Str_Len)) and ((1 + |Q|) <= Max_Length));
    Remember;
    Assume (T = Empty_String);

VC(s):
     |- ((1 + |T|) <= Max_Length)

     |- true

    (1 <= |Q''|) |- (1 <= |Q''|)

    (1 <= |Q''|) |- ((1 + |T''|) <= Max_Length)

    (1 <= |Q''|) |- true

    (Q'' = (<E''> o Q')), (1 <= |Q''|) |- ((1 + |Q'|) <= |Q''|)

_____________________

Applied Assume Rule: 

Free Variables:
    T : Str('Entry')
    P_Val' : N
    E' : 'Entry'
    T' : Str('Entry')
    E'' : 'Entry'
    Q' : Str('Entry')
    Q'' : Str('Entry')
    T'' : Str('Entry')
    E''' : 'Entry'
    E'''' : 'Entry'
    T''' : Str('Entry')

Statements:
    Assume (((((1 <= Max_Length) and ((min_int <= 0) and (1 <= max_int))) and (1 <= Last_Char_Num)) and (1 <= Max_Char_Str_Len)) and ((1 + |Q|) <= Max_Length));
    Remember;

VC(s):
     |- ((1 + |Empty_String|) <= Max_Length)

     |- true

    (1 <= |Q''|) |- (1 <= |Q''|)

    (1 <= |Q''|) |- ((1 + |T''|) <= Max_Length)

    (1 <= |Q''|) |- true

    (Q'' = (<E''> o Q')), (1 <= |Q''|) |- ((1 + |Q'|) <= |Q''|)

_____________________

Applied Remember Rule: 

Free Variables:
    T : Str('Entry')
    P_Val' : N
    E' : 'Entry'
    T' : Str('Entry')
    E'' : 'Entry'
    Q' : Str('Entry')
    Q'' : Str('Entry')
    T'' : Str('Entry')
    E''' : 'Entry'
    E'''' : 'Entry'
    T''' : Str('Entry')

Statements:
    Assume (((((1 <= Max_Length) and ((min_int <= 0) and (1 <= max_int))) and (1 <= Last_Char_Num)) and (1 <= Max_Char_Str_Len)) and ((1 + |Q|) <= Max_Length));

VC(s):
     |- ((1 + |Empty_String|) <= Max_Length)

     |- true

    (1 <= |Q''|) |- (1 <= |Q''|)

    (1 <= |Q''|) |- ((1 + |T''|) <= Max_Length)

    (1 <= |Q''|) |- true

    (Q'' = (<E''> o Q')), (1 <= |Q''|) |- ((1 + |Q'|) <= |Q''|)

_____________________

Applied Assume Rule: 

Free Variables:
    T : Str('Entry')
    P_Val' : N
    E' : 'Entry'
    T' : Str('Entry')
    E'' : 'Entry'
    Q' : Str('Entry')
    Q'' : Str('Entry')
    T'' : Str('Entry')
    E''' : 'Entry'
    E'''' : 'Entry'
    T''' : Str('Entry')

Statements:

VC(s):
    (1 <= Max_Length), ((1 + |Q|) <= Max_Length) |- ((1 + |Empty_String|) <= Max_Length)

     |- true

    (1 <= |Q''|) |- (1 <= |Q''|)

    (1 <= |Q''|), (1 <= Max_Length), ((1 + |Q|) <= Max_Length) |- ((1 + |T''|) <= Max_Length)

    (1 <= |Q''|) |- true

    (Q'' = (<E''> o Q')), (1 <= |Q''|) |- ((1 + |Q'|) <= |Q''|)

Reduction Tree(s):
    strict digraph G {
      1 [ label="(((((1 <= Max_Length) and ((min_int <= 0) and (1 <= max_int))) and (1 <= Last_Char_Num)) and (1 <= Max_Char_Str_Len)) and ((1 + |Q|) <= Max_Length)) |- " shape="box" ];
      2 [ label="(1 <= Max_Length), (min_int <= 0), (1 <= max_int), (1 <= Last_Char_Num), (1 <= Max_Char_Str_Len), ((1 + |Q|) <= Max_Length) |- " shape="box" color="red" ];
      1 -> 2;
    }

_____________________

========================= Inject_at_Front =========================

---------------------
Branching Conditions
---------------------
1. Expression at Inject_Front_Realiz.rb(7:10) is false. [Exp: not((1 <= |Q|))]
---------------------

Applied Else-Part Rule: 

Free Variables:
    T : Str('Entry')
    P_Val' : N

Statements:
    Assume (((((1 <= Max_Length) and ((min_int <= 0) and (1 <= max_int))) and (1 <= Last_Char_Num)) and (1 <= Max_Char_Str_Len)) and ((1 + |Q|) <= Max_Length));
    Remember;
    _Initialize(T : Queue);
    Enqueue(E, T);
    Confirm true;
    Change Q, T, E;
    Assume (true and (P_Val' = |Q|));
    Stipulate not((1 <= |Q|));
    VC_Confirm
         |- (T = (<#E> o #Q))


VC(s):

_____________________

Applied VCConfirm Rule: 

Free Variables:
    T : Str('Entry')
    P_Val' : N

Statements:
    Assume (((((1 <= Max_Length) and ((min_int <= 0) and (1 <= max_int))) and (1 <= Last_Char_Num)) and (1 <= Max_Char_Str_Len)) and ((1 + |Q|) <= Max_Length));
    Remember;
    _Initialize(T : Queue);
    Enqueue(E, T);
    Confirm true;
    Change Q, T, E;
    Assume (true and (P_Val' = |Q|));
    Stipulate not((1 <= |Q|));

VC(s):
     |- (T = (<#E> o #Q))

_____________________

Applied Stipulate Assume Rule: 

Free Variables:
    T : Str('Entry')
    P_Val' : N

Statements:
    Assume (((((1 <= Max_Length) and ((min_int <= 0) and (1 <= max_int))) and (1 <= Last_Char_Num)) and (1 <= Max_Char_Str_Len)) and ((1 + |Q|) <= Max_Length));
    Remember;
    _Initialize(T : Queue);
    Enqueue(E, T);
    Confirm true;
    Change Q, T, E;
    Assume (true and (P_Val' = |Q|));

VC(s):
     |- (T = (<#E> o #Q)), (1 <= |Q|)

Reduction Tree(s):
    strict digraph G {
      1 [ label="not((1 <= |Q|)) |- (T = (<#E> o #Q))" shape="box" ];
      2 [ label=" |- (T = (<#E> o #Q)), (1 <= |Q|)" shape="box" color="red" ];
      1 -> 2;
    }

_____________________

Applied Assume Rule: 

Free Variables:
    T : Str('Entry')
    P_Val' : N

Statements:
    Assume (((((1 <= Max_Length) and ((min_int <= 0) and (1 <= max_int))) and (1 <= Last_Char_Num)) and (1 <= Max_Char_Str_Len)) and ((1 + |Q|) <= Max_Length));
    Remember;
    _Initialize(T : Queue);
    Enqueue(E, T);
    Confirm true;
    Change Q, T, E;

VC(s):
     |- (T = (<#E> o #Q)), (1 <= |Q|)

Reduction Tree(s):
    strict digraph G {
      1 [ label="(true and (P_Val' = |Q|)) |- " shape="box" ];
      2 [ label="true, (P_Val' = |Q|) |- " shape="box" color="red" ];
      1 -> 2;
    }

_____________________

Applied Change Rule: 

Free Variables:
    T : Str('Entry')
    P_Val' : N
    Q' : Str('Entry')
    T' : Str('Entry')
    E' : 'Entry'

Statements:
    Assume (((((1 <= Max_Length) and ((min_int <= 0) and (1 <= max_int))) and (1 <= Last_Char_Num)) and (1 <= Max_Char_Str_Len)) and ((1 + |Q|) <= Max_Length));
    Remember;
    _Initialize(T : Queue);
    Enqueue(E, T);
    Confirm true;

VC(s):
     |- (T' = (<#E> o #Q)), (1 <= |Q'|)

_____________________

Applied Confirm Rule: 

Free Variables:
    T : Str('Entry')
    P_Val' : N
    Q' : Str('Entry')
    T' : Str('Entry')
    E' : 'Entry'

Statements:
    Assume (((((1 <= Max_Length) and ((min_int <= 0) and (1 <= max_int))) and (1 <= Last_Char_Num)) and (1 <= Max_Char_Str_Len)) and ((1 + |Q|) <= Max_Length));
    Remember;
    _Initialize(T : Queue);
    Enqueue(E, T);

VC(s):
     |- true

     |- (T' = (<#E> o #Q)), (1 <= |Q'|)

_____________________

Applied Call Rule: 

Free Variables:
    T : Str('Entry')
    P_Val' : N
    Q' : Str('Entry')
    T' : Str('Entry')
    E' : 'Entry'
    E'' : 'Entry'
    T'' : Str('Entry')

Statements:
    Assume (((((1 <= Max_Length) and ((min_int <= 0) and (1 <= max_int))) and (1 <= Last_Char_Num)) and (1 <= Max_Char_Str_Len)) and ((1 + |Q|) <= Max_Length));
    Remember;
    _Initialize(T : Queue);
    Confirm ((1 + |T|) <= Max_Length);
    Assume (T'' = (T o <E>));

VC(s):
     |- true

     |- (T' = (<#E> o #Q)), (1 <= |Q'|)

_____________________

Applied Assume Rule: 

Free Variables:
    T : Str('Entry')
    P_Val' : N
    Q' : Str('Entry')
    T' : Str('Entry')
    E' : 'Entry'
    E'' : 'Entry'
    T'' : Str('Entry')

Statements:
    Assume (((((1 <= Max_Length) and ((min_int <= 0) and (1 <= max_int))) and (1 <= Last_Char_Num)) and (1 <= Max_Char_Str_Len)) and ((1 + |Q|) <= Max_Length));
    Remember;
    _Initialize(T : Queue);
    Confirm ((1 + |T|) <= Max_Length);

VC(s):
     |- true

     |- (T' = (<#E> o #Q)), (1 <= |Q'|)

_____________________

Applied Confirm Rule: 

Free Variables:
    T : Str('Entry')
    P_Val' : N
    Q' : Str('Entry')
    T' : Str('Entry')
    E' : 'Entry'
    E'' : 'Entry'
    T'' : Str('Entry')

Statements:
    Assume (((((1 <= Max_Length) and ((min_int <= 0) and (1 <= max_int))) and (1 <= Last_Char_Num)) and (1 <= Max_Char_Str_Len)) and ((1 + |Q|) <= Max_Length));
    Remember;
    _Initialize(T : Queue);

VC(s):
     |- ((1 + |T|) <= Max_Length)

     |- true

     |- (T' = (<#E> o #Q)), (1 <= |Q'|)

_____________________

Applied Variable Declaration/Initialization Rule (Known Program Type): 

Free Variables:
    T : Str('Entry')
    P_Val' : N
    Q' : Str('Entry')
    T' : Str('Entry')
    E' : 'Entry'
    E'' : 'Entry'
    T'' : Str('Entry')

Statements:
    Assume (((((1 <= Max_Length) and ((min_int <= 0) and (1 <= max_int))) and (1 <= Last_Char_Num)) and (1 <= Max_Char_Str_Len)) and ((1 + |Q|) <= Max_Length));
    Remember;
    Assume (T = Empty_String);

VC(s):
     |- ((1 + |T|) <= Max_Length)

     |- true

     |- (T' = (<#E> o #Q)), (1 <= |Q'|)

_____________________

Applied Assume Rule: 

Free Variables:
    T : Str('Entry')
    P_Val' : N
    Q' : Str('Entry')
    T' : Str('Entry')
    E' : 'Entry'
    E'' : 'Entry'
    T'' : Str('Entry')

Statements:
    Assume (((((1 <= Max_Length) and ((min_int <= 0) and (1 <= max_int))) and (1 <= Last_Char_Num)) and (1 <= Max_Char_Str_Len)) and ((1 + |Q|) <= Max_Length));
    Remember;

VC(s):
     |- ((1 + |Empty_String|) <= Max_Length)

     |- true

     |- (T' = (<#E> o #Q)), (1 <= |Q'|)

_____________________

Applied Remember Rule: 

Free Variables:
    T : Str('Entry')
    P_Val' : N
    Q' : Str('Entry')
    T' : Str('Entry')
    E' : 'Entry'
    E'' : 'Entry'
    T'' : Str('Entry')

Statements:
    Assume (((((1 <= Max_Length) and ((min_int <= 0) and (1 <= max_int))) and (1 <= Last_Char_Num)) and (1 <= Max_Char_Str_Len)) and ((1 + |Q|) <= Max_Length));

VC(s):
     |- ((1 + |Empty_String|) <= Max_Length)

     |- true

     |- (T' = (<E> o Q)), (1 <= |Q'|)

_____________________

Applied Assume Rule: 

Free Variables:
    T : Str('Entry')
    P_Val' : N
    Q' : Str('Entry')
    T' : Str('Entry')
    E' : 'Entry'
    E'' : 'Entry'
    T'' : Str('Entry')

Statements:

VC(s):
    (1 <= Max_Length), ((1 + |Q|) <= Max_Length) |- ((1 + |Empty_String|) <= Max_Length)

     |- true

    ((1 + |Q|) <= Max_Length), (1 <= Max_Length) |- (T' = (<E> o Q)), (1 <= |Q'|)

Reduction Tree(s):
    strict digraph G {
      1 [ label="(((((1 <= Max_Length) and ((min_int <= 0) and (1 <= max_int))) and (1 <= Last_Char_Num)) and (1 <= Max_Char_Str_Len)) and ((1 + |Q|) <= Max_Length)) |- " shape="box" ];
      2 [ label="(1 <= Max_Length), (min_int <= 0), (1 <= max_int), (1 <= Last_Char_Num), (1 <= Max_Char_Str_Len), ((1 + |Q|) <= Max_Length) |- " shape="box" color="red" ];
      1 -> 2;
    }

_____________________

